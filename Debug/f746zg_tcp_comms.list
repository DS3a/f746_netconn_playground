
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ad60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  0801af30  0801af30  0002af30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e7e8  0801e7e8  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801e7e8  0801e7e8  0002e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e7f0  0801e7f0  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e7f0  0801e7f0  0002e7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e7f4  0801e7f4  0002e7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801e7f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801e9f8  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801ea98  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000119e0  20000340  0801eb38  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20011d20  0801eb38  00031d20  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   000347b8  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007bcf  00000000  00000000  00064b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002458  00000000  00000000  0006c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036e04  00000000  00000000  0006eb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037336  00000000  00000000  000a5954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112ef1  00000000  00000000  000dcc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001efb7b  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 000022a0  00000000  00000000  001efbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a87c  00000000  00000000  001f1e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801af18 	.word	0x0801af18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	0801af18 	.word	0x0801af18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 fb4e 	bl	8001734 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f001 f9aa 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f844 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f934 	bl	8001314 <MX_GPIO_Init>
  MX_TIM3_Init();
 80010ac:	f000 f8d8 	bl	8001260 <MX_TIM3_Init>
  MX_DAC_Init();
 80010b0:	f000 f8ac 	bl	800120c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b4:	f005 fd3e 	bl	8006b34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <main+0x70>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <main+0x74>)
 80010be:	f005 fdcb 	bl	8006c58 <osThreadNew>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <main+0x78>)
 80010c6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <main+0x7c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x80>)
 80010ce:	f005 fdc3 	bl	8006c58 <osThreadNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x84>)
 80010d6:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <main+0x88>)
 80010da:	2100      	movs	r1, #0
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <main+0x8c>)
 80010de:	f005 fdbb 	bl	8006c58 <osThreadNew>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x90>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* creation of control_systems */
  control_systemsHandle = osThreadNew(start_control_systems, NULL, &control_systems_attributes);
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <main+0x94>)
 80010ea:	2100      	movs	r1, #0
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0x98>)
 80010ee:	f005 fdb3 	bl	8006c58 <osThreadNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <main+0x9c>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f8:	f005 fd50 	bl	8006b9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x6c>
 80010fe:	bf00      	nop
 8001100:	0801e138 	.word	0x0801e138
 8001104:	08001495 	.word	0x08001495
 8001108:	200003bc 	.word	0x200003bc
 800110c:	0801e15c 	.word	0x0801e15c
 8001110:	080014b1 	.word	0x080014b1
 8001114:	200003c0 	.word	0x200003c0
 8001118:	0801e180 	.word	0x0801e180
 800111c:	080015f9 	.word	0x080015f9
 8001120:	200003c4 	.word	0x200003c4
 8001124:	0801e1a4 	.word	0x0801e1a4
 8001128:	08001621 	.word	0x08001621
 800112c:	200003c8 	.word	0x200003c8

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f016 fe49 	bl	8017dd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <SystemClock_Config+0xd4>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xd4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <SystemClock_Config+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a25      	ldr	r2, [pc, #148]	; (8001208 <SystemClock_Config+0xd8>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xd8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001198:	2319      	movs	r3, #25
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800119c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f810 	bl	80041d4 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ba:	f000 fafb 	bl	80017b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011be:	f002 ffb9 	bl	8004134 <HAL_PWREx_EnableOverDrive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c8:	f000 faf4 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2107      	movs	r1, #7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fa96 	bl	800471c <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f6:	f000 fadd 	bl	80017b4 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_DAC_Init+0x4c>)
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <MX_DAC_Init+0x50>)
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_DAC_Init+0x4c>)
 8001222:	f001 faa1 	bl	8002768 <HAL_DAC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800122c:	f000 fac2 	bl	80017b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_DAC_Init+0x4c>)
 8001240:	f001 fab4 	bl	80027ac <HAL_DAC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800124a:	f000 fab3 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000035c 	.word	0x2000035c
 800125c:	40007400 	.word	0x40007400

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_TIM3_Init+0xac>)
 8001286:	4a22      	ldr	r2, [pc, #136]	; (8001310 <MX_TIM3_Init+0xb0>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_TIM3_Init+0xac>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_TIM3_Init+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <MX_TIM3_Init+0xac>)
 8001298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_TIM3_Init+0xac>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_TIM3_Init+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_TIM3_Init+0xac>)
 80012ac:	f003 fd14 	bl	8004cd8 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 fa7d 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_TIM3_Init+0xac>)
 80012ca:	f004 fd3b 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 fa6e 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM3_Init+0xac>)
 80012f0:	f003 ff64 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012fa:	f000 fa5b 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM3_Init+0xac>)
 8001300:	f000 fbf8 	bl	8001af4 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000370 	.word	0x20000370
 8001310:	40000400 	.word	0x40000400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	4b55      	ldr	r3, [pc, #340]	; (8001480 <MX_GPIO_Init+0x16c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a54      	ldr	r2, [pc, #336]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b4f      	ldr	r3, [pc, #316]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <MX_GPIO_Init+0x16c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a48      	ldr	r2, [pc, #288]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a42      	ldr	r2, [pc, #264]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <MX_GPIO_Init+0x16c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a3c      	ldr	r2, [pc, #240]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <MX_GPIO_Init+0x16c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a36      	ldr	r2, [pc, #216]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a30      	ldr	r2, [pc, #192]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <MX_GPIO_Init+0x16c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2120      	movs	r1, #32
 80013d6:	482b      	ldr	r0, [pc, #172]	; (8001484 <MX_GPIO_Init+0x170>)
 80013d8:	f002 fe92 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DAC1_Pin|DAC4_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013e2:	4829      	ldr	r0, [pc, #164]	; (8001488 <MX_GPIO_Init+0x174>)
 80013e4:	f002 fe8c 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DAC2_Pin|DAC3_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80013ee:	4827      	ldr	r0, [pc, #156]	; (800148c <MX_GPIO_Init+0x178>)
 80013f0:	f002 fe86 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fa:	4825      	ldr	r0, [pc, #148]	; (8001490 <MX_GPIO_Init+0x17c>)
 80013fc:	f002 fe80 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001400:	2320      	movs	r3, #32
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <MX_GPIO_Init+0x170>)
 8001418:	f002 fcc6 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC1_Pin DAC4_Pin */
  GPIO_InitStruct.Pin = DAC1_Pin|DAC4_Pin;
 800141c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_GPIO_Init+0x174>)
 8001436:	f002 fcb7 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC2_Pin DAC3_Pin */
  GPIO_InitStruct.Pin = DAC2_Pin|DAC3_Pin;
 800143a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <MX_GPIO_Init+0x178>)
 8001454:	f002 fca8 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_GPIO_Init+0x17c>)
 8001472:	f002 fc99 	bl	8003da8 <HAL_GPIO_Init>

}
 8001476:	bf00      	nop
 8001478:	3730      	adds	r7, #48	; 0x30
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021000 	.word	0x40021000
 8001490:	40020400 	.word	0x40020400

08001494 <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800149c:	f004 fd08 	bl	8005eb0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 80014a0:	f000 fdf8 	bl	8002094 <tcpclient_init>
  for (;;) {
    osDelay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f005 fc7d 	bl	8006da4 <osDelay>
 80014aa:	e7fb      	b.n	80014a4 <start_conn_handler+0x10>
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af06      	add	r7, sp, #24
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  DC_MOTOR_Init(DC_MOTOR_CfgParam[0]);
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <start_motor_control+0x128>)
 80014ba:	466c      	mov	r4, sp
 80014bc:	f103 0210 	add.w	r2, r3, #16
 80014c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c8:	f000 f97a 	bl	80017c0 <DC_MOTOR_Init>
  /* Infinite loop */
  for(;;)
  {
    set_idx(dac_values);
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <start_motor_control+0x12c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fcf5 	bl	8001ec0 <set_idx>
    DC_MOTOR_Start(DC_MOTOR_CfgParam[0], motor_dir, motor_speed);
 80014d6:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <start_motor_control+0x130>)
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <start_motor_control+0x134>)
 80014dc:	8819      	ldrh	r1, [r3, #0]
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <start_motor_control+0x128>)
 80014e0:	9104      	str	r1, [sp, #16]
 80014e2:	9203      	str	r2, [sp, #12]
 80014e4:	466c      	mov	r4, sp
 80014e6:	f103 0210 	add.w	r2, r3, #16
 80014ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f2:	f000 fa47 	bl	8001984 <DC_MOTOR_Start>
    dac_values = 32*(dac_voltage/3.3);
 80014f6:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <start_motor_control+0x138>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_f2d>
 8001500:	a333      	add	r3, pc, #204	; (adr r3, 80015d0 <start_motor_control+0x120>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f9c1 	bl	800088c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <start_motor_control+0x13c>)
 8001518:	f7ff f88e 	bl	8000638 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb22 	bl	8000b6c <__aeabi_d2uiz>
 8001528:	4603      	mov	r3, r0
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <start_motor_control+0x12c>)
 800152e:	701a      	strb	r2, [r3, #0]

    if ((dac_values & 0b0001) == 0b0001) {
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <start_motor_control+0x12c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <start_motor_control+0x9a>
    	HAL_GPIO_WritePin(DAC1_GPIO_Port, DAC1_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001542:	482b      	ldr	r0, [pc, #172]	; (80015f0 <start_motor_control+0x140>)
 8001544:	f002 fddc 	bl	8004100 <HAL_GPIO_WritePin>
 8001548:	e005      	b.n	8001556 <start_motor_control+0xa6>
    } else {
    	HAL_GPIO_WritePin(DAC1_GPIO_Port, DAC1_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	4827      	ldr	r0, [pc, #156]	; (80015f0 <start_motor_control+0x140>)
 8001552:	f002 fdd5 	bl	8004100 <HAL_GPIO_WritePin>
    }

    if ((dac_values & 0b0010) == 0b0010) {
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <start_motor_control+0x12c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <start_motor_control+0xc0>
    	HAL_GPIO_WritePin(DAC2_GPIO_Port, DAC2_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001568:	4822      	ldr	r0, [pc, #136]	; (80015f4 <start_motor_control+0x144>)
 800156a:	f002 fdc9 	bl	8004100 <HAL_GPIO_WritePin>
 800156e:	e005      	b.n	800157c <start_motor_control+0xcc>
    } else {
    	HAL_GPIO_WritePin(DAC2_GPIO_Port, DAC2_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001576:	481f      	ldr	r0, [pc, #124]	; (80015f4 <start_motor_control+0x144>)
 8001578:	f002 fdc2 	bl	8004100 <HAL_GPIO_WritePin>
    }

    if ((dac_values & 0b0100) == 0b0100) {
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <start_motor_control+0x12c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <start_motor_control+0xe6>
    	HAL_GPIO_WritePin(DAC3_GPIO_Port, DAC3_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158e:	4819      	ldr	r0, [pc, #100]	; (80015f4 <start_motor_control+0x144>)
 8001590:	f002 fdb6 	bl	8004100 <HAL_GPIO_WritePin>
 8001594:	e005      	b.n	80015a2 <start_motor_control+0xf2>
    } else {
    	HAL_GPIO_WritePin(DAC3_GPIO_Port, DAC3_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <start_motor_control+0x144>)
 800159e:	f002 fdaf 	bl	8004100 <HAL_GPIO_WritePin>
    }

    if ((dac_values & 0b1000) == 0b1000) {
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <start_motor_control+0x12c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <start_motor_control+0x10c>
    	HAL_GPIO_WritePin(DAC4_GPIO_Port, DAC4_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <start_motor_control+0x140>)
 80015b6:	f002 fda3 	bl	8004100 <HAL_GPIO_WritePin>
 80015ba:	e005      	b.n	80015c8 <start_motor_control+0x118>
    } else {
    	HAL_GPIO_WritePin(DAC4_GPIO_Port, DAC4_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <start_motor_control+0x140>)
 80015c4:	f002 fd9c 	bl	8004100 <HAL_GPIO_WritePin>
    }
    osDelay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f005 fbeb 	bl	8006da4 <osDelay>
  {
 80015ce:	e77d      	b.n	80014cc <start_motor_control+0x1c>
 80015d0:	66666666 	.word	0x66666666
 80015d4:	400a6666 	.word	0x400a6666
 80015d8:	0801e11c 	.word	0x0801e11c
 80015dc:	200003d4 	.word	0x200003d4
 80015e0:	200003cc 	.word	0x200003cc
 80015e4:	200003ce 	.word	0x200003ce
 80015e8:	200003d0 	.word	0x200003d0
 80015ec:	40400000 	.word	0x40400000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021000 	.word	0x40021000

080015f8 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 8001600:	f004 fc4c 	bl	8005e9c <get_static_netif>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f004 fff3 	bl	80065f4 <ethernetif_input>
  sys_check_timeouts();
 800160e:	f013 fda5 	bl	801515c <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f005 fbc6 	bl	8006da4 <osDelay>
 8001618:	e7fb      	b.n	8001612 <start_tcp_thread+0x1a>
 800161a:	0000      	movs	r0, r0
 800161c:	0000      	movs	r0, r0
	...

08001620 <start_control_systems>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_systems */
void start_control_systems(void *argument)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_systems */
  float *linear_x_ptr = get_linear_x();
 8001628:	f000 fc5a 	bl	8001ee0 <get_linear_x>
 800162c:	4603      	mov	r3, r0
 800162e:	617b      	str	r3, [r7, #20]
  float *angular_z_ptr = get_angular_z();
 8001630:	f000 fc60 	bl	8001ef4 <get_angular_z>
 8001634:	4603      	mov	r3, r0
 8001636:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	float angular_z = *angular_z_ptr;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61fb      	str	r3, [r7, #28]
	if (angular_z > 0) {
 800163e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	dd03      	ble.n	8001654 <start_control_systems+0x34>
		motor_dir = DIR_CW;
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <start_control_systems+0x100>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e008      	b.n	8001666 <start_control_systems+0x46>
	} else {
		motor_dir = DIR_ACW;
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <start_control_systems+0x100>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		angular_z *= -1;
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	eef1 7a67 	vneg.f32	s15, s15
 8001662:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (angular_z >= 1){
 8001666:	edd7 7a07 	vldr	s15, [r7, #28]
 800166a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800166e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	db02      	blt.n	800167e <start_control_systems+0x5e>
		angular_z = 1;
 8001678:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800167c:	61fb      	str	r3, [r7, #28]
	}
	motor_speed = 65535*angular_z;
 800167e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001682:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001724 <start_control_systems+0x104>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <start_control_systems+0x108>)
 8001696:	801a      	strh	r2, [r3, #0]
    int m = (*linear_x_ptr) * 100;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800172c <start_control_systems+0x10c>
 80016a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	ee17 3a90 	vmov	r3, s15
 80016ae:	60fb      	str	r3, [r7, #12]

    float linear_x = *linear_x_ptr;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
    if (linear_x < 0) {
 80016b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d505      	bpl.n	80016d0 <start_control_systems+0xb0>
        linear_x *= -1;
 80016c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016c8:	eef1 7a67 	vneg.f32	s15, s15
 80016cc:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    if (linear_x > 1) {
 80016d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	dd02      	ble.n	80016e8 <start_control_systems+0xc8>
    	linear_x = 1;
 80016e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016e6:	61bb      	str	r3, [r7, #24]
    }

    dac_voltage = linear_x*3.3;
 80016e8:	69b8      	ldr	r0, [r7, #24]
 80016ea:	f7fe ff4d 	bl	8000588 <__aeabi_f2d>
 80016ee:	a30a      	add	r3, pc, #40	; (adr r3, 8001718 <start_control_systems+0xf8>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ffa0 	bl	8000638 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa54 	bl	8000bac <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <start_control_systems+0x110>)
 8001708:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f005 fb4a 	bl	8006da4 <osDelay>
  {
 8001710:	e792      	b.n	8001638 <start_control_systems+0x18>
 8001712:	bf00      	nop
 8001714:	f3af 8000 	nop.w
 8001718:	66666666 	.word	0x66666666
 800171c:	400a6666 	.word	0x400a6666
 8001720:	200003cc 	.word	0x200003cc
 8001724:	477fff00 	.word	0x477fff00
 8001728:	200003ce 	.word	0x200003ce
 800172c:	42c80000 	.word	0x42c80000
 8001730:	200003d0 	.word	0x200003d0

08001734 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001746:	f000 ff93 	bl	8002670 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800174e:	2300      	movs	r3, #0
 8001750:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MPU_Config+0x58>)
 8001754:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001756:	230e      	movs	r3, #14
 8001758:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800175a:	2300      	movs	r3, #0
 800175c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800175e:	2301      	movs	r3, #1
 8001760:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001762:	2303      	movs	r3, #3
 8001764:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001766:	2301      	movs	r3, #1
 8001768:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800176a:	2301      	movs	r3, #1
 800176c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f000 ffb1 	bl	80026e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800177e:	2004      	movs	r0, #4
 8001780:	f000 ff8e 	bl	80026a0 <HAL_MPU_Enable>

}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20010000 	.word	0x20010000

08001790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017a2:	f000 fe3f 	bl	8002424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <DC_MOTOR_Init>:
#include "mdds30.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(DC_MOTOR_CfgType au8_MOTOR_Instance)
{
 80017c0:	b084      	sub	sp, #16
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b0aa      	sub	sp, #168	; 0xa8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	f107 0cb0 	add.w	ip, r7, #176	; 0xb0
 80017cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]
	TIM_HandleTypeDef htim;
	uint32_t PSC_Value = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t ARR_Value = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t i = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	/*------------Configure Direction GPIO Pin---------------*/
//	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].IN_GPIO == GPIOA){
	if(au8_MOTOR_Instance.IN_GPIO == GPIOA){
 8001820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <DC_MOTOR_Init+0x1b8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10b      	bne.n	8001842 <DC_MOTOR_Init+0x82>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b54      	ldr	r3, [pc, #336]	; (800197c <DC_MOTOR_Init+0x1bc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a53      	ldr	r2, [pc, #332]	; (800197c <DC_MOTOR_Init+0x1bc>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <DC_MOTOR_Init+0x1bc>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
	}
	GPIO_InitStruct.Pin = au8_MOTOR_Instance.IN_PIN;
 8001842:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_GPIO_Init(au8_MOTOR_Instance.IN_GPIO, &GPIO_InitStruct);
 8001856:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800185a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f002 faa1 	bl	8003da8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN,0);
 8001866:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800186a:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 800186e:	2200      	movs	r2, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fc45 	bl	8004100 <HAL_GPIO_WritePin>

	//Calculate PSC & ARR
	ARR_Value = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 800187c:	2300      	movs	r3, #0
 800187e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001882:	e009      	b.n	8001898 <DC_MOTOR_Init+0xd8>
		ARR_Value *=2;
 8001884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 800188e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001892:	3301      	adds	r3, #1
 8001894:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001898:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800189c:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d3ef      	bcc.n	8001884 <DC_MOTOR_Init+0xc4>
	}
	PSC_Value =(uint32_t)((au8_MOTOR_Instance.TIM_CLK_MHz*1000000) / (ARR_Value*au8_MOTOR_Instance.PWM_FREQ_Hz));
 80018a4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b35      	ldr	r3, [pc, #212]	; (8001980 <DC_MOTOR_Init+0x1c0>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	PSC_Value--;
 80018c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value -= 2;
 80018d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d4:	3b02      	subs	r3, #2
 80018d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//Configure the DC Motor PWM Timer Channel

	htim.Instance = au8_MOTOR_Instance.TIM_Instance;
 80018da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018de:	607b      	str	r3, [r7, #4]
	htim.Init.Prescaler = PSC_Value;
 80018e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e4:	60bb      	str	r3, [r7, #8]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
	htim.Init.Period = ARR_Value;
 80018ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018ee:	613b      	str	r3, [r7, #16]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	61fb      	str	r3, [r7, #28]
	HAL_TIM_Base_Init(&htim);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f912 	bl	8004b24 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8001906:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fd68 	bl	80053e4 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f9de 	bl	8004cd8 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001924:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fa09 	bl	8005d44 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001932:	2360      	movs	r3, #96	; 0x60
 8001934:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193a:	2300      	movs	r3, #0
 800193c:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, au8_MOTOR_Instance.PWM_TIM_CH);
 8001942:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001946:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fc35 	bl	80051bc <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f8cd 	bl	8001af4 <HAL_TIM_MspPostInit>

	//Start PWM
	HAL_TIM_PWM_Start(&htim, au8_MOTOR_Instance.PWM_TIM_CH);
 800195a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fa10 	bl	8004d88 <HAL_TIM_PWM_Start>
}
 8001968:	bf00      	nop
 800196a:	37a8      	adds	r7, #168	; 0xa8
 800196c:	46bd      	mov	sp, r7
 800196e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001972:	b004      	add	sp, #16
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40020000 	.word	0x40020000
 800197c:	40023800 	.word	0x40023800
 8001980:	000f4240 	.word	0x000f4240

08001984 <DC_MOTOR_Start>:
void DC_MOTOR_Start(DC_MOTOR_CfgType au8_MOTOR_Instance,uint8_t au8_DIR,uint16_t au16_SPEED){
 8001984:	b084      	sub	sp, #16
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
 800198a:	f107 0c08 	add.w	ip, r7, #8
 800198e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Write to Direction PIN

	if(au8_DIR == DIR_CW){
 8001992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001996:	2b01      	cmp	r3, #1
 8001998:	d106      	bne.n	80019a8 <DC_MOTOR_Start+0x24>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 1);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	89b9      	ldrh	r1, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fbad 	bl	8004100 <HAL_GPIO_WritePin>
 80019a6:	e009      	b.n	80019bc <DC_MOTOR_Start+0x38>

	}
	else if(au8_DIR == DIR_ACW){
 80019a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <DC_MOTOR_Start+0x38>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 0);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	89b9      	ldrh	r1, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fba2 	bl	8004100 <HAL_GPIO_WritePin>
	}

	//Write Speed -> Duty Cycle Register
	if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_1){
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <DC_MOTOR_Start+0x46>
		au8_MOTOR_Instance.TIM_Instance->CCR1 = au16_SPEED;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019c6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
	}
}
 80019c8:	e005      	b.n	80019d6 <DC_MOTOR_Start+0x52>
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d102      	bne.n	80019d6 <DC_MOTOR_Start+0x52>
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019de:	b004      	add	sp, #16
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	f06f 0001 	mvn.w	r0, #1
 8001a22:	f000 fdfb 	bl	800261c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_DAC_MspInit+0x74>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d123      	bne.n	8001a9e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_DAC_MspInit+0x78>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a86:	2310      	movs	r3, #16
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_DAC_MspInit+0x7c>)
 8001a9a:	f002 f985 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40007400 	.word	0x40007400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_TIM_PWM_MspInit+0x38>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10b      	bne.n	8001ade <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x64>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d11b      	bne.n	8001b4e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_TIM_MspPostInit+0x68>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b2e:	2340      	movs	r3, #64	; 0x40
 8001b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_TIM_MspPostInit+0x6c>)
 8001b4a:	f002 f92d 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b74:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_InitTick+0xd0>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_InitTick+0xd0>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_InitTick+0xd0>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 ff92 	bl	8004ac0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b9c:	f002 ff7c 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	4a23      	ldr	r2, [pc, #140]	; (8001c38 <HAL_InitTick+0xd4>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9b      	lsrs	r3, r3, #18
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bb6:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <HAL_InitTick+0xdc>)
 8001bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bdc:	f002 ffa2 	bl	8004b24 <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d11b      	bne.n	8001c26 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bee:	4813      	ldr	r0, [pc, #76]	; (8001c3c <HAL_InitTick+0xd8>)
 8001bf0:	f002 fffa 	bl	8004be8 <HAL_TIM_Base_Start_IT>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d111      	bne.n	8001c26 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c02:	2019      	movs	r0, #25
 8001c04:	f000 fd26 	bl	8002654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	d808      	bhi.n	8001c20 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	2019      	movs	r0, #25
 8001c14:	f000 fd02 	bl	800261c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_InitTick+0xe0>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e002      	b.n	8001c26 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	200003d8 	.word	0x200003d8
 8001c40:	40010000 	.word	0x40010000
 8001c44:	20000004 	.word	0x20000004

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c7a:	f003 f97f 	bl	8004f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003d8 	.word	0x200003d8

08001c88 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <ETH_IRQHandler+0x10>)
 8001c8e:	f001 f9b7 	bl	8003000 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20005008 	.word	0x20005008

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <_kill+0x20>)
 8001cb8:	2216      	movs	r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
	return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	20011d1c 	.word	0x20011d1c

08001cd0 <_exit>:

void _exit (int status)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ffe5 	bl	8001cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce2:	e7fe      	b.n	8001ce2 <_exit+0x12>

08001ce4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
	}

return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e009      	b.n	8001d44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf1      	blt.n	8001d30 <_write+0x12>
	}
	return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_close>:

int _close(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_isatty>:

int _isatty(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <_sbrk+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <_sbrk+0x60>)
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <_sbrk+0x64>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <_sbrk+0x68>)
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d205      	bcs.n	8001dfc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <_sbrk+0x6c>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	371c      	adds	r7, #28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20050000 	.word	0x20050000
 8001e20:	00000400 	.word	0x00000400
 8001e24:	20000424 	.word	0x20000424
 8001e28:	20011d20 	.word	0x20011d20
 8001e2c:	20011d1c 	.word	0x20011d1c

08001e30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <SystemInit+0x24>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <SystemInit+0x24>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SystemInit+0x28>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00
 8001e58:	40023800 	.word	0x40023800

08001e5c <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 8001e68:	4913      	ldr	r1, [pc, #76]	; (8001eb8 <fun+0x5c>)
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f016 ffda 	bl	8018e24 <strtok>
 8001e70:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 8001e72:	e018      	b.n	8001ea6 <fun+0x4a>
    {
        x = atof(token);
 8001e74:	6978      	ldr	r0, [r7, #20]
 8001e76:	f015 fe55 	bl	8017b24 <atof>
 8001e7a:	ec53 2b10 	vmov	r2, r3, d0
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fe93 	bl	8000bac <__aeabi_d2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 8001e8a:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <fun+0x60>)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <fun+0x5c>)
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f016 ffc0 	bl	8018e24 <strtok>
 8001ea4:	6178      	str	r0, [r7, #20]
    while (token)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e3      	bne.n	8001e74 <fun+0x18>
    }
    return res;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <fun+0x60>)
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0801af6c 	.word	0x0801af6c
 8001ebc:	200005d8 	.word	0x200005d8

08001ec0 <set_idx>:

// Function to send the data to the server
void tcpsend (char *data);

void set_idx(int ix) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	indx = ix;
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <set_idx+0x1c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	200005c8 	.word	0x200005c8

08001ee0 <get_linear_x>:

float *get_linear_x() {
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    return &linear_x;
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <get_linear_x+0x10>)
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	200005cc 	.word	0x200005cc

08001ef4 <get_angular_z>:

float *get_angular_z() {
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return &angular_z;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <get_angular_z+0x10>)
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	200005d0 	.word	0x200005d0

08001f08 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2010      	movs	r0, #16
 8001f16:	f008 fe5f 	bl	800abd8 <netconn_new_with_proto_and_callback>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a39      	ldr	r2, [pc, #228]	; (8002004 <tcpinit_thread+0xfc>)
 8001f1e:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <tcpinit_thread+0xfc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d068      	beq.n	8001ffa <tcpinit_thread+0xf2>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <tcpinit_thread+0xfc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <tcpinit_thread+0x100>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f008 ff0b 	bl	800ad4c <netconn_bind>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d156      	bne.n	8001ff0 <tcpinit_thread+0xe8>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <tcpinit_thread+0x104>)
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <tcpinit_thread+0x108>)
 8001f46:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <tcpinit_thread+0x10c>)
 8001f4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f4e:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <tcpinit_thread+0xfc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <tcpinit_thread+0x10c>)
 8001f56:	8812      	ldrh	r2, [r2, #0]
 8001f58:	492c      	ldr	r1, [pc, #176]	; (800200c <tcpinit_thread+0x104>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f008 ff2e 	bl	800adbc <netconn_connect>
 8001f60:	4603      	mov	r3, r0
 8001f62:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8001f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d136      	bne.n	8001fda <tcpinit_thread+0xd2>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8001f6c:	482a      	ldr	r0, [pc, #168]	; (8002018 <tcpinit_thread+0x110>)
 8001f6e:	f015 fd25 	bl	80179bc <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <tcpinit_thread+0xfc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4929      	ldr	r1, [pc, #164]	; (800201c <tcpinit_thread+0x114>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f009 f8bb 	bl	800b0f4 <netconn_recv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f6      	bne.n	8001f72 <tcpinit_thread+0x6a>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <tcpinit_thread+0x114>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <tcpinit_thread+0x114>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	895b      	ldrh	r3, [r3, #10]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4822      	ldr	r0, [pc, #136]	; (8002020 <tcpinit_thread+0x118>)
 8001f98:	f016 f901 	bl	801819e <strncpy>

							float *linx = fun(msgc);
 8001f9c:	4820      	ldr	r0, [pc, #128]	; (8002020 <tcpinit_thread+0x118>)
 8001f9e:	f7ff ff5d 	bl	8001e5c <fun>
 8001fa2:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <tcpinit_thread+0x11c>)
 8001faa:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <tcpinit_thread+0x120>)
 8001fb2:	6013      	str	r3, [r2, #0]
//							sys_arch_sem_wait(&tcpsem, 5);
//
//							// send the data to the TCP Server
//							tcpsend (smsgc);

							memset (msgc, '\0', 100);  // clear the buffer
 8001fb4:	2264      	movs	r2, #100	; 0x64
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4819      	ldr	r0, [pc, #100]	; (8002020 <tcpinit_thread+0x118>)
 8001fba:	f015 ff0c 	bl	8017dd6 <memset>
						}
						while (netbuf_next(buf) > 0);
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <tcpinit_thread+0x114>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00a fd44 	bl	800ca50 <netbuf_next>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	dcda      	bgt.n	8001f84 <tcpinit_thread+0x7c>

						netbuf_delete(buf);
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <tcpinit_thread+0x114>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00a fd1c 	bl	800ca10 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001fd8:	e7cb      	b.n	8001f72 <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <tcpinit_thread+0xfc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f009 f9f6 	bl	800b3d0 <netconn_close>
				netconn_delete(conn);
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <tcpinit_thread+0xfc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f008 fe93 	bl	800ad14 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001fee:	e004      	b.n	8001ffa <tcpinit_thread+0xf2>
			netconn_delete(conn);
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <tcpinit_thread+0xfc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f008 fe8d 	bl	800ad14 <netconn_delete>
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000428 	.word	0x20000428
 8002008:	0801e2f0 	.word	0x0801e2f0
 800200c:	20000430 	.word	0x20000430
 8002010:	01002a0a 	.word	0x01002a0a
 8002014:	20000434 	.word	0x20000434
 8002018:	200005d4 	.word	0x200005d4
 800201c:	2000042c 	.word	0x2000042c
 8002020:	20000438 	.word	0x20000438
 8002024:	200005cc 	.word	0x200005cc
 8002028:	200005d0 	.word	0x200005d0

0800202c <tcpsend>:

void tcpsend (char *data)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b085      	sub	sp, #20
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <tcpsend+0x30>)
 8002036:	681c      	ldr	r4, [r3, #0]
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7fe f8e9 	bl	8000210 <strlen>
 800203e:	4602      	mov	r2, r0
 8002040:	2300      	movs	r3, #0
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4620      	mov	r0, r4
 800204a:	f009 f8bf 	bl	800b1cc <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <tcpsend+0x34>)
 8002050:	f015 fcb4 	bl	80179bc <sys_sem_signal>
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	20000428 	.word	0x20000428
 8002060:	200005d4 	.word	0x200005d4

08002064 <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <tcpsend_thread+0x24>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4906      	ldr	r1, [pc, #24]	; (800208c <tcpsend_thread+0x28>)
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <tcpsend_thread+0x2c>)
 8002076:	f016 f81b 	bl	80180b0 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
//		sys_arch_sem_wait(&tcpsem, 5);
		// send the data to the server
		tcpsend(smsgc);
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <tcpsend_thread+0x2c>)
 800207c:	f7ff ffd6 	bl	800202c <tcpsend>
		osDelay(1);
 8002080:	2001      	movs	r0, #1
 8002082:	f004 fe8f 	bl	8006da4 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 8002086:	e7f1      	b.n	800206c <tcpsend_thread+0x8>
 8002088:	200005c8 	.word	0x200005c8
 800208c:	0801af70 	.word	0x0801af70
 8002090:	20000500 	.word	0x20000500

08002094 <tcpclient_init>:




void tcpclient_init (void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <tcpclient_init+0x3c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f015 fc35 	bl	8017910 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80020a6:	2318      	movs	r3, #24
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ae:	2200      	movs	r2, #0
 80020b0:	4908      	ldr	r1, [pc, #32]	; (80020d4 <tcpclient_init+0x40>)
 80020b2:	4809      	ldr	r0, [pc, #36]	; (80020d8 <tcpclient_init+0x44>)
 80020b4:	f015 fcf8 	bl	8017aa8 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80020b8:	2318      	movs	r3, #24
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	2200      	movs	r2, #0
 80020c2:	4906      	ldr	r1, [pc, #24]	; (80020dc <tcpclient_init+0x48>)
 80020c4:	4806      	ldr	r0, [pc, #24]	; (80020e0 <tcpclient_init+0x4c>)
 80020c6:	f015 fcef 	bl	8017aa8 <sys_thread_new>
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200005d4 	.word	0x200005d4
 80020d4:	08001f09 	.word	0x08001f09
 80020d8:	0801af84 	.word	0x0801af84
 80020dc:	08002065 	.word	0x08002065
 80020e0:	0801af94 	.word	0x0801af94

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002100:	4c0b      	ldr	r4, [pc, #44]	; (8002130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800210e:	f7ff fe8f 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002112:	f015 fe01 	bl	8017d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7fe ffbb 	bl	8001090 <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002128:	0801e7f8 	.word	0x0801e7f8
  ldr r2, =_sbss
 800212c:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8002130:	20011d20 	.word	0x20011d20

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>

08002136 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <LAN8742_RegisterBusIO+0x28>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <LAN8742_RegisterBusIO+0x28>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <LAN8742_RegisterBusIO+0x28>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002162:	e014      	b.n	800218e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d17c      	bne.n	80022b4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e01c      	b.n	800220e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	2112      	movs	r1, #18
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	4798      	blx	r3
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	da03      	bge.n	80021f0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80021e8:	f06f 0304 	mvn.w	r3, #4
 80021ec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80021ee:	e00b      	b.n	8002208 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d105      	bne.n	8002208 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
         break;
 8002206:	e005      	b.n	8002214 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b1f      	cmp	r3, #31
 8002212:	d9df      	bls.n	80021d4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b1f      	cmp	r3, #31
 800221a:	d902      	bls.n	8002222 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800221c:	f06f 0302 	mvn.w	r3, #2
 8002220:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d145      	bne.n	80022b4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6810      	ldr	r0, [r2, #0]
 8002230:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002234:	2100      	movs	r1, #0
 8002236:	4798      	blx	r3
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	db37      	blt.n	80022ae <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6810      	ldr	r0, [r2, #0]
 8002246:	f107 0208 	add.w	r2, r7, #8
 800224a:	2100      	movs	r1, #0
 800224c:	4798      	blx	r3
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	db28      	blt.n	80022a6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4798      	blx	r3
 800225a:	4603      	mov	r3, r0
 800225c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800225e:	e01c      	b.n	800229a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4798      	blx	r3
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002272:	d80e      	bhi.n	8002292 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6810      	ldr	r0, [r2, #0]
 800227c:	f107 0208 	add.w	r2, r7, #8
 8002280:	2100      	movs	r1, #0
 8002282:	4798      	blx	r3
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	da07      	bge.n	800229a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800228a:	f06f 0304 	mvn.w	r3, #4
 800228e:	613b      	str	r3, [r7, #16]
                 break;
 8002290:	e010      	b.n	80022b4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002292:	f06f 0301 	mvn.w	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
               break;
 8002298:	e00c      	b.n	80022b4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1dd      	bne.n	8002260 <LAN8742_Init+0xc6>
 80022a4:	e006      	b.n	80022b4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80022a6:	f06f 0304 	mvn.w	r3, #4
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e002      	b.n	80022b4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80022ae:	f06f 0303 	mvn.w	r3, #3
 80022b2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d112      	bne.n	80022e0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4798      	blx	r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80022c4:	bf00      	nop
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4798      	blx	r3
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022d8:	d9f5      	bls.n	80022c6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80022e0:	693b      	ldr	r3, [r7, #16]
 }
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6810      	ldr	r0, [r2, #0]
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	2101      	movs	r1, #1
 8002304:	4798      	blx	r3
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	da02      	bge.n	8002312 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800230c:	f06f 0304 	mvn.w	r3, #4
 8002310:	e06e      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6810      	ldr	r0, [r2, #0]
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	2101      	movs	r1, #1
 8002320:	4798      	blx	r3
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	da02      	bge.n	800232e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002328:	f06f 0304 	mvn.w	r3, #4
 800232c:	e060      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002338:	2301      	movs	r3, #1
 800233a:	e059      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6810      	ldr	r0, [r2, #0]
 8002344:	f107 020c 	add.w	r2, r7, #12
 8002348:	2100      	movs	r1, #0
 800234a:	4798      	blx	r3
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	da02      	bge.n	8002358 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002352:	f06f 0304 	mvn.w	r3, #4
 8002356:	e04b      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11b      	bne.n	800239a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <LAN8742_GetLinkState+0x90>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002376:	2302      	movs	r3, #2
 8002378:	e03a      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002384:	2303      	movs	r3, #3
 8002386:	e033      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002392:	2304      	movs	r3, #4
 8002394:	e02c      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002396:	2305      	movs	r3, #5
 8002398:	e02a      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6810      	ldr	r0, [r2, #0]
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	211f      	movs	r1, #31
 80023a8:	4798      	blx	r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da02      	bge.n	80023b6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80023b0:	f06f 0304 	mvn.w	r3, #4
 80023b4:	e01c      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80023c0:	2306      	movs	r3, #6
 80023c2:	e015      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 031c 	and.w	r3, r3, #28
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	d101      	bne.n	80023d2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023ce:	2302      	movs	r3, #2
 80023d0:	e00e      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 031c 	and.w	r3, r3, #28
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d101      	bne.n	80023e0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023dc:	2303      	movs	r3, #3
 80023de:	e007      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 031c 	and.w	r3, r3, #28
 80023e6:	2b14      	cmp	r3, #20
 80023e8:	d101      	bne.n	80023ee <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023ea:	2304      	movs	r3, #4
 80023ec:	e000      	b.n	80023f0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023ee:	2305      	movs	r3, #5
    }				
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_Init+0x28>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <HAL_Init+0x28>)
 8002402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 f8fc 	bl	8002606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	200f      	movs	r0, #15
 8002410:	f7ff fba8 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7ff fae6 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00

08002424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000008 	.word	0x20000008
 8002448:	20000600 	.word	0x20000600

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000600 	.word	0x20000600

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff ffee 	bl	800244c <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247c:	d005      	beq.n	800248a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Delay+0x44>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800248a:	bf00      	nop
 800248c:	f7ff ffde 	bl	800244c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f7      	bhi.n	800248c <HAL_Delay+0x28>
  {
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000008 	.word	0x20000008

080024ac <__NVIC_SetPriorityGrouping>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x40>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	05fa0000 	.word	0x05fa0000

080024f4 <__NVIC_GetPriorityGrouping>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	; (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ff4c 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262e:	f7ff ff61 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	6978      	ldr	r0, [r7, #20]
 800263a:	f7ff ffb1 	bl	80025a0 <NVIC_EncodePriority>
 800263e:	4602      	mov	r2, r0
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff80 	bl	800254c <__NVIC_SetPriority>
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff54 	bl	8002510 <__NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002674:	f3bf 8f5f 	dmb	sy
}
 8002678:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_MPU_Disable+0x28>)
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_MPU_Disable+0x28>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_MPU_Disable+0x2c>)
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	e000ed90 	.word	0xe000ed90

080026a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_MPU_Enable+0x38>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_MPU_Enable+0x3c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_MPU_Enable+0x3c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026be:	f3bf 8f4f 	dsb	sy
}
 80026c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026c4:	f3bf 8f6f 	isb	sy
}
 80026c8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed90 	.word	0xe000ed90
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	785a      	ldrb	r2, [r3, #1]
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_MPU_ConfigRegion+0x84>)
 80026ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d029      	beq.n	800274c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80026f8:	4a1a      	ldr	r2, [pc, #104]	; (8002764 <HAL_MPU_ConfigRegion+0x84>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7b1b      	ldrb	r3, [r3, #12]
 8002704:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7adb      	ldrb	r3, [r3, #11]
 800270a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800270c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7a9b      	ldrb	r3, [r3, #10]
 8002712:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002714:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7b5b      	ldrb	r3, [r3, #13]
 800271a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800271c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7b9b      	ldrb	r3, [r3, #14]
 8002722:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002724:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7bdb      	ldrb	r3, [r3, #15]
 800272a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800272c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7a5b      	ldrb	r3, [r3, #9]
 8002732:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002734:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7a1b      	ldrb	r3, [r3, #8]
 800273a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800273c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002744:	4a07      	ldr	r2, [pc, #28]	; (8002764 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002746:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002748:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800274a:	e005      	b.n	8002758 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_MPU_ConfigRegion+0x84>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_MPU_ConfigRegion+0x84>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed90 	.word	0xe000ed90

08002768 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e014      	b.n	80027a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f952 	bl	8001a34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_DAC_ConfigChannel+0x18>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e03c      	b.n	800283e <HAL_DAC_ConfigChannel+0x92>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2202      	movs	r2, #2
 80027ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4013      	ands	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6819      	ldr	r1, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	22c0      	movs	r2, #192	; 0xc0
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06a      	b.n	8002934 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2223      	movs	r2, #35	; 0x23
 800286c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f003 ff3f 	bl	80066f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_ETH_Init+0xf0>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_ETH_Init+0xf0>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_ETH_Init+0xf0>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800288e:	4b2c      	ldr	r3, [pc, #176]	; (8002940 <HAL_ETH_Init+0xf4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <HAL_ETH_Init+0xf4>)
 8002894:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002898:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_ETH_Init+0xf4>)
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4927      	ldr	r1, [pc, #156]	; (8002940 <HAL_ETH_Init+0xf4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_ETH_Init+0xf4>)
 80028aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c4:	f7ff fdc2 	bl	800244c <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028ca:	e011      	b.n	80028f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80028cc:	f7ff fdbe 	bl	800244c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028da:	d909      	bls.n	80028f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2204      	movs	r2, #4
 80028e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	22e0      	movs	r2, #224	; 0xe0
 80028e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e021      	b.n	8002934 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e4      	bne.n	80028cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 ffac 	bl	8003860 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f001 f853 	bl	80039b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f001 f8a9 	bl	8003a66 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	461a      	mov	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f001 f811 	bl	8003944 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2210      	movs	r2, #16
 800292e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800

08002944 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	2b10      	cmp	r3, #16
 8002954:	d150      	bne.n	80029f8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2223      	movs	r2, #35	; 0x23
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fa7b 	bl	8002e60 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0208 	orr.w	r2, r2, #8
 8002978:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff fd6e 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0204 	orr.w	r2, r2, #4
 800299e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff fd5b 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fdf3 	bl	80035a2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029d2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2223      	movs	r2, #35	; 0x23
 80029f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d17b      	bne.n	8002b0e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2223      	movs	r2, #35	; 0x23
 8002a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_ETH_Start_IT+0x114>)
 8002a42:	430b      	orrs	r3, r1
 8002a44:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002a58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2204      	movs	r2, #4
 8002a60:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9fc 	bl	8002e60 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0208 	orr.w	r2, r2, #8
 8002a76:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7ff fcef 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0204 	orr.w	r2, r2, #4
 8002a9c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff fcdc 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fd74 	bl	80035a2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002acc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ad0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ae8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af2:	69d9      	ldr	r1, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_ETH_Start_IT+0x118>)
 8002afa:	430b      	orrs	r3, r1
 8002afc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b00:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2223      	movs	r2, #35	; 0x23
 8002b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e000      	b.n	8002b10 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
  }
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	00020060 	.word	0x00020060
 8002b1c:	0001a0c1 	.word	0x0001a0c1

08002b20 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	2b23      	cmp	r3, #35	; 0x23
 8002b30:	d16e      	bne.n	8002c10 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2223      	movs	r2, #35	; 0x23
 8002b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b42:	69d9      	ldr	r1, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_ETH_Stop_IT+0xfc>)
 8002b4a:	400b      	ands	r3, r1
 8002b4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b50:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b68:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	f023 0302 	bic.w	r3, r3, #2
 8002b7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b80:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f7ff fc62 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fcfa 	bl	80035a2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0208 	bic.w	r2, r2, #8
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f7ff fc4c 	bl	8002464 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e00e      	b.n	8002bf8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	3212      	adds	r2, #18
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d9ed      	bls.n	8002bda <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2210      	movs	r2, #16
 8002c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	fffe5f3e 	.word	0xfffe5f3e

08002c20 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e045      	b.n	8002cd0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	2b23      	cmp	r3, #35	; 0x23
 8002c4c:	d13f      	bne.n	8002cce <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002c56:	2201      	movs	r2, #1
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 ff70 	bl	8003b40 <ETH_Prepare_Tx_Descriptors>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e02a      	b.n	8002cd0 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002c7a:	f3bf 8f4f 	dsb	sy
}
 8002c7e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d904      	bls.n	8002c9c <HAL_ETH_Transmit_IT+0x7c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	1f1a      	subs	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2304      	movs	r3, #4
 8002cba:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
  }
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0a8      	b.n	8002e56 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0a:	2b23      	cmp	r3, #35	; 0x23
 8002d0c:	d001      	beq.n	8002d12 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a1      	b.n	8002e56 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	3212      	adds	r2, #18
 8002d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d28:	f1c3 0304 	rsb	r3, r3, #4
 8002d2c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d2e:	e06a      	b.n	8002e06 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_ETH_ReadData+0x88>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d040      	beq.n	8002de2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d94:	3b04      	subs	r3, #4
 8002d96:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f003 fe63 	bl	8006a8c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d902      	bls.n	8002df4 <HAL_ETH_ReadData+0x11c>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b04      	subs	r3, #4
 8002df2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	3212      	adds	r2, #18
 8002dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfe:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3301      	adds	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db06      	blt.n	8002e1c <HAL_ETH_ReadData+0x144>
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d202      	bcs.n	8002e1c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d089      	beq.n	8002d30 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	441a      	add	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f815 	bl	8002e60 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d108      	bne.n	8002e54 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e000      	b.n	8002e56 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e74:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	3212      	adds	r2, #18
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e86:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002e88:	e040      	b.n	8002f0c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d112      	bne.n	8002eb8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fdc8 	bl	8006a2c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	74fb      	strb	r3, [r7, #19]
 8002ea6:	e007      	b.n	8002eb8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d026      	beq.n	8002f0c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d103      	bne.n	8002ece <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <ETH_UpdateDescriptor+0xe4>)
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e003      	b.n	8002ed6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002ed4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ed6:	f3bf 8f5f 	dmb	sy
}
 8002eda:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d902      	bls.n	8002efa <ETH_UpdateDescriptor+0x9a>
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	3b04      	subs	r3, #4
 8002ef8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	3212      	adds	r2, #18
 8002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f04:	617b      	str	r3, [r7, #20]
      desccount--;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <ETH_UpdateDescriptor+0xb8>
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1b8      	bne.n	8002e8a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d00c      	beq.n	8002f3c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	800045f8 	.word	0x800045f8

08002f48 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3318      	adds	r3, #24
 8002f54:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f66:	e03f      	b.n	8002fe8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	3304      	adds	r3, #4
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	3301      	adds	r3, #1
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002f90:	7bbb      	ldrb	r3, [r7, #14]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d028      	beq.n	8002fe8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db1b      	blt.n	8002fe4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fda9 	bl	8006b10 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2200      	movs	r2, #0
 8002fca:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fe2:	e001      	b.n	8002fe8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_ETH_ReleaseTxPacket+0xac>
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1b9      	bne.n	8002f68 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d112      	bne.n	8003040 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d109      	bne.n	8003040 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	461a      	mov	r2, r3
 8003036:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_ETH_IRQHandler+0x178>)
 8003038:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f003 f8bc 	bl	80061b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d113      	bne.n	800307a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10a      	bne.n	800307a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800306c:	461a      	mov	r2, r3
 800306e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003072:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f003 f8af 	bl	80061d8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	d14c      	bne.n	8003128 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d142      	bne.n	8003128 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f043 0208 	orr.w	r2, r3, #8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c4:	d11a      	bne.n	80030fc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_ETH_IRQHandler+0x17c>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80030ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030f0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	22e0      	movs	r2, #224	; 0xe0
 80030f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80030fa:	e012      	b.n	8003122 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	f248 6380 	movw	r3, #34432	; 0x8680
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311a:	461a      	mov	r2, r3
 800311c:	f248 6380 	movw	r3, #34432	; 0x8680
 8003120:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f003 f868 	bl	80061f8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d10e      	bne.n	8003154 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f81c 	bl	8003184 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_ETH_IRQHandler+0x180>)
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003160:	4b07      	ldr	r3, [pc, #28]	; (8003180 <HAL_ETH_IRQHandler+0x180>)
 8003162:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003166:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f815 	bl	8003198 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	00010040 	.word	0x00010040
 800317c:	007e2000 	.word	0x007e2000
 8003180:	40013c00 	.word	0x40013c00

08003184 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 031c 	and.w	r3, r3, #28
 80031c8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	02db      	lsls	r3, r3, #11
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0302 	bic.w	r3, r3, #2
 80031ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80031fc:	f7ff f926 	bl	800244c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003202:	e00d      	b.n	8003220 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003204:	f7ff f922 	bl	800244c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d301      	bcc.n	8003218 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e010      	b.n	800323a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ec      	bne.n	8003204 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f003 031c 	and.w	r3, r3, #28
 800325e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	02db      	lsls	r3, r3, #11
 8003264:	b29b      	uxth	r3, r3
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	019b      	lsls	r3, r3, #6
 8003270:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800329c:	f7ff f8d6 	bl	800244c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032a2:	e00d      	b.n	80032c0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80032a4:	f7ff f8d2 	bl	800244c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b2:	d301      	bcc.n	80032b8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e009      	b.n	80032cc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ec      	bne.n	80032a4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d9      	b.n	800349c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf14      	ite	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	2300      	moveq	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bf14      	ite	ne
 8003402:	2301      	movne	r3, #1
 8003404:	2300      	moveq	r3, #0
 8003406:	b2db      	uxtb	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	0c1b      	lsrs	r3, r3, #16
 800345c:	b29a      	uxth	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e00b      	b.n	80034d4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d105      	bne.n	80034d2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f88f 	bl	80035ec <ETH_SetMACConfig>

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 031c 	bic.w	r3, r3, #28
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80034f4:	f001 fac4 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 80034f8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_ETH_SetMDIOClockRange+0x98>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d908      	bls.n	8003514 <HAL_ETH_SetMDIOClockRange+0x38>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d804      	bhi.n	8003514 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f043 0308 	orr.w	r3, r3, #8
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e027      	b.n	8003564 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d908      	bls.n	800352e <HAL_ETH_SetMDIOClockRange+0x52>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a17      	ldr	r2, [pc, #92]	; (800357c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d204      	bcs.n	800352e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f043 030c 	orr.w	r3, r3, #12
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e01a      	b.n	8003564 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4a12      	ldr	r2, [pc, #72]	; (800357c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d303      	bcc.n	800353e <HAL_ETH_SetMDIOClockRange+0x62>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d911      	bls.n	8003562 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d908      	bls.n	8003558 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d804      	bhi.n	8003558 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e005      	b.n	8003564 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f043 0310 	orr.w	r3, r3, #16
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e000      	b.n	8003564 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003562:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	611a      	str	r2, [r3, #16]
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	01312cff 	.word	0x01312cff
 8003578:	02160ebf 	.word	0x02160ebf
 800357c:	03938700 	.word	0x03938700
 8003580:	05f5e0ff 	.word	0x05f5e0ff
 8003584:	08f0d17f 	.word	0x08f0d17f

08003588 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fe ff46 	bl	8002464 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035e2:	6193      	str	r3, [r2, #24]
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4b51      	ldr	r3, [pc, #324]	; (8003748 <ETH_SetMACConfig+0x15c>)
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	7c1b      	ldrb	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <ETH_SetMACConfig+0x28>
 800360e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003612:	e000      	b.n	8003616 <ETH_SetMACConfig+0x2a>
 8003614:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	7c5b      	ldrb	r3, [r3, #17]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <ETH_SetMACConfig+0x38>
 800361e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003622:	e000      	b.n	8003626 <ETH_SetMACConfig+0x3a>
 8003624:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003626:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800362c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7fdb      	ldrb	r3, [r3, #31]
 8003632:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003634:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800363a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	7f92      	ldrb	r2, [r2, #30]
 8003640:	2a00      	cmp	r2, #0
 8003642:	d102      	bne.n	800364a <ETH_SetMACConfig+0x5e>
 8003644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003648:	e000      	b.n	800364c <ETH_SetMACConfig+0x60>
 800364a:	2200      	movs	r2, #0
                        macconf->Speed |
 800364c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	7f1b      	ldrb	r3, [r3, #28]
 8003652:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003654:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800365a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	f892 2020 	ldrb.w	r2, [r2, #32]
 800366a:	2a00      	cmp	r2, #0
 800366c:	d102      	bne.n	8003674 <ETH_SetMACConfig+0x88>
 800366e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003672:	e000      	b.n	8003676 <ETH_SetMACConfig+0x8a>
 8003674:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003676:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	7bdb      	ldrb	r3, [r3, #15]
 800367c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800367e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003684:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800368e:	4313      	orrs	r3, r2
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fe fedc 	bl	8002464 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d101      	bne.n	80036da <ETH_SetMACConfig+0xee>
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	e000      	b.n	80036dc <ETH_SetMACConfig+0xf0>
 80036da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80036ea:	2a01      	cmp	r2, #1
 80036ec:	d101      	bne.n	80036f2 <ETH_SetMACConfig+0x106>
 80036ee:	2208      	movs	r2, #8
 80036f0:	e000      	b.n	80036f4 <ETH_SetMACConfig+0x108>
 80036f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80036f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80036fc:	2a01      	cmp	r2, #1
 80036fe:	d101      	bne.n	8003704 <ETH_SetMACConfig+0x118>
 8003700:	2204      	movs	r2, #4
 8003702:	e000      	b.n	8003706 <ETH_SetMACConfig+0x11a>
 8003704:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003706:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800370e:	2a01      	cmp	r2, #1
 8003710:	d101      	bne.n	8003716 <ETH_SetMACConfig+0x12a>
 8003712:	2202      	movs	r2, #2
 8003714:	e000      	b.n	8003718 <ETH_SetMACConfig+0x12c>
 8003716:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003718:	4313      	orrs	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003730:	2001      	movs	r0, #1
 8003732:	f7fe fe97 	bl	8002464 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	ff20810f 	.word	0xff20810f

0800374c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4b3d      	ldr	r3, [pc, #244]	; (800385c <ETH_SetDMAConfig+0x110>)
 8003766:	4013      	ands	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	7b1b      	ldrb	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <ETH_SetDMAConfig+0x2c>
 8003772:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003776:	e000      	b.n	800377a <ETH_SetDMAConfig+0x2e>
 8003778:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	7b5b      	ldrb	r3, [r3, #13]
 800377e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003780:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	7f52      	ldrb	r2, [r2, #29]
 8003786:	2a00      	cmp	r2, #0
 8003788:	d102      	bne.n	8003790 <ETH_SetDMAConfig+0x44>
 800378a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800378e:	e000      	b.n	8003792 <ETH_SetDMAConfig+0x46>
 8003790:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003792:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	7b9b      	ldrb	r3, [r3, #14]
 8003798:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800379a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80037a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7f1b      	ldrb	r3, [r3, #28]
 80037a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80037a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	7f9b      	ldrb	r3, [r3, #30]
 80037ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80037c0:	4313      	orrs	r3, r2
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	461a      	mov	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f7fe fe3e 	bl	8002464 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003800:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003806:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800380c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003814:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003816:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800381e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003824:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800382e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003832:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003840:	2001      	movs	r0, #1
 8003842:	f7fe fe0f 	bl	8002464 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	f8de3f23 	.word	0xf8de3f23

08003860 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0a6      	sub	sp, #152	; 0x98
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003868:	2301      	movs	r3, #1
 800386a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800389c:	2300      	movs	r3, #0
 800389e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80038c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff fe86 	bl	80035ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003902:	2300      	movs	r3, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800390c:	2301      	movs	r3, #1
 800390e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003914:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800391a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800391c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003920:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003928:	2300      	movs	r3, #0
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff08 	bl	800374c <ETH_SetDMAConfig>
}
 800393c:	bf00      	nop
 800393e:	3798      	adds	r7, #152	; 0x98
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3305      	adds	r3, #5
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	3204      	adds	r2, #4
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <ETH_MACAddressConfig+0x68>)
 8003966:	4413      	add	r3, r2
 8003968:	461a      	mov	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3303      	adds	r3, #3
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	061a      	lsls	r2, r3, #24
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3302      	adds	r3, #2
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3301      	adds	r3, #1
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	4313      	orrs	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <ETH_MACAddressConfig+0x6c>)
 8003996:	4413      	add	r3, r2
 8003998:	461a      	mov	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	6013      	str	r3, [r2, #0]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40028040 	.word	0x40028040
 80039b0:	40028044 	.word	0x40028044

080039b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e03e      	b.n	8003a40 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2200      	movs	r2, #0
 80039de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	3206      	adds	r2, #6
 80039f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d80c      	bhi.n	8003a24 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68d9      	ldr	r1, [r3, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	e004      	b.n	8003a2e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d9bd      	bls.n	80039c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a58:	611a      	str	r2, [r3, #16]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e046      	b.n	8003b02 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6919      	ldr	r1, [r3, #16]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	440b      	add	r3, r1
 8003a84:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ab0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003ab8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	3212      	adds	r2, #18
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d80c      	bhi.n	8003af2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6919      	ldr	r1, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e004      	b.n	8003afc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d9b5      	bls.n	8003a74 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	60da      	str	r2, [r3, #12]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b08d      	sub	sp, #52	; 0x34
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b82:	d007      	beq.n	8003b94 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003b94:	2302      	movs	r3, #2
 8003b96:	e0ff      	b.n	8003d98 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4b7d      	ldr	r3, [pc, #500]	; (8003da4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	69fa      	ldr	r2, [r7, #28]
 8003bb2:	6852      	ldr	r2, [r2, #4]
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c1a:	f3bf 8f5f 	dmb	sy
}
 8003c1e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003c2c:	e082      	b.n	8003d34 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e005      	b.n	8003c5a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d902      	bls.n	8003c6c <ETH_Prepare_Tx_Descriptors+0x12c>
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	3b04      	subs	r3, #4
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c74:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8e:	d007      	beq.n	8003ca0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	3304      	adds	r3, #4
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d029      	beq.n	8003cf4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb2:	e019      	b.n	8003ce8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003cb4:	f3bf 8f5f 	dmb	sy
}
 8003cb8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	3301      	adds	r3, #1
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d902      	bls.n	8003cd8 <ETH_Prepare_Tx_Descriptors+0x198>
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3e1      	bcc.n	8003cb4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e051      	b.n	8003d98 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	6852      	ldr	r2, [r2, #4]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003d22:	f3bf 8f5f 	dmb	sy
}
 8003d26:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f af78 	bne.w	8003c2e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e005      	b.n	8003d5e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	3304      	adds	r3, #4
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d80:	b672      	cpsid	i
}
 8003d82:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003d92:	b662      	cpsie	i
}
 8003d94:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3734      	adds	r7, #52	; 0x34
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	ffffe000 	.word	0xffffe000

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e175      	b.n	80040b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8164 	bne.w	80040ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x56>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80be 	beq.w	80040ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f4a:	4a61      	ldr	r2, [pc, #388]	; (80040d0 <HAL_GPIO_Init+0x328>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_GPIO_Init+0x32c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d037      	beq.n	8003fe6 <HAL_GPIO_Init+0x23e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a57      	ldr	r2, [pc, #348]	; (80040d8 <HAL_GPIO_Init+0x330>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_GPIO_Init+0x23a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_GPIO_Init+0x334>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x236>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a55      	ldr	r2, [pc, #340]	; (80040e0 <HAL_GPIO_Init+0x338>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d025      	beq.n	8003fda <HAL_GPIO_Init+0x232>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <HAL_GPIO_Init+0x33c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x22e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a53      	ldr	r2, [pc, #332]	; (80040e8 <HAL_GPIO_Init+0x340>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x22a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_GPIO_Init+0x344>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x226>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a51      	ldr	r2, [pc, #324]	; (80040f0 <HAL_GPIO_Init+0x348>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x222>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_GPIO_Init+0x34c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x21e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4f      	ldr	r2, [pc, #316]	; (80040f8 <HAL_GPIO_Init+0x350>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x21a>
 8003fbe:	2309      	movs	r3, #9
 8003fc0:	e012      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	e010      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	e00e      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fca:	2307      	movs	r3, #7
 8003fcc:	e00c      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fce:	2306      	movs	r3, #6
 8003fd0:	e00a      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e008      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e004      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f002 0203 	and.w	r2, r2, #3
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ff8:	4935      	ldr	r1, [pc, #212]	; (80040d0 <HAL_GPIO_Init+0x328>)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_GPIO_Init+0x354>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_GPIO_Init+0x354>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <HAL_GPIO_Init+0x354>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	f67f ae86 	bls.w	8003dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020c00 	.word	0x40020c00
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40021400 	.word	0x40021400
 80040ec:	40021800 	.word	0x40021800
 80040f0:	40021c00 	.word	0x40021c00
 80040f4:	40022000 	.word	0x40022000
 80040f8:	40022400 	.word	0x40022400
 80040fc:	40013c00 	.word	0x40013c00

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800411c:	e003      	b.n	8004126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_PWREx_EnableOverDrive+0x98>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004156:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004162:	f7fe f973 	bl	800244c <HAL_GetTick>
 8004166:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004168:	e009      	b.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800416a:	f7fe f96f 	bl	800244c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004178:	d901      	bls.n	800417e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e022      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d1ee      	bne.n	800416a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004198:	f7fe f958 	bl	800244c <HAL_GetTick>
 800419c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800419e:	e009      	b.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041a0:	f7fe f954 	bl	800244c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ae:	d901      	bls.n	80041b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e007      	b.n	80041c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c0:	d1ee      	bne.n	80041a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000

080041d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e291      	b.n	800470e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8087 	beq.w	8004306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f8:	4b96      	ldr	r3, [pc, #600]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b04      	cmp	r3, #4
 8004202:	d00c      	beq.n	800421e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004204:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d112      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
 8004210:	4b90      	ldr	r3, [pc, #576]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b8d      	ldr	r3, [pc, #564]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d06c      	beq.n	8004304 <HAL_RCC_OscConfig+0x130>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d168      	bne.n	8004304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e26b      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x7a>
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a83      	ldr	r2, [pc, #524]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e02e      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x9c>
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0xc0>
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a75      	ldr	r2, [pc, #468]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a72      	ldr	r2, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xd8>
 8004294:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6e      	ldr	r2, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b6c      	ldr	r3, [pc, #432]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fe f8ca 	bl	800244c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe f8c6 	bl	800244c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e21f      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b61      	ldr	r3, [pc, #388]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xe8>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe f8b6 	bl	800244c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe f8b2 	bl	800244c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e20b      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b57      	ldr	r3, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x110>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d069      	beq.n	80043e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1df      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	493d      	ldr	r1, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e040      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a38      	ldr	r2, [pc, #224]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe f868 	bl	800244c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe f864 	bl	800244c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1bd      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4929      	ldr	r1, [pc, #164]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
 80043b2:	e018      	b.n	80043e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe f844 	bl	800244c <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c8:	f7fe f840 	bl	800244c <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e199      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d038      	beq.n	8004464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d019      	beq.n	800442e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe f821 	bl	800244c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800440e:	f7fe f81d 	bl	800244c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e176      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x23a>
 800442c:	e01a      	b.n	8004464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x280>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fe f807 	bl	800244c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004442:	f7fe f803 	bl	800244c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d903      	bls.n	8004458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e15c      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
 8004454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b91      	ldr	r3, [pc, #580]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a4 	beq.w	80045ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b8b      	ldr	r3, [pc, #556]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	4a87      	ldr	r2, [pc, #540]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004488:	6413      	str	r3, [r2, #64]	; 0x40
 800448a:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d118      	bne.n	80044d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044a6:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b2:	f7fd ffcb 	bl	800244c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fd ffc7 	bl	800244c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e120      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044cc:	4b75      	ldr	r3, [pc, #468]	; (80046a4 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x31a>
 80044e0:	4b6f      	ldr	r3, [pc, #444]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	4a6e      	ldr	r2, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6713      	str	r3, [r2, #112]	; 0x70
 80044ec:	e02d      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x33c>
 80044f6:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a69      	ldr	r2, [pc, #420]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
 8004502:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	e01c      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b05      	cmp	r3, #5
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0x35e>
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	; 0x70
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x376>
 8004532:	4b5b      	ldr	r3, [pc, #364]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a5a      	ldr	r2, [pc, #360]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004542:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d015      	beq.n	800457e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fd ff7b 	bl	800244c <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455a:	f7fd ff77 	bl	800244c <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f241 3288 	movw	r2, #5000	; 0x1388
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0ce      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ee      	beq.n	800455a <HAL_RCC_OscConfig+0x386>
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fd ff65 	bl	800244c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fd ff61 	bl	800244c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e0b8      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a3b      	ldr	r2, [pc, #236]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a4 	beq.w	800470c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d06b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d149      	bne.n	800466c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 80045de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd ff32 	bl	800244c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd ff2e 	bl	800244c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e087      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	019b      	lsls	r3, r3, #6
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	3b01      	subs	r3, #1
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	4313      	orrs	r3, r2
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004636:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a18      	ldr	r2, [pc, #96]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd ff02 	bl	800244c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd fefe 	bl	800244c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e057      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x478>
 800466a:	e04f      	b.n	800470c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fee8 	bl	800244c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fd fee4 	bl	800244c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e03d      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_OscConfig+0x4cc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x4ac>
 800469e:	e035      	b.n	800470c <HAL_RCC_OscConfig+0x538>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x544>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d028      	beq.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d121      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d11a      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d111      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800

0800471c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d0      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d910      	bls.n	8004764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b67      	ldr	r3, [pc, #412]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 020f 	bic.w	r2, r3, #15
 800474a:	4965      	ldr	r1, [pc, #404]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a52      	ldr	r2, [pc, #328]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800479e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d040      	beq.n	8004840 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d115      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e073      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4936      	ldr	r1, [pc, #216]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004810:	f7fd fe1c 	bl	800244c <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fd fe18 	bl	800244c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e053      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d210      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 020f 	bic.w	r2, r3, #15
 8004856:	4922      	ldr	r1, [pc, #136]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f821 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490a      	ldr	r1, [pc, #40]	; (80048e8 <HAL_RCC_ClockConfig+0x1cc>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1d0>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_RCC_ClockConfig+0x1d4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd f948 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0801e1c8 	.word	0x0801e1c8
 80048ec:	20000000 	.word	0x20000000
 80048f0:	20000004 	.word	0x20000004

080048f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f8:	b090      	sub	sp, #64	; 0x40
 80048fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004904:	2300      	movs	r3, #0
 8004906:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490c:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b08      	cmp	r3, #8
 8004916:	d00d      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x40>
 8004918:	2b08      	cmp	r3, #8
 800491a:	f200 80a1 	bhi.w	8004a60 <HAL_RCC_GetSysClockFreq+0x16c>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x34>
 8004922:	2b04      	cmp	r3, #4
 8004924:	d003      	beq.n	800492e <HAL_RCC_GetSysClockFreq+0x3a>
 8004926:	e09b      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b53      	ldr	r3, [pc, #332]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x184>)
 800492a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800492c:	e09b      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492e:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004932:	e098      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004934:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800493e:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d028      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4b4a      	ldr	r3, [pc, #296]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	2200      	movs	r2, #0
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	627a      	str	r2, [r7, #36]	; 0x24
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800495c:	2100      	movs	r1, #0
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8004960:	fb03 f201 	mul.w	r2, r3, r1
 8004964:	2300      	movs	r3, #0
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	4413      	add	r3, r2
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x188>)
 800496e:	fba0 1202 	umull	r1, r2, r0, r2
 8004972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004974:	460a      	mov	r2, r1
 8004976:	62ba      	str	r2, [r7, #40]	; 0x28
 8004978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497a:	4413      	add	r3, r2
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	2200      	movs	r2, #0
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	61fa      	str	r2, [r7, #28]
 8004986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800498e:	f7fc f95d 	bl	8000c4c <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4613      	mov	r3, r2
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499a:	e053      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499c:	4b35      	ldr	r3, [pc, #212]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	2200      	movs	r2, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	617a      	str	r2, [r7, #20]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049ae:	f04f 0b00 	mov.w	fp, #0
 80049b2:	4652      	mov	r2, sl
 80049b4:	465b      	mov	r3, fp
 80049b6:	f04f 0000 	mov.w	r0, #0
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	0159      	lsls	r1, r3, #5
 80049c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c4:	0150      	lsls	r0, r2, #5
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	ebb2 080a 	subs.w	r8, r2, sl
 80049ce:	eb63 090b 	sbc.w	r9, r3, fp
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049e6:	ebb2 0408 	subs.w	r4, r2, r8
 80049ea:	eb63 0509 	sbc.w	r5, r3, r9
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	00eb      	lsls	r3, r5, #3
 80049f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fc:	00e2      	lsls	r2, r4, #3
 80049fe:	4614      	mov	r4, r2
 8004a00:	461d      	mov	r5, r3
 8004a02:	eb14 030a 	adds.w	r3, r4, sl
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	eb45 030b 	adc.w	r3, r5, fp
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	028b      	lsls	r3, r1, #10
 8004a1e:	4621      	mov	r1, r4
 8004a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a24:	4621      	mov	r1, r4
 8004a26:	028a      	lsls	r2, r1, #10
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	60fa      	str	r2, [r7, #12]
 8004a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a38:	f7fc f908 	bl	8000c4c <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a5e:	e002      	b.n	8004a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3740      	adds	r7, #64	; 0x40
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	017d7840 	.word	0x017d7840

08004a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000000 	.word	0x20000000

08004a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0b5b      	lsrs	r3, r3, #13
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	; (8004abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	0801e1d8 	.word	0x0801e1d8

08004ac0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	220f      	movs	r2, #15
 8004ace:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ad0:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_GetClockConfig+0x5c>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_RCC_GetClockConfig+0x5c>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <HAL_RCC_GetClockConfig+0x5c>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_GetClockConfig+0x5c>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCC_GetClockConfig+0x60>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40023c00 	.word	0x40023c00

08004b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e049      	b.n	8004bca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f841 	bl	8004bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f000 fd30 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e054      	b.n	8004caa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d01d      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <HAL_TIM_Base_Start_IT+0xe4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d115      	bne.n	8004c94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xec>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d015      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d011      	beq.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40001800 	.word	0x40001800
 8004cd4:	00010007 	.word	0x00010007

08004cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e049      	b.n	8004d7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fed8 	bl	8001ab4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 fc56 	bl	80055c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e03c      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x3e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e02f      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x58>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e022      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d109      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x72>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	bf14      	ite	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	2300      	moveq	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	e015      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b10      	cmp	r3, #16
 8004dfe:	d109      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x8c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e008      	b.n	8004e26 <HAL_TIM_PWM_Start+0x9e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e092      	b.n	8004f54 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xb6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	e023      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xc6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	e01b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xd6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	e013      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b0c      	cmp	r3, #12
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xe6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6c:	e00b      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xf6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	e003      	b.n	8004e86 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	6839      	ldr	r1, [r7, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 ff32 	bl	8005cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_PWM_Start+0x120>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_PWM_Start+0x124>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_PWM_Start+0x126>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_TIM_PWM_Start+0x1d4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start+0x1dc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_TIM_PWM_Start+0x1e4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_TIM_PWM_Start+0x1d8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1b      	ldr	r2, [pc, #108]	; (8004f70 <HAL_TIM_PWM_Start+0x1e8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x18a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <HAL_TIM_PWM_Start+0x1ec>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d115      	bne.n	8004f3e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_TIM_PWM_Start+0x1f0>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	d015      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f2a:	d011      	beq.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	e008      	b.n	8004f50 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e000      	b.n	8004f52 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40010400 	.word	0x40010400
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0202 	mvn.w	r2, #2
 8004fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fae4 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fad6 	bl	8005578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fae7 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0204 	mvn.w	r2, #4
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 faba 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 faac 	bl	8005578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fabd 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b08      	cmp	r3, #8
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0208 	mvn.w	r2, #8
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2204      	movs	r2, #4
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa90 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa82 	bl	8005578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fa93 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	2b10      	cmp	r3, #16
 800508c:	d122      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b10      	cmp	r3, #16
 800509a:	d11b      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0210 	mvn.w	r2, #16
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2208      	movs	r2, #8
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa66 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa58 	bl	8005578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fa69 	bl	80055a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0201 	mvn.w	r2, #1
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc fb48 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510a:	2b80      	cmp	r3, #128	; 0x80
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fea4 	bl	8005e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fe97 	bl	8005e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005164:	2b40      	cmp	r3, #64	; 0x40
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa17 	bl	80055b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b20      	cmp	r3, #32
 8005192:	d10e      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b20      	cmp	r3, #32
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0220 	mvn.w	r2, #32
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fe57 	bl	8005e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e0ff      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b14      	cmp	r3, #20
 80051e6:	f200 80f0 	bhi.w	80053ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005245 	.word	0x08005245
 80051f4:	080053cb 	.word	0x080053cb
 80051f8:	080053cb 	.word	0x080053cb
 80051fc:	080053cb 	.word	0x080053cb
 8005200:	08005285 	.word	0x08005285
 8005204:	080053cb 	.word	0x080053cb
 8005208:	080053cb 	.word	0x080053cb
 800520c:	080053cb 	.word	0x080053cb
 8005210:	080052c7 	.word	0x080052c7
 8005214:	080053cb 	.word	0x080053cb
 8005218:	080053cb 	.word	0x080053cb
 800521c:	080053cb 	.word	0x080053cb
 8005220:	08005307 	.word	0x08005307
 8005224:	080053cb 	.word	0x080053cb
 8005228:	080053cb 	.word	0x080053cb
 800522c:	080053cb 	.word	0x080053cb
 8005230:	08005349 	.word	0x08005349
 8005234:	080053cb 	.word	0x080053cb
 8005238:	080053cb 	.word	0x080053cb
 800523c:	080053cb 	.word	0x080053cb
 8005240:	08005389 	.word	0x08005389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa5c 	bl	8005708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0208 	orr.w	r2, r2, #8
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0204 	bic.w	r2, r2, #4
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
      break;
 8005282:	e0a5      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f000 faae 	bl	80057ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800529e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6999      	ldr	r1, [r3, #24]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	021a      	lsls	r2, r3, #8
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	619a      	str	r2, [r3, #24]
      break;
 80052c4:	e084      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fb05 	bl	80058dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0208 	orr.w	r2, r2, #8
 80052e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69d9      	ldr	r1, [r3, #28]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]
      break;
 8005304:	e064      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fb5b 	bl	80059c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69d9      	ldr	r1, [r3, #28]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	021a      	lsls	r2, r3, #8
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	61da      	str	r2, [r3, #28]
      break;
 8005346:	e043      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fb92 	bl	8005a78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005386:	e023      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fbc4 	bl	8005b1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053c8:	e002      	b.n	80053d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
      break;
 80053ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop

080053e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_ConfigClockSource+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0b4      	b.n	800556a <HAL_TIM_ConfigClockSource+0x186>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4b56      	ldr	r3, [pc, #344]	; (8005574 <HAL_TIM_ConfigClockSource+0x190>)
 800541c:	4013      	ands	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0xd4>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x172>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xa6>
 8005454:	2b70      	cmp	r3, #112	; 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x11a>
 800545c:	2b60      	cmp	r3, #96	; 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xfa>
 8005464:	2b50      	cmp	r3, #80	; 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x13a>
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f000 fc0d 	bl	8005cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f000 fbf6 	bl	8005cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 fb6a 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	; 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fbc3 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	461a      	mov	r2, r3
 800550c:	f000 fb89 	bl	8005c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	; 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fbb3 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	461a      	mov	r2, r3
 800552c:	f000 fb4a 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fba3 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 fb9a 	bl	8005c82 <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	fffeff88 	.word	0xfffeff88

08005578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a40      	ldr	r2, [pc, #256]	; (80056dc <TIM_Base_SetConfig+0x114>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d00f      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3d      	ldr	r2, [pc, #244]	; (80056e0 <TIM_Base_SetConfig+0x118>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3c      	ldr	r2, [pc, #240]	; (80056e4 <TIM_Base_SetConfig+0x11c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3b      	ldr	r2, [pc, #236]	; (80056e8 <TIM_Base_SetConfig+0x120>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3a      	ldr	r2, [pc, #232]	; (80056ec <TIM_Base_SetConfig+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d108      	bne.n	800561a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <TIM_Base_SetConfig+0x114>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d027      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <TIM_Base_SetConfig+0x118>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d023      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <TIM_Base_SetConfig+0x11c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01f      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <TIM_Base_SetConfig+0x120>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a29      	ldr	r2, [pc, #164]	; (80056ec <TIM_Base_SetConfig+0x124>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <TIM_Base_SetConfig+0x128>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <TIM_Base_SetConfig+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <TIM_Base_SetConfig+0x130>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <TIM_Base_SetConfig+0x134>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a24      	ldr	r2, [pc, #144]	; (8005700 <TIM_Base_SetConfig+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a23      	ldr	r2, [pc, #140]	; (8005704 <TIM_Base_SetConfig+0x13c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <TIM_Base_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0xf8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d103      	bne.n	80056c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	615a      	str	r2, [r3, #20]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40000800 	.word	0x40000800
 80056e8:	40000c00 	.word	0x40000c00
 80056ec:	40010400 	.word	0x40010400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	40014400 	.word	0x40014400
 80056f8:	40014800 	.word	0x40014800
 80056fc:	40001800 	.word	0x40001800
 8005700:	40001c00 	.word	0x40001c00
 8005704:	40002000 	.word	0x40002000

08005708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <TIM_OC1_SetConfig+0xd8>)
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 0302 	bic.w	r3, r3, #2
 8005750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <TIM_OC1_SetConfig+0xdc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC1_SetConfig+0x64>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a20      	ldr	r2, [pc, #128]	; (80057e8 <TIM_OC1_SetConfig+0xe0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10c      	bne.n	8005786 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0308 	bic.w	r3, r3, #8
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a16      	ldr	r2, [pc, #88]	; (80057e4 <TIM_OC1_SetConfig+0xdc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d003      	beq.n	8005796 <TIM_OC1_SetConfig+0x8e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <TIM_OC1_SetConfig+0xe0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d111      	bne.n	80057ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	fffeff8f 	.word	0xfffeff8f
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0210 	bic.w	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <TIM_OC2_SetConfig+0xe4>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0320 	bic.w	r3, r3, #32
 8005836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <TIM_OC2_SetConfig+0xe8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC2_SetConfig+0x68>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <TIM_OC2_SetConfig+0xec>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d10d      	bne.n	8005870 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800586e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_OC2_SetConfig+0xe8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC2_SetConfig+0x94>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC2_SetConfig+0xec>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d113      	bne.n	80058a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	feff8fff 	.word	0xfeff8fff
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40010400 	.word	0x40010400

080058dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <TIM_OC3_SetConfig+0xe0>)
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <TIM_OC3_SetConfig+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_OC3_SetConfig+0x66>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <TIM_OC3_SetConfig+0xe8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10d      	bne.n	800595e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800595c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a17      	ldr	r2, [pc, #92]	; (80059c0 <TIM_OC3_SetConfig+0xe4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC3_SetConfig+0x92>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <TIM_OC3_SetConfig+0xe8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d113      	bne.n	8005996 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	621a      	str	r2, [r3, #32]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	fffeff8f 	.word	0xfffeff8f
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400

080059c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <TIM_OC4_SetConfig+0xa4>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <TIM_OC4_SetConfig+0xa8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC4_SetConfig+0x68>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <TIM_OC4_SetConfig+0xac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d109      	bne.n	8005a44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	feff8fff 	.word	0xfeff8fff
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40010400 	.word	0x40010400

08005a78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <TIM_OC5_SetConfig+0x98>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	041b      	lsls	r3, r3, #16
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <TIM_OC5_SetConfig+0x9c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC5_SetConfig+0x5e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <TIM_OC5_SetConfig+0xa0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d109      	bne.n	8005aea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005adc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	021b      	lsls	r3, r3, #8
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	fffeff8f 	.word	0xfffeff8f
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <TIM_OC6_SetConfig+0x9c>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	051b      	lsls	r3, r3, #20
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a13      	ldr	r2, [pc, #76]	; (8005bbc <TIM_OC6_SetConfig+0xa0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC6_SetConfig+0x60>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <TIM_OC6_SetConfig+0xa4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	feff8fff 	.word	0xfeff8fff
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0201 	bic.w	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f023 030a 	bic.w	r3, r3, #10
 8005c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f023 0210 	bic.w	r2, r3, #16
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	031b      	lsls	r3, r3, #12
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b085      	sub	sp, #20
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f043 0307 	orr.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 031f 	and.w	r3, r3, #31
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e06d      	b.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a30      	ldr	r2, [pc, #192]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2f      	ldr	r2, [pc, #188]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d108      	bne.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d01d      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a15      	ldr	r2, [pc, #84]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10c      	bne.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40001800 	.word	0x40001800

08005e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  return &gnetif;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <get_static_netif+0x10>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000604 	.word	0x20000604

08005eb0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005eb6:	4b98      	ldr	r3, [pc, #608]	; (8006118 <MX_LWIP_Init+0x268>)
 8005eb8:	220a      	movs	r2, #10
 8005eba:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005ebc:	4b96      	ldr	r3, [pc, #600]	; (8006118 <MX_LWIP_Init+0x268>)
 8005ebe:	222a      	movs	r2, #42	; 0x2a
 8005ec0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005ec2:	4b95      	ldr	r3, [pc, #596]	; (8006118 <MX_LWIP_Init+0x268>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8005ec8:	4b93      	ldr	r3, [pc, #588]	; (8006118 <MX_LWIP_Init+0x268>)
 8005eca:	2220      	movs	r2, #32
 8005ecc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005ece:	4b93      	ldr	r3, [pc, #588]	; (800611c <MX_LWIP_Init+0x26c>)
 8005ed0:	22ff      	movs	r2, #255	; 0xff
 8005ed2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005ed4:	4b91      	ldr	r3, [pc, #580]	; (800611c <MX_LWIP_Init+0x26c>)
 8005ed6:	22ff      	movs	r2, #255	; 0xff
 8005ed8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005eda:	4b90      	ldr	r3, [pc, #576]	; (800611c <MX_LWIP_Init+0x26c>)
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005ee0:	4b8e      	ldr	r3, [pc, #568]	; (800611c <MX_LWIP_Init+0x26c>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005ee6:	4b8e      	ldr	r3, [pc, #568]	; (8006120 <MX_LWIP_Init+0x270>)
 8005ee8:	220a      	movs	r2, #10
 8005eea:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8005eec:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <MX_LWIP_Init+0x270>)
 8005eee:	222a      	movs	r2, #42	; 0x2a
 8005ef0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005ef2:	4b8b      	ldr	r3, [pc, #556]	; (8006120 <MX_LWIP_Init+0x270>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005ef8:	4b89      	ldr	r3, [pc, #548]	; (8006120 <MX_LWIP_Init+0x270>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005efe:	2100      	movs	r1, #0
 8005f00:	2000      	movs	r0, #0
 8005f02:	f006 ff43 	bl	800cd8c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005f06:	4b84      	ldr	r3, [pc, #528]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	061a      	lsls	r2, r3, #24
 8005f0c:	4b82      	ldr	r3, [pc, #520]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	431a      	orrs	r2, r3
 8005f14:	4b80      	ldr	r3, [pc, #512]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	4a7e      	ldr	r2, [pc, #504]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f1e:	78d2      	ldrb	r2, [r2, #3]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	061a      	lsls	r2, r3, #24
 8005f24:	4b7c      	ldr	r3, [pc, #496]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	0619      	lsls	r1, r3, #24
 8005f2a:	4b7b      	ldr	r3, [pc, #492]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	4319      	orrs	r1, r3
 8005f32:	4b79      	ldr	r3, [pc, #484]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f34:	789b      	ldrb	r3, [r3, #2]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	4977      	ldr	r1, [pc, #476]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f3c:	78c9      	ldrb	r1, [r1, #3]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f46:	431a      	orrs	r2, r3
 8005f48:	4b73      	ldr	r3, [pc, #460]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	0619      	lsls	r1, r3, #24
 8005f4e:	4b72      	ldr	r3, [pc, #456]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	4319      	orrs	r1, r3
 8005f56:	4b70      	ldr	r3, [pc, #448]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f58:	789b      	ldrb	r3, [r3, #2]
 8005f5a:	021b      	lsls	r3, r3, #8
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	496e      	ldr	r1, [pc, #440]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f60:	78c9      	ldrb	r1, [r1, #3]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	0a1b      	lsrs	r3, r3, #8
 8005f66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	4b6a      	ldr	r3, [pc, #424]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	0619      	lsls	r1, r3, #24
 8005f72:	4b69      	ldr	r3, [pc, #420]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	4319      	orrs	r1, r3
 8005f7a:	4b67      	ldr	r3, [pc, #412]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f7c:	789b      	ldrb	r3, [r3, #2]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	430b      	orrs	r3, r1
 8005f82:	4965      	ldr	r1, [pc, #404]	; (8006118 <MX_LWIP_Init+0x268>)
 8005f84:	78c9      	ldrb	r1, [r1, #3]
 8005f86:	430b      	orrs	r3, r1
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	4a65      	ldr	r2, [pc, #404]	; (8006124 <MX_LWIP_Init+0x274>)
 8005f8e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005f90:	4b62      	ldr	r3, [pc, #392]	; (800611c <MX_LWIP_Init+0x26c>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	061a      	lsls	r2, r3, #24
 8005f96:	4b61      	ldr	r3, [pc, #388]	; (800611c <MX_LWIP_Init+0x26c>)
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fa0:	789b      	ldrb	r3, [r3, #2]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a5d      	ldr	r2, [pc, #372]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fa8:	78d2      	ldrb	r2, [r2, #3]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	061a      	lsls	r2, r3, #24
 8005fae:	4b5b      	ldr	r3, [pc, #364]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	0619      	lsls	r1, r3, #24
 8005fb4:	4b59      	ldr	r3, [pc, #356]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	4319      	orrs	r1, r3
 8005fbc:	4b57      	ldr	r3, [pc, #348]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fbe:	789b      	ldrb	r3, [r3, #2]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	4955      	ldr	r1, [pc, #340]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fc6:	78c9      	ldrb	r1, [r1, #3]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	4b52      	ldr	r3, [pc, #328]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	0619      	lsls	r1, r3, #24
 8005fd8:	4b50      	ldr	r3, [pc, #320]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	041b      	lsls	r3, r3, #16
 8005fde:	4319      	orrs	r1, r3
 8005fe0:	4b4e      	ldr	r3, [pc, #312]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fe2:	789b      	ldrb	r3, [r3, #2]
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	494c      	ldr	r1, [pc, #304]	; (800611c <MX_LWIP_Init+0x26c>)
 8005fea:	78c9      	ldrb	r1, [r1, #3]
 8005fec:	430b      	orrs	r3, r1
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	4b49      	ldr	r3, [pc, #292]	; (800611c <MX_LWIP_Init+0x26c>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	0619      	lsls	r1, r3, #24
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <MX_LWIP_Init+0x26c>)
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	4319      	orrs	r1, r3
 8006004:	4b45      	ldr	r3, [pc, #276]	; (800611c <MX_LWIP_Init+0x26c>)
 8006006:	789b      	ldrb	r3, [r3, #2]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	430b      	orrs	r3, r1
 800600c:	4943      	ldr	r1, [pc, #268]	; (800611c <MX_LWIP_Init+0x26c>)
 800600e:	78c9      	ldrb	r1, [r1, #3]
 8006010:	430b      	orrs	r3, r1
 8006012:	0e1b      	lsrs	r3, r3, #24
 8006014:	4313      	orrs	r3, r2
 8006016:	4a44      	ldr	r2, [pc, #272]	; (8006128 <MX_LWIP_Init+0x278>)
 8006018:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800601a:	4b41      	ldr	r3, [pc, #260]	; (8006120 <MX_LWIP_Init+0x270>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	061a      	lsls	r2, r3, #24
 8006020:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <MX_LWIP_Init+0x270>)
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	431a      	orrs	r2, r3
 8006028:	4b3d      	ldr	r3, [pc, #244]	; (8006120 <MX_LWIP_Init+0x270>)
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	4313      	orrs	r3, r2
 8006030:	4a3b      	ldr	r2, [pc, #236]	; (8006120 <MX_LWIP_Init+0x270>)
 8006032:	78d2      	ldrb	r2, [r2, #3]
 8006034:	4313      	orrs	r3, r2
 8006036:	061a      	lsls	r2, r3, #24
 8006038:	4b39      	ldr	r3, [pc, #228]	; (8006120 <MX_LWIP_Init+0x270>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	0619      	lsls	r1, r3, #24
 800603e:	4b38      	ldr	r3, [pc, #224]	; (8006120 <MX_LWIP_Init+0x270>)
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	041b      	lsls	r3, r3, #16
 8006044:	4319      	orrs	r1, r3
 8006046:	4b36      	ldr	r3, [pc, #216]	; (8006120 <MX_LWIP_Init+0x270>)
 8006048:	789b      	ldrb	r3, [r3, #2]
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	430b      	orrs	r3, r1
 800604e:	4934      	ldr	r1, [pc, #208]	; (8006120 <MX_LWIP_Init+0x270>)
 8006050:	78c9      	ldrb	r1, [r1, #3]
 8006052:	430b      	orrs	r3, r1
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800605a:	431a      	orrs	r2, r3
 800605c:	4b30      	ldr	r3, [pc, #192]	; (8006120 <MX_LWIP_Init+0x270>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	0619      	lsls	r1, r3, #24
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <MX_LWIP_Init+0x270>)
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	4319      	orrs	r1, r3
 800606a:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <MX_LWIP_Init+0x270>)
 800606c:	789b      	ldrb	r3, [r3, #2]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	430b      	orrs	r3, r1
 8006072:	492b      	ldr	r1, [pc, #172]	; (8006120 <MX_LWIP_Init+0x270>)
 8006074:	78c9      	ldrb	r1, [r1, #3]
 8006076:	430b      	orrs	r3, r1
 8006078:	0a1b      	lsrs	r3, r3, #8
 800607a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800607e:	431a      	orrs	r2, r3
 8006080:	4b27      	ldr	r3, [pc, #156]	; (8006120 <MX_LWIP_Init+0x270>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	0619      	lsls	r1, r3, #24
 8006086:	4b26      	ldr	r3, [pc, #152]	; (8006120 <MX_LWIP_Init+0x270>)
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	041b      	lsls	r3, r3, #16
 800608c:	4319      	orrs	r1, r3
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <MX_LWIP_Init+0x270>)
 8006090:	789b      	ldrb	r3, [r3, #2]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	430b      	orrs	r3, r1
 8006096:	4922      	ldr	r1, [pc, #136]	; (8006120 <MX_LWIP_Init+0x270>)
 8006098:	78c9      	ldrb	r1, [r1, #3]
 800609a:	430b      	orrs	r3, r1
 800609c:	0e1b      	lsrs	r3, r3, #24
 800609e:	4313      	orrs	r3, r2
 80060a0:	4a22      	ldr	r2, [pc, #136]	; (800612c <MX_LWIP_Init+0x27c>)
 80060a2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <MX_LWIP_Init+0x280>)
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <MX_LWIP_Init+0x284>)
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <MX_LWIP_Init+0x27c>)
 80060b2:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <MX_LWIP_Init+0x278>)
 80060b4:	491b      	ldr	r1, [pc, #108]	; (8006124 <MX_LWIP_Init+0x274>)
 80060b6:	4820      	ldr	r0, [pc, #128]	; (8006138 <MX_LWIP_Init+0x288>)
 80060b8:	f007 fd4a 	bl	800db50 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80060bc:	481e      	ldr	r0, [pc, #120]	; (8006138 <MX_LWIP_Init+0x288>)
 80060be:	f007 fef5 	bl	800deac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <MX_LWIP_Init+0x288>)
 80060c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80060d4:	4818      	ldr	r0, [pc, #96]	; (8006138 <MX_LWIP_Init+0x288>)
 80060d6:	f007 fef9 	bl	800decc <netif_set_up>
 80060da:	e002      	b.n	80060e2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80060dc:	4816      	ldr	r0, [pc, #88]	; (8006138 <MX_LWIP_Init+0x288>)
 80060de:	f007 ff61 	bl	800dfa4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80060e2:	4916      	ldr	r1, [pc, #88]	; (800613c <MX_LWIP_Init+0x28c>)
 80060e4:	4814      	ldr	r0, [pc, #80]	; (8006138 <MX_LWIP_Init+0x288>)
 80060e6:	f007 fff3 	bl	800e0d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80060ea:	2224      	movs	r2, #36	; 0x24
 80060ec:	2100      	movs	r1, #0
 80060ee:	4814      	ldr	r0, [pc, #80]	; (8006140 <MX_LWIP_Init+0x290>)
 80060f0:	f011 fe71 	bl	8017dd6 <memset>
  attributes.name = "EthLink";
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <MX_LWIP_Init+0x290>)
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <MX_LWIP_Init+0x294>)
 80060f8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80060fa:	4b11      	ldr	r3, [pc, #68]	; (8006140 <MX_LWIP_Init+0x290>)
 80060fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006100:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <MX_LWIP_Init+0x290>)
 8006104:	2210      	movs	r2, #16
 8006106:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006108:	4a0d      	ldr	r2, [pc, #52]	; (8006140 <MX_LWIP_Init+0x290>)
 800610a:	490b      	ldr	r1, [pc, #44]	; (8006138 <MX_LWIP_Init+0x288>)
 800610c:	480e      	ldr	r0, [pc, #56]	; (8006148 <MX_LWIP_Init+0x298>)
 800610e:	f000 fda3 	bl	8006c58 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000644 	.word	0x20000644
 800611c:	20000648 	.word	0x20000648
 8006120:	2000064c 	.word	0x2000064c
 8006124:	20000638 	.word	0x20000638
 8006128:	2000063c 	.word	0x2000063c
 800612c:	20000640 	.word	0x20000640
 8006130:	0800cc9d 	.word	0x0800cc9d
 8006134:	08006649 	.word	0x08006649
 8006138:	20000604 	.word	0x20000604
 800613c:	0800614d 	.word	0x0800614d
 8006140:	20000650 	.word	0x20000650
 8006144:	0801afa4 	.word	0x0801afa4
 8006148:	08006911 	.word	0x08006911

0800614c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006172:	2320      	movs	r3, #32
 8006174:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006176:	f3bf 8f4f 	dsb	sy
}
 800617a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800617c:	e00b      	b.n	8006196 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800617e:	4a0d      	ldr	r2, [pc, #52]	; (80061b4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dcf0      	bgt.n	800617e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800619c:	f3bf 8f4f 	dsb	sy
}
 80061a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80061a2:	f3bf 8f6f 	isb	sy
}
 80061a6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	e000ed00 	.word	0xe000ed00

080061b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f865 	bl	8007294 <osSemaphoreRelease>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20005000 	.word	0x20005000

080061d8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <HAL_ETH_TxCpltCallback+0x1c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f855 	bl	8007294 <osSemaphoreRelease>
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20005004 	.word	0x20005004

080061f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fd f9c1 	bl	8003588 <HAL_ETH_GetDMAError>
 8006206:	4603      	mov	r3, r0
 8006208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d104      	bne.n	800621a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <HAL_ETH_ErrorCallback+0x2c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	f001 f83d 	bl	8007294 <osSemaphoreRelease>
  }
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20005000 	.word	0x20005000

08006228 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0aa      	sub	sp, #168	; 0xa8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8006242:	f107 0310 	add.w	r3, r7, #16
 8006246:	2264      	movs	r2, #100	; 0x64
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f011 fdc3 	bl	8017dd6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006250:	4b85      	ldr	r3, [pc, #532]	; (8006468 <low_level_init+0x240>)
 8006252:	4a86      	ldr	r2, [pc, #536]	; (800646c <low_level_init+0x244>)
 8006254:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006256:	2300      	movs	r3, #0
 8006258:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800625e:	23e1      	movs	r3, #225	; 0xe1
 8006260:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006262:	2300      	movs	r3, #0
 8006264:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006266:	2300      	movs	r3, #0
 8006268:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800626a:	2300      	movs	r3, #0
 800626c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800626e:	4a7e      	ldr	r2, [pc, #504]	; (8006468 <low_level_init+0x240>)
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006276:	4b7c      	ldr	r3, [pc, #496]	; (8006468 <low_level_init+0x240>)
 8006278:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800627c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800627e:	4b7a      	ldr	r3, [pc, #488]	; (8006468 <low_level_init+0x240>)
 8006280:	4a7b      	ldr	r2, [pc, #492]	; (8006470 <low_level_init+0x248>)
 8006282:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006284:	4b78      	ldr	r3, [pc, #480]	; (8006468 <low_level_init+0x240>)
 8006286:	4a7b      	ldr	r2, [pc, #492]	; (8006474 <low_level_init+0x24c>)
 8006288:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800628a:	4b77      	ldr	r3, [pc, #476]	; (8006468 <low_level_init+0x240>)
 800628c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006290:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006292:	4875      	ldr	r0, [pc, #468]	; (8006468 <low_level_init+0x240>)
 8006294:	f7fc fada 	bl	800284c <HAL_ETH_Init>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800629e:	2238      	movs	r2, #56	; 0x38
 80062a0:	2100      	movs	r1, #0
 80062a2:	4875      	ldr	r0, [pc, #468]	; (8006478 <low_level_init+0x250>)
 80062a4:	f011 fd97 	bl	8017dd6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80062a8:	4b73      	ldr	r3, [pc, #460]	; (8006478 <low_level_init+0x250>)
 80062aa:	2221      	movs	r2, #33	; 0x21
 80062ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80062ae:	4b72      	ldr	r3, [pc, #456]	; (8006478 <low_level_init+0x250>)
 80062b0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80062b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80062b6:	4b70      	ldr	r3, [pc, #448]	; (8006478 <low_level_init+0x250>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80062bc:	486f      	ldr	r0, [pc, #444]	; (800647c <low_level_init+0x254>)
 80062be:	f007 fb01 	bl	800d8c4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2206      	movs	r2, #6
 80062c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80062ca:	4b67      	ldr	r3, [pc, #412]	; (8006468 <low_level_init+0x240>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80062d6:	4b64      	ldr	r3, [pc, #400]	; (8006468 <low_level_init+0x240>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	785a      	ldrb	r2, [r3, #1]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80062e2:	4b61      	ldr	r3, [pc, #388]	; (8006468 <low_level_init+0x240>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	789a      	ldrb	r2, [r3, #2]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80062ee:	4b5e      	ldr	r3, [pc, #376]	; (8006468 <low_level_init+0x240>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	78da      	ldrb	r2, [r3, #3]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80062fa:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <low_level_init+0x240>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	791a      	ldrb	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006306:	4b58      	ldr	r3, [pc, #352]	; (8006468 <low_level_init+0x240>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	795a      	ldrb	r2, [r3, #5]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006318:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006320:	f043 030a 	orr.w	r3, r3, #10
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800632c:	2200      	movs	r2, #0
 800632e:	2101      	movs	r1, #1
 8006330:	2001      	movs	r0, #1
 8006332:	f000 fead 	bl	8007090 <osSemaphoreNew>
 8006336:	4603      	mov	r3, r0
 8006338:	4a51      	ldr	r2, [pc, #324]	; (8006480 <low_level_init+0x258>)
 800633a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800633c:	2200      	movs	r2, #0
 800633e:	2101      	movs	r1, #1
 8006340:	2001      	movs	r0, #1
 8006342:	f000 fea5 	bl	8007090 <osSemaphoreNew>
 8006346:	4603      	mov	r3, r0
 8006348:	4a4e      	ldr	r2, [pc, #312]	; (8006484 <low_level_init+0x25c>)
 800634a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800634c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006350:	2224      	movs	r2, #36	; 0x24
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f011 fd3e 	bl	8017dd6 <memset>
  attributes.name = "EthIf";
 800635a:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <low_level_init+0x260>)
 800635c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800635e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8006362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8006366:	2330      	movs	r3, #48	; 0x30
 8006368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800636c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4845      	ldr	r0, [pc, #276]	; (800648c <low_level_init+0x264>)
 8006376:	f000 fc6f 	bl	8006c58 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800637a:	4945      	ldr	r1, [pc, #276]	; (8006490 <low_level_init+0x268>)
 800637c:	4845      	ldr	r0, [pc, #276]	; (8006494 <low_level_init+0x26c>)
 800637e:	f7fb feda 	bl	8002136 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006382:	4844      	ldr	r0, [pc, #272]	; (8006494 <low_level_init+0x26c>)
 8006384:	f7fb ff09 	bl	800219a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006388:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800638c:	2b00      	cmp	r3, #0
 800638e:	d164      	bne.n	800645a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006390:	4840      	ldr	r0, [pc, #256]	; (8006494 <low_level_init+0x26c>)
 8006392:	f7fb ffaa 	bl	80022ea <LAN8742_GetLinkState>
 8006396:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800639a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800639e:	2b01      	cmp	r3, #1
 80063a0:	dc06      	bgt.n	80063b0 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f007 fe64 	bl	800e070 <netif_set_link_down>
      netif_set_down(netif);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f007 fdfb 	bl	800dfa4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80063ae:	e056      	b.n	800645e <low_level_init+0x236>
      switch (PHYLinkState)
 80063b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b4:	3b02      	subs	r3, #2
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d82a      	bhi.n	8006410 <low_level_init+0x1e8>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <low_level_init+0x198>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d1 	.word	0x080063d1
 80063c4:	080063e3 	.word	0x080063e3
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	08006403 	.word	0x08006403
        duplex = ETH_FULLDUPLEX_MODE;
 80063d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80063d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80063e0:	e01f      	b.n	8006422 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80063e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80063f0:	e017      	b.n	8006422 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80063f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006400:	e00f      	b.n	8006422 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006402:	2300      	movs	r3, #0
 8006404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800640e:	e008      	b.n	8006422 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006414:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800641c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006420:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006422:	f107 0310 	add.w	r3, r7, #16
 8006426:	4619      	mov	r1, r3
 8006428:	480f      	ldr	r0, [pc, #60]	; (8006468 <low_level_init+0x240>)
 800642a:	f7fc ff53 	bl	80032d4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800642e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8006434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800643a:	f107 0310 	add.w	r3, r7, #16
 800643e:	4619      	mov	r1, r3
 8006440:	4809      	ldr	r0, [pc, #36]	; (8006468 <low_level_init+0x240>)
 8006442:	f7fd f831 	bl	80034a8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006446:	4808      	ldr	r0, [pc, #32]	; (8006468 <low_level_init+0x240>)
 8006448:	f7fc fadc 	bl	8002a04 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f007 fd3d 	bl	800decc <netif_set_up>
    netif_set_link_up(netif);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f007 fdd8 	bl	800e008 <netif_set_link_up>
}
 8006458:	e001      	b.n	800645e <low_level_init+0x236>
    Error_Handler();
 800645a:	f7fb f9ab 	bl	80017b4 <Error_Handler>
}
 800645e:	bf00      	nop
 8006460:	37a8      	adds	r7, #168	; 0xa8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20005008 	.word	0x20005008
 800646c:	40028000 	.word	0x40028000
 8006470:	200002a0 	.word	0x200002a0
 8006474:	20000200 	.word	0x20000200
 8006478:	200050b8 	.word	0x200050b8
 800647c:	0801e1e0 	.word	0x0801e1e0
 8006480:	20005000 	.word	0x20005000
 8006484:	20005004 	.word	0x20005004
 8006488:	0801afac 	.word	0x0801afac
 800648c:	080065f5 	.word	0x080065f5
 8006490:	2000000c 	.word	0x2000000c
 8006494:	200050f0 	.word	0x200050f0

08006498 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b092      	sub	sp, #72	; 0x48
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	2230      	movs	r2, #48	; 0x30
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f011 fc8c 	bl	8017dd6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80064be:	f107 030c 	add.w	r3, r7, #12
 80064c2:	2230      	movs	r2, #48	; 0x30
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f011 fc85 	bl	8017dd6 <memset>

  for(q = p; q != NULL; q = q->next)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	643b      	str	r3, [r7, #64]	; 0x40
 80064d0:	e045      	b.n	800655e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80064d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d902      	bls.n	80064de <low_level_output+0x46>
      return ERR_IF;
 80064d8:	f06f 030b 	mvn.w	r3, #11
 80064dc:	e065      	b.n	80065aa <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80064de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	3348      	adds	r3, #72	; 0x48
 80064ee:	443b      	add	r3, r7
 80064f0:	3b3c      	subs	r3, #60	; 0x3c
 80064f2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80064f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f6:	895b      	ldrh	r3, [r3, #10]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064fc:	4613      	mov	r3, r2
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	3348      	adds	r3, #72	; 0x48
 8006506:	443b      	add	r3, r7
 8006508:	3b38      	subs	r3, #56	; 0x38
 800650a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800650c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650e:	2b00      	cmp	r3, #0
 8006510:	d011      	beq.n	8006536 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	f107 000c 	add.w	r0, r7, #12
 800651a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800651c:	460b      	mov	r3, r1
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	440b      	add	r3, r1
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	18c1      	adds	r1, r0, r3
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	3348      	adds	r3, #72	; 0x48
 8006530:	443b      	add	r3, r7
 8006532:	3b34      	subs	r3, #52	; 0x34
 8006534:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800653e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	3348      	adds	r3, #72	; 0x48
 800654a:	443b      	add	r3, r7
 800654c:	3b34      	subs	r3, #52	; 0x34
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006554:	3301      	adds	r3, #1
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	643b      	str	r3, [r7, #64]	; 0x40
 800655e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1b6      	bne.n	80064d2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	891b      	ldrh	r3, [r3, #8]
 8006568:	461a      	mov	r2, r3
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <low_level_output+0x11c>)
 800656c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800656e:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <low_level_output+0x11c>)
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006576:	4a0f      	ldr	r2, [pc, #60]	; (80065b4 <low_level_output+0x11c>)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800657c:	6838      	ldr	r0, [r7, #0]
 800657e:	f008 f9fb 	bl	800e978 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006582:	490c      	ldr	r1, [pc, #48]	; (80065b4 <low_level_output+0x11c>)
 8006584:	480c      	ldr	r0, [pc, #48]	; (80065b8 <low_level_output+0x120>)
 8006586:	f7fc fb4b 	bl	8002c20 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800658a:	bf00      	nop
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <low_level_output+0x124>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fe17 	bl	80071c8 <osSemaphoreAcquire>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f5      	bne.n	800658c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80065a0:	4805      	ldr	r0, [pc, #20]	; (80065b8 <low_level_output+0x120>)
 80065a2:	f7fc fcd1 	bl	8002f48 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80065a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3748      	adds	r7, #72	; 0x48
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200050b8 	.word	0x200050b8
 80065b8:	20005008 	.word	0x20005008
 80065bc:	20005004 	.word	0x20005004

080065c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <low_level_input+0x2c>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80065d4:	f107 030c 	add.w	r3, r7, #12
 80065d8:	4619      	mov	r1, r3
 80065da:	4805      	ldr	r0, [pc, #20]	; (80065f0 <low_level_input+0x30>)
 80065dc:	f7fc fb7c 	bl	8002cd8 <HAL_ETH_ReadData>
  }

  return p;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20004ffc 	.word	0x20004ffc
 80065f0:	20005008 	.word	0x20005008

080065f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <ethernetif_input+0x50>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fddb 	bl	80071c8 <osSemaphoreAcquire>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f5      	bne.n	8006604 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f7ff ffd1 	bl	80065c0 <low_level_input>
 800661e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	4798      	blx	r3
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f008 f8f8 	bl	800e82c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1ea      	bne.n	8006618 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006642:	e7df      	b.n	8006604 <ethernetif_input+0x10>
 8006644:	20005000 	.word	0x20005000

08006648 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <ethernetif_init+0x1c>
 8006656:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <ethernetif_init+0x48>)
 8006658:	f44f 720d 	mov.w	r2, #564	; 0x234
 800665c:	490d      	ldr	r1, [pc, #52]	; (8006694 <ethernetif_init+0x4c>)
 800665e:	480e      	ldr	r0, [pc, #56]	; (8006698 <ethernetif_init+0x50>)
 8006660:	f011 fc56 	bl	8017f10 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2273      	movs	r2, #115	; 0x73
 8006668:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2274      	movs	r2, #116	; 0x74
 8006670:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <ethernetif_init+0x54>)
 8006678:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <ethernetif_init+0x58>)
 800667e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff fdd1 	bl	8006228 <low_level_init>

  return ERR_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	0801afb4 	.word	0x0801afb4
 8006694:	0801afd0 	.word	0x0801afd0
 8006698:	0801afe0 	.word	0x0801afe0
 800669c:	08015ad9 	.word	0x08015ad9
 80066a0:	08006499 	.word	0x08006499

080066a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	4809      	ldr	r0, [pc, #36]	; (80066d8 <pbuf_free_custom+0x34>)
 80066b4:	f007 f9f6 	bl	800daa4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80066b8:	4b08      	ldr	r3, [pc, #32]	; (80066dc <pbuf_free_custom+0x38>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <pbuf_free_custom+0x38>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <pbuf_free_custom+0x3c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fde2 	bl	8007294 <osSemaphoreRelease>
  }
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	0801e1e0 	.word	0x0801e1e0
 80066dc:	20004ffc 	.word	0x20004ffc
 80066e0:	20005000 	.word	0x20005000

080066e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80066e8:	f7fb feb0 	bl	800244c <HAL_GetTick>
 80066ec:	4603      	mov	r3, r0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08e      	sub	sp, #56	; 0x38
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	60da      	str	r2, [r3, #12]
 800670a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a52      	ldr	r2, [pc, #328]	; (800685c <HAL_ETH_MspInit+0x168>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f040 809e 	bne.w	8006854 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006718:	4b51      	ldr	r3, [pc, #324]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	4a50      	ldr	r2, [pc, #320]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800671e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006722:	6313      	str	r3, [r2, #48]	; 0x30
 8006724:	4b4e      	ldr	r3, [pc, #312]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	4b4b      	ldr	r3, [pc, #300]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	4a4a      	ldr	r2, [pc, #296]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800673a:	6313      	str	r3, [r2, #48]	; 0x30
 800673c:	4b48      	ldr	r3, [pc, #288]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	4b45      	ldr	r3, [pc, #276]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	4a44      	ldr	r2, [pc, #272]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800674e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006752:	6313      	str	r3, [r2, #48]	; 0x30
 8006754:	4b42      	ldr	r3, [pc, #264]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	4a3e      	ldr	r2, [pc, #248]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006766:	f043 0304 	orr.w	r3, r3, #4
 800676a:	6313      	str	r3, [r2, #48]	; 0x30
 800676c:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	4a38      	ldr	r2, [pc, #224]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6313      	str	r3, [r2, #48]	; 0x30
 8006784:	4b36      	ldr	r3, [pc, #216]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006790:	4b33      	ldr	r3, [pc, #204]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	4a32      	ldr	r2, [pc, #200]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 8006796:	f043 0302 	orr.w	r3, r3, #2
 800679a:	6313      	str	r3, [r2, #48]	; 0x30
 800679c:	4b30      	ldr	r3, [pc, #192]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80067a8:	4b2d      	ldr	r3, [pc, #180]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	4a2c      	ldr	r2, [pc, #176]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 80067ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b2:	6313      	str	r3, [r2, #48]	; 0x30
 80067b4:	4b2a      	ldr	r3, [pc, #168]	; (8006860 <HAL_ETH_MspInit+0x16c>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80067c0:	2332      	movs	r3, #50	; 0x32
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c4:	2302      	movs	r3, #2
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067cc:	2303      	movs	r3, #3
 80067ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067d0:	230b      	movs	r3, #11
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d8:	4619      	mov	r1, r3
 80067da:	4822      	ldr	r0, [pc, #136]	; (8006864 <HAL_ETH_MspInit+0x170>)
 80067dc:	f7fd fae4 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80067e0:	2386      	movs	r3, #134	; 0x86
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e4:	2302      	movs	r3, #2
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ec:	2303      	movs	r3, #3
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80067f0:	230b      	movs	r3, #11
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067f8:	4619      	mov	r1, r3
 80067fa:	481b      	ldr	r0, [pc, #108]	; (8006868 <HAL_ETH_MspInit+0x174>)
 80067fc:	f7fd fad4 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006806:	2302      	movs	r3, #2
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800680a:	2300      	movs	r3, #0
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800680e:	2303      	movs	r3, #3
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006812:	230b      	movs	r3, #11
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800681a:	4619      	mov	r1, r3
 800681c:	4813      	ldr	r0, [pc, #76]	; (800686c <HAL_ETH_MspInit+0x178>)
 800681e:	f7fd fac3 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006828:	2302      	movs	r3, #2
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682c:	2300      	movs	r3, #0
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006834:	230b      	movs	r3, #11
 8006836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800683c:	4619      	mov	r1, r3
 800683e:	480c      	ldr	r0, [pc, #48]	; (8006870 <HAL_ETH_MspInit+0x17c>)
 8006840:	f7fd fab2 	bl	8003da8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006844:	2200      	movs	r2, #0
 8006846:	2105      	movs	r1, #5
 8006848:	203d      	movs	r0, #61	; 0x3d
 800684a:	f7fb fee7 	bl	800261c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800684e:	203d      	movs	r0, #61	; 0x3d
 8006850:	f7fb ff00 	bl	8002654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006854:	bf00      	nop
 8006856:	3738      	adds	r7, #56	; 0x38
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40028000 	.word	0x40028000
 8006860:	40023800 	.word	0x40023800
 8006864:	40020800 	.word	0x40020800
 8006868:	40020000 	.word	0x40020000
 800686c:	40020400 	.word	0x40020400
 8006870:	40021800 	.word	0x40021800

08006874 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <ETH_PHY_IO_Init+0x10>)
 800687a:	f7fc fe2f 	bl	80034dc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20005008 	.word	0x20005008

08006888 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  return 0;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	4807      	ldr	r0, [pc, #28]	; (80068c8 <ETH_PHY_IO_ReadReg+0x30>)
 80068ac:	f7fc fc7e 	bl	80031ac <HAL_ETH_ReadPHYRegister>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ba:	e000      	b.n	80068be <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20005008 	.word	0x20005008

080068cc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	4807      	ldr	r0, [pc, #28]	; (80068fc <ETH_PHY_IO_WriteReg+0x30>)
 80068e0:	f7fc fcaf 	bl	8003242 <HAL_ETH_WritePHYRegister>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ee:	e000      	b.n	80068f2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20005008 	.word	0x20005008

08006900 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006904:	f7fb fda2 	bl	800244c <HAL_GetTick>
 8006908:	4603      	mov	r3, r0
}
 800690a:	4618      	mov	r0, r3
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b0a0      	sub	sp, #128	; 0x80
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	2264      	movs	r2, #100	; 0x64
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f011 fa58 	bl	8017dd6 <memset>
  int32_t PHYLinkState = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800692e:	2300      	movs	r3, #0
 8006930:	67bb      	str	r3, [r7, #120]	; 0x78
 8006932:	2300      	movs	r3, #0
 8006934:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800693a:	483a      	ldr	r0, [pc, #232]	; (8006a24 <ethernet_link_thread+0x114>)
 800693c:	f7fb fcd5 	bl	80022ea <LAN8742_GetLinkState>
 8006940:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006948:	089b      	lsrs	r3, r3, #2
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <ethernet_link_thread+0x5e>
 8006954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006956:	2b01      	cmp	r3, #1
 8006958:	dc09      	bgt.n	800696e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800695a:	4833      	ldr	r0, [pc, #204]	; (8006a28 <ethernet_link_thread+0x118>)
 800695c:	f7fc f8e0 	bl	8002b20 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006960:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006962:	f007 fb1f 	bl	800dfa4 <netif_set_down>
    netif_set_link_down(netif);
 8006966:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006968:	f007 fb82 	bl	800e070 <netif_set_link_down>
 800696c:	e055      	b.n	8006a1a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800696e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d14e      	bne.n	8006a1a <ethernet_link_thread+0x10a>
 800697c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800697e:	2b01      	cmp	r3, #1
 8006980:	dd4b      	ble.n	8006a1a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006984:	3b02      	subs	r3, #2
 8006986:	2b03      	cmp	r3, #3
 8006988:	d82a      	bhi.n	80069e0 <ethernet_link_thread+0xd0>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <ethernet_link_thread+0x80>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a1 	.word	0x080069a1
 8006994:	080069b3 	.word	0x080069b3
 8006998:	080069c3 	.word	0x080069c3
 800699c:	080069d3 	.word	0x080069d3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80069a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80069a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80069b0:	e017      	b.n	80069e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80069b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80069bc:	2301      	movs	r3, #1
 80069be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80069c0:	e00f      	b.n	80069e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80069c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80069c8:	2300      	movs	r3, #0
 80069ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80069cc:	2301      	movs	r3, #1
 80069ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80069d0:	e007      	b.n	80069e2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80069d6:	2300      	movs	r3, #0
 80069d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80069da:	2301      	movs	r3, #1
 80069dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80069de:	e000      	b.n	80069e2 <ethernet_link_thread+0xd2>
    default:
      break;
 80069e0:	bf00      	nop
    }

    if(linkchanged)
 80069e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d018      	beq.n	8006a1a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80069e8:	f107 0308 	add.w	r3, r7, #8
 80069ec:	4619      	mov	r1, r3
 80069ee:	480e      	ldr	r0, [pc, #56]	; (8006a28 <ethernet_link_thread+0x118>)
 80069f0:	f7fc fc70 	bl	80032d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80069f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80069f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069fa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80069fc:	f107 0308 	add.w	r3, r7, #8
 8006a00:	4619      	mov	r1, r3
 8006a02:	4809      	ldr	r0, [pc, #36]	; (8006a28 <ethernet_link_thread+0x118>)
 8006a04:	f7fc fd50 	bl	80034a8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006a08:	4807      	ldr	r0, [pc, #28]	; (8006a28 <ethernet_link_thread+0x118>)
 8006a0a:	f7fb ff9b 	bl	8002944 <HAL_ETH_Start>
      netif_set_up(netif);
 8006a0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a10:	f007 fa5c 	bl	800decc <netif_set_up>
      netif_set_link_up(netif);
 8006a14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a16:	f007 faf7 	bl	800e008 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006a1a:	2064      	movs	r0, #100	; 0x64
 8006a1c:	f000 f9c2 	bl	8006da4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006a20:	e78b      	b.n	800693a <ethernet_link_thread+0x2a>
 8006a22:	bf00      	nop
 8006a24:	200050f0 	.word	0x200050f0
 8006a28:	20005008 	.word	0x20005008

08006a2c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006a34:	4812      	ldr	r0, [pc, #72]	; (8006a80 <HAL_ETH_RxAllocateCallback+0x54>)
 8006a36:	f006 ffc1 	bl	800d9bc <memp_malloc_pool>
 8006a3a:	60f8      	str	r0, [r7, #12]
  if (p)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d014      	beq.n	8006a6c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f103 0220 	add.w	r2, r3, #32
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <HAL_ETH_RxAllocateCallback+0x58>)
 8006a50:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2241      	movs	r2, #65	; 0x41
 8006a62:	2100      	movs	r1, #0
 8006a64:	2000      	movs	r0, #0
 8006a66:	f007 fd27 	bl	800e4b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006a6a:	e005      	b.n	8006a78 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	0801e1e0 	.word	0x0801e1e0
 8006a84:	080066a5 	.word	0x080066a5
 8006a88:	20004ffc 	.word	0x20004ffc

08006a8c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	3b20      	subs	r3, #32
 8006aaa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e003      	b.n	8006ad6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	69fa      	ldr	r2, [r7, #28]
 8006ada:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	61fb      	str	r3, [r7, #28]
 8006ae2:	e009      	b.n	8006af8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	891a      	ldrh	r2, [r3, #8]
 8006ae8:	887b      	ldrh	r3, [r7, #2]
 8006aea:	4413      	add	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f2      	bne.n	8006ae4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fb2c 	bl	8006160 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006b08:	bf00      	nop
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f007 fe87 	bl	800e82c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b26:	b480      	push	{r7}
 8006b28:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3a:	f3ef 8305 	mrs	r3, IPSR
 8006b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10f      	bne.n	8006b66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	607b      	str	r3, [r7, #4]
  return(result);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b52:	f3ef 8311 	mrs	r3, BASEPRI
 8006b56:	603b      	str	r3, [r7, #0]
  return(result);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <osKernelInitialize+0x3a>
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <osKernelInitialize+0x64>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d103      	bne.n	8006b6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006b66:	f06f 0305 	mvn.w	r3, #5
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e00c      	b.n	8006b88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <osKernelInitialize+0x64>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d105      	bne.n	8006b82 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b76:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <osKernelInitialize+0x64>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e002      	b.n	8006b88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20005110 	.word	0x20005110

08006b9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba2:	f3ef 8305 	mrs	r3, IPSR
 8006ba6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bae:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb2:	607b      	str	r3, [r7, #4]
  return(result);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bba:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbe:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <osKernelStart+0x3a>
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <osKernelStart+0x68>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d103      	bne.n	8006bd6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006bce:	f06f 0305 	mvn.w	r3, #5
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e010      	b.n	8006bf8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <osKernelStart+0x68>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d109      	bne.n	8006bf2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006bde:	f7ff ffa2 	bl	8006b26 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <osKernelStart+0x68>)
 8006be4:	2202      	movs	r2, #2
 8006be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006be8:	f002 f9e4 	bl	8008fb4 <vTaskStartScheduler>
      stat = osOK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e002      	b.n	8006bf8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20005110 	.word	0x20005110

08006c08 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c0e:	f3ef 8305 	mrs	r3, IPSR
 8006c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c14:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10f      	bne.n	8006c3a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c26:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <osKernelGetTickCount+0x3a>
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <osKernelGetTickCount+0x4c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d103      	bne.n	8006c42 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006c3a:	f002 faed 	bl	8009218 <xTaskGetTickCountFromISR>
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	e002      	b.n	8006c48 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006c42:	f002 fad9 	bl	80091f8 <xTaskGetTickCount>
 8006c46:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006c48:	68fb      	ldr	r3, [r7, #12]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20005110 	.word	0x20005110

08006c58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b090      	sub	sp, #64	; 0x40
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c68:	f3ef 8305 	mrs	r3, IPSR
 8006c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c6e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 808f 	bne.w	8006d94 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c76:	f3ef 8310 	mrs	r3, PRIMASK
 8006c7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c82:	f3ef 8311 	mrs	r3, BASEPRI
 8006c86:	617b      	str	r3, [r7, #20]
  return(result);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <osThreadNew+0x3e>
 8006c8e:	4b44      	ldr	r3, [pc, #272]	; (8006da0 <osThreadNew+0x148>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d07e      	beq.n	8006d94 <osThreadNew+0x13c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d07b      	beq.n	8006d94 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006ca0:	2318      	movs	r3, #24
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d045      	beq.n	8006d40 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <osThreadNew+0x6a>
        name = attr->name;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <osThreadNew+0x90>
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	2b38      	cmp	r3, #56	; 0x38
 8006cda:	d805      	bhi.n	8006ce8 <osThreadNew+0x90>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <osThreadNew+0x94>
        return (NULL);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e054      	b.n	8006d96 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	089b      	lsrs	r3, r3, #2
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00e      	beq.n	8006d22 <osThreadNew+0xca>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2bbb      	cmp	r3, #187	; 0xbb
 8006d0a:	d90a      	bls.n	8006d22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d006      	beq.n	8006d22 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <osThreadNew+0xca>
        mem = 1;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	623b      	str	r3, [r7, #32]
 8006d20:	e010      	b.n	8006d44 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10c      	bne.n	8006d44 <osThreadNew+0xec>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d108      	bne.n	8006d44 <osThreadNew+0xec>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <osThreadNew+0xec>
          mem = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e001      	b.n	8006d44 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d110      	bne.n	8006d6c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 ff31 	bl	8008bc8 <xTaskCreateStatic>
 8006d66:	4603      	mov	r3, r0
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e013      	b.n	8006d94 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f107 0310 	add.w	r3, r7, #16
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f001 ff82 	bl	8008c8e <xTaskCreate>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <osThreadNew+0x13c>
          hTask = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d94:	693b      	ldr	r3, [r7, #16]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3730      	adds	r7, #48	; 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20005110 	.word	0x20005110

08006da4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	613b      	str	r3, [r7, #16]
  return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10f      	bne.n	8006dd8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d105      	bne.n	8006dd0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <osDelay+0x3c>
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <osDelay+0x58>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d103      	bne.n	8006de0 <osDelay+0x3c>
    stat = osErrorISR;
 8006dd8:	f06f 0305 	mvn.w	r3, #5
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e007      	b.n	8006df0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f002 f8ac 	bl	8008f48 <vTaskDelay>
    }
  }

  return (stat);
 8006df0:	697b      	ldr	r3, [r7, #20]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20005110 	.word	0x20005110

08006e00 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e0c:	f3ef 8305 	mrs	r3, IPSR
 8006e10:	613b      	str	r3, [r7, #16]
  return(result);
 8006e12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f040 8085 	bne.w	8006f24 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d105      	bne.n	8006e32 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e26:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <osMutexNew+0x3a>
 8006e32:	4b3f      	ldr	r3, [pc, #252]	; (8006f30 <osMutexNew+0x130>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d074      	beq.n	8006f24 <osMutexNew+0x124>
    if (attr != NULL) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	623b      	str	r3, [r7, #32]
 8006e46:	e001      	b.n	8006e4c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <osMutexNew+0x5c>
      rmtx = 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e001      	b.n	8006e60 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d15c      	bne.n	8006f24 <osMutexNew+0x124>
      mem = -1;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e6e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d015      	beq.n	8006ea2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d006      	beq.n	8006e8c <osMutexNew+0x8c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b4f      	cmp	r3, #79	; 0x4f
 8006e84:	d902      	bls.n	8006e8c <osMutexNew+0x8c>
          mem = 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e00c      	b.n	8006ea6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <osMutexNew+0xa6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <osMutexNew+0xa6>
            mem = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61bb      	str	r3, [r7, #24]
 8006ea0:	e001      	b.n	8006ea6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d112      	bne.n	8006ed2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	2004      	movs	r0, #4
 8006eba:	f000 feb8 	bl	8007c2e <xQueueCreateMutexStatic>
 8006ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8006ec0:	e016      	b.n	8006ef0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f000 feb0 	bl	8007c2e <xQueueCreateMutexStatic>
 8006ece:	6278      	str	r0, [r7, #36]	; 0x24
 8006ed0:	e00e      	b.n	8006ef0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ede:	2004      	movs	r0, #4
 8006ee0:	f000 fe8d 	bl	8007bfe <xQueueCreateMutex>
 8006ee4:	6278      	str	r0, [r7, #36]	; 0x24
 8006ee6:	e003      	b.n	8006ef0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006ee8:	2001      	movs	r0, #1
 8006eea:	f000 fe88 	bl	8007bfe <xQueueCreateMutex>
 8006eee:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <osMutexNew+0x110>
        if (attr != NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <osMutexNew+0x104>
          name = attr->name;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e001      	b.n	8006f08 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006f08:	6979      	ldr	r1, [r7, #20]
 8006f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0c:	f001 fdd4 	bl	8008ab8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d006      	beq.n	8006f24 <osMutexNew+0x124>
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20005110 	.word	0x20005110

08006f34 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f52:	f3ef 8305 	mrs	r3, IPSR
 8006f56:	613b      	str	r3, [r7, #16]
  return(result);
 8006f58:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <osMutexAcquire+0x52>
 8006f76:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <osMutexAcquire+0xb8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d103      	bne.n	8006f86 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006f7e:	f06f 0305 	mvn.w	r3, #5
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e02c      	b.n	8006fe0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006f8c:	f06f 0303 	mvn.w	r3, #3
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	e025      	b.n	8006fe0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	69b8      	ldr	r0, [r7, #24]
 8006f9e:	f000 fe97 	bl	8007cd0 <xQueueTakeMutexRecursive>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d01b      	beq.n	8006fe0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006fae:	f06f 0301 	mvn.w	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	e014      	b.n	8006fe0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006fb6:	f06f 0302 	mvn.w	r3, #2
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e010      	b.n	8006fe0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	69b8      	ldr	r0, [r7, #24]
 8006fc2:	f001 fa51 	bl	8008468 <xQueueSemaphoreTake>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d009      	beq.n	8006fe0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006fd2:	f06f 0301 	mvn.w	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e002      	b.n	8006fe0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006fda:	f06f 0302 	mvn.w	r3, #2
 8006fde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fe0:	69fb      	ldr	r3, [r7, #28]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20005110 	.word	0x20005110

08006ff0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f023 0301 	bic.w	r3, r3, #1
 8006ffe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700c:	f3ef 8305 	mrs	r3, IPSR
 8007010:	613b      	str	r3, [r7, #16]
  return(result);
 8007012:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10f      	bne.n	8007038 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007018:	f3ef 8310 	mrs	r3, PRIMASK
 800701c:	60fb      	str	r3, [r7, #12]
  return(result);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007024:	f3ef 8311 	mrs	r3, BASEPRI
 8007028:	60bb      	str	r3, [r7, #8]
  return(result);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <osMutexRelease+0x50>
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <osMutexRelease+0x9c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d103      	bne.n	8007040 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007038:	f06f 0305 	mvn.w	r3, #5
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e01f      	b.n	8007080 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007046:	f06f 0303 	mvn.w	r3, #3
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e018      	b.n	8007080 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d009      	beq.n	8007068 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007054:	69b8      	ldr	r0, [r7, #24]
 8007056:	f000 fe05 	bl	8007c64 <xQueueGiveMutexRecursive>
 800705a:	4603      	mov	r3, r0
 800705c:	2b01      	cmp	r3, #1
 800705e:	d00f      	beq.n	8007080 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007060:	f06f 0302 	mvn.w	r3, #2
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	e00b      	b.n	8007080 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007068:	2300      	movs	r3, #0
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	69b8      	ldr	r0, [r7, #24]
 8007070:	f000 fed8 	bl	8007e24 <xQueueGenericSend>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d002      	beq.n	8007080 <osMutexRelease+0x90>
        stat = osErrorResource;
 800707a:	f06f 0302 	mvn.w	r3, #2
 800707e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007080:	69fb      	ldr	r3, [r7, #28]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20005110 	.word	0x20005110

08007090 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b08c      	sub	sp, #48	; 0x30
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800709c:	2300      	movs	r3, #0
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a0:	f3ef 8305 	mrs	r3, IPSR
 80070a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80070a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f040 8086 	bne.w	80071ba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ae:	f3ef 8310 	mrs	r3, PRIMASK
 80070b2:	617b      	str	r3, [r7, #20]
  return(result);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070ba:	f3ef 8311 	mrs	r3, BASEPRI
 80070be:	613b      	str	r3, [r7, #16]
  return(result);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <osSemaphoreNew+0x3e>
 80070c6:	4b3f      	ldr	r3, [pc, #252]	; (80071c4 <osSemaphoreNew+0x134>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d075      	beq.n	80071ba <osSemaphoreNew+0x12a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d072      	beq.n	80071ba <osSemaphoreNew+0x12a>
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d86e      	bhi.n	80071ba <osSemaphoreNew+0x12a>
    mem = -1;
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d015      	beq.n	8007114 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <osSemaphoreNew+0x6e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b4f      	cmp	r3, #79	; 0x4f
 80070f6:	d902      	bls.n	80070fe <osSemaphoreNew+0x6e>
        mem = 1;
 80070f8:	2301      	movs	r3, #1
 80070fa:	623b      	str	r3, [r7, #32]
 80070fc:	e00c      	b.n	8007118 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d108      	bne.n	8007118 <osSemaphoreNew+0x88>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <osSemaphoreNew+0x88>
          mem = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	623b      	str	r3, [r7, #32]
 8007112:	e001      	b.n	8007118 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711e:	d04c      	beq.n	80071ba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d128      	bne.n	8007178 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10a      	bne.n	8007142 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2203      	movs	r2, #3
 8007132:	9200      	str	r2, [sp, #0]
 8007134:	2200      	movs	r2, #0
 8007136:	2100      	movs	r1, #0
 8007138:	2001      	movs	r0, #1
 800713a:	f000 fc5f 	bl	80079fc <xQueueGenericCreateStatic>
 800713e:	6278      	str	r0, [r7, #36]	; 0x24
 8007140:	e005      	b.n	800714e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007142:	2203      	movs	r2, #3
 8007144:	2100      	movs	r1, #0
 8007146:	2001      	movs	r0, #1
 8007148:	f000 fcda 	bl	8007b00 <xQueueGenericCreate>
 800714c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d022      	beq.n	800719a <osSemaphoreNew+0x10a>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01f      	beq.n	800719a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	2100      	movs	r1, #0
 8007160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007162:	f000 fe5f 	bl	8007e24 <xQueueGenericSend>
 8007166:	4603      	mov	r3, r0
 8007168:	2b01      	cmp	r3, #1
 800716a:	d016      	beq.n	800719a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800716c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716e:	f001 fb55 	bl	800881c <vQueueDelete>
            hSemaphore = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
 8007176:	e010      	b.n	800719a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d108      	bne.n	8007190 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	461a      	mov	r2, r3
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fdda 	bl	8007d40 <xQueueCreateCountingSemaphoreStatic>
 800718c:	6278      	str	r0, [r7, #36]	; 0x24
 800718e:	e004      	b.n	800719a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fe0f 	bl	8007db6 <xQueueCreateCountingSemaphore>
 8007198:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <osSemaphoreNew+0x11e>
          name = attr->name;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e001      	b.n	80071b2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80071b2:	69f9      	ldr	r1, [r7, #28]
 80071b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071b6:	f001 fc7f 	bl	8008ab8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3728      	adds	r7, #40	; 0x28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20005110 	.word	0x20005110

080071c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b088      	sub	sp, #32
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80071e0:	f06f 0303 	mvn.w	r3, #3
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	e04b      	b.n	8007280 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071e8:	f3ef 8305 	mrs	r3, IPSR
 80071ec:	617b      	str	r3, [r7, #20]
  return(result);
 80071ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10f      	bne.n	8007214 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f4:	f3ef 8310 	mrs	r3, PRIMASK
 80071f8:	613b      	str	r3, [r7, #16]
  return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007200:	f3ef 8311 	mrs	r3, BASEPRI
 8007204:	60fb      	str	r3, [r7, #12]
  return(result);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d026      	beq.n	800725a <osSemaphoreAcquire+0x92>
 800720c:	4b1f      	ldr	r3, [pc, #124]	; (800728c <osSemaphoreAcquire+0xc4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d122      	bne.n	800725a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800721a:	f06f 0303 	mvn.w	r3, #3
 800721e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007220:	e02d      	b.n	800727e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007226:	f107 0308 	add.w	r3, r7, #8
 800722a:	461a      	mov	r2, r3
 800722c:	2100      	movs	r1, #0
 800722e:	69b8      	ldr	r0, [r7, #24]
 8007230:	f001 fa2e 	bl	8008690 <xQueueReceiveFromISR>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d003      	beq.n	8007242 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800723a:	f06f 0302 	mvn.w	r3, #2
 800723e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007240:	e01d      	b.n	800727e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <osSemaphoreAcquire+0xb6>
 8007248:	4b11      	ldr	r3, [pc, #68]	; (8007290 <osSemaphoreAcquire+0xc8>)
 800724a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007258:	e011      	b.n	800727e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	69b8      	ldr	r0, [r7, #24]
 800725e:	f001 f903 	bl	8008468 <xQueueSemaphoreTake>
 8007262:	4603      	mov	r3, r0
 8007264:	2b01      	cmp	r3, #1
 8007266:	d00b      	beq.n	8007280 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800726e:	f06f 0301 	mvn.w	r3, #1
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e004      	b.n	8007280 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007276:	f06f 0302 	mvn.w	r3, #2
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e000      	b.n	8007280 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800727e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007280:	69fb      	ldr	r3, [r7, #28]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20005110 	.word	0x20005110
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80072aa:	f06f 0303 	mvn.w	r3, #3
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e03e      	b.n	8007330 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b2:	f3ef 8305 	mrs	r3, IPSR
 80072b6:	617b      	str	r3, [r7, #20]
  return(result);
 80072b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10f      	bne.n	80072de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072be:	f3ef 8310 	mrs	r3, PRIMASK
 80072c2:	613b      	str	r3, [r7, #16]
  return(result);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072ca:	f3ef 8311 	mrs	r3, BASEPRI
 80072ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01e      	beq.n	8007314 <osSemaphoreRelease+0x80>
 80072d6:	4b19      	ldr	r3, [pc, #100]	; (800733c <osSemaphoreRelease+0xa8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d11a      	bne.n	8007314 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072e2:	f107 0308 	add.w	r3, r7, #8
 80072e6:	4619      	mov	r1, r3
 80072e8:	69b8      	ldr	r0, [r7, #24]
 80072ea:	f000 ff41 	bl	8008170 <xQueueGiveFromISR>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d003      	beq.n	80072fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80072f4:	f06f 0302 	mvn.w	r3, #2
 80072f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072fa:	e018      	b.n	800732e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d015      	beq.n	800732e <osSemaphoreRelease+0x9a>
 8007302:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <osSemaphoreRelease+0xac>)
 8007304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007312:	e00c      	b.n	800732e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007314:	2300      	movs	r3, #0
 8007316:	2200      	movs	r2, #0
 8007318:	2100      	movs	r1, #0
 800731a:	69b8      	ldr	r0, [r7, #24]
 800731c:	f000 fd82 	bl	8007e24 <xQueueGenericSend>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d004      	beq.n	8007330 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007326:	f06f 0302 	mvn.w	r3, #2
 800732a:	61fb      	str	r3, [r7, #28]
 800732c:	e000      	b.n	8007330 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800732e:	bf00      	nop
    }
  }

  return (stat);
 8007330:	69fb      	ldr	r3, [r7, #28]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20005110 	.word	0x20005110
 8007340:	e000ed04 	.word	0xe000ed04

08007344 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007350:	f3ef 8305 	mrs	r3, IPSR
 8007354:	617b      	str	r3, [r7, #20]
  return(result);
 8007356:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10f      	bne.n	800737c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800735c:	f3ef 8310 	mrs	r3, PRIMASK
 8007360:	613b      	str	r3, [r7, #16]
  return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d105      	bne.n	8007374 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007368:	f3ef 8311 	mrs	r3, BASEPRI
 800736c:	60fb      	str	r3, [r7, #12]
  return(result);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <osSemaphoreDelete+0x40>
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <osSemaphoreDelete+0x68>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d103      	bne.n	8007384 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800737c:	f06f 0305 	mvn.w	r3, #5
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	e00e      	b.n	80073a2 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800738a:	f06f 0303 	mvn.w	r3, #3
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	e007      	b.n	80073a2 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007392:	69b8      	ldr	r0, [r7, #24]
 8007394:	f001 fbba 	bl	8008b0c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800739c:	69b8      	ldr	r0, [r7, #24]
 800739e:	f001 fa3d 	bl	800881c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80073a2:	69fb      	ldr	r3, [r7, #28]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3720      	adds	r7, #32
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20005110 	.word	0x20005110

080073b0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08c      	sub	sp, #48	; 0x30
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c0:	f3ef 8305 	mrs	r3, IPSR
 80073c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80073c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d16f      	bne.n	80074ac <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073cc:	f3ef 8310 	mrs	r3, PRIMASK
 80073d0:	617b      	str	r3, [r7, #20]
  return(result);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073d8:	f3ef 8311 	mrs	r3, BASEPRI
 80073dc:	613b      	str	r3, [r7, #16]
  return(result);
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <osMessageQueueNew+0x3c>
 80073e4:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <osMessageQueueNew+0x108>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d05f      	beq.n	80074ac <osMessageQueueNew+0xfc>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d05c      	beq.n	80074ac <osMessageQueueNew+0xfc>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d059      	beq.n	80074ac <osMessageQueueNew+0xfc>
    mem = -1;
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d029      	beq.n	8007458 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <osMessageQueueNew+0x82>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2b4f      	cmp	r3, #79	; 0x4f
 8007412:	d90e      	bls.n	8007432 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	695a      	ldr	r2, [r3, #20]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	429a      	cmp	r2, r3
 800742a:	d302      	bcc.n	8007432 <osMessageQueueNew+0x82>
        mem = 1;
 800742c:	2301      	movs	r3, #1
 800742e:	623b      	str	r3, [r7, #32]
 8007430:	e014      	b.n	800745c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d110      	bne.n	800745c <osMessageQueueNew+0xac>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007446:	2b00      	cmp	r3, #0
 8007448:	d108      	bne.n	800745c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <osMessageQueueNew+0xac>
          mem = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	e001      	b.n	800745c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d10b      	bne.n	800747a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2100      	movs	r1, #0
 800746c:	9100      	str	r1, [sp, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fac3 	bl	80079fc <xQueueGenericCreateStatic>
 8007476:	6278      	str	r0, [r7, #36]	; 0x24
 8007478:	e008      	b.n	800748c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007480:	2200      	movs	r2, #0
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fb3b 	bl	8007b00 <xQueueGenericCreate>
 800748a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00c      	beq.n	80074ac <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	e001      	b.n	80074a4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074a8:	f001 fb06 	bl	8008ab8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20005110 	.word	0x20005110

080074bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d4:	f3ef 8305 	mrs	r3, IPSR
 80074d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80074da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10f      	bne.n	8007500 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e0:	f3ef 8310 	mrs	r3, PRIMASK
 80074e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ec:	f3ef 8311 	mrs	r3, BASEPRI
 80074f0:	617b      	str	r3, [r7, #20]
  return(result);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d02c      	beq.n	8007552 <osMessageQueuePut+0x96>
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <osMessageQueuePut+0xe0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d128      	bne.n	8007552 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <osMessageQueuePut+0x56>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <osMessageQueuePut+0x56>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007512:	f06f 0303 	mvn.w	r3, #3
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007518:	e039      	b.n	800758e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800751e:	f107 0210 	add.w	r2, r7, #16
 8007522:	2300      	movs	r3, #0
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	6a38      	ldr	r0, [r7, #32]
 8007528:	f000 fd82 	bl	8008030 <xQueueGenericSendFromISR>
 800752c:	4603      	mov	r3, r0
 800752e:	2b01      	cmp	r3, #1
 8007530:	d003      	beq.n	800753a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007532:	f06f 0302 	mvn.w	r3, #2
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007538:	e029      	b.n	800758e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d026      	beq.n	800758e <osMessageQueuePut+0xd2>
 8007540:	4b17      	ldr	r3, [pc, #92]	; (80075a0 <osMessageQueuePut+0xe4>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007550:	e01d      	b.n	800758e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <osMessageQueuePut+0xa2>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800755e:	f06f 0303 	mvn.w	r3, #3
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
 8007564:	e014      	b.n	8007590 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007566:	2300      	movs	r3, #0
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	6a38      	ldr	r0, [r7, #32]
 800756e:	f000 fc59 	bl	8007e24 <xQueueGenericSend>
 8007572:	4603      	mov	r3, r0
 8007574:	2b01      	cmp	r3, #1
 8007576:	d00b      	beq.n	8007590 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800757e:	f06f 0301 	mvn.w	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
 8007584:	e004      	b.n	8007590 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007586:	f06f 0302 	mvn.w	r3, #2
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
 800758c:	e000      	b.n	8007590 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800758e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	; 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20005110 	.word	0x20005110
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ba:	f3ef 8305 	mrs	r3, IPSR
 80075be:	61fb      	str	r3, [r7, #28]
  return(result);
 80075c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10f      	bne.n	80075e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d2:	f3ef 8311 	mrs	r3, BASEPRI
 80075d6:	617b      	str	r3, [r7, #20]
  return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d02c      	beq.n	8007638 <osMessageQueueGet+0x94>
 80075de:	4b28      	ldr	r3, [pc, #160]	; (8007680 <osMessageQueueGet+0xdc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d128      	bne.n	8007638 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <osMessageQueueGet+0x54>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <osMessageQueueGet+0x54>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80075f8:	f06f 0303 	mvn.w	r3, #3
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075fe:	e038      	b.n	8007672 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007604:	f107 0310 	add.w	r3, r7, #16
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	6a38      	ldr	r0, [r7, #32]
 800760e:	f001 f83f 	bl	8008690 <xQueueReceiveFromISR>
 8007612:	4603      	mov	r3, r0
 8007614:	2b01      	cmp	r3, #1
 8007616:	d003      	beq.n	8007620 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007618:	f06f 0302 	mvn.w	r3, #2
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800761e:	e028      	b.n	8007672 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d025      	beq.n	8007672 <osMessageQueueGet+0xce>
 8007626:	4b17      	ldr	r3, [pc, #92]	; (8007684 <osMessageQueueGet+0xe0>)
 8007628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007636:	e01c      	b.n	8007672 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <osMessageQueueGet+0xa0>
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007644:	f06f 0303 	mvn.w	r3, #3
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
 800764a:	e013      	b.n	8007674 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	6a38      	ldr	r0, [r7, #32]
 8007652:	f000 fe23 	bl	800829c <xQueueReceive>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d00b      	beq.n	8007674 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007662:	f06f 0301 	mvn.w	r3, #1
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
 8007668:	e004      	b.n	8007674 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800766a:	f06f 0302 	mvn.w	r3, #2
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
 8007670:	e000      	b.n	8007674 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007672:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20005110 	.word	0x20005110
 8007684:	e000ed04 	.word	0xe000ed04

08007688 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	e01e      	b.n	80076de <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a0:	f3ef 8305 	mrs	r3, IPSR
 80076a4:	617b      	str	r3, [r7, #20]
  return(result);
 80076a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10f      	bne.n	80076cc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ac:	f3ef 8310 	mrs	r3, PRIMASK
 80076b0:	613b      	str	r3, [r7, #16]
  return(result);
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076b8:	f3ef 8311 	mrs	r3, BASEPRI
 80076bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <osMessageQueueGetCount+0x4e>
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <osMessageQueueGetCount+0x60>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d104      	bne.n	80076d6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80076cc:	69b8      	ldr	r0, [r7, #24]
 80076ce:	f001 f885 	bl	80087dc <uxQueueMessagesWaitingFromISR>
 80076d2:	61f8      	str	r0, [r7, #28]
 80076d4:	e003      	b.n	80076de <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80076d6:	69b8      	ldr	r0, [r7, #24]
 80076d8:	f001 f860 	bl	800879c <uxQueueMessagesWaiting>
 80076dc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80076de:	69fb      	ldr	r3, [r7, #28]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20005110 	.word	0x20005110

080076ec <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f8:	f3ef 8305 	mrs	r3, IPSR
 80076fc:	617b      	str	r3, [r7, #20]
  return(result);
 80076fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10f      	bne.n	8007724 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	613b      	str	r3, [r7, #16]
  return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d105      	bne.n	800771c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007710:	f3ef 8311 	mrs	r3, BASEPRI
 8007714:	60fb      	str	r3, [r7, #12]
  return(result);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <osMessageQueueDelete+0x40>
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <osMessageQueueDelete+0x68>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d103      	bne.n	800772c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007724:	f06f 0305 	mvn.w	r3, #5
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	e00e      	b.n	800774a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d103      	bne.n	800773a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007732:	f06f 0303 	mvn.w	r3, #3
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	e007      	b.n	800774a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800773a:	69b8      	ldr	r0, [r7, #24]
 800773c:	f001 f9e6 	bl	8008b0c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007744:	69b8      	ldr	r0, [r7, #24]
 8007746:	f001 f869 	bl	800881c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800774a:	69fb      	ldr	r3, [r7, #28]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20005110 	.word	0x20005110

08007758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a07      	ldr	r2, [pc, #28]	; (8007784 <vApplicationGetIdleTaskMemory+0x2c>)
 8007768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4a06      	ldr	r2, [pc, #24]	; (8007788 <vApplicationGetIdleTaskMemory+0x30>)
 800776e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	601a      	str	r2, [r3, #0]
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20005114 	.word	0x20005114
 8007788:	200051d0 	.word	0x200051d0

0800778c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a07      	ldr	r2, [pc, #28]	; (80077b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800779c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a06      	ldr	r2, [pc, #24]	; (80077bc <vApplicationGetTimerTaskMemory+0x30>)
 80077a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077aa:	601a      	str	r2, [r3, #0]
}
 80077ac:	bf00      	nop
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	200053d0 	.word	0x200053d0
 80077bc:	2000548c 	.word	0x2000548c

080077c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f103 0208 	add.w	r2, r3, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f103 0208 	add.w	r2, r3, #8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f103 0208 	add.w	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007862:	b480      	push	{r7}
 8007864:	b085      	sub	sp, #20
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007878:	d103      	bne.n	8007882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e00c      	b.n	800789c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3308      	adds	r3, #8
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	e002      	b.n	8007890 <vListInsert+0x2e>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	d2f6      	bcs.n	800788a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
}
 80078c8:	bf00      	nop
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6892      	ldr	r2, [r2, #8]
 80078ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6852      	ldr	r2, [r2, #4]
 80078f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d103      	bne.n	8007908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10c      	bne.n	8007956 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	b672      	cpsid	i
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	b662      	cpsie	i
 8007950:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007956:	f002 fe11 	bl	800a57c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007962:	68f9      	ldr	r1, [r7, #12]
 8007964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007966:	fb01 f303 	mul.w	r3, r1, r3
 800796a:	441a      	add	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	3b01      	subs	r3, #1
 8007988:	68f9      	ldr	r1, [r7, #12]
 800798a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	22ff      	movs	r2, #255	; 0xff
 800799a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	22ff      	movs	r2, #255	; 0xff
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d114      	bne.n	80079d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3310      	adds	r3, #16
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 fdb5 	bl	8009528 <xTaskRemoveFromEventList>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d012      	beq.n	80079ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079c4:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <xQueueGenericReset+0xd0>)
 80079c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	e009      	b.n	80079ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3310      	adds	r3, #16
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fef0 	bl	80077c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3324      	adds	r3, #36	; 0x24
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff feeb 	bl	80077c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079ea:	f002 fdfb 	bl	800a5e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079ee:	2301      	movs	r3, #1
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08e      	sub	sp, #56	; 0x38
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10c      	bne.n	8007a2a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	b672      	cpsid	i
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	b662      	cpsie	i
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	b672      	cpsid	i
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	b662      	cpsie	i
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <xQueueGenericCreateStatic+0x5a>
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <xQueueGenericCreateStatic+0x5e>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericCreateStatic+0x60>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10c      	bne.n	8007a7a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	b672      	cpsid	i
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	b662      	cpsie	i
 8007a74:	623b      	str	r3, [r7, #32]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <xQueueGenericCreateStatic+0x8a>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <xQueueGenericCreateStatic+0x8e>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueGenericCreateStatic+0x90>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	b672      	cpsid	i
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	61fb      	str	r3, [r7, #28]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aaa:	2350      	movs	r3, #80	; 0x50
 8007aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b50      	cmp	r3, #80	; 0x50
 8007ab2:	d00c      	beq.n	8007ace <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	b672      	cpsid	i
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	b662      	cpsie	i
 8007ac8:	61bb      	str	r3, [r7, #24]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ace:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ae2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4613      	mov	r3, r2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f847 	bl	8007b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3730      	adds	r7, #48	; 0x30
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08a      	sub	sp, #40	; 0x28
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10c      	bne.n	8007b2e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	b672      	cpsid	i
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	b662      	cpsie	i
 8007b28:	613b      	str	r3, [r7, #16]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b34:	2300      	movs	r3, #0
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e004      	b.n	8007b44 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3350      	adds	r3, #80	; 0x50
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f002 fe43 	bl	800a7d4 <pvPortMalloc>
 8007b4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d011      	beq.n	8007b7a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	3350      	adds	r3, #80	; 0x50
 8007b5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b68:	79fa      	ldrb	r2, [r7, #7]
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f805 	bl	8007b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d103      	bne.n	8007ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	69b8      	ldr	r0, [r7, #24]
 8007bb6:	f7ff feb7 	bl	8007928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00e      	beq.n	8007bf6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bea:	2300      	movs	r3, #0
 8007bec:	2200      	movs	r2, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f917 	bl	8007e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b086      	sub	sp, #24
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	4603      	mov	r3, r0
 8007c06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6939      	ldr	r1, [r7, #16]
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	f7ff ff72 	bl	8007b00 <xQueueGenericCreate>
 8007c1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff ffd3 	bl	8007bca <prvInitialiseMutex>

		return xNewQueue;
 8007c24:	68fb      	ldr	r3, [r7, #12]
	}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b088      	sub	sp, #32
 8007c32:	af02      	add	r7, sp, #8
 8007c34:	4603      	mov	r3, r0
 8007c36:	6039      	str	r1, [r7, #0]
 8007c38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	6939      	ldr	r1, [r7, #16]
 8007c4c:	6978      	ldr	r0, [r7, #20]
 8007c4e:	f7ff fed5 	bl	80079fc <xQueueGenericCreateStatic>
 8007c52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff ffb8 	bl	8007bca <prvInitialiseMutex>

		return xNewQueue;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	b672      	cpsid	i
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	b662      	cpsie	i
 8007c8a:	60fb      	str	r3, [r7, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	689c      	ldr	r4, [r3, #8]
 8007c94:	f001 fe12 	bl	80098bc <xTaskGetCurrentTaskHandle>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d111      	bne.n	8007cc2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	1e5a      	subs	r2, r3, #1
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d105      	bne.n	8007cbc <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6938      	ldr	r0, [r7, #16]
 8007cb8:	f000 f8b4 	bl	8007e24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	617b      	str	r3, [r7, #20]
 8007cc0:	e001      	b.n	8007cc6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007cc6:	697b      	ldr	r3, [r7, #20]
	}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}

08007cd0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10c      	bne.n	8007cfe <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	b672      	cpsid	i
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	b662      	cpsie	i
 8007cf8:	60fb      	str	r3, [r7, #12]
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	689c      	ldr	r4, [r3, #8]
 8007d02:	f001 fddb 	bl	80098bc <xTaskGetCurrentTaskHandle>
 8007d06:	4603      	mov	r3, r0
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	d107      	bne.n	8007d1c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e00c      	b.n	8007d36 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6938      	ldr	r0, [r7, #16]
 8007d20:	f000 fba2 	bl	8008468 <xQueueSemaphoreTake>
 8007d24:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007d36:	697b      	ldr	r3, [r7, #20]
	}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd90      	pop	{r4, r7, pc}

08007d40 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	; 0x28
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10c      	bne.n	8007d6c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	b672      	cpsid	i
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	b662      	cpsie	i
 8007d66:	61bb      	str	r3, [r7, #24]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90c      	bls.n	8007d8e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	b672      	cpsid	i
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	b662      	cpsie	i
 8007d88:	617b      	str	r3, [r7, #20]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d8e:	2302      	movs	r3, #2
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	2100      	movs	r1, #0
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff fe2f 	bl	80079fc <xQueueGenericCreateStatic>
 8007d9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007dac:	69fb      	ldr	r3, [r7, #28]
	}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	b672      	cpsid	i
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	b662      	cpsie	i
 8007dda:	613b      	str	r3, [r7, #16]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d90c      	bls.n	8007e02 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	b672      	cpsid	i
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	b662      	cpsie	i
 8007dfc:	60fb      	str	r3, [r7, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007e02:	2202      	movs	r2, #2
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fe7a 	bl	8007b00 <xQueueGenericCreate>
 8007e0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e1a:	697b      	ldr	r3, [r7, #20]
	}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e32:	2300      	movs	r3, #0
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10c      	bne.n	8007e5a <xQueueGenericSend+0x36>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <xQueueGenericSend+0x44>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <xQueueGenericSend+0x48>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <xQueueGenericSend+0x4a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <xQueueGenericSend+0x68>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	b672      	cpsid	i
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	b662      	cpsie	i
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d103      	bne.n	8007e9a <xQueueGenericSend+0x76>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <xQueueGenericSend+0x7a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <xQueueGenericSend+0x7c>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <xQueueGenericSend+0x9a>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	b672      	cpsid	i
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	b662      	cpsie	i
 8007eb8:	623b      	str	r3, [r7, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ebe:	f001 fd0d 	bl	80098dc <xTaskGetSchedulerState>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d102      	bne.n	8007ece <xQueueGenericSend+0xaa>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSend+0xae>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSend+0xb0>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10c      	bne.n	8007ef2 <xQueueGenericSend+0xce>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	61fb      	str	r3, [r7, #28]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef2:	f002 fb43 	bl	800a57c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d302      	bcc.n	8007f08 <xQueueGenericSend+0xe4>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d129      	bne.n	8007f5c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f0e:	f000 fcc2 	bl	8008896 <prvCopyDataToQueue>
 8007f12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d010      	beq.n	8007f3e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	3324      	adds	r3, #36	; 0x24
 8007f20:	4618      	mov	r0, r3
 8007f22:	f001 fb01 	bl	8009528 <xTaskRemoveFromEventList>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d013      	beq.n	8007f54 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f2c:	4b3f      	ldr	r3, [pc, #252]	; (800802c <xQueueGenericSend+0x208>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	e00a      	b.n	8007f54 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f44:	4b39      	ldr	r3, [pc, #228]	; (800802c <xQueueGenericSend+0x208>)
 8007f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f54:	f002 fb46 	bl	800a5e4 <vPortExitCritical>
				return pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e063      	b.n	8008024 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d103      	bne.n	8007f6a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f62:	f002 fb3f 	bl	800a5e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	e05c      	b.n	8008024 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d106      	bne.n	8007f7e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 fb3d 	bl	80095f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f7e:	f002 fb31 	bl	800a5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f82:	f001 f88b 	bl	800909c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f86:	f002 faf9 	bl	800a57c <vPortEnterCritical>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f96:	d103      	bne.n	8007fa0 <xQueueGenericSend+0x17c>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa6:	b25b      	sxtb	r3, r3
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fac:	d103      	bne.n	8007fb6 <xQueueGenericSend+0x192>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fb6:	f002 fb15 	bl	800a5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fba:	1d3a      	adds	r2, r7, #4
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 fb2c 	bl	8009620 <xTaskCheckForTimeOut>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d124      	bne.n	8008018 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd0:	f000 fd59 	bl	8008a86 <prvIsQueueFull>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d018      	beq.n	800800c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	3310      	adds	r3, #16
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 fa4c 	bl	8009480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fea:	f000 fce4 	bl	80089b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fee:	f001 f863 	bl	80090b8 <xTaskResumeAll>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f47f af7c 	bne.w	8007ef2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	; (800802c <xQueueGenericSend+0x208>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	e772      	b.n	8007ef2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800800c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800800e:	f000 fcd2 	bl	80089b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008012:	f001 f851 	bl	80090b8 <xTaskResumeAll>
 8008016:	e76c      	b.n	8007ef2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800801a:	f000 fccc 	bl	80089b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800801e:	f001 f84b 	bl	80090b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008024:	4618      	mov	r0, r3
 8008026:	3738      	adds	r7, #56	; 0x38
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	e000ed04 	.word	0xe000ed04

08008030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08e      	sub	sp, #56	; 0x38
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10c      	bne.n	8008062 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	b672      	cpsid	i
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	b662      	cpsie	i
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <xQueueGenericSendFromISR+0x40>
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <xQueueGenericSendFromISR+0x44>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <xQueueGenericSendFromISR+0x46>
 8008074:	2300      	movs	r3, #0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10c      	bne.n	8008094 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	b672      	cpsid	i
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	b662      	cpsie	i
 800808e:	623b      	str	r3, [r7, #32]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d103      	bne.n	80080a2 <xQueueGenericSendFromISR+0x72>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <xQueueGenericSendFromISR+0x76>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <xQueueGenericSendFromISR+0x78>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10c      	bne.n	80080c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	b672      	cpsid	i
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	b662      	cpsie	i
 80080c0:	61fb      	str	r3, [r7, #28]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080c6:	f002 fb41 	bl	800a74c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080ca:	f3ef 8211 	mrs	r2, BASEPRI
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	b672      	cpsid	i
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	b662      	cpsie	i
 80080e2:	61ba      	str	r2, [r7, #24]
 80080e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <xQueueGenericSendFromISR+0xcc>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d12c      	bne.n	8008156 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800810c:	f000 fbc3 	bl	8008896 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008110:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008118:	d112      	bne.n	8008140 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	3324      	adds	r3, #36	; 0x24
 8008126:	4618      	mov	r0, r3
 8008128:	f001 f9fe 	bl	8009528 <xTaskRemoveFromEventList>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00e      	beq.n	8008150 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e007      	b.n	8008150 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008144:	3301      	adds	r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	b25a      	sxtb	r2, r3
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008150:	2301      	movs	r3, #1
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008154:	e001      	b.n	800815a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008156:	2300      	movs	r3, #0
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008164:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008168:	4618      	mov	r0, r3
 800816a:	3738      	adds	r7, #56	; 0x38
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08e      	sub	sp, #56	; 0x38
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	b672      	cpsid	i
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	b662      	cpsie	i
 8008198:	623b      	str	r3, [r7, #32]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	b672      	cpsid	i
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	b662      	cpsie	i
 80081ba:	61fb      	str	r3, [r7, #28]
}
 80081bc:	bf00      	nop
 80081be:	e7fe      	b.n	80081be <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <xQueueGiveFromISR+0x60>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <xQueueGiveFromISR+0x64>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <xQueueGiveFromISR+0x66>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10c      	bne.n	80081f4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	b672      	cpsid	i
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	b662      	cpsie	i
 80081ee:	61bb      	str	r3, [r7, #24]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081f4:	f002 faaa 	bl	800a74c <vPortValidateInterruptPriority>
	__asm volatile
 80081f8:	f3ef 8211 	mrs	r2, BASEPRI
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	b672      	cpsid	i
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	b662      	cpsie	i
 8008210:	617a      	str	r2, [r7, #20]
 8008212:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008214:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008216:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008224:	429a      	cmp	r2, r3
 8008226:	d22b      	bcs.n	8008280 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800822e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800823a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008242:	d112      	bne.n	800826a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d016      	beq.n	800827a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	4618      	mov	r0, r3
 8008252:	f001 f969 	bl	8009528 <xTaskRemoveFromEventList>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	e007      	b.n	800827a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800826a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826e:	3301      	adds	r3, #1
 8008270:	b2db      	uxtb	r3, r3
 8008272:	b25a      	sxtb	r2, r3
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800827a:	2301      	movs	r3, #1
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	e001      	b.n	8008284 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008280:	2300      	movs	r3, #0
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
 8008284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008286:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f383 8811 	msr	BASEPRI, r3
}
 800828e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008292:	4618      	mov	r0, r3
 8008294:	3738      	adds	r7, #56	; 0x38
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08c      	sub	sp, #48	; 0x30
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10c      	bne.n	80082d0 <xQueueReceive+0x34>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	b672      	cpsid	i
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	b662      	cpsie	i
 80082ca:	623b      	str	r3, [r7, #32]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <xQueueReceive+0x42>
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xQueueReceive+0x46>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueReceive+0x48>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10c      	bne.n	8008302 <xQueueReceive+0x66>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	b672      	cpsid	i
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	b662      	cpsie	i
 80082fc:	61fb      	str	r3, [r7, #28]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008302:	f001 faeb 	bl	80098dc <xTaskGetSchedulerState>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d102      	bne.n	8008312 <xQueueReceive+0x76>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <xQueueReceive+0x7a>
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <xQueueReceive+0x7c>
 8008316:	2300      	movs	r3, #0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <xQueueReceive+0x9a>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	b672      	cpsid	i
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	b662      	cpsie	i
 8008330:	61bb      	str	r3, [r7, #24]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008336:	f002 f921 	bl	800a57c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01f      	beq.n	8008386 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834a:	f000 fb0e 	bl	800896a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	1e5a      	subs	r2, r3, #1
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	3310      	adds	r3, #16
 8008362:	4618      	mov	r0, r3
 8008364:	f001 f8e0 	bl	8009528 <xTaskRemoveFromEventList>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800836e:	4b3d      	ldr	r3, [pc, #244]	; (8008464 <xQueueReceive+0x1c8>)
 8008370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800837e:	f002 f931 	bl	800a5e4 <vPortExitCritical>
				return pdPASS;
 8008382:	2301      	movs	r3, #1
 8008384:	e069      	b.n	800845a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800838c:	f002 f92a 	bl	800a5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008390:	2300      	movs	r3, #0
 8008392:	e062      	b.n	800845a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800839a:	f107 0310 	add.w	r3, r7, #16
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 f928 	bl	80095f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083a8:	f002 f91c 	bl	800a5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083ac:	f000 fe76 	bl	800909c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b0:	f002 f8e4 	bl	800a57c <vPortEnterCritical>
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ba:	b25b      	sxtb	r3, r3
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c0:	d103      	bne.n	80083ca <xQueueReceive+0x12e>
 80083c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d0:	b25b      	sxtb	r3, r3
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d6:	d103      	bne.n	80083e0 <xQueueReceive+0x144>
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e0:	f002 f900 	bl	800a5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083e4:	1d3a      	adds	r2, r7, #4
 80083e6:	f107 0310 	add.w	r3, r7, #16
 80083ea:	4611      	mov	r1, r2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 f917 	bl	8009620 <xTaskCheckForTimeOut>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d123      	bne.n	8008440 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fa:	f000 fb2e 	bl	8008a5a <prvIsQueueEmpty>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d017      	beq.n	8008434 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	3324      	adds	r3, #36	; 0x24
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f001 f837 	bl	8009480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008414:	f000 facf 	bl	80089b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008418:	f000 fe4e 	bl	80090b8 <xTaskResumeAll>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d189      	bne.n	8008336 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008422:	4b10      	ldr	r3, [pc, #64]	; (8008464 <xQueueReceive+0x1c8>)
 8008424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	e780      	b.n	8008336 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008436:	f000 fabe 	bl	80089b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800843a:	f000 fe3d 	bl	80090b8 <xTaskResumeAll>
 800843e:	e77a      	b.n	8008336 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008442:	f000 fab8 	bl	80089b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008446:	f000 fe37 	bl	80090b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800844a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800844c:	f000 fb05 	bl	8008a5a <prvIsQueueEmpty>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f43f af6f 	beq.w	8008336 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800845a:	4618      	mov	r0, r3
 800845c:	3730      	adds	r7, #48	; 0x30
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	e000ed04 	.word	0xe000ed04

08008468 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008472:	2300      	movs	r3, #0
 8008474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800847a:	2300      	movs	r3, #0
 800847c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10c      	bne.n	800849e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	b672      	cpsid	i
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	b662      	cpsie	i
 8008498:	623b      	str	r3, [r7, #32]
}
 800849a:	bf00      	nop
 800849c:	e7fe      	b.n	800849c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00c      	beq.n	80084c0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	b672      	cpsid	i
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	b662      	cpsie	i
 80084ba:	61fb      	str	r3, [r7, #28]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084c0:	f001 fa0c 	bl	80098dc <xTaskGetSchedulerState>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <xQueueSemaphoreTake+0x68>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <xQueueSemaphoreTake+0x6c>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <xQueueSemaphoreTake+0x6e>
 80084d4:	2300      	movs	r3, #0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10c      	bne.n	80084f4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	b672      	cpsid	i
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	b662      	cpsie	i
 80084ee:	61bb      	str	r3, [r7, #24]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084f4:	f002 f842 	bl	800a57c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	d024      	beq.n	800854e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	1e5a      	subs	r2, r3, #1
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008514:	f001 fb60 	bl	8009bd8 <pvTaskIncrementMutexHeldCount>
 8008518:	4602      	mov	r2, r0
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00f      	beq.n	8008546 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	3310      	adds	r3, #16
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fffc 	bl	8009528 <xTaskRemoveFromEventList>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d007      	beq.n	8008546 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008536:	4b55      	ldr	r3, [pc, #340]	; (800868c <xQueueSemaphoreTake+0x224>)
 8008538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008546:	f002 f84d 	bl	800a5e4 <vPortExitCritical>
				return pdPASS;
 800854a:	2301      	movs	r3, #1
 800854c:	e099      	b.n	8008682 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d113      	bne.n	800857c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	b672      	cpsid	i
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	b662      	cpsie	i
 800856e:	617b      	str	r3, [r7, #20]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008574:	f002 f836 	bl	800a5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008578:	2300      	movs	r3, #0
 800857a:	e082      	b.n	8008682 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008582:	f107 030c 	add.w	r3, r7, #12
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f834 	bl	80095f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800858c:	2301      	movs	r3, #1
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008590:	f002 f828 	bl	800a5e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008594:	f000 fd82 	bl	800909c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008598:	f001 fff0 	bl	800a57c <vPortEnterCritical>
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085a2:	b25b      	sxtb	r3, r3
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a8:	d103      	bne.n	80085b2 <xQueueSemaphoreTake+0x14a>
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085b8:	b25b      	sxtb	r3, r3
 80085ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085be:	d103      	bne.n	80085c8 <xQueueSemaphoreTake+0x160>
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085c8:	f002 f80c 	bl	800a5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085cc:	463a      	mov	r2, r7
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 f823 	bl	8009620 <xTaskCheckForTimeOut>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d132      	bne.n	8008646 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085e2:	f000 fa3a 	bl	8008a5a <prvIsQueueEmpty>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d026      	beq.n	800863a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80085f4:	f001 ffc2 	bl	800a57c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 f98b 	bl	8009918 <xTaskPriorityInherit>
 8008602:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008604:	f001 ffee 	bl	800a5e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	3324      	adds	r3, #36	; 0x24
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f000 ff35 	bl	8009480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008618:	f000 f9cd 	bl	80089b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800861c:	f000 fd4c 	bl	80090b8 <xTaskResumeAll>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	f47f af66 	bne.w	80084f4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008628:	4b18      	ldr	r3, [pc, #96]	; (800868c <xQueueSemaphoreTake+0x224>)
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	e75c      	b.n	80084f4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800863a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800863c:	f000 f9bb 	bl	80089b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008640:	f000 fd3a 	bl	80090b8 <xTaskResumeAll>
 8008644:	e756      	b.n	80084f4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008648:	f000 f9b5 	bl	80089b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800864c:	f000 fd34 	bl	80090b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008652:	f000 fa02 	bl	8008a5a <prvIsQueueEmpty>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	f43f af4b 	beq.w	80084f4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00d      	beq.n	8008680 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008664:	f001 ff8a 	bl	800a57c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800866a:	f000 f8fc 	bl	8008866 <prvGetDisinheritPriorityAfterTimeout>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008676:	4618      	mov	r0, r3
 8008678:	f001 fa28 	bl	8009acc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800867c:	f001 ffb2 	bl	800a5e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008682:	4618      	mov	r0, r3
 8008684:	3738      	adds	r7, #56	; 0x38
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08e      	sub	sp, #56	; 0x38
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10c      	bne.n	80086c0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	b672      	cpsid	i
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	b662      	cpsie	i
 80086ba:	623b      	str	r3, [r7, #32]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <xQueueReceiveFromISR+0x3e>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xQueueReceiveFromISR+0x42>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueReceiveFromISR+0x44>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10c      	bne.n	80086f2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	b672      	cpsid	i
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	b662      	cpsie	i
 80086ec:	61fb      	str	r3, [r7, #28]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086f2:	f002 f82b 	bl	800a74c <vPortValidateInterruptPriority>
	__asm volatile
 80086f6:	f3ef 8211 	mrs	r2, BASEPRI
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	b672      	cpsid	i
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	b662      	cpsie	i
 800870e:	61ba      	str	r2, [r7, #24]
 8008710:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008712:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d02f      	beq.n	8008782 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008730:	f000 f91b 	bl	800896a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800873c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008744:	d112      	bne.n	800876c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d016      	beq.n	800877c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	3310      	adds	r3, #16
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fee8 	bl	8009528 <xTaskRemoveFromEventList>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00e      	beq.n	800877c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	e007      	b.n	800877c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800876c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008770:	3301      	adds	r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	b25a      	sxtb	r2, r3
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800877c:	2301      	movs	r3, #1
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
 8008780:	e001      	b.n	8008786 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	613b      	str	r3, [r7, #16]
	__asm volatile
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f383 8811 	msr	BASEPRI, r3
}
 8008790:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008794:	4618      	mov	r0, r3
 8008796:	3738      	adds	r7, #56	; 0x38
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10c      	bne.n	80087c4 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	b672      	cpsid	i
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	b662      	cpsie	i
 80087be:	60bb      	str	r3, [r7, #8]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80087c4:	f001 feda 	bl	800a57c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80087ce:	f001 ff09 	bl	800a5e4 <vPortExitCritical>

	return uxReturn;
 80087d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10c      	bne.n	8008808 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800880e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008810:	4618      	mov	r0, r3
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10c      	bne.n	8008848 <vQueueDelete+0x2c>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	b672      	cpsid	i
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	b662      	cpsie	i
 8008842:	60bb      	str	r3, [r7, #8]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f95f 	bl	8008b0c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f002 f885 	bl	800a968 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e001      	b.n	8008888 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008888:	68fb      	ldr	r3, [r7, #12]
	}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b086      	sub	sp, #24
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10d      	bne.n	80088d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d14d      	bne.n	8008958 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f891 	bl	80099e8 <xTaskPriorityDisinherit>
 80088c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	609a      	str	r2, [r3, #8]
 80088ce:	e043      	b.n	8008958 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d119      	bne.n	800890a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6858      	ldr	r0, [r3, #4]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	461a      	mov	r2, r3
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	f00f fa50 	bl	8017d86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d32b      	bcc.n	8008958 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	605a      	str	r2, [r3, #4]
 8008908:	e026      	b.n	8008958 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68d8      	ldr	r0, [r3, #12]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	461a      	mov	r2, r3
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	f00f fa36 	bl	8017d86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	425b      	negs	r3, r3
 8008924:	441a      	add	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d207      	bcs.n	8008946 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	425b      	negs	r3, r3
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d105      	bne.n	8008958 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	3b01      	subs	r3, #1
 8008956:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008960:	697b      	ldr	r3, [r7, #20]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d018      	beq.n	80089ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	441a      	add	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68da      	ldr	r2, [r3, #12]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d303      	bcc.n	800899e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68d9      	ldr	r1, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	461a      	mov	r2, r3
 80089a8:	6838      	ldr	r0, [r7, #0]
 80089aa:	f00f f9ec 	bl	8017d86 <memcpy>
	}
}
 80089ae:	bf00      	nop
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089be:	f001 fddd 	bl	800a57c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ca:	e011      	b.n	80089f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d012      	beq.n	80089fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fda5 	bl	8009528 <xTaskRemoveFromEventList>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089e4:	f000 fe82 	bl	80096ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dce9      	bgt.n	80089cc <prvUnlockQueue+0x16>
 80089f8:	e000      	b.n	80089fc <prvUnlockQueue+0x46>
					break;
 80089fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	22ff      	movs	r2, #255	; 0xff
 8008a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a04:	f001 fdee 	bl	800a5e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a08:	f001 fdb8 	bl	800a57c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a12:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a14:	e011      	b.n	8008a3a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d012      	beq.n	8008a44 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3310      	adds	r3, #16
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fd80 	bl	8009528 <xTaskRemoveFromEventList>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a2e:	f000 fe5d 	bl	80096ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	dce9      	bgt.n	8008a16 <prvUnlockQueue+0x60>
 8008a42:	e000      	b.n	8008a46 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a44:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	22ff      	movs	r2, #255	; 0xff
 8008a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a4e:	f001 fdc9 	bl	800a5e4 <vPortExitCritical>
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a62:	f001 fd8b 	bl	800a57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d102      	bne.n	8008a74 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	e001      	b.n	8008a78 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a78:	f001 fdb4 	bl	800a5e4 <vPortExitCritical>

	return xReturn;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a8e:	f001 fd75 	bl	800a57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d102      	bne.n	8008aa4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	e001      	b.n	8008aa8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008aa8:	f001 fd9c 	bl	800a5e4 <vPortExitCritical>

	return xReturn;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	e014      	b.n	8008af2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ac8:	4a0f      	ldr	r2, [pc, #60]	; (8008b08 <vQueueAddToRegistry+0x50>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10b      	bne.n	8008aec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ad4:	490c      	ldr	r1, [pc, #48]	; (8008b08 <vQueueAddToRegistry+0x50>)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ade:	4a0a      	ldr	r2, [pc, #40]	; (8008b08 <vQueueAddToRegistry+0x50>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008aea:	e006      	b.n	8008afa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d9e7      	bls.n	8008ac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	2000588c 	.word	0x2000588c

08008b0c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e016      	b.n	8008b48 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008b1a:	4a10      	ldr	r2, [pc, #64]	; (8008b5c <vQueueUnregisterQueue+0x50>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d10b      	bne.n	8008b42 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <vQueueUnregisterQueue+0x50>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b34:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <vQueueUnregisterQueue+0x50>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	4413      	add	r3, r2
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	605a      	str	r2, [r3, #4]
				break;
 8008b40:	e006      	b.n	8008b50 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b07      	cmp	r3, #7
 8008b4c:	d9e5      	bls.n	8008b1a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	2000588c 	.word	0x2000588c

08008b60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b70:	f001 fd04 	bl	800a57c <vPortEnterCritical>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b7a:	b25b      	sxtb	r3, r3
 8008b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b80:	d103      	bne.n	8008b8a <vQueueWaitForMessageRestricted+0x2a>
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b96:	d103      	bne.n	8008ba0 <vQueueWaitForMessageRestricted+0x40>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba0:	f001 fd20 	bl	800a5e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d106      	bne.n	8008bba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fc89 	bl	80094cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff fefb 	bl	80089b6 <prvUnlockQueue>
	}
 8008bc0:	bf00      	nop
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08e      	sub	sp, #56	; 0x38
 8008bcc:	af04      	add	r7, sp, #16
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10c      	bne.n	8008bf6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	b672      	cpsid	i
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	b662      	cpsie	i
 8008bf0:	623b      	str	r3, [r7, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10c      	bne.n	8008c16 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c00:	b672      	cpsid	i
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	b662      	cpsie	i
 8008c10:	61fb      	str	r3, [r7, #28]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c16:	23bc      	movs	r3, #188	; 0xbc
 8008c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2bbc      	cmp	r3, #188	; 0xbc
 8008c1e:	d00c      	beq.n	8008c3a <xTaskCreateStatic+0x72>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	61bb      	str	r3, [r7, #24]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01e      	beq.n	8008c80 <xTaskCreateStatic+0xb8>
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01b      	beq.n	8008c80 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	9302      	str	r3, [sp, #8]
 8008c62:	f107 0314 	add.w	r3, r7, #20
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f850 	bl	8008d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c7a:	f000 f8f5 	bl	8008e68 <prvAddNewTaskToReadyList>
 8008c7e:	e001      	b.n	8008c84 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c84:	697b      	ldr	r3, [r7, #20]
	}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3728      	adds	r7, #40	; 0x28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b08c      	sub	sp, #48	; 0x30
 8008c92:	af04      	add	r7, sp, #16
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fd96 	bl	800a7d4 <pvPortMalloc>
 8008ca8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00e      	beq.n	8008cce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cb0:	20bc      	movs	r0, #188	; 0xbc
 8008cb2:	f001 fd8f 	bl	800a7d4 <pvPortMalloc>
 8008cb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cc4:	e005      	b.n	8008cd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cc6:	6978      	ldr	r0, [r7, #20]
 8008cc8:	f001 fe4e 	bl	800a968 <vPortFree>
 8008ccc:	e001      	b.n	8008cd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	9303      	str	r3, [sp, #12]
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	9302      	str	r3, [sp, #8]
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f80e 	bl	8008d18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cfc:	69f8      	ldr	r0, [r7, #28]
 8008cfe:	f000 f8b3 	bl	8008e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d02:	2301      	movs	r3, #1
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e002      	b.n	8008d0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d0e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3720      	adds	r7, #32
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	21a5      	movs	r1, #165	; 0xa5
 8008d32:	f00f f850 	bl	8017dd6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d40:	440b      	add	r3, r1
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	b672      	cpsid	i
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	b662      	cpsie	i
 8008d6e:	617b      	str	r3, [r7, #20]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01f      	beq.n	8008dba <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	e012      	b.n	8008da6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	7819      	ldrb	r1, [r3, #0]
 8008d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3334      	adds	r3, #52	; 0x34
 8008d90:	460a      	mov	r2, r1
 8008d92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	2b0f      	cmp	r3, #15
 8008daa:	d9e9      	bls.n	8008d80 <prvInitialiseNewTask+0x68>
 8008dac:	e000      	b.n	8008db0 <prvInitialiseNewTask+0x98>
			{
				break;
 8008dae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db8:	e003      	b.n	8008dc2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	2b37      	cmp	r3, #55	; 0x37
 8008dc6:	d901      	bls.n	8008dcc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dc8:	2337      	movs	r3, #55	; 0x37
 8008dca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	2200      	movs	r2, #0
 8008ddc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	3304      	adds	r3, #4
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fd0c 	bl	8007800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	3318      	adds	r3, #24
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fd07 	bl	8007800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	3354      	adds	r3, #84	; 0x54
 8008e1c:	2260      	movs	r2, #96	; 0x60
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f00e ffd8 	bl	8017dd6 <memset>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <prvInitialiseNewTask+0x144>)
 8008e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	4a0c      	ldr	r2, [pc, #48]	; (8008e60 <prvInitialiseNewTask+0x148>)
 8008e30:	65da      	str	r2, [r3, #92]	; 0x5c
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	4a0b      	ldr	r2, [pc, #44]	; (8008e64 <prvInitialiseNewTask+0x14c>)
 8008e36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	69b8      	ldr	r0, [r7, #24]
 8008e3e:	f001 fa8f 	bl	800a360 <pxPortInitialiseStack>
 8008e42:	4602      	mov	r2, r0
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d002      	beq.n	8008e54 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e54:	bf00      	nop
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	0801e424 	.word	0x0801e424
 8008e60:	0801e444 	.word	0x0801e444
 8008e64:	0801e404 	.word	0x0801e404

08008e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e70:	f001 fb84 	bl	800a57c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e74:	4b2d      	ldr	r3, [pc, #180]	; (8008f2c <prvAddNewTaskToReadyList+0xc4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <prvAddNewTaskToReadyList+0xc4>)
 8008e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e7e:	4b2c      	ldr	r3, [pc, #176]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e86:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e8c:	4b27      	ldr	r3, [pc, #156]	; (8008f2c <prvAddNewTaskToReadyList+0xc4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d110      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e94:	f000 fc4e 	bl	8009734 <prvInitialiseTaskLists>
 8008e98:	e00d      	b.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e9a:	4b26      	ldr	r3, [pc, #152]	; (8008f34 <prvAddNewTaskToReadyList+0xcc>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ea2:	4b23      	ldr	r3, [pc, #140]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d802      	bhi.n	8008eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eb6:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <prvAddNewTaskToReadyList+0xd0>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a1e      	ldr	r2, [pc, #120]	; (8008f38 <prvAddNewTaskToReadyList+0xd0>)
 8008ebe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ec0:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <prvAddNewTaskToReadyList+0xd0>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <prvAddNewTaskToReadyList+0xd4>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d903      	bls.n	8008edc <prvAddNewTaskToReadyList+0x74>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	4a18      	ldr	r2, [pc, #96]	; (8008f3c <prvAddNewTaskToReadyList+0xd4>)
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4a15      	ldr	r2, [pc, #84]	; (8008f40 <prvAddNewTaskToReadyList+0xd8>)
 8008eea:	441a      	add	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	f7fe fc91 	bl	800781a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ef8:	f001 fb74 	bl	800a5e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008efc:	4b0d      	ldr	r3, [pc, #52]	; (8008f34 <prvAddNewTaskToReadyList+0xcc>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00e      	beq.n	8008f22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <prvAddNewTaskToReadyList+0xc8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d207      	bcs.n	8008f22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <prvAddNewTaskToReadyList+0xdc>)
 8008f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20005da0 	.word	0x20005da0
 8008f30:	200058cc 	.word	0x200058cc
 8008f34:	20005dac 	.word	0x20005dac
 8008f38:	20005dbc 	.word	0x20005dbc
 8008f3c:	20005da8 	.word	0x20005da8
 8008f40:	200058d0 	.word	0x200058d0
 8008f44:	e000ed04 	.word	0xe000ed04

08008f48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d019      	beq.n	8008f8e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f5a:	4b14      	ldr	r3, [pc, #80]	; (8008fac <vTaskDelay+0x64>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00c      	beq.n	8008f7c <vTaskDelay+0x34>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	b672      	cpsid	i
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	b662      	cpsie	i
 8008f76:	60bb      	str	r3, [r7, #8]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f7c:	f000 f88e 	bl	800909c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f80:	2100      	movs	r1, #0
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fe3c 	bl	8009c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f88:	f000 f896 	bl	80090b8 <xTaskResumeAll>
 8008f8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d107      	bne.n	8008fa4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008f94:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <vTaskDelay+0x68>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20005dc8 	.word	0x20005dc8
 8008fb0:	e000ed04 	.word	0xe000ed04

08008fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008fc2:	463a      	mov	r2, r7
 8008fc4:	1d39      	adds	r1, r7, #4
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fbc4 	bl	8007758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	9202      	str	r2, [sp, #8]
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	4926      	ldr	r1, [pc, #152]	; (800907c <vTaskStartScheduler+0xc8>)
 8008fe4:	4826      	ldr	r0, [pc, #152]	; (8009080 <vTaskStartScheduler+0xcc>)
 8008fe6:	f7ff fdef 	bl	8008bc8 <xTaskCreateStatic>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4a25      	ldr	r2, [pc, #148]	; (8009084 <vTaskStartScheduler+0xd0>)
 8008fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ff0:	4b24      	ldr	r3, [pc, #144]	; (8009084 <vTaskStartScheduler+0xd0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e001      	b.n	8009002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d102      	bne.n	800900e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009008:	f000 fe4e 	bl	8009ca8 <xTimerCreateTimerTask>
 800900c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d11d      	bne.n	8009050 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	b672      	cpsid	i
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	b662      	cpsie	i
 8009028:	613b      	str	r3, [r7, #16]
}
 800902a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800902c:	4b16      	ldr	r3, [pc, #88]	; (8009088 <vTaskStartScheduler+0xd4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3354      	adds	r3, #84	; 0x54
 8009032:	4a16      	ldr	r2, [pc, #88]	; (800908c <vTaskStartScheduler+0xd8>)
 8009034:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009036:	4b16      	ldr	r3, [pc, #88]	; (8009090 <vTaskStartScheduler+0xdc>)
 8009038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800903c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800903e:	4b15      	ldr	r3, [pc, #84]	; (8009094 <vTaskStartScheduler+0xe0>)
 8009040:	2201      	movs	r2, #1
 8009042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009044:	4b14      	ldr	r3, [pc, #80]	; (8009098 <vTaskStartScheduler+0xe4>)
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800904a:	f001 fa19 	bl	800a480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800904e:	e010      	b.n	8009072 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009056:	d10c      	bne.n	8009072 <vTaskStartScheduler+0xbe>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	b672      	cpsid	i
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	b662      	cpsie	i
 800906c:	60fb      	str	r3, [r7, #12]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <vTaskStartScheduler+0xbc>
}
 8009072:	bf00      	nop
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	0801b008 	.word	0x0801b008
 8009080:	08009705 	.word	0x08009705
 8009084:	20005dc4 	.word	0x20005dc4
 8009088:	200058cc 	.word	0x200058cc
 800908c:	2000002c 	.word	0x2000002c
 8009090:	20005dc0 	.word	0x20005dc0
 8009094:	20005dac 	.word	0x20005dac
 8009098:	20005da4 	.word	0x20005da4

0800909c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80090a0:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <vTaskSuspendAll+0x18>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a03      	ldr	r2, [pc, #12]	; (80090b4 <vTaskSuspendAll+0x18>)
 80090a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80090aa:	bf00      	nop
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	20005dc8 	.word	0x20005dc8

080090b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090c6:	4b43      	ldr	r3, [pc, #268]	; (80091d4 <xTaskResumeAll+0x11c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10c      	bne.n	80090e8 <xTaskResumeAll+0x30>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	b672      	cpsid	i
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	b662      	cpsie	i
 80090e2:	603b      	str	r3, [r7, #0]
}
 80090e4:	bf00      	nop
 80090e6:	e7fe      	b.n	80090e6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090e8:	f001 fa48 	bl	800a57c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090ec:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <xTaskResumeAll+0x11c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	4a38      	ldr	r2, [pc, #224]	; (80091d4 <xTaskResumeAll+0x11c>)
 80090f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090f6:	4b37      	ldr	r3, [pc, #220]	; (80091d4 <xTaskResumeAll+0x11c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d162      	bne.n	80091c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090fe:	4b36      	ldr	r3, [pc, #216]	; (80091d8 <xTaskResumeAll+0x120>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d05e      	beq.n	80091c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009106:	e02f      	b.n	8009168 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <xTaskResumeAll+0x124>)
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3318      	adds	r3, #24
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fbdd 	bl	80078d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3304      	adds	r3, #4
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fbd8 	bl	80078d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4b2d      	ldr	r3, [pc, #180]	; (80091e0 <xTaskResumeAll+0x128>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d903      	bls.n	8009138 <xTaskResumeAll+0x80>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	4a2a      	ldr	r2, [pc, #168]	; (80091e0 <xTaskResumeAll+0x128>)
 8009136:	6013      	str	r3, [r2, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4a27      	ldr	r2, [pc, #156]	; (80091e4 <xTaskResumeAll+0x12c>)
 8009146:	441a      	add	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3304      	adds	r3, #4
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fb63 	bl	800781a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <xTaskResumeAll+0x130>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009162:	4b22      	ldr	r3, [pc, #136]	; (80091ec <xTaskResumeAll+0x134>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009168:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <xTaskResumeAll+0x124>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1cb      	bne.n	8009108 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009176:	f000 fb81 	bl	800987c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800917a:	4b1d      	ldr	r3, [pc, #116]	; (80091f0 <xTaskResumeAll+0x138>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d010      	beq.n	80091a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009186:	f000 f859 	bl	800923c <xTaskIncrementTick>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009190:	4b16      	ldr	r3, [pc, #88]	; (80091ec <xTaskResumeAll+0x134>)
 8009192:	2201      	movs	r2, #1
 8009194:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	3b01      	subs	r3, #1
 800919a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f1      	bne.n	8009186 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <xTaskResumeAll+0x138>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091a8:	4b10      	ldr	r3, [pc, #64]	; (80091ec <xTaskResumeAll+0x134>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091b0:	2301      	movs	r3, #1
 80091b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <xTaskResumeAll+0x13c>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091c4:	f001 fa0e 	bl	800a5e4 <vPortExitCritical>

	return xAlreadyYielded;
 80091c8:	68bb      	ldr	r3, [r7, #8]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20005dc8 	.word	0x20005dc8
 80091d8:	20005da0 	.word	0x20005da0
 80091dc:	20005d60 	.word	0x20005d60
 80091e0:	20005da8 	.word	0x20005da8
 80091e4:	200058d0 	.word	0x200058d0
 80091e8:	200058cc 	.word	0x200058cc
 80091ec:	20005db4 	.word	0x20005db4
 80091f0:	20005db0 	.word	0x20005db0
 80091f4:	e000ed04 	.word	0xe000ed04

080091f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091fe:	4b05      	ldr	r3, [pc, #20]	; (8009214 <xTaskGetTickCount+0x1c>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009204:	687b      	ldr	r3, [r7, #4]
}
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20005da4 	.word	0x20005da4

08009218 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800921e:	f001 fa95 	bl	800a74c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009222:	2300      	movs	r3, #0
 8009224:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009226:	4b04      	ldr	r3, [pc, #16]	; (8009238 <xTaskGetTickCountFromISR+0x20>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800922c:	683b      	ldr	r3, [r7, #0]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20005da4 	.word	0x20005da4

0800923c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009246:	4b50      	ldr	r3, [pc, #320]	; (8009388 <xTaskIncrementTick+0x14c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 808b 	bne.w	8009366 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009250:	4b4e      	ldr	r3, [pc, #312]	; (800938c <xTaskIncrementTick+0x150>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009258:	4a4c      	ldr	r2, [pc, #304]	; (800938c <xTaskIncrementTick+0x150>)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d122      	bne.n	80092aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009264:	4b4a      	ldr	r3, [pc, #296]	; (8009390 <xTaskIncrementTick+0x154>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00c      	beq.n	8009288 <xTaskIncrementTick+0x4c>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	b672      	cpsid	i
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	b662      	cpsie	i
 8009282:	603b      	str	r3, [r7, #0]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <xTaskIncrementTick+0x4a>
 8009288:	4b41      	ldr	r3, [pc, #260]	; (8009390 <xTaskIncrementTick+0x154>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	4b41      	ldr	r3, [pc, #260]	; (8009394 <xTaskIncrementTick+0x158>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a3f      	ldr	r2, [pc, #252]	; (8009390 <xTaskIncrementTick+0x154>)
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4a3f      	ldr	r2, [pc, #252]	; (8009394 <xTaskIncrementTick+0x158>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	4b3e      	ldr	r3, [pc, #248]	; (8009398 <xTaskIncrementTick+0x15c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3301      	adds	r3, #1
 80092a2:	4a3d      	ldr	r2, [pc, #244]	; (8009398 <xTaskIncrementTick+0x15c>)
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	f000 fae9 	bl	800987c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092aa:	4b3c      	ldr	r3, [pc, #240]	; (800939c <xTaskIncrementTick+0x160>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d349      	bcc.n	8009348 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b4:	4b36      	ldr	r3, [pc, #216]	; (8009390 <xTaskIncrementTick+0x154>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d104      	bne.n	80092c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092be:	4b37      	ldr	r3, [pc, #220]	; (800939c <xTaskIncrementTick+0x160>)
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092c4:	601a      	str	r2, [r3, #0]
					break;
 80092c6:	e03f      	b.n	8009348 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c8:	4b31      	ldr	r3, [pc, #196]	; (8009390 <xTaskIncrementTick+0x154>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d203      	bcs.n	80092e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092e0:	4a2e      	ldr	r2, [pc, #184]	; (800939c <xTaskIncrementTick+0x160>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092e6:	e02f      	b.n	8009348 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe faf1 	bl	80078d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d004      	beq.n	8009304 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3318      	adds	r3, #24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fae8 	bl	80078d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	4b25      	ldr	r3, [pc, #148]	; (80093a0 <xTaskIncrementTick+0x164>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d903      	bls.n	8009318 <xTaskIncrementTick+0xdc>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	4a22      	ldr	r2, [pc, #136]	; (80093a0 <xTaskIncrementTick+0x164>)
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <xTaskIncrementTick+0x168>)
 8009326:	441a      	add	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f7fe fa73 	bl	800781a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009338:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <xTaskIncrementTick+0x16c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933e:	429a      	cmp	r2, r3
 8009340:	d3b8      	bcc.n	80092b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009342:	2301      	movs	r3, #1
 8009344:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009346:	e7b5      	b.n	80092b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009348:	4b17      	ldr	r3, [pc, #92]	; (80093a8 <xTaskIncrementTick+0x16c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934e:	4915      	ldr	r1, [pc, #84]	; (80093a4 <xTaskIncrementTick+0x168>)
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	440b      	add	r3, r1
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d907      	bls.n	8009370 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e004      	b.n	8009370 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009366:	4b11      	ldr	r3, [pc, #68]	; (80093ac <xTaskIncrementTick+0x170>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3301      	adds	r3, #1
 800936c:	4a0f      	ldr	r2, [pc, #60]	; (80093ac <xTaskIncrementTick+0x170>)
 800936e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <xTaskIncrementTick+0x174>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009378:	2301      	movs	r3, #1
 800937a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800937c:	697b      	ldr	r3, [r7, #20]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20005dc8 	.word	0x20005dc8
 800938c:	20005da4 	.word	0x20005da4
 8009390:	20005d58 	.word	0x20005d58
 8009394:	20005d5c 	.word	0x20005d5c
 8009398:	20005db8 	.word	0x20005db8
 800939c:	20005dc0 	.word	0x20005dc0
 80093a0:	20005da8 	.word	0x20005da8
 80093a4:	200058d0 	.word	0x200058d0
 80093a8:	200058cc 	.word	0x200058cc
 80093ac:	20005db0 	.word	0x20005db0
 80093b0:	20005db4 	.word	0x20005db4

080093b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093ba:	4b2b      	ldr	r3, [pc, #172]	; (8009468 <vTaskSwitchContext+0xb4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093c2:	4b2a      	ldr	r3, [pc, #168]	; (800946c <vTaskSwitchContext+0xb8>)
 80093c4:	2201      	movs	r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093c8:	e048      	b.n	800945c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80093ca:	4b28      	ldr	r3, [pc, #160]	; (800946c <vTaskSwitchContext+0xb8>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d0:	4b27      	ldr	r3, [pc, #156]	; (8009470 <vTaskSwitchContext+0xbc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e012      	b.n	80093fe <vTaskSwitchContext+0x4a>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10c      	bne.n	80093f8 <vTaskSwitchContext+0x44>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	b672      	cpsid	i
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	b662      	cpsie	i
 80093f2:	607b      	str	r3, [r7, #4]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <vTaskSwitchContext+0x42>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	491d      	ldr	r1, [pc, #116]	; (8009474 <vTaskSwitchContext+0xc0>)
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	440b      	add	r3, r1
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0e2      	beq.n	80093d8 <vTaskSwitchContext+0x24>
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a15      	ldr	r2, [pc, #84]	; (8009474 <vTaskSwitchContext+0xc0>)
 800941e:	4413      	add	r3, r2
 8009420:	60bb      	str	r3, [r7, #8]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	685a      	ldr	r2, [r3, #4]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	605a      	str	r2, [r3, #4]
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3308      	adds	r3, #8
 8009434:	429a      	cmp	r2, r3
 8009436:	d104      	bne.n	8009442 <vTaskSwitchContext+0x8e>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	605a      	str	r2, [r3, #4]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <vTaskSwitchContext+0xc4>)
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	4a08      	ldr	r2, [pc, #32]	; (8009470 <vTaskSwitchContext+0xbc>)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <vTaskSwitchContext+0xc4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3354      	adds	r3, #84	; 0x54
 8009458:	4a08      	ldr	r2, [pc, #32]	; (800947c <vTaskSwitchContext+0xc8>)
 800945a:	6013      	str	r3, [r2, #0]
}
 800945c:	bf00      	nop
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20005dc8 	.word	0x20005dc8
 800946c:	20005db4 	.word	0x20005db4
 8009470:	20005da8 	.word	0x20005da8
 8009474:	200058d0 	.word	0x200058d0
 8009478:	200058cc 	.word	0x200058cc
 800947c:	2000002c 	.word	0x2000002c

08009480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10c      	bne.n	80094aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	b672      	cpsid	i
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	b662      	cpsie	i
 80094a4:	60fb      	str	r3, [r7, #12]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <vTaskPlaceOnEventList+0x48>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3318      	adds	r3, #24
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe f9d5 	bl	8007862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094b8:	2101      	movs	r1, #1
 80094ba:	6838      	ldr	r0, [r7, #0]
 80094bc:	f000 fba0 	bl	8009c00 <prvAddCurrentTaskToDelayedList>
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200058cc 	.word	0x200058cc

080094cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10c      	bne.n	80094f8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	b672      	cpsid	i
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	b662      	cpsie	i
 80094f2:	617b      	str	r3, [r7, #20]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094f8:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <vTaskPlaceOnEventListRestricted+0x58>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3318      	adds	r3, #24
 80094fe:	4619      	mov	r1, r3
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7fe f98a 	bl	800781a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800950c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009510:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	68b8      	ldr	r0, [r7, #8]
 8009516:	f000 fb73 	bl	8009c00 <prvAddCurrentTaskToDelayedList>
	}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200058cc 	.word	0x200058cc

08009528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10c      	bne.n	8009558 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	60fb      	str	r3, [r7, #12]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	3318      	adds	r3, #24
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe f9b9 	bl	80078d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009562:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <xTaskRemoveFromEventList+0xb4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d11d      	bne.n	80095a6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	3304      	adds	r3, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe f9b0 	bl	80078d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009578:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <xTaskRemoveFromEventList+0xb8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d903      	bls.n	8009588 <xTaskRemoveFromEventList+0x60>
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a16      	ldr	r2, [pc, #88]	; (80095e0 <xTaskRemoveFromEventList+0xb8>)
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a13      	ldr	r2, [pc, #76]	; (80095e4 <xTaskRemoveFromEventList+0xbc>)
 8009596:	441a      	add	r2, r3
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7fe f93b 	bl	800781a <vListInsertEnd>
 80095a4:	e005      	b.n	80095b2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3318      	adds	r3, #24
 80095aa:	4619      	mov	r1, r3
 80095ac:	480e      	ldr	r0, [pc, #56]	; (80095e8 <xTaskRemoveFromEventList+0xc0>)
 80095ae:	f7fe f934 	bl	800781a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <xTaskRemoveFromEventList+0xc4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	429a      	cmp	r2, r3
 80095be:	d905      	bls.n	80095cc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80095c4:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <xTaskRemoveFromEventList+0xc8>)
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e001      	b.n	80095d0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80095d0:	697b      	ldr	r3, [r7, #20]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20005dc8 	.word	0x20005dc8
 80095e0:	20005da8 	.word	0x20005da8
 80095e4:	200058d0 	.word	0x200058d0
 80095e8:	20005d60 	.word	0x20005d60
 80095ec:	200058cc 	.word	0x200058cc
 80095f0:	20005db4 	.word	0x20005db4

080095f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <vTaskInternalSetTimeOutState+0x24>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009604:	4b05      	ldr	r3, [pc, #20]	; (800961c <vTaskInternalSetTimeOutState+0x28>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	605a      	str	r2, [r3, #4]
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	20005db8 	.word	0x20005db8
 800961c:	20005da4 	.word	0x20005da4

08009620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10c      	bne.n	800964a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	e7fe      	b.n	8009648 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10c      	bne.n	800966a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	b672      	cpsid	i
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	b662      	cpsie	i
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800966a:	f000 ff87 	bl	800a57c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800966e:	4b1d      	ldr	r3, [pc, #116]	; (80096e4 <xTaskCheckForTimeOut+0xc4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009686:	d102      	bne.n	800968e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009688:	2300      	movs	r3, #0
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e023      	b.n	80096d6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <xTaskCheckForTimeOut+0xc8>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d007      	beq.n	80096aa <xTaskCheckForTimeOut+0x8a>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e015      	b.n	80096d6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d20b      	bcs.n	80096cc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	1ad2      	subs	r2, r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff ff97 	bl	80095f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e004      	b.n	80096d6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f000 ff85 	bl	800a5e4 <vPortExitCritical>

	return xReturn;
 80096da:	69fb      	ldr	r3, [r7, #28]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20005da4 	.word	0x20005da4
 80096e8:	20005db8 	.word	0x20005db8

080096ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <vTaskMissedYield+0x14>)
 80096f2:	2201      	movs	r2, #1
 80096f4:	601a      	str	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	20005db4 	.word	0x20005db4

08009704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800970c:	f000 f852 	bl	80097b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <prvIdleTask+0x28>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d9f9      	bls.n	800970c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009718:	4b05      	ldr	r3, [pc, #20]	; (8009730 <prvIdleTask+0x2c>)
 800971a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009728:	e7f0      	b.n	800970c <prvIdleTask+0x8>
 800972a:	bf00      	nop
 800972c:	200058d0 	.word	0x200058d0
 8009730:	e000ed04 	.word	0xe000ed04

08009734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800973a:	2300      	movs	r3, #0
 800973c:	607b      	str	r3, [r7, #4]
 800973e:	e00c      	b.n	800975a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4a12      	ldr	r2, [pc, #72]	; (8009794 <prvInitialiseTaskLists+0x60>)
 800974c:	4413      	add	r3, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe f836 	bl	80077c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3301      	adds	r3, #1
 8009758:	607b      	str	r3, [r7, #4]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b37      	cmp	r3, #55	; 0x37
 800975e:	d9ef      	bls.n	8009740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009760:	480d      	ldr	r0, [pc, #52]	; (8009798 <prvInitialiseTaskLists+0x64>)
 8009762:	f7fe f82d 	bl	80077c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <prvInitialiseTaskLists+0x68>)
 8009768:	f7fe f82a 	bl	80077c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800976c:	480c      	ldr	r0, [pc, #48]	; (80097a0 <prvInitialiseTaskLists+0x6c>)
 800976e:	f7fe f827 	bl	80077c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009772:	480c      	ldr	r0, [pc, #48]	; (80097a4 <prvInitialiseTaskLists+0x70>)
 8009774:	f7fe f824 	bl	80077c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009778:	480b      	ldr	r0, [pc, #44]	; (80097a8 <prvInitialiseTaskLists+0x74>)
 800977a:	f7fe f821 	bl	80077c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800977e:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <prvInitialiseTaskLists+0x78>)
 8009780:	4a05      	ldr	r2, [pc, #20]	; (8009798 <prvInitialiseTaskLists+0x64>)
 8009782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009784:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <prvInitialiseTaskLists+0x7c>)
 8009786:	4a05      	ldr	r2, [pc, #20]	; (800979c <prvInitialiseTaskLists+0x68>)
 8009788:	601a      	str	r2, [r3, #0]
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200058d0 	.word	0x200058d0
 8009798:	20005d30 	.word	0x20005d30
 800979c:	20005d44 	.word	0x20005d44
 80097a0:	20005d60 	.word	0x20005d60
 80097a4:	20005d74 	.word	0x20005d74
 80097a8:	20005d8c 	.word	0x20005d8c
 80097ac:	20005d58 	.word	0x20005d58
 80097b0:	20005d5c 	.word	0x20005d5c

080097b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097ba:	e019      	b.n	80097f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097bc:	f000 fede 	bl	800a57c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c0:	4b10      	ldr	r3, [pc, #64]	; (8009804 <prvCheckTasksWaitingTermination+0x50>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe f881 	bl	80078d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80097d2:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <prvCheckTasksWaitingTermination+0x54>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <prvCheckTasksWaitingTermination+0x54>)
 80097da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80097dc:	4b0b      	ldr	r3, [pc, #44]	; (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4a0a      	ldr	r2, [pc, #40]	; (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80097e6:	f000 fefd 	bl	800a5e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f810 	bl	8009810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <prvCheckTasksWaitingTermination+0x58>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e1      	bne.n	80097bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	3708      	adds	r7, #8
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20005d74 	.word	0x20005d74
 8009808:	20005da0 	.word	0x20005da0
 800980c:	20005d88 	.word	0x20005d88

08009810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3354      	adds	r3, #84	; 0x54
 800981c:	4618      	mov	r0, r3
 800981e:	f00e fbdb 	bl	8017fd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009828:	2b00      	cmp	r3, #0
 800982a:	d108      	bne.n	800983e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	4618      	mov	r0, r3
 8009832:	f001 f899 	bl	800a968 <vPortFree>
				vPortFree( pxTCB );
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 f896 	bl	800a968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800983c:	e01a      	b.n	8009874 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009844:	2b01      	cmp	r3, #1
 8009846:	d103      	bne.n	8009850 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 f88d 	bl	800a968 <vPortFree>
	}
 800984e:	e011      	b.n	8009874 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009856:	2b02      	cmp	r3, #2
 8009858:	d00c      	beq.n	8009874 <prvDeleteTCB+0x64>
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	b672      	cpsid	i
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	b662      	cpsie	i
 800986e:	60fb      	str	r3, [r7, #12]
}
 8009870:	bf00      	nop
 8009872:	e7fe      	b.n	8009872 <prvDeleteTCB+0x62>
	}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009882:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <prvResetNextTaskUnblockTime+0x38>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <prvResetNextTaskUnblockTime+0x3c>)
 800988e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009894:	e008      	b.n	80098a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009896:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <prvResetNextTaskUnblockTime+0x38>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <prvResetNextTaskUnblockTime+0x3c>)
 80098a6:	6013      	str	r3, [r2, #0]
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	20005d58 	.word	0x20005d58
 80098b8:	20005dc0 	.word	0x20005dc0

080098bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80098c8:	687b      	ldr	r3, [r7, #4]
	}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	200058cc 	.word	0x200058cc

080098dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098e2:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <xTaskGetSchedulerState+0x34>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ea:	2301      	movs	r3, #1
 80098ec:	607b      	str	r3, [r7, #4]
 80098ee:	e008      	b.n	8009902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f0:	4b08      	ldr	r3, [pc, #32]	; (8009914 <xTaskGetSchedulerState+0x38>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d102      	bne.n	80098fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098f8:	2302      	movs	r3, #2
 80098fa:	607b      	str	r3, [r7, #4]
 80098fc:	e001      	b.n	8009902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098fe:	2300      	movs	r3, #0
 8009900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009902:	687b      	ldr	r3, [r7, #4]
	}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	20005dac 	.word	0x20005dac
 8009914:	20005dc8 	.word	0x20005dc8

08009918 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d051      	beq.n	80099d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <xTaskPriorityInherit+0xc4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d241      	bcs.n	80099c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	db06      	blt.n	8009952 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009944:	4b25      	ldr	r3, [pc, #148]	; (80099dc <xTaskPriorityInherit+0xc4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	6959      	ldr	r1, [r3, #20]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a1f      	ldr	r2, [pc, #124]	; (80099e0 <xTaskPriorityInherit+0xc8>)
 8009964:	4413      	add	r3, r2
 8009966:	4299      	cmp	r1, r3
 8009968:	d122      	bne.n	80099b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	3304      	adds	r3, #4
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd ffb0 	bl	80078d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009974:	4b19      	ldr	r3, [pc, #100]	; (80099dc <xTaskPriorityInherit+0xc4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009982:	4b18      	ldr	r3, [pc, #96]	; (80099e4 <xTaskPriorityInherit+0xcc>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d903      	bls.n	8009992 <xTaskPriorityInherit+0x7a>
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <xTaskPriorityInherit+0xcc>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4a10      	ldr	r2, [pc, #64]	; (80099e0 <xTaskPriorityInherit+0xc8>)
 80099a0:	441a      	add	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f7fd ff36 	bl	800781a <vListInsertEnd>
 80099ae:	e004      	b.n	80099ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <xTaskPriorityInherit+0xc4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80099ba:	2301      	movs	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]
 80099be:	e008      	b.n	80099d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099c4:	4b05      	ldr	r3, [pc, #20]	; (80099dc <xTaskPriorityInherit+0xc4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d201      	bcs.n	80099d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099d2:	68fb      	ldr	r3, [r7, #12]
	}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	200058cc 	.word	0x200058cc
 80099e0:	200058d0 	.word	0x200058d0
 80099e4:	20005da8 	.word	0x20005da8

080099e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d05a      	beq.n	8009ab4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099fe:	4b30      	ldr	r3, [pc, #192]	; (8009ac0 <xTaskPriorityDisinherit+0xd8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d00c      	beq.n	8009a22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	b672      	cpsid	i
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	b662      	cpsie	i
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10c      	bne.n	8009a44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	b672      	cpsid	i
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	b662      	cpsie	i
 8009a3e:	60bb      	str	r3, [r7, #8]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a48:	1e5a      	subs	r2, r3, #1
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d02c      	beq.n	8009ab4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d128      	bne.n	8009ab4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd ff34 	bl	80078d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <xTaskPriorityDisinherit+0xdc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d903      	bls.n	8009a94 <xTaskPriorityDisinherit+0xac>
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	4a0c      	ldr	r2, [pc, #48]	; (8009ac4 <xTaskPriorityDisinherit+0xdc>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a98:	4613      	mov	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <xTaskPriorityDisinherit+0xe0>)
 8009aa2:	441a      	add	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fd feb5 	bl	800781a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ab4:	697b      	ldr	r3, [r7, #20]
	}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200058cc 	.word	0x200058cc
 8009ac4:	20005da8 	.word	0x20005da8
 8009ac8:	200058d0 	.word	0x200058d0

08009acc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ada:	2301      	movs	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d06e      	beq.n	8009bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	60fb      	str	r3, [r7, #12]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d902      	bls.n	8009b16 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	e002      	b.n	8009b1c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d04d      	beq.n	8009bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d148      	bne.n	8009bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009b30:	4b26      	ldr	r3, [pc, #152]	; (8009bcc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d10c      	bne.n	8009b54 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	b672      	cpsid	i
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	b662      	cpsie	i
 8009b4e:	60bb      	str	r3, [r7, #8]
}
 8009b50:	bf00      	nop
 8009b52:	e7fe      	b.n	8009b52 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	69fa      	ldr	r2, [r7, #28]
 8009b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	db04      	blt.n	8009b72 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	6959      	ldr	r1, [r3, #20]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4a13      	ldr	r2, [pc, #76]	; (8009bd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b82:	4413      	add	r3, r2
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d11c      	bne.n	8009bc2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fd fea1 	bl	80078d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d903      	bls.n	8009ba6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	4a0c      	ldr	r2, [pc, #48]	; (8009bd4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	4613      	mov	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4a07      	ldr	r2, [pc, #28]	; (8009bd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009bb4:	441a      	add	r2, r3
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fd fe2c 	bl	800781a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009bc2:	bf00      	nop
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	200058cc 	.word	0x200058cc
 8009bd0:	200058d0 	.word	0x200058d0
 8009bd4:	20005da8 	.word	0x20005da8

08009bd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009bdc:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009bea:	3201      	adds	r2, #1
 8009bec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009bee:	4b03      	ldr	r3, [pc, #12]	; (8009bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
	}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	200058cc 	.word	0x200058cc

08009c00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c0a:	4b21      	ldr	r3, [pc, #132]	; (8009c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c10:	4b20      	ldr	r3, [pc, #128]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fd fe5c 	bl	80078d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c22:	d10a      	bne.n	8009c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d007      	beq.n	8009c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c2a:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4819      	ldr	r0, [pc, #100]	; (8009c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c34:	f7fd fdf1 	bl	800781a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c38:	e026      	b.n	8009c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4413      	add	r3, r2
 8009c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c42:	4b14      	ldr	r3, [pc, #80]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d209      	bcs.n	8009c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c52:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fd fdff 	bl	8007862 <vListInsert>
}
 8009c64:	e010      	b.n	8009c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c66:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4619      	mov	r1, r3
 8009c72:	4610      	mov	r0, r2
 8009c74:	f7fd fdf5 	bl	8007862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c78:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d202      	bcs.n	8009c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c82:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20005da4 	.word	0x20005da4
 8009c94:	200058cc 	.word	0x200058cc
 8009c98:	20005d8c 	.word	0x20005d8c
 8009c9c:	20005d5c 	.word	0x20005d5c
 8009ca0:	20005d58 	.word	0x20005d58
 8009ca4:	20005dc0 	.word	0x20005dc0

08009ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009cb2:	f000 fb15 	bl	800a2e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009cb6:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <xTimerCreateTimerTask+0x84>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d021      	beq.n	8009d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cc6:	1d3a      	adds	r2, r7, #4
 8009cc8:	f107 0108 	add.w	r1, r7, #8
 8009ccc:	f107 030c 	add.w	r3, r7, #12
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fd fd5b 	bl	800778c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	9202      	str	r2, [sp, #8]
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	460a      	mov	r2, r1
 8009ce8:	4911      	ldr	r1, [pc, #68]	; (8009d30 <xTimerCreateTimerTask+0x88>)
 8009cea:	4812      	ldr	r0, [pc, #72]	; (8009d34 <xTimerCreateTimerTask+0x8c>)
 8009cec:	f7fe ff6c 	bl	8008bc8 <xTaskCreateStatic>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	4a11      	ldr	r2, [pc, #68]	; (8009d38 <xTimerCreateTimerTask+0x90>)
 8009cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cf6:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <xTimerCreateTimerTask+0x90>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10c      	bne.n	8009d22 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	b672      	cpsid	i
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	b662      	cpsie	i
 8009d1c:	613b      	str	r3, [r7, #16]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009d22:	697b      	ldr	r3, [r7, #20]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20005dfc 	.word	0x20005dfc
 8009d30:	0801b010 	.word	0x0801b010
 8009d34:	08009e79 	.word	0x08009e79
 8009d38:	20005e00 	.word	0x20005e00

08009d3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	; 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10c      	bne.n	8009d6e <xTimerGenericCommand+0x32>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	b672      	cpsid	i
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	b662      	cpsie	i
 8009d68:	623b      	str	r3, [r7, #32]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <xTimerGenericCommand+0x9c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d02a      	beq.n	8009dcc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2b05      	cmp	r3, #5
 8009d86:	dc18      	bgt.n	8009dba <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d88:	f7ff fda8 	bl	80098dc <xTaskGetSchedulerState>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d109      	bne.n	8009da6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <xTimerGenericCommand+0x9c>)
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f107 0110 	add.w	r1, r7, #16
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9e:	f7fe f841 	bl	8007e24 <xQueueGenericSend>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24
 8009da4:	e012      	b.n	8009dcc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <xTimerGenericCommand+0x9c>)
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	f107 0110 	add.w	r1, r7, #16
 8009dae:	2300      	movs	r3, #0
 8009db0:	2200      	movs	r2, #0
 8009db2:	f7fe f837 	bl	8007e24 <xQueueGenericSend>
 8009db6:	6278      	str	r0, [r7, #36]	; 0x24
 8009db8:	e008      	b.n	8009dcc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <xTimerGenericCommand+0x9c>)
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	f107 0110 	add.w	r1, r7, #16
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	f7fe f933 	bl	8008030 <xQueueGenericSendFromISR>
 8009dca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3728      	adds	r7, #40	; 0x28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20005dfc 	.word	0x20005dfc

08009ddc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de6:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <prvProcessExpiredTimer+0x98>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fd fd6d 	bl	80078d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d024      	beq.n	8009e52 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	18d1      	adds	r1, r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	6978      	ldr	r0, [r7, #20]
 8009e16:	f000 f8d3 	bl	8009fc0 <prvInsertTimerInActiveList>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d021      	beq.n	8009e64 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e20:	2300      	movs	r3, #0
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	2300      	movs	r3, #0
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	2100      	movs	r1, #0
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f7ff ff86 	bl	8009d3c <xTimerGenericCommand>
 8009e30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d115      	bne.n	8009e64 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	b672      	cpsid	i
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	b662      	cpsie	i
 8009e4c:	60fb      	str	r3, [r7, #12]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e58:	f023 0301 	bic.w	r3, r3, #1
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	6978      	ldr	r0, [r7, #20]
 8009e6a:	4798      	blx	r3
}
 8009e6c:	bf00      	nop
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20005df4 	.word	0x20005df4

08009e78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e80:	f107 0308 	add.w	r3, r7, #8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 f857 	bl	8009f38 <prvGetNextExpireTime>
 8009e8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f803 	bl	8009e9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e96:	f000 f8d5 	bl	800a044 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e9a:	e7f1      	b.n	8009e80 <prvTimerTask+0x8>

08009e9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ea6:	f7ff f8f9 	bl	800909c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 f866 	bl	8009f80 <prvSampleTimeNow>
 8009eb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d130      	bne.n	8009f1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <prvProcessTimerOrBlockTask+0x3c>
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d806      	bhi.n	8009ed8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009eca:	f7ff f8f5 	bl	80090b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ece:	68f9      	ldr	r1, [r7, #12]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff83 	bl	8009ddc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ed6:	e024      	b.n	8009f22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ede:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <prvProcessTimerOrBlockTask+0x90>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <prvProcessTimerOrBlockTask+0x50>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <prvProcessTimerOrBlockTask+0x52>
 8009eec:	2300      	movs	r3, #0
 8009eee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ef0:	4b0f      	ldr	r3, [pc, #60]	; (8009f30 <prvProcessTimerOrBlockTask+0x94>)
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	4619      	mov	r1, r3
 8009efe:	f7fe fe2f 	bl	8008b60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f02:	f7ff f8d9 	bl	80090b8 <xTaskResumeAll>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <prvProcessTimerOrBlockTask+0x98>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	f3bf 8f6f 	isb	sy
}
 8009f1c:	e001      	b.n	8009f22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f1e:	f7ff f8cb 	bl	80090b8 <xTaskResumeAll>
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20005df8 	.word	0x20005df8
 8009f30:	20005dfc 	.word	0x20005dfc
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <prvGetNextExpireTime+0x44>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <prvGetNextExpireTime+0x16>
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	e000      	b.n	8009f50 <prvGetNextExpireTime+0x18>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d105      	bne.n	8009f68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <prvGetNextExpireTime+0x44>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e001      	b.n	8009f6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	20005df4 	.word	0x20005df4

08009f80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f88:	f7ff f936 	bl	80091f8 <xTaskGetTickCount>
 8009f8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f8e:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <prvSampleTimeNow+0x3c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d205      	bcs.n	8009fa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f98:	f000 f93c 	bl	800a214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	e002      	b.n	8009faa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009faa:	4a04      	ldr	r2, [pc, #16]	; (8009fbc <prvSampleTimeNow+0x3c>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20005e04 	.word	0x20005e04

08009fc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d812      	bhi.n	800a00c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d302      	bcc.n	8009ffa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	617b      	str	r3, [r7, #20]
 8009ff8:	e01b      	b.n	800a032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ffa:	4b10      	ldr	r3, [pc, #64]	; (800a03c <prvInsertTimerInActiveList+0x7c>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3304      	adds	r3, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4610      	mov	r0, r2
 800a006:	f7fd fc2c 	bl	8007862 <vListInsert>
 800a00a:	e012      	b.n	800a032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	429a      	cmp	r2, r3
 800a012:	d206      	bcs.n	800a022 <prvInsertTimerInActiveList+0x62>
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d302      	bcc.n	800a022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a01c:	2301      	movs	r3, #1
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	e007      	b.n	800a032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <prvInsertTimerInActiveList+0x80>)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3304      	adds	r3, #4
 800a02a:	4619      	mov	r1, r3
 800a02c:	4610      	mov	r0, r2
 800a02e:	f7fd fc18 	bl	8007862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a032:	697b      	ldr	r3, [r7, #20]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20005df8 	.word	0x20005df8
 800a040:	20005df4 	.word	0x20005df4

0800a044 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a04a:	e0d0      	b.n	800a1ee <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	da1a      	bge.n	800a088 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a052:	1d3b      	adds	r3, r7, #4
 800a054:	3304      	adds	r3, #4
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10c      	bne.n	800a078 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	b672      	cpsid	i
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	b662      	cpsie	i
 800a072:	61fb      	str	r3, [r7, #28]
}
 800a074:	bf00      	nop
 800a076:	e7fe      	b.n	800a076 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a07e:	6850      	ldr	r0, [r2, #4]
 800a080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a082:	6892      	ldr	r2, [r2, #8]
 800a084:	4611      	mov	r1, r2
 800a086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f2c0 80ae 	blt.w	800a1ec <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d004      	beq.n	800a0a6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fd fc17 	bl	80078d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff69 	bl	8009f80 <prvSampleTimeNow>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b09      	cmp	r3, #9
 800a0b4:	f200 809b 	bhi.w	800a1ee <prvProcessReceivedCommands+0x1aa>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <prvProcessReceivedCommands+0x7c>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a0e9 	.word	0x0800a0e9
 800a0c4:	0800a0e9 	.word	0x0800a0e9
 800a0c8:	0800a0e9 	.word	0x0800a0e9
 800a0cc:	0800a161 	.word	0x0800a161
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a1c3 	.word	0x0800a1c3
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0e9 	.word	0x0800a0e9
 800a0e0:	0800a161 	.word	0x0800a161
 800a0e4:	0800a175 	.word	0x0800a175
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	18d1      	adds	r1, r2, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a108:	f7ff ff5a 	bl	8009fc0 <prvInsertTimerInActiveList>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d06d      	beq.n	800a1ee <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d062      	beq.n	800a1ee <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	699b      	ldr	r3, [r3, #24]
 800a12e:	441a      	add	r2, r3
 800a130:	2300      	movs	r3, #0
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	2100      	movs	r1, #0
 800a138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13a:	f7ff fdff 	bl	8009d3c <xTimerGenericCommand>
 800a13e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a140:	6a3b      	ldr	r3, [r7, #32]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d153      	bne.n	800a1ee <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	b672      	cpsid	i
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	b662      	cpsie	i
 800a15a:	61bb      	str	r3, [r7, #24]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a172:	e03c      	b.n	800a1ee <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a17a:	f043 0301 	orr.w	r3, r3, #1
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10c      	bne.n	800a1ae <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	b672      	cpsid	i
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	b662      	cpsie	i
 800a1a8:	617b      	str	r3, [r7, #20]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	699a      	ldr	r2, [r3, #24]
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	18d1      	adds	r1, r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1bc:	f7ff ff00 	bl	8009fc0 <prvInsertTimerInActiveList>
					break;
 800a1c0:	e015      	b.n	800a1ee <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a1d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d2:	f000 fbc9 	bl	800a968 <vPortFree>
 800a1d6:	e00a      	b.n	800a1ee <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1de:	f023 0301 	bic.w	r3, r3, #1
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1ea:	e000      	b.n	800a1ee <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a1ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1ee:	4b08      	ldr	r3, [pc, #32]	; (800a210 <prvProcessReceivedCommands+0x1cc>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	1d39      	adds	r1, r7, #4
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe f850 	bl	800829c <xQueueReceive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f47f af24 	bne.w	800a04c <prvProcessReceivedCommands+0x8>
	}
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	3730      	adds	r7, #48	; 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20005dfc 	.word	0x20005dfc

0800a214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a21a:	e04a      	b.n	800a2b2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a21c:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a226:	4b2c      	ldr	r3, [pc, #176]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3304      	adds	r3, #4
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fb4d 	bl	80078d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d030      	beq.n	800a2b2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4413      	add	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d90e      	bls.n	800a280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	68ba      	ldr	r2, [r7, #8]
 800a266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3304      	adds	r3, #4
 800a276:	4619      	mov	r1, r3
 800a278:	4610      	mov	r0, r2
 800a27a:	f7fd faf2 	bl	8007862 <vListInsert>
 800a27e:	e018      	b.n	800a2b2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fd56 	bl	8009d3c <xTimerGenericCommand>
 800a290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10c      	bne.n	800a2b2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	b672      	cpsid	i
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	b662      	cpsie	i
 800a2ac:	603b      	str	r3, [r7, #0]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1af      	bne.n	800a21c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a2bc:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2c2:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <prvSwitchTimerLists+0xc8>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a04      	ldr	r2, [pc, #16]	; (800a2d8 <prvSwitchTimerLists+0xc4>)
 800a2c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2ca:	4a04      	ldr	r2, [pc, #16]	; (800a2dc <prvSwitchTimerLists+0xc8>)
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	6013      	str	r3, [r2, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20005df4 	.word	0x20005df4
 800a2dc:	20005df8 	.word	0x20005df8

0800a2e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2e6:	f000 f949 	bl	800a57c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2ea:	4b15      	ldr	r3, [pc, #84]	; (800a340 <prvCheckForValidListAndQueue+0x60>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d120      	bne.n	800a334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2f2:	4814      	ldr	r0, [pc, #80]	; (800a344 <prvCheckForValidListAndQueue+0x64>)
 800a2f4:	f7fd fa64 	bl	80077c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2f8:	4813      	ldr	r0, [pc, #76]	; (800a348 <prvCheckForValidListAndQueue+0x68>)
 800a2fa:	f7fd fa61 	bl	80077c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2fe:	4b13      	ldr	r3, [pc, #76]	; (800a34c <prvCheckForValidListAndQueue+0x6c>)
 800a300:	4a10      	ldr	r2, [pc, #64]	; (800a344 <prvCheckForValidListAndQueue+0x64>)
 800a302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a304:	4b12      	ldr	r3, [pc, #72]	; (800a350 <prvCheckForValidListAndQueue+0x70>)
 800a306:	4a10      	ldr	r2, [pc, #64]	; (800a348 <prvCheckForValidListAndQueue+0x68>)
 800a308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a30a:	2300      	movs	r3, #0
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	4b11      	ldr	r3, [pc, #68]	; (800a354 <prvCheckForValidListAndQueue+0x74>)
 800a310:	4a11      	ldr	r2, [pc, #68]	; (800a358 <prvCheckForValidListAndQueue+0x78>)
 800a312:	2110      	movs	r1, #16
 800a314:	200a      	movs	r0, #10
 800a316:	f7fd fb71 	bl	80079fc <xQueueGenericCreateStatic>
 800a31a:	4603      	mov	r3, r0
 800a31c:	4a08      	ldr	r2, [pc, #32]	; (800a340 <prvCheckForValidListAndQueue+0x60>)
 800a31e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a320:	4b07      	ldr	r3, [pc, #28]	; (800a340 <prvCheckForValidListAndQueue+0x60>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <prvCheckForValidListAndQueue+0x60>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	490b      	ldr	r1, [pc, #44]	; (800a35c <prvCheckForValidListAndQueue+0x7c>)
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fe fbc2 	bl	8008ab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a334:	f000 f956 	bl	800a5e4 <vPortExitCritical>
}
 800a338:	bf00      	nop
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20005dfc 	.word	0x20005dfc
 800a344:	20005dcc 	.word	0x20005dcc
 800a348:	20005de0 	.word	0x20005de0
 800a34c:	20005df4 	.word	0x20005df4
 800a350:	20005df8 	.word	0x20005df8
 800a354:	20005ea8 	.word	0x20005ea8
 800a358:	20005e08 	.word	0x20005e08
 800a35c:	0801b018 	.word	0x0801b018

0800a360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3b04      	subs	r3, #4
 800a370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3b04      	subs	r3, #4
 800a37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f023 0201 	bic.w	r2, r3, #1
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3b04      	subs	r3, #4
 800a38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a390:	4a0c      	ldr	r2, [pc, #48]	; (800a3c4 <pxPortInitialiseStack+0x64>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3b14      	subs	r3, #20
 800a39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3b04      	subs	r3, #4
 800a3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f06f 0202 	mvn.w	r2, #2
 800a3ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3b20      	subs	r3, #32
 800a3b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	0800a3c9 	.word	0x0800a3c9

0800a3c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3d2:	4b14      	ldr	r3, [pc, #80]	; (800a424 <prvTaskExitError+0x5c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3da:	d00c      	beq.n	800a3f6 <prvTaskExitError+0x2e>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	b672      	cpsid	i
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	b662      	cpsie	i
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	e7fe      	b.n	800a3f4 <prvTaskExitError+0x2c>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	b672      	cpsid	i
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	b662      	cpsie	i
 800a40a:	60bb      	str	r3, [r7, #8]
}
 800a40c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a40e:	bf00      	nop
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0fc      	beq.n	800a410 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a416:	bf00      	nop
 800a418:	bf00      	nop
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	20000020 	.word	0x20000020
	...

0800a430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <pxCurrentTCBConst2>)
 800a432:	6819      	ldr	r1, [r3, #0]
 800a434:	6808      	ldr	r0, [r1, #0]
 800a436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43a:	f380 8809 	msr	PSP, r0
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f04f 0000 	mov.w	r0, #0
 800a446:	f380 8811 	msr	BASEPRI, r0
 800a44a:	4770      	bx	lr
 800a44c:	f3af 8000 	nop.w

0800a450 <pxCurrentTCBConst2>:
 800a450:	200058cc 	.word	0x200058cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop

0800a458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a458:	4808      	ldr	r0, [pc, #32]	; (800a47c <prvPortStartFirstTask+0x24>)
 800a45a:	6800      	ldr	r0, [r0, #0]
 800a45c:	6800      	ldr	r0, [r0, #0]
 800a45e:	f380 8808 	msr	MSP, r0
 800a462:	f04f 0000 	mov.w	r0, #0
 800a466:	f380 8814 	msr	CONTROL, r0
 800a46a:	b662      	cpsie	i
 800a46c:	b661      	cpsie	f
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	df00      	svc	0
 800a478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a47a:	bf00      	nop
 800a47c:	e000ed08 	.word	0xe000ed08

0800a480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a486:	4b37      	ldr	r3, [pc, #220]	; (800a564 <xPortStartScheduler+0xe4>)
 800a488:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	22ff      	movs	r2, #255	; 0xff
 800a496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	4b2f      	ldr	r3, [pc, #188]	; (800a568 <xPortStartScheduler+0xe8>)
 800a4ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4ae:	4b2f      	ldr	r3, [pc, #188]	; (800a56c <xPortStartScheduler+0xec>)
 800a4b0:	2207      	movs	r2, #7
 800a4b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4b4:	e009      	b.n	800a4ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a4b6:	4b2d      	ldr	r3, [pc, #180]	; (800a56c <xPortStartScheduler+0xec>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	4a2b      	ldr	r2, [pc, #172]	; (800a56c <xPortStartScheduler+0xec>)
 800a4be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b80      	cmp	r3, #128	; 0x80
 800a4d4:	d0ef      	beq.n	800a4b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4d6:	4b25      	ldr	r3, [pc, #148]	; (800a56c <xPortStartScheduler+0xec>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f1c3 0307 	rsb	r3, r3, #7
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d00c      	beq.n	800a4fc <xPortStartScheduler+0x7c>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	b672      	cpsid	i
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	b662      	cpsie	i
 800a4f6:	60bb      	str	r3, [r7, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4fc:	4b1b      	ldr	r3, [pc, #108]	; (800a56c <xPortStartScheduler+0xec>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	4a1a      	ldr	r2, [pc, #104]	; (800a56c <xPortStartScheduler+0xec>)
 800a504:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a506:	4b19      	ldr	r3, [pc, #100]	; (800a56c <xPortStartScheduler+0xec>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a50e:	4a17      	ldr	r2, [pc, #92]	; (800a56c <xPortStartScheduler+0xec>)
 800a510:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	b2da      	uxtb	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <xPortStartScheduler+0xf0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a14      	ldr	r2, [pc, #80]	; (800a570 <xPortStartScheduler+0xf0>)
 800a520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a524:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <xPortStartScheduler+0xf0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a11      	ldr	r2, [pc, #68]	; (800a570 <xPortStartScheduler+0xf0>)
 800a52c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a530:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a532:	f000 f8dd 	bl	800a6f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <xPortStartScheduler+0xf4>)
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a53c:	f000 f8fc 	bl	800a738 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a540:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <xPortStartScheduler+0xf8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a0c      	ldr	r2, [pc, #48]	; (800a578 <xPortStartScheduler+0xf8>)
 800a546:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a54a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a54c:	f7ff ff84 	bl	800a458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a550:	f7fe ff30 	bl	80093b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a554:	f7ff ff38 	bl	800a3c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	e000e400 	.word	0xe000e400
 800a568:	20005ef8 	.word	0x20005ef8
 800a56c:	20005efc 	.word	0x20005efc
 800a570:	e000ed20 	.word	0xe000ed20
 800a574:	20000020 	.word	0x20000020
 800a578:	e000ef34 	.word	0xe000ef34

0800a57c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	b672      	cpsid	i
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	b662      	cpsie	i
 800a596:	607b      	str	r3, [r7, #4]
}
 800a598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a59a:	4b10      	ldr	r3, [pc, #64]	; (800a5dc <vPortEnterCritical+0x60>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <vPortEnterCritical+0x60>)
 800a5a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5a4:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <vPortEnterCritical+0x60>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d111      	bne.n	800a5d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <vPortEnterCritical+0x64>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00c      	beq.n	800a5d0 <vPortEnterCritical+0x54>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	b672      	cpsid	i
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	b662      	cpsie	i
 800a5ca:	603b      	str	r3, [r7, #0]
}
 800a5cc:	bf00      	nop
 800a5ce:	e7fe      	b.n	800a5ce <vPortEnterCritical+0x52>
	}
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20000020 	.word	0x20000020
 800a5e0:	e000ed04 	.word	0xe000ed04

0800a5e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5ea:	4b13      	ldr	r3, [pc, #76]	; (800a638 <vPortExitCritical+0x54>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10c      	bne.n	800a60c <vPortExitCritical+0x28>
	__asm volatile
 800a5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f6:	b672      	cpsid	i
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	b662      	cpsie	i
 800a606:	607b      	str	r3, [r7, #4]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a60c:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <vPortExitCritical+0x54>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3b01      	subs	r3, #1
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <vPortExitCritical+0x54>)
 800a614:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a616:	4b08      	ldr	r3, [pc, #32]	; (800a638 <vPortExitCritical+0x54>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d105      	bne.n	800a62a <vPortExitCritical+0x46>
 800a61e:	2300      	movs	r3, #0
 800a620:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	f383 8811 	msr	BASEPRI, r3
}
 800a628:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	20000020 	.word	0x20000020
 800a63c:	00000000 	.word	0x00000000

0800a640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a640:	f3ef 8009 	mrs	r0, PSP
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	4b15      	ldr	r3, [pc, #84]	; (800a6a0 <pxCurrentTCBConst>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	f01e 0f10 	tst.w	lr, #16
 800a650:	bf08      	it	eq
 800a652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	6010      	str	r0, [r2, #0]
 800a65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a660:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a664:	b672      	cpsid	i
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	b662      	cpsie	i
 800a674:	f7fe fe9e 	bl	80093b4 <vTaskSwitchContext>
 800a678:	f04f 0000 	mov.w	r0, #0
 800a67c:	f380 8811 	msr	BASEPRI, r0
 800a680:	bc09      	pop	{r0, r3}
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	f01e 0f10 	tst.w	lr, #16
 800a68e:	bf08      	it	eq
 800a690:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a694:	f380 8809 	msr	PSP, r0
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop

0800a6a0 <pxCurrentTCBConst>:
 800a6a0:	200058cc 	.word	0x200058cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop

0800a6a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	b672      	cpsid	i
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	b662      	cpsie	i
 800a6c2:	607b      	str	r3, [r7, #4]
}
 800a6c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6c6:	f7fe fdb9 	bl	800923c <xTaskIncrementTick>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d003      	beq.n	800a6d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <SysTick_Handler+0x44>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	f383 8811 	msr	BASEPRI, r3
}
 800a6e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6e4:	bf00      	nop
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <vPortSetupTimerInterrupt+0x34>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <vPortSetupTimerInterrupt+0x38>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <vPortSetupTimerInterrupt+0x3c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a0a      	ldr	r2, [pc, #40]	; (800a730 <vPortSetupTimerInterrupt+0x40>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	099b      	lsrs	r3, r3, #6
 800a70c:	4a09      	ldr	r2, [pc, #36]	; (800a734 <vPortSetupTimerInterrupt+0x44>)
 800a70e:	3b01      	subs	r3, #1
 800a710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a712:	4b04      	ldr	r3, [pc, #16]	; (800a724 <vPortSetupTimerInterrupt+0x34>)
 800a714:	2207      	movs	r2, #7
 800a716:	601a      	str	r2, [r3, #0]
}
 800a718:	bf00      	nop
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	e000e010 	.word	0xe000e010
 800a728:	e000e018 	.word	0xe000e018
 800a72c:	20000000 	.word	0x20000000
 800a730:	10624dd3 	.word	0x10624dd3
 800a734:	e000e014 	.word	0xe000e014

0800a738 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a738:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a748 <vPortEnableVFP+0x10>
 800a73c:	6801      	ldr	r1, [r0, #0]
 800a73e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a742:	6001      	str	r1, [r0, #0]
 800a744:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a746:	bf00      	nop
 800a748:	e000ed88 	.word	0xe000ed88

0800a74c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a752:	f3ef 8305 	mrs	r3, IPSR
 800a756:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d916      	bls.n	800a78c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a75e:	4a19      	ldr	r2, [pc, #100]	; (800a7c4 <vPortValidateInterruptPriority+0x78>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a768:	4b17      	ldr	r3, [pc, #92]	; (800a7c8 <vPortValidateInterruptPriority+0x7c>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	7afa      	ldrb	r2, [r7, #11]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d20c      	bcs.n	800a78c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	b672      	cpsid	i
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	b662      	cpsie	i
 800a786:	607b      	str	r3, [r7, #4]
}
 800a788:	bf00      	nop
 800a78a:	e7fe      	b.n	800a78a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <vPortValidateInterruptPriority+0x80>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <vPortValidateInterruptPriority+0x84>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d90c      	bls.n	800a7b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	b672      	cpsid	i
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	b662      	cpsie	i
 800a7b0:	603b      	str	r3, [r7, #0]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <vPortValidateInterruptPriority+0x68>
	}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	e000e3f0 	.word	0xe000e3f0
 800a7c8:	20005ef8 	.word	0x20005ef8
 800a7cc:	e000ed0c 	.word	0xe000ed0c
 800a7d0:	20005efc 	.word	0x20005efc

0800a7d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08a      	sub	sp, #40	; 0x28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7e0:	f7fe fc5c 	bl	800909c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7e4:	4b5b      	ldr	r3, [pc, #364]	; (800a954 <pvPortMalloc+0x180>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d101      	bne.n	800a7f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7ec:	f000 f91a 	bl	800aa24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7f0:	4b59      	ldr	r3, [pc, #356]	; (800a958 <pvPortMalloc+0x184>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f040 8092 	bne.w	800a922 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01f      	beq.n	800a844 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a804:	2208      	movs	r2, #8
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4413      	add	r3, r2
 800a80a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f003 0307 	and.w	r3, r3, #7
 800a812:	2b00      	cmp	r3, #0
 800a814:	d016      	beq.n	800a844 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f023 0307 	bic.w	r3, r3, #7
 800a81c:	3308      	adds	r3, #8
 800a81e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00c      	beq.n	800a844 <pvPortMalloc+0x70>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	b672      	cpsid	i
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	b662      	cpsie	i
 800a83e:	617b      	str	r3, [r7, #20]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d06b      	beq.n	800a922 <pvPortMalloc+0x14e>
 800a84a:	4b44      	ldr	r3, [pc, #272]	; (800a95c <pvPortMalloc+0x188>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d866      	bhi.n	800a922 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a854:	4b42      	ldr	r3, [pc, #264]	; (800a960 <pvPortMalloc+0x18c>)
 800a856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a858:	4b41      	ldr	r3, [pc, #260]	; (800a960 <pvPortMalloc+0x18c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a85e:	e004      	b.n	800a86a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	429a      	cmp	r2, r3
 800a872:	d903      	bls.n	800a87c <pvPortMalloc+0xa8>
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f1      	bne.n	800a860 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a87c:	4b35      	ldr	r3, [pc, #212]	; (800a954 <pvPortMalloc+0x180>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a882:	429a      	cmp	r2, r3
 800a884:	d04d      	beq.n	800a922 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2208      	movs	r2, #8
 800a88c:	4413      	add	r3, r2
 800a88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a3b      	ldr	r3, [r7, #32]
 800a896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d921      	bls.n	800a8ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00c      	beq.n	800a8d4 <pvPortMalloc+0x100>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	b672      	cpsid	i
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	b662      	cpsie	i
 800a8ce:	613b      	str	r3, [r7, #16]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8e6:	69b8      	ldr	r0, [r7, #24]
 800a8e8:	f000 f8fe 	bl	800aae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8ec:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <pvPortMalloc+0x188>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	4a19      	ldr	r2, [pc, #100]	; (800a95c <pvPortMalloc+0x188>)
 800a8f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8fa:	4b18      	ldr	r3, [pc, #96]	; (800a95c <pvPortMalloc+0x188>)
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	4b19      	ldr	r3, [pc, #100]	; (800a964 <pvPortMalloc+0x190>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d203      	bcs.n	800a90e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a906:	4b15      	ldr	r3, [pc, #84]	; (800a95c <pvPortMalloc+0x188>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a16      	ldr	r2, [pc, #88]	; (800a964 <pvPortMalloc+0x190>)
 800a90c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	4b11      	ldr	r3, [pc, #68]	; (800a958 <pvPortMalloc+0x184>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	431a      	orrs	r2, r3
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	2200      	movs	r2, #0
 800a920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a922:	f7fe fbc9 	bl	80090b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00c      	beq.n	800a94a <pvPortMalloc+0x176>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	b672      	cpsid	i
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	b662      	cpsie	i
 800a944:	60fb      	str	r3, [r7, #12]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <pvPortMalloc+0x174>
	return pvReturn;
 800a94a:	69fb      	ldr	r3, [r7, #28]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3728      	adds	r7, #40	; 0x28
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20009b08 	.word	0x20009b08
 800a958:	20009b14 	.word	0x20009b14
 800a95c:	20009b0c 	.word	0x20009b0c
 800a960:	20009b00 	.word	0x20009b00
 800a964:	20009b10 	.word	0x20009b10

0800a968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d04c      	beq.n	800aa14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a97a:	2308      	movs	r3, #8
 800a97c:	425b      	negs	r3, r3
 800a97e:	697a      	ldr	r2, [r7, #20]
 800a980:	4413      	add	r3, r2
 800a982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b23      	ldr	r3, [pc, #140]	; (800aa1c <vPortFree+0xb4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4013      	ands	r3, r2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10c      	bne.n	800a9b0 <vPortFree+0x48>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	b672      	cpsid	i
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	b662      	cpsie	i
 800a9aa:	60fb      	str	r3, [r7, #12]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00c      	beq.n	800a9d2 <vPortFree+0x6a>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	b672      	cpsid	i
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	b662      	cpsie	i
 800a9cc:	60bb      	str	r3, [r7, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <vPortFree+0xb4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d019      	beq.n	800aa14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d115      	bne.n	800aa14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	4b0b      	ldr	r3, [pc, #44]	; (800aa1c <vPortFree+0xb4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9f8:	f7fe fb50 	bl	800909c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <vPortFree+0xb8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	4a06      	ldr	r2, [pc, #24]	; (800aa20 <vPortFree+0xb8>)
 800aa08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa0a:	6938      	ldr	r0, [r7, #16]
 800aa0c:	f000 f86c 	bl	800aae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aa10:	f7fe fb52 	bl	80090b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20009b14 	.word	0x20009b14
 800aa20:	20009b0c 	.word	0x20009b0c

0800aa24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <prvHeapInit+0xac>)
 800aa32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00c      	beq.n	800aa58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0307 	bic.w	r3, r3, #7
 800aa4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	4a1f      	ldr	r2, [pc, #124]	; (800aad0 <prvHeapInit+0xac>)
 800aa54:	4413      	add	r3, r2
 800aa56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa5c:	4a1d      	ldr	r2, [pc, #116]	; (800aad4 <prvHeapInit+0xb0>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa62:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <prvHeapInit+0xb0>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa70:	2208      	movs	r2, #8
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0307 	bic.w	r3, r3, #7
 800aa7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4a15      	ldr	r2, [pc, #84]	; (800aad8 <prvHeapInit+0xb4>)
 800aa84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <prvHeapInit+0xb4>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa8e:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <prvHeapInit+0xb4>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aaa4:	4b0c      	ldr	r3, [pc, #48]	; (800aad8 <prvHeapInit+0xb4>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <prvHeapInit+0xb8>)
 800aab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <prvHeapInit+0xbc>)
 800aaba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aabc:	4b09      	ldr	r3, [pc, #36]	; (800aae4 <prvHeapInit+0xc0>)
 800aabe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	20005f00 	.word	0x20005f00
 800aad4:	20009b00 	.word	0x20009b00
 800aad8:	20009b08 	.word	0x20009b08
 800aadc:	20009b10 	.word	0x20009b10
 800aae0:	20009b0c 	.word	0x20009b0c
 800aae4:	20009b14 	.word	0x20009b14

0800aae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaf0:	4b28      	ldr	r3, [pc, #160]	; (800ab94 <prvInsertBlockIntoFreeList+0xac>)
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e002      	b.n	800aafc <prvInsertBlockIntoFreeList+0x14>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d8f7      	bhi.n	800aaf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	4413      	add	r3, r2
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d108      	bne.n	800ab2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	441a      	add	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d118      	bne.n	800ab70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4b15      	ldr	r3, [pc, #84]	; (800ab98 <prvInsertBlockIntoFreeList+0xb0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d00d      	beq.n	800ab66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	441a      	add	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	601a      	str	r2, [r3, #0]
 800ab64:	e008      	b.n	800ab78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <prvInsertBlockIntoFreeList+0xb0>)
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	e003      	b.n	800ab78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d002      	beq.n	800ab86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20009b00 	.word	0x20009b00
 800ab98:	20009b08 	.word	0x20009b08

0800ab9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	330c      	adds	r3, #12
 800abac:	461a      	mov	r2, r3
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f002 f8d5 	bl	800cd60 <tcpip_send_msg_wait_sem>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800abba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <netconn_apimsg+0x2e>
    return apimsg->err;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800abc8:	e001      	b.n	800abce <netconn_apimsg+0x32>
  }
  return err;
 800abca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0
 800abde:	4603      	mov	r3, r0
 800abe0:	603a      	str	r2, [r7, #0]
 800abe2:	71fb      	strb	r3, [r7, #7]
 800abe4:	460b      	mov	r3, r1
 800abe6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800abe8:	79fb      	ldrb	r3, [r7, #7]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	4618      	mov	r0, r3
 800abee:	f000 ff1b 	bl	800ba28 <netconn_alloc>
 800abf2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d054      	beq.n	800aca4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800abfa:	79bb      	ldrb	r3, [r7, #6]
 800abfc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	4619      	mov	r1, r3
 800ac08:	4829      	ldr	r0, [pc, #164]	; (800acb0 <netconn_new_with_proto_and_callback+0xd8>)
 800ac0a:	f7ff ffc7 	bl	800ab9c <netconn_apimsg>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ac14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d043      	beq.n	800aca4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <netconn_new_with_proto_and_callback+0x58>
 800ac24:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ac26:	22a3      	movs	r2, #163	; 0xa3
 800ac28:	4923      	ldr	r1, [pc, #140]	; (800acb8 <netconn_new_with_proto_and_callback+0xe0>)
 800ac2a:	4824      	ldr	r0, [pc, #144]	; (800acbc <netconn_new_with_proto_and_callback+0xe4>)
 800ac2c:	f00d f970 	bl	8017f10 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f00c fe4d 	bl	80178d4 <sys_mbox_valid>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <netconn_new_with_proto_and_callback+0x74>
 800ac40:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ac42:	22a4      	movs	r2, #164	; 0xa4
 800ac44:	491e      	ldr	r1, [pc, #120]	; (800acc0 <netconn_new_with_proto_and_callback+0xe8>)
 800ac46:	481d      	ldr	r0, [pc, #116]	; (800acbc <netconn_new_with_proto_and_callback+0xe4>)
 800ac48:	f00d f962 	bl	8017f10 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	3314      	adds	r3, #20
 800ac50:	4618      	mov	r0, r3
 800ac52:	f00c fe3f 	bl	80178d4 <sys_mbox_valid>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <netconn_new_with_proto_and_callback+0x90>
 800ac5c:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ac5e:	22a6      	movs	r2, #166	; 0xa6
 800ac60:	4918      	ldr	r1, [pc, #96]	; (800acc4 <netconn_new_with_proto_and_callback+0xec>)
 800ac62:	4816      	ldr	r0, [pc, #88]	; (800acbc <netconn_new_with_proto_and_callback+0xe4>)
 800ac64:	f00d f954 	bl	8017f10 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	330c      	adds	r3, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f00c febf 	bl	80179f0 <sys_sem_valid>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d105      	bne.n	800ac84 <netconn_new_with_proto_and_callback+0xac>
 800ac78:	4b0e      	ldr	r3, [pc, #56]	; (800acb4 <netconn_new_with_proto_and_callback+0xdc>)
 800ac7a:	22a9      	movs	r2, #169	; 0xa9
 800ac7c:	4912      	ldr	r1, [pc, #72]	; (800acc8 <netconn_new_with_proto_and_callback+0xf0>)
 800ac7e:	480f      	ldr	r0, [pc, #60]	; (800acbc <netconn_new_with_proto_and_callback+0xe4>)
 800ac80:	f00d f946 	bl	8017f10 <iprintf>
      sys_sem_free(&conn->op_completed);
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	330c      	adds	r3, #12
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f00c fea4 	bl	80179d6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	3310      	adds	r3, #16
 800ac92:	4618      	mov	r0, r3
 800ac94:	f00c fdaa 	bl	80177ec <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ac98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac9a:	2006      	movs	r0, #6
 800ac9c:	f002 ff26 	bl	800daec <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800aca0:	2300      	movs	r3, #0
 800aca2:	e000      	b.n	800aca6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800aca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3730      	adds	r7, #48	; 0x30
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	0800b9fd 	.word	0x0800b9fd
 800acb4:	0801b020 	.word	0x0801b020
 800acb8:	0801b054 	.word	0x0801b054
 800acbc:	0801b078 	.word	0x0801b078
 800acc0:	0801b0a0 	.word	0x0801b0a0
 800acc4:	0801b0b8 	.word	0x0801b0b8
 800acc8:	0801b0dc 	.word	0x0801b0dc

0800accc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b08c      	sub	sp, #48	; 0x30
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <netconn_prepare_delete+0x12>
    return ERR_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	e014      	b.n	800ad08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ace2:	2329      	movs	r3, #41	; 0x29
 800ace4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ace6:	f107 030c 	add.w	r3, r7, #12
 800acea:	4619      	mov	r1, r3
 800acec:	4808      	ldr	r0, [pc, #32]	; (800ad10 <netconn_prepare_delete+0x44>)
 800acee:	f7ff ff55 	bl	800ab9c <netconn_apimsg>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800acf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <netconn_prepare_delete+0x3a>
    return err;
 800ad00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ad04:	e000      	b.n	800ad08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3730      	adds	r7, #48	; 0x30
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	0800bf61 	.word	0x0800bf61

0800ad14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <netconn_delete+0x12>
    return ERR_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	e00d      	b.n	800ad42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff ffd0 	bl	800accc <netconn_prepare_delete>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ad30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <netconn_delete+0x2a>
    netconn_free(conn);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fedf 	bl	800bafc <netconn_free>
  }
  return err;
 800ad3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08e      	sub	sp, #56	; 0x38
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <netconn_bind+0x28>
 800ad60:	4b11      	ldr	r3, [pc, #68]	; (800ada8 <netconn_bind+0x5c>)
 800ad62:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ad66:	4911      	ldr	r1, [pc, #68]	; (800adac <netconn_bind+0x60>)
 800ad68:	4811      	ldr	r0, [pc, #68]	; (800adb0 <netconn_bind+0x64>)
 800ad6a:	f00d f8d1 	bl	8017f10 <iprintf>
 800ad6e:	f06f 030f 	mvn.w	r3, #15
 800ad72:	e015      	b.n	800ada0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ad7a:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <netconn_bind+0x68>)
 800ad7c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ad86:	88fb      	ldrh	r3, [r7, #6]
 800ad88:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ad8a:	f107 0314 	add.w	r3, r7, #20
 800ad8e:	4619      	mov	r1, r3
 800ad90:	4809      	ldr	r0, [pc, #36]	; (800adb8 <netconn_bind+0x6c>)
 800ad92:	f7ff ff03 	bl	800ab9c <netconn_apimsg>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ad9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3738      	adds	r7, #56	; 0x38
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	0801b020 	.word	0x0801b020
 800adac:	0801b158 	.word	0x0801b158
 800adb0:	0801b078 	.word	0x0801b078
 800adb4:	0801e2f0 	.word	0x0801e2f0
 800adb8:	0800c10d 	.word	0x0800c10d

0800adbc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08e      	sub	sp, #56	; 0x38
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d109      	bne.n	800ade4 <netconn_connect+0x28>
 800add0:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <netconn_connect+0x5c>)
 800add2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800add6:	4911      	ldr	r1, [pc, #68]	; (800ae1c <netconn_connect+0x60>)
 800add8:	4811      	ldr	r0, [pc, #68]	; (800ae20 <netconn_connect+0x64>)
 800adda:	f00d f899 	bl	8017f10 <iprintf>
 800adde:	f06f 030f 	mvn.w	r3, #15
 800ade2:	e015      	b.n	800ae10 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800adea:	4b0e      	ldr	r3, [pc, #56]	; (800ae24 <netconn_connect+0x68>)
 800adec:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	4619      	mov	r1, r3
 800ae00:	4809      	ldr	r0, [pc, #36]	; (800ae28 <netconn_connect+0x6c>)
 800ae02:	f7ff fecb 	bl	800ab9c <netconn_apimsg>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ae0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3738      	adds	r7, #56	; 0x38
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	0801b020 	.word	0x0801b020
 800ae1c:	0801b194 	.word	0x0801b194
 800ae20:	0801b078 	.word	0x0801b078
 800ae24:	0801e2f0 	.word	0x0801e2f0
 800ae28:	0800c285 	.word	0x0800c285

0800ae2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d109      	bne.n	800ae58 <netconn_recv_data+0x2c>
 800ae44:	4b4d      	ldr	r3, [pc, #308]	; (800af7c <netconn_recv_data+0x150>)
 800ae46:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ae4a:	494d      	ldr	r1, [pc, #308]	; (800af80 <netconn_recv_data+0x154>)
 800ae4c:	484d      	ldr	r0, [pc, #308]	; (800af84 <netconn_recv_data+0x158>)
 800ae4e:	f00d f85f 	bl	8017f10 <iprintf>
 800ae52:	f06f 030f 	mvn.w	r3, #15
 800ae56:	e08d      	b.n	800af74 <netconn_recv_data+0x148>
  *new_buf = NULL;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <netconn_recv_data+0x4c>
 800ae64:	4b45      	ldr	r3, [pc, #276]	; (800af7c <netconn_recv_data+0x150>)
 800ae66:	f240 224a 	movw	r2, #586	; 0x24a
 800ae6a:	4947      	ldr	r1, [pc, #284]	; (800af88 <netconn_recv_data+0x15c>)
 800ae6c:	4845      	ldr	r0, [pc, #276]	; (800af84 <netconn_recv_data+0x158>)
 800ae6e:	f00d f84f 	bl	8017f10 <iprintf>
 800ae72:	f06f 030f 	mvn.w	r3, #15
 800ae76:	e07d      	b.n	800af74 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3310      	adds	r3, #16
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f00c fd29 	bl	80178d4 <sys_mbox_valid>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10e      	bne.n	800aea6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 faae 	bl	800b3ea <netconn_err>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ae92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ae9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae9e:	e069      	b.n	800af74 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 800aea0:	f06f 030a 	mvn.w	r3, #10
 800aea4:	e066      	b.n	800af74 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	7f1b      	ldrb	r3, [r3, #28]
 800aeaa:	f003 0302 	and.w	r3, r3, #2
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10f      	bne.n	800aed2 <netconn_recv_data+0xa6>
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	7f1b      	ldrb	r3, [r3, #28]
 800aec0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d104      	bne.n	800aed2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d023      	beq.n	800af1a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3310      	adds	r3, #16
 800aed6:	f107 0214 	add.w	r2, r7, #20
 800aeda:	4611      	mov	r1, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f00c fce2 	bl	80178a6 <sys_arch_mbox_tryfetch>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee8:	d11f      	bne.n	800af2a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fa7d 	bl	800b3ea <netconn_err>
 800aef0:	4603      	mov	r3, r0
 800aef2:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 800aef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800aefc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af00:	e038      	b.n	800af74 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	7f1b      	ldrb	r3, [r3, #28]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800af0e:	f06f 030a 	mvn.w	r3, #10
 800af12:	e02f      	b.n	800af74 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 800af14:	f06f 0306 	mvn.w	r3, #6
 800af18:	e02c      	b.n	800af74 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3310      	adds	r3, #16
 800af1e:	f107 0114 	add.w	r1, r7, #20
 800af22:	2200      	movs	r2, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f00c fc8d 	bl	8017844 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f107 0213 	add.w	r2, r7, #19
 800af30:	4611      	mov	r1, r2
 800af32:	4618      	mov	r0, r3
 800af34:	f000 faaa 	bl	800b48c <lwip_netconn_is_err_msg>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d009      	beq.n	800af52 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800af3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af42:	f113 0f0f 	cmn.w	r3, #15
 800af46:	d101      	bne.n	800af4c <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	e013      	b.n	800af74 <netconn_recv_data+0x148>
      }
      return err;
 800af4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af50:	e010      	b.n	800af74 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	891b      	ldrh	r3, [r3, #8]
 800af56:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <netconn_recv_data+0x140>
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	8bba      	ldrh	r2, [r7, #28]
 800af66:	2101      	movs	r1, #1
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3720      	adds	r7, #32
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	0801b020 	.word	0x0801b020
 800af80:	0801b238 	.word	0x0801b238
 800af84:	0801b078 	.word	0x0801b078
 800af88:	0801b258 	.word	0x0801b258

0800af8c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <netconn_tcp_recvd_msg+0x1e>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afa6:	2b10      	cmp	r3, #16
 800afa8:	d009      	beq.n	800afbe <netconn_tcp_recvd_msg+0x32>
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <netconn_tcp_recvd_msg+0x50>)
 800afac:	f240 22a7 	movw	r2, #679	; 0x2a7
 800afb0:	490b      	ldr	r1, [pc, #44]	; (800afe0 <netconn_tcp_recvd_msg+0x54>)
 800afb2:	480c      	ldr	r0, [pc, #48]	; (800afe4 <netconn_tcp_recvd_msg+0x58>)
 800afb4:	f00c ffac 	bl	8017f10 <iprintf>
 800afb8:	f06f 030f 	mvn.w	r3, #15
 800afbc:	e00a      	b.n	800afd4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	4806      	ldr	r0, [pc, #24]	; (800afe8 <netconn_tcp_recvd_msg+0x5c>)
 800afce:	f7ff fde5 	bl	800ab9c <netconn_apimsg>
 800afd2:	4603      	mov	r3, r0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	0801b020 	.word	0x0801b020
 800afe0:	0801b274 	.word	0x0801b274
 800afe4:	0801b078 	.word	0x0801b078
 800afe8:	0800c3e1 	.word	0x0800c3e1

0800afec <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b090      	sub	sp, #64	; 0x40
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	4613      	mov	r3, r2
 800aff8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3310      	adds	r3, #16
 800affe:	4618      	mov	r0, r3
 800b000:	f00c fc68 	bl	80178d4 <sys_mbox_valid>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800b00a:	f06f 030a 	mvn.w	r3, #10
 800b00e:	e06d      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	7f1b      	ldrb	r3, [r3, #28]
 800b014:	b25b      	sxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	da07      	bge.n	800b02a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	7f1b      	ldrb	r3, [r3, #28]
 800b01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b022:	b2da      	uxtb	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800b028:	e039      	b.n	800b09e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	461a      	mov	r2, r3
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fefb 	bl	800ae2c <netconn_recv_data>
 800b036:	4603      	mov	r3, r0
 800b038:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800b03c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800b044:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b048:	e050      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	f003 0308 	and.w	r3, r3, #8
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10e      	bne.n	800b078 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <netconn_recv_data_tcp+0x7a>
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	891b      	ldrh	r3, [r3, #8]
 800b064:	e000      	b.n	800b068 <netconn_recv_data_tcp+0x7c>
 800b066:	2301      	movs	r3, #1
 800b068:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800b06a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b06c:	f107 0214 	add.w	r2, r7, #20
 800b070:	4619      	mov	r1, r3
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff ff8a 	bl	800af8c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d134      	bne.n	800b0e8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	f003 0310 	and.w	r3, r3, #16
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	7f1b      	ldrb	r3, [r3, #28]
 800b08c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b090:	b2da      	uxtb	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800b096:	f06f 0306 	mvn.w	r3, #6
 800b09a:	e027      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800b09c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d005      	beq.n	800b0b2 <netconn_recv_data_tcp+0xc6>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10f      	bne.n	800b0da <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f995 	bl	800b3ea <netconn_err>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800b0c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <netconn_recv_data_tcp+0xe8>
          return err;
 800b0ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0d2:	e00b      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800b0d4:	f06f 030d 	mvn.w	r3, #13
 800b0d8:	e008      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800b0da:	2101      	movs	r1, #1
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f947 	bl	800b370 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b0e2:	f06f 030e 	mvn.w	r3, #14
 800b0e6:	e001      	b.n	800b0ec <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b0e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3740      	adds	r7, #64	; 0x40
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <netconn_recv+0x28>
 800b108:	4b2b      	ldr	r3, [pc, #172]	; (800b1b8 <netconn_recv+0xc4>)
 800b10a:	f240 3263 	movw	r2, #867	; 0x363
 800b10e:	492b      	ldr	r1, [pc, #172]	; (800b1bc <netconn_recv+0xc8>)
 800b110:	482b      	ldr	r0, [pc, #172]	; (800b1c0 <netconn_recv+0xcc>)
 800b112:	f00c fefd 	bl	8017f10 <iprintf>
 800b116:	f06f 030f 	mvn.w	r3, #15
 800b11a:	e049      	b.n	800b1b0 <netconn_recv+0xbc>
  *new_buf = NULL;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d109      	bne.n	800b13c <netconn_recv+0x48>
 800b128:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <netconn_recv+0xc4>)
 800b12a:	f240 3265 	movw	r2, #869	; 0x365
 800b12e:	4925      	ldr	r1, [pc, #148]	; (800b1c4 <netconn_recv+0xd0>)
 800b130:	4823      	ldr	r0, [pc, #140]	; (800b1c0 <netconn_recv+0xcc>)
 800b132:	f00c feed 	bl	8017f10 <iprintf>
 800b136:	f06f 030f 	mvn.w	r3, #15
 800b13a:	e039      	b.n	800b1b0 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b140:	2005      	movs	r0, #5
 800b142:	f002 fc5d 	bl	800da00 <memp_malloc>
 800b146:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <netconn_recv+0x60>
      return ERR_MEM;
 800b14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b152:	e02d      	b.n	800b1b0 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	2200      	movs	r2, #0
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff ff45 	bl	800afec <netconn_recv_data_tcp>
 800b162:	4603      	mov	r3, r0
 800b164:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b166:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d006      	beq.n	800b17c <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 800b16e:	6979      	ldr	r1, [r7, #20]
 800b170:	2005      	movs	r0, #5
 800b172:	f002 fcbb 	bl	800daec <memp_free>
      return err;
 800b176:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b17a:	e019      	b.n	800b1b0 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <netconn_recv+0x9c>
 800b182:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <netconn_recv+0xc4>)
 800b184:	f240 3279 	movw	r2, #889	; 0x379
 800b188:	490f      	ldr	r1, [pc, #60]	; (800b1c8 <netconn_recv+0xd4>)
 800b18a:	480d      	ldr	r0, [pc, #52]	; (800b1c0 <netconn_recv+0xcc>)
 800b18c:	f00c fec0 	bl	8017f10 <iprintf>

    buf->p = p;
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b1ae:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	0801b020 	.word	0x0801b020
 800b1bc:	0801b238 	.word	0x0801b238
 800b1c0:	0801b078 	.word	0x0801b078
 800b1c4:	0801b258 	.word	0x0801b258
 800b1c8:	0801b2c4 	.word	0x0801b2c4

0800b1cc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b1e2:	78fa      	ldrb	r2, [r7, #3]
 800b1e4:	f107 0110 	add.w	r1, r7, #16
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f805 	bl	800b200 <netconn_write_vectors_partly>
 800b1f6:	4603      	mov	r3, r0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b092      	sub	sp, #72	; 0x48
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	4611      	mov	r1, r2
 800b20c:	461a      	mov	r2, r3
 800b20e:	460b      	mov	r3, r1
 800b210:	80fb      	strh	r3, [r7, #6]
 800b212:	4613      	mov	r3, r2
 800b214:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d109      	bne.n	800b230 <netconn_write_vectors_partly+0x30>
 800b21c:	4b4e      	ldr	r3, [pc, #312]	; (800b358 <netconn_write_vectors_partly+0x158>)
 800b21e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b222:	494e      	ldr	r1, [pc, #312]	; (800b35c <netconn_write_vectors_partly+0x15c>)
 800b224:	484e      	ldr	r0, [pc, #312]	; (800b360 <netconn_write_vectors_partly+0x160>)
 800b226:	f00c fe73 	bl	8017f10 <iprintf>
 800b22a:	f06f 030f 	mvn.w	r3, #15
 800b22e:	e08e      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b238:	2b10      	cmp	r3, #16
 800b23a:	d009      	beq.n	800b250 <netconn_write_vectors_partly+0x50>
 800b23c:	4b46      	ldr	r3, [pc, #280]	; (800b358 <netconn_write_vectors_partly+0x158>)
 800b23e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b242:	4948      	ldr	r1, [pc, #288]	; (800b364 <netconn_write_vectors_partly+0x164>)
 800b244:	4846      	ldr	r0, [pc, #280]	; (800b360 <netconn_write_vectors_partly+0x160>)
 800b246:	f00c fe63 	bl	8017f10 <iprintf>
 800b24a:	f06f 0305 	mvn.w	r3, #5
 800b24e:	e07e      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	7f1b      	ldrb	r3, [r3, #28]
 800b254:	f003 0302 	and.w	r3, r3, #2
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d104      	bne.n	800b266 <netconn_write_vectors_partly+0x66>
 800b25c:	797b      	ldrb	r3, [r7, #5]
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <netconn_write_vectors_partly+0x6a>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <netconn_write_vectors_partly+0x6c>
 800b26a:	2300      	movs	r3, #0
 800b26c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <netconn_write_vectors_partly+0x84>
 800b278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d102      	bne.n	800b284 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b27e:	f06f 0305 	mvn.w	r3, #5
 800b282:	e064      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b288:	2300      	movs	r3, #0
 800b28a:	643b      	str	r3, [r7, #64]	; 0x40
 800b28c:	e015      	b.n	800b2ba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	4413      	add	r3, r2
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b29a:	4413      	add	r3, r2
 800b29c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a0:	00db      	lsls	r3, r3, #3
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d202      	bcs.n	800b2b4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b2ae:	f06f 0305 	mvn.w	r3, #5
 800b2b2:	e04c      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	dbe5      	blt.n	800b28e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e040      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	da0a      	bge.n	800b2e8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b2d8:	f06f 0305 	mvn.w	r3, #5
 800b2dc:	e037      	b.n	800b34e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b2de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b2e2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b2f0:	88fb      	ldrh	r3, [r7, #6]
 800b2f2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b2f8:	797b      	ldrb	r3, [r7, #5]
 800b2fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b300:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b306:	f107 0314 	add.w	r3, r7, #20
 800b30a:	4619      	mov	r1, r3
 800b30c:	4816      	ldr	r0, [pc, #88]	; (800b368 <netconn_write_vectors_partly+0x168>)
 800b30e:	f7ff fc45 	bl	800ab9c <netconn_apimsg>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b318:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d114      	bne.n	800b34a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b32c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b338:	429a      	cmp	r2, r3
 800b33a:	d006      	beq.n	800b34a <netconn_write_vectors_partly+0x14a>
 800b33c:	4b06      	ldr	r3, [pc, #24]	; (800b358 <netconn_write_vectors_partly+0x158>)
 800b33e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b342:	490a      	ldr	r1, [pc, #40]	; (800b36c <netconn_write_vectors_partly+0x16c>)
 800b344:	4806      	ldr	r0, [pc, #24]	; (800b360 <netconn_write_vectors_partly+0x160>)
 800b346:	f00c fde3 	bl	8017f10 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b34a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3748      	adds	r7, #72	; 0x48
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	0801b020 	.word	0x0801b020
 800b35c:	0801b2ec 	.word	0x0801b2ec
 800b360:	0801b078 	.word	0x0801b078
 800b364:	0801b308 	.word	0x0801b308
 800b368:	0800c7e5 	.word	0x0800c7e5
 800b36c:	0801b32c 	.word	0x0801b32c

0800b370 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08c      	sub	sp, #48	; 0x30
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <netconn_close_shutdown+0x26>
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <netconn_close_shutdown+0x50>)
 800b384:	f240 4247 	movw	r2, #1095	; 0x447
 800b388:	490e      	ldr	r1, [pc, #56]	; (800b3c4 <netconn_close_shutdown+0x54>)
 800b38a:	480f      	ldr	r0, [pc, #60]	; (800b3c8 <netconn_close_shutdown+0x58>)
 800b38c:	f00c fdc0 	bl	8017f10 <iprintf>
 800b390:	f06f 030f 	mvn.w	r3, #15
 800b394:	e010      	b.n	800b3b8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b39e:	2329      	movs	r3, #41	; 0x29
 800b3a0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b3a2:	f107 030c 	add.w	r3, r7, #12
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4808      	ldr	r0, [pc, #32]	; (800b3cc <netconn_close_shutdown+0x5c>)
 800b3aa:	f7ff fbf7 	bl	800ab9c <netconn_apimsg>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b3b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3730      	adds	r7, #48	; 0x30
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	0801b020 	.word	0x0801b020
 800b3c4:	0801b350 	.word	0x0801b350
 800b3c8:	0801b078 	.word	0x0801b078
 800b3cc:	0800c8f9 	.word	0x0800c8f9

0800b3d0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b3d8:	2103      	movs	r1, #3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff ffc8 	bl	800b370 <netconn_close_shutdown>
 800b3e0:	4603      	mov	r3, r0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d101      	bne.n	800b3fc <netconn_err+0x12>
    return ERR_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e00d      	b.n	800b418 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b3fc:	f00c fb74 	bl	8017ae8 <sys_arch_protect>
 800b400:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7a1b      	ldrb	r3, [r3, #8]
 800b406:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f00c fb78 	bl	8017b04 <sys_arch_unprotect>
  return err;
 800b414:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b42a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b42e:	f113 0f0d 	cmn.w	r3, #13
 800b432:	d009      	beq.n	800b448 <lwip_netconn_err_to_msg+0x28>
 800b434:	f113 0f0d 	cmn.w	r3, #13
 800b438:	dc0c      	bgt.n	800b454 <lwip_netconn_err_to_msg+0x34>
 800b43a:	f113 0f0f 	cmn.w	r3, #15
 800b43e:	d007      	beq.n	800b450 <lwip_netconn_err_to_msg+0x30>
 800b440:	f113 0f0e 	cmn.w	r3, #14
 800b444:	d002      	beq.n	800b44c <lwip_netconn_err_to_msg+0x2c>
 800b446:	e005      	b.n	800b454 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <lwip_netconn_err_to_msg+0x54>)
 800b44a:	e00e      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <lwip_netconn_err_to_msg+0x58>)
 800b44e:	e00c      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <lwip_netconn_err_to_msg+0x5c>)
 800b452:	e00a      	b.n	800b46a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <lwip_netconn_err_to_msg+0x48>
 800b45c:	4b08      	ldr	r3, [pc, #32]	; (800b480 <lwip_netconn_err_to_msg+0x60>)
 800b45e:	227d      	movs	r2, #125	; 0x7d
 800b460:	4908      	ldr	r1, [pc, #32]	; (800b484 <lwip_netconn_err_to_msg+0x64>)
 800b462:	4809      	ldr	r0, [pc, #36]	; (800b488 <lwip_netconn_err_to_msg+0x68>)
 800b464:	f00c fd54 	bl	8017f10 <iprintf>
      return NULL;
 800b468:	2300      	movs	r3, #0
  }
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	0801e1ec 	.word	0x0801e1ec
 800b478:	0801e1ed 	.word	0x0801e1ed
 800b47c:	0801e1ee 	.word	0x0801e1ee
 800b480:	0801b36c 	.word	0x0801b36c
 800b484:	0801b3a0 	.word	0x0801b3a0
 800b488:	0801b3b0 	.word	0x0801b3b0

0800b48c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <lwip_netconn_is_err_msg+0x1c>
 800b49c:	4b12      	ldr	r3, [pc, #72]	; (800b4e8 <lwip_netconn_is_err_msg+0x5c>)
 800b49e:	2285      	movs	r2, #133	; 0x85
 800b4a0:	4912      	ldr	r1, [pc, #72]	; (800b4ec <lwip_netconn_is_err_msg+0x60>)
 800b4a2:	4813      	ldr	r0, [pc, #76]	; (800b4f0 <lwip_netconn_is_err_msg+0x64>)
 800b4a4:	f00c fd34 	bl	8017f10 <iprintf>

  if (msg == &netconn_aborted) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a12      	ldr	r2, [pc, #72]	; (800b4f4 <lwip_netconn_is_err_msg+0x68>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d104      	bne.n	800b4ba <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	22f3      	movs	r2, #243	; 0xf3
 800b4b4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e012      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a0e      	ldr	r2, [pc, #56]	; (800b4f8 <lwip_netconn_is_err_msg+0x6c>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d104      	bne.n	800b4cc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	22f2      	movs	r2, #242	; 0xf2
 800b4c6:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e009      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a0b      	ldr	r2, [pc, #44]	; (800b4fc <lwip_netconn_is_err_msg+0x70>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d104      	bne.n	800b4de <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	22f1      	movs	r2, #241	; 0xf1
 800b4d8:	701a      	strb	r2, [r3, #0]
    return 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0801b36c 	.word	0x0801b36c
 800b4ec:	0801b3d8 	.word	0x0801b3d8
 800b4f0:	0801b3b0 	.word	0x0801b3b0
 800b4f4:	0801e1ec 	.word	0x0801e1ec
 800b4f8:	0801e1ed 	.word	0x0801e1ed
 800b4fc:	0801e1ee 	.word	0x0801e1ee

0800b500 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <recv_tcp+0x22>
 800b514:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <recv_tcp+0xf0>)
 800b516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b51a:	4936      	ldr	r1, [pc, #216]	; (800b5f4 <recv_tcp+0xf4>)
 800b51c:	4836      	ldr	r0, [pc, #216]	; (800b5f8 <recv_tcp+0xf8>)
 800b51e:	f00c fcf7 	bl	8017f10 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d106      	bne.n	800b536 <recv_tcp+0x36>
 800b528:	4b31      	ldr	r3, [pc, #196]	; (800b5f0 <recv_tcp+0xf0>)
 800b52a:	f240 122d 	movw	r2, #301	; 0x12d
 800b52e:	4933      	ldr	r1, [pc, #204]	; (800b5fc <recv_tcp+0xfc>)
 800b530:	4831      	ldr	r0, [pc, #196]	; (800b5f8 <recv_tcp+0xf8>)
 800b532:	f00c fced 	bl	8017f10 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d006      	beq.n	800b54c <recv_tcp+0x4c>
 800b53e:	4b2c      	ldr	r3, [pc, #176]	; (800b5f0 <recv_tcp+0xf0>)
 800b540:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b544:	492e      	ldr	r1, [pc, #184]	; (800b600 <recv_tcp+0x100>)
 800b546:	482c      	ldr	r0, [pc, #176]	; (800b5f8 <recv_tcp+0xf8>)
 800b548:	f00c fce2 	bl	8017f10 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <recv_tcp+0x5c>
    return ERR_VAL;
 800b556:	f06f 0305 	mvn.w	r3, #5
 800b55a:	e045      	b.n	800b5e8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	429a      	cmp	r2, r3
 800b564:	d006      	beq.n	800b574 <recv_tcp+0x74>
 800b566:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <recv_tcp+0xf0>)
 800b568:	f240 1235 	movw	r2, #309	; 0x135
 800b56c:	4925      	ldr	r1, [pc, #148]	; (800b604 <recv_tcp+0x104>)
 800b56e:	4822      	ldr	r0, [pc, #136]	; (800b5f8 <recv_tcp+0xf8>)
 800b570:	f00c fcce 	bl	8017f10 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	3310      	adds	r3, #16
 800b578:	4618      	mov	r0, r3
 800b57a:	f00c f9ab 	bl	80178d4 <sys_mbox_valid>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10d      	bne.n	800b5a0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d008      	beq.n	800b59c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	891b      	ldrh	r3, [r3, #8]
 800b58e:	4619      	mov	r1, r3
 800b590:	68b8      	ldr	r0, [r7, #8]
 800b592:	f004 f839 	bl	800f608 <tcp_recved>
      pbuf_free(p);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f003 f948 	bl	800e82c <pbuf_free>
    }
    return ERR_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	e023      	b.n	800b5e8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <recv_tcp+0xb2>
    msg = p;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	891b      	ldrh	r3, [r3, #8]
 800b5ae:	83fb      	strh	r3, [r7, #30]
 800b5b0:	e003      	b.n	800b5ba <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <recv_tcp+0x108>)
 800b5b4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	3310      	adds	r3, #16
 800b5be:	69b9      	ldr	r1, [r7, #24]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f00c f925 	bl	8017810 <sys_mbox_trypost>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b5cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5d0:	e00a      	b.n	800b5e8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <recv_tcp+0xe6>
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5de:	8bfa      	ldrh	r2, [r7, #30]
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6978      	ldr	r0, [r7, #20]
 800b5e4:	4798      	blx	r3
  }

  return ERR_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3720      	adds	r7, #32
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	0801b36c 	.word	0x0801b36c
 800b5f4:	0801b3e4 	.word	0x0801b3e4
 800b5f8:	0801b3b0 	.word	0x0801b3b0
 800b5fc:	0801b408 	.word	0x0801b408
 800b600:	0801b428 	.word	0x0801b428
 800b604:	0801b440 	.word	0x0801b440
 800b608:	0801e1ee 	.word	0x0801e1ee

0800b60c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <poll_tcp+0x22>
 800b620:	4b29      	ldr	r3, [pc, #164]	; (800b6c8 <poll_tcp+0xbc>)
 800b622:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b626:	4929      	ldr	r1, [pc, #164]	; (800b6cc <poll_tcp+0xc0>)
 800b628:	4829      	ldr	r0, [pc, #164]	; (800b6d0 <poll_tcp+0xc4>)
 800b62a:	f00c fc71 	bl	8017f10 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	785b      	ldrb	r3, [r3, #1]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d104      	bne.n	800b640 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b636:	2101      	movs	r1, #1
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f000 ff07 	bl	800c44c <lwip_netconn_do_writemore>
 800b63e:	e016      	b.n	800b66e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	785b      	ldrb	r3, [r3, #1]
 800b644:	2b04      	cmp	r3, #4
 800b646:	d112      	bne.n	800b66e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00a      	beq.n	800b666 <poll_tcp+0x5a>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	7a5b      	ldrb	r3, [r3, #9]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	7a5a      	ldrb	r2, [r3, #9]
 800b660:	3a01      	subs	r2, #1
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b666:	2101      	movs	r1, #1
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 fb0f 	bl	800bc8c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	7f1b      	ldrb	r3, [r3, #28]
 800b672:	f003 0310 	and.w	r3, r3, #16
 800b676:	2b00      	cmp	r3, #0
 800b678:	d021      	beq.n	800b6be <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01d      	beq.n	800b6be <poll_tcp+0xb2>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b68a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b68e:	d316      	bcc.n	800b6be <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b698:	2b04      	cmp	r3, #4
 800b69a:	d810      	bhi.n	800b6be <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	7f1b      	ldrb	r3, [r3, #28]
 800b6a0:	f023 0310 	bic.w	r3, r3, #16
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <poll_tcp+0xb2>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2102      	movs	r1, #2
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	0801b36c 	.word	0x0801b36c
 800b6cc:	0801b460 	.word	0x0801b460
 800b6d0:	0801b3b0 	.word	0x0801b3b0

0800b6d4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d106      	bne.n	800b6fa <sent_tcp+0x26>
 800b6ec:	4b20      	ldr	r3, [pc, #128]	; (800b770 <sent_tcp+0x9c>)
 800b6ee:	f240 1293 	movw	r2, #403	; 0x193
 800b6f2:	4920      	ldr	r1, [pc, #128]	; (800b774 <sent_tcp+0xa0>)
 800b6f4:	4820      	ldr	r0, [pc, #128]	; (800b778 <sent_tcp+0xa4>)
 800b6f6:	f00c fc0b 	bl	8017f10 <iprintf>

  if (conn) {
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d032      	beq.n	800b766 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	785b      	ldrb	r3, [r3, #1]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d104      	bne.n	800b712 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b708:	2101      	movs	r1, #1
 800b70a:	6978      	ldr	r0, [r7, #20]
 800b70c:	f000 fe9e 	bl	800c44c <lwip_netconn_do_writemore>
 800b710:	e007      	b.n	800b722 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	785b      	ldrb	r3, [r3, #1]
 800b716:	2b04      	cmp	r3, #4
 800b718:	d103      	bne.n	800b722 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b71a:	2101      	movs	r1, #1
 800b71c:	6978      	ldr	r0, [r7, #20]
 800b71e:	f000 fab5 	bl	800bc8c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d01d      	beq.n	800b766 <sent_tcp+0x92>
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b732:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b736:	d316      	bcc.n	800b766 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b740:	2b04      	cmp	r3, #4
 800b742:	d810      	bhi.n	800b766 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	7f1b      	ldrb	r3, [r3, #28]
 800b748:	f023 0310 	bic.w	r3, r3, #16
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <sent_tcp+0x92>
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	88fa      	ldrh	r2, [r7, #6]
 800b760:	2102      	movs	r1, #2
 800b762:	6978      	ldr	r0, [r7, #20]
 800b764:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	0801b36c 	.word	0x0801b36c
 800b774:	0801b460 	.word	0x0801b460
 800b778:	0801b3b0 	.word	0x0801b3b0

0800b77c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <err_tcp+0x24>
 800b792:	4b5f      	ldr	r3, [pc, #380]	; (800b910 <err_tcp+0x194>)
 800b794:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b798:	495e      	ldr	r1, [pc, #376]	; (800b914 <err_tcp+0x198>)
 800b79a:	485f      	ldr	r0, [pc, #380]	; (800b918 <err_tcp+0x19c>)
 800b79c:	f00c fbb8 	bl	8017f10 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b7a0:	f00c f9a2 	bl	8017ae8 <sys_arch_protect>
 800b7a4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	78fa      	ldrb	r2, [r7, #3]
 800b7b0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	7f1b      	ldrb	r3, [r3, #28]
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b7cc:	69b8      	ldr	r0, [r7, #24]
 800b7ce:	f00c f999 	bl	8017b04 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <err_tcp+0x6a>
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2104      	movs	r1, #4
 800b7e2:	69f8      	ldr	r0, [r7, #28]
 800b7e4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <err_tcp+0x7e>
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	69f8      	ldr	r0, [r7, #28]
 800b7f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d005      	beq.n	800b80e <err_tcp+0x92>
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2200      	movs	r2, #0
 800b808:	2102      	movs	r1, #2
 800b80a:	69f8      	ldr	r0, [r7, #28]
 800b80c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b80e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fe04 	bl	800b420 <lwip_netconn_err_to_msg>
 800b818:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	3310      	adds	r3, #16
 800b81e:	4618      	mov	r0, r3
 800b820:	f00c f858 	bl	80178d4 <sys_mbox_valid>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	3310      	adds	r3, #16
 800b82e:	6939      	ldr	r1, [r7, #16]
 800b830:	4618      	mov	r0, r3
 800b832:	f00b ffed 	bl	8017810 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	3314      	adds	r3, #20
 800b83a:	4618      	mov	r0, r3
 800b83c:	f00c f84a 	bl	80178d4 <sys_mbox_valid>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d005      	beq.n	800b852 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	3314      	adds	r3, #20
 800b84a:	6939      	ldr	r1, [r7, #16]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f00b ffdf 	bl	8017810 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d005      	beq.n	800b864 <err_tcp+0xe8>
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	d002      	beq.n	800b864 <err_tcp+0xe8>
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	2b03      	cmp	r3, #3
 800b862:	d143      	bne.n	800b8ec <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	7f1b      	ldrb	r3, [r3, #28]
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bf14      	ite	ne
 800b870:	2301      	movne	r3, #1
 800b872:	2300      	moveq	r3, #0
 800b874:	b2db      	uxtb	r3, r3
 800b876:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	7f1b      	ldrb	r3, [r3, #28]
 800b87c:	f023 0304 	bic.w	r3, r3, #4
 800b880:	b2da      	uxtb	r2, r3
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d13b      	bne.n	800b904 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	6a1b      	ldr	r3, [r3, #32]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <err_tcp+0x126>
 800b894:	4b1e      	ldr	r3, [pc, #120]	; (800b910 <err_tcp+0x194>)
 800b896:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b89a:	4920      	ldr	r1, [pc, #128]	; (800b91c <err_tcp+0x1a0>)
 800b89c:	481e      	ldr	r0, [pc, #120]	; (800b918 <err_tcp+0x19c>)
 800b89e:	f00c fb37 	bl	8017f10 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d104      	bne.n	800b8b2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	711a      	strb	r2, [r3, #4]
 800b8b0:	e003      	b.n	800b8ba <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b8c4:	68b8      	ldr	r0, [r7, #8]
 800b8c6:	f00c f893 	bl	80179f0 <sys_sem_valid>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d106      	bne.n	800b8de <err_tcp+0x162>
 800b8d0:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <err_tcp+0x194>)
 800b8d2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b8d6:	4912      	ldr	r1, [pc, #72]	; (800b920 <err_tcp+0x1a4>)
 800b8d8:	480f      	ldr	r0, [pc, #60]	; (800b918 <err_tcp+0x19c>)
 800b8da:	f00c fb19 	bl	8017f10 <iprintf>
      conn->current_msg = NULL;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f00c f869 	bl	80179bc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b8ea:	e00b      	b.n	800b904 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d008      	beq.n	800b906 <err_tcp+0x18a>
 800b8f4:	4b06      	ldr	r3, [pc, #24]	; (800b910 <err_tcp+0x194>)
 800b8f6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b8fa:	490a      	ldr	r1, [pc, #40]	; (800b924 <err_tcp+0x1a8>)
 800b8fc:	4806      	ldr	r0, [pc, #24]	; (800b918 <err_tcp+0x19c>)
 800b8fe:	f00c fb07 	bl	8017f10 <iprintf>
  }
}
 800b902:	e000      	b.n	800b906 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b904:	bf00      	nop
}
 800b906:	bf00      	nop
 800b908:	3720      	adds	r7, #32
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	0801b36c 	.word	0x0801b36c
 800b914:	0801b460 	.word	0x0801b460
 800b918:	0801b3b0 	.word	0x0801b3b0
 800b91c:	0801b470 	.word	0x0801b470
 800b920:	0801b48c 	.word	0x0801b48c
 800b924:	0801b4a8 	.word	0x0801b4a8

0800b928 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f004 fe43 	bl	80105c4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b93e:	490a      	ldr	r1, [pc, #40]	; (800b968 <setup_tcp+0x40>)
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f004 fe51 	bl	80105e8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b946:	4909      	ldr	r1, [pc, #36]	; (800b96c <setup_tcp+0x44>)
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f004 fe6f 	bl	801062c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b94e:	2202      	movs	r2, #2
 800b950:	4907      	ldr	r1, [pc, #28]	; (800b970 <setup_tcp+0x48>)
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f004 fec6 	bl	80106e4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b958:	4906      	ldr	r1, [pc, #24]	; (800b974 <setup_tcp+0x4c>)
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f004 fe88 	bl	8010670 <tcp_err>
}
 800b960:	bf00      	nop
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	0800b501 	.word	0x0800b501
 800b96c:	0800b6d5 	.word	0x0800b6d5
 800b970:	0800b60d 	.word	0x0800b60d
 800b974:	0800b77d 	.word	0x0800b77d

0800b978 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d006      	beq.n	800b99c <pcb_new+0x24>
 800b98e:	4b18      	ldr	r3, [pc, #96]	; (800b9f0 <pcb_new+0x78>)
 800b990:	f240 2265 	movw	r2, #613	; 0x265
 800b994:	4917      	ldr	r1, [pc, #92]	; (800b9f4 <pcb_new+0x7c>)
 800b996:	4818      	ldr	r0, [pc, #96]	; (800b9f8 <pcb_new+0x80>)
 800b998:	f00c faba 	bl	8017f10 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9a6:	2b10      	cmp	r3, #16
 800b9a8:	d112      	bne.n	800b9d0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f004 fdf9 	bl	80105a8 <tcp_new_ip_type>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d009      	beq.n	800b9d8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff ffad 	bl	800b928 <setup_tcp>
      }
      break;
 800b9ce:	e003      	b.n	800b9d8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	22fa      	movs	r2, #250	; 0xfa
 800b9d4:	711a      	strb	r2, [r3, #4]
      return;
 800b9d6:	e008      	b.n	800b9ea <pcb_new+0x72>
      break;
 800b9d8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <pcb_new+0x72>
    msg->err = ERR_MEM;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	22ff      	movs	r2, #255	; 0xff
 800b9e8:	711a      	strb	r2, [r3, #4]
  }
}
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd90      	pop	{r4, r7, pc}
 800b9f0:	0801b36c 	.word	0x0801b36c
 800b9f4:	0801b4ec 	.word	0x0801b4ec
 800b9f8:	0801b3b0 	.word	0x0801b3b0

0800b9fc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7ff ffad 	bl	800b978 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	6039      	str	r1, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ba38:	2006      	movs	r0, #6
 800ba3a:	f001 ffe1 	bl	800da00 <memp_malloc>
 800ba3e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <netconn_alloc+0x22>
    return NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e04d      	b.n	800bae6 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	79fa      	ldrb	r2, [r7, #7]
 800ba54:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ba5c:	79fb      	ldrb	r3, [r7, #7]
 800ba5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba62:	2b10      	cmp	r3, #16
 800ba64:	d10c      	bne.n	800ba80 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ba66:	2306      	movs	r3, #6
 800ba68:	60fb      	str	r3, [r7, #12]
      break;
 800ba6a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	3310      	adds	r3, #16
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f00b fea0 	bl	80177b8 <sys_mbox_new>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d008      	beq.n	800ba90 <netconn_alloc+0x68>
    goto free_and_return;
 800ba7e:	e02d      	b.n	800badc <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ba80:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <netconn_alloc+0xc8>)
 800ba82:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ba86:	491b      	ldr	r1, [pc, #108]	; (800baf4 <netconn_alloc+0xcc>)
 800ba88:	481b      	ldr	r0, [pc, #108]	; (800baf8 <netconn_alloc+0xd0>)
 800ba8a:	f00c fa41 	bl	8017f10 <iprintf>
      goto free_and_return;
 800ba8e:	e025      	b.n	800badc <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	330c      	adds	r3, #12
 800ba94:	2100      	movs	r1, #0
 800ba96:	4618      	mov	r0, r3
 800ba98:	f00b ff3a 	bl	8017910 <sys_sem_new>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3310      	adds	r3, #16
 800baa6:	4618      	mov	r0, r3
 800baa8:	f00b fea0 	bl	80177ec <sys_mbox_free>
    goto free_and_return;
 800baac:	e016      	b.n	800badc <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	3314      	adds	r3, #20
 800bab2:	4618      	mov	r0, r3
 800bab4:	f00b ff1f 	bl	80178f6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2200      	movs	r2, #0
 800babc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bac4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	2200      	movs	r2, #0
 800bad0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	7dfa      	ldrb	r2, [r7, #23]
 800bad6:	771a      	strb	r2, [r3, #28]
  return conn;
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	e004      	b.n	800bae6 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800badc:	6939      	ldr	r1, [r7, #16]
 800bade:	2006      	movs	r0, #6
 800bae0:	f002 f804 	bl	800daec <memp_free>
  return NULL;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	0801b36c 	.word	0x0801b36c
 800baf4:	0801b50c 	.word	0x0801b50c
 800baf8:	0801b3b0 	.word	0x0801b3b0

0800bafc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d006      	beq.n	800bb1a <netconn_free+0x1e>
 800bb0c:	4b1b      	ldr	r3, [pc, #108]	; (800bb7c <netconn_free+0x80>)
 800bb0e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bb12:	491b      	ldr	r1, [pc, #108]	; (800bb80 <netconn_free+0x84>)
 800bb14:	481b      	ldr	r0, [pc, #108]	; (800bb84 <netconn_free+0x88>)
 800bb16:	f00c f9fb 	bl	8017f10 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3310      	adds	r3, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f00b fed8 	bl	80178d4 <sys_mbox_valid>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d006      	beq.n	800bb38 <netconn_free+0x3c>
 800bb2a:	4b14      	ldr	r3, [pc, #80]	; (800bb7c <netconn_free+0x80>)
 800bb2c:	f240 3223 	movw	r2, #803	; 0x323
 800bb30:	4915      	ldr	r1, [pc, #84]	; (800bb88 <netconn_free+0x8c>)
 800bb32:	4814      	ldr	r0, [pc, #80]	; (800bb84 <netconn_free+0x88>)
 800bb34:	f00c f9ec 	bl	8017f10 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3314      	adds	r3, #20
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f00b fec9 	bl	80178d4 <sys_mbox_valid>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d006      	beq.n	800bb56 <netconn_free+0x5a>
 800bb48:	4b0c      	ldr	r3, [pc, #48]	; (800bb7c <netconn_free+0x80>)
 800bb4a:	f240 3226 	movw	r2, #806	; 0x326
 800bb4e:	490f      	ldr	r1, [pc, #60]	; (800bb8c <netconn_free+0x90>)
 800bb50:	480c      	ldr	r0, [pc, #48]	; (800bb84 <netconn_free+0x88>)
 800bb52:	f00c f9dd 	bl	8017f10 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	330c      	adds	r3, #12
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f00b ff3b 	bl	80179d6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	330c      	adds	r3, #12
 800bb64:	4618      	mov	r0, r3
 800bb66:	f00b ff54 	bl	8017a12 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	2006      	movs	r0, #6
 800bb6e:	f001 ffbd 	bl	800daec <memp_free>
}
 800bb72:	bf00      	nop
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0801b36c 	.word	0x0801b36c
 800bb80:	0801b534 	.word	0x0801b534
 800bb84:	0801b3b0 	.word	0x0801b3b0
 800bb88:	0801b564 	.word	0x0801b564
 800bb8c:	0801b5a0 	.word	0x0801b5a0

0800bb90 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3310      	adds	r3, #16
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f00b fe99 	bl	80178d4 <sys_mbox_valid>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d02f      	beq.n	800bc08 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bba8:	e018      	b.n	800bbdc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbb2:	2b10      	cmp	r3, #16
 800bbb4:	d10e      	bne.n	800bbd4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	f107 020f 	add.w	r2, r7, #15
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fc64 	bl	800b48c <lwip_netconn_is_err_msg>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d108      	bne.n	800bbdc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f002 fe2d 	bl	800e82c <pbuf_free>
 800bbd2:	e003      	b.n	800bbdc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f000 ff1a 	bl	800ca10 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3310      	adds	r3, #16
 800bbe0:	f107 0210 	add.w	r2, r7, #16
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f00b fe5d 	bl	80178a6 <sys_arch_mbox_tryfetch>
 800bbec:	4603      	mov	r3, r0
 800bbee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbf2:	d1da      	bne.n	800bbaa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	3310      	adds	r3, #16
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f00b fdf7 	bl	80177ec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	3310      	adds	r3, #16
 800bc02:	4618      	mov	r0, r3
 800bc04:	f00b fe77 	bl	80178f6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3314      	adds	r3, #20
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f00b fe61 	bl	80178d4 <sys_mbox_valid>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d034      	beq.n	800bc82 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bc18:	e01d      	b.n	800bc56 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f107 020e 	add.w	r2, r7, #14
 800bc20:	4611      	mov	r1, r2
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7ff fc32 	bl	800b48c <lwip_netconn_is_err_msg>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d113      	bne.n	800bc56 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f7ff ffac 	bl	800bb90 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d007      	beq.n	800bc50 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f003 fbe1 	bl	800f40c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bc50:	6978      	ldr	r0, [r7, #20]
 800bc52:	f7ff ff53 	bl	800bafc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	3314      	adds	r3, #20
 800bc5a:	f107 0210 	add.w	r2, r7, #16
 800bc5e:	4611      	mov	r1, r2
 800bc60:	4618      	mov	r0, r3
 800bc62:	f00b fe20 	bl	80178a6 <sys_arch_mbox_tryfetch>
 800bc66:	4603      	mov	r3, r0
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc6c:	d1d5      	bne.n	800bc1a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3314      	adds	r3, #20
 800bc72:	4618      	mov	r0, r3
 800bc74:	f00b fdba 	bl	80177ec <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3314      	adds	r3, #20
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f00b fe3a 	bl	80178f6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800bc82:	bf00      	nop
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <lwip_netconn_do_close_internal+0x24>
 800bca2:	4b87      	ldr	r3, [pc, #540]	; (800bec0 <lwip_netconn_do_close_internal+0x234>)
 800bca4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800bca8:	4986      	ldr	r1, [pc, #536]	; (800bec4 <lwip_netconn_do_close_internal+0x238>)
 800bcaa:	4887      	ldr	r0, [pc, #540]	; (800bec8 <lwip_netconn_do_close_internal+0x23c>)
 800bcac:	f00c f930 	bl	8017f10 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d006      	beq.n	800bcca <lwip_netconn_do_close_internal+0x3e>
 800bcbc:	4b80      	ldr	r3, [pc, #512]	; (800bec0 <lwip_netconn_do_close_internal+0x234>)
 800bcbe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800bcc2:	4982      	ldr	r1, [pc, #520]	; (800becc <lwip_netconn_do_close_internal+0x240>)
 800bcc4:	4880      	ldr	r0, [pc, #512]	; (800bec8 <lwip_netconn_do_close_internal+0x23c>)
 800bcc6:	f00c f923 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d006      	beq.n	800bce0 <lwip_netconn_do_close_internal+0x54>
 800bcd2:	4b7b      	ldr	r3, [pc, #492]	; (800bec0 <lwip_netconn_do_close_internal+0x234>)
 800bcd4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800bcd8:	497d      	ldr	r1, [pc, #500]	; (800bed0 <lwip_netconn_do_close_internal+0x244>)
 800bcda:	487b      	ldr	r0, [pc, #492]	; (800bec8 <lwip_netconn_do_close_internal+0x23c>)
 800bcdc:	f00c f918 	bl	8017f10 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d106      	bne.n	800bcf6 <lwip_netconn_do_close_internal+0x6a>
 800bce8:	4b75      	ldr	r3, [pc, #468]	; (800bec0 <lwip_netconn_do_close_internal+0x234>)
 800bcea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800bcee:	4979      	ldr	r1, [pc, #484]	; (800bed4 <lwip_netconn_do_close_internal+0x248>)
 800bcf0:	4875      	ldr	r0, [pc, #468]	; (800bec8 <lwip_netconn_do_close_internal+0x23c>)
 800bcf2:	f00c f90d 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <lwip_netconn_do_close_internal+0x80>
 800bcfe:	4b70      	ldr	r3, [pc, #448]	; (800bec0 <lwip_netconn_do_close_internal+0x234>)
 800bd00:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bd04:	4974      	ldr	r1, [pc, #464]	; (800bed8 <lwip_netconn_do_close_internal+0x24c>)
 800bd06:	4870      	ldr	r0, [pc, #448]	; (800bec8 <lwip_netconn_do_close_internal+0x23c>)
 800bd08:	f00c f902 	bl	8017f10 <iprintf>

  tpcb = conn->pcb.tcp;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	7a1b      	ldrb	r3, [r3, #8]
 800bd18:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800bd22:	7bfb      	ldrb	r3, [r7, #15]
 800bd24:	f003 0302 	and.w	r3, r3, #2
 800bd28:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d102      	bne.n	800bd36 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800bd30:	2301      	movs	r3, #1
 800bd32:	75bb      	strb	r3, [r7, #22]
 800bd34:	e01f      	b.n	800bd76 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800bd36:	7bbb      	ldrb	r3, [r7, #14]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00e      	beq.n	800bd5a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800bd40:	2b05      	cmp	r3, #5
 800bd42:	d007      	beq.n	800bd54 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800bd48:	2b06      	cmp	r3, #6
 800bd4a:	d003      	beq.n	800bd54 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d102      	bne.n	800bd5a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800bd54:	2301      	movs	r3, #1
 800bd56:	75bb      	strb	r3, [r7, #22]
 800bd58:	e00d      	b.n	800bd76 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bd5a:	7b7b      	ldrb	r3, [r7, #13]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d008      	beq.n	800bd72 <lwip_netconn_do_close_internal+0xe6>
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	8b5b      	ldrh	r3, [r3, #26]
 800bd64:	f003 0310 	and.w	r3, r3, #16
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	75bb      	strb	r3, [r7, #22]
 800bd70:	e001      	b.n	800bd76 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800bd76:	7dbb      	ldrb	r3, [r7, #22]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	6938      	ldr	r0, [r7, #16]
 800bd80:	f004 fc20 	bl	80105c4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	7d1b      	ldrb	r3, [r3, #20]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d104      	bne.n	800bd96 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	6938      	ldr	r0, [r7, #16]
 800bd90:	f004 fc90 	bl	80106b4 <tcp_accept>
 800bd94:	e01d      	b.n	800bdd2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d007      	beq.n	800bdac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	6938      	ldr	r0, [r7, #16]
 800bda0:	f004 fc22 	bl	80105e8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bda4:	2100      	movs	r1, #0
 800bda6:	6938      	ldr	r0, [r7, #16]
 800bda8:	f004 fc84 	bl	80106b4 <tcp_accept>
    }
    if (shut_tx) {
 800bdac:	7b7b      	ldrb	r3, [r7, #13]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	6938      	ldr	r0, [r7, #16]
 800bdb6:	f004 fc39 	bl	801062c <tcp_sent>
    }
    if (shut_close) {
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d008      	beq.n	800bdd2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6938      	ldr	r0, [r7, #16]
 800bdc6:	f004 fc8d 	bl	80106e4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800bdca:	2100      	movs	r1, #0
 800bdcc:	6938      	ldr	r0, [r7, #16]
 800bdce:	f004 fc4f 	bl	8010670 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800bdd2:	7dbb      	ldrb	r3, [r7, #22]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800bdd8:	6938      	ldr	r0, [r7, #16]
 800bdda:	f003 f9d1 	bl	800f180 <tcp_close>
 800bdde:	4603      	mov	r3, r0
 800bde0:	75fb      	strb	r3, [r7, #23]
 800bde2:	e007      	b.n	800bdf4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	7b7a      	ldrb	r2, [r7, #13]
 800bde8:	4619      	mov	r1, r3
 800bdea:	6938      	ldr	r0, [r7, #16]
 800bdec:	f003 f9f4 	bl	800f1d8 <tcp_shutdown>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800bdf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	757b      	strb	r3, [r7, #21]
 800be00:	e016      	b.n	800be30 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800be02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be0a:	d10f      	bne.n	800be2c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a1b      	ldr	r3, [r3, #32]
 800be10:	7a5b      	ldrb	r3, [r3, #9]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10c      	bne.n	800be30 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800be16:	2301      	movs	r3, #1
 800be18:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800be1a:	7dbb      	ldrb	r3, [r7, #22]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800be20:	6938      	ldr	r0, [r7, #16]
 800be22:	f003 faf3 	bl	800f40c <tcp_abort>
          err = ERR_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
 800be2a:	e001      	b.n	800be30 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800be2c:	2301      	movs	r3, #1
 800be2e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800be30:	7d7b      	ldrb	r3, [r7, #21]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d052      	beq.n	800bedc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	330c      	adds	r3, #12
 800be3e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	7dfa      	ldrb	r2, [r7, #23]
 800be46:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800be54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d129      	bne.n	800beb0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800be5c:	7dbb      	ldrb	r3, [r7, #22]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00c      	beq.n	800be7c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d005      	beq.n	800be7c <lwip_netconn_do_close_internal+0x1f0>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be74:	2200      	movs	r2, #0
 800be76:	2104      	movs	r1, #4
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3
      }
      if (shut_rx) {
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d009      	beq.n	800be96 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <lwip_netconn_do_close_internal+0x20a>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8e:	2200      	movs	r2, #0
 800be90:	2100      	movs	r1, #0
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
      }
      if (shut_tx) {
 800be96:	7b7b      	ldrb	r3, [r7, #13]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d009      	beq.n	800beb0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <lwip_netconn_do_close_internal+0x224>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea8:	2200      	movs	r2, #0
 800beaa:	2102      	movs	r1, #2
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800beb6:	68b8      	ldr	r0, [r7, #8]
 800beb8:	f00b fd80 	bl	80179bc <sys_sem_signal>
    }
    return ERR_OK;
 800bebc:	2300      	movs	r3, #0
 800bebe:	e03c      	b.n	800bf3a <lwip_netconn_do_close_internal+0x2ae>
 800bec0:	0801b36c 	.word	0x0801b36c
 800bec4:	0801b5dc 	.word	0x0801b5dc
 800bec8:	0801b3b0 	.word	0x0801b3b0
 800becc:	0801b5ec 	.word	0x0801b5ec
 800bed0:	0801b60c 	.word	0x0801b60c
 800bed4:	0801b630 	.word	0x0801b630
 800bed8:	0801b470 	.word	0x0801b470
  }
  if (!close_finished) {
 800bedc:	7d7b      	ldrb	r3, [r7, #21]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d11e      	bne.n	800bf20 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	7d1b      	ldrb	r3, [r3, #20]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d106      	bne.n	800bef8 <lwip_netconn_do_close_internal+0x26c>
 800beea:	4b16      	ldr	r3, [pc, #88]	; (800bf44 <lwip_netconn_do_close_internal+0x2b8>)
 800beec:	f240 4241 	movw	r2, #1089	; 0x441
 800bef0:	4915      	ldr	r1, [pc, #84]	; (800bf48 <lwip_netconn_do_close_internal+0x2bc>)
 800bef2:	4816      	ldr	r0, [pc, #88]	; (800bf4c <lwip_netconn_do_close_internal+0x2c0>)
 800bef4:	f00c f80c 	bl	8017f10 <iprintf>
    if (shut_tx) {
 800bef8:	7b7b      	ldrb	r3, [r7, #13]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d003      	beq.n	800bf06 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800befe:	4914      	ldr	r1, [pc, #80]	; (800bf50 <lwip_netconn_do_close_internal+0x2c4>)
 800bf00:	6938      	ldr	r0, [r7, #16]
 800bf02:	f004 fb93 	bl	801062c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bf06:	2201      	movs	r2, #1
 800bf08:	4912      	ldr	r1, [pc, #72]	; (800bf54 <lwip_netconn_do_close_internal+0x2c8>)
 800bf0a:	6938      	ldr	r0, [r7, #16]
 800bf0c:	f004 fbea 	bl	80106e4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bf10:	4911      	ldr	r1, [pc, #68]	; (800bf58 <lwip_netconn_do_close_internal+0x2cc>)
 800bf12:	6938      	ldr	r0, [r7, #16]
 800bf14:	f004 fbac 	bl	8010670 <tcp_err>
    tcp_arg(tpcb, conn);
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	6938      	ldr	r0, [r7, #16]
 800bf1c:	f004 fb52 	bl	80105c4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bf20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <lwip_netconn_do_close_internal+0x2aa>
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <lwip_netconn_do_close_internal+0x2b8>)
 800bf2a:	f240 424d 	movw	r2, #1101	; 0x44d
 800bf2e:	490b      	ldr	r1, [pc, #44]	; (800bf5c <lwip_netconn_do_close_internal+0x2d0>)
 800bf30:	4806      	ldr	r0, [pc, #24]	; (800bf4c <lwip_netconn_do_close_internal+0x2c0>)
 800bf32:	f00b ffed 	bl	8017f10 <iprintf>
  return err;
 800bf36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	0801b36c 	.word	0x0801b36c
 800bf48:	0801b644 	.word	0x0801b644
 800bf4c:	0801b3b0 	.word	0x0801b3b0
 800bf50:	0800b6d5 	.word	0x0800b6d5
 800bf54:	0800b60d 	.word	0x0800b60d
 800bf58:	0800b77d 	.word	0x0800b77d
 800bf5c:	0801b668 	.word	0x0801b668

0800bf60 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	785b      	ldrb	r3, [r3, #1]
 800bf72:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00d      	beq.n	800bf96 <lwip_netconn_do_delconn+0x36>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf84:	2b10      	cmp	r3, #16
 800bf86:	d006      	beq.n	800bf96 <lwip_netconn_do_delconn+0x36>
 800bf88:	4b59      	ldr	r3, [pc, #356]	; (800c0f0 <lwip_netconn_do_delconn+0x190>)
 800bf8a:	f240 425e 	movw	r2, #1118	; 0x45e
 800bf8e:	4959      	ldr	r1, [pc, #356]	; (800c0f4 <lwip_netconn_do_delconn+0x194>)
 800bf90:	4859      	ldr	r0, [pc, #356]	; (800c0f8 <lwip_netconn_do_delconn+0x198>)
 800bf92:	f00b ffbd 	bl	8017f10 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bf96:	7afb      	ldrb	r3, [r7, #11]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <lwip_netconn_do_delconn+0x48>
 800bf9c:	7afb      	ldrb	r3, [r7, #11]
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d002      	beq.n	800bfa8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d109      	bne.n	800bfbc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d10a      	bne.n	800bfc4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	7f1b      	ldrb	r3, [r3, #28]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d103      	bne.n	800bfc4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	22fb      	movs	r2, #251	; 0xfb
 800bfc0:	711a      	strb	r2, [r3, #4]
 800bfc2:	e089      	b.n	800c0d8 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d10d      	bne.n	800bfe6 <lwip_netconn_do_delconn+0x86>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	7f1b      	ldrb	r3, [r3, #28]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d106      	bne.n	800bfe6 <lwip_netconn_do_delconn+0x86>
 800bfd8:	4b45      	ldr	r3, [pc, #276]	; (800c0f0 <lwip_netconn_do_delconn+0x190>)
 800bfda:	f240 427a 	movw	r2, #1146	; 0x47a
 800bfde:	4947      	ldr	r1, [pc, #284]	; (800c0fc <lwip_netconn_do_delconn+0x19c>)
 800bfe0:	4845      	ldr	r0, [pc, #276]	; (800c0f8 <lwip_netconn_do_delconn+0x198>)
 800bfe2:	f00b ff95 	bl	8017f10 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff fdcd 	bl	800bb90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d051      	beq.n	800c0a4 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c00a:	2b10      	cmp	r3, #16
 800c00c:	d145      	bne.n	800c09a <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <lwip_netconn_do_delconn+0xc6>
 800c018:	4b35      	ldr	r3, [pc, #212]	; (800c0f0 <lwip_netconn_do_delconn+0x190>)
 800c01a:	f240 4294 	movw	r2, #1172	; 0x494
 800c01e:	4938      	ldr	r1, [pc, #224]	; (800c100 <lwip_netconn_do_delconn+0x1a0>)
 800c020:	4835      	ldr	r0, [pc, #212]	; (800c0f8 <lwip_netconn_do_delconn+0x198>)
 800c022:	f00b ff75 	bl	8017f10 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2204      	movs	r2, #4
 800c02c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2203      	movs	r2, #3
 800c032:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2100      	movs	r1, #0
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fe22 	bl	800bc8c <lwip_netconn_do_close_internal>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d04b      	beq.n	800c0e6 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	785b      	ldrb	r3, [r3, #1]
 800c054:	2b04      	cmp	r3, #4
 800c056:	d006      	beq.n	800c066 <lwip_netconn_do_delconn+0x106>
 800c058:	4b25      	ldr	r3, [pc, #148]	; (800c0f0 <lwip_netconn_do_delconn+0x190>)
 800c05a:	f240 429a 	movw	r2, #1178	; 0x49a
 800c05e:	4929      	ldr	r1, [pc, #164]	; (800c104 <lwip_netconn_do_delconn+0x1a4>)
 800c060:	4825      	ldr	r0, [pc, #148]	; (800c0f8 <lwip_netconn_do_delconn+0x198>)
 800c062:	f00b ff55 	bl	8017f10 <iprintf>
            UNLOCK_TCPIP_CORE();
 800c066:	4828      	ldr	r0, [pc, #160]	; (800c108 <lwip_netconn_do_delconn+0x1a8>)
 800c068:	f00b fd11 	bl	8017a8e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	330c      	adds	r3, #12
 800c072:	2100      	movs	r1, #0
 800c074:	4618      	mov	r0, r3
 800c076:	f00b fc70 	bl	801795a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800c07a:	4823      	ldr	r0, [pc, #140]	; (800c108 <lwip_netconn_do_delconn+0x1a8>)
 800c07c:	f00b fcf8 	bl	8017a70 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d02d      	beq.n	800c0e6 <lwip_netconn_do_delconn+0x186>
 800c08a:	4b19      	ldr	r3, [pc, #100]	; (800c0f0 <lwip_netconn_do_delconn+0x190>)
 800c08c:	f240 429e 	movw	r2, #1182	; 0x49e
 800c090:	491c      	ldr	r1, [pc, #112]	; (800c104 <lwip_netconn_do_delconn+0x1a4>)
 800c092:	4819      	ldr	r0, [pc, #100]	; (800c0f8 <lwip_netconn_do_delconn+0x198>)
 800c094:	f00b ff3c 	bl	8017f10 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800c098:	e025      	b.n	800c0e6 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800c09a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d007      	beq.n	800c0be <lwip_netconn_do_delconn+0x15e>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	6810      	ldr	r0, [r2, #0]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <lwip_netconn_do_delconn+0x178>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	6810      	ldr	r0, [r2, #0]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2102      	movs	r1, #2
 800c0d6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	330c      	adds	r3, #12
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f00b fc86 	bl	80179f0 <sys_sem_valid>
 800c0e4:	e000      	b.n	800c0e8 <lwip_netconn_do_delconn+0x188>
          return;
 800c0e6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	0801b36c 	.word	0x0801b36c
 800c0f4:	0801b678 	.word	0x0801b678
 800c0f8:	0801b3b0 	.word	0x0801b3b0
 800c0fc:	0801b68c 	.word	0x0801b68c
 800c100:	0801b6ac 	.word	0x0801b6ac
 800c104:	0801b6c8 	.word	0x0801b6c8
 800c108:	20009b24 	.word	0x20009b24

0800c10c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d016      	beq.n	800c150 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c12c:	2b10      	cmp	r3, #16
 800c12e:	d10c      	bne.n	800c14a <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6858      	ldr	r0, [r3, #4]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	6899      	ldr	r1, [r3, #8]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	899b      	ldrh	r3, [r3, #12]
 800c13e:	461a      	mov	r2, r3
 800c140:	f003 f970 	bl	800f424 <tcp_bind>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
        break;
 800c148:	e004      	b.n	800c154 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c14a:	23fa      	movs	r3, #250	; 0xfa
 800c14c:	73fb      	strb	r3, [r7, #15]
        break;
 800c14e:	e001      	b.n	800c154 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800c150:	23fa      	movs	r3, #250	; 0xfa
 800c152:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	7bfa      	ldrb	r2, [r7, #15]
 800c158:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c15a:	bf00      	nop
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	4613      	mov	r3, r2
 800c170:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c180:	f06f 0305 	mvn.w	r3, #5
 800c184:	e070      	b.n	800c268 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	785b      	ldrb	r3, [r3, #1]
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	d006      	beq.n	800c19c <lwip_netconn_do_connected+0x38>
 800c18e:	4b38      	ldr	r3, [pc, #224]	; (800c270 <lwip_netconn_do_connected+0x10c>)
 800c190:	f240 5223 	movw	r2, #1315	; 0x523
 800c194:	4937      	ldr	r1, [pc, #220]	; (800c274 <lwip_netconn_do_connected+0x110>)
 800c196:	4838      	ldr	r0, [pc, #224]	; (800c278 <lwip_netconn_do_connected+0x114>)
 800c198:	f00b feba 	bl	8017f10 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10c      	bne.n	800c1be <lwip_netconn_do_connected+0x5a>
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	7f1b      	ldrb	r3, [r3, #28]
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <lwip_netconn_do_connected+0x5a>
 800c1b0:	4b2f      	ldr	r3, [pc, #188]	; (800c270 <lwip_netconn_do_connected+0x10c>)
 800c1b2:	f240 5224 	movw	r2, #1316	; 0x524
 800c1b6:	4931      	ldr	r1, [pc, #196]	; (800c27c <lwip_netconn_do_connected+0x118>)
 800c1b8:	482f      	ldr	r0, [pc, #188]	; (800c278 <lwip_netconn_do_connected+0x114>)
 800c1ba:	f00b fea9 	bl	8017f10 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d008      	beq.n	800c1d8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	79fa      	ldrb	r2, [r7, #7]
 800c1cc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	330c      	adds	r3, #12
 800c1d6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1e0:	2b10      	cmp	r3, #16
 800c1e2:	d106      	bne.n	800c1f2 <lwip_netconn_do_connected+0x8e>
 800c1e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d102      	bne.n	800c1f2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c1ec:	69b8      	ldr	r0, [r7, #24]
 800c1ee:	f7ff fb9b 	bl	800b928 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	7f1b      	ldrb	r3, [r3, #28]
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	bf0c      	ite	eq
 800c1fe:	2301      	moveq	r3, #1
 800c200:	2300      	movne	r3, #0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	7f1b      	ldrb	r3, [r3, #28]
 800c20a:	f023 0304 	bic.w	r3, r3, #4
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <lwip_netconn_do_connected+0xbc>
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10c      	bne.n	800c23a <lwip_netconn_do_connected+0xd6>
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d102      	bne.n	800c22c <lwip_netconn_do_connected+0xc8>
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d006      	beq.n	800c23a <lwip_netconn_do_connected+0xd6>
 800c22c:	4b10      	ldr	r3, [pc, #64]	; (800c270 <lwip_netconn_do_connected+0x10c>)
 800c22e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c232:	4913      	ldr	r1, [pc, #76]	; (800c280 <lwip_netconn_do_connected+0x11c>)
 800c234:	4810      	ldr	r0, [pc, #64]	; (800c278 <lwip_netconn_do_connected+0x114>)
 800c236:	f00b fe6b 	bl	8017f10 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	2200      	movs	r2, #0
 800c23e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	2200      	movs	r2, #0
 800c244:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d005      	beq.n	800c25a <lwip_netconn_do_connected+0xf6>
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	2200      	movs	r2, #0
 800c254:	2102      	movs	r1, #2
 800c256:	69b8      	ldr	r0, [r7, #24]
 800c258:	4798      	blx	r3

  if (was_blocking) {
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c260:	69f8      	ldr	r0, [r7, #28]
 800c262:	f00b fbab 	bl	80179bc <sys_sem_signal>
  }
  return ERR_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3720      	adds	r7, #32
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	0801b36c 	.word	0x0801b36c
 800c274:	0801b6d0 	.word	0x0801b6d0
 800c278:	0801b3b0 	.word	0x0801b3b0
 800c27c:	0801b6f0 	.word	0x0801b6f0
 800c280:	0801b730 	.word	0x0801b730

0800c284 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c29a:	23f1      	movs	r3, #241	; 0xf1
 800c29c:	75fb      	strb	r3, [r7, #23]
 800c29e:	e08b      	b.n	800c3b8 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2aa:	2b10      	cmp	r3, #16
 800c2ac:	d179      	bne.n	800c3a2 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	785b      	ldrb	r3, [r3, #1]
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d102      	bne.n	800c2be <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800c2b8:	23f7      	movs	r3, #247	; 0xf7
 800c2ba:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c2bc:	e07b      	b.n	800c3b6 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800c2c8:	23f6      	movs	r3, #246	; 0xf6
 800c2ca:	75fb      	strb	r3, [r7, #23]
        break;
 800c2cc:	e073      	b.n	800c3b6 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff fb28 	bl	800b928 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6858      	ldr	r0, [r3, #4]
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6899      	ldr	r1, [r3, #8]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	899a      	ldrh	r2, [r3, #12]
 800c2e6:	4b38      	ldr	r3, [pc, #224]	; (800c3c8 <lwip_netconn_do_connect+0x144>)
 800c2e8:	f003 fa24 	bl	800f734 <tcp_connect>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c2f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d15e      	bne.n	800c3b6 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	7f1b      	ldrb	r3, [r3, #28]
 800c2fe:	f003 0302 	and.w	r3, r3, #2
 800c302:	2b00      	cmp	r3, #0
 800c304:	bf14      	ite	ne
 800c306:	2301      	movne	r3, #1
 800c308:	2300      	moveq	r3, #0
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2203      	movs	r2, #3
 800c314:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c316:	7bfb      	ldrb	r3, [r7, #15]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d009      	beq.n	800c330 <lwip_netconn_do_connect+0xac>
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	7f1a      	ldrb	r2, [r3, #28]
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0204 	orr.w	r2, r2, #4
 800c32a:	b2d2      	uxtb	r2, r2
 800c32c:	771a      	strb	r2, [r3, #28]
 800c32e:	e008      	b.n	800c342 <lwip_netconn_do_connect+0xbe>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	7f1a      	ldrb	r2, [r3, #28]
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0204 	bic.w	r2, r2, #4
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c342:	7bfb      	ldrb	r3, [r7, #15]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800c348:	23fb      	movs	r3, #251	; 0xfb
 800c34a:	75fb      	strb	r3, [r7, #23]
        break;
 800c34c:	e033      	b.n	800c3b6 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	785b      	ldrb	r3, [r3, #1]
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d006      	beq.n	800c36e <lwip_netconn_do_connect+0xea>
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <lwip_netconn_do_connect+0x148>)
 800c362:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c366:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <lwip_netconn_do_connect+0x14c>)
 800c368:	481a      	ldr	r0, [pc, #104]	; (800c3d4 <lwip_netconn_do_connect+0x150>)
 800c36a:	f00b fdd1 	bl	8017f10 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c36e:	481a      	ldr	r0, [pc, #104]	; (800c3d8 <lwip_netconn_do_connect+0x154>)
 800c370:	f00b fb8d 	bl	8017a8e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	330c      	adds	r3, #12
 800c37a:	2100      	movs	r1, #0
 800c37c:	4618      	mov	r0, r3
 800c37e:	f00b faec 	bl	801795a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c382:	4815      	ldr	r0, [pc, #84]	; (800c3d8 <lwip_netconn_do_connect+0x154>)
 800c384:	f00b fb74 	bl	8017a70 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d116      	bne.n	800c3c0 <lwip_netconn_do_connect+0x13c>
 800c392:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <lwip_netconn_do_connect+0x148>)
 800c394:	f240 5274 	movw	r2, #1396	; 0x574
 800c398:	490d      	ldr	r1, [pc, #52]	; (800c3d0 <lwip_netconn_do_connect+0x14c>)
 800c39a:	480e      	ldr	r0, [pc, #56]	; (800c3d4 <lwip_netconn_do_connect+0x150>)
 800c39c:	f00b fdb8 	bl	8017f10 <iprintf>
              return;
 800c3a0:	e00e      	b.n	800c3c0 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <lwip_netconn_do_connect+0x148>)
 800c3a4:	f240 527d 	movw	r2, #1405	; 0x57d
 800c3a8:	490c      	ldr	r1, [pc, #48]	; (800c3dc <lwip_netconn_do_connect+0x158>)
 800c3aa:	480a      	ldr	r0, [pc, #40]	; (800c3d4 <lwip_netconn_do_connect+0x150>)
 800c3ac:	f00b fdb0 	bl	8017f10 <iprintf>
 800c3b0:	23fa      	movs	r3, #250	; 0xfa
 800c3b2:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c3b4:	e000      	b.n	800c3b8 <lwip_netconn_do_connect+0x134>
        break;
 800c3b6:	bf00      	nop
    }
  }
  msg->err = err;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	7dfa      	ldrb	r2, [r7, #23]
 800c3bc:	711a      	strb	r2, [r3, #4]
 800c3be:	e000      	b.n	800c3c2 <lwip_netconn_do_connect+0x13e>
              return;
 800c3c0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	0800c165 	.word	0x0800c165
 800c3cc:	0801b36c 	.word	0x0801b36c
 800c3d0:	0801b6c8 	.word	0x0801b6c8
 800c3d4:	0801b3b0 	.word	0x0801b3b0
 800c3d8:	20009b24 	.word	0x20009b24
 800c3dc:	0801b750 	.word	0x0801b750

0800c3e0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d022      	beq.n	800c442 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c406:	2b10      	cmp	r3, #16
 800c408:	d11b      	bne.n	800c442 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c416:	d202      	bcs.n	800c41e <lwip_netconn_do_recv+0x3e>
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	e001      	b.n	800c422 <lwip_netconn_do_recv+0x42>
 800c41e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c422:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	89fa      	ldrh	r2, [r7, #14]
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f003 f8ea 	bl	800f608 <tcp_recved>
        remaining -= recved;
 800c434:	89fb      	ldrh	r3, [r7, #14]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e6      	bne.n	800c410 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c442:	bf00      	nop
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
	...

0800c44c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d106      	bne.n	800c470 <lwip_netconn_do_writemore+0x24>
 800c462:	4b96      	ldr	r3, [pc, #600]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c464:	f240 6273 	movw	r2, #1651	; 0x673
 800c468:	4995      	ldr	r1, [pc, #596]	; (800c6c0 <lwip_netconn_do_writemore+0x274>)
 800c46a:	4896      	ldr	r0, [pc, #600]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c46c:	f00b fd50 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d006      	beq.n	800c486 <lwip_netconn_do_writemore+0x3a>
 800c478:	4b90      	ldr	r3, [pc, #576]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c47a:	f240 6274 	movw	r2, #1652	; 0x674
 800c47e:	4992      	ldr	r1, [pc, #584]	; (800c6c8 <lwip_netconn_do_writemore+0x27c>)
 800c480:	4890      	ldr	r0, [pc, #576]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c482:	f00b fd45 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <lwip_netconn_do_writemore+0x50>
 800c48e:	4b8b      	ldr	r3, [pc, #556]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c490:	f240 6275 	movw	r2, #1653	; 0x675
 800c494:	498d      	ldr	r1, [pc, #564]	; (800c6cc <lwip_netconn_do_writemore+0x280>)
 800c496:	488b      	ldr	r0, [pc, #556]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c498:	f00b fd3a 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <lwip_netconn_do_writemore+0x66>
 800c4a4:	4b85      	ldr	r3, [pc, #532]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c4a6:	f240 6276 	movw	r2, #1654	; 0x676
 800c4aa:	4989      	ldr	r1, [pc, #548]	; (800c6d0 <lwip_netconn_do_writemore+0x284>)
 800c4ac:	4885      	ldr	r0, [pc, #532]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c4ae:	f00b fd2f 	bl	8017f10 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	699a      	ldr	r2, [r3, #24]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d306      	bcc.n	800c4d0 <lwip_netconn_do_writemore+0x84>
 800c4c2:	4b7e      	ldr	r3, [pc, #504]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c4c4:	f240 6277 	movw	r2, #1655	; 0x677
 800c4c8:	4982      	ldr	r1, [pc, #520]	; (800c6d4 <lwip_netconn_do_writemore+0x288>)
 800c4ca:	487e      	ldr	r0, [pc, #504]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c4cc:	f00b fd20 	bl	8017f10 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	899b      	ldrh	r3, [r3, #12]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <lwip_netconn_do_writemore+0x9c>
 800c4da:	4b78      	ldr	r3, [pc, #480]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c4dc:	f240 6279 	movw	r2, #1657	; 0x679
 800c4e0:	497d      	ldr	r1, [pc, #500]	; (800c6d8 <lwip_netconn_do_writemore+0x28c>)
 800c4e2:	4878      	ldr	r0, [pc, #480]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c4e4:	f00b fd14 	bl	8017f10 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a1b      	ldr	r3, [r3, #32]
 800c4ec:	7f1b      	ldrb	r3, [r3, #28]
 800c4ee:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7f1b      	ldrb	r3, [r3, #28]
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d104      	bne.n	800c506 <lwip_netconn_do_writemore+0xba>
 800c4fc:	7ebb      	ldrb	r3, [r7, #26]
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <lwip_netconn_do_writemore+0xbe>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <lwip_netconn_do_writemore+0xc0>
 800c50a:	2300      	movs	r3, #0
 800c50c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	4413      	add	r3, r2
 800c51e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c538:	d307      	bcc.n	800c54a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c53a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c53e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c540:	7ebb      	ldrb	r3, [r7, #26]
 800c542:	f043 0302 	orr.w	r3, r3, #2
 800c546:	76bb      	strb	r3, [r7, #26]
 800c548:	e001      	b.n	800c54e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c556:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c558:	89fa      	ldrh	r2, [r7, #14]
 800c55a:	8bbb      	ldrh	r3, [r7, #28]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d216      	bcs.n	800c58e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c560:	89fb      	ldrh	r3, [r7, #14]
 800c562:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c564:	7e3b      	ldrb	r3, [r7, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00d      	beq.n	800c586 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c56a:	8bbb      	ldrh	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10e      	bne.n	800c58e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a1b      	ldr	r3, [r3, #32]
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d102      	bne.n	800c580 <lwip_netconn_do_writemore+0x134>
 800c57a:	f06f 0306 	mvn.w	r3, #6
 800c57e:	e000      	b.n	800c582 <lwip_netconn_do_writemore+0x136>
 800c580:	2300      	movs	r3, #0
 800c582:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c584:	e07d      	b.n	800c682 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c586:	7ebb      	ldrb	r3, [r7, #26]
 800c588:	f043 0302 	orr.w	r3, r3, #2
 800c58c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	691a      	ldr	r2, [r3, #16]
 800c594:	8bbb      	ldrh	r3, [r7, #28]
 800c596:	441a      	add	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d906      	bls.n	800c5b2 <lwip_netconn_do_writemore+0x166>
 800c5a4:	4b45      	ldr	r3, [pc, #276]	; (800c6bc <lwip_netconn_do_writemore+0x270>)
 800c5a6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c5aa:	494c      	ldr	r1, [pc, #304]	; (800c6dc <lwip_netconn_do_writemore+0x290>)
 800c5ac:	4845      	ldr	r0, [pc, #276]	; (800c6c4 <lwip_netconn_do_writemore+0x278>)
 800c5ae:	f00b fcaf 	bl	8017f10 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c5b2:	8bbb      	ldrh	r3, [r7, #28]
 800c5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d103      	bne.n	800c5c4 <lwip_netconn_do_writemore+0x178>
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5c2:	d209      	bcs.n	800c5d8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c5c8:	8bba      	ldrh	r2, [r7, #28]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d10b      	bne.n	800c5e6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d906      	bls.n	800c5e6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c5dc:	7ebb      	ldrb	r3, [r7, #26]
 800c5de:	f043 0302 	orr.w	r3, r3, #2
 800c5e2:	76bb      	strb	r3, [r7, #26]
 800c5e4:	e001      	b.n	800c5ea <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6858      	ldr	r0, [r3, #4]
 800c5ee:	7ebb      	ldrb	r3, [r7, #26]
 800c5f0:	8bba      	ldrh	r2, [r7, #28]
 800c5f2:	6979      	ldr	r1, [r7, #20]
 800c5f4:	f006 ff28 	bl	8013448 <tcp_write>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c5fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d12c      	bne.n	800c65e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a1b      	ldr	r3, [r3, #32]
 800c608:	6999      	ldr	r1, [r3, #24]
 800c60a:	8bba      	ldrh	r2, [r7, #28]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	440a      	add	r2, r1
 800c612:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	6919      	ldr	r1, [r3, #16]
 800c61a:	8bba      	ldrh	r2, [r7, #28]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6a1b      	ldr	r3, [r3, #32]
 800c620:	440a      	add	r2, r1
 800c622:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	691a      	ldr	r2, [r3, #16]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	429a      	cmp	r2, r3
 800c634:	d113      	bne.n	800c65e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	899a      	ldrh	r2, [r3, #12]
 800c63c:	3a01      	subs	r2, #1
 800c63e:	b292      	uxth	r2, r2
 800c640:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	899b      	ldrh	r3, [r3, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d008      	beq.n	800c65e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	689a      	ldr	r2, [r3, #8]
 800c652:	3208      	adds	r2, #8
 800c654:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a1b      	ldr	r3, [r3, #32]
 800c65a:	2200      	movs	r2, #0
 800c65c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c65e:	7e7b      	ldrb	r3, [r7, #25]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <lwip_netconn_do_writemore+0x222>
 800c664:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f43f af50 	beq.w	800c50e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c66e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <lwip_netconn_do_writemore+0x234>
 800c676:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c67e:	d146      	bne.n	800c70e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c680:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c682:	7e3b      	ldrb	r3, [r7, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d02b      	beq.n	800c6e0 <lwip_netconn_do_writemore+0x294>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	699a      	ldr	r2, [r3, #24]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	429a      	cmp	r2, r3
 800c696:	d223      	bcs.n	800c6e0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d005      	beq.n	800c6ac <lwip_netconn_do_writemore+0x260>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2103      	movs	r1, #3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7f1b      	ldrb	r3, [r3, #28]
 800c6b0:	f043 0310 	orr.w	r3, r3, #16
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	771a      	strb	r2, [r3, #28]
 800c6ba:	e028      	b.n	800c70e <lwip_netconn_do_writemore+0x2c2>
 800c6bc:	0801b36c 	.word	0x0801b36c
 800c6c0:	0801b460 	.word	0x0801b460
 800c6c4:	0801b3b0 	.word	0x0801b3b0
 800c6c8:	0801b768 	.word	0x0801b768
 800c6cc:	0801b470 	.word	0x0801b470
 800c6d0:	0801b788 	.word	0x0801b788
 800c6d4:	0801b7a0 	.word	0x0801b7a0
 800c6d8:	0801b7e0 	.word	0x0801b7e0
 800c6dc:	0801b808 	.word	0x0801b808
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c6e8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c6ec:	d305      	bcc.n	800c6fa <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c6f6:	2b04      	cmp	r3, #4
 800c6f8:	d909      	bls.n	800c70e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d005      	beq.n	800c70e <lwip_netconn_do_writemore+0x2c2>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	2200      	movs	r2, #0
 800c708:	2103      	movs	r1, #3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c70e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d11d      	bne.n	800c752 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	699a      	ldr	r2, [r3, #24]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	429a      	cmp	r2, r3
 800c724:	d002      	beq.n	800c72c <lwip_netconn_do_writemore+0x2e0>
 800c726:	7e3b      	ldrb	r3, [r7, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c72c:	2301      	movs	r3, #1
 800c72e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	f007 fc71 	bl	801401c <tcp_output>
 800c73a:	4603      	mov	r3, r0
 800c73c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c73e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c742:	f113 0f04 	cmn.w	r3, #4
 800c746:	d12c      	bne.n	800c7a2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c748:	7b3b      	ldrb	r3, [r7, #12]
 800c74a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c74c:	2301      	movs	r3, #1
 800c74e:	76fb      	strb	r3, [r7, #27]
 800c750:	e027      	b.n	800c7a2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c752:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c75a:	d120      	bne.n	800c79e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4618      	mov	r0, r3
 800c762:	f007 fc5b 	bl	801401c <tcp_output>
 800c766:	4603      	mov	r3, r0
 800c768:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c76a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c76e:	f113 0f04 	cmn.w	r3, #4
 800c772:	d104      	bne.n	800c77e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c774:	7b7b      	ldrb	r3, [r7, #13]
 800c776:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c778:	2301      	movs	r3, #1
 800c77a:	76fb      	strb	r3, [r7, #27]
 800c77c:	e011      	b.n	800c7a2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c77e:	7e3b      	ldrb	r3, [r7, #24]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00e      	beq.n	800c7a2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6a1b      	ldr	r3, [r3, #32]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d102      	bne.n	800c794 <lwip_netconn_do_writemore+0x348>
 800c78e:	f06f 0306 	mvn.w	r3, #6
 800c792:	e000      	b.n	800c796 <lwip_netconn_do_writemore+0x34a>
 800c794:	2300      	movs	r3, #0
 800c796:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c798:	2301      	movs	r3, #1
 800c79a:	76fb      	strb	r3, [r7, #27]
 800c79c:	e001      	b.n	800c7a2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c7a2:	7efb      	ldrb	r3, [r7, #27]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d015      	beq.n	800c7d4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a1b      	ldr	r3, [r3, #32]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	330c      	adds	r3, #12
 800c7b0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	7ffa      	ldrb	r2, [r7, #31]
 800c7b8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c7c6:	78fb      	ldrb	r3, [r7, #3]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d006      	beq.n	800c7da <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c7cc:	68b8      	ldr	r0, [r7, #8]
 800c7ce:	f00b f8f5 	bl	80179bc <sys_sem_signal>
 800c7d2:	e002      	b.n	800c7da <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7d8:	e000      	b.n	800c7dc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3720      	adds	r7, #32
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7fe fdf8 	bl	800b3ea <netconn_err>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d163      	bne.n	800c8ce <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c810:	2b10      	cmp	r3, #16
 800c812:	d15c      	bne.n	800c8ce <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	785b      	ldrb	r3, [r3, #1]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c81e:	23fb      	movs	r3, #251	; 0xfb
 800c820:	73fb      	strb	r3, [r7, #15]
 800c822:	e054      	b.n	800c8ce <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d04d      	beq.n	800c8ca <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2201      	movs	r2, #1
 800c834:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d006      	beq.n	800c84e <lwip_netconn_do_write+0x6a>
 800c840:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <lwip_netconn_do_write+0xfc>)
 800c842:	f240 7223 	movw	r2, #1827	; 0x723
 800c846:	4927      	ldr	r1, [pc, #156]	; (800c8e4 <lwip_netconn_do_write+0x100>)
 800c848:	4827      	ldr	r0, [pc, #156]	; (800c8e8 <lwip_netconn_do_write+0x104>)
 800c84a:	f00b fb61 	bl	8017f10 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d106      	bne.n	800c864 <lwip_netconn_do_write+0x80>
 800c856:	4b22      	ldr	r3, [pc, #136]	; (800c8e0 <lwip_netconn_do_write+0xfc>)
 800c858:	f240 7224 	movw	r2, #1828	; 0x724
 800c85c:	4923      	ldr	r1, [pc, #140]	; (800c8ec <lwip_netconn_do_write+0x108>)
 800c85e:	4822      	ldr	r0, [pc, #136]	; (800c8e8 <lwip_netconn_do_write+0x104>)
 800c860:	f00b fb56 	bl	8017f10 <iprintf>
        msg->conn->current_msg = msg;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2100      	movs	r1, #0
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff fdea 	bl	800c44c <lwip_netconn_do_writemore>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d02b      	beq.n	800c8d6 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	785b      	ldrb	r3, [r3, #1]
 800c884:	2b01      	cmp	r3, #1
 800c886:	d006      	beq.n	800c896 <lwip_netconn_do_write+0xb2>
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <lwip_netconn_do_write+0xfc>)
 800c88a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c88e:	4918      	ldr	r1, [pc, #96]	; (800c8f0 <lwip_netconn_do_write+0x10c>)
 800c890:	4815      	ldr	r0, [pc, #84]	; (800c8e8 <lwip_netconn_do_write+0x104>)
 800c892:	f00b fb3d 	bl	8017f10 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c896:	4817      	ldr	r0, [pc, #92]	; (800c8f4 <lwip_netconn_do_write+0x110>)
 800c898:	f00b f8f9 	bl	8017a8e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	330c      	adds	r3, #12
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f00b f858 	bl	801795a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c8aa:	4812      	ldr	r0, [pc, #72]	; (800c8f4 <lwip_netconn_do_write+0x110>)
 800c8ac:	f00b f8e0 	bl	8017a70 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d10d      	bne.n	800c8d6 <lwip_netconn_do_write+0xf2>
 800c8ba:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <lwip_netconn_do_write+0xfc>)
 800c8bc:	f240 722c 	movw	r2, #1836	; 0x72c
 800c8c0:	490b      	ldr	r1, [pc, #44]	; (800c8f0 <lwip_netconn_do_write+0x10c>)
 800c8c2:	4809      	ldr	r0, [pc, #36]	; (800c8e8 <lwip_netconn_do_write+0x104>)
 800c8c4:	f00b fb24 	bl	8017f10 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c8c8:	e005      	b.n	800c8d6 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800c8ca:	23f5      	movs	r3, #245	; 0xf5
 800c8cc:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	7bfa      	ldrb	r2, [r7, #15]
 800c8d2:	711a      	strb	r2, [r3, #4]
 800c8d4:	e000      	b.n	800c8d8 <lwip_netconn_do_write+0xf4>
        return;
 800c8d6:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	0801b36c 	.word	0x0801b36c
 800c8e4:	0801b6ac 	.word	0x0801b6ac
 800c8e8:	0801b3b0 	.word	0x0801b3b0
 800c8ec:	0801b834 	.word	0x0801b834
 800c8f0:	0801b6c8 	.word	0x0801b6c8
 800c8f4:	20009b24 	.word	0x20009b24

0800c8f8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	785b      	ldrb	r3, [r3, #1]
 800c90a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d069      	beq.n	800c9ea <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c920:	2b10      	cmp	r3, #16
 800c922:	d162      	bne.n	800c9ea <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c928:	2b03      	cmp	r3, #3
 800c92a:	d002      	beq.n	800c932 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d05b      	beq.n	800c9ea <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	2b03      	cmp	r3, #3
 800c936:	d103      	bne.n	800c940 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	22f5      	movs	r2, #245	; 0xf5
 800c93c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c93e:	e059      	b.n	800c9f4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d103      	bne.n	800c94e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	22fb      	movs	r2, #251	; 0xfb
 800c94a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c94c:	e052      	b.n	800c9f4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	7a1b      	ldrb	r3, [r3, #8]
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d004      	beq.n	800c964 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff f916 	bl	800bb90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d006      	beq.n	800c97c <lwip_netconn_do_close+0x84>
 800c96e:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <lwip_netconn_do_close+0x104>)
 800c970:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c974:	4922      	ldr	r1, [pc, #136]	; (800ca00 <lwip_netconn_do_close+0x108>)
 800c976:	4823      	ldr	r0, [pc, #140]	; (800ca04 <lwip_netconn_do_close+0x10c>)
 800c978:	f00b faca 	bl	8017f10 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2204      	movs	r2, #4
 800c982:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2100      	movs	r1, #0
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff f97a 	bl	800bc8c <lwip_netconn_do_close_internal>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d029      	beq.n	800c9f2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	785b      	ldrb	r3, [r3, #1]
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d006      	beq.n	800c9b6 <lwip_netconn_do_close+0xbe>
 800c9a8:	4b14      	ldr	r3, [pc, #80]	; (800c9fc <lwip_netconn_do_close+0x104>)
 800c9aa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c9ae:	4916      	ldr	r1, [pc, #88]	; (800ca08 <lwip_netconn_do_close+0x110>)
 800c9b0:	4814      	ldr	r0, [pc, #80]	; (800ca04 <lwip_netconn_do_close+0x10c>)
 800c9b2:	f00b faad 	bl	8017f10 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c9b6:	4815      	ldr	r0, [pc, #84]	; (800ca0c <lwip_netconn_do_close+0x114>)
 800c9b8:	f00b f869 	bl	8017a8e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	330c      	adds	r3, #12
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f00a ffc8 	bl	801795a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c9ca:	4810      	ldr	r0, [pc, #64]	; (800ca0c <lwip_netconn_do_close+0x114>)
 800c9cc:	f00b f850 	bl	8017a70 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	785b      	ldrb	r3, [r3, #1]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00b      	beq.n	800c9f2 <lwip_netconn_do_close+0xfa>
 800c9da:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <lwip_netconn_do_close+0x104>)
 800c9dc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c9e0:	4909      	ldr	r1, [pc, #36]	; (800ca08 <lwip_netconn_do_close+0x110>)
 800c9e2:	4808      	ldr	r0, [pc, #32]	; (800ca04 <lwip_netconn_do_close+0x10c>)
 800c9e4:	f00b fa94 	bl	8017f10 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c9e8:	e003      	b.n	800c9f2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	22f5      	movs	r2, #245	; 0xf5
 800c9ee:	711a      	strb	r2, [r3, #4]
 800c9f0:	e000      	b.n	800c9f4 <lwip_netconn_do_close+0xfc>
      return;
 800c9f2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	0801b36c 	.word	0x0801b36c
 800ca00:	0801b6ac 	.word	0x0801b6ac
 800ca04:	0801b3b0 	.word	0x0801b3b0
 800ca08:	0801b6c8 	.word	0x0801b6c8
 800ca0c:	20009b24 	.word	0x20009b24

0800ca10 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d013      	beq.n	800ca46 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f001 fefe 	bl	800e82c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	605a      	str	r2, [r3, #4]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	2005      	movs	r0, #5
 800ca42:	f001 f853 	bl	800daec <memp_free>
  }
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d108      	bne.n	800ca70 <netbuf_next+0x20>
 800ca5e:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <netbuf_next+0x54>)
 800ca60:	22e0      	movs	r2, #224	; 0xe0
 800ca62:	4911      	ldr	r1, [pc, #68]	; (800caa8 <netbuf_next+0x58>)
 800ca64:	4811      	ldr	r0, [pc, #68]	; (800caac <netbuf_next+0x5c>)
 800ca66:	f00b fa53 	bl	8017f10 <iprintf>
 800ca6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca6e:	e014      	b.n	800ca9a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <netbuf_next+0x30>
    return -1;
 800ca7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca7e:	e00c      	b.n	800ca9a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d101      	bne.n	800ca98 <netbuf_next+0x48>
    return 1;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e000      	b.n	800ca9a <netbuf_next+0x4a>
  }
  return 0;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	0801b860 	.word	0x0801b860
 800caa8:	0801b9c0 	.word	0x0801b9c0
 800caac:	0801b8b0 	.word	0x0801b8b0

0800cab0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800caba:	f008 fb89 	bl	80151d0 <sys_timeouts_sleeptime>
 800cabe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cac6:	d10b      	bne.n	800cae0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cac8:	4813      	ldr	r0, [pc, #76]	; (800cb18 <tcpip_timeouts_mbox_fetch+0x68>)
 800caca:	f00a ffe0 	bl	8017a8e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cace:	2200      	movs	r2, #0
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f00a feb6 	bl	8017844 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cad8:	480f      	ldr	r0, [pc, #60]	; (800cb18 <tcpip_timeouts_mbox_fetch+0x68>)
 800cada:	f00a ffc9 	bl	8017a70 <sys_mutex_lock>
    return;
 800cade:	e018      	b.n	800cb12 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cae6:	f008 fb39 	bl	801515c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800caea:	e7e6      	b.n	800caba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800caec:	480a      	ldr	r0, [pc, #40]	; (800cb18 <tcpip_timeouts_mbox_fetch+0x68>)
 800caee:	f00a ffce 	bl	8017a8e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f00a fea4 	bl	8017844 <sys_arch_mbox_fetch>
 800cafc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cafe:	4806      	ldr	r0, [pc, #24]	; (800cb18 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb00:	f00a ffb6 	bl	8017a70 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb0a:	d102      	bne.n	800cb12 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cb0c:	f008 fb26 	bl	801515c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cb10:	e7d3      	b.n	800caba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20009b24 	.word	0x20009b24

0800cb1c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cb24:	4810      	ldr	r0, [pc, #64]	; (800cb68 <tcpip_thread+0x4c>)
 800cb26:	f00a ffa3 	bl	8017a70 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cb2a:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <tcpip_thread+0x50>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d005      	beq.n	800cb3e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cb32:	4b0e      	ldr	r3, [pc, #56]	; (800cb6c <tcpip_thread+0x50>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a0e      	ldr	r2, [pc, #56]	; (800cb70 <tcpip_thread+0x54>)
 800cb38:	6812      	ldr	r2, [r2, #0]
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb3e:	f107 030c 	add.w	r3, r7, #12
 800cb42:	4619      	mov	r1, r3
 800cb44:	480b      	ldr	r0, [pc, #44]	; (800cb74 <tcpip_thread+0x58>)
 800cb46:	f7ff ffb3 	bl	800cab0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb50:	4b09      	ldr	r3, [pc, #36]	; (800cb78 <tcpip_thread+0x5c>)
 800cb52:	2291      	movs	r2, #145	; 0x91
 800cb54:	4909      	ldr	r1, [pc, #36]	; (800cb7c <tcpip_thread+0x60>)
 800cb56:	480a      	ldr	r0, [pc, #40]	; (800cb80 <tcpip_thread+0x64>)
 800cb58:	f00b f9da 	bl	8017f10 <iprintf>
      continue;
 800cb5c:	e003      	b.n	800cb66 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 f80f 	bl	800cb84 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cb66:	e7ea      	b.n	800cb3e <tcpip_thread+0x22>
 800cb68:	20009b24 	.word	0x20009b24
 800cb6c:	20009b18 	.word	0x20009b18
 800cb70:	20009b1c 	.word	0x20009b1c
 800cb74:	20009b20 	.word	0x20009b20
 800cb78:	0801b9f8 	.word	0x0801b9f8
 800cb7c:	0801ba28 	.word	0x0801ba28
 800cb80:	0801ba48 	.word	0x0801ba48

0800cb84 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d026      	beq.n	800cbe2 <tcpip_thread_handle_msg+0x5e>
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	dc2b      	bgt.n	800cbf0 <tcpip_thread_handle_msg+0x6c>
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <tcpip_thread_handle_msg+0x1e>
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d015      	beq.n	800cbcc <tcpip_thread_handle_msg+0x48>
 800cba0:	e026      	b.n	800cbf0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6850      	ldr	r0, [r2, #4]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	6892      	ldr	r2, [r2, #8]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	4798      	blx	r3
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d004      	beq.n	800cbc2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f001 fe35 	bl	800e82c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	2008      	movs	r0, #8
 800cbc6:	f000 ff91 	bl	800daec <memp_free>
      break;
 800cbca:	e018      	b.n	800cbfe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	6892      	ldr	r2, [r2, #8]
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cbd8:	6879      	ldr	r1, [r7, #4]
 800cbda:	2007      	movs	r0, #7
 800cbdc:	f000 ff86 	bl	800daec <memp_free>
      break;
 800cbe0:	e00d      	b.n	800cbfe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	6892      	ldr	r2, [r2, #8]
 800cbea:	4610      	mov	r0, r2
 800cbec:	4798      	blx	r3
      break;
 800cbee:	e006      	b.n	800cbfe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cbf0:	4b05      	ldr	r3, [pc, #20]	; (800cc08 <tcpip_thread_handle_msg+0x84>)
 800cbf2:	22cf      	movs	r2, #207	; 0xcf
 800cbf4:	4905      	ldr	r1, [pc, #20]	; (800cc0c <tcpip_thread_handle_msg+0x88>)
 800cbf6:	4806      	ldr	r0, [pc, #24]	; (800cc10 <tcpip_thread_handle_msg+0x8c>)
 800cbf8:	f00b f98a 	bl	8017f10 <iprintf>
      break;
 800cbfc:	bf00      	nop
  }
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	0801b9f8 	.word	0x0801b9f8
 800cc0c:	0801ba28 	.word	0x0801ba28
 800cc10:	0801ba48 	.word	0x0801ba48

0800cc14 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc20:	481a      	ldr	r0, [pc, #104]	; (800cc8c <tcpip_inpkt+0x78>)
 800cc22:	f00a fe57 	bl	80178d4 <sys_mbox_valid>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d105      	bne.n	800cc38 <tcpip_inpkt+0x24>
 800cc2c:	4b18      	ldr	r3, [pc, #96]	; (800cc90 <tcpip_inpkt+0x7c>)
 800cc2e:	22fc      	movs	r2, #252	; 0xfc
 800cc30:	4918      	ldr	r1, [pc, #96]	; (800cc94 <tcpip_inpkt+0x80>)
 800cc32:	4819      	ldr	r0, [pc, #100]	; (800cc98 <tcpip_inpkt+0x84>)
 800cc34:	f00b f96c 	bl	8017f10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cc38:	2008      	movs	r0, #8
 800cc3a:	f000 fee1 	bl	800da00 <memp_malloc>
 800cc3e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d102      	bne.n	800cc4c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc4a:	e01a      	b.n	800cc82 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc64:	6979      	ldr	r1, [r7, #20]
 800cc66:	4809      	ldr	r0, [pc, #36]	; (800cc8c <tcpip_inpkt+0x78>)
 800cc68:	f00a fdd2 	bl	8017810 <sys_mbox_trypost>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d006      	beq.n	800cc80 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc72:	6979      	ldr	r1, [r7, #20]
 800cc74:	2008      	movs	r0, #8
 800cc76:	f000 ff39 	bl	800daec <memp_free>
    return ERR_MEM;
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc7e:	e000      	b.n	800cc82 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cc80:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3718      	adds	r7, #24
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20009b20 	.word	0x20009b20
 800cc90:	0801b9f8 	.word	0x0801b9f8
 800cc94:	0801ba70 	.word	0x0801ba70
 800cc98:	0801ba48 	.word	0x0801ba48

0800cc9c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccac:	f003 0318 	and.w	r3, r3, #24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d006      	beq.n	800ccc2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ccb4:	4a08      	ldr	r2, [pc, #32]	; (800ccd8 <tcpip_input+0x3c>)
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7ff ffab 	bl	800cc14 <tcpip_inpkt>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	e005      	b.n	800ccce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ccc2:	4a06      	ldr	r2, [pc, #24]	; (800ccdc <tcpip_input+0x40>)
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ffa4 	bl	800cc14 <tcpip_inpkt>
 800cccc:	4603      	mov	r3, r0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0801760d 	.word	0x0801760d
 800ccdc:	08016529 	.word	0x08016529

0800cce0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ccea:	4819      	ldr	r0, [pc, #100]	; (800cd50 <tcpip_try_callback+0x70>)
 800ccec:	f00a fdf2 	bl	80178d4 <sys_mbox_valid>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <tcpip_try_callback+0x24>
 800ccf6:	4b17      	ldr	r3, [pc, #92]	; (800cd54 <tcpip_try_callback+0x74>)
 800ccf8:	f240 125d 	movw	r2, #349	; 0x15d
 800ccfc:	4916      	ldr	r1, [pc, #88]	; (800cd58 <tcpip_try_callback+0x78>)
 800ccfe:	4817      	ldr	r0, [pc, #92]	; (800cd5c <tcpip_try_callback+0x7c>)
 800cd00:	f00b f906 	bl	8017f10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cd04:	2007      	movs	r0, #7
 800cd06:	f000 fe7b 	bl	800da00 <memp_malloc>
 800cd0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d102      	bne.n	800cd18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd16:	e017      	b.n	800cd48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd2a:	68f9      	ldr	r1, [r7, #12]
 800cd2c:	4808      	ldr	r0, [pc, #32]	; (800cd50 <tcpip_try_callback+0x70>)
 800cd2e:	f00a fd6f 	bl	8017810 <sys_mbox_trypost>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cd38:	68f9      	ldr	r1, [r7, #12]
 800cd3a:	2007      	movs	r0, #7
 800cd3c:	f000 fed6 	bl	800daec <memp_free>
    return ERR_MEM;
 800cd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd44:	e000      	b.n	800cd48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	20009b20 	.word	0x20009b20
 800cd54:	0801b9f8 	.word	0x0801b9f8
 800cd58:	0801ba70 	.word	0x0801ba70
 800cd5c:	0801ba48 	.word	0x0801ba48

0800cd60 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cd6c:	4806      	ldr	r0, [pc, #24]	; (800cd88 <tcpip_send_msg_wait_sem+0x28>)
 800cd6e:	f00a fe7f 	bl	8017a70 <sys_mutex_lock>
  fn(apimsg);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68b8      	ldr	r0, [r7, #8]
 800cd76:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cd78:	4803      	ldr	r0, [pc, #12]	; (800cd88 <tcpip_send_msg_wait_sem+0x28>)
 800cd7a:	f00a fe88 	bl	8017a8e <sys_mutex_unlock>
  return ERR_OK;
 800cd7e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	20009b24 	.word	0x20009b24

0800cd8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cd96:	f000 f98b 	bl	800d0b0 <lwip_init>

  tcpip_init_done = initfunc;
 800cd9a:	4a17      	ldr	r2, [pc, #92]	; (800cdf8 <tcpip_init+0x6c>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cda0:	4a16      	ldr	r2, [pc, #88]	; (800cdfc <tcpip_init+0x70>)
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cda6:	2106      	movs	r1, #6
 800cda8:	4815      	ldr	r0, [pc, #84]	; (800ce00 <tcpip_init+0x74>)
 800cdaa:	f00a fd05 	bl	80177b8 <sys_mbox_new>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d006      	beq.n	800cdc2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cdb4:	4b13      	ldr	r3, [pc, #76]	; (800ce04 <tcpip_init+0x78>)
 800cdb6:	f240 2261 	movw	r2, #609	; 0x261
 800cdba:	4913      	ldr	r1, [pc, #76]	; (800ce08 <tcpip_init+0x7c>)
 800cdbc:	4813      	ldr	r0, [pc, #76]	; (800ce0c <tcpip_init+0x80>)
 800cdbe:	f00b f8a7 	bl	8017f10 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cdc2:	4813      	ldr	r0, [pc, #76]	; (800ce10 <tcpip_init+0x84>)
 800cdc4:	f00a fe3e 	bl	8017a44 <sys_mutex_new>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d006      	beq.n	800cddc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cdce:	4b0d      	ldr	r3, [pc, #52]	; (800ce04 <tcpip_init+0x78>)
 800cdd0:	f240 2265 	movw	r2, #613	; 0x265
 800cdd4:	490f      	ldr	r1, [pc, #60]	; (800ce14 <tcpip_init+0x88>)
 800cdd6:	480d      	ldr	r0, [pc, #52]	; (800ce0c <tcpip_init+0x80>)
 800cdd8:	f00b f89a 	bl	8017f10 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cddc:	2318      	movs	r3, #24
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde4:	2200      	movs	r2, #0
 800cde6:	490c      	ldr	r1, [pc, #48]	; (800ce18 <tcpip_init+0x8c>)
 800cde8:	480c      	ldr	r0, [pc, #48]	; (800ce1c <tcpip_init+0x90>)
 800cdea:	f00a fe5d 	bl	8017aa8 <sys_thread_new>
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20009b18 	.word	0x20009b18
 800cdfc:	20009b1c 	.word	0x20009b1c
 800ce00:	20009b20 	.word	0x20009b20
 800ce04:	0801b9f8 	.word	0x0801b9f8
 800ce08:	0801ba80 	.word	0x0801ba80
 800ce0c:	0801ba48 	.word	0x0801ba48
 800ce10:	20009b24 	.word	0x20009b24
 800ce14:	0801baa4 	.word	0x0801baa4
 800ce18:	0800cb1d 	.word	0x0800cb1d
 800ce1c:	0801bac8 	.word	0x0801bac8

0800ce20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	021b      	lsls	r3, r3, #8
 800ce2e:	b21a      	sxth	r2, r3
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	b21b      	sxth	r3, r3
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	b21b      	sxth	r3, r3
 800ce3c:	b29b      	uxth	r3, r3
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b083      	sub	sp, #12
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	061a      	lsls	r2, r3, #24
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	021b      	lsls	r3, r3, #8
 800ce5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	0a1b      	lsrs	r3, r3, #8
 800ce64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	0e1b      	lsrs	r3, r3, #24
 800ce6e:	4313      	orrs	r3, r2
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b089      	sub	sp, #36	; 0x24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00d      	beq.n	800cebc <lwip_standard_chksum+0x40>
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	dd0a      	ble.n	800cebc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cea6:	69fa      	ldr	r2, [r7, #28]
 800cea8:	1c53      	adds	r3, r2, #1
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	f107 030e 	add.w	r3, r7, #14
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	7812      	ldrb	r2, [r2, #0]
 800ceb4:	701a      	strb	r2, [r3, #0]
    len--;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cec0:	e00a      	b.n	800ced8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	1c9a      	adds	r2, r3, #2
 800cec6:	61ba      	str	r2, [r7, #24]
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	4413      	add	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	3b02      	subs	r3, #2
 800ced6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	dcf1      	bgt.n	800cec2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dd04      	ble.n	800ceee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cee4:	f107 030e 	add.w	r3, r7, #14
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	7812      	ldrb	r2, [r2, #0]
 800ceec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	461a      	mov	r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	4413      	add	r3, r2
 800cef6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	0c1a      	lsrs	r2, r3, #16
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	4413      	add	r3, r2
 800cf02:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	0c1a      	lsrs	r2, r3, #16
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	4413      	add	r3, r2
 800cf0e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d007      	beq.n	800cf26 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	021b      	lsls	r3, r3, #8
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	0a1b      	lsrs	r3, r3, #8
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	b29b      	uxth	r3, r3
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3724      	adds	r7, #36	; 0x24
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	607b      	str	r3, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	72fb      	strb	r3, [r7, #11]
 800cf44:	4613      	mov	r3, r2
 800cf46:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	e02b      	b.n	800cfaa <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	685a      	ldr	r2, [r3, #4]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	895b      	ldrh	r3, [r3, #10]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	f7ff ff8d 	bl	800ce7c <lwip_standard_chksum>
 800cf62:	4603      	mov	r3, r0
 800cf64:	461a      	mov	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4413      	add	r3, r2
 800cf6a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	0c1a      	lsrs	r2, r3, #16
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	4413      	add	r3, r2
 800cf76:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	895b      	ldrh	r3, [r3, #10]
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00e      	beq.n	800cfa4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	bf0c      	ite	eq
 800cf8c:	2301      	moveq	r3, #1
 800cf8e:	2300      	movne	r3, #0
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	021b      	lsls	r3, r3, #8
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	0a1b      	lsrs	r3, r3, #8
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1d0      	bne.n	800cf52 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d007      	beq.n	800cfc6 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	021b      	lsls	r3, r3, #8
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	0a1b      	lsrs	r3, r3, #8
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800cfc6:	7afb      	ldrb	r3, [r7, #11]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff ff28 	bl	800ce20 <lwip_htons>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800cfda:	893b      	ldrh	r3, [r7, #8]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff1f 	bl	800ce20 <lwip_htons>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4413      	add	r3, r2
 800cfea:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	0c1a      	lsrs	r2, r3, #16
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	4413      	add	r3, r2
 800cff6:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	0c1a      	lsrs	r2, r3, #16
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4413      	add	r3, r2
 800d002:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	b29b      	uxth	r3, r3
 800d008:	43db      	mvns	r3, r3
 800d00a:	b29b      	uxth	r3, r3
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	607b      	str	r3, [r7, #4]
 800d01e:	460b      	mov	r3, r1
 800d020:	72fb      	strb	r3, [r7, #11]
 800d022:	4613      	mov	r3, r2
 800d024:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	0c1b      	lsrs	r3, r3, #16
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	4413      	add	r3, r2
 800d03a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	b29b      	uxth	r3, r3
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	4413      	add	r3, r2
 800d04a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	0c1b      	lsrs	r3, r3, #16
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	4413      	add	r3, r2
 800d054:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	0c1a      	lsrs	r2, r3, #16
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	4413      	add	r3, r2
 800d060:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	0c1a      	lsrs	r2, r3, #16
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	4413      	add	r3, r2
 800d06c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d06e:	893a      	ldrh	r2, [r7, #8]
 800d070:	7af9      	ldrb	r1, [r7, #11]
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f7ff ff5e 	bl	800cf36 <inet_cksum_pseudo_base>
 800d07a:	4603      	mov	r3, r0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af02      	add	r7, sp, #8
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	607b      	str	r3, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	72fb      	strb	r3, [r7, #11]
 800d092:	4613      	mov	r3, r2
 800d094:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d096:	893a      	ldrh	r2, [r7, #8]
 800d098:	7af9      	ldrb	r1, [r7, #11]
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f7ff ffb7 	bl	800d014 <inet_chksum_pseudo>
 800d0a6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d0ba:	f00a fcb7 	bl	8017a2c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d0be:	f000 f8d3 	bl	800d268 <mem_init>
  memp_init();
 800d0c2:	f000 fc2f 	bl	800d924 <memp_init>
  pbuf_init();
  netif_init();
 800d0c6:	f000 fd3b 	bl	800db40 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d0ca:	f001 fe49 	bl	800ed60 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d0ce:	f007 fffd 	bl	80150cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d0d2:	bf00      	nop
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
	...

0800d0dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d0e6:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <ptr_to_mem+0x20>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	88fb      	ldrh	r3, [r7, #6]
 800d0ec:	4413      	add	r3, r2
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	2000eb54 	.word	0x2000eb54

0800d100 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d108:	4b05      	ldr	r3, [pc, #20]	; (800d120 <mem_to_ptr+0x20>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	b29b      	uxth	r3, r3
}
 800d112:	4618      	mov	r0, r3
 800d114:	370c      	adds	r7, #12
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
 800d11e:	bf00      	nop
 800d120:	2000eb54 	.word	0x2000eb54

0800d124 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d12c:	4b45      	ldr	r3, [pc, #276]	; (800d244 <plug_holes+0x120>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	429a      	cmp	r2, r3
 800d134:	d206      	bcs.n	800d144 <plug_holes+0x20>
 800d136:	4b44      	ldr	r3, [pc, #272]	; (800d248 <plug_holes+0x124>)
 800d138:	f240 12df 	movw	r2, #479	; 0x1df
 800d13c:	4943      	ldr	r1, [pc, #268]	; (800d24c <plug_holes+0x128>)
 800d13e:	4844      	ldr	r0, [pc, #272]	; (800d250 <plug_holes+0x12c>)
 800d140:	f00a fee6 	bl	8017f10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d144:	4b43      	ldr	r3, [pc, #268]	; (800d254 <plug_holes+0x130>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d306      	bcc.n	800d15c <plug_holes+0x38>
 800d14e:	4b3e      	ldr	r3, [pc, #248]	; (800d248 <plug_holes+0x124>)
 800d150:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d154:	4940      	ldr	r1, [pc, #256]	; (800d258 <plug_holes+0x134>)
 800d156:	483e      	ldr	r0, [pc, #248]	; (800d250 <plug_holes+0x12c>)
 800d158:	f00a feda 	bl	8017f10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	791b      	ldrb	r3, [r3, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <plug_holes+0x4e>
 800d164:	4b38      	ldr	r3, [pc, #224]	; (800d248 <plug_holes+0x124>)
 800d166:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d16a:	493c      	ldr	r1, [pc, #240]	; (800d25c <plug_holes+0x138>)
 800d16c:	4838      	ldr	r0, [pc, #224]	; (800d250 <plug_holes+0x12c>)
 800d16e:	f00a fecf 	bl	8017f10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d17a:	d906      	bls.n	800d18a <plug_holes+0x66>
 800d17c:	4b32      	ldr	r3, [pc, #200]	; (800d248 <plug_holes+0x124>)
 800d17e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d182:	4937      	ldr	r1, [pc, #220]	; (800d260 <plug_holes+0x13c>)
 800d184:	4832      	ldr	r0, [pc, #200]	; (800d250 <plug_holes+0x12c>)
 800d186:	f00a fec3 	bl	8017f10 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff ffa4 	bl	800d0dc <ptr_to_mem>
 800d194:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d024      	beq.n	800d1e8 <plug_holes+0xc4>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	791b      	ldrb	r3, [r3, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d120      	bne.n	800d1e8 <plug_holes+0xc4>
 800d1a6:	4b2b      	ldr	r3, [pc, #172]	; (800d254 <plug_holes+0x130>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d01b      	beq.n	800d1e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d1b0:	4b2c      	ldr	r3, [pc, #176]	; (800d264 <plug_holes+0x140>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68fa      	ldr	r2, [r7, #12]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d102      	bne.n	800d1c0 <plug_holes+0x9c>
      lfree = mem;
 800d1ba:	4a2a      	ldr	r2, [pc, #168]	; (800d264 <plug_holes+0x140>)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	881a      	ldrh	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d1d0:	d00a      	beq.n	800d1e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	881b      	ldrh	r3, [r3, #0]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff ff80 	bl	800d0dc <ptr_to_mem>
 800d1dc:	4604      	mov	r4, r0
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff ff8e 	bl	800d100 <mem_to_ptr>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	885b      	ldrh	r3, [r3, #2]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff ff75 	bl	800d0dc <ptr_to_mem>
 800d1f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d01f      	beq.n	800d23c <plug_holes+0x118>
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	791b      	ldrb	r3, [r3, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d11b      	bne.n	800d23c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d204:	4b17      	ldr	r3, [pc, #92]	; (800d264 <plug_holes+0x140>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d102      	bne.n	800d214 <plug_holes+0xf0>
      lfree = pmem;
 800d20e:	4a15      	ldr	r2, [pc, #84]	; (800d264 <plug_holes+0x140>)
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	881a      	ldrh	r2, [r3, #0]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d224:	d00a      	beq.n	800d23c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7ff ff56 	bl	800d0dc <ptr_to_mem>
 800d230:	4604      	mov	r4, r0
 800d232:	68b8      	ldr	r0, [r7, #8]
 800d234:	f7ff ff64 	bl	800d100 <mem_to_ptr>
 800d238:	4603      	mov	r3, r0
 800d23a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d23c:	bf00      	nop
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	bd90      	pop	{r4, r7, pc}
 800d244:	2000eb54 	.word	0x2000eb54
 800d248:	0801bad8 	.word	0x0801bad8
 800d24c:	0801bb08 	.word	0x0801bb08
 800d250:	0801bb20 	.word	0x0801bb20
 800d254:	2000eb58 	.word	0x2000eb58
 800d258:	0801bb48 	.word	0x0801bb48
 800d25c:	0801bb64 	.word	0x0801bb64
 800d260:	0801bb80 	.word	0x0801bb80
 800d264:	2000eb60 	.word	0x2000eb60

0800d268 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d26e:	4b1f      	ldr	r3, [pc, #124]	; (800d2ec <mem_init+0x84>)
 800d270:	3303      	adds	r3, #3
 800d272:	f023 0303 	bic.w	r3, r3, #3
 800d276:	461a      	mov	r2, r3
 800d278:	4b1d      	ldr	r3, [pc, #116]	; (800d2f0 <mem_init+0x88>)
 800d27a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d27c:	4b1c      	ldr	r3, [pc, #112]	; (800d2f0 <mem_init+0x88>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d288:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d296:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800d29a:	f7ff ff1f 	bl	800d0dc <ptr_to_mem>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4a14      	ldr	r2, [pc, #80]	; (800d2f4 <mem_init+0x8c>)
 800d2a2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d2a4:	4b13      	ldr	r3, [pc, #76]	; (800d2f4 <mem_init+0x8c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d2ac:	4b11      	ldr	r3, [pc, #68]	; (800d2f4 <mem_init+0x8c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d2b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d2b6:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <mem_init+0x8c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d2be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d2c0:	4b0b      	ldr	r3, [pc, #44]	; (800d2f0 <mem_init+0x88>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	; (800d2f8 <mem_init+0x90>)
 800d2c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d2c8:	480c      	ldr	r0, [pc, #48]	; (800d2fc <mem_init+0x94>)
 800d2ca:	f00a fbbb 	bl	8017a44 <sys_mutex_new>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d006      	beq.n	800d2e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <mem_init+0x98>)
 800d2d6:	f240 221f 	movw	r2, #543	; 0x21f
 800d2da:	490a      	ldr	r1, [pc, #40]	; (800d304 <mem_init+0x9c>)
 800d2dc:	480a      	ldr	r0, [pc, #40]	; (800d308 <mem_init+0xa0>)
 800d2de:	f00a fe17 	bl	8017f10 <iprintf>
  }
}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20009b40 	.word	0x20009b40
 800d2f0:	2000eb54 	.word	0x2000eb54
 800d2f4:	2000eb58 	.word	0x2000eb58
 800d2f8:	2000eb60 	.word	0x2000eb60
 800d2fc:	2000eb5c 	.word	0x2000eb5c
 800d300:	0801bad8 	.word	0x0801bad8
 800d304:	0801bbac 	.word	0x0801bbac
 800d308:	0801bb20 	.word	0x0801bb20

0800d30c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f7ff fef3 	bl	800d100 <mem_to_ptr>
 800d31a:	4603      	mov	r3, r0
 800d31c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff feda 	bl	800d0dc <ptr_to_mem>
 800d328:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	885b      	ldrh	r3, [r3, #2]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fed4 	bl	800d0dc <ptr_to_mem>
 800d334:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d33e:	d818      	bhi.n	800d372 <mem_link_valid+0x66>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	885b      	ldrh	r3, [r3, #2]
 800d344:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d348:	d813      	bhi.n	800d372 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d34e:	8afa      	ldrh	r2, [r7, #22]
 800d350:	429a      	cmp	r2, r3
 800d352:	d004      	beq.n	800d35e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	881b      	ldrh	r3, [r3, #0]
 800d358:	8afa      	ldrh	r2, [r7, #22]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d109      	bne.n	800d372 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d35e:	4b08      	ldr	r3, [pc, #32]	; (800d380 <mem_link_valid+0x74>)
 800d360:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	429a      	cmp	r2, r3
 800d366:	d006      	beq.n	800d376 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	885b      	ldrh	r3, [r3, #2]
 800d36c:	8afa      	ldrh	r2, [r7, #22]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d001      	beq.n	800d376 <mem_link_valid+0x6a>
    return 0;
 800d372:	2300      	movs	r3, #0
 800d374:	e000      	b.n	800d378 <mem_link_valid+0x6c>
  }
  return 1;
 800d376:	2301      	movs	r3, #1
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3718      	adds	r7, #24
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	2000eb58 	.word	0x2000eb58

0800d384 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d070      	beq.n	800d474 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f003 0303 	and.w	r3, r3, #3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00d      	beq.n	800d3b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d39c:	4b37      	ldr	r3, [pc, #220]	; (800d47c <mem_free+0xf8>)
 800d39e:	f240 2273 	movw	r2, #627	; 0x273
 800d3a2:	4937      	ldr	r1, [pc, #220]	; (800d480 <mem_free+0xfc>)
 800d3a4:	4837      	ldr	r0, [pc, #220]	; (800d484 <mem_free+0x100>)
 800d3a6:	f00a fdb3 	bl	8017f10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3aa:	f00a fb9d 	bl	8017ae8 <sys_arch_protect>
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f00a fba7 	bl	8017b04 <sys_arch_unprotect>
    return;
 800d3b6:	e05e      	b.n	800d476 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	3b08      	subs	r3, #8
 800d3bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d3be:	4b32      	ldr	r3, [pc, #200]	; (800d488 <mem_free+0x104>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	69fa      	ldr	r2, [r7, #28]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d306      	bcc.n	800d3d6 <mem_free+0x52>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f103 020c 	add.w	r2, r3, #12
 800d3ce:	4b2f      	ldr	r3, [pc, #188]	; (800d48c <mem_free+0x108>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d90d      	bls.n	800d3f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d3d6:	4b29      	ldr	r3, [pc, #164]	; (800d47c <mem_free+0xf8>)
 800d3d8:	f240 227f 	movw	r2, #639	; 0x27f
 800d3dc:	492c      	ldr	r1, [pc, #176]	; (800d490 <mem_free+0x10c>)
 800d3de:	4829      	ldr	r0, [pc, #164]	; (800d484 <mem_free+0x100>)
 800d3e0:	f00a fd96 	bl	8017f10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d3e4:	f00a fb80 	bl	8017ae8 <sys_arch_protect>
 800d3e8:	6138      	str	r0, [r7, #16]
 800d3ea:	6938      	ldr	r0, [r7, #16]
 800d3ec:	f00a fb8a 	bl	8017b04 <sys_arch_unprotect>
    return;
 800d3f0:	e041      	b.n	800d476 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3f2:	4828      	ldr	r0, [pc, #160]	; (800d494 <mem_free+0x110>)
 800d3f4:	f00a fb3c 	bl	8017a70 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	791b      	ldrb	r3, [r3, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d110      	bne.n	800d422 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d400:	4b1e      	ldr	r3, [pc, #120]	; (800d47c <mem_free+0xf8>)
 800d402:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d406:	4924      	ldr	r1, [pc, #144]	; (800d498 <mem_free+0x114>)
 800d408:	481e      	ldr	r0, [pc, #120]	; (800d484 <mem_free+0x100>)
 800d40a:	f00a fd81 	bl	8017f10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d40e:	4821      	ldr	r0, [pc, #132]	; (800d494 <mem_free+0x110>)
 800d410:	f00a fb3d 	bl	8017a8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d414:	f00a fb68 	bl	8017ae8 <sys_arch_protect>
 800d418:	6178      	str	r0, [r7, #20]
 800d41a:	6978      	ldr	r0, [r7, #20]
 800d41c:	f00a fb72 	bl	8017b04 <sys_arch_unprotect>
    return;
 800d420:	e029      	b.n	800d476 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d422:	69f8      	ldr	r0, [r7, #28]
 800d424:	f7ff ff72 	bl	800d30c <mem_link_valid>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d110      	bne.n	800d450 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <mem_free+0xf8>)
 800d430:	f240 2295 	movw	r2, #661	; 0x295
 800d434:	4919      	ldr	r1, [pc, #100]	; (800d49c <mem_free+0x118>)
 800d436:	4813      	ldr	r0, [pc, #76]	; (800d484 <mem_free+0x100>)
 800d438:	f00a fd6a 	bl	8017f10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d43c:	4815      	ldr	r0, [pc, #84]	; (800d494 <mem_free+0x110>)
 800d43e:	f00a fb26 	bl	8017a8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d442:	f00a fb51 	bl	8017ae8 <sys_arch_protect>
 800d446:	61b8      	str	r0, [r7, #24]
 800d448:	69b8      	ldr	r0, [r7, #24]
 800d44a:	f00a fb5b 	bl	8017b04 <sys_arch_unprotect>
    return;
 800d44e:	e012      	b.n	800d476 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	2200      	movs	r2, #0
 800d454:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d456:	4b12      	ldr	r3, [pc, #72]	; (800d4a0 <mem_free+0x11c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d202      	bcs.n	800d466 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d460:	4a0f      	ldr	r2, [pc, #60]	; (800d4a0 <mem_free+0x11c>)
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d466:	69f8      	ldr	r0, [r7, #28]
 800d468:	f7ff fe5c 	bl	800d124 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d46c:	4809      	ldr	r0, [pc, #36]	; (800d494 <mem_free+0x110>)
 800d46e:	f00a fb0e 	bl	8017a8e <sys_mutex_unlock>
 800d472:	e000      	b.n	800d476 <mem_free+0xf2>
    return;
 800d474:	bf00      	nop
}
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	0801bad8 	.word	0x0801bad8
 800d480:	0801bbc8 	.word	0x0801bbc8
 800d484:	0801bb20 	.word	0x0801bb20
 800d488:	2000eb54 	.word	0x2000eb54
 800d48c:	2000eb58 	.word	0x2000eb58
 800d490:	0801bbec 	.word	0x0801bbec
 800d494:	2000eb5c 	.word	0x2000eb5c
 800d498:	0801bc08 	.word	0x0801bc08
 800d49c:	0801bc30 	.word	0x0801bc30
 800d4a0:	2000eb60 	.word	0x2000eb60

0800d4a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d4b0:	887b      	ldrh	r3, [r7, #2]
 800d4b2:	3303      	adds	r3, #3
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d4bc:	8bfb      	ldrh	r3, [r7, #30]
 800d4be:	2b0b      	cmp	r3, #11
 800d4c0:	d801      	bhi.n	800d4c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d4c6:	8bfb      	ldrh	r3, [r7, #30]
 800d4c8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d4cc:	d803      	bhi.n	800d4d6 <mem_trim+0x32>
 800d4ce:	8bfa      	ldrh	r2, [r7, #30]
 800d4d0:	887b      	ldrh	r3, [r7, #2]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d201      	bcs.n	800d4da <mem_trim+0x36>
    return NULL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e0d8      	b.n	800d68c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d4da:	4b6e      	ldr	r3, [pc, #440]	; (800d694 <mem_trim+0x1f0>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d304      	bcc.n	800d4ee <mem_trim+0x4a>
 800d4e4:	4b6c      	ldr	r3, [pc, #432]	; (800d698 <mem_trim+0x1f4>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d306      	bcc.n	800d4fc <mem_trim+0x58>
 800d4ee:	4b6b      	ldr	r3, [pc, #428]	; (800d69c <mem_trim+0x1f8>)
 800d4f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d4f4:	496a      	ldr	r1, [pc, #424]	; (800d6a0 <mem_trim+0x1fc>)
 800d4f6:	486b      	ldr	r0, [pc, #428]	; (800d6a4 <mem_trim+0x200>)
 800d4f8:	f00a fd0a 	bl	8017f10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d4fc:	4b65      	ldr	r3, [pc, #404]	; (800d694 <mem_trim+0x1f0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	429a      	cmp	r2, r3
 800d504:	d304      	bcc.n	800d510 <mem_trim+0x6c>
 800d506:	4b64      	ldr	r3, [pc, #400]	; (800d698 <mem_trim+0x1f4>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d307      	bcc.n	800d520 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d510:	f00a faea 	bl	8017ae8 <sys_arch_protect>
 800d514:	60b8      	str	r0, [r7, #8]
 800d516:	68b8      	ldr	r0, [r7, #8]
 800d518:	f00a faf4 	bl	8017b04 <sys_arch_unprotect>
    return rmem;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	e0b5      	b.n	800d68c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3b08      	subs	r3, #8
 800d524:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d526:	69b8      	ldr	r0, [r7, #24]
 800d528:	f7ff fdea 	bl	800d100 <mem_to_ptr>
 800d52c:	4603      	mov	r3, r0
 800d52e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	881a      	ldrh	r2, [r3, #0]
 800d534:	8afb      	ldrh	r3, [r7, #22]
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3b08      	subs	r3, #8
 800d53c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d53e:	8bfa      	ldrh	r2, [r7, #30]
 800d540:	8abb      	ldrh	r3, [r7, #20]
 800d542:	429a      	cmp	r2, r3
 800d544:	d906      	bls.n	800d554 <mem_trim+0xb0>
 800d546:	4b55      	ldr	r3, [pc, #340]	; (800d69c <mem_trim+0x1f8>)
 800d548:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d54c:	4956      	ldr	r1, [pc, #344]	; (800d6a8 <mem_trim+0x204>)
 800d54e:	4855      	ldr	r0, [pc, #340]	; (800d6a4 <mem_trim+0x200>)
 800d550:	f00a fcde 	bl	8017f10 <iprintf>
  if (newsize > size) {
 800d554:	8bfa      	ldrh	r2, [r7, #30]
 800d556:	8abb      	ldrh	r3, [r7, #20]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d901      	bls.n	800d560 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	e095      	b.n	800d68c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d560:	8bfa      	ldrh	r2, [r7, #30]
 800d562:	8abb      	ldrh	r3, [r7, #20]
 800d564:	429a      	cmp	r2, r3
 800d566:	d101      	bne.n	800d56c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	e08f      	b.n	800d68c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d56c:	484f      	ldr	r0, [pc, #316]	; (800d6ac <mem_trim+0x208>)
 800d56e:	f00a fa7f 	bl	8017a70 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff fdb0 	bl	800d0dc <ptr_to_mem>
 800d57c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	791b      	ldrb	r3, [r3, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d13f      	bne.n	800d606 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d58e:	d106      	bne.n	800d59e <mem_trim+0xfa>
 800d590:	4b42      	ldr	r3, [pc, #264]	; (800d69c <mem_trim+0x1f8>)
 800d592:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d596:	4946      	ldr	r1, [pc, #280]	; (800d6b0 <mem_trim+0x20c>)
 800d598:	4842      	ldr	r0, [pc, #264]	; (800d6a4 <mem_trim+0x200>)
 800d59a:	f00a fcb9 	bl	8017f10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	881b      	ldrh	r3, [r3, #0]
 800d5a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d5a4:	8afa      	ldrh	r2, [r7, #22]
 800d5a6:	8bfb      	ldrh	r3, [r7, #30]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d5b0:	4b40      	ldr	r3, [pc, #256]	; (800d6b4 <mem_trim+0x210>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d106      	bne.n	800d5c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d5ba:	89fb      	ldrh	r3, [r7, #14]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fd8d 	bl	800d0dc <ptr_to_mem>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	4a3b      	ldr	r2, [pc, #236]	; (800d6b4 <mem_trim+0x210>)
 800d5c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d5c8:	89fb      	ldrh	r3, [r7, #14]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7ff fd86 	bl	800d0dc <ptr_to_mem>
 800d5d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	89ba      	ldrh	r2, [r7, #12]
 800d5dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	8afa      	ldrh	r2, [r7, #22]
 800d5e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	89fa      	ldrh	r2, [r7, #14]
 800d5e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d5f2:	d047      	beq.n	800d684 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7ff fd6f 	bl	800d0dc <ptr_to_mem>
 800d5fe:	4602      	mov	r2, r0
 800d600:	89fb      	ldrh	r3, [r7, #14]
 800d602:	8053      	strh	r3, [r2, #2]
 800d604:	e03e      	b.n	800d684 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d606:	8bfb      	ldrh	r3, [r7, #30]
 800d608:	f103 0214 	add.w	r2, r3, #20
 800d60c:	8abb      	ldrh	r3, [r7, #20]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d838      	bhi.n	800d684 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d612:	8afa      	ldrh	r2, [r7, #22]
 800d614:	8bfb      	ldrh	r3, [r7, #30]
 800d616:	4413      	add	r3, r2
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3308      	adds	r3, #8
 800d61c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d626:	d106      	bne.n	800d636 <mem_trim+0x192>
 800d628:	4b1c      	ldr	r3, [pc, #112]	; (800d69c <mem_trim+0x1f8>)
 800d62a:	f240 3216 	movw	r2, #790	; 0x316
 800d62e:	4920      	ldr	r1, [pc, #128]	; (800d6b0 <mem_trim+0x20c>)
 800d630:	481c      	ldr	r0, [pc, #112]	; (800d6a4 <mem_trim+0x200>)
 800d632:	f00a fc6d 	bl	8017f10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d636:	89fb      	ldrh	r3, [r7, #14]
 800d638:	4618      	mov	r0, r3
 800d63a:	f7ff fd4f 	bl	800d0dc <ptr_to_mem>
 800d63e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d640:	4b1c      	ldr	r3, [pc, #112]	; (800d6b4 <mem_trim+0x210>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	693a      	ldr	r2, [r7, #16]
 800d646:	429a      	cmp	r2, r3
 800d648:	d202      	bcs.n	800d650 <mem_trim+0x1ac>
      lfree = mem2;
 800d64a:	4a1a      	ldr	r2, [pc, #104]	; (800d6b4 <mem_trim+0x210>)
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	881a      	ldrh	r2, [r3, #0]
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	8afa      	ldrh	r2, [r7, #22]
 800d662:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	89fa      	ldrh	r2, [r7, #14]
 800d668:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d672:	d007      	beq.n	800d684 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	881b      	ldrh	r3, [r3, #0]
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff fd2f 	bl	800d0dc <ptr_to_mem>
 800d67e:	4602      	mov	r2, r0
 800d680:	89fb      	ldrh	r3, [r7, #14]
 800d682:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d684:	4809      	ldr	r0, [pc, #36]	; (800d6ac <mem_trim+0x208>)
 800d686:	f00a fa02 	bl	8017a8e <sys_mutex_unlock>
  return rmem;
 800d68a:	687b      	ldr	r3, [r7, #4]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	2000eb54 	.word	0x2000eb54
 800d698:	2000eb58 	.word	0x2000eb58
 800d69c:	0801bad8 	.word	0x0801bad8
 800d6a0:	0801bc64 	.word	0x0801bc64
 800d6a4:	0801bb20 	.word	0x0801bb20
 800d6a8:	0801bc7c 	.word	0x0801bc7c
 800d6ac:	2000eb5c 	.word	0x2000eb5c
 800d6b0:	0801bc9c 	.word	0x0801bc9c
 800d6b4:	2000eb60 	.word	0x2000eb60

0800d6b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d6c2:	88fb      	ldrh	r3, [r7, #6]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <mem_malloc+0x14>
    return NULL;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	e0e2      	b.n	800d892 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d6cc:	88fb      	ldrh	r3, [r7, #6]
 800d6ce:	3303      	adds	r3, #3
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	f023 0303 	bic.w	r3, r3, #3
 800d6d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d6d8:	8bbb      	ldrh	r3, [r7, #28]
 800d6da:	2b0b      	cmp	r3, #11
 800d6dc:	d801      	bhi.n	800d6e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d6de:	230c      	movs	r3, #12
 800d6e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d6e2:	8bbb      	ldrh	r3, [r7, #28]
 800d6e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d6e8:	d803      	bhi.n	800d6f2 <mem_malloc+0x3a>
 800d6ea:	8bba      	ldrh	r2, [r7, #28]
 800d6ec:	88fb      	ldrh	r3, [r7, #6]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d201      	bcs.n	800d6f6 <mem_malloc+0x3e>
    return NULL;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e0cd      	b.n	800d892 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d6f6:	4869      	ldr	r0, [pc, #420]	; (800d89c <mem_malloc+0x1e4>)
 800d6f8:	f00a f9ba 	bl	8017a70 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6fc:	4b68      	ldr	r3, [pc, #416]	; (800d8a0 <mem_malloc+0x1e8>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff fcfd 	bl	800d100 <mem_to_ptr>
 800d706:	4603      	mov	r3, r0
 800d708:	83fb      	strh	r3, [r7, #30]
 800d70a:	e0b7      	b.n	800d87c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d70c:	8bfb      	ldrh	r3, [r7, #30]
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff fce4 	bl	800d0dc <ptr_to_mem>
 800d714:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	791b      	ldrb	r3, [r3, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f040 80a7 	bne.w	800d86e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	8bfb      	ldrh	r3, [r7, #30]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	f1a3 0208 	sub.w	r2, r3, #8
 800d72e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d730:	429a      	cmp	r2, r3
 800d732:	f0c0 809c 	bcc.w	800d86e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	461a      	mov	r2, r3
 800d73c:	8bfb      	ldrh	r3, [r7, #30]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	f1a3 0208 	sub.w	r2, r3, #8
 800d744:	8bbb      	ldrh	r3, [r7, #28]
 800d746:	3314      	adds	r3, #20
 800d748:	429a      	cmp	r2, r3
 800d74a:	d333      	bcc.n	800d7b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d74c:	8bfa      	ldrh	r2, [r7, #30]
 800d74e:	8bbb      	ldrh	r3, [r7, #28]
 800d750:	4413      	add	r3, r2
 800d752:	b29b      	uxth	r3, r3
 800d754:	3308      	adds	r3, #8
 800d756:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d758:	8a7b      	ldrh	r3, [r7, #18]
 800d75a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d75e:	d106      	bne.n	800d76e <mem_malloc+0xb6>
 800d760:	4b50      	ldr	r3, [pc, #320]	; (800d8a4 <mem_malloc+0x1ec>)
 800d762:	f240 3287 	movw	r2, #903	; 0x387
 800d766:	4950      	ldr	r1, [pc, #320]	; (800d8a8 <mem_malloc+0x1f0>)
 800d768:	4850      	ldr	r0, [pc, #320]	; (800d8ac <mem_malloc+0x1f4>)
 800d76a:	f00a fbd1 	bl	8017f10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d76e:	8a7b      	ldrh	r3, [r7, #18]
 800d770:	4618      	mov	r0, r3
 800d772:	f7ff fcb3 	bl	800d0dc <ptr_to_mem>
 800d776:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	881a      	ldrh	r2, [r3, #0]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8bfa      	ldrh	r2, [r7, #30]
 800d78a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	8a7a      	ldrh	r2, [r7, #18]
 800d790:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2201      	movs	r2, #1
 800d796:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d7a0:	d00b      	beq.n	800d7ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fc98 	bl	800d0dc <ptr_to_mem>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	8a7b      	ldrh	r3, [r7, #18]
 800d7b0:	8053      	strh	r3, [r2, #2]
 800d7b2:	e002      	b.n	800d7ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d7ba:	4b39      	ldr	r3, [pc, #228]	; (800d8a0 <mem_malloc+0x1e8>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d127      	bne.n	800d814 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d7c4:	4b36      	ldr	r3, [pc, #216]	; (800d8a0 <mem_malloc+0x1e8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d7ca:	e005      	b.n	800d7d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fc83 	bl	800d0dc <ptr_to_mem>
 800d7d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	791b      	ldrb	r3, [r3, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <mem_malloc+0x132>
 800d7e0:	4b33      	ldr	r3, [pc, #204]	; (800d8b0 <mem_malloc+0x1f8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	69ba      	ldr	r2, [r7, #24]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d1f0      	bne.n	800d7cc <mem_malloc+0x114>
          }
          lfree = cur;
 800d7ea:	4a2d      	ldr	r2, [pc, #180]	; (800d8a0 <mem_malloc+0x1e8>)
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d7f0:	4b2b      	ldr	r3, [pc, #172]	; (800d8a0 <mem_malloc+0x1e8>)
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	4b2e      	ldr	r3, [pc, #184]	; (800d8b0 <mem_malloc+0x1f8>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d00b      	beq.n	800d814 <mem_malloc+0x15c>
 800d7fc:	4b28      	ldr	r3, [pc, #160]	; (800d8a0 <mem_malloc+0x1e8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	791b      	ldrb	r3, [r3, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d006      	beq.n	800d814 <mem_malloc+0x15c>
 800d806:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <mem_malloc+0x1ec>)
 800d808:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d80c:	4929      	ldr	r1, [pc, #164]	; (800d8b4 <mem_malloc+0x1fc>)
 800d80e:	4827      	ldr	r0, [pc, #156]	; (800d8ac <mem_malloc+0x1f4>)
 800d810:	f00a fb7e 	bl	8017f10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d814:	4821      	ldr	r0, [pc, #132]	; (800d89c <mem_malloc+0x1e4>)
 800d816:	f00a f93a 	bl	8017a8e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d81a:	8bba      	ldrh	r2, [r7, #28]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	4413      	add	r3, r2
 800d820:	3308      	adds	r3, #8
 800d822:	4a23      	ldr	r2, [pc, #140]	; (800d8b0 <mem_malloc+0x1f8>)
 800d824:	6812      	ldr	r2, [r2, #0]
 800d826:	4293      	cmp	r3, r2
 800d828:	d906      	bls.n	800d838 <mem_malloc+0x180>
 800d82a:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <mem_malloc+0x1ec>)
 800d82c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d830:	4921      	ldr	r1, [pc, #132]	; (800d8b8 <mem_malloc+0x200>)
 800d832:	481e      	ldr	r0, [pc, #120]	; (800d8ac <mem_malloc+0x1f4>)
 800d834:	f00a fb6c 	bl	8017f10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f003 0303 	and.w	r3, r3, #3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d006      	beq.n	800d850 <mem_malloc+0x198>
 800d842:	4b18      	ldr	r3, [pc, #96]	; (800d8a4 <mem_malloc+0x1ec>)
 800d844:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d848:	491c      	ldr	r1, [pc, #112]	; (800d8bc <mem_malloc+0x204>)
 800d84a:	4818      	ldr	r0, [pc, #96]	; (800d8ac <mem_malloc+0x1f4>)
 800d84c:	f00a fb60 	bl	8017f10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	f003 0303 	and.w	r3, r3, #3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d006      	beq.n	800d868 <mem_malloc+0x1b0>
 800d85a:	4b12      	ldr	r3, [pc, #72]	; (800d8a4 <mem_malloc+0x1ec>)
 800d85c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d860:	4917      	ldr	r1, [pc, #92]	; (800d8c0 <mem_malloc+0x208>)
 800d862:	4812      	ldr	r0, [pc, #72]	; (800d8ac <mem_malloc+0x1f4>)
 800d864:	f00a fb54 	bl	8017f10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	3308      	adds	r3, #8
 800d86c:	e011      	b.n	800d892 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d86e:	8bfb      	ldrh	r3, [r7, #30]
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc33 	bl	800d0dc <ptr_to_mem>
 800d876:	4603      	mov	r3, r0
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d87c:	8bfa      	ldrh	r2, [r7, #30]
 800d87e:	8bbb      	ldrh	r3, [r7, #28]
 800d880:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800d884:	429a      	cmp	r2, r3
 800d886:	f4ff af41 	bcc.w	800d70c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d88a:	4804      	ldr	r0, [pc, #16]	; (800d89c <mem_malloc+0x1e4>)
 800d88c:	f00a f8ff 	bl	8017a8e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3720      	adds	r7, #32
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	2000eb5c 	.word	0x2000eb5c
 800d8a0:	2000eb60 	.word	0x2000eb60
 800d8a4:	0801bad8 	.word	0x0801bad8
 800d8a8:	0801bc9c 	.word	0x0801bc9c
 800d8ac:	0801bb20 	.word	0x0801bb20
 800d8b0:	2000eb58 	.word	0x2000eb58
 800d8b4:	0801bcb0 	.word	0x0801bcb0
 800d8b8:	0801bccc 	.word	0x0801bccc
 800d8bc:	0801bcfc 	.word	0x0801bcfc
 800d8c0:	0801bd2c 	.word	0x0801bd2c

0800d8c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	3303      	adds	r3, #3
 800d8da:	f023 0303 	bic.w	r3, r3, #3
 800d8de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	e011      	b.n	800d90a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	689b      	ldr	r3, [r3, #8]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	4413      	add	r3, r2
 800d902:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	3301      	adds	r3, #1
 800d908:	60fb      	str	r3, [r7, #12]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	885b      	ldrh	r3, [r3, #2]
 800d90e:	461a      	mov	r2, r3
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	4293      	cmp	r3, r2
 800d914:	dbe7      	blt.n	800d8e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d92a:	2300      	movs	r3, #0
 800d92c:	80fb      	strh	r3, [r7, #6]
 800d92e:	e009      	b.n	800d944 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d930:	88fb      	ldrh	r3, [r7, #6]
 800d932:	4a08      	ldr	r2, [pc, #32]	; (800d954 <memp_init+0x30>)
 800d934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff ffc3 	bl	800d8c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d93e:	88fb      	ldrh	r3, [r7, #6]
 800d940:	3301      	adds	r3, #1
 800d942:	80fb      	strh	r3, [r7, #6]
 800d944:	88fb      	ldrh	r3, [r7, #6]
 800d946:	2b0b      	cmp	r3, #11
 800d948:	d9f2      	bls.n	800d930 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d94a:	bf00      	nop
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	0801e280 	.word	0x0801e280

0800d958 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d960:	f00a f8c2 	bl	8017ae8 <sys_arch_protect>
 800d964:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d015      	beq.n	800d9a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	6812      	ldr	r2, [r2, #0]
 800d97c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	2b00      	cmp	r3, #0
 800d986:	d006      	beq.n	800d996 <do_memp_malloc_pool+0x3e>
 800d988:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <do_memp_malloc_pool+0x58>)
 800d98a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d98e:	4909      	ldr	r1, [pc, #36]	; (800d9b4 <do_memp_malloc_pool+0x5c>)
 800d990:	4809      	ldr	r0, [pc, #36]	; (800d9b8 <do_memp_malloc_pool+0x60>)
 800d992:	f00a fabd 	bl	8017f10 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f00a f8b4 	bl	8017b04 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	e003      	b.n	800d9a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f00a f8af 	bl	8017b04 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	0801bd50 	.word	0x0801bd50
 800d9b4:	0801bd80 	.word	0x0801bd80
 800d9b8:	0801bda4 	.word	0x0801bda4

0800d9bc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <memp_malloc_pool+0x1c>
 800d9ca:	4b0a      	ldr	r3, [pc, #40]	; (800d9f4 <memp_malloc_pool+0x38>)
 800d9cc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d9d0:	4909      	ldr	r1, [pc, #36]	; (800d9f8 <memp_malloc_pool+0x3c>)
 800d9d2:	480a      	ldr	r0, [pc, #40]	; (800d9fc <memp_malloc_pool+0x40>)
 800d9d4:	f00a fa9c 	bl	8017f10 <iprintf>
  if (desc == NULL) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <memp_malloc_pool+0x26>
    return NULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e003      	b.n	800d9ea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff ffb8 	bl	800d958 <do_memp_malloc_pool>
 800d9e8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	0801bd50 	.word	0x0801bd50
 800d9f8:	0801bdcc 	.word	0x0801bdcc
 800d9fc:	0801bda4 	.word	0x0801bda4

0800da00 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800da0a:	79fb      	ldrb	r3, [r7, #7]
 800da0c:	2b0b      	cmp	r3, #11
 800da0e:	d908      	bls.n	800da22 <memp_malloc+0x22>
 800da10:	4b0a      	ldr	r3, [pc, #40]	; (800da3c <memp_malloc+0x3c>)
 800da12:	f240 1257 	movw	r2, #343	; 0x157
 800da16:	490a      	ldr	r1, [pc, #40]	; (800da40 <memp_malloc+0x40>)
 800da18:	480a      	ldr	r0, [pc, #40]	; (800da44 <memp_malloc+0x44>)
 800da1a:	f00a fa79 	bl	8017f10 <iprintf>
 800da1e:	2300      	movs	r3, #0
 800da20:	e008      	b.n	800da34 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	4a08      	ldr	r2, [pc, #32]	; (800da48 <memp_malloc+0x48>)
 800da26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff ff94 	bl	800d958 <do_memp_malloc_pool>
 800da30:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800da32:	68fb      	ldr	r3, [r7, #12]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	0801bd50 	.word	0x0801bd50
 800da40:	0801bde0 	.word	0x0801bde0
 800da44:	0801bda4 	.word	0x0801bda4
 800da48:	0801e280 	.word	0x0801e280

0800da4c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	f003 0303 	and.w	r3, r3, #3
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <do_memp_free_pool+0x22>
 800da60:	4b0d      	ldr	r3, [pc, #52]	; (800da98 <do_memp_free_pool+0x4c>)
 800da62:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800da66:	490d      	ldr	r1, [pc, #52]	; (800da9c <do_memp_free_pool+0x50>)
 800da68:	480d      	ldr	r0, [pc, #52]	; (800daa0 <do_memp_free_pool+0x54>)
 800da6a:	f00a fa51 	bl	8017f10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800da72:	f00a f839 	bl	8017ae8 <sys_arch_protect>
 800da76:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800da8a:	68b8      	ldr	r0, [r7, #8]
 800da8c:	f00a f83a 	bl	8017b04 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800da90:	bf00      	nop
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	0801bd50 	.word	0x0801bd50
 800da9c:	0801be00 	.word	0x0801be00
 800daa0:	0801bda4 	.word	0x0801bda4

0800daa4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <memp_free_pool+0x1e>
 800dab4:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <memp_free_pool+0x3c>)
 800dab6:	f240 1295 	movw	r2, #405	; 0x195
 800daba:	490a      	ldr	r1, [pc, #40]	; (800dae4 <memp_free_pool+0x40>)
 800dabc:	480a      	ldr	r0, [pc, #40]	; (800dae8 <memp_free_pool+0x44>)
 800dabe:	f00a fa27 	bl	8017f10 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d007      	beq.n	800dad8 <memp_free_pool+0x34>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d004      	beq.n	800dad8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff ffbb 	bl	800da4c <do_memp_free_pool>
 800dad6:	e000      	b.n	800dada <memp_free_pool+0x36>
    return;
 800dad8:	bf00      	nop
}
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	0801bd50 	.word	0x0801bd50
 800dae4:	0801bdcc 	.word	0x0801bdcc
 800dae8:	0801bda4 	.word	0x0801bda4

0800daec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b0b      	cmp	r3, #11
 800dafc:	d907      	bls.n	800db0e <memp_free+0x22>
 800dafe:	4b0c      	ldr	r3, [pc, #48]	; (800db30 <memp_free+0x44>)
 800db00:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800db04:	490b      	ldr	r1, [pc, #44]	; (800db34 <memp_free+0x48>)
 800db06:	480c      	ldr	r0, [pc, #48]	; (800db38 <memp_free+0x4c>)
 800db08:	f00a fa02 	bl	8017f10 <iprintf>
 800db0c:	e00c      	b.n	800db28 <memp_free+0x3c>

  if (mem == NULL) {
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d008      	beq.n	800db26 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	4a09      	ldr	r2, [pc, #36]	; (800db3c <memp_free+0x50>)
 800db18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff ff94 	bl	800da4c <do_memp_free_pool>
 800db24:	e000      	b.n	800db28 <memp_free+0x3c>
    return;
 800db26:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	0801bd50 	.word	0x0801bd50
 800db34:	0801be20 	.word	0x0801be20
 800db38:	0801bda4 	.word	0x0801bda4
 800db3c:	0801e280 	.word	0x0801e280

0800db40 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800db44:	bf00      	nop
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
	...

0800db50 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d108      	bne.n	800db76 <netif_add+0x26>
 800db64:	4b57      	ldr	r3, [pc, #348]	; (800dcc4 <netif_add+0x174>)
 800db66:	f240 1227 	movw	r2, #295	; 0x127
 800db6a:	4957      	ldr	r1, [pc, #348]	; (800dcc8 <netif_add+0x178>)
 800db6c:	4857      	ldr	r0, [pc, #348]	; (800dccc <netif_add+0x17c>)
 800db6e:	f00a f9cf 	bl	8017f10 <iprintf>
 800db72:	2300      	movs	r3, #0
 800db74:	e0a2      	b.n	800dcbc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d108      	bne.n	800db8e <netif_add+0x3e>
 800db7c:	4b51      	ldr	r3, [pc, #324]	; (800dcc4 <netif_add+0x174>)
 800db7e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db82:	4953      	ldr	r1, [pc, #332]	; (800dcd0 <netif_add+0x180>)
 800db84:	4851      	ldr	r0, [pc, #324]	; (800dccc <netif_add+0x17c>)
 800db86:	f00a f9c3 	bl	8017f10 <iprintf>
 800db8a:	2300      	movs	r3, #0
 800db8c:	e096      	b.n	800dcbc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800db94:	4b4f      	ldr	r3, [pc, #316]	; (800dcd4 <netif_add+0x184>)
 800db96:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d101      	bne.n	800dba2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800db9e:	4b4d      	ldr	r3, [pc, #308]	; (800dcd4 <netif_add+0x184>)
 800dba0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dba8:	4b4a      	ldr	r3, [pc, #296]	; (800dcd4 <netif_add+0x184>)
 800dbaa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	4a45      	ldr	r2, [pc, #276]	; (800dcd8 <netif_add+0x188>)
 800dbc2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6a3a      	ldr	r2, [r7, #32]
 800dbdc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dbde:	4b3f      	ldr	r3, [pc, #252]	; (800dcdc <netif_add+0x18c>)
 800dbe0:	781a      	ldrb	r2, [r3, #0]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f000 f90f 	bl	800de18 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	4798      	blx	r3
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <netif_add+0xba>
    return NULL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	e058      	b.n	800dcbc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc10:	2bff      	cmp	r3, #255	; 0xff
 800dc12:	d103      	bne.n	800dc1c <netif_add+0xcc>
        netif->num = 0;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc20:	4b2f      	ldr	r3, [pc, #188]	; (800dce0 <netif_add+0x190>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	e02b      	b.n	800dc80 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d106      	bne.n	800dc3e <netif_add+0xee>
 800dc30:	4b24      	ldr	r3, [pc, #144]	; (800dcc4 <netif_add+0x174>)
 800dc32:	f240 128b 	movw	r2, #395	; 0x18b
 800dc36:	492b      	ldr	r1, [pc, #172]	; (800dce4 <netif_add+0x194>)
 800dc38:	4824      	ldr	r0, [pc, #144]	; (800dccc <netif_add+0x17c>)
 800dc3a:	f00a f969 	bl	8017f10 <iprintf>
        num_netifs++;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	3301      	adds	r3, #1
 800dc42:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	2bff      	cmp	r3, #255	; 0xff
 800dc48:	dd06      	ble.n	800dc58 <netif_add+0x108>
 800dc4a:	4b1e      	ldr	r3, [pc, #120]	; (800dcc4 <netif_add+0x174>)
 800dc4c:	f240 128d 	movw	r2, #397	; 0x18d
 800dc50:	4925      	ldr	r1, [pc, #148]	; (800dce8 <netif_add+0x198>)
 800dc52:	481e      	ldr	r0, [pc, #120]	; (800dccc <netif_add+0x17c>)
 800dc54:	f00a f95c 	bl	8017f10 <iprintf>
        if (netif2->num == netif->num) {
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d108      	bne.n	800dc7a <netif_add+0x12a>
          netif->num++;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc6e:	3301      	adds	r3, #1
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dc78:	e005      	b.n	800dc86 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1d0      	bne.n	800dc28 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1be      	bne.n	800dc0a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc92:	2bfe      	cmp	r3, #254	; 0xfe
 800dc94:	d103      	bne.n	800dc9e <netif_add+0x14e>
    netif_num = 0;
 800dc96:	4b11      	ldr	r3, [pc, #68]	; (800dcdc <netif_add+0x18c>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	701a      	strb	r2, [r3, #0]
 800dc9c:	e006      	b.n	800dcac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dca4:	3301      	adds	r3, #1
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	4b0c      	ldr	r3, [pc, #48]	; (800dcdc <netif_add+0x18c>)
 800dcaa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dcac:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <netif_add+0x190>)
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dcb4:	4a0a      	ldr	r2, [pc, #40]	; (800dce0 <netif_add+0x190>)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dcba:	68fb      	ldr	r3, [r7, #12]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3718      	adds	r7, #24
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	0801be3c 	.word	0x0801be3c
 800dcc8:	0801bed0 	.word	0x0801bed0
 800dccc:	0801be8c 	.word	0x0801be8c
 800dcd0:	0801beec 	.word	0x0801beec
 800dcd4:	0801e2f0 	.word	0x0801e2f0
 800dcd8:	0800e0f3 	.word	0x0800e0f3
 800dcdc:	20011bb0 	.word	0x20011bb0
 800dce0:	20011ba8 	.word	0x20011ba8
 800dce4:	0801bf10 	.word	0x0801bf10
 800dce8:	0801bf24 	.word	0x0801bf24

0800dcec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f002 fe99 	bl	8010a30 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dcfe:	bf00      	nop
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
	...

0800dd08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <netif_do_set_ipaddr+0x20>
 800dd1a:	4b1d      	ldr	r3, [pc, #116]	; (800dd90 <netif_do_set_ipaddr+0x88>)
 800dd1c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dd20:	491c      	ldr	r1, [pc, #112]	; (800dd94 <netif_do_set_ipaddr+0x8c>)
 800dd22:	481d      	ldr	r0, [pc, #116]	; (800dd98 <netif_do_set_ipaddr+0x90>)
 800dd24:	f00a f8f4 	bl	8017f10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <netif_do_set_ipaddr+0x34>
 800dd2e:	4b18      	ldr	r3, [pc, #96]	; (800dd90 <netif_do_set_ipaddr+0x88>)
 800dd30:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dd34:	4917      	ldr	r1, [pc, #92]	; (800dd94 <netif_do_set_ipaddr+0x8c>)
 800dd36:	4818      	ldr	r0, [pc, #96]	; (800dd98 <netif_do_set_ipaddr+0x90>)
 800dd38:	f00a f8ea 	bl	8017f10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	3304      	adds	r3, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d01c      	beq.n	800dd84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3304      	adds	r3, #4
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dd5a:	f107 0314 	add.w	r3, r7, #20
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7ff ffc3 	bl	800dcec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <netif_do_set_ipaddr+0x6a>
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	e000      	b.n	800dd74 <netif_do_set_ipaddr+0x6c>
 800dd72:	2300      	movs	r3, #0
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dd78:	2101      	movs	r1, #1
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 f8d2 	bl	800df24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dd80:	2301      	movs	r3, #1
 800dd82:	e000      	b.n	800dd86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3718      	adds	r7, #24
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	0801be3c 	.word	0x0801be3c
 800dd94:	0801bf54 	.word	0x0801bf54
 800dd98:	0801be8c 	.word	0x0801be8c

0800dd9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3308      	adds	r3, #8
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d00a      	beq.n	800ddcc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <netif_do_set_netmask+0x26>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	e000      	b.n	800ddc4 <netif_do_set_netmask+0x28>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e000      	b.n	800ddce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3714      	adds	r7, #20
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ddda:	b480      	push	{r7}
 800dddc:	b085      	sub	sp, #20
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	330c      	adds	r3, #12
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d00a      	beq.n	800de0a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <netif_do_set_gw+0x26>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	e000      	b.n	800de02 <netif_do_set_gw+0x28>
 800de00:	2300      	movs	r3, #0
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800de06:	2301      	movs	r3, #1
 800de08:	e000      	b.n	800de0c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b088      	sub	sp, #32
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800de26:	2300      	movs	r3, #0
 800de28:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d101      	bne.n	800de38 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800de34:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <netif_set_addr+0x90>)
 800de36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800de3e:	4b1a      	ldr	r3, [pc, #104]	; (800dea8 <netif_set_addr+0x90>)
 800de40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800de48:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <netif_set_addr+0x90>)
 800de4a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d003      	beq.n	800de5a <netif_set_addr+0x42>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <netif_set_addr+0x46>
 800de5a:	2301      	movs	r3, #1
 800de5c:	e000      	b.n	800de60 <netif_set_addr+0x48>
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
  if (remove) {
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de68:	f107 0310 	add.w	r3, r7, #16
 800de6c:	461a      	mov	r2, r3
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff ff49 	bl	800dd08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	6879      	ldr	r1, [r7, #4]
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7ff ff8e 	bl	800dd9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800de80:	69ba      	ldr	r2, [r7, #24]
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff ffa8 	bl	800ddda <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d106      	bne.n	800de9e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800de90:	f107 0310 	add.w	r3, r7, #16
 800de94:	461a      	mov	r2, r3
 800de96:	68b9      	ldr	r1, [r7, #8]
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f7ff ff35 	bl	800dd08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800de9e:	bf00      	nop
 800dea0:	3720      	adds	r7, #32
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	0801e2f0 	.word	0x0801e2f0

0800deac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800deb4:	4a04      	ldr	r2, [pc, #16]	; (800dec8 <netif_set_default+0x1c>)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20011bac 	.word	0x20011bac

0800decc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d107      	bne.n	800deea <netif_set_up+0x1e>
 800deda:	4b0f      	ldr	r3, [pc, #60]	; (800df18 <netif_set_up+0x4c>)
 800dedc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dee0:	490e      	ldr	r1, [pc, #56]	; (800df1c <netif_set_up+0x50>)
 800dee2:	480f      	ldr	r0, [pc, #60]	; (800df20 <netif_set_up+0x54>)
 800dee4:	f00a f814 	bl	8017f10 <iprintf>
 800dee8:	e013      	b.n	800df12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800def0:	f003 0301 	and.w	r3, r3, #1
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10c      	bne.n	800df12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	b2da      	uxtb	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800df0a:	2103      	movs	r1, #3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 f809 	bl	800df24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	0801be3c 	.word	0x0801be3c
 800df1c:	0801bfc4 	.word	0x0801bfc4
 800df20:	0801be8c 	.word	0x0801be8c

0800df24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <netif_issue_reports+0x20>
 800df36:	4b18      	ldr	r3, [pc, #96]	; (800df98 <netif_issue_reports+0x74>)
 800df38:	f240 326d 	movw	r2, #877	; 0x36d
 800df3c:	4917      	ldr	r1, [pc, #92]	; (800df9c <netif_issue_reports+0x78>)
 800df3e:	4818      	ldr	r0, [pc, #96]	; (800dfa0 <netif_issue_reports+0x7c>)
 800df40:	f009 ffe6 	bl	8017f10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df4a:	f003 0304 	and.w	r3, r3, #4
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d01e      	beq.n	800df90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d017      	beq.n	800df90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b00      	cmp	r3, #0
 800df68:	d013      	beq.n	800df92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3304      	adds	r3, #4
 800df6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00e      	beq.n	800df92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df7a:	f003 0308 	and.w	r3, r3, #8
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d007      	beq.n	800df92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	3304      	adds	r3, #4
 800df86:	4619      	mov	r1, r3
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f008 f893 	bl	80160b4 <etharp_request>
 800df8e:	e000      	b.n	800df92 <netif_issue_reports+0x6e>
    return;
 800df90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800df92:	3708      	adds	r7, #8
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	0801be3c 	.word	0x0801be3c
 800df9c:	0801bfe0 	.word	0x0801bfe0
 800dfa0:	0801be8c 	.word	0x0801be8c

0800dfa4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d107      	bne.n	800dfc2 <netif_set_down+0x1e>
 800dfb2:	4b12      	ldr	r3, [pc, #72]	; (800dffc <netif_set_down+0x58>)
 800dfb4:	f240 329b 	movw	r2, #923	; 0x39b
 800dfb8:	4911      	ldr	r1, [pc, #68]	; (800e000 <netif_set_down+0x5c>)
 800dfba:	4812      	ldr	r0, [pc, #72]	; (800e004 <netif_set_down+0x60>)
 800dfbc:	f009 ffa8 	bl	8017f10 <iprintf>
 800dfc0:	e019      	b.n	800dff6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d012      	beq.n	800dff6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfd6:	f023 0301 	bic.w	r3, r3, #1
 800dfda:	b2da      	uxtb	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfe8:	f003 0308 	and.w	r3, r3, #8
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d002      	beq.n	800dff6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f007 fc1d 	bl	8015830 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	0801be3c 	.word	0x0801be3c
 800e000:	0801c004 	.word	0x0801c004
 800e004:	0801be8c 	.word	0x0801be8c

0800e008 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d107      	bne.n	800e026 <netif_set_link_up+0x1e>
 800e016:	4b13      	ldr	r3, [pc, #76]	; (800e064 <netif_set_link_up+0x5c>)
 800e018:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e01c:	4912      	ldr	r1, [pc, #72]	; (800e068 <netif_set_link_up+0x60>)
 800e01e:	4813      	ldr	r0, [pc, #76]	; (800e06c <netif_set_link_up+0x64>)
 800e020:	f009 ff76 	bl	8017f10 <iprintf>
 800e024:	e01b      	b.n	800e05e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e02c:	f003 0304 	and.w	r3, r3, #4
 800e030:	2b00      	cmp	r3, #0
 800e032:	d114      	bne.n	800e05e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e03a:	f043 0304 	orr.w	r3, r3, #4
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e046:	2103      	movs	r1, #3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7ff ff6b 	bl	800df24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	69db      	ldr	r3, [r3, #28]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d003      	beq.n	800e05e <netif_set_link_up+0x56>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	0801be3c 	.word	0x0801be3c
 800e068:	0801c024 	.word	0x0801c024
 800e06c:	0801be8c 	.word	0x0801be8c

0800e070 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d107      	bne.n	800e08e <netif_set_link_down+0x1e>
 800e07e:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <netif_set_link_down+0x54>)
 800e080:	f240 4206 	movw	r2, #1030	; 0x406
 800e084:	4910      	ldr	r1, [pc, #64]	; (800e0c8 <netif_set_link_down+0x58>)
 800e086:	4811      	ldr	r0, [pc, #68]	; (800e0cc <netif_set_link_down+0x5c>)
 800e088:	f009 ff42 	bl	8017f10 <iprintf>
 800e08c:	e017      	b.n	800e0be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e094:	f003 0304 	and.w	r3, r3, #4
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d010      	beq.n	800e0be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0a2:	f023 0304 	bic.w	r3, r3, #4
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	69db      	ldr	r3, [r3, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <netif_set_link_down+0x4e>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e0be:	3708      	adds	r7, #8
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	0801be3c 	.word	0x0801be3c
 800e0c8:	0801c048 	.word	0x0801c048
 800e0cc:	0801be8c 	.word	0x0801be8c

0800e0d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d002      	beq.n	800e0e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	61da      	str	r2, [r3, #28]
  }
}
 800e0e6:	bf00      	nop
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e0f2:	b480      	push	{r7}
 800e0f4:	b085      	sub	sp, #20
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e0fe:	f06f 030b 	mvn.w	r3, #11
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
	...

0800e110 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e11a:	79fb      	ldrb	r3, [r7, #7]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d013      	beq.n	800e148 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e120:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <netif_get_by_index+0x48>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	60fb      	str	r3, [r7, #12]
 800e126:	e00c      	b.n	800e142 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e12e:	3301      	adds	r3, #1
 800e130:	b2db      	uxtb	r3, r3
 800e132:	79fa      	ldrb	r2, [r7, #7]
 800e134:	429a      	cmp	r2, r3
 800e136:	d101      	bne.n	800e13c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	e006      	b.n	800e14a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d1ef      	bne.n	800e128 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
 800e156:	bf00      	nop
 800e158:	20011ba8 	.word	0x20011ba8

0800e15c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e162:	f009 fcc1 	bl	8017ae8 <sys_arch_protect>
 800e166:	6038      	str	r0, [r7, #0]
 800e168:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <pbuf_free_ooseq+0x44>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	6838      	ldr	r0, [r7, #0]
 800e170:	f009 fcc8 	bl	8017b04 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e174:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <pbuf_free_ooseq+0x48>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	607b      	str	r3, [r7, #4]
 800e17a:	e00a      	b.n	800e192 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f002 fc91 	bl	8010aac <tcp_free_ooseq>
      return;
 800e18a:	e005      	b.n	800e198 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	607b      	str	r3, [r7, #4]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1f1      	bne.n	800e17c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	20011bb1 	.word	0x20011bb1
 800e1a4:	20011bc0 	.word	0x20011bc0

0800e1a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e1b0:	f7ff ffd4 	bl	800e15c <pbuf_free_ooseq>
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e1c2:	f009 fc91 	bl	8017ae8 <sys_arch_protect>
 800e1c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e1c8:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f009 fc95 	bl	8017b04 <sys_arch_unprotect>

  if (!queued) {
 800e1da:	78fb      	ldrb	r3, [r7, #3]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10f      	bne.n	800e200 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	480a      	ldr	r0, [pc, #40]	; (800e20c <pbuf_pool_is_empty+0x50>)
 800e1e4:	f7fe fd7c 	bl	800cce0 <tcpip_try_callback>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d008      	beq.n	800e200 <pbuf_pool_is_empty+0x44>
 800e1ee:	f009 fc7b 	bl	8017ae8 <sys_arch_protect>
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	4b04      	ldr	r3, [pc, #16]	; (800e208 <pbuf_pool_is_empty+0x4c>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f009 fc82 	bl	8017b04 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20011bb1 	.word	0x20011bb1
 800e20c:	0800e1a9 	.word	0x0800e1a9

0800e210 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	4611      	mov	r1, r2
 800e21c:	461a      	mov	r2, r3
 800e21e:	460b      	mov	r3, r1
 800e220:	80fb      	strh	r3, [r7, #6]
 800e222:	4613      	mov	r3, r2
 800e224:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	88ba      	ldrh	r2, [r7, #4]
 800e23c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e23e:	8b3b      	ldrh	r3, [r7, #24]
 800e240:	b2da      	uxtb	r2, r3
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	7f3a      	ldrb	r2, [r7, #28]
 800e24a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2201      	movs	r2, #1
 800e250:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	73da      	strb	r2, [r3, #15]
}
 800e258:	bf00      	nop
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08c      	sub	sp, #48	; 0x30
 800e268:	af02      	add	r7, sp, #8
 800e26a:	4603      	mov	r3, r0
 800e26c:	71fb      	strb	r3, [r7, #7]
 800e26e:	460b      	mov	r3, r1
 800e270:	80bb      	strh	r3, [r7, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e27a:	887b      	ldrh	r3, [r7, #2]
 800e27c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e280:	d07f      	beq.n	800e382 <pbuf_alloc+0x11e>
 800e282:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e286:	f300 80c8 	bgt.w	800e41a <pbuf_alloc+0x1b6>
 800e28a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e28e:	d010      	beq.n	800e2b2 <pbuf_alloc+0x4e>
 800e290:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e294:	f300 80c1 	bgt.w	800e41a <pbuf_alloc+0x1b6>
 800e298:	2b01      	cmp	r3, #1
 800e29a:	d002      	beq.n	800e2a2 <pbuf_alloc+0x3e>
 800e29c:	2b41      	cmp	r3, #65	; 0x41
 800e29e:	f040 80bc 	bne.w	800e41a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e2a2:	887a      	ldrh	r2, [r7, #2]
 800e2a4:	88bb      	ldrh	r3, [r7, #4]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	f000 f8d1 	bl	800e450 <pbuf_alloc_reference>
 800e2ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e2b0:	e0bd      	b.n	800e42e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e2ba:	88bb      	ldrh	r3, [r7, #4]
 800e2bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e2be:	200b      	movs	r0, #11
 800e2c0:	f7ff fb9e 	bl	800da00 <memp_malloc>
 800e2c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d109      	bne.n	800e2e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e2cc:	f7ff ff76 	bl	800e1bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e2d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2d8:	f000 faa8 	bl	800e82c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e0a7      	b.n	800e430 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e2e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2e2:	3303      	adds	r3, #3
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	8b7a      	ldrh	r2, [r7, #26]
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	bf28      	it	cs
 800e2f8:	4613      	movcs	r3, r2
 800e2fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e2fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2fe:	3310      	adds	r3, #16
 800e300:	693a      	ldr	r2, [r7, #16]
 800e302:	4413      	add	r3, r2
 800e304:	3303      	adds	r3, #3
 800e306:	f023 0303 	bic.w	r3, r3, #3
 800e30a:	4618      	mov	r0, r3
 800e30c:	89f9      	ldrh	r1, [r7, #14]
 800e30e:	8b7a      	ldrh	r2, [r7, #26]
 800e310:	2300      	movs	r3, #0
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	887b      	ldrh	r3, [r7, #2]
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	460b      	mov	r3, r1
 800e31a:	4601      	mov	r1, r0
 800e31c:	6938      	ldr	r0, [r7, #16]
 800e31e:	f7ff ff77 	bl	800e210 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	f003 0303 	and.w	r3, r3, #3
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d006      	beq.n	800e33c <pbuf_alloc+0xd8>
 800e32e:	4b42      	ldr	r3, [pc, #264]	; (800e438 <pbuf_alloc+0x1d4>)
 800e330:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e334:	4941      	ldr	r1, [pc, #260]	; (800e43c <pbuf_alloc+0x1d8>)
 800e336:	4842      	ldr	r0, [pc, #264]	; (800e440 <pbuf_alloc+0x1dc>)
 800e338:	f009 fdea 	bl	8017f10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e33c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e33e:	3303      	adds	r3, #3
 800e340:	f023 0303 	bic.w	r3, r3, #3
 800e344:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e348:	d106      	bne.n	800e358 <pbuf_alloc+0xf4>
 800e34a:	4b3b      	ldr	r3, [pc, #236]	; (800e438 <pbuf_alloc+0x1d4>)
 800e34c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e350:	493c      	ldr	r1, [pc, #240]	; (800e444 <pbuf_alloc+0x1e0>)
 800e352:	483b      	ldr	r0, [pc, #236]	; (800e440 <pbuf_alloc+0x1dc>)
 800e354:	f009 fddc 	bl	8017f10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d102      	bne.n	800e364 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	627b      	str	r3, [r7, #36]	; 0x24
 800e362:	e002      	b.n	800e36a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	693a      	ldr	r2, [r7, #16]
 800e368:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e36e:	8b7a      	ldrh	r2, [r7, #26]
 800e370:	89fb      	ldrh	r3, [r7, #14]
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e376:	2300      	movs	r3, #0
 800e378:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e37a:	8b7b      	ldrh	r3, [r7, #26]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d19e      	bne.n	800e2be <pbuf_alloc+0x5a>
      break;
 800e380:	e055      	b.n	800e42e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e384:	3303      	adds	r3, #3
 800e386:	b29b      	uxth	r3, r3
 800e388:	f023 0303 	bic.w	r3, r3, #3
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	88bb      	ldrh	r3, [r7, #4]
 800e390:	3303      	adds	r3, #3
 800e392:	b29b      	uxth	r3, r3
 800e394:	f023 0303 	bic.w	r3, r3, #3
 800e398:	b29b      	uxth	r3, r3
 800e39a:	4413      	add	r3, r2
 800e39c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e39e:	8b3b      	ldrh	r3, [r7, #24]
 800e3a0:	3310      	adds	r3, #16
 800e3a2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3a4:	8b3a      	ldrh	r2, [r7, #24]
 800e3a6:	88bb      	ldrh	r3, [r7, #4]
 800e3a8:	3303      	adds	r3, #3
 800e3aa:	f023 0303 	bic.w	r3, r3, #3
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d306      	bcc.n	800e3c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e3b2:	8afa      	ldrh	r2, [r7, #22]
 800e3b4:	88bb      	ldrh	r3, [r7, #4]
 800e3b6:	3303      	adds	r3, #3
 800e3b8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d201      	bcs.n	800e3c4 <pbuf_alloc+0x160>
        return NULL;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	e035      	b.n	800e430 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e3c4:	8afb      	ldrh	r3, [r7, #22]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff f976 	bl	800d6b8 <mem_malloc>
 800e3cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <pbuf_alloc+0x174>
        return NULL;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e02b      	b.n	800e430 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3da:	3310      	adds	r3, #16
 800e3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3de:	4413      	add	r3, r2
 800e3e0:	3303      	adds	r3, #3
 800e3e2:	f023 0303 	bic.w	r3, r3, #3
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	88b9      	ldrh	r1, [r7, #4]
 800e3ea:	88ba      	ldrh	r2, [r7, #4]
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3fa:	f7ff ff09 	bl	800e210 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	f003 0303 	and.w	r3, r3, #3
 800e406:	2b00      	cmp	r3, #0
 800e408:	d010      	beq.n	800e42c <pbuf_alloc+0x1c8>
 800e40a:	4b0b      	ldr	r3, [pc, #44]	; (800e438 <pbuf_alloc+0x1d4>)
 800e40c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e410:	490d      	ldr	r1, [pc, #52]	; (800e448 <pbuf_alloc+0x1e4>)
 800e412:	480b      	ldr	r0, [pc, #44]	; (800e440 <pbuf_alloc+0x1dc>)
 800e414:	f009 fd7c 	bl	8017f10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e418:	e008      	b.n	800e42c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <pbuf_alloc+0x1d4>)
 800e41c:	f240 1227 	movw	r2, #295	; 0x127
 800e420:	490a      	ldr	r1, [pc, #40]	; (800e44c <pbuf_alloc+0x1e8>)
 800e422:	4807      	ldr	r0, [pc, #28]	; (800e440 <pbuf_alloc+0x1dc>)
 800e424:	f009 fd74 	bl	8017f10 <iprintf>
      return NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	e001      	b.n	800e430 <pbuf_alloc+0x1cc>
      break;
 800e42c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e430:	4618      	mov	r0, r3
 800e432:	3728      	adds	r7, #40	; 0x28
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	0801c06c 	.word	0x0801c06c
 800e43c:	0801c09c 	.word	0x0801c09c
 800e440:	0801c0cc 	.word	0x0801c0cc
 800e444:	0801c0f4 	.word	0x0801c0f4
 800e448:	0801c128 	.word	0x0801c128
 800e44c:	0801c154 	.word	0x0801c154

0800e450 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af02      	add	r7, sp, #8
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	807b      	strh	r3, [r7, #2]
 800e45c:	4613      	mov	r3, r2
 800e45e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e460:	883b      	ldrh	r3, [r7, #0]
 800e462:	2b41      	cmp	r3, #65	; 0x41
 800e464:	d009      	beq.n	800e47a <pbuf_alloc_reference+0x2a>
 800e466:	883b      	ldrh	r3, [r7, #0]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d006      	beq.n	800e47a <pbuf_alloc_reference+0x2a>
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <pbuf_alloc_reference+0x5c>)
 800e46e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e472:	490f      	ldr	r1, [pc, #60]	; (800e4b0 <pbuf_alloc_reference+0x60>)
 800e474:	480f      	ldr	r0, [pc, #60]	; (800e4b4 <pbuf_alloc_reference+0x64>)
 800e476:	f009 fd4b 	bl	8017f10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e47a:	200a      	movs	r0, #10
 800e47c:	f7ff fac0 	bl	800da00 <memp_malloc>
 800e480:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e488:	2300      	movs	r3, #0
 800e48a:	e00b      	b.n	800e4a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e48c:	8879      	ldrh	r1, [r7, #2]
 800e48e:	887a      	ldrh	r2, [r7, #2]
 800e490:	2300      	movs	r3, #0
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	883b      	ldrh	r3, [r7, #0]
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	460b      	mov	r3, r1
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f7ff feb7 	bl	800e210 <pbuf_init_alloced_pbuf>
  return p;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0801c06c 	.word	0x0801c06c
 800e4b0:	0801c170 	.word	0x0801c170
 800e4b4:	0801c0cc 	.word	0x0801c0cc

0800e4b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	81bb      	strh	r3, [r7, #12]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e4cc:	7bfb      	ldrb	r3, [r7, #15]
 800e4ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e4d0:	8a7b      	ldrh	r3, [r7, #18]
 800e4d2:	3303      	adds	r3, #3
 800e4d4:	f023 0203 	bic.w	r2, r3, #3
 800e4d8:	89bb      	ldrh	r3, [r7, #12]
 800e4da:	441a      	add	r2, r3
 800e4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d901      	bls.n	800e4e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e018      	b.n	800e518 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d007      	beq.n	800e4fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e4ec:	8a7b      	ldrh	r3, [r7, #18]
 800e4ee:	3303      	adds	r3, #3
 800e4f0:	f023 0303 	bic.w	r3, r3, #3
 800e4f4:	6a3a      	ldr	r2, [r7, #32]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	e001      	b.n	800e500 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	89b9      	ldrh	r1, [r7, #12]
 800e504:	89ba      	ldrh	r2, [r7, #12]
 800e506:	2302      	movs	r3, #2
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	897b      	ldrh	r3, [r7, #10]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	460b      	mov	r3, r1
 800e510:	6979      	ldr	r1, [r7, #20]
 800e512:	f7ff fe7d 	bl	800e210 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e516:	687b      	ldr	r3, [r7, #4]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <pbuf_realloc+0x20>
 800e532:	4b3a      	ldr	r3, [pc, #232]	; (800e61c <pbuf_realloc+0xfc>)
 800e534:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e538:	4939      	ldr	r1, [pc, #228]	; (800e620 <pbuf_realloc+0x100>)
 800e53a:	483a      	ldr	r0, [pc, #232]	; (800e624 <pbuf_realloc+0x104>)
 800e53c:	f009 fce8 	bl	8017f10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	891b      	ldrh	r3, [r3, #8]
 800e544:	887a      	ldrh	r2, [r7, #2]
 800e546:	429a      	cmp	r2, r3
 800e548:	d263      	bcs.n	800e612 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	891a      	ldrh	r2, [r3, #8]
 800e54e:	887b      	ldrh	r3, [r7, #2]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e554:	887b      	ldrh	r3, [r7, #2]
 800e556:	817b      	strh	r3, [r7, #10]
  q = p;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e55c:	e018      	b.n	800e590 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	895b      	ldrh	r3, [r3, #10]
 800e562:	897a      	ldrh	r2, [r7, #10]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	891a      	ldrh	r2, [r3, #8]
 800e56c:	893b      	ldrh	r3, [r7, #8]
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	b29a      	uxth	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <pbuf_realloc+0x70>
 800e582:	4b26      	ldr	r3, [pc, #152]	; (800e61c <pbuf_realloc+0xfc>)
 800e584:	f240 12af 	movw	r2, #431	; 0x1af
 800e588:	4927      	ldr	r1, [pc, #156]	; (800e628 <pbuf_realloc+0x108>)
 800e58a:	4826      	ldr	r0, [pc, #152]	; (800e624 <pbuf_realloc+0x104>)
 800e58c:	f009 fcc0 	bl	8017f10 <iprintf>
  while (rem_len > q->len) {
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	895b      	ldrh	r3, [r3, #10]
 800e594:	897a      	ldrh	r2, [r7, #10]
 800e596:	429a      	cmp	r2, r3
 800e598:	d8e1      	bhi.n	800e55e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	7b1b      	ldrb	r3, [r3, #12]
 800e59e:	f003 030f 	and.w	r3, r3, #15
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d121      	bne.n	800e5ea <pbuf_realloc+0xca>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	895b      	ldrh	r3, [r3, #10]
 800e5aa:	897a      	ldrh	r2, [r7, #10]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d01c      	beq.n	800e5ea <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	7b5b      	ldrb	r3, [r3, #13]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d116      	bne.n	800e5ea <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	897b      	ldrh	r3, [r7, #10]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7fe ff68 	bl	800d4a4 <mem_trim>
 800e5d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d106      	bne.n	800e5ea <pbuf_realloc+0xca>
 800e5dc:	4b0f      	ldr	r3, [pc, #60]	; (800e61c <pbuf_realloc+0xfc>)
 800e5de:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e5e2:	4912      	ldr	r1, [pc, #72]	; (800e62c <pbuf_realloc+0x10c>)
 800e5e4:	480f      	ldr	r0, [pc, #60]	; (800e624 <pbuf_realloc+0x104>)
 800e5e6:	f009 fc93 	bl	8017f10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	897a      	ldrh	r2, [r7, #10]
 800e5ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	895a      	ldrh	r2, [r3, #10]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4618      	mov	r0, r3
 800e606:	f000 f911 	bl	800e82c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	e000      	b.n	800e614 <pbuf_realloc+0xf4>
    return;
 800e612:	bf00      	nop

}
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	0801c06c 	.word	0x0801c06c
 800e620:	0801c184 	.word	0x0801c184
 800e624:	0801c0cc 	.word	0x0801c0cc
 800e628:	0801c19c 	.word	0x0801c19c
 800e62c:	0801c1b4 	.word	0x0801c1b4

0800e630 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	4613      	mov	r3, r2
 800e63c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <pbuf_add_header_impl+0x22>
 800e644:	4b2b      	ldr	r3, [pc, #172]	; (800e6f4 <pbuf_add_header_impl+0xc4>)
 800e646:	f240 12df 	movw	r2, #479	; 0x1df
 800e64a:	492b      	ldr	r1, [pc, #172]	; (800e6f8 <pbuf_add_header_impl+0xc8>)
 800e64c:	482b      	ldr	r0, [pc, #172]	; (800e6fc <pbuf_add_header_impl+0xcc>)
 800e64e:	f009 fc5f 	bl	8017f10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <pbuf_add_header_impl+0x30>
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e65e:	d301      	bcc.n	800e664 <pbuf_add_header_impl+0x34>
    return 1;
 800e660:	2301      	movs	r3, #1
 800e662:	e043      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <pbuf_add_header_impl+0x3e>
    return 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	e03e      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	891a      	ldrh	r2, [r3, #8]
 800e676:	8a7b      	ldrh	r3, [r7, #18]
 800e678:	4413      	add	r3, r2
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	8a7a      	ldrh	r2, [r7, #18]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d901      	bls.n	800e686 <pbuf_add_header_impl+0x56>
    return 1;
 800e682:	2301      	movs	r3, #1
 800e684:	e032      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	7b1b      	ldrb	r3, [r3, #12]
 800e68a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e68c:	8a3b      	ldrh	r3, [r7, #16]
 800e68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e692:	2b00      	cmp	r3, #0
 800e694:	d00c      	beq.n	800e6b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	425b      	negs	r3, r3
 800e69e:	4413      	add	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3310      	adds	r3, #16
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d20d      	bcs.n	800e6c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e01d      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d006      	beq.n	800e6c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	685a      	ldr	r2, [r3, #4]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	425b      	negs	r3, r3
 800e6be:	4413      	add	r3, r2
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e001      	b.n	800e6c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e011      	b.n	800e6ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	697a      	ldr	r2, [r7, #20]
 800e6cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	895a      	ldrh	r2, [r3, #10]
 800e6d2:	8a7b      	ldrh	r3, [r7, #18]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	891a      	ldrh	r2, [r3, #8]
 800e6e0:	8a7b      	ldrh	r3, [r7, #18]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	0801c06c 	.word	0x0801c06c
 800e6f8:	0801c1d0 	.word	0x0801c1d0
 800e6fc:	0801c0cc 	.word	0x0801c0cc

0800e700 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e70a:	2200      	movs	r2, #0
 800e70c:	6839      	ldr	r1, [r7, #0]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7ff ff8e 	bl	800e630 <pbuf_add_header_impl>
 800e714:	4603      	mov	r3, r0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <pbuf_remove_header+0x1e>
 800e730:	4b20      	ldr	r3, [pc, #128]	; (800e7b4 <pbuf_remove_header+0x94>)
 800e732:	f240 224b 	movw	r2, #587	; 0x24b
 800e736:	4920      	ldr	r1, [pc, #128]	; (800e7b8 <pbuf_remove_header+0x98>)
 800e738:	4820      	ldr	r0, [pc, #128]	; (800e7bc <pbuf_remove_header+0x9c>)
 800e73a:	f009 fbe9 	bl	8017f10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d003      	beq.n	800e74c <pbuf_remove_header+0x2c>
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e74a:	d301      	bcc.n	800e750 <pbuf_remove_header+0x30>
    return 1;
 800e74c:	2301      	movs	r3, #1
 800e74e:	e02c      	b.n	800e7aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <pbuf_remove_header+0x3a>
    return 0;
 800e756:	2300      	movs	r3, #0
 800e758:	e027      	b.n	800e7aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	895b      	ldrh	r3, [r3, #10]
 800e762:	89fa      	ldrh	r2, [r7, #14]
 800e764:	429a      	cmp	r2, r3
 800e766:	d908      	bls.n	800e77a <pbuf_remove_header+0x5a>
 800e768:	4b12      	ldr	r3, [pc, #72]	; (800e7b4 <pbuf_remove_header+0x94>)
 800e76a:	f240 2255 	movw	r2, #597	; 0x255
 800e76e:	4914      	ldr	r1, [pc, #80]	; (800e7c0 <pbuf_remove_header+0xa0>)
 800e770:	4812      	ldr	r0, [pc, #72]	; (800e7bc <pbuf_remove_header+0x9c>)
 800e772:	f009 fbcd 	bl	8017f10 <iprintf>
 800e776:	2301      	movs	r3, #1
 800e778:	e017      	b.n	800e7aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	441a      	add	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	895a      	ldrh	r2, [r3, #10]
 800e790:	89fb      	ldrh	r3, [r7, #14]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	b29a      	uxth	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	891a      	ldrh	r2, [r3, #8]
 800e79e:	89fb      	ldrh	r3, [r7, #14]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0801c06c 	.word	0x0801c06c
 800e7b8:	0801c1d0 	.word	0x0801c1d0
 800e7bc:	0801c0cc 	.word	0x0801c0cc
 800e7c0:	0801c1dc 	.word	0x0801c1dc

0800e7c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	807b      	strh	r3, [r7, #2]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e7d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da08      	bge.n	800e7ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e7dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7e0:	425b      	negs	r3, r3
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7ff ff9b 	bl	800e720 <pbuf_remove_header>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	e007      	b.n	800e7fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e7f2:	787a      	ldrb	r2, [r7, #1]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f7ff ff1a 	bl	800e630 <pbuf_add_header_impl>
 800e7fc:	4603      	mov	r3, r0
  }
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3708      	adds	r7, #8
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	460b      	mov	r3, r1
 800e810:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e816:	2201      	movs	r2, #1
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff ffd2 	bl	800e7c4 <pbuf_header_impl>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
	...

0800e82c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10b      	bne.n	800e852 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d106      	bne.n	800e84e <pbuf_free+0x22>
 800e840:	4b3b      	ldr	r3, [pc, #236]	; (800e930 <pbuf_free+0x104>)
 800e842:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e846:	493b      	ldr	r1, [pc, #236]	; (800e934 <pbuf_free+0x108>)
 800e848:	483b      	ldr	r0, [pc, #236]	; (800e938 <pbuf_free+0x10c>)
 800e84a:	f009 fb61 	bl	8017f10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	e069      	b.n	800e926 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e852:	2300      	movs	r3, #0
 800e854:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e856:	e062      	b.n	800e91e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e858:	f009 f946 	bl	8017ae8 <sys_arch_protect>
 800e85c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7b9b      	ldrb	r3, [r3, #14]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d106      	bne.n	800e874 <pbuf_free+0x48>
 800e866:	4b32      	ldr	r3, [pc, #200]	; (800e930 <pbuf_free+0x104>)
 800e868:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e86c:	4933      	ldr	r1, [pc, #204]	; (800e93c <pbuf_free+0x110>)
 800e86e:	4832      	ldr	r0, [pc, #200]	; (800e938 <pbuf_free+0x10c>)
 800e870:	f009 fb4e 	bl	8017f10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7b9b      	ldrb	r3, [r3, #14]
 800e878:	3b01      	subs	r3, #1
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	739a      	strb	r2, [r3, #14]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	7b9b      	ldrb	r3, [r3, #14]
 800e884:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e886:	69b8      	ldr	r0, [r7, #24]
 800e888:	f009 f93c 	bl	8017b04 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d143      	bne.n	800e91a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7b1b      	ldrb	r3, [r3, #12]
 800e89c:	f003 030f 	and.w	r3, r3, #15
 800e8a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7b5b      	ldrb	r3, [r3, #13]
 800e8a6:	f003 0302 	and.w	r3, r3, #2
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d011      	beq.n	800e8d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	691b      	ldr	r3, [r3, #16]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d106      	bne.n	800e8c8 <pbuf_free+0x9c>
 800e8ba:	4b1d      	ldr	r3, [pc, #116]	; (800e930 <pbuf_free+0x104>)
 800e8bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e8c0:	491f      	ldr	r1, [pc, #124]	; (800e940 <pbuf_free+0x114>)
 800e8c2:	481d      	ldr	r0, [pc, #116]	; (800e938 <pbuf_free+0x10c>)
 800e8c4:	f009 fb24 	bl	8017f10 <iprintf>
        pc->custom_free_function(p);
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	4798      	blx	r3
 800e8d0:	e01d      	b.n	800e90e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d104      	bne.n	800e8e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e8d8:	6879      	ldr	r1, [r7, #4]
 800e8da:	200b      	movs	r0, #11
 800e8dc:	f7ff f906 	bl	800daec <memp_free>
 800e8e0:	e015      	b.n	800e90e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d104      	bne.n	800e8f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e8e8:	6879      	ldr	r1, [r7, #4]
 800e8ea:	200a      	movs	r0, #10
 800e8ec:	f7ff f8fe 	bl	800daec <memp_free>
 800e8f0:	e00d      	b.n	800e90e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d103      	bne.n	800e900 <pbuf_free+0xd4>
          mem_free(p);
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f7fe fd43 	bl	800d384 <mem_free>
 800e8fe:	e006      	b.n	800e90e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e900:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <pbuf_free+0x104>)
 800e902:	f240 320f 	movw	r2, #783	; 0x30f
 800e906:	490f      	ldr	r1, [pc, #60]	; (800e944 <pbuf_free+0x118>)
 800e908:	480b      	ldr	r0, [pc, #44]	; (800e938 <pbuf_free+0x10c>)
 800e90a:	f009 fb01 	bl	8017f10 <iprintf>
        }
      }
      count++;
 800e90e:	7ffb      	ldrb	r3, [r7, #31]
 800e910:	3301      	adds	r3, #1
 800e912:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	607b      	str	r3, [r7, #4]
 800e918:	e001      	b.n	800e91e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e91a:	2300      	movs	r3, #0
 800e91c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d199      	bne.n	800e858 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e924:	7ffb      	ldrb	r3, [r7, #31]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3720      	adds	r7, #32
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	0801c06c 	.word	0x0801c06c
 800e934:	0801c1d0 	.word	0x0801c1d0
 800e938:	0801c0cc 	.word	0x0801c0cc
 800e93c:	0801c1fc 	.word	0x0801c1fc
 800e940:	0801c214 	.word	0x0801c214
 800e944:	0801c238 	.word	0x0801c238

0800e948 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e954:	e005      	b.n	800e962 <pbuf_clen+0x1a>
    ++len;
 800e956:	89fb      	ldrh	r3, [r7, #14]
 800e958:	3301      	adds	r3, #1
 800e95a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1f6      	bne.n	800e956 <pbuf_clen+0xe>
  }
  return len;
 800e968:	89fb      	ldrh	r3, [r7, #14]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr
	...

0800e978 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d016      	beq.n	800e9b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e986:	f009 f8af 	bl	8017ae8 <sys_arch_protect>
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	7b9b      	ldrb	r3, [r3, #14]
 800e990:	3301      	adds	r3, #1
 800e992:	b2da      	uxtb	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	739a      	strb	r2, [r3, #14]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f009 f8b3 	bl	8017b04 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7b9b      	ldrb	r3, [r3, #14]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <pbuf_ref+0x3c>
 800e9a6:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <pbuf_ref+0x44>)
 800e9a8:	f240 3242 	movw	r2, #834	; 0x342
 800e9ac:	4904      	ldr	r1, [pc, #16]	; (800e9c0 <pbuf_ref+0x48>)
 800e9ae:	4805      	ldr	r0, [pc, #20]	; (800e9c4 <pbuf_ref+0x4c>)
 800e9b0:	f009 faae 	bl	8017f10 <iprintf>
  }
}
 800e9b4:	bf00      	nop
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801c06c 	.word	0x0801c06c
 800e9c0:	0801c24c 	.word	0x0801c24c
 800e9c4:	0801c0cc 	.word	0x0801c0cc

0800e9c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d002      	beq.n	800e9de <pbuf_cat+0x16>
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <pbuf_cat+0x26>
 800e9de:	4b20      	ldr	r3, [pc, #128]	; (800ea60 <pbuf_cat+0x98>)
 800e9e0:	f240 3259 	movw	r2, #857	; 0x359
 800e9e4:	491f      	ldr	r1, [pc, #124]	; (800ea64 <pbuf_cat+0x9c>)
 800e9e6:	4820      	ldr	r0, [pc, #128]	; (800ea68 <pbuf_cat+0xa0>)
 800e9e8:	f009 fa92 	bl	8017f10 <iprintf>
 800e9ec:	e034      	b.n	800ea58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	e00a      	b.n	800ea0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	891a      	ldrh	r2, [r3, #8]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	891b      	ldrh	r3, [r3, #8]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d1f0      	bne.n	800e9f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	895b      	ldrh	r3, [r3, #10]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d006      	beq.n	800ea2c <pbuf_cat+0x64>
 800ea1e:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <pbuf_cat+0x98>)
 800ea20:	f240 3262 	movw	r2, #866	; 0x362
 800ea24:	4911      	ldr	r1, [pc, #68]	; (800ea6c <pbuf_cat+0xa4>)
 800ea26:	4810      	ldr	r0, [pc, #64]	; (800ea68 <pbuf_cat+0xa0>)
 800ea28:	f009 fa72 	bl	8017f10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d006      	beq.n	800ea42 <pbuf_cat+0x7a>
 800ea34:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <pbuf_cat+0x98>)
 800ea36:	f240 3263 	movw	r2, #867	; 0x363
 800ea3a:	490d      	ldr	r1, [pc, #52]	; (800ea70 <pbuf_cat+0xa8>)
 800ea3c:	480a      	ldr	r0, [pc, #40]	; (800ea68 <pbuf_cat+0xa0>)
 800ea3e:	f009 fa67 	bl	8017f10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	891a      	ldrh	r2, [r3, #8]
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	891b      	ldrh	r3, [r3, #8]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	0801c06c 	.word	0x0801c06c
 800ea64:	0801c260 	.word	0x0801c260
 800ea68:	0801c0cc 	.word	0x0801c0cc
 800ea6c:	0801c298 	.word	0x0801c298
 800ea70:	0801c2c8 	.word	0x0801c2c8

0800ea74 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	617b      	str	r3, [r7, #20]
 800ea82:	2300      	movs	r3, #0
 800ea84:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d008      	beq.n	800ea9e <pbuf_copy+0x2a>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d005      	beq.n	800ea9e <pbuf_copy+0x2a>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	891a      	ldrh	r2, [r3, #8]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	891b      	ldrh	r3, [r3, #8]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d209      	bcs.n	800eab2 <pbuf_copy+0x3e>
 800ea9e:	4b57      	ldr	r3, [pc, #348]	; (800ebfc <pbuf_copy+0x188>)
 800eaa0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eaa4:	4956      	ldr	r1, [pc, #344]	; (800ec00 <pbuf_copy+0x18c>)
 800eaa6:	4857      	ldr	r0, [pc, #348]	; (800ec04 <pbuf_copy+0x190>)
 800eaa8:	f009 fa32 	bl	8017f10 <iprintf>
 800eaac:	f06f 030f 	mvn.w	r3, #15
 800eab0:	e09f      	b.n	800ebf2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	895b      	ldrh	r3, [r3, #10]
 800eab6:	461a      	mov	r2, r3
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	1ad2      	subs	r2, r2, r3
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	4619      	mov	r1, r3
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	1acb      	subs	r3, r1, r3
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d306      	bcc.n	800ead8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	895b      	ldrh	r3, [r3, #10]
 800eace:	461a      	mov	r2, r3
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	60fb      	str	r3, [r7, #12]
 800ead6:	e005      	b.n	800eae4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	895b      	ldrh	r3, [r3, #10]
 800eadc:	461a      	mov	r2, r3
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685a      	ldr	r2, [r3, #4]
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	18d0      	adds	r0, r2, r3
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	685a      	ldr	r2, [r3, #4]
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	f009 f945 	bl	8017d86 <memcpy>
    offset_to += len;
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4413      	add	r3, r2
 800eb02:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	4413      	add	r3, r2
 800eb0a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	895b      	ldrh	r3, [r3, #10]
 800eb10:	461a      	mov	r2, r3
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d906      	bls.n	800eb26 <pbuf_copy+0xb2>
 800eb18:	4b38      	ldr	r3, [pc, #224]	; (800ebfc <pbuf_copy+0x188>)
 800eb1a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800eb1e:	493a      	ldr	r1, [pc, #232]	; (800ec08 <pbuf_copy+0x194>)
 800eb20:	4838      	ldr	r0, [pc, #224]	; (800ec04 <pbuf_copy+0x190>)
 800eb22:	f009 f9f5 	bl	8017f10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	895b      	ldrh	r3, [r3, #10]
 800eb2a:	461a      	mov	r2, r3
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d906      	bls.n	800eb40 <pbuf_copy+0xcc>
 800eb32:	4b32      	ldr	r3, [pc, #200]	; (800ebfc <pbuf_copy+0x188>)
 800eb34:	f240 32da 	movw	r2, #986	; 0x3da
 800eb38:	4934      	ldr	r1, [pc, #208]	; (800ec0c <pbuf_copy+0x198>)
 800eb3a:	4832      	ldr	r0, [pc, #200]	; (800ec04 <pbuf_copy+0x190>)
 800eb3c:	f009 f9e8 	bl	8017f10 <iprintf>
    if (offset_from >= p_from->len) {
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	895b      	ldrh	r3, [r3, #10]
 800eb44:	461a      	mov	r2, r3
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d304      	bcc.n	800eb56 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	895b      	ldrh	r3, [r3, #10]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d114      	bne.n	800eb8c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10c      	bne.n	800eb8c <pbuf_copy+0x118>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d009      	beq.n	800eb8c <pbuf_copy+0x118>
 800eb78:	4b20      	ldr	r3, [pc, #128]	; (800ebfc <pbuf_copy+0x188>)
 800eb7a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800eb7e:	4924      	ldr	r1, [pc, #144]	; (800ec10 <pbuf_copy+0x19c>)
 800eb80:	4820      	ldr	r0, [pc, #128]	; (800ec04 <pbuf_copy+0x190>)
 800eb82:	f009 f9c5 	bl	8017f10 <iprintf>
 800eb86:	f06f 030f 	mvn.w	r3, #15
 800eb8a:	e032      	b.n	800ebf2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d013      	beq.n	800ebba <pbuf_copy+0x146>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	895a      	ldrh	r2, [r3, #10]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	891b      	ldrh	r3, [r3, #8]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d10d      	bne.n	800ebba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d009      	beq.n	800ebba <pbuf_copy+0x146>
 800eba6:	4b15      	ldr	r3, [pc, #84]	; (800ebfc <pbuf_copy+0x188>)
 800eba8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ebac:	4919      	ldr	r1, [pc, #100]	; (800ec14 <pbuf_copy+0x1a0>)
 800ebae:	4815      	ldr	r0, [pc, #84]	; (800ec04 <pbuf_copy+0x190>)
 800ebb0:	f009 f9ae 	bl	8017f10 <iprintf>
 800ebb4:	f06f 0305 	mvn.w	r3, #5
 800ebb8:	e01b      	b.n	800ebf2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d013      	beq.n	800ebe8 <pbuf_copy+0x174>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	895a      	ldrh	r2, [r3, #10]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	891b      	ldrh	r3, [r3, #8]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d10d      	bne.n	800ebe8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d009      	beq.n	800ebe8 <pbuf_copy+0x174>
 800ebd4:	4b09      	ldr	r3, [pc, #36]	; (800ebfc <pbuf_copy+0x188>)
 800ebd6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ebda:	490e      	ldr	r1, [pc, #56]	; (800ec14 <pbuf_copy+0x1a0>)
 800ebdc:	4809      	ldr	r0, [pc, #36]	; (800ec04 <pbuf_copy+0x190>)
 800ebde:	f009 f997 	bl	8017f10 <iprintf>
 800ebe2:	f06f 0305 	mvn.w	r3, #5
 800ebe6:	e004      	b.n	800ebf2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f47f af61 	bne.w	800eab2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	0801c06c 	.word	0x0801c06c
 800ec00:	0801c314 	.word	0x0801c314
 800ec04:	0801c0cc 	.word	0x0801c0cc
 800ec08:	0801c344 	.word	0x0801c344
 800ec0c:	0801c35c 	.word	0x0801c35c
 800ec10:	0801c378 	.word	0x0801c378
 800ec14:	0801c388 	.word	0x0801c388

0800ec18 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b088      	sub	sp, #32
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	4611      	mov	r1, r2
 800ec24:	461a      	mov	r2, r3
 800ec26:	460b      	mov	r3, r1
 800ec28:	80fb      	strh	r3, [r7, #6]
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d108      	bne.n	800ec4e <pbuf_copy_partial+0x36>
 800ec3c:	4b2b      	ldr	r3, [pc, #172]	; (800ecec <pbuf_copy_partial+0xd4>)
 800ec3e:	f240 420a 	movw	r2, #1034	; 0x40a
 800ec42:	492b      	ldr	r1, [pc, #172]	; (800ecf0 <pbuf_copy_partial+0xd8>)
 800ec44:	482b      	ldr	r0, [pc, #172]	; (800ecf4 <pbuf_copy_partial+0xdc>)
 800ec46:	f009 f963 	bl	8017f10 <iprintf>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e04a      	b.n	800ece4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d108      	bne.n	800ec66 <pbuf_copy_partial+0x4e>
 800ec54:	4b25      	ldr	r3, [pc, #148]	; (800ecec <pbuf_copy_partial+0xd4>)
 800ec56:	f240 420b 	movw	r2, #1035	; 0x40b
 800ec5a:	4927      	ldr	r1, [pc, #156]	; (800ecf8 <pbuf_copy_partial+0xe0>)
 800ec5c:	4825      	ldr	r0, [pc, #148]	; (800ecf4 <pbuf_copy_partial+0xdc>)
 800ec5e:	f009 f957 	bl	8017f10 <iprintf>
 800ec62:	2300      	movs	r3, #0
 800ec64:	e03e      	b.n	800ece4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	61fb      	str	r3, [r7, #28]
 800ec6a:	e034      	b.n	800ecd6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ec6c:	88bb      	ldrh	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00a      	beq.n	800ec88 <pbuf_copy_partial+0x70>
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	895b      	ldrh	r3, [r3, #10]
 800ec76:	88ba      	ldrh	r2, [r7, #4]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d305      	bcc.n	800ec88 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	895b      	ldrh	r3, [r3, #10]
 800ec80:	88ba      	ldrh	r2, [r7, #4]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	80bb      	strh	r3, [r7, #4]
 800ec86:	e023      	b.n	800ecd0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	895a      	ldrh	r2, [r3, #10]
 800ec8c:	88bb      	ldrh	r3, [r7, #4]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ec92:	8b3a      	ldrh	r2, [r7, #24]
 800ec94:	88fb      	ldrh	r3, [r7, #6]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d901      	bls.n	800ec9e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ec9a:	88fb      	ldrh	r3, [r7, #6]
 800ec9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ec9e:	8b7b      	ldrh	r3, [r7, #26]
 800eca0:	68ba      	ldr	r2, [r7, #8]
 800eca2:	18d0      	adds	r0, r2, r3
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	88bb      	ldrh	r3, [r7, #4]
 800ecaa:	4413      	add	r3, r2
 800ecac:	8b3a      	ldrh	r2, [r7, #24]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	f009 f869 	bl	8017d86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ecb4:	8afa      	ldrh	r2, [r7, #22]
 800ecb6:	8b3b      	ldrh	r3, [r7, #24]
 800ecb8:	4413      	add	r3, r2
 800ecba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ecbc:	8b7a      	ldrh	r2, [r7, #26]
 800ecbe:	8b3b      	ldrh	r3, [r7, #24]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ecc4:	88fa      	ldrh	r2, [r7, #6]
 800ecc6:	8b3b      	ldrh	r3, [r7, #24]
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	61fb      	str	r3, [r7, #28]
 800ecd6:	88fb      	ldrh	r3, [r7, #6]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <pbuf_copy_partial+0xca>
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1c4      	bne.n	800ec6c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ece2:	8afb      	ldrh	r3, [r7, #22]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	0801c06c 	.word	0x0801c06c
 800ecf0:	0801c3b4 	.word	0x0801c3b4
 800ecf4:	0801c0cc 	.word	0x0801c0cc
 800ecf8:	0801c3d4 	.word	0x0801c3d4

0800ecfc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	603a      	str	r2, [r7, #0]
 800ed06:	71fb      	strb	r3, [r7, #7]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	8919      	ldrh	r1, [r3, #8]
 800ed10:	88ba      	ldrh	r2, [r7, #4]
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff faa5 	bl	800e264 <pbuf_alloc>
 800ed1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d101      	bne.n	800ed26 <pbuf_clone+0x2a>
    return NULL;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e011      	b.n	800ed4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed26:	6839      	ldr	r1, [r7, #0]
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7ff fea3 	bl	800ea74 <pbuf_copy>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d006      	beq.n	800ed48 <pbuf_clone+0x4c>
 800ed3a:	4b06      	ldr	r3, [pc, #24]	; (800ed54 <pbuf_clone+0x58>)
 800ed3c:	f240 5224 	movw	r2, #1316	; 0x524
 800ed40:	4905      	ldr	r1, [pc, #20]	; (800ed58 <pbuf_clone+0x5c>)
 800ed42:	4806      	ldr	r0, [pc, #24]	; (800ed5c <pbuf_clone+0x60>)
 800ed44:	f009 f8e4 	bl	8017f10 <iprintf>
  return q;
 800ed48:	68fb      	ldr	r3, [r7, #12]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	0801c06c 	.word	0x0801c06c
 800ed58:	0801c4e0 	.word	0x0801c4e0
 800ed5c:	0801c0cc 	.word	0x0801c0cc

0800ed60 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed64:	f009 f8ec 	bl	8017f40 <rand>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	4b01      	ldr	r3, [pc, #4]	; (800ed80 <tcp_init+0x20>)
 800ed7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed7c:	bf00      	nop
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	20000024 	.word	0x20000024

0800ed84 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d105      	bne.n	800eda0 <tcp_free+0x1c>
 800ed94:	4b06      	ldr	r3, [pc, #24]	; (800edb0 <tcp_free+0x2c>)
 800ed96:	22d4      	movs	r2, #212	; 0xd4
 800ed98:	4906      	ldr	r1, [pc, #24]	; (800edb4 <tcp_free+0x30>)
 800ed9a:	4807      	ldr	r0, [pc, #28]	; (800edb8 <tcp_free+0x34>)
 800ed9c:	f009 f8b8 	bl	8017f10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eda0:	6879      	ldr	r1, [r7, #4]
 800eda2:	2000      	movs	r0, #0
 800eda4:	f7fe fea2 	bl	800daec <memp_free>
}
 800eda8:	bf00      	nop
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	0801c56c 	.word	0x0801c56c
 800edb4:	0801c59c 	.word	0x0801c59c
 800edb8:	0801c5b0 	.word	0x0801c5b0

0800edbc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	7d1b      	ldrb	r3, [r3, #20]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d105      	bne.n	800edd8 <tcp_free_listen+0x1c>
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <tcp_free_listen+0x2c>)
 800edce:	22df      	movs	r2, #223	; 0xdf
 800edd0:	4906      	ldr	r1, [pc, #24]	; (800edec <tcp_free_listen+0x30>)
 800edd2:	4807      	ldr	r0, [pc, #28]	; (800edf0 <tcp_free_listen+0x34>)
 800edd4:	f009 f89c 	bl	8017f10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	2001      	movs	r0, #1
 800eddc:	f7fe fe86 	bl	800daec <memp_free>
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0801c56c 	.word	0x0801c56c
 800edec:	0801c5d8 	.word	0x0801c5d8
 800edf0:	0801c5b0 	.word	0x0801c5b0

0800edf4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800edf8:	f001 f8f4 	bl	800ffe4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800edfc:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <tcp_tmr+0x28>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	3301      	adds	r3, #1
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <tcp_tmr+0x28>)
 800ee06:	701a      	strb	r2, [r3, #0]
 800ee08:	4b04      	ldr	r3, [pc, #16]	; (800ee1c <tcp_tmr+0x28>)
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d001      	beq.n	800ee18 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee14:	f000 fda6 	bl	800f964 <tcp_slowtmr>
  }
}
 800ee18:	bf00      	nop
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20011bc9 	.word	0x20011bc9

0800ee20 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d105      	bne.n	800ee3c <tcp_remove_listener+0x1c>
 800ee30:	4b0d      	ldr	r3, [pc, #52]	; (800ee68 <tcp_remove_listener+0x48>)
 800ee32:	22ff      	movs	r2, #255	; 0xff
 800ee34:	490d      	ldr	r1, [pc, #52]	; (800ee6c <tcp_remove_listener+0x4c>)
 800ee36:	480e      	ldr	r0, [pc, #56]	; (800ee70 <tcp_remove_listener+0x50>)
 800ee38:	f009 f86a 	bl	8017f10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	e00a      	b.n	800ee58 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d102      	bne.n	800ee52 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1f1      	bne.n	800ee42 <tcp_remove_listener+0x22>
    }
  }
}
 800ee5e:	bf00      	nop
 800ee60:	bf00      	nop
 800ee62:	3710      	adds	r7, #16
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	0801c56c 	.word	0x0801c56c
 800ee6c:	0801c5f4 	.word	0x0801c5f4
 800ee70:	0801c5b0 	.word	0x0801c5b0

0800ee74 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d106      	bne.n	800ee90 <tcp_listen_closed+0x1c>
 800ee82:	4b14      	ldr	r3, [pc, #80]	; (800eed4 <tcp_listen_closed+0x60>)
 800ee84:	f240 1211 	movw	r2, #273	; 0x111
 800ee88:	4913      	ldr	r1, [pc, #76]	; (800eed8 <tcp_listen_closed+0x64>)
 800ee8a:	4814      	ldr	r0, [pc, #80]	; (800eedc <tcp_listen_closed+0x68>)
 800ee8c:	f009 f840 	bl	8017f10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	7d1b      	ldrb	r3, [r3, #20]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d006      	beq.n	800eea6 <tcp_listen_closed+0x32>
 800ee98:	4b0e      	ldr	r3, [pc, #56]	; (800eed4 <tcp_listen_closed+0x60>)
 800ee9a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ee9e:	4910      	ldr	r1, [pc, #64]	; (800eee0 <tcp_listen_closed+0x6c>)
 800eea0:	480e      	ldr	r0, [pc, #56]	; (800eedc <tcp_listen_closed+0x68>)
 800eea2:	f009 f835 	bl	8017f10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eea6:	2301      	movs	r3, #1
 800eea8:	60fb      	str	r3, [r7, #12]
 800eeaa:	e00b      	b.n	800eec4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eeac:	4a0d      	ldr	r2, [pc, #52]	; (800eee4 <tcp_listen_closed+0x70>)
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6879      	ldr	r1, [r7, #4]
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7ff ffb1 	bl	800ee20 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3301      	adds	r3, #1
 800eec2:	60fb      	str	r3, [r7, #12]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b03      	cmp	r3, #3
 800eec8:	d9f0      	bls.n	800eeac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eeca:	bf00      	nop
 800eecc:	bf00      	nop
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	0801c56c 	.word	0x0801c56c
 800eed8:	0801c61c 	.word	0x0801c61c
 800eedc:	0801c5b0 	.word	0x0801c5b0
 800eee0:	0801c628 	.word	0x0801c628
 800eee4:	0801e2c8 	.word	0x0801e2c8

0800eee8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eee8:	b5b0      	push	{r4, r5, r7, lr}
 800eeea:	b088      	sub	sp, #32
 800eeec:	af04      	add	r7, sp, #16
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	460b      	mov	r3, r1
 800eef2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d106      	bne.n	800ef08 <tcp_close_shutdown+0x20>
 800eefa:	4b63      	ldr	r3, [pc, #396]	; (800f088 <tcp_close_shutdown+0x1a0>)
 800eefc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef00:	4962      	ldr	r1, [pc, #392]	; (800f08c <tcp_close_shutdown+0x1a4>)
 800ef02:	4863      	ldr	r0, [pc, #396]	; (800f090 <tcp_close_shutdown+0x1a8>)
 800ef04:	f009 f804 	bl	8017f10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef08:	78fb      	ldrb	r3, [r7, #3]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d066      	beq.n	800efdc <tcp_close_shutdown+0xf4>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
 800ef12:	2b04      	cmp	r3, #4
 800ef14:	d003      	beq.n	800ef1e <tcp_close_shutdown+0x36>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	2b07      	cmp	r3, #7
 800ef1c:	d15e      	bne.n	800efdc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d104      	bne.n	800ef30 <tcp_close_shutdown+0x48>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef2e:	d055      	beq.n	800efdc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	8b5b      	ldrh	r3, [r3, #26]
 800ef34:	f003 0310 	and.w	r3, r3, #16
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d106      	bne.n	800ef4a <tcp_close_shutdown+0x62>
 800ef3c:	4b52      	ldr	r3, [pc, #328]	; (800f088 <tcp_close_shutdown+0x1a0>)
 800ef3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ef42:	4954      	ldr	r1, [pc, #336]	; (800f094 <tcp_close_shutdown+0x1ac>)
 800ef44:	4852      	ldr	r0, [pc, #328]	; (800f090 <tcp_close_shutdown+0x1a8>)
 800ef46:	f008 ffe3 	bl	8017f10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef52:	687d      	ldr	r5, [r7, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3304      	adds	r3, #4
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	8ad2      	ldrh	r2, [r2, #22]
 800ef5c:	6879      	ldr	r1, [r7, #4]
 800ef5e:	8b09      	ldrh	r1, [r1, #24]
 800ef60:	9102      	str	r1, [sp, #8]
 800ef62:	9201      	str	r2, [sp, #4]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	462b      	mov	r3, r5
 800ef68:	4622      	mov	r2, r4
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f005 fe2b 	bl	8014bc8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f001 fbe6 	bl	8010744 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ef78:	4b47      	ldr	r3, [pc, #284]	; (800f098 <tcp_close_shutdown+0x1b0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d105      	bne.n	800ef8e <tcp_close_shutdown+0xa6>
 800ef82:	4b45      	ldr	r3, [pc, #276]	; (800f098 <tcp_close_shutdown+0x1b0>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	4a43      	ldr	r2, [pc, #268]	; (800f098 <tcp_close_shutdown+0x1b0>)
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	e013      	b.n	800efb6 <tcp_close_shutdown+0xce>
 800ef8e:	4b42      	ldr	r3, [pc, #264]	; (800f098 <tcp_close_shutdown+0x1b0>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	e00c      	b.n	800efb0 <tcp_close_shutdown+0xc8>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	687a      	ldr	r2, [r7, #4]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d104      	bne.n	800efaa <tcp_close_shutdown+0xc2>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	60da      	str	r2, [r3, #12]
 800efa8:	e005      	b.n	800efb6 <tcp_close_shutdown+0xce>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	60fb      	str	r3, [r7, #12]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1ef      	bne.n	800ef96 <tcp_close_shutdown+0xae>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	60da      	str	r2, [r3, #12]
 800efbc:	4b37      	ldr	r3, [pc, #220]	; (800f09c <tcp_close_shutdown+0x1b4>)
 800efbe:	2201      	movs	r2, #1
 800efc0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800efc2:	4b37      	ldr	r3, [pc, #220]	; (800f0a0 <tcp_close_shutdown+0x1b8>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d102      	bne.n	800efd2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800efcc:	f004 f87e 	bl	80130cc <tcp_trigger_input_pcb_close>
 800efd0:	e002      	b.n	800efd8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff fed6 	bl	800ed84 <tcp_free>
      }
      return ERR_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	e050      	b.n	800f07e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7d1b      	ldrb	r3, [r3, #20]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d03b      	beq.n	800f05c <tcp_close_shutdown+0x174>
 800efe4:	2b02      	cmp	r3, #2
 800efe6:	dc44      	bgt.n	800f072 <tcp_close_shutdown+0x18a>
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <tcp_close_shutdown+0x10a>
 800efec:	2b01      	cmp	r3, #1
 800efee:	d02a      	beq.n	800f046 <tcp_close_shutdown+0x15e>
 800eff0:	e03f      	b.n	800f072 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	8adb      	ldrh	r3, [r3, #22]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d021      	beq.n	800f03e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800effa:	4b2a      	ldr	r3, [pc, #168]	; (800f0a4 <tcp_close_shutdown+0x1bc>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	429a      	cmp	r2, r3
 800f002:	d105      	bne.n	800f010 <tcp_close_shutdown+0x128>
 800f004:	4b27      	ldr	r3, [pc, #156]	; (800f0a4 <tcp_close_shutdown+0x1bc>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	4a26      	ldr	r2, [pc, #152]	; (800f0a4 <tcp_close_shutdown+0x1bc>)
 800f00c:	6013      	str	r3, [r2, #0]
 800f00e:	e013      	b.n	800f038 <tcp_close_shutdown+0x150>
 800f010:	4b24      	ldr	r3, [pc, #144]	; (800f0a4 <tcp_close_shutdown+0x1bc>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	60bb      	str	r3, [r7, #8]
 800f016:	e00c      	b.n	800f032 <tcp_close_shutdown+0x14a>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d104      	bne.n	800f02c <tcp_close_shutdown+0x144>
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	60da      	str	r2, [r3, #12]
 800f02a:	e005      	b.n	800f038 <tcp_close_shutdown+0x150>
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	60bb      	str	r3, [r7, #8]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1ef      	bne.n	800f018 <tcp_close_shutdown+0x130>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7ff fea0 	bl	800ed84 <tcp_free>
      break;
 800f044:	e01a      	b.n	800f07c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff ff14 	bl	800ee74 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f04c:	6879      	ldr	r1, [r7, #4]
 800f04e:	4816      	ldr	r0, [pc, #88]	; (800f0a8 <tcp_close_shutdown+0x1c0>)
 800f050:	f001 fbc8 	bl	80107e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7ff feb1 	bl	800edbc <tcp_free_listen>
      break;
 800f05a:	e00f      	b.n	800f07c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	480e      	ldr	r0, [pc, #56]	; (800f098 <tcp_close_shutdown+0x1b0>)
 800f060:	f001 fbc0 	bl	80107e4 <tcp_pcb_remove>
 800f064:	4b0d      	ldr	r3, [pc, #52]	; (800f09c <tcp_close_shutdown+0x1b4>)
 800f066:	2201      	movs	r2, #1
 800f068:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f7ff fe8a 	bl	800ed84 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f070:	e004      	b.n	800f07c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f81a 	bl	800f0ac <tcp_close_shutdown_fin>
 800f078:	4603      	mov	r3, r0
 800f07a:	e000      	b.n	800f07e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bdb0      	pop	{r4, r5, r7, pc}
 800f086:	bf00      	nop
 800f088:	0801c56c 	.word	0x0801c56c
 800f08c:	0801c640 	.word	0x0801c640
 800f090:	0801c5b0 	.word	0x0801c5b0
 800f094:	0801c660 	.word	0x0801c660
 800f098:	20011bc0 	.word	0x20011bc0
 800f09c:	20011bc8 	.word	0x20011bc8
 800f0a0:	20011c00 	.word	0x20011c00
 800f0a4:	20011bb8 	.word	0x20011bb8
 800f0a8:	20011bbc 	.word	0x20011bbc

0800f0ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d106      	bne.n	800f0c8 <tcp_close_shutdown_fin+0x1c>
 800f0ba:	4b2e      	ldr	r3, [pc, #184]	; (800f174 <tcp_close_shutdown_fin+0xc8>)
 800f0bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f0c0:	492d      	ldr	r1, [pc, #180]	; (800f178 <tcp_close_shutdown_fin+0xcc>)
 800f0c2:	482e      	ldr	r0, [pc, #184]	; (800f17c <tcp_close_shutdown_fin+0xd0>)
 800f0c4:	f008 ff24 	bl	8017f10 <iprintf>

  switch (pcb->state) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	7d1b      	ldrb	r3, [r3, #20]
 800f0cc:	2b07      	cmp	r3, #7
 800f0ce:	d020      	beq.n	800f112 <tcp_close_shutdown_fin+0x66>
 800f0d0:	2b07      	cmp	r3, #7
 800f0d2:	dc2b      	bgt.n	800f12c <tcp_close_shutdown_fin+0x80>
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d002      	beq.n	800f0de <tcp_close_shutdown_fin+0x32>
 800f0d8:	2b04      	cmp	r3, #4
 800f0da:	d00d      	beq.n	800f0f8 <tcp_close_shutdown_fin+0x4c>
 800f0dc:	e026      	b.n	800f12c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f004 fe5e 	bl	8013da0 <tcp_send_fin>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d11f      	bne.n	800f130 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2205      	movs	r2, #5
 800f0f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0f6:	e01b      	b.n	800f130 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f004 fe51 	bl	8013da0 <tcp_send_fin>
 800f0fe:	4603      	mov	r3, r0
 800f100:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d114      	bne.n	800f134 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2205      	movs	r2, #5
 800f10e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f110:	e010      	b.n	800f134 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f004 fe44 	bl	8013da0 <tcp_send_fin>
 800f118:	4603      	mov	r3, r0
 800f11a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2209      	movs	r2, #9
 800f128:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f12a:	e005      	b.n	800f138 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	e01c      	b.n	800f16a <tcp_close_shutdown_fin+0xbe>
      break;
 800f130:	bf00      	nop
 800f132:	e002      	b.n	800f13a <tcp_close_shutdown_fin+0x8e>
      break;
 800f134:	bf00      	nop
 800f136:	e000      	b.n	800f13a <tcp_close_shutdown_fin+0x8e>
      break;
 800f138:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d103      	bne.n	800f14a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f004 ff6a 	bl	801401c <tcp_output>
 800f148:	e00d      	b.n	800f166 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f152:	d108      	bne.n	800f166 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8b5b      	ldrh	r3, [r3, #26]
 800f158:	f043 0308 	orr.w	r3, r3, #8
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	e001      	b.n	800f16a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	0801c56c 	.word	0x0801c56c
 800f178:	0801c61c 	.word	0x0801c61c
 800f17c:	0801c5b0 	.word	0x0801c5b0

0800f180 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d109      	bne.n	800f1a2 <tcp_close+0x22>
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <tcp_close+0x4c>)
 800f190:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f194:	490e      	ldr	r1, [pc, #56]	; (800f1d0 <tcp_close+0x50>)
 800f196:	480f      	ldr	r0, [pc, #60]	; (800f1d4 <tcp_close+0x54>)
 800f198:	f008 feba 	bl	8017f10 <iprintf>
 800f19c:	f06f 030f 	mvn.w	r3, #15
 800f1a0:	e00f      	b.n	800f1c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	7d1b      	ldrb	r3, [r3, #20]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d006      	beq.n	800f1b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	8b5b      	ldrh	r3, [r3, #26]
 800f1ae:	f043 0310 	orr.w	r3, r3, #16
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fe94 	bl	800eee8 <tcp_close_shutdown>
 800f1c0:	4603      	mov	r3, r0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	0801c56c 	.word	0x0801c56c
 800f1d0:	0801c67c 	.word	0x0801c67c
 800f1d4:	0801c5b0 	.word	0x0801c5b0

0800f1d8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d109      	bne.n	800f1fe <tcp_shutdown+0x26>
 800f1ea:	4b26      	ldr	r3, [pc, #152]	; (800f284 <tcp_shutdown+0xac>)
 800f1ec:	f240 2207 	movw	r2, #519	; 0x207
 800f1f0:	4925      	ldr	r1, [pc, #148]	; (800f288 <tcp_shutdown+0xb0>)
 800f1f2:	4826      	ldr	r0, [pc, #152]	; (800f28c <tcp_shutdown+0xb4>)
 800f1f4:	f008 fe8c 	bl	8017f10 <iprintf>
 800f1f8:	f06f 030f 	mvn.w	r3, #15
 800f1fc:	e03d      	b.n	800f27a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	7d1b      	ldrb	r3, [r3, #20]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d102      	bne.n	800f20c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f206:	f06f 030a 	mvn.w	r3, #10
 800f20a:	e036      	b.n	800f27a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d01b      	beq.n	800f24a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	8b5b      	ldrh	r3, [r3, #26]
 800f216:	f043 0310 	orr.w	r3, r3, #16
 800f21a:	b29a      	uxth	r2, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d005      	beq.n	800f232 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f226:	2101      	movs	r1, #1
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f7ff fe5d 	bl	800eee8 <tcp_close_shutdown>
 800f22e:	4603      	mov	r3, r0
 800f230:	e023      	b.n	800f27a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f236:	2b00      	cmp	r3, #0
 800f238:	d007      	beq.n	800f24a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff faf4 	bl	800e82c <pbuf_free>
      pcb->refused_data = NULL;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2200      	movs	r2, #0
 800f248:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d013      	beq.n	800f278 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	7d1b      	ldrb	r3, [r3, #20]
 800f254:	2b04      	cmp	r3, #4
 800f256:	dc02      	bgt.n	800f25e <tcp_shutdown+0x86>
 800f258:	2b03      	cmp	r3, #3
 800f25a:	da02      	bge.n	800f262 <tcp_shutdown+0x8a>
 800f25c:	e009      	b.n	800f272 <tcp_shutdown+0x9a>
 800f25e:	2b07      	cmp	r3, #7
 800f260:	d107      	bne.n	800f272 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	b2db      	uxtb	r3, r3
 800f266:	4619      	mov	r1, r3
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff fe3d 	bl	800eee8 <tcp_close_shutdown>
 800f26e:	4603      	mov	r3, r0
 800f270:	e003      	b.n	800f27a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f272:	f06f 030a 	mvn.w	r3, #10
 800f276:	e000      	b.n	800f27a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	0801c56c 	.word	0x0801c56c
 800f288:	0801c694 	.word	0x0801c694
 800f28c:	0801c5b0 	.word	0x0801c5b0

0800f290 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b08e      	sub	sp, #56	; 0x38
 800f294:	af04      	add	r7, sp, #16
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d107      	bne.n	800f2b0 <tcp_abandon+0x20>
 800f2a0:	4b52      	ldr	r3, [pc, #328]	; (800f3ec <tcp_abandon+0x15c>)
 800f2a2:	f240 223d 	movw	r2, #573	; 0x23d
 800f2a6:	4952      	ldr	r1, [pc, #328]	; (800f3f0 <tcp_abandon+0x160>)
 800f2a8:	4852      	ldr	r0, [pc, #328]	; (800f3f4 <tcp_abandon+0x164>)
 800f2aa:	f008 fe31 	bl	8017f10 <iprintf>
 800f2ae:	e099      	b.n	800f3e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d106      	bne.n	800f2c6 <tcp_abandon+0x36>
 800f2b8:	4b4c      	ldr	r3, [pc, #304]	; (800f3ec <tcp_abandon+0x15c>)
 800f2ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f2be:	494e      	ldr	r1, [pc, #312]	; (800f3f8 <tcp_abandon+0x168>)
 800f2c0:	484c      	ldr	r0, [pc, #304]	; (800f3f4 <tcp_abandon+0x164>)
 800f2c2:	f008 fe25 	bl	8017f10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ca:	2b0a      	cmp	r3, #10
 800f2cc:	d107      	bne.n	800f2de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	484a      	ldr	r0, [pc, #296]	; (800f3fc <tcp_abandon+0x16c>)
 800f2d2:	f001 fa87 	bl	80107e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fd54 	bl	800ed84 <tcp_free>
 800f2dc:	e082      	b.n	800f3e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	691b      	ldr	r3, [r3, #16]
 800f2fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	7d1b      	ldrb	r3, [r3, #20]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d126      	bne.n	800f356 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	8adb      	ldrh	r3, [r3, #22]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d02e      	beq.n	800f36e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f310:	4b3b      	ldr	r3, [pc, #236]	; (800f400 <tcp_abandon+0x170>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	429a      	cmp	r2, r3
 800f318:	d105      	bne.n	800f326 <tcp_abandon+0x96>
 800f31a:	4b39      	ldr	r3, [pc, #228]	; (800f400 <tcp_abandon+0x170>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	4a37      	ldr	r2, [pc, #220]	; (800f400 <tcp_abandon+0x170>)
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	e013      	b.n	800f34e <tcp_abandon+0xbe>
 800f326:	4b36      	ldr	r3, [pc, #216]	; (800f400 <tcp_abandon+0x170>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	e00c      	b.n	800f348 <tcp_abandon+0xb8>
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	429a      	cmp	r2, r3
 800f336:	d104      	bne.n	800f342 <tcp_abandon+0xb2>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68da      	ldr	r2, [r3, #12]
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	60da      	str	r2, [r3, #12]
 800f340:	e005      	b.n	800f34e <tcp_abandon+0xbe>
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1ef      	bne.n	800f32e <tcp_abandon+0x9e>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	60da      	str	r2, [r3, #12]
 800f354:	e00b      	b.n	800f36e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	8adb      	ldrh	r3, [r3, #22]
 800f35e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	4828      	ldr	r0, [pc, #160]	; (800f404 <tcp_abandon+0x174>)
 800f364:	f001 fa3e 	bl	80107e4 <tcp_pcb_remove>
 800f368:	4b27      	ldr	r3, [pc, #156]	; (800f408 <tcp_abandon+0x178>)
 800f36a:	2201      	movs	r2, #1
 800f36c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f372:	2b00      	cmp	r3, #0
 800f374:	d004      	beq.n	800f380 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 ff12 	bl	80101a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f384:	2b00      	cmp	r3, #0
 800f386:	d004      	beq.n	800f392 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 ff09 	bl	80101a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f396:	2b00      	cmp	r3, #0
 800f398:	d004      	beq.n	800f3a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 ff00 	bl	80101a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00e      	beq.n	800f3c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f3aa:	6879      	ldr	r1, [r7, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3304      	adds	r3, #4
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	8b12      	ldrh	r2, [r2, #24]
 800f3b4:	9202      	str	r2, [sp, #8]
 800f3b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f3b8:	9201      	str	r2, [sp, #4]
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	460b      	mov	r3, r1
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	69b9      	ldr	r1, [r7, #24]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f005 fc00 	bl	8014bc8 <tcp_rst>
    }
    last_state = pcb->state;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	7d1b      	ldrb	r3, [r3, #20]
 800f3cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fcd8 	bl	800ed84 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d004      	beq.n	800f3e4 <tcp_abandon+0x154>
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f06f 010c 	mvn.w	r1, #12
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	4798      	blx	r3
  }
}
 800f3e4:	3728      	adds	r7, #40	; 0x28
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	0801c56c 	.word	0x0801c56c
 800f3f0:	0801c6b0 	.word	0x0801c6b0
 800f3f4:	0801c5b0 	.word	0x0801c5b0
 800f3f8:	0801c6cc 	.word	0x0801c6cc
 800f3fc:	20011bc4 	.word	0x20011bc4
 800f400:	20011bb8 	.word	0x20011bb8
 800f404:	20011bc0 	.word	0x20011bc0
 800f408:	20011bc8 	.word	0x20011bc8

0800f40c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f414:	2101      	movs	r1, #1
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7ff ff3a 	bl	800f290 <tcp_abandon>
}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	60b9      	str	r1, [r7, #8]
 800f42e:	4613      	mov	r3, r2
 800f430:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f432:	2304      	movs	r3, #4
 800f434:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f43c:	4b3e      	ldr	r3, [pc, #248]	; (800f538 <tcp_bind+0x114>)
 800f43e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d109      	bne.n	800f45a <tcp_bind+0x36>
 800f446:	4b3d      	ldr	r3, [pc, #244]	; (800f53c <tcp_bind+0x118>)
 800f448:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f44c:	493c      	ldr	r1, [pc, #240]	; (800f540 <tcp_bind+0x11c>)
 800f44e:	483d      	ldr	r0, [pc, #244]	; (800f544 <tcp_bind+0x120>)
 800f450:	f008 fd5e 	bl	8017f10 <iprintf>
 800f454:	f06f 030f 	mvn.w	r3, #15
 800f458:	e06a      	b.n	800f530 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	7d1b      	ldrb	r3, [r3, #20]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d009      	beq.n	800f476 <tcp_bind+0x52>
 800f462:	4b36      	ldr	r3, [pc, #216]	; (800f53c <tcp_bind+0x118>)
 800f464:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f468:	4937      	ldr	r1, [pc, #220]	; (800f548 <tcp_bind+0x124>)
 800f46a:	4836      	ldr	r0, [pc, #216]	; (800f544 <tcp_bind+0x120>)
 800f46c:	f008 fd50 	bl	8017f10 <iprintf>
 800f470:	f06f 0305 	mvn.w	r3, #5
 800f474:	e05c      	b.n	800f530 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f476:	88fb      	ldrh	r3, [r7, #6]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d109      	bne.n	800f490 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f47c:	f000 f914 	bl	800f6a8 <tcp_new_port>
 800f480:	4603      	mov	r3, r0
 800f482:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f484:	88fb      	ldrh	r3, [r7, #6]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d135      	bne.n	800f4f6 <tcp_bind+0xd2>
      return ERR_BUF;
 800f48a:	f06f 0301 	mvn.w	r3, #1
 800f48e:	e04f      	b.n	800f530 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f490:	2300      	movs	r3, #0
 800f492:	61fb      	str	r3, [r7, #28]
 800f494:	e02b      	b.n	800f4ee <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f496:	4a2d      	ldr	r2, [pc, #180]	; (800f54c <tcp_bind+0x128>)
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	e01e      	b.n	800f4e2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	8adb      	ldrh	r3, [r3, #22]
 800f4a8:	88fa      	ldrh	r2, [r7, #6]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d116      	bne.n	800f4dc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4ae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d010      	beq.n	800f4d6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00c      	beq.n	800f4d6 <tcp_bind+0xb2>
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d009      	beq.n	800f4d6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d005      	beq.n	800f4d6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d102      	bne.n	800f4dc <tcp_bind+0xb8>
              return ERR_USE;
 800f4d6:	f06f 0307 	mvn.w	r3, #7
 800f4da:	e029      	b.n	800f530 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1dd      	bne.n	800f4a4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	61fb      	str	r3, [r7, #28]
 800f4ee:	69fa      	ldr	r2, [r7, #28]
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	dbcf      	blt.n	800f496 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00c      	beq.n	800f516 <tcp_bind+0xf2>
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <tcp_bind+0xec>
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	e000      	b.n	800f512 <tcp_bind+0xee>
 800f510:	2300      	movs	r3, #0
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	88fa      	ldrh	r2, [r7, #6]
 800f51a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f51c:	4b0c      	ldr	r3, [pc, #48]	; (800f550 <tcp_bind+0x12c>)
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	60da      	str	r2, [r3, #12]
 800f524:	4a0a      	ldr	r2, [pc, #40]	; (800f550 <tcp_bind+0x12c>)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6013      	str	r3, [r2, #0]
 800f52a:	f005 fd0f 	bl	8014f4c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3720      	adds	r7, #32
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	0801e2f0 	.word	0x0801e2f0
 800f53c:	0801c56c 	.word	0x0801c56c
 800f540:	0801c700 	.word	0x0801c700
 800f544:	0801c5b0 	.word	0x0801c5b0
 800f548:	0801c718 	.word	0x0801c718
 800f54c:	0801e2c8 	.word	0x0801e2c8
 800f550:	20011bb8 	.word	0x20011bb8

0800f554 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <tcp_update_rcv_ann_wnd+0x1c>
 800f562:	4b25      	ldr	r3, [pc, #148]	; (800f5f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f564:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f568:	4924      	ldr	r1, [pc, #144]	; (800f5fc <tcp_update_rcv_ann_wnd+0xa8>)
 800f56a:	4825      	ldr	r0, [pc, #148]	; (800f600 <tcp_update_rcv_ann_wnd+0xac>)
 800f56c:	f008 fcd0 	bl	8017f10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f578:	4413      	add	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f584:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f588:	bf28      	it	cs
 800f58a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f58e:	b292      	uxth	r2, r2
 800f590:	4413      	add	r3, r2
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	2b00      	cmp	r3, #0
 800f598:	db08      	blt.n	800f5ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	e020      	b.n	800f5ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	dd03      	ble.n	800f5c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5c0:	e014      	b.n	800f5ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5d4:	d306      	bcc.n	800f5e4 <tcp_update_rcv_ann_wnd+0x90>
 800f5d6:	4b08      	ldr	r3, [pc, #32]	; (800f5f8 <tcp_update_rcv_ann_wnd+0xa4>)
 800f5d8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f5dc:	4909      	ldr	r1, [pc, #36]	; (800f604 <tcp_update_rcv_ann_wnd+0xb0>)
 800f5de:	4808      	ldr	r0, [pc, #32]	; (800f600 <tcp_update_rcv_ann_wnd+0xac>)
 800f5e0:	f008 fc96 	bl	8017f10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f5ec:	2300      	movs	r3, #0
  }
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	0801c56c 	.word	0x0801c56c
 800f5fc:	0801c7c8 	.word	0x0801c7c8
 800f600:	0801c5b0 	.word	0x0801c5b0
 800f604:	0801c7ec 	.word	0x0801c7ec

0800f608 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d107      	bne.n	800f62a <tcp_recved+0x22>
 800f61a:	4b1f      	ldr	r3, [pc, #124]	; (800f698 <tcp_recved+0x90>)
 800f61c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f620:	491e      	ldr	r1, [pc, #120]	; (800f69c <tcp_recved+0x94>)
 800f622:	481f      	ldr	r0, [pc, #124]	; (800f6a0 <tcp_recved+0x98>)
 800f624:	f008 fc74 	bl	8017f10 <iprintf>
 800f628:	e032      	b.n	800f690 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	7d1b      	ldrb	r3, [r3, #20]
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d106      	bne.n	800f640 <tcp_recved+0x38>
 800f632:	4b19      	ldr	r3, [pc, #100]	; (800f698 <tcp_recved+0x90>)
 800f634:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f638:	491a      	ldr	r1, [pc, #104]	; (800f6a4 <tcp_recved+0x9c>)
 800f63a:	4819      	ldr	r0, [pc, #100]	; (800f6a0 <tcp_recved+0x98>)
 800f63c:	f008 fc68 	bl	8017f10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f644:	887b      	ldrh	r3, [r7, #2]
 800f646:	4413      	add	r3, r2
 800f648:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f64a:	89fb      	ldrh	r3, [r7, #14]
 800f64c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f650:	d804      	bhi.n	800f65c <tcp_recved+0x54>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f656:	89fa      	ldrh	r2, [r7, #14]
 800f658:	429a      	cmp	r2, r3
 800f65a:	d204      	bcs.n	800f666 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f662:	851a      	strh	r2, [r3, #40]	; 0x28
 800f664:	e002      	b.n	800f66c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	89fa      	ldrh	r2, [r7, #14]
 800f66a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f7ff ff71 	bl	800f554 <tcp_update_rcv_ann_wnd>
 800f672:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f67a:	d309      	bcc.n	800f690 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	8b5b      	ldrh	r3, [r3, #26]
 800f680:	f043 0302 	orr.w	r3, r3, #2
 800f684:	b29a      	uxth	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f004 fcc6 	bl	801401c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	0801c56c 	.word	0x0801c56c
 800f69c:	0801c808 	.word	0x0801c808
 800f6a0:	0801c5b0 	.word	0x0801c5b0
 800f6a4:	0801c820 	.word	0x0801c820

0800f6a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f6b2:	4b1e      	ldr	r3, [pc, #120]	; (800f72c <tcp_new_port+0x84>)
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	4b1c      	ldr	r3, [pc, #112]	; (800f72c <tcp_new_port+0x84>)
 800f6bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f6be:	4b1b      	ldr	r3, [pc, #108]	; (800f72c <tcp_new_port+0x84>)
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d103      	bne.n	800f6d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f6ca:	4b18      	ldr	r3, [pc, #96]	; (800f72c <tcp_new_port+0x84>)
 800f6cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f6d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	71fb      	strb	r3, [r7, #7]
 800f6d6:	e01e      	b.n	800f716 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	4a15      	ldr	r2, [pc, #84]	; (800f730 <tcp_new_port+0x88>)
 800f6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	603b      	str	r3, [r7, #0]
 800f6e4:	e011      	b.n	800f70a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	8ada      	ldrh	r2, [r3, #22]
 800f6ea:	4b10      	ldr	r3, [pc, #64]	; (800f72c <tcp_new_port+0x84>)
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d108      	bne.n	800f704 <tcp_new_port+0x5c>
        n++;
 800f6f2:	88bb      	ldrh	r3, [r7, #4]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f6f8:	88bb      	ldrh	r3, [r7, #4]
 800f6fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6fe:	d3d8      	bcc.n	800f6b2 <tcp_new_port+0xa>
          return 0;
 800f700:	2300      	movs	r3, #0
 800f702:	e00d      	b.n	800f720 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	603b      	str	r3, [r7, #0]
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1ea      	bne.n	800f6e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f710:	79fb      	ldrb	r3, [r7, #7]
 800f712:	3301      	adds	r3, #1
 800f714:	71fb      	strb	r3, [r7, #7]
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	2b03      	cmp	r3, #3
 800f71a:	d9dd      	bls.n	800f6d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f71c:	4b03      	ldr	r3, [pc, #12]	; (800f72c <tcp_new_port+0x84>)
 800f71e:	881b      	ldrh	r3, [r3, #0]
}
 800f720:	4618      	mov	r0, r3
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	20000024 	.word	0x20000024
 800f730:	0801e2c8 	.word	0x0801e2c8

0800f734 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b08a      	sub	sp, #40	; 0x28
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	603b      	str	r3, [r7, #0]
 800f740:	4613      	mov	r3, r2
 800f742:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f744:	2300      	movs	r3, #0
 800f746:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d109      	bne.n	800f762 <tcp_connect+0x2e>
 800f74e:	4b7d      	ldr	r3, [pc, #500]	; (800f944 <tcp_connect+0x210>)
 800f750:	f240 4235 	movw	r2, #1077	; 0x435
 800f754:	497c      	ldr	r1, [pc, #496]	; (800f948 <tcp_connect+0x214>)
 800f756:	487d      	ldr	r0, [pc, #500]	; (800f94c <tcp_connect+0x218>)
 800f758:	f008 fbda 	bl	8017f10 <iprintf>
 800f75c:	f06f 030f 	mvn.w	r3, #15
 800f760:	e0ec      	b.n	800f93c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f762:	68bb      	ldr	r3, [r7, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d109      	bne.n	800f77c <tcp_connect+0x48>
 800f768:	4b76      	ldr	r3, [pc, #472]	; (800f944 <tcp_connect+0x210>)
 800f76a:	f240 4236 	movw	r2, #1078	; 0x436
 800f76e:	4978      	ldr	r1, [pc, #480]	; (800f950 <tcp_connect+0x21c>)
 800f770:	4876      	ldr	r0, [pc, #472]	; (800f94c <tcp_connect+0x218>)
 800f772:	f008 fbcd 	bl	8017f10 <iprintf>
 800f776:	f06f 030f 	mvn.w	r3, #15
 800f77a:	e0df      	b.n	800f93c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	7d1b      	ldrb	r3, [r3, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d009      	beq.n	800f798 <tcp_connect+0x64>
 800f784:	4b6f      	ldr	r3, [pc, #444]	; (800f944 <tcp_connect+0x210>)
 800f786:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f78a:	4972      	ldr	r1, [pc, #456]	; (800f954 <tcp_connect+0x220>)
 800f78c:	486f      	ldr	r0, [pc, #444]	; (800f94c <tcp_connect+0x218>)
 800f78e:	f008 fbbf 	bl	8017f10 <iprintf>
 800f792:	f06f 0309 	mvn.w	r3, #9
 800f796:	e0d1      	b.n	800f93c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d002      	beq.n	800f7a4 <tcp_connect+0x70>
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	e000      	b.n	800f7a6 <tcp_connect+0x72>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	88fa      	ldrh	r2, [r7, #6]
 800f7ae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	7a1b      	ldrb	r3, [r3, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d006      	beq.n	800f7c6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	7a1b      	ldrb	r3, [r3, #8]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fe fca7 	bl	800e110 <netif_get_by_index>
 800f7c2:	6278      	str	r0, [r7, #36]	; 0x24
 800f7c4:	e005      	b.n	800f7d2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f006 fe12 	bl	80163f4 <ip4_route>
 800f7d0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d102      	bne.n	800f7de <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f7d8:	f06f 0303 	mvn.w	r3, #3
 800f7dc:	e0ae      	b.n	800f93c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d003      	beq.n	800f7ec <tcp_connect+0xb8>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d111      	bne.n	800f810 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d002      	beq.n	800f7f8 <tcp_connect+0xc4>
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	3304      	adds	r3, #4
 800f7f6:	e000      	b.n	800f7fa <tcp_connect+0xc6>
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d102      	bne.n	800f808 <tcp_connect+0xd4>
      return ERR_RTE;
 800f802:	f06f 0303 	mvn.w	r3, #3
 800f806:	e099      	b.n	800f93c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f808:	69fb      	ldr	r3, [r7, #28]
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	8adb      	ldrh	r3, [r3, #22]
 800f814:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	8adb      	ldrh	r3, [r3, #22]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10c      	bne.n	800f838 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f81e:	f7ff ff43 	bl	800f6a8 <tcp_new_port>
 800f822:	4603      	mov	r3, r0
 800f824:	461a      	mov	r2, r3
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	8adb      	ldrh	r3, [r3, #22]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d102      	bne.n	800f838 <tcp_connect+0x104>
      return ERR_BUF;
 800f832:	f06f 0301 	mvn.w	r3, #1
 800f836:	e081      	b.n	800f93c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f838:	68f8      	ldr	r0, [r7, #12]
 800f83a:	f001 f867 	bl	801090c <tcp_next_iss>
 800f83e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	1e5a      	subs	r2, r3, #1
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	1e5a      	subs	r2, r3, #1
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	1e5a      	subs	r2, r3, #1
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f86a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f882:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f88c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	3304      	adds	r3, #4
 800f896:	461a      	mov	r2, r3
 800f898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f89a:	f001 f85d 	bl	8010958 <tcp_eff_send_mss_netif>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f8b6:	2102      	movs	r1, #2
 800f8b8:	68f8      	ldr	r0, [r7, #12]
 800f8ba:	f004 fac1 	bl	8013e40 <tcp_enqueue_flags>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f8c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d136      	bne.n	800f938 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f8d0:	8b7b      	ldrh	r3, [r7, #26]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d021      	beq.n	800f91a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f8d6:	4b20      	ldr	r3, [pc, #128]	; (800f958 <tcp_connect+0x224>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d105      	bne.n	800f8ec <tcp_connect+0x1b8>
 800f8e0:	4b1d      	ldr	r3, [pc, #116]	; (800f958 <tcp_connect+0x224>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	4a1c      	ldr	r2, [pc, #112]	; (800f958 <tcp_connect+0x224>)
 800f8e8:	6013      	str	r3, [r2, #0]
 800f8ea:	e013      	b.n	800f914 <tcp_connect+0x1e0>
 800f8ec:	4b1a      	ldr	r3, [pc, #104]	; (800f958 <tcp_connect+0x224>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	623b      	str	r3, [r7, #32]
 800f8f2:	e00c      	b.n	800f90e <tcp_connect+0x1da>
 800f8f4:	6a3b      	ldr	r3, [r7, #32]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d104      	bne.n	800f908 <tcp_connect+0x1d4>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	68da      	ldr	r2, [r3, #12]
 800f902:	6a3b      	ldr	r3, [r7, #32]
 800f904:	60da      	str	r2, [r3, #12]
 800f906:	e005      	b.n	800f914 <tcp_connect+0x1e0>
 800f908:	6a3b      	ldr	r3, [r7, #32]
 800f90a:	68db      	ldr	r3, [r3, #12]
 800f90c:	623b      	str	r3, [r7, #32]
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d1ef      	bne.n	800f8f4 <tcp_connect+0x1c0>
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2200      	movs	r2, #0
 800f918:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f91a:	4b10      	ldr	r3, [pc, #64]	; (800f95c <tcp_connect+0x228>)
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	60da      	str	r2, [r3, #12]
 800f922:	4a0e      	ldr	r2, [pc, #56]	; (800f95c <tcp_connect+0x228>)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	f005 fb10 	bl	8014f4c <tcp_timer_needed>
 800f92c:	4b0c      	ldr	r3, [pc, #48]	; (800f960 <tcp_connect+0x22c>)
 800f92e:	2201      	movs	r2, #1
 800f930:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f004 fb72 	bl	801401c <tcp_output>
  }
  return ret;
 800f938:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3728      	adds	r7, #40	; 0x28
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	0801c56c 	.word	0x0801c56c
 800f948:	0801c848 	.word	0x0801c848
 800f94c:	0801c5b0 	.word	0x0801c5b0
 800f950:	0801c864 	.word	0x0801c864
 800f954:	0801c880 	.word	0x0801c880
 800f958:	20011bb8 	.word	0x20011bb8
 800f95c:	20011bc0 	.word	0x20011bc0
 800f960:	20011bc8 	.word	0x20011bc8

0800f964 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f964:	b5b0      	push	{r4, r5, r7, lr}
 800f966:	b090      	sub	sp, #64	; 0x40
 800f968:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f96a:	2300      	movs	r3, #0
 800f96c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f970:	4b94      	ldr	r3, [pc, #592]	; (800fbc4 <tcp_slowtmr+0x260>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	3301      	adds	r3, #1
 800f976:	4a93      	ldr	r2, [pc, #588]	; (800fbc4 <tcp_slowtmr+0x260>)
 800f978:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f97a:	4b93      	ldr	r3, [pc, #588]	; (800fbc8 <tcp_slowtmr+0x264>)
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	b2da      	uxtb	r2, r3
 800f982:	4b91      	ldr	r3, [pc, #580]	; (800fbc8 <tcp_slowtmr+0x264>)
 800f984:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f986:	2300      	movs	r3, #0
 800f988:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f98a:	4b90      	ldr	r3, [pc, #576]	; (800fbcc <tcp_slowtmr+0x268>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f990:	e29d      	b.n	800fece <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	7d1b      	ldrb	r3, [r3, #20]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <tcp_slowtmr+0x44>
 800f99a:	4b8d      	ldr	r3, [pc, #564]	; (800fbd0 <tcp_slowtmr+0x26c>)
 800f99c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f9a0:	498c      	ldr	r1, [pc, #560]	; (800fbd4 <tcp_slowtmr+0x270>)
 800f9a2:	488d      	ldr	r0, [pc, #564]	; (800fbd8 <tcp_slowtmr+0x274>)
 800f9a4:	f008 fab4 	bl	8017f10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9aa:	7d1b      	ldrb	r3, [r3, #20]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d106      	bne.n	800f9be <tcp_slowtmr+0x5a>
 800f9b0:	4b87      	ldr	r3, [pc, #540]	; (800fbd0 <tcp_slowtmr+0x26c>)
 800f9b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f9b6:	4989      	ldr	r1, [pc, #548]	; (800fbdc <tcp_slowtmr+0x278>)
 800f9b8:	4887      	ldr	r0, [pc, #540]	; (800fbd8 <tcp_slowtmr+0x274>)
 800f9ba:	f008 faa9 	bl	8017f10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	7d1b      	ldrb	r3, [r3, #20]
 800f9c2:	2b0a      	cmp	r3, #10
 800f9c4:	d106      	bne.n	800f9d4 <tcp_slowtmr+0x70>
 800f9c6:	4b82      	ldr	r3, [pc, #520]	; (800fbd0 <tcp_slowtmr+0x26c>)
 800f9c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f9cc:	4984      	ldr	r1, [pc, #528]	; (800fbe0 <tcp_slowtmr+0x27c>)
 800f9ce:	4882      	ldr	r0, [pc, #520]	; (800fbd8 <tcp_slowtmr+0x274>)
 800f9d0:	f008 fa9e 	bl	8017f10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d6:	7f9a      	ldrb	r2, [r3, #30]
 800f9d8:	4b7b      	ldr	r3, [pc, #492]	; (800fbc8 <tcp_slowtmr+0x264>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d105      	bne.n	800f9ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f9ea:	e270      	b.n	800fece <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f9ec:	4b76      	ldr	r3, [pc, #472]	; (800fbc8 <tcp_slowtmr+0x264>)
 800f9ee:	781a      	ldrb	r2, [r3, #0]
 800f9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa02:	7d1b      	ldrb	r3, [r3, #20]
 800fa04:	2b02      	cmp	r3, #2
 800fa06:	d10a      	bne.n	800fa1e <tcp_slowtmr+0xba>
 800fa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa0e:	2b05      	cmp	r3, #5
 800fa10:	d905      	bls.n	800fa1e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fa12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa16:	3301      	adds	r3, #1
 800fa18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa1c:	e11e      	b.n	800fc5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa24:	2b0b      	cmp	r3, #11
 800fa26:	d905      	bls.n	800fa34 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fa28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa32:	e113      	b.n	800fc5c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d075      	beq.n	800fb2a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d006      	beq.n	800fa54 <tcp_slowtmr+0xf0>
 800fa46:	4b62      	ldr	r3, [pc, #392]	; (800fbd0 <tcp_slowtmr+0x26c>)
 800fa48:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fa4c:	4965      	ldr	r1, [pc, #404]	; (800fbe4 <tcp_slowtmr+0x280>)
 800fa4e:	4862      	ldr	r0, [pc, #392]	; (800fbd8 <tcp_slowtmr+0x274>)
 800fa50:	f008 fa5e 	bl	8017f10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d106      	bne.n	800fa6a <tcp_slowtmr+0x106>
 800fa5c:	4b5c      	ldr	r3, [pc, #368]	; (800fbd0 <tcp_slowtmr+0x26c>)
 800fa5e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa62:	4961      	ldr	r1, [pc, #388]	; (800fbe8 <tcp_slowtmr+0x284>)
 800fa64:	485c      	ldr	r0, [pc, #368]	; (800fbd8 <tcp_slowtmr+0x274>)
 800fa66:	f008 fa53 	bl	8017f10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa70:	2b0b      	cmp	r3, #11
 800fa72:	d905      	bls.n	800fa80 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fa74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa78:	3301      	adds	r3, #1
 800fa7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa7e:	e0ed      	b.n	800fc5c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa86:	3b01      	subs	r3, #1
 800fa88:	4a58      	ldr	r2, [pc, #352]	; (800fbec <tcp_slowtmr+0x288>)
 800fa8a:	5cd3      	ldrb	r3, [r2, r3]
 800fa8c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa94:	7c7a      	ldrb	r2, [r7, #17]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d907      	bls.n	800faaa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800faa0:	3301      	adds	r3, #1
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fab0:	7c7a      	ldrb	r2, [r7, #17]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	f200 80d2 	bhi.w	800fc5c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fab8:	2301      	movs	r3, #1
 800faba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d108      	bne.n	800fad8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fac8:	f005 f972 	bl	8014db0 <tcp_zero_window_probe>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d014      	beq.n	800fafc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fad2:	2300      	movs	r3, #0
 800fad4:	623b      	str	r3, [r7, #32]
 800fad6:	e011      	b.n	800fafc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fade:	4619      	mov	r1, r3
 800fae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fae2:	f004 f815 	bl	8013b10 <tcp_split_unsent_seg>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d107      	bne.n	800fafc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800faec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faee:	f004 fa95 	bl	801401c <tcp_output>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fafc:	6a3b      	ldr	r3, [r7, #32]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80ac 	beq.w	800fc5c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb06:	2200      	movs	r2, #0
 800fb08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb12:	2b06      	cmp	r3, #6
 800fb14:	f200 80a2 	bhi.w	800fc5c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb1e:	3301      	adds	r3, #1
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fb28:	e098      	b.n	800fc5c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	db0f      	blt.n	800fb54 <tcp_slowtmr+0x1f0>
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb3a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d008      	beq.n	800fb54 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	b21a      	sxth	r2, r3
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb60:	429a      	cmp	r2, r3
 800fb62:	db7b      	blt.n	800fc5c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fb64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb66:	f004 fd5d 	bl	8014624 <tcp_rexmit_rto_prepare>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d007      	beq.n	800fb80 <tcp_slowtmr+0x21c>
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d171      	bne.n	800fc5c <tcp_slowtmr+0x2f8>
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d06d      	beq.n	800fc5c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb82:	7d1b      	ldrb	r3, [r3, #20]
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d03a      	beq.n	800fbfe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb8e:	2b0c      	cmp	r3, #12
 800fb90:	bf28      	it	cs
 800fb92:	230c      	movcs	r3, #12
 800fb94:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb9c:	10db      	asrs	r3, r3, #3
 800fb9e:	b21b      	sxth	r3, r3
 800fba0:	461a      	mov	r2, r3
 800fba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fba8:	4413      	add	r3, r2
 800fbaa:	7efa      	ldrb	r2, [r7, #27]
 800fbac:	4910      	ldr	r1, [pc, #64]	; (800fbf0 <tcp_slowtmr+0x28c>)
 800fbae:	5c8a      	ldrb	r2, [r1, r2]
 800fbb0:	4093      	lsls	r3, r2
 800fbb2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	dc1a      	bgt.n	800fbf4 <tcp_slowtmr+0x290>
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	b21a      	sxth	r2, r3
 800fbc2:	e019      	b.n	800fbf8 <tcp_slowtmr+0x294>
 800fbc4:	20011bb4 	.word	0x20011bb4
 800fbc8:	20011bca 	.word	0x20011bca
 800fbcc:	20011bc0 	.word	0x20011bc0
 800fbd0:	0801c56c 	.word	0x0801c56c
 800fbd4:	0801c8b0 	.word	0x0801c8b0
 800fbd8:	0801c5b0 	.word	0x0801c5b0
 800fbdc:	0801c8dc 	.word	0x0801c8dc
 800fbe0:	0801c908 	.word	0x0801c908
 800fbe4:	0801c938 	.word	0x0801c938
 800fbe8:	0801c96c 	.word	0x0801c96c
 800fbec:	0801e2c0 	.word	0x0801e2c0
 800fbf0:	0801e2b0 	.word	0x0801e2b0
 800fbf4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	2200      	movs	r2, #0
 800fc02:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc10:	4293      	cmp	r3, r2
 800fc12:	bf28      	it	cs
 800fc14:	4613      	movcs	r3, r2
 800fc16:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fc18:	8a7b      	ldrh	r3, [r7, #18]
 800fc1a:	085b      	lsrs	r3, r3, #1
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc26:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d206      	bcs.n	800fc44 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc3a:	005b      	lsls	r3, r3, #1
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc50:	2200      	movs	r2, #0
 800fc52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fc56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc58:	f004 fd54 	bl	8014704 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	7d1b      	ldrb	r3, [r3, #20]
 800fc60:	2b06      	cmp	r3, #6
 800fc62:	d111      	bne.n	800fc88 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	8b5b      	ldrh	r3, [r3, #26]
 800fc68:	f003 0310 	and.w	r3, r3, #16
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00b      	beq.n	800fc88 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc70:	4b9c      	ldr	r3, [pc, #624]	; (800fee4 <tcp_slowtmr+0x580>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	6a1b      	ldr	r3, [r3, #32]
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	2b28      	cmp	r3, #40	; 0x28
 800fc7c:	d904      	bls.n	800fc88 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fc7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc82:	3301      	adds	r3, #1
 800fc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8a:	7a5b      	ldrb	r3, [r3, #9]
 800fc8c:	f003 0308 	and.w	r3, r3, #8
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d04a      	beq.n	800fd2a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc98:	2b04      	cmp	r3, #4
 800fc9a:	d003      	beq.n	800fca4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fca0:	2b07      	cmp	r3, #7
 800fca2:	d142      	bne.n	800fd2a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fca4:	4b8f      	ldr	r3, [pc, #572]	; (800fee4 <tcp_slowtmr+0x580>)
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcaa:	6a1b      	ldr	r3, [r3, #32]
 800fcac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcb4:	4b8c      	ldr	r3, [pc, #560]	; (800fee8 <tcp_slowtmr+0x584>)
 800fcb6:	440b      	add	r3, r1
 800fcb8:	498c      	ldr	r1, [pc, #560]	; (800feec <tcp_slowtmr+0x588>)
 800fcba:	fba1 1303 	umull	r1, r3, r1, r3
 800fcbe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d90a      	bls.n	800fcda <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fcc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcc8:	3301      	adds	r3, #1
 800fcca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fcce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcd8:	e027      	b.n	800fd2a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcda:	4b82      	ldr	r3, [pc, #520]	; (800fee4 <tcp_slowtmr+0x580>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	4b7f      	ldr	r3, [pc, #508]	; (800fef0 <tcp_slowtmr+0x58c>)
 800fcf4:	fb00 f303 	mul.w	r3, r0, r3
 800fcf8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fcfa:	497c      	ldr	r1, [pc, #496]	; (800feec <tcp_slowtmr+0x588>)
 800fcfc:	fba1 1303 	umull	r1, r3, r1, r3
 800fd00:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d911      	bls.n	800fd2a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fd06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd08:	f005 f812 	bl	8014d30 <tcp_keepalive>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fd12:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d107      	bne.n	800fd2a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd20:	3301      	adds	r3, #1
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d011      	beq.n	800fd56 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fd32:	4b6c      	ldr	r3, [pc, #432]	; (800fee4 <tcp_slowtmr+0x580>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	1ad2      	subs	r2, r2, r3
 800fd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd42:	4619      	mov	r1, r3
 800fd44:	460b      	mov	r3, r1
 800fd46:	005b      	lsls	r3, r3, #1
 800fd48:	440b      	add	r3, r1
 800fd4a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d302      	bcc.n	800fd56 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd52:	f000 feab 	bl	8010aac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	7d1b      	ldrb	r3, [r3, #20]
 800fd5a:	2b03      	cmp	r3, #3
 800fd5c:	d10b      	bne.n	800fd76 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd5e:	4b61      	ldr	r3, [pc, #388]	; (800fee4 <tcp_slowtmr+0x580>)
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	2b28      	cmp	r3, #40	; 0x28
 800fd6a:	d904      	bls.n	800fd76 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fd6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd70:	3301      	adds	r3, #1
 800fd72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd78:	7d1b      	ldrb	r3, [r3, #20]
 800fd7a:	2b09      	cmp	r3, #9
 800fd7c:	d10b      	bne.n	800fd96 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd7e:	4b59      	ldr	r3, [pc, #356]	; (800fee4 <tcp_slowtmr+0x580>)
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	1ad3      	subs	r3, r2, r3
 800fd88:	2bf0      	cmp	r3, #240	; 0xf0
 800fd8a:	d904      	bls.n	800fd96 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fd8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd90:	3301      	adds	r3, #1
 800fd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d060      	beq.n	800fe60 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fda4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fda6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fda8:	f000 fccc 	bl	8010744 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d010      	beq.n	800fdd4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fdb2:	4b50      	ldr	r3, [pc, #320]	; (800fef4 <tcp_slowtmr+0x590>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d106      	bne.n	800fdca <tcp_slowtmr+0x466>
 800fdbc:	4b4e      	ldr	r3, [pc, #312]	; (800fef8 <tcp_slowtmr+0x594>)
 800fdbe:	f240 526d 	movw	r2, #1389	; 0x56d
 800fdc2:	494e      	ldr	r1, [pc, #312]	; (800fefc <tcp_slowtmr+0x598>)
 800fdc4:	484e      	ldr	r0, [pc, #312]	; (800ff00 <tcp_slowtmr+0x59c>)
 800fdc6:	f008 f8a3 	bl	8017f10 <iprintf>
        prev->next = pcb->next;
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	68da      	ldr	r2, [r3, #12]
 800fdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd0:	60da      	str	r2, [r3, #12]
 800fdd2:	e00f      	b.n	800fdf4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fdd4:	4b47      	ldr	r3, [pc, #284]	; (800fef4 <tcp_slowtmr+0x590>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d006      	beq.n	800fdec <tcp_slowtmr+0x488>
 800fdde:	4b46      	ldr	r3, [pc, #280]	; (800fef8 <tcp_slowtmr+0x594>)
 800fde0:	f240 5271 	movw	r2, #1393	; 0x571
 800fde4:	4947      	ldr	r1, [pc, #284]	; (800ff04 <tcp_slowtmr+0x5a0>)
 800fde6:	4846      	ldr	r0, [pc, #280]	; (800ff00 <tcp_slowtmr+0x59c>)
 800fde8:	f008 f892 	bl	8017f10 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	4a40      	ldr	r2, [pc, #256]	; (800fef4 <tcp_slowtmr+0x590>)
 800fdf2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fdf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d013      	beq.n	800fe24 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe04:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	3304      	adds	r3, #4
 800fe0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe0c:	8ad2      	ldrh	r2, [r2, #22]
 800fe0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe10:	8b09      	ldrh	r1, [r1, #24]
 800fe12:	9102      	str	r1, [sp, #8]
 800fe14:	9201      	str	r2, [sp, #4]
 800fe16:	9300      	str	r3, [sp, #0]
 800fe18:	462b      	mov	r3, r5
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	4601      	mov	r1, r0
 800fe1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe20:	f004 fed2 	bl	8014bc8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fe24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fe2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2c:	7d1b      	ldrb	r3, [r3, #20]
 800fe2e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fe30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe32:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe3a:	6838      	ldr	r0, [r7, #0]
 800fe3c:	f7fe ffa2 	bl	800ed84 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fe40:	4b31      	ldr	r3, [pc, #196]	; (800ff08 <tcp_slowtmr+0x5a4>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <tcp_slowtmr+0x4f2>
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f06f 010c 	mvn.w	r1, #12
 800fe52:	68b8      	ldr	r0, [r7, #8]
 800fe54:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fe56:	4b2c      	ldr	r3, [pc, #176]	; (800ff08 <tcp_slowtmr+0x5a4>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d037      	beq.n	800fece <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fe5e:	e592      	b.n	800f986 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fe6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6c:	7f1b      	ldrb	r3, [r3, #28]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	7f1a      	ldrb	r2, [r3, #28]
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	7f5b      	ldrb	r3, [r3, #29]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d325      	bcc.n	800fece <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	2200      	movs	r2, #0
 800fe86:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fe88:	4b1f      	ldr	r3, [pc, #124]	; (800ff08 <tcp_slowtmr+0x5a4>)
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00b      	beq.n	800feb0 <tcp_slowtmr+0x54c>
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fea0:	6912      	ldr	r2, [r2, #16]
 800fea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fea4:	4610      	mov	r0, r2
 800fea6:	4798      	blx	r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800feae:	e002      	b.n	800feb6 <tcp_slowtmr+0x552>
 800feb0:	2300      	movs	r3, #0
 800feb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800feb6:	4b14      	ldr	r3, [pc, #80]	; (800ff08 <tcp_slowtmr+0x5a4>)
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d000      	beq.n	800fec0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800febe:	e562      	b.n	800f986 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fec0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d102      	bne.n	800fece <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feca:	f004 f8a7 	bl	801401c <tcp_output>
  while (pcb != NULL) {
 800fece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	f47f ad5e 	bne.w	800f992 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fed6:	2300      	movs	r3, #0
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800feda:	4b0c      	ldr	r3, [pc, #48]	; (800ff0c <tcp_slowtmr+0x5a8>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fee0:	e069      	b.n	800ffb6 <tcp_slowtmr+0x652>
 800fee2:	bf00      	nop
 800fee4:	20011bb4 	.word	0x20011bb4
 800fee8:	000a4cb8 	.word	0x000a4cb8
 800feec:	10624dd3 	.word	0x10624dd3
 800fef0:	000124f8 	.word	0x000124f8
 800fef4:	20011bc0 	.word	0x20011bc0
 800fef8:	0801c56c 	.word	0x0801c56c
 800fefc:	0801c9a4 	.word	0x0801c9a4
 800ff00:	0801c5b0 	.word	0x0801c5b0
 800ff04:	0801c9d0 	.word	0x0801c9d0
 800ff08:	20011bc8 	.word	0x20011bc8
 800ff0c:	20011bc4 	.word	0x20011bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
 800ff14:	2b0a      	cmp	r3, #10
 800ff16:	d006      	beq.n	800ff26 <tcp_slowtmr+0x5c2>
 800ff18:	4b2b      	ldr	r3, [pc, #172]	; (800ffc8 <tcp_slowtmr+0x664>)
 800ff1a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ff1e:	492b      	ldr	r1, [pc, #172]	; (800ffcc <tcp_slowtmr+0x668>)
 800ff20:	482b      	ldr	r0, [pc, #172]	; (800ffd0 <tcp_slowtmr+0x66c>)
 800ff22:	f007 fff5 	bl	8017f10 <iprintf>
    pcb_remove = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff2c:	4b29      	ldr	r3, [pc, #164]	; (800ffd4 <tcp_slowtmr+0x670>)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff32:	6a1b      	ldr	r3, [r3, #32]
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	2bf0      	cmp	r3, #240	; 0xf0
 800ff38:	d904      	bls.n	800ff44 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ff3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff3e:	3301      	adds	r3, #1
 800ff40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d02f      	beq.n	800ffac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ff4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff4e:	f000 fbf9 	bl	8010744 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d010      	beq.n	800ff7a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ff58:	4b1f      	ldr	r3, [pc, #124]	; (800ffd8 <tcp_slowtmr+0x674>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d106      	bne.n	800ff70 <tcp_slowtmr+0x60c>
 800ff62:	4b19      	ldr	r3, [pc, #100]	; (800ffc8 <tcp_slowtmr+0x664>)
 800ff64:	f240 52af 	movw	r2, #1455	; 0x5af
 800ff68:	491c      	ldr	r1, [pc, #112]	; (800ffdc <tcp_slowtmr+0x678>)
 800ff6a:	4819      	ldr	r0, [pc, #100]	; (800ffd0 <tcp_slowtmr+0x66c>)
 800ff6c:	f007 ffd0 	bl	8017f10 <iprintf>
        prev->next = pcb->next;
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	68da      	ldr	r2, [r3, #12]
 800ff74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff76:	60da      	str	r2, [r3, #12]
 800ff78:	e00f      	b.n	800ff9a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ff7a:	4b17      	ldr	r3, [pc, #92]	; (800ffd8 <tcp_slowtmr+0x674>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d006      	beq.n	800ff92 <tcp_slowtmr+0x62e>
 800ff84:	4b10      	ldr	r3, [pc, #64]	; (800ffc8 <tcp_slowtmr+0x664>)
 800ff86:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ff8a:	4915      	ldr	r1, [pc, #84]	; (800ffe0 <tcp_slowtmr+0x67c>)
 800ff8c:	4810      	ldr	r0, [pc, #64]	; (800ffd0 <tcp_slowtmr+0x66c>)
 800ff8e:	f007 ffbf 	bl	8017f10 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ff92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	4a10      	ldr	r2, [pc, #64]	; (800ffd8 <tcp_slowtmr+0x674>)
 800ff98:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ff9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ff9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ffa4:	69f8      	ldr	r0, [r7, #28]
 800ffa6:	f7fe feed 	bl	800ed84 <tcp_free>
 800ffaa:	e004      	b.n	800ffb6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ffac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ffb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ffb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d1a9      	bne.n	800ff10 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ffbc:	bf00      	nop
 800ffbe:	bf00      	nop
 800ffc0:	3730      	adds	r7, #48	; 0x30
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bdb0      	pop	{r4, r5, r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801c56c 	.word	0x0801c56c
 800ffcc:	0801c9fc 	.word	0x0801c9fc
 800ffd0:	0801c5b0 	.word	0x0801c5b0
 800ffd4:	20011bb4 	.word	0x20011bb4
 800ffd8:	20011bc4 	.word	0x20011bc4
 800ffdc:	0801ca2c 	.word	0x0801ca2c
 800ffe0:	0801ca54 	.word	0x0801ca54

0800ffe4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ffea:	4b2d      	ldr	r3, [pc, #180]	; (80100a0 <tcp_fasttmr+0xbc>)
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	3301      	adds	r3, #1
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	4b2b      	ldr	r3, [pc, #172]	; (80100a0 <tcp_fasttmr+0xbc>)
 800fff4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fff6:	4b2b      	ldr	r3, [pc, #172]	; (80100a4 <tcp_fasttmr+0xc0>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fffc:	e048      	b.n	8010090 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	7f9a      	ldrb	r2, [r3, #30]
 8010002:	4b27      	ldr	r3, [pc, #156]	; (80100a0 <tcp_fasttmr+0xbc>)
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d03f      	beq.n	801008a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801000a:	4b25      	ldr	r3, [pc, #148]	; (80100a0 <tcp_fasttmr+0xbc>)
 801000c:	781a      	ldrb	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8b5b      	ldrh	r3, [r3, #26]
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	2b00      	cmp	r3, #0
 801001c:	d010      	beq.n	8010040 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8b5b      	ldrh	r3, [r3, #26]
 8010022:	f043 0302 	orr.w	r3, r3, #2
 8010026:	b29a      	uxth	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f003 fff5 	bl	801401c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	8b5b      	ldrh	r3, [r3, #26]
 8010036:	f023 0303 	bic.w	r3, r3, #3
 801003a:	b29a      	uxth	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	8b5b      	ldrh	r3, [r3, #26]
 8010044:	f003 0308 	and.w	r3, r3, #8
 8010048:	2b00      	cmp	r3, #0
 801004a:	d009      	beq.n	8010060 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8b5b      	ldrh	r3, [r3, #26]
 8010050:	f023 0308 	bic.w	r3, r3, #8
 8010054:	b29a      	uxth	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff f826 	bl	800f0ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00a      	beq.n	8010084 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801006e:	4b0e      	ldr	r3, [pc, #56]	; (80100a8 <tcp_fasttmr+0xc4>)
 8010070:	2200      	movs	r2, #0
 8010072:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f819 	bl	80100ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801007a:	4b0b      	ldr	r3, [pc, #44]	; (80100a8 <tcp_fasttmr+0xc4>)
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d000      	beq.n	8010084 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010082:	e7b8      	b.n	800fff6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	e002      	b.n	8010090 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1b3      	bne.n	800fffe <tcp_fasttmr+0x1a>
    }
  }
}
 8010096:	bf00      	nop
 8010098:	bf00      	nop
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	20011bca 	.word	0x20011bca
 80100a4:	20011bc0 	.word	0x20011bc0
 80100a8:	20011bc8 	.word	0x20011bc8

080100ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80100ac:	b590      	push	{r4, r7, lr}
 80100ae:	b085      	sub	sp, #20
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d109      	bne.n	80100ce <tcp_process_refused_data+0x22>
 80100ba:	4b37      	ldr	r3, [pc, #220]	; (8010198 <tcp_process_refused_data+0xec>)
 80100bc:	f240 6209 	movw	r2, #1545	; 0x609
 80100c0:	4936      	ldr	r1, [pc, #216]	; (801019c <tcp_process_refused_data+0xf0>)
 80100c2:	4837      	ldr	r0, [pc, #220]	; (80101a0 <tcp_process_refused_data+0xf4>)
 80100c4:	f007 ff24 	bl	8017f10 <iprintf>
 80100c8:	f06f 030f 	mvn.w	r3, #15
 80100cc:	e060      	b.n	8010190 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100d2:	7b5b      	ldrb	r3, [r3, #13]
 80100d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d00b      	beq.n	8010104 <tcp_process_refused_data+0x58>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6918      	ldr	r0, [r3, #16]
 80100f6:	2300      	movs	r3, #0
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	47a0      	blx	r4
 80100fe:	4603      	mov	r3, r0
 8010100:	73fb      	strb	r3, [r7, #15]
 8010102:	e007      	b.n	8010114 <tcp_process_refused_data+0x68>
 8010104:	2300      	movs	r3, #0
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	6879      	ldr	r1, [r7, #4]
 801010a:	2000      	movs	r0, #0
 801010c:	f000 f8a4 	bl	8010258 <tcp_recv_null>
 8010110:	4603      	mov	r3, r0
 8010112:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d12a      	bne.n	8010172 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801011c:	7bbb      	ldrb	r3, [r7, #14]
 801011e:	f003 0320 	and.w	r3, r3, #32
 8010122:	2b00      	cmp	r3, #0
 8010124:	d033      	beq.n	801018e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801012a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801012e:	d005      	beq.n	801013c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010134:	3301      	adds	r3, #1
 8010136:	b29a      	uxth	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00b      	beq.n	801015e <tcp_process_refused_data+0xb2>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6918      	ldr	r0, [r3, #16]
 8010150:	2300      	movs	r3, #0
 8010152:	2200      	movs	r2, #0
 8010154:	6879      	ldr	r1, [r7, #4]
 8010156:	47a0      	blx	r4
 8010158:	4603      	mov	r3, r0
 801015a:	73fb      	strb	r3, [r7, #15]
 801015c:	e001      	b.n	8010162 <tcp_process_refused_data+0xb6>
 801015e:	2300      	movs	r3, #0
 8010160:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010166:	f113 0f0d 	cmn.w	r3, #13
 801016a:	d110      	bne.n	801018e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801016c:	f06f 030c 	mvn.w	r3, #12
 8010170:	e00e      	b.n	8010190 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010176:	f113 0f0d 	cmn.w	r3, #13
 801017a:	d102      	bne.n	8010182 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801017c:	f06f 030c 	mvn.w	r3, #12
 8010180:	e006      	b.n	8010190 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68ba      	ldr	r2, [r7, #8]
 8010186:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010188:	f06f 0304 	mvn.w	r3, #4
 801018c:	e000      	b.n	8010190 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3714      	adds	r7, #20
 8010194:	46bd      	mov	sp, r7
 8010196:	bd90      	pop	{r4, r7, pc}
 8010198:	0801c56c 	.word	0x0801c56c
 801019c:	0801ca7c 	.word	0x0801ca7c
 80101a0:	0801c5b0 	.word	0x0801c5b0

080101a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80101ac:	e007      	b.n	80101be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f80a 	bl	80101ce <tcp_seg_free>
    seg = next;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d1f4      	bne.n	80101ae <tcp_segs_free+0xa>
  }
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80101ce:	b580      	push	{r7, lr}
 80101d0:	b082      	sub	sp, #8
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00c      	beq.n	80101f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d004      	beq.n	80101ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fe fb1f 	bl	800e82c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80101ee:	6879      	ldr	r1, [r7, #4]
 80101f0:	2002      	movs	r0, #2
 80101f2:	f7fd fc7b 	bl	800daec <memp_free>
  }
}
 80101f6:	bf00      	nop
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <tcp_seg_copy+0x1c>
 801020e:	4b0f      	ldr	r3, [pc, #60]	; (801024c <tcp_seg_copy+0x4c>)
 8010210:	f240 6282 	movw	r2, #1666	; 0x682
 8010214:	490e      	ldr	r1, [pc, #56]	; (8010250 <tcp_seg_copy+0x50>)
 8010216:	480f      	ldr	r0, [pc, #60]	; (8010254 <tcp_seg_copy+0x54>)
 8010218:	f007 fe7a 	bl	8017f10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801021c:	2002      	movs	r0, #2
 801021e:	f7fd fbef 	bl	800da00 <memp_malloc>
 8010222:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d101      	bne.n	801022e <tcp_seg_copy+0x2e>
    return NULL;
 801022a:	2300      	movs	r3, #0
 801022c:	e00a      	b.n	8010244 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801022e:	2210      	movs	r2, #16
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	68f8      	ldr	r0, [r7, #12]
 8010234:	f007 fda7 	bl	8017d86 <memcpy>
  pbuf_ref(cseg->p);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe fb9b 	bl	800e978 <pbuf_ref>
  return cseg;
 8010242:	68fb      	ldr	r3, [r7, #12]
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	0801c56c 	.word	0x0801c56c
 8010250:	0801cac0 	.word	0x0801cac0
 8010254:	0801c5b0 	.word	0x0801c5b0

08010258 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	607a      	str	r2, [r7, #4]
 8010264:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d109      	bne.n	8010280 <tcp_recv_null+0x28>
 801026c:	4b12      	ldr	r3, [pc, #72]	; (80102b8 <tcp_recv_null+0x60>)
 801026e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010272:	4912      	ldr	r1, [pc, #72]	; (80102bc <tcp_recv_null+0x64>)
 8010274:	4812      	ldr	r0, [pc, #72]	; (80102c0 <tcp_recv_null+0x68>)
 8010276:	f007 fe4b 	bl	8017f10 <iprintf>
 801027a:	f06f 030f 	mvn.w	r3, #15
 801027e:	e016      	b.n	80102ae <tcp_recv_null+0x56>

  if (p != NULL) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	891b      	ldrh	r3, [r3, #8]
 801028a:	4619      	mov	r1, r3
 801028c:	68b8      	ldr	r0, [r7, #8]
 801028e:	f7ff f9bb 	bl	800f608 <tcp_recved>
    pbuf_free(p);
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f7fe faca 	bl	800e82c <pbuf_free>
 8010298:	e008      	b.n	80102ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801029a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d104      	bne.n	80102ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80102a2:	68b8      	ldr	r0, [r7, #8]
 80102a4:	f7fe ff6c 	bl	800f180 <tcp_close>
 80102a8:	4603      	mov	r3, r0
 80102aa:	e000      	b.n	80102ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	0801c56c 	.word	0x0801c56c
 80102bc:	0801cadc 	.word	0x0801cadc
 80102c0:	0801c5b0 	.word	0x0801c5b0

080102c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	4603      	mov	r3, r0
 80102cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80102ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	db01      	blt.n	80102da <tcp_kill_prio+0x16>
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	e000      	b.n	80102dc <tcp_kill_prio+0x18>
 80102da:	237f      	movs	r3, #127	; 0x7f
 80102dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80102de:	7afb      	ldrb	r3, [r7, #11]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d034      	beq.n	801034e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80102e4:	7afb      	ldrb	r3, [r7, #11]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102ee:	2300      	movs	r3, #0
 80102f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102f2:	4b19      	ldr	r3, [pc, #100]	; (8010358 <tcp_kill_prio+0x94>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	617b      	str	r3, [r7, #20]
 80102f8:	e01f      	b.n	801033a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	7d5b      	ldrb	r3, [r3, #21]
 80102fe:	7afa      	ldrb	r2, [r7, #11]
 8010300:	429a      	cmp	r2, r3
 8010302:	d80c      	bhi.n	801031e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010308:	7afa      	ldrb	r2, [r7, #11]
 801030a:	429a      	cmp	r2, r3
 801030c:	d112      	bne.n	8010334 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801030e:	4b13      	ldr	r3, [pc, #76]	; (801035c <tcp_kill_prio+0x98>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	6a1b      	ldr	r3, [r3, #32]
 8010316:	1ad3      	subs	r3, r2, r3
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	429a      	cmp	r2, r3
 801031c:	d80a      	bhi.n	8010334 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801031e:	4b0f      	ldr	r3, [pc, #60]	; (801035c <tcp_kill_prio+0x98>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	1ad3      	subs	r3, r2, r3
 8010328:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	7d5b      	ldrb	r3, [r3, #21]
 8010332:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	617b      	str	r3, [r7, #20]
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1dc      	bne.n	80102fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d004      	beq.n	8010350 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010346:	6938      	ldr	r0, [r7, #16]
 8010348:	f7ff f860 	bl	800f40c <tcp_abort>
 801034c:	e000      	b.n	8010350 <tcp_kill_prio+0x8c>
    return;
 801034e:	bf00      	nop
  }
}
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	20011bc0 	.word	0x20011bc0
 801035c:	20011bb4 	.word	0x20011bb4

08010360 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b086      	sub	sp, #24
 8010364:	af00      	add	r7, sp, #0
 8010366:	4603      	mov	r3, r0
 8010368:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801036a:	79fb      	ldrb	r3, [r7, #7]
 801036c:	2b08      	cmp	r3, #8
 801036e:	d009      	beq.n	8010384 <tcp_kill_state+0x24>
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	2b09      	cmp	r3, #9
 8010374:	d006      	beq.n	8010384 <tcp_kill_state+0x24>
 8010376:	4b1a      	ldr	r3, [pc, #104]	; (80103e0 <tcp_kill_state+0x80>)
 8010378:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801037c:	4919      	ldr	r1, [pc, #100]	; (80103e4 <tcp_kill_state+0x84>)
 801037e:	481a      	ldr	r0, [pc, #104]	; (80103e8 <tcp_kill_state+0x88>)
 8010380:	f007 fdc6 	bl	8017f10 <iprintf>

  inactivity = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010388:	2300      	movs	r3, #0
 801038a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801038c:	4b17      	ldr	r3, [pc, #92]	; (80103ec <tcp_kill_state+0x8c>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	617b      	str	r3, [r7, #20]
 8010392:	e017      	b.n	80103c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	7d1b      	ldrb	r3, [r3, #20]
 8010398:	79fa      	ldrb	r2, [r7, #7]
 801039a:	429a      	cmp	r2, r3
 801039c:	d10f      	bne.n	80103be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801039e:	4b14      	ldr	r3, [pc, #80]	; (80103f0 <tcp_kill_state+0x90>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	6a1b      	ldr	r3, [r3, #32]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d807      	bhi.n	80103be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80103ae:	4b10      	ldr	r3, [pc, #64]	; (80103f0 <tcp_kill_state+0x90>)
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	6a1b      	ldr	r3, [r3, #32]
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	617b      	str	r3, [r7, #20]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1e4      	bne.n	8010394 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d003      	beq.n	80103d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80103d0:	2100      	movs	r1, #0
 80103d2:	6938      	ldr	r0, [r7, #16]
 80103d4:	f7fe ff5c 	bl	800f290 <tcp_abandon>
  }
}
 80103d8:	bf00      	nop
 80103da:	3718      	adds	r7, #24
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	0801c56c 	.word	0x0801c56c
 80103e4:	0801caf8 	.word	0x0801caf8
 80103e8:	0801c5b0 	.word	0x0801c5b0
 80103ec:	20011bc0 	.word	0x20011bc0
 80103f0:	20011bb4 	.word	0x20011bb4

080103f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010402:	4b12      	ldr	r3, [pc, #72]	; (801044c <tcp_kill_timewait+0x58>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	60fb      	str	r3, [r7, #12]
 8010408:	e012      	b.n	8010430 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801040a:	4b11      	ldr	r3, [pc, #68]	; (8010450 <tcp_kill_timewait+0x5c>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6a1b      	ldr	r3, [r3, #32]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	429a      	cmp	r2, r3
 8010418:	d807      	bhi.n	801042a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801041a:	4b0d      	ldr	r3, [pc, #52]	; (8010450 <tcp_kill_timewait+0x5c>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	6a1b      	ldr	r3, [r3, #32]
 8010422:	1ad3      	subs	r3, r2, r3
 8010424:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	60fb      	str	r3, [r7, #12]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1e9      	bne.n	801040a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d002      	beq.n	8010442 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801043c:	68b8      	ldr	r0, [r7, #8]
 801043e:	f7fe ffe5 	bl	800f40c <tcp_abort>
  }
}
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	20011bc4 	.word	0x20011bc4
 8010450:	20011bb4 	.word	0x20011bb4

08010454 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801045a:	4b10      	ldr	r3, [pc, #64]	; (801049c <tcp_handle_closepend+0x48>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010460:	e014      	b.n	801048c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f003 0308 	and.w	r3, r3, #8
 8010470:	2b00      	cmp	r3, #0
 8010472:	d009      	beq.n	8010488 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	8b5b      	ldrh	r3, [r3, #26]
 8010478:	f023 0308 	bic.w	r3, r3, #8
 801047c:	b29a      	uxth	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7fe fe12 	bl	800f0ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1e7      	bne.n	8010462 <tcp_handle_closepend+0xe>
  }
}
 8010492:	bf00      	nop
 8010494:	bf00      	nop
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	20011bc0 	.word	0x20011bc0

080104a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104aa:	2000      	movs	r0, #0
 80104ac:	f7fd faa8 	bl	800da00 <memp_malloc>
 80104b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d126      	bne.n	8010506 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80104b8:	f7ff ffcc 	bl	8010454 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80104bc:	f7ff ff9a 	bl	80103f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104c0:	2000      	movs	r0, #0
 80104c2:	f7fd fa9d 	bl	800da00 <memp_malloc>
 80104c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d11b      	bne.n	8010506 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80104ce:	2009      	movs	r0, #9
 80104d0:	f7ff ff46 	bl	8010360 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104d4:	2000      	movs	r0, #0
 80104d6:	f7fd fa93 	bl	800da00 <memp_malloc>
 80104da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d111      	bne.n	8010506 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80104e2:	2008      	movs	r0, #8
 80104e4:	f7ff ff3c 	bl	8010360 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104e8:	2000      	movs	r0, #0
 80104ea:	f7fd fa89 	bl	800da00 <memp_malloc>
 80104ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d107      	bne.n	8010506 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fee3 	bl	80102c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104fe:	2000      	movs	r0, #0
 8010500:	f7fd fa7e 	bl	800da00 <memp_malloc>
 8010504:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d03f      	beq.n	801058c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801050c:	229c      	movs	r2, #156	; 0x9c
 801050e:	2100      	movs	r1, #0
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f007 fc60 	bl	8017dd6 <memset>
    pcb->prio = prio;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	79fa      	ldrb	r2, [r7, #7]
 801051a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010522:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801052c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	22ff      	movs	r2, #255	; 0xff
 801053a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010542:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2206      	movs	r2, #6
 8010548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2206      	movs	r2, #6
 8010550:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010558:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2201      	movs	r2, #1
 801055e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010562:	4b0d      	ldr	r3, [pc, #52]	; (8010598 <tcp_alloc+0xf8>)
 8010564:	681a      	ldr	r2, [r3, #0]
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801056a:	4b0c      	ldr	r3, [pc, #48]	; (801059c <tcp_alloc+0xfc>)
 801056c:	781a      	ldrb	r2, [r3, #0]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010578:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	4a08      	ldr	r2, [pc, #32]	; (80105a0 <tcp_alloc+0x100>)
 8010580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	4a07      	ldr	r2, [pc, #28]	; (80105a4 <tcp_alloc+0x104>)
 8010588:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801058c:	68fb      	ldr	r3, [r7, #12]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	20011bb4 	.word	0x20011bb4
 801059c:	20011bca 	.word	0x20011bca
 80105a0:	08010259 	.word	0x08010259
 80105a4:	006ddd00 	.word	0x006ddd00

080105a8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80105b2:	2040      	movs	r0, #64	; 0x40
 80105b4:	f7ff ff74 	bl	80104a0 <tcp_alloc>
 80105b8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80105ba:	68fb      	ldr	r3, [r7, #12]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d002      	beq.n	80105da <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	611a      	str	r2, [r3, #16]
  }
}
 80105da:	bf00      	nop
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
	...

080105e8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00e      	beq.n	8010616 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	7d1b      	ldrb	r3, [r3, #20]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d106      	bne.n	801060e <tcp_recv+0x26>
 8010600:	4b07      	ldr	r3, [pc, #28]	; (8010620 <tcp_recv+0x38>)
 8010602:	f240 72df 	movw	r2, #2015	; 0x7df
 8010606:	4907      	ldr	r1, [pc, #28]	; (8010624 <tcp_recv+0x3c>)
 8010608:	4807      	ldr	r0, [pc, #28]	; (8010628 <tcp_recv+0x40>)
 801060a:	f007 fc81 	bl	8017f10 <iprintf>
    pcb->recv = recv;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	683a      	ldr	r2, [r7, #0]
 8010612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010616:	bf00      	nop
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	0801c56c 	.word	0x0801c56c
 8010624:	0801cb08 	.word	0x0801cb08
 8010628:	0801c5b0 	.word	0x0801c5b0

0801062c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00e      	beq.n	801065a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	7d1b      	ldrb	r3, [r3, #20]
 8010640:	2b01      	cmp	r3, #1
 8010642:	d106      	bne.n	8010652 <tcp_sent+0x26>
 8010644:	4b07      	ldr	r3, [pc, #28]	; (8010664 <tcp_sent+0x38>)
 8010646:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801064a:	4907      	ldr	r1, [pc, #28]	; (8010668 <tcp_sent+0x3c>)
 801064c:	4807      	ldr	r0, [pc, #28]	; (801066c <tcp_sent+0x40>)
 801064e:	f007 fc5f 	bl	8017f10 <iprintf>
    pcb->sent = sent;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	683a      	ldr	r2, [r7, #0]
 8010656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801065a:	bf00      	nop
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	0801c56c 	.word	0x0801c56c
 8010668:	0801cb30 	.word	0x0801cb30
 801066c:	0801c5b0 	.word	0x0801c5b0

08010670 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b082      	sub	sp, #8
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00e      	beq.n	801069e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7d1b      	ldrb	r3, [r3, #20]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d106      	bne.n	8010696 <tcp_err+0x26>
 8010688:	4b07      	ldr	r3, [pc, #28]	; (80106a8 <tcp_err+0x38>)
 801068a:	f640 020d 	movw	r2, #2061	; 0x80d
 801068e:	4907      	ldr	r1, [pc, #28]	; (80106ac <tcp_err+0x3c>)
 8010690:	4807      	ldr	r0, [pc, #28]	; (80106b0 <tcp_err+0x40>)
 8010692:	f007 fc3d 	bl	8017f10 <iprintf>
    pcb->errf = err;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	683a      	ldr	r2, [r7, #0]
 801069a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801069e:	bf00      	nop
 80106a0:	3708      	adds	r7, #8
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	0801c56c 	.word	0x0801c56c
 80106ac:	0801cb58 	.word	0x0801cb58
 80106b0:	0801c5b0 	.word	0x0801c5b0

080106b4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d008      	beq.n	80106d6 <tcp_accept+0x22>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7d1b      	ldrb	r3, [r3, #20]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d104      	bne.n	80106d6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	619a      	str	r2, [r3, #24]
  }
}
 80106d6:	bf00      	nop
 80106d8:	3714      	adds	r7, #20
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
	...

080106e4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	4613      	mov	r3, r2
 80106f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d107      	bne.n	8010708 <tcp_poll+0x24>
 80106f8:	4b0e      	ldr	r3, [pc, #56]	; (8010734 <tcp_poll+0x50>)
 80106fa:	f640 023d 	movw	r2, #2109	; 0x83d
 80106fe:	490e      	ldr	r1, [pc, #56]	; (8010738 <tcp_poll+0x54>)
 8010700:	480e      	ldr	r0, [pc, #56]	; (801073c <tcp_poll+0x58>)
 8010702:	f007 fc05 	bl	8017f10 <iprintf>
 8010706:	e011      	b.n	801072c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	7d1b      	ldrb	r3, [r3, #20]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d106      	bne.n	801071e <tcp_poll+0x3a>
 8010710:	4b08      	ldr	r3, [pc, #32]	; (8010734 <tcp_poll+0x50>)
 8010712:	f640 023e 	movw	r2, #2110	; 0x83e
 8010716:	490a      	ldr	r1, [pc, #40]	; (8010740 <tcp_poll+0x5c>)
 8010718:	4808      	ldr	r0, [pc, #32]	; (801073c <tcp_poll+0x58>)
 801071a:	f007 fbf9 	bl	8017f10 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	79fa      	ldrb	r2, [r7, #7]
 801072a:	775a      	strb	r2, [r3, #29]
}
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	0801c56c 	.word	0x0801c56c
 8010738:	0801cb80 	.word	0x0801cb80
 801073c:	0801c5b0 	.word	0x0801c5b0
 8010740:	0801cb98 	.word	0x0801cb98

08010744 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d107      	bne.n	8010762 <tcp_pcb_purge+0x1e>
 8010752:	4b21      	ldr	r3, [pc, #132]	; (80107d8 <tcp_pcb_purge+0x94>)
 8010754:	f640 0251 	movw	r2, #2129	; 0x851
 8010758:	4920      	ldr	r1, [pc, #128]	; (80107dc <tcp_pcb_purge+0x98>)
 801075a:	4821      	ldr	r0, [pc, #132]	; (80107e0 <tcp_pcb_purge+0x9c>)
 801075c:	f007 fbd8 	bl	8017f10 <iprintf>
 8010760:	e037      	b.n	80107d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	7d1b      	ldrb	r3, [r3, #20]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d033      	beq.n	80107d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801076e:	2b0a      	cmp	r3, #10
 8010770:	d02f      	beq.n	80107d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010776:	2b01      	cmp	r3, #1
 8010778:	d02b      	beq.n	80107d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801077e:	2b00      	cmp	r3, #0
 8010780:	d007      	beq.n	8010792 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010786:	4618      	mov	r0, r3
 8010788:	f7fe f850 	bl	800e82c <pbuf_free>
      pcb->refused_data = NULL;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010796:	2b00      	cmp	r3, #0
 8010798:	d002      	beq.n	80107a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f986 	bl	8010aac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107a6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7ff fcf9 	bl	80101a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7ff fcf4 	bl	80101a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2200      	movs	r2, #0
 80107ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	0801c56c 	.word	0x0801c56c
 80107dc:	0801cbb8 	.word	0x0801cbb8
 80107e0:	0801c5b0 	.word	0x0801c5b0

080107e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d106      	bne.n	8010802 <tcp_pcb_remove+0x1e>
 80107f4:	4b3e      	ldr	r3, [pc, #248]	; (80108f0 <tcp_pcb_remove+0x10c>)
 80107f6:	f640 0283 	movw	r2, #2179	; 0x883
 80107fa:	493e      	ldr	r1, [pc, #248]	; (80108f4 <tcp_pcb_remove+0x110>)
 80107fc:	483e      	ldr	r0, [pc, #248]	; (80108f8 <tcp_pcb_remove+0x114>)
 80107fe:	f007 fb87 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d106      	bne.n	8010816 <tcp_pcb_remove+0x32>
 8010808:	4b39      	ldr	r3, [pc, #228]	; (80108f0 <tcp_pcb_remove+0x10c>)
 801080a:	f640 0284 	movw	r2, #2180	; 0x884
 801080e:	493b      	ldr	r1, [pc, #236]	; (80108fc <tcp_pcb_remove+0x118>)
 8010810:	4839      	ldr	r0, [pc, #228]	; (80108f8 <tcp_pcb_remove+0x114>)
 8010812:	f007 fb7d 	bl	8017f10 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	683a      	ldr	r2, [r7, #0]
 801081c:	429a      	cmp	r2, r3
 801081e:	d105      	bne.n	801082c <tcp_pcb_remove+0x48>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68da      	ldr	r2, [r3, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	e013      	b.n	8010854 <tcp_pcb_remove+0x70>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	60fb      	str	r3, [r7, #12]
 8010832:	e00c      	b.n	801084e <tcp_pcb_remove+0x6a>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	683a      	ldr	r2, [r7, #0]
 801083a:	429a      	cmp	r2, r3
 801083c:	d104      	bne.n	8010848 <tcp_pcb_remove+0x64>
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	68da      	ldr	r2, [r3, #12]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	60da      	str	r2, [r3, #12]
 8010846:	e005      	b.n	8010854 <tcp_pcb_remove+0x70>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	60fb      	str	r3, [r7, #12]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d1ef      	bne.n	8010834 <tcp_pcb_remove+0x50>
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2200      	movs	r2, #0
 8010858:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801085a:	6838      	ldr	r0, [r7, #0]
 801085c:	f7ff ff72 	bl	8010744 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	7d1b      	ldrb	r3, [r3, #20]
 8010864:	2b0a      	cmp	r3, #10
 8010866:	d013      	beq.n	8010890 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801086c:	2b01      	cmp	r3, #1
 801086e:	d00f      	beq.n	8010890 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	8b5b      	ldrh	r3, [r3, #26]
 8010874:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010878:	2b00      	cmp	r3, #0
 801087a:	d009      	beq.n	8010890 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	8b5b      	ldrh	r3, [r3, #26]
 8010880:	f043 0302 	orr.w	r3, r3, #2
 8010884:	b29a      	uxth	r2, r3
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801088a:	6838      	ldr	r0, [r7, #0]
 801088c:	f003 fbc6 	bl	801401c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	7d1b      	ldrb	r3, [r3, #20]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d020      	beq.n	80108da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801089c:	2b00      	cmp	r3, #0
 801089e:	d006      	beq.n	80108ae <tcp_pcb_remove+0xca>
 80108a0:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <tcp_pcb_remove+0x10c>)
 80108a2:	f640 0293 	movw	r2, #2195	; 0x893
 80108a6:	4916      	ldr	r1, [pc, #88]	; (8010900 <tcp_pcb_remove+0x11c>)
 80108a8:	4813      	ldr	r0, [pc, #76]	; (80108f8 <tcp_pcb_remove+0x114>)
 80108aa:	f007 fb31 	bl	8017f10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d006      	beq.n	80108c4 <tcp_pcb_remove+0xe0>
 80108b6:	4b0e      	ldr	r3, [pc, #56]	; (80108f0 <tcp_pcb_remove+0x10c>)
 80108b8:	f640 0294 	movw	r2, #2196	; 0x894
 80108bc:	4911      	ldr	r1, [pc, #68]	; (8010904 <tcp_pcb_remove+0x120>)
 80108be:	480e      	ldr	r0, [pc, #56]	; (80108f8 <tcp_pcb_remove+0x114>)
 80108c0:	f007 fb26 	bl	8017f10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d006      	beq.n	80108da <tcp_pcb_remove+0xf6>
 80108cc:	4b08      	ldr	r3, [pc, #32]	; (80108f0 <tcp_pcb_remove+0x10c>)
 80108ce:	f640 0296 	movw	r2, #2198	; 0x896
 80108d2:	490d      	ldr	r1, [pc, #52]	; (8010908 <tcp_pcb_remove+0x124>)
 80108d4:	4808      	ldr	r0, [pc, #32]	; (80108f8 <tcp_pcb_remove+0x114>)
 80108d6:	f007 fb1b 	bl	8017f10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	2200      	movs	r2, #0
 80108de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	2200      	movs	r2, #0
 80108e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80108e6:	bf00      	nop
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	0801c56c 	.word	0x0801c56c
 80108f4:	0801cbd4 	.word	0x0801cbd4
 80108f8:	0801c5b0 	.word	0x0801c5b0
 80108fc:	0801cbf0 	.word	0x0801cbf0
 8010900:	0801cc10 	.word	0x0801cc10
 8010904:	0801cc28 	.word	0x0801cc28
 8010908:	0801cc44 	.word	0x0801cc44

0801090c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <tcp_next_iss+0x1c>
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <tcp_next_iss+0x38>)
 801091c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010920:	4909      	ldr	r1, [pc, #36]	; (8010948 <tcp_next_iss+0x3c>)
 8010922:	480a      	ldr	r0, [pc, #40]	; (801094c <tcp_next_iss+0x40>)
 8010924:	f007 faf4 	bl	8017f10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010928:	4b09      	ldr	r3, [pc, #36]	; (8010950 <tcp_next_iss+0x44>)
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	4b09      	ldr	r3, [pc, #36]	; (8010954 <tcp_next_iss+0x48>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4413      	add	r3, r2
 8010932:	4a07      	ldr	r2, [pc, #28]	; (8010950 <tcp_next_iss+0x44>)
 8010934:	6013      	str	r3, [r2, #0]
  return iss;
 8010936:	4b06      	ldr	r3, [pc, #24]	; (8010950 <tcp_next_iss+0x44>)
 8010938:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801093a:	4618      	mov	r0, r3
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	0801c56c 	.word	0x0801c56c
 8010948:	0801cc5c 	.word	0x0801cc5c
 801094c:	0801c5b0 	.word	0x0801c5b0
 8010950:	20000028 	.word	0x20000028
 8010954:	20011bb4 	.word	0x20011bb4

08010958 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b086      	sub	sp, #24
 801095c:	af00      	add	r7, sp, #0
 801095e:	4603      	mov	r3, r0
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
 8010964:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d106      	bne.n	801097a <tcp_eff_send_mss_netif+0x22>
 801096c:	4b14      	ldr	r3, [pc, #80]	; (80109c0 <tcp_eff_send_mss_netif+0x68>)
 801096e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010972:	4914      	ldr	r1, [pc, #80]	; (80109c4 <tcp_eff_send_mss_netif+0x6c>)
 8010974:	4814      	ldr	r0, [pc, #80]	; (80109c8 <tcp_eff_send_mss_netif+0x70>)
 8010976:	f007 facb 	bl	8017f10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d101      	bne.n	8010984 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010980:	89fb      	ldrh	r3, [r7, #14]
 8010982:	e019      	b.n	80109b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010988:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801098a:	8afb      	ldrh	r3, [r7, #22]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d012      	beq.n	80109b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010990:	2328      	movs	r3, #40	; 0x28
 8010992:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010994:	8afa      	ldrh	r2, [r7, #22]
 8010996:	8abb      	ldrh	r3, [r7, #20]
 8010998:	429a      	cmp	r2, r3
 801099a:	d904      	bls.n	80109a6 <tcp_eff_send_mss_netif+0x4e>
 801099c:	8afa      	ldrh	r2, [r7, #22]
 801099e:	8abb      	ldrh	r3, [r7, #20]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	e000      	b.n	80109a8 <tcp_eff_send_mss_netif+0x50>
 80109a6:	2300      	movs	r3, #0
 80109a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80109aa:	8a7a      	ldrh	r2, [r7, #18]
 80109ac:	89fb      	ldrh	r3, [r7, #14]
 80109ae:	4293      	cmp	r3, r2
 80109b0:	bf28      	it	cs
 80109b2:	4613      	movcs	r3, r2
 80109b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80109b6:	89fb      	ldrh	r3, [r7, #14]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3718      	adds	r7, #24
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	0801c56c 	.word	0x0801c56c
 80109c4:	0801cc78 	.word	0x0801cc78
 80109c8:	0801c5b0 	.word	0x0801c5b0

080109cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d119      	bne.n	8010a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80109e0:	4b10      	ldr	r3, [pc, #64]	; (8010a24 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80109e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80109e6:	4910      	ldr	r1, [pc, #64]	; (8010a28 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80109e8:	4810      	ldr	r0, [pc, #64]	; (8010a2c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80109ea:	f007 fa91 	bl	8017f10 <iprintf>

  while (pcb != NULL) {
 80109ee:	e011      	b.n	8010a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d108      	bne.n	8010a0e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f7fe fd02 	bl	800f40c <tcp_abort>
      pcb = next;
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	60fb      	str	r3, [r7, #12]
 8010a0c:	e002      	b.n	8010a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d1ea      	bne.n	80109f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010a1a:	bf00      	nop
 8010a1c:	bf00      	nop
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	0801c56c 	.word	0x0801c56c
 8010a28:	0801cca0 	.word	0x0801cca0
 8010a2c:	0801c5b0 	.word	0x0801c5b0

08010a30 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d02a      	beq.n	8010a96 <tcp_netif_ip_addr_changed+0x66>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d026      	beq.n	8010a96 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010a48:	4b15      	ldr	r3, [pc, #84]	; (8010aa0 <tcp_netif_ip_addr_changed+0x70>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f7ff ffbc 	bl	80109cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010a54:	4b13      	ldr	r3, [pc, #76]	; (8010aa4 <tcp_netif_ip_addr_changed+0x74>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4619      	mov	r1, r3
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff ffb6 	bl	80109cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d017      	beq.n	8010a96 <tcp_netif_ip_addr_changed+0x66>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d013      	beq.n	8010a96 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a6e:	4b0e      	ldr	r3, [pc, #56]	; (8010aa8 <tcp_netif_ip_addr_changed+0x78>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	e00c      	b.n	8010a90 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d103      	bne.n	8010a8a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	60fb      	str	r3, [r7, #12]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d1ef      	bne.n	8010a76 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a96:	bf00      	nop
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20011bc0 	.word	0x20011bc0
 8010aa4:	20011bb8 	.word	0x20011bb8
 8010aa8:	20011bbc 	.word	0x20011bbc

08010aac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b082      	sub	sp, #8
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d007      	beq.n	8010acc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff fb6f 	bl	80101a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010acc:	bf00      	nop
 8010ace:	3708      	adds	r7, #8
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ad4:	b590      	push	{r4, r7, lr}
 8010ad6:	b08d      	sub	sp, #52	; 0x34
 8010ad8:	af04      	add	r7, sp, #16
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d105      	bne.n	8010af0 <tcp_input+0x1c>
 8010ae4:	4b9b      	ldr	r3, [pc, #620]	; (8010d54 <tcp_input+0x280>)
 8010ae6:	2283      	movs	r2, #131	; 0x83
 8010ae8:	499b      	ldr	r1, [pc, #620]	; (8010d58 <tcp_input+0x284>)
 8010aea:	489c      	ldr	r0, [pc, #624]	; (8010d5c <tcp_input+0x288>)
 8010aec:	f007 fa10 	bl	8017f10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	4a9a      	ldr	r2, [pc, #616]	; (8010d60 <tcp_input+0x28c>)
 8010af6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	895b      	ldrh	r3, [r3, #10]
 8010afc:	2b13      	cmp	r3, #19
 8010afe:	f240 83d1 	bls.w	80112a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b02:	4b98      	ldr	r3, [pc, #608]	; (8010d64 <tcp_input+0x290>)
 8010b04:	695b      	ldr	r3, [r3, #20]
 8010b06:	4a97      	ldr	r2, [pc, #604]	; (8010d64 <tcp_input+0x290>)
 8010b08:	6812      	ldr	r2, [r2, #0]
 8010b0a:	4611      	mov	r1, r2
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f005 fefd 	bl	801690c <ip4_addr_isbroadcast_u32>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f040 83c7 	bne.w	80112a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010b1a:	4b92      	ldr	r3, [pc, #584]	; (8010d64 <tcp_input+0x290>)
 8010b1c:	695b      	ldr	r3, [r3, #20]
 8010b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b22:	2be0      	cmp	r3, #224	; 0xe0
 8010b24:	f000 83c0 	beq.w	80112a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010b28:	4b8d      	ldr	r3, [pc, #564]	; (8010d60 <tcp_input+0x28c>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fc f975 	bl	800ce20 <lwip_htons>
 8010b36:	4603      	mov	r3, r0
 8010b38:	0b1b      	lsrs	r3, r3, #12
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010b42:	7cbb      	ldrb	r3, [r7, #18]
 8010b44:	2b13      	cmp	r3, #19
 8010b46:	f240 83b1 	bls.w	80112ac <tcp_input+0x7d8>
 8010b4a:	7cbb      	ldrb	r3, [r7, #18]
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	891b      	ldrh	r3, [r3, #8]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	f200 83aa 	bhi.w	80112ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b58:	7cbb      	ldrb	r3, [r7, #18]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	3b14      	subs	r3, #20
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	4b81      	ldr	r3, [pc, #516]	; (8010d68 <tcp_input+0x294>)
 8010b62:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b64:	4b81      	ldr	r3, [pc, #516]	; (8010d6c <tcp_input+0x298>)
 8010b66:	2200      	movs	r2, #0
 8010b68:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	895a      	ldrh	r2, [r3, #10]
 8010b6e:	7cbb      	ldrb	r3, [r7, #18]
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d309      	bcc.n	8010b8a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b76:	4b7c      	ldr	r3, [pc, #496]	; (8010d68 <tcp_input+0x294>)
 8010b78:	881a      	ldrh	r2, [r3, #0]
 8010b7a:	4b7d      	ldr	r3, [pc, #500]	; (8010d70 <tcp_input+0x29c>)
 8010b7c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b7e:	7cbb      	ldrb	r3, [r7, #18]
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7fd fdcc 	bl	800e720 <pbuf_remove_header>
 8010b88:	e04e      	b.n	8010c28 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d105      	bne.n	8010b9e <tcp_input+0xca>
 8010b92:	4b70      	ldr	r3, [pc, #448]	; (8010d54 <tcp_input+0x280>)
 8010b94:	22c2      	movs	r2, #194	; 0xc2
 8010b96:	4977      	ldr	r1, [pc, #476]	; (8010d74 <tcp_input+0x2a0>)
 8010b98:	4870      	ldr	r0, [pc, #448]	; (8010d5c <tcp_input+0x288>)
 8010b9a:	f007 f9b9 	bl	8017f10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b9e:	2114      	movs	r1, #20
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7fd fdbd 	bl	800e720 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	895a      	ldrh	r2, [r3, #10]
 8010baa:	4b71      	ldr	r3, [pc, #452]	; (8010d70 <tcp_input+0x29c>)
 8010bac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010bae:	4b6e      	ldr	r3, [pc, #440]	; (8010d68 <tcp_input+0x294>)
 8010bb0:	881a      	ldrh	r2, [r3, #0]
 8010bb2:	4b6f      	ldr	r3, [pc, #444]	; (8010d70 <tcp_input+0x29c>)
 8010bb4:	881b      	ldrh	r3, [r3, #0]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010bba:	4b6d      	ldr	r3, [pc, #436]	; (8010d70 <tcp_input+0x29c>)
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7fd fdad 	bl	800e720 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	895b      	ldrh	r3, [r3, #10]
 8010bcc:	8a3a      	ldrh	r2, [r7, #16]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	f200 836e 	bhi.w	80112b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	4a64      	ldr	r2, [pc, #400]	; (8010d6c <tcp_input+0x298>)
 8010bdc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	8a3a      	ldrh	r2, [r7, #16]
 8010be4:	4611      	mov	r1, r2
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fd fd9a 	bl	800e720 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	891a      	ldrh	r2, [r3, #8]
 8010bf0:	8a3b      	ldrh	r3, [r7, #16]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	895b      	ldrh	r3, [r3, #10]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d005      	beq.n	8010c0e <tcp_input+0x13a>
 8010c02:	4b54      	ldr	r3, [pc, #336]	; (8010d54 <tcp_input+0x280>)
 8010c04:	22df      	movs	r2, #223	; 0xdf
 8010c06:	495c      	ldr	r1, [pc, #368]	; (8010d78 <tcp_input+0x2a4>)
 8010c08:	4854      	ldr	r0, [pc, #336]	; (8010d5c <tcp_input+0x288>)
 8010c0a:	f007 f981 	bl	8017f10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	891a      	ldrh	r2, [r3, #8]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	891b      	ldrh	r3, [r3, #8]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d005      	beq.n	8010c28 <tcp_input+0x154>
 8010c1c:	4b4d      	ldr	r3, [pc, #308]	; (8010d54 <tcp_input+0x280>)
 8010c1e:	22e0      	movs	r2, #224	; 0xe0
 8010c20:	4956      	ldr	r1, [pc, #344]	; (8010d7c <tcp_input+0x2a8>)
 8010c22:	484e      	ldr	r0, [pc, #312]	; (8010d5c <tcp_input+0x288>)
 8010c24:	f007 f974 	bl	8017f10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010c28:	4b4d      	ldr	r3, [pc, #308]	; (8010d60 <tcp_input+0x28c>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	4a4b      	ldr	r2, [pc, #300]	; (8010d60 <tcp_input+0x28c>)
 8010c32:	6814      	ldr	r4, [r2, #0]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fc f8f3 	bl	800ce20 <lwip_htons>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010c3e:	4b48      	ldr	r3, [pc, #288]	; (8010d60 <tcp_input+0x28c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	885b      	ldrh	r3, [r3, #2]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4a46      	ldr	r2, [pc, #280]	; (8010d60 <tcp_input+0x28c>)
 8010c48:	6814      	ldr	r4, [r2, #0]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fc f8e8 	bl	800ce20 <lwip_htons>
 8010c50:	4603      	mov	r3, r0
 8010c52:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010c54:	4b42      	ldr	r3, [pc, #264]	; (8010d60 <tcp_input+0x28c>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	4a41      	ldr	r2, [pc, #260]	; (8010d60 <tcp_input+0x28c>)
 8010c5c:	6814      	ldr	r4, [r2, #0]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fc f8f3 	bl	800ce4a <lwip_htonl>
 8010c64:	4603      	mov	r3, r0
 8010c66:	6063      	str	r3, [r4, #4]
 8010c68:	6863      	ldr	r3, [r4, #4]
 8010c6a:	4a45      	ldr	r2, [pc, #276]	; (8010d80 <tcp_input+0x2ac>)
 8010c6c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010c6e:	4b3c      	ldr	r3, [pc, #240]	; (8010d60 <tcp_input+0x28c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	689b      	ldr	r3, [r3, #8]
 8010c74:	4a3a      	ldr	r2, [pc, #232]	; (8010d60 <tcp_input+0x28c>)
 8010c76:	6814      	ldr	r4, [r2, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fc f8e6 	bl	800ce4a <lwip_htonl>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	60a3      	str	r3, [r4, #8]
 8010c82:	68a3      	ldr	r3, [r4, #8]
 8010c84:	4a3f      	ldr	r2, [pc, #252]	; (8010d84 <tcp_input+0x2b0>)
 8010c86:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010c88:	4b35      	ldr	r3, [pc, #212]	; (8010d60 <tcp_input+0x28c>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	89db      	ldrh	r3, [r3, #14]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4a33      	ldr	r2, [pc, #204]	; (8010d60 <tcp_input+0x28c>)
 8010c92:	6814      	ldr	r4, [r2, #0]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fc f8c3 	bl	800ce20 <lwip_htons>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c9e:	4b30      	ldr	r3, [pc, #192]	; (8010d60 <tcp_input+0x28c>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	899b      	ldrh	r3, [r3, #12]
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fc f8ba 	bl	800ce20 <lwip_htons>
 8010cac:	4603      	mov	r3, r0
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	4b34      	ldr	r3, [pc, #208]	; (8010d88 <tcp_input+0x2b4>)
 8010cb8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	891a      	ldrh	r2, [r3, #8]
 8010cbe:	4b33      	ldr	r3, [pc, #204]	; (8010d8c <tcp_input+0x2b8>)
 8010cc0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010cc2:	4b31      	ldr	r3, [pc, #196]	; (8010d88 <tcp_input+0x2b4>)
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	f003 0303 	and.w	r3, r3, #3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00c      	beq.n	8010ce8 <tcp_input+0x214>
    tcplen++;
 8010cce:	4b2f      	ldr	r3, [pc, #188]	; (8010d8c <tcp_input+0x2b8>)
 8010cd0:	881b      	ldrh	r3, [r3, #0]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	4b2d      	ldr	r3, [pc, #180]	; (8010d8c <tcp_input+0x2b8>)
 8010cd8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	891a      	ldrh	r2, [r3, #8]
 8010cde:	4b2b      	ldr	r3, [pc, #172]	; (8010d8c <tcp_input+0x2b8>)
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	f200 82e6 	bhi.w	80112b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cec:	4b28      	ldr	r3, [pc, #160]	; (8010d90 <tcp_input+0x2bc>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	61fb      	str	r3, [r7, #28]
 8010cf2:	e09d      	b.n	8010e30 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	7d1b      	ldrb	r3, [r3, #20]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d105      	bne.n	8010d08 <tcp_input+0x234>
 8010cfc:	4b15      	ldr	r3, [pc, #84]	; (8010d54 <tcp_input+0x280>)
 8010cfe:	22fb      	movs	r2, #251	; 0xfb
 8010d00:	4924      	ldr	r1, [pc, #144]	; (8010d94 <tcp_input+0x2c0>)
 8010d02:	4816      	ldr	r0, [pc, #88]	; (8010d5c <tcp_input+0x288>)
 8010d04:	f007 f904 	bl	8017f10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010d08:	69fb      	ldr	r3, [r7, #28]
 8010d0a:	7d1b      	ldrb	r3, [r3, #20]
 8010d0c:	2b0a      	cmp	r3, #10
 8010d0e:	d105      	bne.n	8010d1c <tcp_input+0x248>
 8010d10:	4b10      	ldr	r3, [pc, #64]	; (8010d54 <tcp_input+0x280>)
 8010d12:	22fc      	movs	r2, #252	; 0xfc
 8010d14:	4920      	ldr	r1, [pc, #128]	; (8010d98 <tcp_input+0x2c4>)
 8010d16:	4811      	ldr	r0, [pc, #68]	; (8010d5c <tcp_input+0x288>)
 8010d18:	f007 f8fa 	bl	8017f10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	7d1b      	ldrb	r3, [r3, #20]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d105      	bne.n	8010d30 <tcp_input+0x25c>
 8010d24:	4b0b      	ldr	r3, [pc, #44]	; (8010d54 <tcp_input+0x280>)
 8010d26:	22fd      	movs	r2, #253	; 0xfd
 8010d28:	491c      	ldr	r1, [pc, #112]	; (8010d9c <tcp_input+0x2c8>)
 8010d2a:	480c      	ldr	r0, [pc, #48]	; (8010d5c <tcp_input+0x288>)
 8010d2c:	f007 f8f0 	bl	8017f10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	7a1b      	ldrb	r3, [r3, #8]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d033      	beq.n	8010da0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	7a1a      	ldrb	r2, [r3, #8]
 8010d3c:	4b09      	ldr	r3, [pc, #36]	; (8010d64 <tcp_input+0x290>)
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d44:	3301      	adds	r3, #1
 8010d46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d029      	beq.n	8010da0 <tcp_input+0x2cc>
      prev = pcb;
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	61bb      	str	r3, [r7, #24]
      continue;
 8010d50:	e06b      	b.n	8010e2a <tcp_input+0x356>
 8010d52:	bf00      	nop
 8010d54:	0801ccd4 	.word	0x0801ccd4
 8010d58:	0801cd08 	.word	0x0801cd08
 8010d5c:	0801cd20 	.word	0x0801cd20
 8010d60:	20011bdc 	.word	0x20011bdc
 8010d64:	20009b28 	.word	0x20009b28
 8010d68:	20011be0 	.word	0x20011be0
 8010d6c:	20011be4 	.word	0x20011be4
 8010d70:	20011be2 	.word	0x20011be2
 8010d74:	0801cd48 	.word	0x0801cd48
 8010d78:	0801cd58 	.word	0x0801cd58
 8010d7c:	0801cd64 	.word	0x0801cd64
 8010d80:	20011bec 	.word	0x20011bec
 8010d84:	20011bf0 	.word	0x20011bf0
 8010d88:	20011bf8 	.word	0x20011bf8
 8010d8c:	20011bf6 	.word	0x20011bf6
 8010d90:	20011bc0 	.word	0x20011bc0
 8010d94:	0801cd84 	.word	0x0801cd84
 8010d98:	0801cdac 	.word	0x0801cdac
 8010d9c:	0801cdd8 	.word	0x0801cdd8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	8b1a      	ldrh	r2, [r3, #24]
 8010da4:	4b72      	ldr	r3, [pc, #456]	; (8010f70 <tcp_input+0x49c>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d13a      	bne.n	8010e26 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	8ada      	ldrh	r2, [r3, #22]
 8010db4:	4b6e      	ldr	r3, [pc, #440]	; (8010f70 <tcp_input+0x49c>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	885b      	ldrh	r3, [r3, #2]
 8010dba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d132      	bne.n	8010e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	4b6b      	ldr	r3, [pc, #428]	; (8010f74 <tcp_input+0x4a0>)
 8010dc6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d12c      	bne.n	8010e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	4b68      	ldr	r3, [pc, #416]	; (8010f74 <tcp_input+0x4a0>)
 8010dd2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d126      	bne.n	8010e26 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	69fa      	ldr	r2, [r7, #28]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d106      	bne.n	8010df0 <tcp_input+0x31c>
 8010de2:	4b65      	ldr	r3, [pc, #404]	; (8010f78 <tcp_input+0x4a4>)
 8010de4:	f240 120d 	movw	r2, #269	; 0x10d
 8010de8:	4964      	ldr	r1, [pc, #400]	; (8010f7c <tcp_input+0x4a8>)
 8010dea:	4865      	ldr	r0, [pc, #404]	; (8010f80 <tcp_input+0x4ac>)
 8010dec:	f007 f890 	bl	8017f10 <iprintf>
      if (prev != NULL) {
 8010df0:	69bb      	ldr	r3, [r7, #24]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00a      	beq.n	8010e0c <tcp_input+0x338>
        prev->next = pcb->next;
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	68da      	ldr	r2, [r3, #12]
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010dfe:	4b61      	ldr	r3, [pc, #388]	; (8010f84 <tcp_input+0x4b0>)
 8010e00:	681a      	ldr	r2, [r3, #0]
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010e06:	4a5f      	ldr	r2, [pc, #380]	; (8010f84 <tcp_input+0x4b0>)
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	69fa      	ldr	r2, [r7, #28]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d111      	bne.n	8010e3a <tcp_input+0x366>
 8010e16:	4b58      	ldr	r3, [pc, #352]	; (8010f78 <tcp_input+0x4a4>)
 8010e18:	f240 1215 	movw	r2, #277	; 0x115
 8010e1c:	495a      	ldr	r1, [pc, #360]	; (8010f88 <tcp_input+0x4b4>)
 8010e1e:	4858      	ldr	r0, [pc, #352]	; (8010f80 <tcp_input+0x4ac>)
 8010e20:	f007 f876 	bl	8017f10 <iprintf>
      break;
 8010e24:	e009      	b.n	8010e3a <tcp_input+0x366>
    }
    prev = pcb;
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	61fb      	str	r3, [r7, #28]
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f47f af5e 	bne.w	8010cf4 <tcp_input+0x220>
 8010e38:	e000      	b.n	8010e3c <tcp_input+0x368>
      break;
 8010e3a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f040 80aa 	bne.w	8010f98 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e44:	4b51      	ldr	r3, [pc, #324]	; (8010f8c <tcp_input+0x4b8>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	61fb      	str	r3, [r7, #28]
 8010e4a:	e03f      	b.n	8010ecc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010e4c:	69fb      	ldr	r3, [r7, #28]
 8010e4e:	7d1b      	ldrb	r3, [r3, #20]
 8010e50:	2b0a      	cmp	r3, #10
 8010e52:	d006      	beq.n	8010e62 <tcp_input+0x38e>
 8010e54:	4b48      	ldr	r3, [pc, #288]	; (8010f78 <tcp_input+0x4a4>)
 8010e56:	f240 121f 	movw	r2, #287	; 0x11f
 8010e5a:	494d      	ldr	r1, [pc, #308]	; (8010f90 <tcp_input+0x4bc>)
 8010e5c:	4848      	ldr	r0, [pc, #288]	; (8010f80 <tcp_input+0x4ac>)
 8010e5e:	f007 f857 	bl	8017f10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	7a1b      	ldrb	r3, [r3, #8]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d009      	beq.n	8010e7e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	7a1a      	ldrb	r2, [r3, #8]
 8010e6e:	4b41      	ldr	r3, [pc, #260]	; (8010f74 <tcp_input+0x4a0>)
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e76:	3301      	adds	r3, #1
 8010e78:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d122      	bne.n	8010ec4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	8b1a      	ldrh	r2, [r3, #24]
 8010e82:	4b3b      	ldr	r3, [pc, #236]	; (8010f70 <tcp_input+0x49c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d11b      	bne.n	8010ec6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	8ada      	ldrh	r2, [r3, #22]
 8010e92:	4b37      	ldr	r3, [pc, #220]	; (8010f70 <tcp_input+0x49c>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	885b      	ldrh	r3, [r3, #2]
 8010e98:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d113      	bne.n	8010ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	685a      	ldr	r2, [r3, #4]
 8010ea2:	4b34      	ldr	r3, [pc, #208]	; (8010f74 <tcp_input+0x4a0>)
 8010ea4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d10d      	bne.n	8010ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	4b31      	ldr	r3, [pc, #196]	; (8010f74 <tcp_input+0x4a0>)
 8010eb0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d107      	bne.n	8010ec6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010eb6:	69f8      	ldr	r0, [r7, #28]
 8010eb8:	f000 fb56 	bl	8011568 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7fd fcb5 	bl	800e82c <pbuf_free>
        return;
 8010ec2:	e1fd      	b.n	80112c0 <tcp_input+0x7ec>
        continue;
 8010ec4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	61fb      	str	r3, [r7, #28]
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d1bc      	bne.n	8010e4c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010ed6:	4b2f      	ldr	r3, [pc, #188]	; (8010f94 <tcp_input+0x4c0>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	e02a      	b.n	8010f34 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	7a1b      	ldrb	r3, [r3, #8]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00c      	beq.n	8010f00 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	7a1a      	ldrb	r2, [r3, #8]
 8010eea:	4b22      	ldr	r3, [pc, #136]	; (8010f74 <tcp_input+0x4a0>)
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d002      	beq.n	8010f00 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	61bb      	str	r3, [r7, #24]
        continue;
 8010efe:	e016      	b.n	8010f2e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	8ada      	ldrh	r2, [r3, #22]
 8010f04:	4b1a      	ldr	r3, [pc, #104]	; (8010f70 <tcp_input+0x49c>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	885b      	ldrh	r3, [r3, #2]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d10c      	bne.n	8010f2a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	4b17      	ldr	r3, [pc, #92]	; (8010f74 <tcp_input+0x4a0>)
 8010f16:	695b      	ldr	r3, [r3, #20]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d00f      	beq.n	8010f3c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00d      	beq.n	8010f3e <tcp_input+0x46a>
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d009      	beq.n	8010f3e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	617b      	str	r3, [r7, #20]
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1d1      	bne.n	8010ede <tcp_input+0x40a>
 8010f3a:	e000      	b.n	8010f3e <tcp_input+0x46a>
            break;
 8010f3c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d029      	beq.n	8010f98 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00a      	beq.n	8010f60 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010f52:	4b10      	ldr	r3, [pc, #64]	; (8010f94 <tcp_input+0x4c0>)
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010f5a:	4a0e      	ldr	r2, [pc, #56]	; (8010f94 <tcp_input+0x4c0>)
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010f60:	6978      	ldr	r0, [r7, #20]
 8010f62:	f000 fa03 	bl	801136c <tcp_listen_input>
      }
      pbuf_free(p);
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7fd fc60 	bl	800e82c <pbuf_free>
      return;
 8010f6c:	e1a8      	b.n	80112c0 <tcp_input+0x7ec>
 8010f6e:	bf00      	nop
 8010f70:	20011bdc 	.word	0x20011bdc
 8010f74:	20009b28 	.word	0x20009b28
 8010f78:	0801ccd4 	.word	0x0801ccd4
 8010f7c:	0801ce00 	.word	0x0801ce00
 8010f80:	0801cd20 	.word	0x0801cd20
 8010f84:	20011bc0 	.word	0x20011bc0
 8010f88:	0801ce2c 	.word	0x0801ce2c
 8010f8c:	20011bc4 	.word	0x20011bc4
 8010f90:	0801ce58 	.word	0x0801ce58
 8010f94:	20011bbc 	.word	0x20011bbc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8158 	beq.w	8011250 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010fa0:	4b95      	ldr	r3, [pc, #596]	; (80111f8 <tcp_input+0x724>)
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	891a      	ldrh	r2, [r3, #8]
 8010faa:	4b93      	ldr	r3, [pc, #588]	; (80111f8 <tcp_input+0x724>)
 8010fac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010fae:	4a92      	ldr	r2, [pc, #584]	; (80111f8 <tcp_input+0x724>)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010fb4:	4b91      	ldr	r3, [pc, #580]	; (80111fc <tcp_input+0x728>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	4a8f      	ldr	r2, [pc, #572]	; (80111f8 <tcp_input+0x724>)
 8010fba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010fbc:	4b90      	ldr	r3, [pc, #576]	; (8011200 <tcp_input+0x72c>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010fc2:	4b90      	ldr	r3, [pc, #576]	; (8011204 <tcp_input+0x730>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010fc8:	4b8f      	ldr	r3, [pc, #572]	; (8011208 <tcp_input+0x734>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010fce:	4b8f      	ldr	r3, [pc, #572]	; (801120c <tcp_input+0x738>)
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	f003 0308 	and.w	r3, r3, #8
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	7b5b      	ldrb	r3, [r3, #13]
 8010fde:	f043 0301 	orr.w	r3, r3, #1
 8010fe2:	b2da      	uxtb	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d017      	beq.n	8011020 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010ff0:	69f8      	ldr	r0, [r7, #28]
 8010ff2:	f7ff f85b 	bl	80100ac <tcp_process_refused_data>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	f113 0f0d 	cmn.w	r3, #13
 8010ffc:	d007      	beq.n	801100e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010ffe:	69fb      	ldr	r3, [r7, #28]
 8011000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011002:	2b00      	cmp	r3, #0
 8011004:	d00c      	beq.n	8011020 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011006:	4b82      	ldr	r3, [pc, #520]	; (8011210 <tcp_input+0x73c>)
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d008      	beq.n	8011020 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011012:	2b00      	cmp	r3, #0
 8011014:	f040 80e3 	bne.w	80111de <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011018:	69f8      	ldr	r0, [r7, #28]
 801101a:	f003 fe27 	bl	8014c6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801101e:	e0de      	b.n	80111de <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011020:	4a7c      	ldr	r2, [pc, #496]	; (8011214 <tcp_input+0x740>)
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011026:	69f8      	ldr	r0, [r7, #28]
 8011028:	f000 fb18 	bl	801165c <tcp_process>
 801102c:	4603      	mov	r3, r0
 801102e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011034:	f113 0f0d 	cmn.w	r3, #13
 8011038:	f000 80d3 	beq.w	80111e2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801103c:	4b71      	ldr	r3, [pc, #452]	; (8011204 <tcp_input+0x730>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f003 0308 	and.w	r3, r3, #8
 8011044:	2b00      	cmp	r3, #0
 8011046:	d015      	beq.n	8011074 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801104e:	2b00      	cmp	r3, #0
 8011050:	d008      	beq.n	8011064 <tcp_input+0x590>
 8011052:	69fb      	ldr	r3, [r7, #28]
 8011054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011058:	69fa      	ldr	r2, [r7, #28]
 801105a:	6912      	ldr	r2, [r2, #16]
 801105c:	f06f 010d 	mvn.w	r1, #13
 8011060:	4610      	mov	r0, r2
 8011062:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011064:	69f9      	ldr	r1, [r7, #28]
 8011066:	486c      	ldr	r0, [pc, #432]	; (8011218 <tcp_input+0x744>)
 8011068:	f7ff fbbc 	bl	80107e4 <tcp_pcb_remove>
        tcp_free(pcb);
 801106c:	69f8      	ldr	r0, [r7, #28]
 801106e:	f7fd fe89 	bl	800ed84 <tcp_free>
 8011072:	e0da      	b.n	801122a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011078:	4b63      	ldr	r3, [pc, #396]	; (8011208 <tcp_input+0x734>)
 801107a:	881b      	ldrh	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d01d      	beq.n	80110bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011080:	4b61      	ldr	r3, [pc, #388]	; (8011208 <tcp_input+0x734>)
 8011082:	881b      	ldrh	r3, [r3, #0]
 8011084:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00a      	beq.n	80110a6 <tcp_input+0x5d2>
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011096:	69fa      	ldr	r2, [r7, #28]
 8011098:	6910      	ldr	r0, [r2, #16]
 801109a:	89fa      	ldrh	r2, [r7, #14]
 801109c:	69f9      	ldr	r1, [r7, #28]
 801109e:	4798      	blx	r3
 80110a0:	4603      	mov	r3, r0
 80110a2:	74fb      	strb	r3, [r7, #19]
 80110a4:	e001      	b.n	80110aa <tcp_input+0x5d6>
 80110a6:	2300      	movs	r3, #0
 80110a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80110aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110ae:	f113 0f0d 	cmn.w	r3, #13
 80110b2:	f000 8098 	beq.w	80111e6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80110b6:	4b54      	ldr	r3, [pc, #336]	; (8011208 <tcp_input+0x734>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80110bc:	69f8      	ldr	r0, [r7, #28]
 80110be:	f000 f915 	bl	80112ec <tcp_input_delayed_close>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f040 8090 	bne.w	80111ea <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80110ca:	4b4d      	ldr	r3, [pc, #308]	; (8011200 <tcp_input+0x72c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d041      	beq.n	8011156 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d006      	beq.n	80110e8 <tcp_input+0x614>
 80110da:	4b50      	ldr	r3, [pc, #320]	; (801121c <tcp_input+0x748>)
 80110dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110e0:	494f      	ldr	r1, [pc, #316]	; (8011220 <tcp_input+0x74c>)
 80110e2:	4850      	ldr	r0, [pc, #320]	; (8011224 <tcp_input+0x750>)
 80110e4:	f006 ff14 	bl	8017f10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	8b5b      	ldrh	r3, [r3, #26]
 80110ec:	f003 0310 	and.w	r3, r3, #16
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d008      	beq.n	8011106 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80110f4:	4b42      	ldr	r3, [pc, #264]	; (8011200 <tcp_input+0x72c>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fd fb97 	bl	800e82c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80110fe:	69f8      	ldr	r0, [r7, #28]
 8011100:	f7fe f984 	bl	800f40c <tcp_abort>
            goto aborted;
 8011104:	e091      	b.n	801122a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00c      	beq.n	801112a <tcp_input+0x656>
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011116:	69fb      	ldr	r3, [r7, #28]
 8011118:	6918      	ldr	r0, [r3, #16]
 801111a:	4b39      	ldr	r3, [pc, #228]	; (8011200 <tcp_input+0x72c>)
 801111c:	681a      	ldr	r2, [r3, #0]
 801111e:	2300      	movs	r3, #0
 8011120:	69f9      	ldr	r1, [r7, #28]
 8011122:	47a0      	blx	r4
 8011124:	4603      	mov	r3, r0
 8011126:	74fb      	strb	r3, [r7, #19]
 8011128:	e008      	b.n	801113c <tcp_input+0x668>
 801112a:	4b35      	ldr	r3, [pc, #212]	; (8011200 <tcp_input+0x72c>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	2300      	movs	r3, #0
 8011130:	69f9      	ldr	r1, [r7, #28]
 8011132:	2000      	movs	r0, #0
 8011134:	f7ff f890 	bl	8010258 <tcp_recv_null>
 8011138:	4603      	mov	r3, r0
 801113a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801113c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011140:	f113 0f0d 	cmn.w	r3, #13
 8011144:	d053      	beq.n	80111ee <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d003      	beq.n	8011156 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801114e:	4b2c      	ldr	r3, [pc, #176]	; (8011200 <tcp_input+0x72c>)
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011156:	4b2b      	ldr	r3, [pc, #172]	; (8011204 <tcp_input+0x730>)
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	f003 0320 	and.w	r3, r3, #32
 801115e:	2b00      	cmp	r3, #0
 8011160:	d030      	beq.n	80111c4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011166:	2b00      	cmp	r3, #0
 8011168:	d009      	beq.n	801117e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801116e:	7b5a      	ldrb	r2, [r3, #13]
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011174:	f042 0220 	orr.w	r2, r2, #32
 8011178:	b2d2      	uxtb	r2, r2
 801117a:	735a      	strb	r2, [r3, #13]
 801117c:	e022      	b.n	80111c4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011182:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011186:	d005      	beq.n	8011194 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011188:	69fb      	ldr	r3, [r7, #28]
 801118a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801118c:	3301      	adds	r3, #1
 801118e:	b29a      	uxth	r2, r3
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00b      	beq.n	80111b6 <tcp_input+0x6e2>
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	6918      	ldr	r0, [r3, #16]
 80111a8:	2300      	movs	r3, #0
 80111aa:	2200      	movs	r2, #0
 80111ac:	69f9      	ldr	r1, [r7, #28]
 80111ae:	47a0      	blx	r4
 80111b0:	4603      	mov	r3, r0
 80111b2:	74fb      	strb	r3, [r7, #19]
 80111b4:	e001      	b.n	80111ba <tcp_input+0x6e6>
 80111b6:	2300      	movs	r3, #0
 80111b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80111ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111be:	f113 0f0d 	cmn.w	r3, #13
 80111c2:	d016      	beq.n	80111f2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80111c4:	4b13      	ldr	r3, [pc, #76]	; (8011214 <tcp_input+0x740>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80111ca:	69f8      	ldr	r0, [r7, #28]
 80111cc:	f000 f88e 	bl	80112ec <tcp_input_delayed_close>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d128      	bne.n	8011228 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80111d6:	69f8      	ldr	r0, [r7, #28]
 80111d8:	f002 ff20 	bl	801401c <tcp_output>
 80111dc:	e025      	b.n	801122a <tcp_input+0x756>
        goto aborted;
 80111de:	bf00      	nop
 80111e0:	e023      	b.n	801122a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80111e2:	bf00      	nop
 80111e4:	e021      	b.n	801122a <tcp_input+0x756>
              goto aborted;
 80111e6:	bf00      	nop
 80111e8:	e01f      	b.n	801122a <tcp_input+0x756>
          goto aborted;
 80111ea:	bf00      	nop
 80111ec:	e01d      	b.n	801122a <tcp_input+0x756>
            goto aborted;
 80111ee:	bf00      	nop
 80111f0:	e01b      	b.n	801122a <tcp_input+0x756>
              goto aborted;
 80111f2:	bf00      	nop
 80111f4:	e019      	b.n	801122a <tcp_input+0x756>
 80111f6:	bf00      	nop
 80111f8:	20011bcc 	.word	0x20011bcc
 80111fc:	20011bdc 	.word	0x20011bdc
 8011200:	20011bfc 	.word	0x20011bfc
 8011204:	20011bf9 	.word	0x20011bf9
 8011208:	20011bf4 	.word	0x20011bf4
 801120c:	20011bf8 	.word	0x20011bf8
 8011210:	20011bf6 	.word	0x20011bf6
 8011214:	20011c00 	.word	0x20011c00
 8011218:	20011bc0 	.word	0x20011bc0
 801121c:	0801ccd4 	.word	0x0801ccd4
 8011220:	0801ce88 	.word	0x0801ce88
 8011224:	0801cd20 	.word	0x0801cd20
          goto aborted;
 8011228:	bf00      	nop
    tcp_input_pcb = NULL;
 801122a:	4b27      	ldr	r3, [pc, #156]	; (80112c8 <tcp_input+0x7f4>)
 801122c:	2200      	movs	r2, #0
 801122e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011230:	4b26      	ldr	r3, [pc, #152]	; (80112cc <tcp_input+0x7f8>)
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011236:	4b26      	ldr	r3, [pc, #152]	; (80112d0 <tcp_input+0x7fc>)
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d03f      	beq.n	80112be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801123e:	4b24      	ldr	r3, [pc, #144]	; (80112d0 <tcp_input+0x7fc>)
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	4618      	mov	r0, r3
 8011244:	f7fd faf2 	bl	800e82c <pbuf_free>
      inseg.p = NULL;
 8011248:	4b21      	ldr	r3, [pc, #132]	; (80112d0 <tcp_input+0x7fc>)
 801124a:	2200      	movs	r2, #0
 801124c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801124e:	e036      	b.n	80112be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011250:	4b20      	ldr	r3, [pc, #128]	; (80112d4 <tcp_input+0x800>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	899b      	ldrh	r3, [r3, #12]
 8011256:	b29b      	uxth	r3, r3
 8011258:	4618      	mov	r0, r3
 801125a:	f7fb fde1 	bl	800ce20 <lwip_htons>
 801125e:	4603      	mov	r3, r0
 8011260:	b2db      	uxtb	r3, r3
 8011262:	f003 0304 	and.w	r3, r3, #4
 8011266:	2b00      	cmp	r3, #0
 8011268:	d118      	bne.n	801129c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801126a:	4b1b      	ldr	r3, [pc, #108]	; (80112d8 <tcp_input+0x804>)
 801126c:	6819      	ldr	r1, [r3, #0]
 801126e:	4b1b      	ldr	r3, [pc, #108]	; (80112dc <tcp_input+0x808>)
 8011270:	881b      	ldrh	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	4b1a      	ldr	r3, [pc, #104]	; (80112e0 <tcp_input+0x80c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801127a:	4b16      	ldr	r3, [pc, #88]	; (80112d4 <tcp_input+0x800>)
 801127c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801127e:	885b      	ldrh	r3, [r3, #2]
 8011280:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011282:	4a14      	ldr	r2, [pc, #80]	; (80112d4 <tcp_input+0x800>)
 8011284:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011286:	8812      	ldrh	r2, [r2, #0]
 8011288:	b292      	uxth	r2, r2
 801128a:	9202      	str	r2, [sp, #8]
 801128c:	9301      	str	r3, [sp, #4]
 801128e:	4b15      	ldr	r3, [pc, #84]	; (80112e4 <tcp_input+0x810>)
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	4b15      	ldr	r3, [pc, #84]	; (80112e8 <tcp_input+0x814>)
 8011294:	4602      	mov	r2, r0
 8011296:	2000      	movs	r0, #0
 8011298:	f003 fc96 	bl	8014bc8 <tcp_rst>
    pbuf_free(p);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7fd fac5 	bl	800e82c <pbuf_free>
  return;
 80112a2:	e00c      	b.n	80112be <tcp_input+0x7ea>
    goto dropped;
 80112a4:	bf00      	nop
 80112a6:	e006      	b.n	80112b6 <tcp_input+0x7e2>
    goto dropped;
 80112a8:	bf00      	nop
 80112aa:	e004      	b.n	80112b6 <tcp_input+0x7e2>
    goto dropped;
 80112ac:	bf00      	nop
 80112ae:	e002      	b.n	80112b6 <tcp_input+0x7e2>
      goto dropped;
 80112b0:	bf00      	nop
 80112b2:	e000      	b.n	80112b6 <tcp_input+0x7e2>
      goto dropped;
 80112b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f7fd fab8 	bl	800e82c <pbuf_free>
 80112bc:	e000      	b.n	80112c0 <tcp_input+0x7ec>
  return;
 80112be:	bf00      	nop
}
 80112c0:	3724      	adds	r7, #36	; 0x24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd90      	pop	{r4, r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20011c00 	.word	0x20011c00
 80112cc:	20011bfc 	.word	0x20011bfc
 80112d0:	20011bcc 	.word	0x20011bcc
 80112d4:	20011bdc 	.word	0x20011bdc
 80112d8:	20011bf0 	.word	0x20011bf0
 80112dc:	20011bf6 	.word	0x20011bf6
 80112e0:	20011bec 	.word	0x20011bec
 80112e4:	20009b38 	.word	0x20009b38
 80112e8:	20009b3c 	.word	0x20009b3c

080112ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <tcp_input_delayed_close+0x1c>
 80112fa:	4b17      	ldr	r3, [pc, #92]	; (8011358 <tcp_input_delayed_close+0x6c>)
 80112fc:	f240 225a 	movw	r2, #602	; 0x25a
 8011300:	4916      	ldr	r1, [pc, #88]	; (801135c <tcp_input_delayed_close+0x70>)
 8011302:	4817      	ldr	r0, [pc, #92]	; (8011360 <tcp_input_delayed_close+0x74>)
 8011304:	f006 fe04 	bl	8017f10 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011308:	4b16      	ldr	r3, [pc, #88]	; (8011364 <tcp_input_delayed_close+0x78>)
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	f003 0310 	and.w	r3, r3, #16
 8011310:	2b00      	cmp	r3, #0
 8011312:	d01c      	beq.n	801134e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	8b5b      	ldrh	r3, [r3, #26]
 8011318:	f003 0310 	and.w	r3, r3, #16
 801131c:	2b00      	cmp	r3, #0
 801131e:	d10d      	bne.n	801133c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011326:	2b00      	cmp	r3, #0
 8011328:	d008      	beq.n	801133c <tcp_input_delayed_close+0x50>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	6912      	ldr	r2, [r2, #16]
 8011334:	f06f 010e 	mvn.w	r1, #14
 8011338:	4610      	mov	r0, r2
 801133a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801133c:	6879      	ldr	r1, [r7, #4]
 801133e:	480a      	ldr	r0, [pc, #40]	; (8011368 <tcp_input_delayed_close+0x7c>)
 8011340:	f7ff fa50 	bl	80107e4 <tcp_pcb_remove>
    tcp_free(pcb);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7fd fd1d 	bl	800ed84 <tcp_free>
    return 1;
 801134a:	2301      	movs	r3, #1
 801134c:	e000      	b.n	8011350 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801134e:	2300      	movs	r3, #0
}
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	0801ccd4 	.word	0x0801ccd4
 801135c:	0801cea4 	.word	0x0801cea4
 8011360:	0801cd20 	.word	0x0801cd20
 8011364:	20011bf9 	.word	0x20011bf9
 8011368:	20011bc0 	.word	0x20011bc0

0801136c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801136c:	b590      	push	{r4, r7, lr}
 801136e:	b08b      	sub	sp, #44	; 0x2c
 8011370:	af04      	add	r7, sp, #16
 8011372:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011374:	4b6f      	ldr	r3, [pc, #444]	; (8011534 <tcp_listen_input+0x1c8>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	f003 0304 	and.w	r3, r3, #4
 801137c:	2b00      	cmp	r3, #0
 801137e:	f040 80d2 	bne.w	8011526 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d106      	bne.n	8011396 <tcp_listen_input+0x2a>
 8011388:	4b6b      	ldr	r3, [pc, #428]	; (8011538 <tcp_listen_input+0x1cc>)
 801138a:	f240 2281 	movw	r2, #641	; 0x281
 801138e:	496b      	ldr	r1, [pc, #428]	; (801153c <tcp_listen_input+0x1d0>)
 8011390:	486b      	ldr	r0, [pc, #428]	; (8011540 <tcp_listen_input+0x1d4>)
 8011392:	f006 fdbd 	bl	8017f10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011396:	4b67      	ldr	r3, [pc, #412]	; (8011534 <tcp_listen_input+0x1c8>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	f003 0310 	and.w	r3, r3, #16
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d019      	beq.n	80113d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113a2:	4b68      	ldr	r3, [pc, #416]	; (8011544 <tcp_listen_input+0x1d8>)
 80113a4:	6819      	ldr	r1, [r3, #0]
 80113a6:	4b68      	ldr	r3, [pc, #416]	; (8011548 <tcp_listen_input+0x1dc>)
 80113a8:	881b      	ldrh	r3, [r3, #0]
 80113aa:	461a      	mov	r2, r3
 80113ac:	4b67      	ldr	r3, [pc, #412]	; (801154c <tcp_listen_input+0x1e0>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113b2:	4b67      	ldr	r3, [pc, #412]	; (8011550 <tcp_listen_input+0x1e4>)
 80113b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113b6:	885b      	ldrh	r3, [r3, #2]
 80113b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80113ba:	4a65      	ldr	r2, [pc, #404]	; (8011550 <tcp_listen_input+0x1e4>)
 80113bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80113be:	8812      	ldrh	r2, [r2, #0]
 80113c0:	b292      	uxth	r2, r2
 80113c2:	9202      	str	r2, [sp, #8]
 80113c4:	9301      	str	r3, [sp, #4]
 80113c6:	4b63      	ldr	r3, [pc, #396]	; (8011554 <tcp_listen_input+0x1e8>)
 80113c8:	9300      	str	r3, [sp, #0]
 80113ca:	4b63      	ldr	r3, [pc, #396]	; (8011558 <tcp_listen_input+0x1ec>)
 80113cc:	4602      	mov	r2, r0
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f003 fbfa 	bl	8014bc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80113d4:	e0a9      	b.n	801152a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80113d6:	4b57      	ldr	r3, [pc, #348]	; (8011534 <tcp_listen_input+0x1c8>)
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	f003 0302 	and.w	r3, r3, #2
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f000 80a3 	beq.w	801152a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7d5b      	ldrb	r3, [r3, #21]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7ff f859 	bl	80104a0 <tcp_alloc>
 80113ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d111      	bne.n	801141a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	699b      	ldr	r3, [r3, #24]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00a      	beq.n	8011414 <tcp_listen_input+0xa8>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	699b      	ldr	r3, [r3, #24]
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	6910      	ldr	r0, [r2, #16]
 8011406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801140a:	2100      	movs	r1, #0
 801140c:	4798      	blx	r3
 801140e:	4603      	mov	r3, r0
 8011410:	73bb      	strb	r3, [r7, #14]
      return;
 8011412:	e08b      	b.n	801152c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011414:	23f0      	movs	r3, #240	; 0xf0
 8011416:	73bb      	strb	r3, [r7, #14]
      return;
 8011418:	e088      	b.n	801152c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801141a:	4b50      	ldr	r3, [pc, #320]	; (801155c <tcp_listen_input+0x1f0>)
 801141c:	695a      	ldr	r2, [r3, #20]
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011422:	4b4e      	ldr	r3, [pc, #312]	; (801155c <tcp_listen_input+0x1f0>)
 8011424:	691a      	ldr	r2, [r3, #16]
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	8ada      	ldrh	r2, [r3, #22]
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011432:	4b47      	ldr	r3, [pc, #284]	; (8011550 <tcp_listen_input+0x1e4>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	b29a      	uxth	r2, r3
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	2203      	movs	r2, #3
 8011442:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011444:	4b41      	ldr	r3, [pc, #260]	; (801154c <tcp_listen_input+0x1e0>)
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011456:	6978      	ldr	r0, [r7, #20]
 8011458:	f7ff fa58 	bl	801090c <tcp_next_iss>
 801145c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	693a      	ldr	r2, [r7, #16]
 8011468:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	693a      	ldr	r2, [r7, #16]
 8011474:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011476:	4b35      	ldr	r3, [pc, #212]	; (801154c <tcp_listen_input+0x1e0>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	1e5a      	subs	r2, r3, #1
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	691a      	ldr	r2, [r3, #16]
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	687a      	ldr	r2, [r7, #4]
 801148c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	7a5b      	ldrb	r3, [r3, #9]
 8011492:	f003 030c 	and.w	r3, r3, #12
 8011496:	b2da      	uxtb	r2, r3
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	7a1a      	ldrb	r2, [r3, #8]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80114a4:	4b2e      	ldr	r3, [pc, #184]	; (8011560 <tcp_listen_input+0x1f4>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	60da      	str	r2, [r3, #12]
 80114ac:	4a2c      	ldr	r2, [pc, #176]	; (8011560 <tcp_listen_input+0x1f4>)
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	6013      	str	r3, [r2, #0]
 80114b2:	f003 fd4b 	bl	8014f4c <tcp_timer_needed>
 80114b6:	4b2b      	ldr	r3, [pc, #172]	; (8011564 <tcp_listen_input+0x1f8>)
 80114b8:	2201      	movs	r2, #1
 80114ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80114bc:	6978      	ldr	r0, [r7, #20]
 80114be:	f001 fd8f 	bl	8012fe0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80114c2:	4b23      	ldr	r3, [pc, #140]	; (8011550 <tcp_listen_input+0x1e4>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	89db      	ldrh	r3, [r3, #14]
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	3304      	adds	r3, #4
 80114e4:	4618      	mov	r0, r3
 80114e6:	f004 ff85 	bl	80163f4 <ip4_route>
 80114ea:	4601      	mov	r1, r0
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	3304      	adds	r3, #4
 80114f0:	461a      	mov	r2, r3
 80114f2:	4620      	mov	r0, r4
 80114f4:	f7ff fa30 	bl	8010958 <tcp_eff_send_mss_netif>
 80114f8:	4603      	mov	r3, r0
 80114fa:	461a      	mov	r2, r3
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011500:	2112      	movs	r1, #18
 8011502:	6978      	ldr	r0, [r7, #20]
 8011504:	f002 fc9c 	bl	8013e40 <tcp_enqueue_flags>
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d004      	beq.n	801151e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011514:	2100      	movs	r1, #0
 8011516:	6978      	ldr	r0, [r7, #20]
 8011518:	f7fd feba 	bl	800f290 <tcp_abandon>
      return;
 801151c:	e006      	b.n	801152c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801151e:	6978      	ldr	r0, [r7, #20]
 8011520:	f002 fd7c 	bl	801401c <tcp_output>
  return;
 8011524:	e001      	b.n	801152a <tcp_listen_input+0x1be>
    return;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <tcp_listen_input+0x1c0>
  return;
 801152a:	bf00      	nop
}
 801152c:	371c      	adds	r7, #28
 801152e:	46bd      	mov	sp, r7
 8011530:	bd90      	pop	{r4, r7, pc}
 8011532:	bf00      	nop
 8011534:	20011bf8 	.word	0x20011bf8
 8011538:	0801ccd4 	.word	0x0801ccd4
 801153c:	0801cecc 	.word	0x0801cecc
 8011540:	0801cd20 	.word	0x0801cd20
 8011544:	20011bf0 	.word	0x20011bf0
 8011548:	20011bf6 	.word	0x20011bf6
 801154c:	20011bec 	.word	0x20011bec
 8011550:	20011bdc 	.word	0x20011bdc
 8011554:	20009b38 	.word	0x20009b38
 8011558:	20009b3c 	.word	0x20009b3c
 801155c:	20009b28 	.word	0x20009b28
 8011560:	20011bc0 	.word	0x20011bc0
 8011564:	20011bc8 	.word	0x20011bc8

08011568 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af04      	add	r7, sp, #16
 801156e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011570:	4b2f      	ldr	r3, [pc, #188]	; (8011630 <tcp_timewait_input+0xc8>)
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	f003 0304 	and.w	r3, r3, #4
 8011578:	2b00      	cmp	r3, #0
 801157a:	d153      	bne.n	8011624 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <tcp_timewait_input+0x28>
 8011582:	4b2c      	ldr	r3, [pc, #176]	; (8011634 <tcp_timewait_input+0xcc>)
 8011584:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011588:	492b      	ldr	r1, [pc, #172]	; (8011638 <tcp_timewait_input+0xd0>)
 801158a:	482c      	ldr	r0, [pc, #176]	; (801163c <tcp_timewait_input+0xd4>)
 801158c:	f006 fcc0 	bl	8017f10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011590:	4b27      	ldr	r3, [pc, #156]	; (8011630 <tcp_timewait_input+0xc8>)
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	f003 0302 	and.w	r3, r3, #2
 8011598:	2b00      	cmp	r3, #0
 801159a:	d02a      	beq.n	80115f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801159c:	4b28      	ldr	r3, [pc, #160]	; (8011640 <tcp_timewait_input+0xd8>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a4:	1ad3      	subs	r3, r2, r3
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	db2d      	blt.n	8011606 <tcp_timewait_input+0x9e>
 80115aa:	4b25      	ldr	r3, [pc, #148]	; (8011640 <tcp_timewait_input+0xd8>)
 80115ac:	681a      	ldr	r2, [r3, #0]
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b2:	6879      	ldr	r1, [r7, #4]
 80115b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115b6:	440b      	add	r3, r1
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	dc23      	bgt.n	8011606 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115be:	4b21      	ldr	r3, [pc, #132]	; (8011644 <tcp_timewait_input+0xdc>)
 80115c0:	6819      	ldr	r1, [r3, #0]
 80115c2:	4b21      	ldr	r3, [pc, #132]	; (8011648 <tcp_timewait_input+0xe0>)
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	461a      	mov	r2, r3
 80115c8:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <tcp_timewait_input+0xd8>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115ce:	4b1f      	ldr	r3, [pc, #124]	; (801164c <tcp_timewait_input+0xe4>)
 80115d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115d2:	885b      	ldrh	r3, [r3, #2]
 80115d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115d6:	4a1d      	ldr	r2, [pc, #116]	; (801164c <tcp_timewait_input+0xe4>)
 80115d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115da:	8812      	ldrh	r2, [r2, #0]
 80115dc:	b292      	uxth	r2, r2
 80115de:	9202      	str	r2, [sp, #8]
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	4b1b      	ldr	r3, [pc, #108]	; (8011650 <tcp_timewait_input+0xe8>)
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <tcp_timewait_input+0xec>)
 80115e8:	4602      	mov	r2, r0
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f003 faec 	bl	8014bc8 <tcp_rst>
      return;
 80115f0:	e01b      	b.n	801162a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80115f2:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <tcp_timewait_input+0xc8>)
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80115fe:	4b16      	ldr	r3, [pc, #88]	; (8011658 <tcp_timewait_input+0xf0>)
 8011600:	681a      	ldr	r2, [r3, #0]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <tcp_timewait_input+0xe0>)
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00c      	beq.n	8011628 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	8b5b      	ldrh	r3, [r3, #26]
 8011612:	f043 0302 	orr.w	r3, r3, #2
 8011616:	b29a      	uxth	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f002 fcfd 	bl	801401c <tcp_output>
  }
  return;
 8011622:	e001      	b.n	8011628 <tcp_timewait_input+0xc0>
    return;
 8011624:	bf00      	nop
 8011626:	e000      	b.n	801162a <tcp_timewait_input+0xc2>
  return;
 8011628:	bf00      	nop
}
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20011bf8 	.word	0x20011bf8
 8011634:	0801ccd4 	.word	0x0801ccd4
 8011638:	0801ceec 	.word	0x0801ceec
 801163c:	0801cd20 	.word	0x0801cd20
 8011640:	20011bec 	.word	0x20011bec
 8011644:	20011bf0 	.word	0x20011bf0
 8011648:	20011bf6 	.word	0x20011bf6
 801164c:	20011bdc 	.word	0x20011bdc
 8011650:	20009b38 	.word	0x20009b38
 8011654:	20009b3c 	.word	0x20009b3c
 8011658:	20011bb4 	.word	0x20011bb4

0801165c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801165c:	b590      	push	{r4, r7, lr}
 801165e:	b08d      	sub	sp, #52	; 0x34
 8011660:	af04      	add	r7, sp, #16
 8011662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011664:	2300      	movs	r3, #0
 8011666:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011668:	2300      	movs	r3, #0
 801166a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d106      	bne.n	8011680 <tcp_process+0x24>
 8011672:	4b9d      	ldr	r3, [pc, #628]	; (80118e8 <tcp_process+0x28c>)
 8011674:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011678:	499c      	ldr	r1, [pc, #624]	; (80118ec <tcp_process+0x290>)
 801167a:	489d      	ldr	r0, [pc, #628]	; (80118f0 <tcp_process+0x294>)
 801167c:	f006 fc48 	bl	8017f10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011680:	4b9c      	ldr	r3, [pc, #624]	; (80118f4 <tcp_process+0x298>)
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	f003 0304 	and.w	r3, r3, #4
 8011688:	2b00      	cmp	r3, #0
 801168a:	d04e      	beq.n	801172a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	7d1b      	ldrb	r3, [r3, #20]
 8011690:	2b02      	cmp	r3, #2
 8011692:	d108      	bne.n	80116a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011698:	4b97      	ldr	r3, [pc, #604]	; (80118f8 <tcp_process+0x29c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	429a      	cmp	r2, r3
 801169e:	d123      	bne.n	80116e8 <tcp_process+0x8c>
        acceptable = 1;
 80116a0:	2301      	movs	r3, #1
 80116a2:	76fb      	strb	r3, [r7, #27]
 80116a4:	e020      	b.n	80116e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116aa:	4b94      	ldr	r3, [pc, #592]	; (80118fc <tcp_process+0x2a0>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d102      	bne.n	80116b8 <tcp_process+0x5c>
        acceptable = 1;
 80116b2:	2301      	movs	r3, #1
 80116b4:	76fb      	strb	r3, [r7, #27]
 80116b6:	e017      	b.n	80116e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80116b8:	4b90      	ldr	r3, [pc, #576]	; (80118fc <tcp_process+0x2a0>)
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	db10      	blt.n	80116e8 <tcp_process+0x8c>
 80116c6:	4b8d      	ldr	r3, [pc, #564]	; (80118fc <tcp_process+0x2a0>)
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ce:	6879      	ldr	r1, [r7, #4]
 80116d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116d2:	440b      	add	r3, r1
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dc06      	bgt.n	80116e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	8b5b      	ldrh	r3, [r3, #26]
 80116de:	f043 0302 	orr.w	r3, r3, #2
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80116e8:	7efb      	ldrb	r3, [r7, #27]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d01b      	beq.n	8011726 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	7d1b      	ldrb	r3, [r3, #20]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <tcp_process+0xa8>
 80116f6:	4b7c      	ldr	r3, [pc, #496]	; (80118e8 <tcp_process+0x28c>)
 80116f8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80116fc:	4980      	ldr	r1, [pc, #512]	; (8011900 <tcp_process+0x2a4>)
 80116fe:	487c      	ldr	r0, [pc, #496]	; (80118f0 <tcp_process+0x294>)
 8011700:	f006 fc06 	bl	8017f10 <iprintf>
      recv_flags |= TF_RESET;
 8011704:	4b7f      	ldr	r3, [pc, #508]	; (8011904 <tcp_process+0x2a8>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	f043 0308 	orr.w	r3, r3, #8
 801170c:	b2da      	uxtb	r2, r3
 801170e:	4b7d      	ldr	r3, [pc, #500]	; (8011904 <tcp_process+0x2a8>)
 8011710:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	8b5b      	ldrh	r3, [r3, #26]
 8011716:	f023 0301 	bic.w	r3, r3, #1
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011720:	f06f 030d 	mvn.w	r3, #13
 8011724:	e37a      	b.n	8011e1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e378      	b.n	8011e1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801172a:	4b72      	ldr	r3, [pc, #456]	; (80118f4 <tcp_process+0x298>)
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	f003 0302 	and.w	r3, r3, #2
 8011732:	2b00      	cmp	r3, #0
 8011734:	d010      	beq.n	8011758 <tcp_process+0xfc>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	7d1b      	ldrb	r3, [r3, #20]
 801173a:	2b02      	cmp	r3, #2
 801173c:	d00c      	beq.n	8011758 <tcp_process+0xfc>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	7d1b      	ldrb	r3, [r3, #20]
 8011742:	2b03      	cmp	r3, #3
 8011744:	d008      	beq.n	8011758 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	8b5b      	ldrh	r3, [r3, #26]
 801174a:	f043 0302 	orr.w	r3, r3, #2
 801174e:	b29a      	uxth	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	e361      	b.n	8011e1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	8b5b      	ldrh	r3, [r3, #26]
 801175c:	f003 0310 	and.w	r3, r3, #16
 8011760:	2b00      	cmp	r3, #0
 8011762:	d103      	bne.n	801176c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011764:	4b68      	ldr	r3, [pc, #416]	; (8011908 <tcp_process+0x2ac>)
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2200      	movs	r2, #0
 8011770:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f001 fc2f 	bl	8012fe0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	7d1b      	ldrb	r3, [r3, #20]
 8011786:	3b02      	subs	r3, #2
 8011788:	2b07      	cmp	r3, #7
 801178a:	f200 8337 	bhi.w	8011dfc <tcp_process+0x7a0>
 801178e:	a201      	add	r2, pc, #4	; (adr r2, 8011794 <tcp_process+0x138>)
 8011790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011794:	080117b5 	.word	0x080117b5
 8011798:	080119e5 	.word	0x080119e5
 801179c:	08011b5d 	.word	0x08011b5d
 80117a0:	08011b87 	.word	0x08011b87
 80117a4:	08011cab 	.word	0x08011cab
 80117a8:	08011b5d 	.word	0x08011b5d
 80117ac:	08011d37 	.word	0x08011d37
 80117b0:	08011dc7 	.word	0x08011dc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80117b4:	4b4f      	ldr	r3, [pc, #316]	; (80118f4 <tcp_process+0x298>)
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	f003 0310 	and.w	r3, r3, #16
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f000 80e4 	beq.w	801198a <tcp_process+0x32e>
 80117c2:	4b4c      	ldr	r3, [pc, #304]	; (80118f4 <tcp_process+0x298>)
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	f003 0302 	and.w	r3, r3, #2
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f000 80dd 	beq.w	801198a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117d4:	1c5a      	adds	r2, r3, #1
 80117d6:	4b48      	ldr	r3, [pc, #288]	; (80118f8 <tcp_process+0x29c>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	429a      	cmp	r2, r3
 80117dc:	f040 80d5 	bne.w	801198a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80117e0:	4b46      	ldr	r3, [pc, #280]	; (80118fc <tcp_process+0x2a0>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	1c5a      	adds	r2, r3, #1
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80117f2:	4b41      	ldr	r3, [pc, #260]	; (80118f8 <tcp_process+0x29c>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80117fa:	4b44      	ldr	r3, [pc, #272]	; (801190c <tcp_process+0x2b0>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	89db      	ldrh	r3, [r3, #14]
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011814:	4b39      	ldr	r3, [pc, #228]	; (80118fc <tcp_process+0x2a0>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	1e5a      	subs	r2, r3, #1
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	2204      	movs	r2, #4
 8011822:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3304      	adds	r3, #4
 801182c:	4618      	mov	r0, r3
 801182e:	f004 fde1 	bl	80163f4 <ip4_route>
 8011832:	4601      	mov	r1, r0
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3304      	adds	r3, #4
 8011838:	461a      	mov	r2, r3
 801183a:	4620      	mov	r0, r4
 801183c:	f7ff f88c 	bl	8010958 <tcp_eff_send_mss_netif>
 8011840:	4603      	mov	r3, r0
 8011842:	461a      	mov	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801184c:	009a      	lsls	r2, r3, #2
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	f241 111c 	movw	r1, #4380	; 0x111c
 8011858:	428b      	cmp	r3, r1
 801185a:	bf38      	it	cc
 801185c:	460b      	movcc	r3, r1
 801185e:	429a      	cmp	r2, r3
 8011860:	d204      	bcs.n	801186c <tcp_process+0x210>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011866:	009b      	lsls	r3, r3, #2
 8011868:	b29b      	uxth	r3, r3
 801186a:	e00d      	b.n	8011888 <tcp_process+0x22c>
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011870:	005b      	lsls	r3, r3, #1
 8011872:	f241 121c 	movw	r2, #4380	; 0x111c
 8011876:	4293      	cmp	r3, r2
 8011878:	d904      	bls.n	8011884 <tcp_process+0x228>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	b29b      	uxth	r3, r3
 8011882:	e001      	b.n	8011888 <tcp_process+0x22c>
 8011884:	f241 131c 	movw	r3, #4380	; 0x111c
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011894:	2b00      	cmp	r3, #0
 8011896:	d106      	bne.n	80118a6 <tcp_process+0x24a>
 8011898:	4b13      	ldr	r3, [pc, #76]	; (80118e8 <tcp_process+0x28c>)
 801189a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801189e:	491c      	ldr	r1, [pc, #112]	; (8011910 <tcp_process+0x2b4>)
 80118a0:	4813      	ldr	r0, [pc, #76]	; (80118f0 <tcp_process+0x294>)
 80118a2:	f006 fb35 	bl	8017f10 <iprintf>
        --pcb->snd_queuelen;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118ac:	3b01      	subs	r3, #1
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d12a      	bne.n	8011918 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d106      	bne.n	80118dc <tcp_process+0x280>
 80118ce:	4b06      	ldr	r3, [pc, #24]	; (80118e8 <tcp_process+0x28c>)
 80118d0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80118d4:	490f      	ldr	r1, [pc, #60]	; (8011914 <tcp_process+0x2b8>)
 80118d6:	4806      	ldr	r0, [pc, #24]	; (80118f0 <tcp_process+0x294>)
 80118d8:	f006 fb1a 	bl	8017f10 <iprintf>
          pcb->unsent = rseg->next;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80118e4:	e01c      	b.n	8011920 <tcp_process+0x2c4>
 80118e6:	bf00      	nop
 80118e8:	0801ccd4 	.word	0x0801ccd4
 80118ec:	0801cf0c 	.word	0x0801cf0c
 80118f0:	0801cd20 	.word	0x0801cd20
 80118f4:	20011bf8 	.word	0x20011bf8
 80118f8:	20011bf0 	.word	0x20011bf0
 80118fc:	20011bec 	.word	0x20011bec
 8011900:	0801cf28 	.word	0x0801cf28
 8011904:	20011bf9 	.word	0x20011bf9
 8011908:	20011bb4 	.word	0x20011bb4
 801190c:	20011bdc 	.word	0x20011bdc
 8011910:	0801cf48 	.word	0x0801cf48
 8011914:	0801cf60 	.word	0x0801cf60
        } else {
          pcb->unacked = rseg->next;
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011920:	69f8      	ldr	r0, [r7, #28]
 8011922:	f7fe fc54 	bl	80101ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801192a:	2b00      	cmp	r3, #0
 801192c:	d104      	bne.n	8011938 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011934:	861a      	strh	r2, [r3, #48]	; 0x30
 8011936:	e006      	b.n	8011946 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00a      	beq.n	8011966 <tcp_process+0x30a>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	6910      	ldr	r0, [r2, #16]
 801195a:	2200      	movs	r2, #0
 801195c:	6879      	ldr	r1, [r7, #4]
 801195e:	4798      	blx	r3
 8011960:	4603      	mov	r3, r0
 8011962:	76bb      	strb	r3, [r7, #26]
 8011964:	e001      	b.n	801196a <tcp_process+0x30e>
 8011966:	2300      	movs	r3, #0
 8011968:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801196a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801196e:	f113 0f0d 	cmn.w	r3, #13
 8011972:	d102      	bne.n	801197a <tcp_process+0x31e>
          return ERR_ABRT;
 8011974:	f06f 030c 	mvn.w	r3, #12
 8011978:	e250      	b.n	8011e1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	8b5b      	ldrh	r3, [r3, #26]
 801197e:	f043 0302 	orr.w	r3, r3, #2
 8011982:	b29a      	uxth	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011988:	e23a      	b.n	8011e00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801198a:	4b98      	ldr	r3, [pc, #608]	; (8011bec <tcp_process+0x590>)
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	f003 0310 	and.w	r3, r3, #16
 8011992:	2b00      	cmp	r3, #0
 8011994:	f000 8234 	beq.w	8011e00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011998:	4b95      	ldr	r3, [pc, #596]	; (8011bf0 <tcp_process+0x594>)
 801199a:	6819      	ldr	r1, [r3, #0]
 801199c:	4b95      	ldr	r3, [pc, #596]	; (8011bf4 <tcp_process+0x598>)
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	461a      	mov	r2, r3
 80119a2:	4b95      	ldr	r3, [pc, #596]	; (8011bf8 <tcp_process+0x59c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119a8:	4b94      	ldr	r3, [pc, #592]	; (8011bfc <tcp_process+0x5a0>)
 80119aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119ac:	885b      	ldrh	r3, [r3, #2]
 80119ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119b0:	4a92      	ldr	r2, [pc, #584]	; (8011bfc <tcp_process+0x5a0>)
 80119b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119b4:	8812      	ldrh	r2, [r2, #0]
 80119b6:	b292      	uxth	r2, r2
 80119b8:	9202      	str	r2, [sp, #8]
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	4b90      	ldr	r3, [pc, #576]	; (8011c00 <tcp_process+0x5a4>)
 80119be:	9300      	str	r3, [sp, #0]
 80119c0:	4b90      	ldr	r3, [pc, #576]	; (8011c04 <tcp_process+0x5a8>)
 80119c2:	4602      	mov	r2, r0
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f003 f8ff 	bl	8014bc8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119d0:	2b05      	cmp	r3, #5
 80119d2:	f200 8215 	bhi.w	8011e00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f002 feb9 	bl	8014754 <tcp_rexmit_rto>
      break;
 80119e2:	e20d      	b.n	8011e00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80119e4:	4b81      	ldr	r3, [pc, #516]	; (8011bec <tcp_process+0x590>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	f003 0310 	and.w	r3, r3, #16
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 80a1 	beq.w	8011b34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119f2:	4b7f      	ldr	r3, [pc, #508]	; (8011bf0 <tcp_process+0x594>)
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	3b01      	subs	r3, #1
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	db7e      	blt.n	8011b00 <tcp_process+0x4a4>
 8011a02:	4b7b      	ldr	r3, [pc, #492]	; (8011bf0 <tcp_process+0x594>)
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	dc77      	bgt.n	8011b00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2204      	movs	r2, #4
 8011a14:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d102      	bne.n	8011a24 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011a1e:	23fa      	movs	r3, #250	; 0xfa
 8011a20:	76bb      	strb	r3, [r7, #26]
 8011a22:	e01d      	b.n	8011a60 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a28:	699b      	ldr	r3, [r3, #24]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d106      	bne.n	8011a3c <tcp_process+0x3e0>
 8011a2e:	4b76      	ldr	r3, [pc, #472]	; (8011c08 <tcp_process+0x5ac>)
 8011a30:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011a34:	4975      	ldr	r1, [pc, #468]	; (8011c0c <tcp_process+0x5b0>)
 8011a36:	4876      	ldr	r0, [pc, #472]	; (8011c10 <tcp_process+0x5b4>)
 8011a38:	f006 fa6a 	bl	8017f10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d00a      	beq.n	8011a5c <tcp_process+0x400>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a4a:	699b      	ldr	r3, [r3, #24]
 8011a4c:	687a      	ldr	r2, [r7, #4]
 8011a4e:	6910      	ldr	r0, [r2, #16]
 8011a50:	2200      	movs	r2, #0
 8011a52:	6879      	ldr	r1, [r7, #4]
 8011a54:	4798      	blx	r3
 8011a56:	4603      	mov	r3, r0
 8011a58:	76bb      	strb	r3, [r7, #26]
 8011a5a:	e001      	b.n	8011a60 <tcp_process+0x404>
 8011a5c:	23f0      	movs	r3, #240	; 0xf0
 8011a5e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011a60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d00a      	beq.n	8011a7e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011a68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a6c:	f113 0f0d 	cmn.w	r3, #13
 8011a70:	d002      	beq.n	8011a78 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f7fd fcca 	bl	800f40c <tcp_abort>
            }
            return ERR_ABRT;
 8011a78:	f06f 030c 	mvn.w	r3, #12
 8011a7c:	e1ce      	b.n	8011e1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 fae0 	bl	8012044 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011a84:	4b63      	ldr	r3, [pc, #396]	; (8011c14 <tcp_process+0x5b8>)
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d005      	beq.n	8011a98 <tcp_process+0x43c>
            recv_acked--;
 8011a8c:	4b61      	ldr	r3, [pc, #388]	; (8011c14 <tcp_process+0x5b8>)
 8011a8e:	881b      	ldrh	r3, [r3, #0]
 8011a90:	3b01      	subs	r3, #1
 8011a92:	b29a      	uxth	r2, r3
 8011a94:	4b5f      	ldr	r3, [pc, #380]	; (8011c14 <tcp_process+0x5b8>)
 8011a96:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a9c:	009a      	lsls	r2, r3, #2
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aa2:	005b      	lsls	r3, r3, #1
 8011aa4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011aa8:	428b      	cmp	r3, r1
 8011aaa:	bf38      	it	cc
 8011aac:	460b      	movcc	r3, r1
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d204      	bcs.n	8011abc <tcp_process+0x460>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	e00d      	b.n	8011ad8 <tcp_process+0x47c>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ac0:	005b      	lsls	r3, r3, #1
 8011ac2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d904      	bls.n	8011ad4 <tcp_process+0x478>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ace:	005b      	lsls	r3, r3, #1
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	e001      	b.n	8011ad8 <tcp_process+0x47c>
 8011ad4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011ade:	4b4e      	ldr	r3, [pc, #312]	; (8011c18 <tcp_process+0x5bc>)
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	f003 0320 	and.w	r3, r3, #32
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d037      	beq.n	8011b5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	8b5b      	ldrh	r3, [r3, #26]
 8011aee:	f043 0302 	orr.w	r3, r3, #2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2207      	movs	r2, #7
 8011afc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011afe:	e02c      	b.n	8011b5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b00:	4b3b      	ldr	r3, [pc, #236]	; (8011bf0 <tcp_process+0x594>)
 8011b02:	6819      	ldr	r1, [r3, #0]
 8011b04:	4b3b      	ldr	r3, [pc, #236]	; (8011bf4 <tcp_process+0x598>)
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	461a      	mov	r2, r3
 8011b0a:	4b3b      	ldr	r3, [pc, #236]	; (8011bf8 <tcp_process+0x59c>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b10:	4b3a      	ldr	r3, [pc, #232]	; (8011bfc <tcp_process+0x5a0>)
 8011b12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b14:	885b      	ldrh	r3, [r3, #2]
 8011b16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b18:	4a38      	ldr	r2, [pc, #224]	; (8011bfc <tcp_process+0x5a0>)
 8011b1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b1c:	8812      	ldrh	r2, [r2, #0]
 8011b1e:	b292      	uxth	r2, r2
 8011b20:	9202      	str	r2, [sp, #8]
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	4b36      	ldr	r3, [pc, #216]	; (8011c00 <tcp_process+0x5a4>)
 8011b26:	9300      	str	r3, [sp, #0]
 8011b28:	4b36      	ldr	r3, [pc, #216]	; (8011c04 <tcp_process+0x5a8>)
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f003 f84b 	bl	8014bc8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011b32:	e167      	b.n	8011e04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011b34:	4b2d      	ldr	r3, [pc, #180]	; (8011bec <tcp_process+0x590>)
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	f003 0302 	and.w	r3, r3, #2
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	f000 8161 	beq.w	8011e04 <tcp_process+0x7a8>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b46:	1e5a      	subs	r2, r3, #1
 8011b48:	4b2b      	ldr	r3, [pc, #172]	; (8011bf8 <tcp_process+0x59c>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	f040 8159 	bne.w	8011e04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f002 fe20 	bl	8014798 <tcp_rexmit>
      break;
 8011b58:	e154      	b.n	8011e04 <tcp_process+0x7a8>
 8011b5a:	e153      	b.n	8011e04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f000 fa71 	bl	8012044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011b62:	4b2d      	ldr	r3, [pc, #180]	; (8011c18 <tcp_process+0x5bc>)
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	f003 0320 	and.w	r3, r3, #32
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 814c 	beq.w	8011e08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	8b5b      	ldrh	r3, [r3, #26]
 8011b74:	f043 0302 	orr.w	r3, r3, #2
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2207      	movs	r2, #7
 8011b82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b84:	e140      	b.n	8011e08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fa5c 	bl	8012044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b8c:	4b22      	ldr	r3, [pc, #136]	; (8011c18 <tcp_process+0x5bc>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	f003 0320 	and.w	r3, r3, #32
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d071      	beq.n	8011c7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b98:	4b14      	ldr	r3, [pc, #80]	; (8011bec <tcp_process+0x590>)
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	f003 0310 	and.w	r3, r3, #16
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d060      	beq.n	8011c66 <tcp_process+0x60a>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ba8:	4b11      	ldr	r3, [pc, #68]	; (8011bf0 <tcp_process+0x594>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d15a      	bne.n	8011c66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d156      	bne.n	8011c66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f043 0302 	orr.w	r3, r3, #2
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7fe fdbc 	bl	8010744 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011bcc:	4b13      	ldr	r3, [pc, #76]	; (8011c1c <tcp_process+0x5c0>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	d105      	bne.n	8011be2 <tcp_process+0x586>
 8011bd6:	4b11      	ldr	r3, [pc, #68]	; (8011c1c <tcp_process+0x5c0>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	4a0f      	ldr	r2, [pc, #60]	; (8011c1c <tcp_process+0x5c0>)
 8011bde:	6013      	str	r3, [r2, #0]
 8011be0:	e02e      	b.n	8011c40 <tcp_process+0x5e4>
 8011be2:	4b0e      	ldr	r3, [pc, #56]	; (8011c1c <tcp_process+0x5c0>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	617b      	str	r3, [r7, #20]
 8011be8:	e027      	b.n	8011c3a <tcp_process+0x5de>
 8011bea:	bf00      	nop
 8011bec:	20011bf8 	.word	0x20011bf8
 8011bf0:	20011bf0 	.word	0x20011bf0
 8011bf4:	20011bf6 	.word	0x20011bf6
 8011bf8:	20011bec 	.word	0x20011bec
 8011bfc:	20011bdc 	.word	0x20011bdc
 8011c00:	20009b38 	.word	0x20009b38
 8011c04:	20009b3c 	.word	0x20009b3c
 8011c08:	0801ccd4 	.word	0x0801ccd4
 8011c0c:	0801cf74 	.word	0x0801cf74
 8011c10:	0801cd20 	.word	0x0801cd20
 8011c14:	20011bf4 	.word	0x20011bf4
 8011c18:	20011bf9 	.word	0x20011bf9
 8011c1c:	20011bc0 	.word	0x20011bc0
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d104      	bne.n	8011c34 <tcp_process+0x5d8>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	68da      	ldr	r2, [r3, #12]
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	60da      	str	r2, [r3, #12]
 8011c32:	e005      	b.n	8011c40 <tcp_process+0x5e4>
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	617b      	str	r3, [r7, #20]
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1ef      	bne.n	8011c20 <tcp_process+0x5c4>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	4b77      	ldr	r3, [pc, #476]	; (8011e24 <tcp_process+0x7c8>)
 8011c48:	2201      	movs	r2, #1
 8011c4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	220a      	movs	r2, #10
 8011c50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011c52:	4b75      	ldr	r3, [pc, #468]	; (8011e28 <tcp_process+0x7cc>)
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	60da      	str	r2, [r3, #12]
 8011c5a:	4a73      	ldr	r2, [pc, #460]	; (8011e28 <tcp_process+0x7cc>)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	f003 f974 	bl	8014f4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011c64:	e0d2      	b.n	8011e0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	8b5b      	ldrh	r3, [r3, #26]
 8011c6a:	f043 0302 	orr.w	r3, r3, #2
 8011c6e:	b29a      	uxth	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2208      	movs	r2, #8
 8011c78:	751a      	strb	r2, [r3, #20]
      break;
 8011c7a:	e0c7      	b.n	8011e0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c7c:	4b6b      	ldr	r3, [pc, #428]	; (8011e2c <tcp_process+0x7d0>)
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	f003 0310 	and.w	r3, r3, #16
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f000 80c1 	beq.w	8011e0c <tcp_process+0x7b0>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c8e:	4b68      	ldr	r3, [pc, #416]	; (8011e30 <tcp_process+0x7d4>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	f040 80ba 	bne.w	8011e0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f040 80b5 	bne.w	8011e0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2206      	movs	r2, #6
 8011ca6:	751a      	strb	r2, [r3, #20]
      break;
 8011ca8:	e0b0      	b.n	8011e0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f9ca 	bl	8012044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011cb0:	4b60      	ldr	r3, [pc, #384]	; (8011e34 <tcp_process+0x7d8>)
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	f003 0320 	and.w	r3, r3, #32
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f000 80a9 	beq.w	8011e10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8b5b      	ldrh	r3, [r3, #26]
 8011cc2:	f043 0302 	orr.w	r3, r3, #2
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7fe fd39 	bl	8010744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011cd2:	4b59      	ldr	r3, [pc, #356]	; (8011e38 <tcp_process+0x7dc>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d105      	bne.n	8011ce8 <tcp_process+0x68c>
 8011cdc:	4b56      	ldr	r3, [pc, #344]	; (8011e38 <tcp_process+0x7dc>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	4a55      	ldr	r2, [pc, #340]	; (8011e38 <tcp_process+0x7dc>)
 8011ce4:	6013      	str	r3, [r2, #0]
 8011ce6:	e013      	b.n	8011d10 <tcp_process+0x6b4>
 8011ce8:	4b53      	ldr	r3, [pc, #332]	; (8011e38 <tcp_process+0x7dc>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	613b      	str	r3, [r7, #16]
 8011cee:	e00c      	b.n	8011d0a <tcp_process+0x6ae>
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d104      	bne.n	8011d04 <tcp_process+0x6a8>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	68da      	ldr	r2, [r3, #12]
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	60da      	str	r2, [r3, #12]
 8011d02:	e005      	b.n	8011d10 <tcp_process+0x6b4>
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	613b      	str	r3, [r7, #16]
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d1ef      	bne.n	8011cf0 <tcp_process+0x694>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	60da      	str	r2, [r3, #12]
 8011d16:	4b43      	ldr	r3, [pc, #268]	; (8011e24 <tcp_process+0x7c8>)
 8011d18:	2201      	movs	r2, #1
 8011d1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	220a      	movs	r2, #10
 8011d20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d22:	4b41      	ldr	r3, [pc, #260]	; (8011e28 <tcp_process+0x7cc>)
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	60da      	str	r2, [r3, #12]
 8011d2a:	4a3f      	ldr	r2, [pc, #252]	; (8011e28 <tcp_process+0x7cc>)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6013      	str	r3, [r2, #0]
 8011d30:	f003 f90c 	bl	8014f4c <tcp_timer_needed>
      }
      break;
 8011d34:	e06c      	b.n	8011e10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f984 	bl	8012044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d3c:	4b3b      	ldr	r3, [pc, #236]	; (8011e2c <tcp_process+0x7d0>)
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	f003 0310 	and.w	r3, r3, #16
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d065      	beq.n	8011e14 <tcp_process+0x7b8>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d4c:	4b38      	ldr	r3, [pc, #224]	; (8011e30 <tcp_process+0x7d4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d15f      	bne.n	8011e14 <tcp_process+0x7b8>
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d15b      	bne.n	8011e14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7fe fcf1 	bl	8010744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d62:	4b35      	ldr	r3, [pc, #212]	; (8011e38 <tcp_process+0x7dc>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d105      	bne.n	8011d78 <tcp_process+0x71c>
 8011d6c:	4b32      	ldr	r3, [pc, #200]	; (8011e38 <tcp_process+0x7dc>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	4a31      	ldr	r2, [pc, #196]	; (8011e38 <tcp_process+0x7dc>)
 8011d74:	6013      	str	r3, [r2, #0]
 8011d76:	e013      	b.n	8011da0 <tcp_process+0x744>
 8011d78:	4b2f      	ldr	r3, [pc, #188]	; (8011e38 <tcp_process+0x7dc>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	60fb      	str	r3, [r7, #12]
 8011d7e:	e00c      	b.n	8011d9a <tcp_process+0x73e>
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	68db      	ldr	r3, [r3, #12]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d104      	bne.n	8011d94 <tcp_process+0x738>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	68da      	ldr	r2, [r3, #12]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	60da      	str	r2, [r3, #12]
 8011d92:	e005      	b.n	8011da0 <tcp_process+0x744>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	60fb      	str	r3, [r7, #12]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1ef      	bne.n	8011d80 <tcp_process+0x724>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2200      	movs	r2, #0
 8011da4:	60da      	str	r2, [r3, #12]
 8011da6:	4b1f      	ldr	r3, [pc, #124]	; (8011e24 <tcp_process+0x7c8>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	220a      	movs	r2, #10
 8011db0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011db2:	4b1d      	ldr	r3, [pc, #116]	; (8011e28 <tcp_process+0x7cc>)
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	60da      	str	r2, [r3, #12]
 8011dba:	4a1b      	ldr	r2, [pc, #108]	; (8011e28 <tcp_process+0x7cc>)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	f003 f8c4 	bl	8014f4c <tcp_timer_needed>
      }
      break;
 8011dc4:	e026      	b.n	8011e14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f000 f93c 	bl	8012044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011dcc:	4b17      	ldr	r3, [pc, #92]	; (8011e2c <tcp_process+0x7d0>)
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f003 0310 	and.w	r3, r3, #16
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d01f      	beq.n	8011e18 <tcp_process+0x7bc>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ddc:	4b14      	ldr	r3, [pc, #80]	; (8011e30 <tcp_process+0x7d4>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d119      	bne.n	8011e18 <tcp_process+0x7bc>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d115      	bne.n	8011e18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011dec:	4b11      	ldr	r3, [pc, #68]	; (8011e34 <tcp_process+0x7d8>)
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	f043 0310 	orr.w	r3, r3, #16
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	4b0f      	ldr	r3, [pc, #60]	; (8011e34 <tcp_process+0x7d8>)
 8011df8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011dfa:	e00d      	b.n	8011e18 <tcp_process+0x7bc>
    default:
      break;
 8011dfc:	bf00      	nop
 8011dfe:	e00c      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e00:	bf00      	nop
 8011e02:	e00a      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e04:	bf00      	nop
 8011e06:	e008      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e08:	bf00      	nop
 8011e0a:	e006      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e0c:	bf00      	nop
 8011e0e:	e004      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e10:	bf00      	nop
 8011e12:	e002      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e14:	bf00      	nop
 8011e16:	e000      	b.n	8011e1a <tcp_process+0x7be>
      break;
 8011e18:	bf00      	nop
  }
  return ERR_OK;
 8011e1a:	2300      	movs	r3, #0
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3724      	adds	r7, #36	; 0x24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd90      	pop	{r4, r7, pc}
 8011e24:	20011bc8 	.word	0x20011bc8
 8011e28:	20011bc4 	.word	0x20011bc4
 8011e2c:	20011bf8 	.word	0x20011bf8
 8011e30:	20011bf0 	.word	0x20011bf0
 8011e34:	20011bf9 	.word	0x20011bf9
 8011e38:	20011bc0 	.word	0x20011bc0

08011e3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011e3c:	b590      	push	{r4, r7, lr}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d106      	bne.n	8011e5a <tcp_oos_insert_segment+0x1e>
 8011e4c:	4b3b      	ldr	r3, [pc, #236]	; (8011f3c <tcp_oos_insert_segment+0x100>)
 8011e4e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011e52:	493b      	ldr	r1, [pc, #236]	; (8011f40 <tcp_oos_insert_segment+0x104>)
 8011e54:	483b      	ldr	r0, [pc, #236]	; (8011f44 <tcp_oos_insert_segment+0x108>)
 8011e56:	f006 f85b 	bl	8017f10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	899b      	ldrh	r3, [r3, #12]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fa ffdc 	bl	800ce20 <lwip_htons>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	f003 0301 	and.w	r3, r3, #1
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d028      	beq.n	8011ec6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011e74:	6838      	ldr	r0, [r7, #0]
 8011e76:	f7fe f995 	bl	80101a4 <tcp_segs_free>
    next = NULL;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	603b      	str	r3, [r7, #0]
 8011e7e:	e056      	b.n	8011f2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	899b      	ldrh	r3, [r3, #12]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fa ffc9 	bl	800ce20 <lwip_htons>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	f003 0301 	and.w	r3, r3, #1
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00d      	beq.n	8011eb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	b29c      	uxth	r4, r3
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	f7fa ffbc 	bl	800ce20 <lwip_htons>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	461a      	mov	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	4322      	orrs	r2, r4
 8011eb2:	b292      	uxth	r2, r2
 8011eb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f7fe f984 	bl	80101ce <tcp_seg_free>
    while (next &&
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00e      	beq.n	8011eea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	891b      	ldrh	r3, [r3, #8]
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4b1d      	ldr	r3, [pc, #116]	; (8011f48 <tcp_oos_insert_segment+0x10c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	441a      	add	r2, r3
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	6839      	ldr	r1, [r7, #0]
 8011ee0:	8909      	ldrh	r1, [r1, #8]
 8011ee2:	440b      	add	r3, r1
 8011ee4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	daca      	bge.n	8011e80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d01e      	beq.n	8011f2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	891b      	ldrh	r3, [r3, #8]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	4b14      	ldr	r3, [pc, #80]	; (8011f48 <tcp_oos_insert_segment+0x10c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	441a      	add	r2, r3
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	dd12      	ble.n	8011f2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	4b0d      	ldr	r3, [pc, #52]	; (8011f48 <tcp_oos_insert_segment+0x10c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	1ad3      	subs	r3, r2, r3
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	685a      	ldr	r2, [r3, #4]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	891b      	ldrh	r3, [r3, #8]
 8011f26:	4619      	mov	r1, r3
 8011f28:	4610      	mov	r0, r2
 8011f2a:	f7fc faf9 	bl	800e520 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	683a      	ldr	r2, [r7, #0]
 8011f32:	601a      	str	r2, [r3, #0]
}
 8011f34:	bf00      	nop
 8011f36:	3714      	adds	r7, #20
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}
 8011f3c:	0801ccd4 	.word	0x0801ccd4
 8011f40:	0801cf94 	.word	0x0801cf94
 8011f44:	0801cd20 	.word	0x0801cd20
 8011f48:	20011bec 	.word	0x20011bec

08011f4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011f4c:	b5b0      	push	{r4, r5, r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
 8011f58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011f5a:	e03e      	b.n	8011fda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fc fcec 	bl	800e948 <pbuf_clen>
 8011f70:	4603      	mov	r3, r0
 8011f72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f7a:	8a7a      	ldrh	r2, [r7, #18]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d906      	bls.n	8011f8e <tcp_free_acked_segments+0x42>
 8011f80:	4b2a      	ldr	r3, [pc, #168]	; (801202c <tcp_free_acked_segments+0xe0>)
 8011f82:	f240 4257 	movw	r2, #1111	; 0x457
 8011f86:	492a      	ldr	r1, [pc, #168]	; (8012030 <tcp_free_acked_segments+0xe4>)
 8011f88:	482a      	ldr	r0, [pc, #168]	; (8012034 <tcp_free_acked_segments+0xe8>)
 8011f8a:	f005 ffc1 	bl	8017f10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011f94:	8a7b      	ldrh	r3, [r7, #18]
 8011f96:	1ad3      	subs	r3, r2, r3
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	891a      	ldrh	r2, [r3, #8]
 8011fa4:	4b24      	ldr	r3, [pc, #144]	; (8012038 <tcp_free_acked_segments+0xec>)
 8011fa6:	881b      	ldrh	r3, [r3, #0]
 8011fa8:	4413      	add	r3, r2
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	4b22      	ldr	r3, [pc, #136]	; (8012038 <tcp_free_acked_segments+0xec>)
 8011fae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011fb0:	6978      	ldr	r0, [r7, #20]
 8011fb2:	f7fe f90c 	bl	80101ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d00c      	beq.n	8011fda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d109      	bne.n	8011fda <tcp_free_acked_segments+0x8e>
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d106      	bne.n	8011fda <tcp_free_acked_segments+0x8e>
 8011fcc:	4b17      	ldr	r3, [pc, #92]	; (801202c <tcp_free_acked_segments+0xe0>)
 8011fce:	f240 4261 	movw	r2, #1121	; 0x461
 8011fd2:	491a      	ldr	r1, [pc, #104]	; (801203c <tcp_free_acked_segments+0xf0>)
 8011fd4:	4817      	ldr	r0, [pc, #92]	; (8012034 <tcp_free_acked_segments+0xe8>)
 8011fd6:	f005 ff9b 	bl	8017f10 <iprintf>
  while (seg_list != NULL &&
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d020      	beq.n	8012022 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fa ff2f 	bl	800ce4a <lwip_htonl>
 8011fec:	4604      	mov	r4, r0
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	891b      	ldrh	r3, [r3, #8]
 8011ff2:	461d      	mov	r5, r3
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	899b      	ldrh	r3, [r3, #12]
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fa ff0f 	bl	800ce20 <lwip_htons>
 8012002:	4603      	mov	r3, r0
 8012004:	b2db      	uxtb	r3, r3
 8012006:	f003 0303 	and.w	r3, r3, #3
 801200a:	2b00      	cmp	r3, #0
 801200c:	d001      	beq.n	8012012 <tcp_free_acked_segments+0xc6>
 801200e:	2301      	movs	r3, #1
 8012010:	e000      	b.n	8012014 <tcp_free_acked_segments+0xc8>
 8012012:	2300      	movs	r3, #0
 8012014:	442b      	add	r3, r5
 8012016:	18e2      	adds	r2, r4, r3
 8012018:	4b09      	ldr	r3, [pc, #36]	; (8012040 <tcp_free_acked_segments+0xf4>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801201e:	2b00      	cmp	r3, #0
 8012020:	dd9c      	ble.n	8011f5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012022:	68bb      	ldr	r3, [r7, #8]
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bdb0      	pop	{r4, r5, r7, pc}
 801202c:	0801ccd4 	.word	0x0801ccd4
 8012030:	0801cfbc 	.word	0x0801cfbc
 8012034:	0801cd20 	.word	0x0801cd20
 8012038:	20011bf4 	.word	0x20011bf4
 801203c:	0801cfe4 	.word	0x0801cfe4
 8012040:	20011bf0 	.word	0x20011bf0

08012044 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012044:	b5b0      	push	{r4, r5, r7, lr}
 8012046:	b094      	sub	sp, #80	; 0x50
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801204c:	2300      	movs	r3, #0
 801204e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d106      	bne.n	8012064 <tcp_receive+0x20>
 8012056:	4b91      	ldr	r3, [pc, #580]	; (801229c <tcp_receive+0x258>)
 8012058:	f240 427b 	movw	r2, #1147	; 0x47b
 801205c:	4990      	ldr	r1, [pc, #576]	; (80122a0 <tcp_receive+0x25c>)
 801205e:	4891      	ldr	r0, [pc, #580]	; (80122a4 <tcp_receive+0x260>)
 8012060:	f005 ff56 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	7d1b      	ldrb	r3, [r3, #20]
 8012068:	2b03      	cmp	r3, #3
 801206a:	d806      	bhi.n	801207a <tcp_receive+0x36>
 801206c:	4b8b      	ldr	r3, [pc, #556]	; (801229c <tcp_receive+0x258>)
 801206e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012072:	498d      	ldr	r1, [pc, #564]	; (80122a8 <tcp_receive+0x264>)
 8012074:	488b      	ldr	r0, [pc, #556]	; (80122a4 <tcp_receive+0x260>)
 8012076:	f005 ff4b 	bl	8017f10 <iprintf>

  if (flags & TCP_ACK) {
 801207a:	4b8c      	ldr	r3, [pc, #560]	; (80122ac <tcp_receive+0x268>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	f003 0310 	and.w	r3, r3, #16
 8012082:	2b00      	cmp	r3, #0
 8012084:	f000 8264 	beq.w	8012550 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801208e:	461a      	mov	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012094:	4413      	add	r3, r2
 8012096:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801209c:	4b84      	ldr	r3, [pc, #528]	; (80122b0 <tcp_receive+0x26c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	db1b      	blt.n	80120de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120aa:	4b81      	ldr	r3, [pc, #516]	; (80122b0 <tcp_receive+0x26c>)
 80120ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d106      	bne.n	80120c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120b6:	4b7f      	ldr	r3, [pc, #508]	; (80122b4 <tcp_receive+0x270>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	2b00      	cmp	r3, #0
 80120be:	db0e      	blt.n	80120de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120c4:	4b7b      	ldr	r3, [pc, #492]	; (80122b4 <tcp_receive+0x270>)
 80120c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d125      	bne.n	8012118 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120cc:	4b7a      	ldr	r3, [pc, #488]	; (80122b8 <tcp_receive+0x274>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	89db      	ldrh	r3, [r3, #14]
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120da:	429a      	cmp	r2, r3
 80120dc:	d91c      	bls.n	8012118 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80120de:	4b76      	ldr	r3, [pc, #472]	; (80122b8 <tcp_receive+0x274>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	89db      	ldrh	r3, [r3, #14]
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d205      	bcs.n	8012108 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012108:	4b69      	ldr	r3, [pc, #420]	; (80122b0 <tcp_receive+0x26c>)
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012110:	4b68      	ldr	r3, [pc, #416]	; (80122b4 <tcp_receive+0x270>)
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012118:	4b66      	ldr	r3, [pc, #408]	; (80122b4 <tcp_receive+0x270>)
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	dc58      	bgt.n	80121d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012126:	4b65      	ldr	r3, [pc, #404]	; (80122bc <tcp_receive+0x278>)
 8012128:	881b      	ldrh	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d14b      	bne.n	80121c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012138:	4413      	add	r3, r2
 801213a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213c:	429a      	cmp	r2, r3
 801213e:	d142      	bne.n	80121c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012146:	2b00      	cmp	r3, #0
 8012148:	db3d      	blt.n	80121c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801214e:	4b59      	ldr	r3, [pc, #356]	; (80122b4 <tcp_receive+0x270>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	429a      	cmp	r2, r3
 8012154:	d137      	bne.n	80121c6 <tcp_receive+0x182>
              found_dupack = 1;
 8012156:	2301      	movs	r3, #1
 8012158:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012160:	2bff      	cmp	r3, #255	; 0xff
 8012162:	d007      	beq.n	8012174 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801216a:	3301      	adds	r3, #1
 801216c:	b2da      	uxtb	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801217a:	2b03      	cmp	r3, #3
 801217c:	d91b      	bls.n	80121b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012188:	4413      	add	r3, r2
 801218a:	b29a      	uxth	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012192:	429a      	cmp	r2, r3
 8012194:	d30a      	bcc.n	80121ac <tcp_receive+0x168>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121a0:	4413      	add	r3, r2
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80121aa:	e004      	b.n	80121b6 <tcp_receive+0x172>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80121bc:	2b02      	cmp	r3, #2
 80121be:	d902      	bls.n	80121c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f002 fb55 	bl	8014870 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80121c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	f040 8161 	bne.w	8012490 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2200      	movs	r2, #0
 80121d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121d6:	e15b      	b.n	8012490 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121d8:	4b36      	ldr	r3, [pc, #216]	; (80122b4 <tcp_receive+0x270>)
 80121da:	681a      	ldr	r2, [r3, #0]
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121e0:	1ad3      	subs	r3, r2, r3
 80121e2:	3b01      	subs	r3, #1
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f2c0 814e 	blt.w	8012486 <tcp_receive+0x442>
 80121ea:	4b32      	ldr	r3, [pc, #200]	; (80122b4 <tcp_receive+0x270>)
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f300 8146 	bgt.w	8012486 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8b5b      	ldrh	r3, [r3, #26]
 80121fe:	f003 0304 	and.w	r3, r3, #4
 8012202:	2b00      	cmp	r3, #0
 8012204:	d010      	beq.n	8012228 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8b5b      	ldrh	r3, [r3, #26]
 801220a:	f023 0304 	bic.w	r3, r3, #4
 801220e:	b29a      	uxth	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012236:	10db      	asrs	r3, r3, #3
 8012238:	b21b      	sxth	r3, r3
 801223a:	b29a      	uxth	r2, r3
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012242:	b29b      	uxth	r3, r3
 8012244:	4413      	add	r3, r2
 8012246:	b29b      	uxth	r3, r3
 8012248:	b21a      	sxth	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012250:	4b18      	ldr	r3, [pc, #96]	; (80122b4 <tcp_receive+0x270>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801225a:	b29b      	uxth	r3, r3
 801225c:	1ad3      	subs	r3, r2, r3
 801225e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012268:	4b12      	ldr	r3, [pc, #72]	; (80122b4 <tcp_receive+0x270>)
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	7d1b      	ldrb	r3, [r3, #20]
 8012274:	2b03      	cmp	r3, #3
 8012276:	f240 8097 	bls.w	80123a8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012286:	429a      	cmp	r2, r3
 8012288:	d245      	bcs.n	8012316 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	8b5b      	ldrh	r3, [r3, #26]
 801228e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012292:	2b00      	cmp	r3, #0
 8012294:	d014      	beq.n	80122c0 <tcp_receive+0x27c>
 8012296:	2301      	movs	r3, #1
 8012298:	e013      	b.n	80122c2 <tcp_receive+0x27e>
 801229a:	bf00      	nop
 801229c:	0801ccd4 	.word	0x0801ccd4
 80122a0:	0801d004 	.word	0x0801d004
 80122a4:	0801cd20 	.word	0x0801cd20
 80122a8:	0801d020 	.word	0x0801d020
 80122ac:	20011bf8 	.word	0x20011bf8
 80122b0:	20011bec 	.word	0x20011bec
 80122b4:	20011bf0 	.word	0x20011bf0
 80122b8:	20011bdc 	.word	0x20011bdc
 80122bc:	20011bf6 	.word	0x20011bf6
 80122c0:	2302      	movs	r3, #2
 80122c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80122c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122d0:	fb12 f303 	smulbb	r3, r2, r3
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80122d8:	4293      	cmp	r3, r2
 80122da:	bf28      	it	cs
 80122dc:	4613      	movcs	r3, r2
 80122de:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122e8:	4413      	add	r3, r2
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d309      	bcc.n	801230a <tcp_receive+0x2c6>
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122fe:	4413      	add	r3, r2
 8012300:	b29a      	uxth	r2, r3
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012308:	e04e      	b.n	80123a8 <tcp_receive+0x364>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012310:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012314:	e048      	b.n	80123a8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801231c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801231e:	4413      	add	r3, r2
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012328:	429a      	cmp	r2, r3
 801232a:	d309      	bcc.n	8012340 <tcp_receive+0x2fc>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012334:	4413      	add	r3, r2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801233e:	e004      	b.n	801234a <tcp_receive+0x306>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012356:	429a      	cmp	r2, r3
 8012358:	d326      	bcc.n	80123a8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	b29a      	uxth	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801237a:	4413      	add	r3, r2
 801237c:	b29a      	uxth	r2, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012384:	429a      	cmp	r2, r3
 8012386:	d30a      	bcc.n	801239e <tcp_receive+0x35a>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012392:	4413      	add	r3, r2
 8012394:	b29a      	uxth	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801239c:	e004      	b.n	80123a8 <tcp_receive+0x364>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b0:	4a98      	ldr	r2, [pc, #608]	; (8012614 <tcp_receive+0x5d0>)
 80123b2:	6878      	ldr	r0, [r7, #4]
 80123b4:	f7ff fdca 	bl	8011f4c <tcp_free_acked_segments>
 80123b8:	4602      	mov	r2, r0
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c6:	4a94      	ldr	r2, [pc, #592]	; (8012618 <tcp_receive+0x5d4>)
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff fdbf 	bl	8011f4c <tcp_free_acked_segments>
 80123ce:	4602      	mov	r2, r0
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d104      	bne.n	80123e6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123e2:	861a      	strh	r2, [r3, #48]	; 0x30
 80123e4:	e002      	b.n	80123ec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2200      	movs	r2, #0
 80123ea:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d103      	bne.n	8012402 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012408:	4b84      	ldr	r3, [pc, #528]	; (801261c <tcp_receive+0x5d8>)
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	4413      	add	r3, r2
 801240e:	b29a      	uxth	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	8b5b      	ldrh	r3, [r3, #26]
 801241a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801241e:	2b00      	cmp	r3, #0
 8012420:	d035      	beq.n	801248e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012426:	2b00      	cmp	r3, #0
 8012428:	d118      	bne.n	801245c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00c      	beq.n	801244c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	4618      	mov	r0, r3
 8012440:	f7fa fd03 	bl	800ce4a <lwip_htonl>
 8012444:	4603      	mov	r3, r0
 8012446:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012448:	2b00      	cmp	r3, #0
 801244a:	dc20      	bgt.n	801248e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	8b5b      	ldrh	r3, [r3, #26]
 8012450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012454:	b29a      	uxth	r2, r3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801245a:	e018      	b.n	801248e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	f7fa fcee 	bl	800ce4a <lwip_htonl>
 801246e:	4603      	mov	r3, r0
 8012470:	1ae3      	subs	r3, r4, r3
 8012472:	2b00      	cmp	r3, #0
 8012474:	dc0b      	bgt.n	801248e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8b5b      	ldrh	r3, [r3, #26]
 801247a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801247e:	b29a      	uxth	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012484:	e003      	b.n	801248e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f002 fbf0 	bl	8014c6c <tcp_send_empty_ack>
 801248c:	e000      	b.n	8012490 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801248e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012494:	2b00      	cmp	r3, #0
 8012496:	d05b      	beq.n	8012550 <tcp_receive+0x50c>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801249c:	4b60      	ldr	r3, [pc, #384]	; (8012620 <tcp_receive+0x5dc>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	da54      	bge.n	8012550 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80124a6:	4b5f      	ldr	r3, [pc, #380]	; (8012624 <tcp_receive+0x5e0>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	1ad3      	subs	r3, r2, r3
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80124ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124c4:	10db      	asrs	r3, r3, #3
 80124c6:	b21b      	sxth	r3, r3
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	1ad3      	subs	r3, r2, r3
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124d8:	b29a      	uxth	r2, r3
 80124da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124de:	4413      	add	r3, r2
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	b21a      	sxth	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80124e8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	da05      	bge.n	80124fc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80124f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124f4:	425b      	negs	r3, r3
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80124fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012506:	109b      	asrs	r3, r3, #2
 8012508:	b21b      	sxth	r3, r3
 801250a:	b29b      	uxth	r3, r3
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	b29b      	uxth	r3, r3
 8012510:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801251a:	b29a      	uxth	r2, r3
 801251c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012520:	4413      	add	r3, r2
 8012522:	b29b      	uxth	r3, r3
 8012524:	b21a      	sxth	r2, r3
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012530:	10db      	asrs	r3, r3, #3
 8012532:	b21b      	sxth	r3, r3
 8012534:	b29a      	uxth	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801253c:	b29b      	uxth	r3, r3
 801253e:	4413      	add	r3, r2
 8012540:	b29b      	uxth	r3, r3
 8012542:	b21a      	sxth	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2200      	movs	r2, #0
 801254e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012550:	4b35      	ldr	r3, [pc, #212]	; (8012628 <tcp_receive+0x5e4>)
 8012552:	881b      	ldrh	r3, [r3, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	f000 84e2 	beq.w	8012f1e <tcp_receive+0xeda>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	7d1b      	ldrb	r3, [r3, #20]
 801255e:	2b06      	cmp	r3, #6
 8012560:	f200 84dd 	bhi.w	8012f1e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012568:	4b30      	ldr	r3, [pc, #192]	; (801262c <tcp_receive+0x5e8>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	3b01      	subs	r3, #1
 8012570:	2b00      	cmp	r3, #0
 8012572:	f2c0 808f 	blt.w	8012694 <tcp_receive+0x650>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801257a:	4b2b      	ldr	r3, [pc, #172]	; (8012628 <tcp_receive+0x5e4>)
 801257c:	881b      	ldrh	r3, [r3, #0]
 801257e:	4619      	mov	r1, r3
 8012580:	4b2a      	ldr	r3, [pc, #168]	; (801262c <tcp_receive+0x5e8>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	440b      	add	r3, r1
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	3301      	adds	r3, #1
 801258a:	2b00      	cmp	r3, #0
 801258c:	f300 8082 	bgt.w	8012694 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012590:	4b27      	ldr	r3, [pc, #156]	; (8012630 <tcp_receive+0x5ec>)
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801259a:	4b24      	ldr	r3, [pc, #144]	; (801262c <tcp_receive+0x5e8>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80125a2:	4b23      	ldr	r3, [pc, #140]	; (8012630 <tcp_receive+0x5ec>)
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <tcp_receive+0x574>
 80125aa:	4b22      	ldr	r3, [pc, #136]	; (8012634 <tcp_receive+0x5f0>)
 80125ac:	f240 5294 	movw	r2, #1428	; 0x594
 80125b0:	4921      	ldr	r1, [pc, #132]	; (8012638 <tcp_receive+0x5f4>)
 80125b2:	4822      	ldr	r0, [pc, #136]	; (801263c <tcp_receive+0x5f8>)
 80125b4:	f005 fcac 	bl	8017f10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80125be:	4293      	cmp	r3, r2
 80125c0:	d906      	bls.n	80125d0 <tcp_receive+0x58c>
 80125c2:	4b1c      	ldr	r3, [pc, #112]	; (8012634 <tcp_receive+0x5f0>)
 80125c4:	f240 5295 	movw	r2, #1429	; 0x595
 80125c8:	491d      	ldr	r1, [pc, #116]	; (8012640 <tcp_receive+0x5fc>)
 80125ca:	481c      	ldr	r0, [pc, #112]	; (801263c <tcp_receive+0x5f8>)
 80125cc:	f005 fca0 	bl	8017f10 <iprintf>
      off = (u16_t)off32;
 80125d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80125d6:	4b16      	ldr	r3, [pc, #88]	; (8012630 <tcp_receive+0x5ec>)
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	891b      	ldrh	r3, [r3, #8]
 80125dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d906      	bls.n	80125f2 <tcp_receive+0x5ae>
 80125e4:	4b13      	ldr	r3, [pc, #76]	; (8012634 <tcp_receive+0x5f0>)
 80125e6:	f240 5297 	movw	r2, #1431	; 0x597
 80125ea:	4916      	ldr	r1, [pc, #88]	; (8012644 <tcp_receive+0x600>)
 80125ec:	4813      	ldr	r0, [pc, #76]	; (801263c <tcp_receive+0x5f8>)
 80125ee:	f005 fc8f 	bl	8017f10 <iprintf>
      inseg.len -= off;
 80125f2:	4b0f      	ldr	r3, [pc, #60]	; (8012630 <tcp_receive+0x5ec>)
 80125f4:	891a      	ldrh	r2, [r3, #8]
 80125f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	4b0c      	ldr	r3, [pc, #48]	; (8012630 <tcp_receive+0x5ec>)
 8012600:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012602:	4b0b      	ldr	r3, [pc, #44]	; (8012630 <tcp_receive+0x5ec>)
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	891a      	ldrh	r2, [r3, #8]
 8012608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012610:	e02a      	b.n	8012668 <tcp_receive+0x624>
 8012612:	bf00      	nop
 8012614:	0801d03c 	.word	0x0801d03c
 8012618:	0801d044 	.word	0x0801d044
 801261c:	20011bf4 	.word	0x20011bf4
 8012620:	20011bf0 	.word	0x20011bf0
 8012624:	20011bb4 	.word	0x20011bb4
 8012628:	20011bf6 	.word	0x20011bf6
 801262c:	20011bec 	.word	0x20011bec
 8012630:	20011bcc 	.word	0x20011bcc
 8012634:	0801ccd4 	.word	0x0801ccd4
 8012638:	0801d04c 	.word	0x0801d04c
 801263c:	0801cd20 	.word	0x0801cd20
 8012640:	0801d05c 	.word	0x0801d05c
 8012644:	0801d06c 	.word	0x0801d06c
        off -= p->len;
 8012648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801264a:	895b      	ldrh	r3, [r3, #10]
 801264c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012658:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801265a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801265e:	2200      	movs	r2, #0
 8012660:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801266a:	895b      	ldrh	r3, [r3, #10]
 801266c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012670:	429a      	cmp	r2, r3
 8012672:	d8e9      	bhi.n	8012648 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012678:	4619      	mov	r1, r3
 801267a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801267c:	f7fc f850 	bl	800e720 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012684:	4a91      	ldr	r2, [pc, #580]	; (80128cc <tcp_receive+0x888>)
 8012686:	6013      	str	r3, [r2, #0]
 8012688:	4b91      	ldr	r3, [pc, #580]	; (80128d0 <tcp_receive+0x88c>)
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	4a8f      	ldr	r2, [pc, #572]	; (80128cc <tcp_receive+0x888>)
 801268e:	6812      	ldr	r2, [r2, #0]
 8012690:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012692:	e00d      	b.n	80126b0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012694:	4b8d      	ldr	r3, [pc, #564]	; (80128cc <tcp_receive+0x888>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	2b00      	cmp	r3, #0
 80126a0:	da06      	bge.n	80126b0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	8b5b      	ldrh	r3, [r3, #26]
 80126a6:	f043 0302 	orr.w	r3, r3, #2
 80126aa:	b29a      	uxth	r2, r3
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126b0:	4b86      	ldr	r3, [pc, #536]	; (80128cc <tcp_receive+0x888>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f2c0 842a 	blt.w	8012f14 <tcp_receive+0xed0>
 80126c0:	4b82      	ldr	r3, [pc, #520]	; (80128cc <tcp_receive+0x888>)
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c8:	6879      	ldr	r1, [r7, #4]
 80126ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126cc:	440b      	add	r3, r1
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	3301      	adds	r3, #1
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	f300 841e 	bgt.w	8012f14 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126dc:	4b7b      	ldr	r3, [pc, #492]	; (80128cc <tcp_receive+0x888>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	f040 829a 	bne.w	8012c1a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80126e6:	4b7a      	ldr	r3, [pc, #488]	; (80128d0 <tcp_receive+0x88c>)
 80126e8:	891c      	ldrh	r4, [r3, #8]
 80126ea:	4b79      	ldr	r3, [pc, #484]	; (80128d0 <tcp_receive+0x88c>)
 80126ec:	68db      	ldr	r3, [r3, #12]
 80126ee:	899b      	ldrh	r3, [r3, #12]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fa fb94 	bl	800ce20 <lwip_htons>
 80126f8:	4603      	mov	r3, r0
 80126fa:	b2db      	uxtb	r3, r3
 80126fc:	f003 0303 	and.w	r3, r3, #3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d001      	beq.n	8012708 <tcp_receive+0x6c4>
 8012704:	2301      	movs	r3, #1
 8012706:	e000      	b.n	801270a <tcp_receive+0x6c6>
 8012708:	2300      	movs	r3, #0
 801270a:	4423      	add	r3, r4
 801270c:	b29a      	uxth	r2, r3
 801270e:	4b71      	ldr	r3, [pc, #452]	; (80128d4 <tcp_receive+0x890>)
 8012710:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012716:	4b6f      	ldr	r3, [pc, #444]	; (80128d4 <tcp_receive+0x890>)
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d275      	bcs.n	801280a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801271e:	4b6c      	ldr	r3, [pc, #432]	; (80128d0 <tcp_receive+0x88c>)
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	899b      	ldrh	r3, [r3, #12]
 8012724:	b29b      	uxth	r3, r3
 8012726:	4618      	mov	r0, r3
 8012728:	f7fa fb7a 	bl	800ce20 <lwip_htons>
 801272c:	4603      	mov	r3, r0
 801272e:	b2db      	uxtb	r3, r3
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d01f      	beq.n	8012778 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012738:	4b65      	ldr	r3, [pc, #404]	; (80128d0 <tcp_receive+0x88c>)
 801273a:	68db      	ldr	r3, [r3, #12]
 801273c:	899b      	ldrh	r3, [r3, #12]
 801273e:	b29b      	uxth	r3, r3
 8012740:	b21b      	sxth	r3, r3
 8012742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012746:	b21c      	sxth	r4, r3
 8012748:	4b61      	ldr	r3, [pc, #388]	; (80128d0 <tcp_receive+0x88c>)
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	899b      	ldrh	r3, [r3, #12]
 801274e:	b29b      	uxth	r3, r3
 8012750:	4618      	mov	r0, r3
 8012752:	f7fa fb65 	bl	800ce20 <lwip_htons>
 8012756:	4603      	mov	r3, r0
 8012758:	b2db      	uxtb	r3, r3
 801275a:	b29b      	uxth	r3, r3
 801275c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012760:	b29b      	uxth	r3, r3
 8012762:	4618      	mov	r0, r3
 8012764:	f7fa fb5c 	bl	800ce20 <lwip_htons>
 8012768:	4603      	mov	r3, r0
 801276a:	b21b      	sxth	r3, r3
 801276c:	4323      	orrs	r3, r4
 801276e:	b21a      	sxth	r2, r3
 8012770:	4b57      	ldr	r3, [pc, #348]	; (80128d0 <tcp_receive+0x88c>)
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	b292      	uxth	r2, r2
 8012776:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801277c:	4b54      	ldr	r3, [pc, #336]	; (80128d0 <tcp_receive+0x88c>)
 801277e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012780:	4b53      	ldr	r3, [pc, #332]	; (80128d0 <tcp_receive+0x88c>)
 8012782:	68db      	ldr	r3, [r3, #12]
 8012784:	899b      	ldrh	r3, [r3, #12]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4618      	mov	r0, r3
 801278a:	f7fa fb49 	bl	800ce20 <lwip_htons>
 801278e:	4603      	mov	r3, r0
 8012790:	b2db      	uxtb	r3, r3
 8012792:	f003 0302 	and.w	r3, r3, #2
 8012796:	2b00      	cmp	r3, #0
 8012798:	d005      	beq.n	80127a6 <tcp_receive+0x762>
            inseg.len -= 1;
 801279a:	4b4d      	ldr	r3, [pc, #308]	; (80128d0 <tcp_receive+0x88c>)
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	3b01      	subs	r3, #1
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	4b4b      	ldr	r3, [pc, #300]	; (80128d0 <tcp_receive+0x88c>)
 80127a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80127a6:	4b4a      	ldr	r3, [pc, #296]	; (80128d0 <tcp_receive+0x88c>)
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	4a49      	ldr	r2, [pc, #292]	; (80128d0 <tcp_receive+0x88c>)
 80127ac:	8912      	ldrh	r2, [r2, #8]
 80127ae:	4611      	mov	r1, r2
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7fb feb5 	bl	800e520 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80127b6:	4b46      	ldr	r3, [pc, #280]	; (80128d0 <tcp_receive+0x88c>)
 80127b8:	891c      	ldrh	r4, [r3, #8]
 80127ba:	4b45      	ldr	r3, [pc, #276]	; (80128d0 <tcp_receive+0x88c>)
 80127bc:	68db      	ldr	r3, [r3, #12]
 80127be:	899b      	ldrh	r3, [r3, #12]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fa fb2c 	bl	800ce20 <lwip_htons>
 80127c8:	4603      	mov	r3, r0
 80127ca:	b2db      	uxtb	r3, r3
 80127cc:	f003 0303 	and.w	r3, r3, #3
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d001      	beq.n	80127d8 <tcp_receive+0x794>
 80127d4:	2301      	movs	r3, #1
 80127d6:	e000      	b.n	80127da <tcp_receive+0x796>
 80127d8:	2300      	movs	r3, #0
 80127da:	4423      	add	r3, r4
 80127dc:	b29a      	uxth	r2, r3
 80127de:	4b3d      	ldr	r3, [pc, #244]	; (80128d4 <tcp_receive+0x890>)
 80127e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80127e2:	4b3c      	ldr	r3, [pc, #240]	; (80128d4 <tcp_receive+0x890>)
 80127e4:	881b      	ldrh	r3, [r3, #0]
 80127e6:	461a      	mov	r2, r3
 80127e8:	4b38      	ldr	r3, [pc, #224]	; (80128cc <tcp_receive+0x888>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	441a      	add	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f2:	6879      	ldr	r1, [r7, #4]
 80127f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127f6:	440b      	add	r3, r1
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d006      	beq.n	801280a <tcp_receive+0x7c6>
 80127fc:	4b36      	ldr	r3, [pc, #216]	; (80128d8 <tcp_receive+0x894>)
 80127fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012802:	4936      	ldr	r1, [pc, #216]	; (80128dc <tcp_receive+0x898>)
 8012804:	4836      	ldr	r0, [pc, #216]	; (80128e0 <tcp_receive+0x89c>)
 8012806:	f005 fb83 	bl	8017f10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801280e:	2b00      	cmp	r3, #0
 8012810:	f000 80e7 	beq.w	80129e2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012814:	4b2e      	ldr	r3, [pc, #184]	; (80128d0 <tcp_receive+0x88c>)
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	899b      	ldrh	r3, [r3, #12]
 801281a:	b29b      	uxth	r3, r3
 801281c:	4618      	mov	r0, r3
 801281e:	f7fa faff 	bl	800ce20 <lwip_htons>
 8012822:	4603      	mov	r3, r0
 8012824:	b2db      	uxtb	r3, r3
 8012826:	f003 0301 	and.w	r3, r3, #1
 801282a:	2b00      	cmp	r3, #0
 801282c:	d010      	beq.n	8012850 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801282e:	e00a      	b.n	8012846 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012834:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f7fd fcc4 	bl	80101ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1f0      	bne.n	8012830 <tcp_receive+0x7ec>
 801284e:	e0c8      	b.n	80129e2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012854:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012856:	e052      	b.n	80128fe <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	899b      	ldrh	r3, [r3, #12]
 801285e:	b29b      	uxth	r3, r3
 8012860:	4618      	mov	r0, r3
 8012862:	f7fa fadd 	bl	800ce20 <lwip_htons>
 8012866:	4603      	mov	r3, r0
 8012868:	b2db      	uxtb	r3, r3
 801286a:	f003 0301 	and.w	r3, r3, #1
 801286e:	2b00      	cmp	r3, #0
 8012870:	d03d      	beq.n	80128ee <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012872:	4b17      	ldr	r3, [pc, #92]	; (80128d0 <tcp_receive+0x88c>)
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	899b      	ldrh	r3, [r3, #12]
 8012878:	b29b      	uxth	r3, r3
 801287a:	4618      	mov	r0, r3
 801287c:	f7fa fad0 	bl	800ce20 <lwip_htons>
 8012880:	4603      	mov	r3, r0
 8012882:	b2db      	uxtb	r3, r3
 8012884:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012888:	2b00      	cmp	r3, #0
 801288a:	d130      	bne.n	80128ee <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801288c:	4b10      	ldr	r3, [pc, #64]	; (80128d0 <tcp_receive+0x88c>)
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	899b      	ldrh	r3, [r3, #12]
 8012892:	b29c      	uxth	r4, r3
 8012894:	2001      	movs	r0, #1
 8012896:	f7fa fac3 	bl	800ce20 <lwip_htons>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
 801289e:	4b0c      	ldr	r3, [pc, #48]	; (80128d0 <tcp_receive+0x88c>)
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	4322      	orrs	r2, r4
 80128a4:	b292      	uxth	r2, r2
 80128a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80128a8:	4b09      	ldr	r3, [pc, #36]	; (80128d0 <tcp_receive+0x88c>)
 80128aa:	891c      	ldrh	r4, [r3, #8]
 80128ac:	4b08      	ldr	r3, [pc, #32]	; (80128d0 <tcp_receive+0x88c>)
 80128ae:	68db      	ldr	r3, [r3, #12]
 80128b0:	899b      	ldrh	r3, [r3, #12]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fa fab3 	bl	800ce20 <lwip_htons>
 80128ba:	4603      	mov	r3, r0
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	f003 0303 	and.w	r3, r3, #3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d00e      	beq.n	80128e4 <tcp_receive+0x8a0>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e00d      	b.n	80128e6 <tcp_receive+0x8a2>
 80128ca:	bf00      	nop
 80128cc:	20011bec 	.word	0x20011bec
 80128d0:	20011bcc 	.word	0x20011bcc
 80128d4:	20011bf6 	.word	0x20011bf6
 80128d8:	0801ccd4 	.word	0x0801ccd4
 80128dc:	0801d07c 	.word	0x0801d07c
 80128e0:	0801cd20 	.word	0x0801cd20
 80128e4:	2300      	movs	r3, #0
 80128e6:	4423      	add	r3, r4
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	4b98      	ldr	r3, [pc, #608]	; (8012b4c <tcp_receive+0xb08>)
 80128ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80128ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80128f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80128f8:	6938      	ldr	r0, [r7, #16]
 80128fa:	f7fd fc68 	bl	80101ce <tcp_seg_free>
            while (next &&
 80128fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012900:	2b00      	cmp	r3, #0
 8012902:	d00e      	beq.n	8012922 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012904:	4b91      	ldr	r3, [pc, #580]	; (8012b4c <tcp_receive+0xb08>)
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	461a      	mov	r2, r3
 801290a:	4b91      	ldr	r3, [pc, #580]	; (8012b50 <tcp_receive+0xb0c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	441a      	add	r2, r3
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012918:	8909      	ldrh	r1, [r1, #8]
 801291a:	440b      	add	r3, r1
 801291c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801291e:	2b00      	cmp	r3, #0
 8012920:	da9a      	bge.n	8012858 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012924:	2b00      	cmp	r3, #0
 8012926:	d059      	beq.n	80129dc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012928:	4b88      	ldr	r3, [pc, #544]	; (8012b4c <tcp_receive+0xb08>)
 801292a:	881b      	ldrh	r3, [r3, #0]
 801292c:	461a      	mov	r2, r3
 801292e:	4b88      	ldr	r3, [pc, #544]	; (8012b50 <tcp_receive+0xb0c>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	441a      	add	r2, r3
 8012934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012936:	68db      	ldr	r3, [r3, #12]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801293c:	2b00      	cmp	r3, #0
 801293e:	dd4d      	ble.n	80129dc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	b29a      	uxth	r2, r3
 8012948:	4b81      	ldr	r3, [pc, #516]	; (8012b50 <tcp_receive+0xb0c>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	b29b      	uxth	r3, r3
 801294e:	1ad3      	subs	r3, r2, r3
 8012950:	b29a      	uxth	r2, r3
 8012952:	4b80      	ldr	r3, [pc, #512]	; (8012b54 <tcp_receive+0xb10>)
 8012954:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012956:	4b7f      	ldr	r3, [pc, #508]	; (8012b54 <tcp_receive+0xb10>)
 8012958:	68db      	ldr	r3, [r3, #12]
 801295a:	899b      	ldrh	r3, [r3, #12]
 801295c:	b29b      	uxth	r3, r3
 801295e:	4618      	mov	r0, r3
 8012960:	f7fa fa5e 	bl	800ce20 <lwip_htons>
 8012964:	4603      	mov	r3, r0
 8012966:	b2db      	uxtb	r3, r3
 8012968:	f003 0302 	and.w	r3, r3, #2
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <tcp_receive+0x938>
                inseg.len -= 1;
 8012970:	4b78      	ldr	r3, [pc, #480]	; (8012b54 <tcp_receive+0xb10>)
 8012972:	891b      	ldrh	r3, [r3, #8]
 8012974:	3b01      	subs	r3, #1
 8012976:	b29a      	uxth	r2, r3
 8012978:	4b76      	ldr	r3, [pc, #472]	; (8012b54 <tcp_receive+0xb10>)
 801297a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801297c:	4b75      	ldr	r3, [pc, #468]	; (8012b54 <tcp_receive+0xb10>)
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	4a74      	ldr	r2, [pc, #464]	; (8012b54 <tcp_receive+0xb10>)
 8012982:	8912      	ldrh	r2, [r2, #8]
 8012984:	4611      	mov	r1, r2
 8012986:	4618      	mov	r0, r3
 8012988:	f7fb fdca 	bl	800e520 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801298c:	4b71      	ldr	r3, [pc, #452]	; (8012b54 <tcp_receive+0xb10>)
 801298e:	891c      	ldrh	r4, [r3, #8]
 8012990:	4b70      	ldr	r3, [pc, #448]	; (8012b54 <tcp_receive+0xb10>)
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	899b      	ldrh	r3, [r3, #12]
 8012996:	b29b      	uxth	r3, r3
 8012998:	4618      	mov	r0, r3
 801299a:	f7fa fa41 	bl	800ce20 <lwip_htons>
 801299e:	4603      	mov	r3, r0
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	f003 0303 	and.w	r3, r3, #3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <tcp_receive+0x96a>
 80129aa:	2301      	movs	r3, #1
 80129ac:	e000      	b.n	80129b0 <tcp_receive+0x96c>
 80129ae:	2300      	movs	r3, #0
 80129b0:	4423      	add	r3, r4
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	4b65      	ldr	r3, [pc, #404]	; (8012b4c <tcp_receive+0xb08>)
 80129b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80129b8:	4b64      	ldr	r3, [pc, #400]	; (8012b4c <tcp_receive+0xb08>)
 80129ba:	881b      	ldrh	r3, [r3, #0]
 80129bc:	461a      	mov	r2, r3
 80129be:	4b64      	ldr	r3, [pc, #400]	; (8012b50 <tcp_receive+0xb0c>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	441a      	add	r2, r3
 80129c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d006      	beq.n	80129dc <tcp_receive+0x998>
 80129ce:	4b62      	ldr	r3, [pc, #392]	; (8012b58 <tcp_receive+0xb14>)
 80129d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80129d4:	4961      	ldr	r1, [pc, #388]	; (8012b5c <tcp_receive+0xb18>)
 80129d6:	4862      	ldr	r0, [pc, #392]	; (8012b60 <tcp_receive+0xb1c>)
 80129d8:	f005 fa9a 	bl	8017f10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80129e2:	4b5a      	ldr	r3, [pc, #360]	; (8012b4c <tcp_receive+0xb08>)
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	461a      	mov	r2, r3
 80129e8:	4b59      	ldr	r3, [pc, #356]	; (8012b50 <tcp_receive+0xb0c>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	441a      	add	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129f6:	4b55      	ldr	r3, [pc, #340]	; (8012b4c <tcp_receive+0xb08>)
 80129f8:	881b      	ldrh	r3, [r3, #0]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d206      	bcs.n	8012a0c <tcp_receive+0x9c8>
 80129fe:	4b56      	ldr	r3, [pc, #344]	; (8012b58 <tcp_receive+0xb14>)
 8012a00:	f240 6207 	movw	r2, #1543	; 0x607
 8012a04:	4957      	ldr	r1, [pc, #348]	; (8012b64 <tcp_receive+0xb20>)
 8012a06:	4856      	ldr	r0, [pc, #344]	; (8012b60 <tcp_receive+0xb1c>)
 8012a08:	f005 fa82 	bl	8017f10 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a10:	4b4e      	ldr	r3, [pc, #312]	; (8012b4c <tcp_receive+0xb08>)
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	1ad3      	subs	r3, r2, r3
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7fc fd99 	bl	800f554 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012a22:	4b4c      	ldr	r3, [pc, #304]	; (8012b54 <tcp_receive+0xb10>)
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	891b      	ldrh	r3, [r3, #8]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d006      	beq.n	8012a3a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012a2c:	4b49      	ldr	r3, [pc, #292]	; (8012b54 <tcp_receive+0xb10>)
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	4a4d      	ldr	r2, [pc, #308]	; (8012b68 <tcp_receive+0xb24>)
 8012a32:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012a34:	4b47      	ldr	r3, [pc, #284]	; (8012b54 <tcp_receive+0xb10>)
 8012a36:	2200      	movs	r2, #0
 8012a38:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a3a:	4b46      	ldr	r3, [pc, #280]	; (8012b54 <tcp_receive+0xb10>)
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	899b      	ldrh	r3, [r3, #12]
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7fa f9ec 	bl	800ce20 <lwip_htons>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f000 80b8 	beq.w	8012bc6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012a56:	4b45      	ldr	r3, [pc, #276]	; (8012b6c <tcp_receive+0xb28>)
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	f043 0320 	orr.w	r3, r3, #32
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	4b42      	ldr	r3, [pc, #264]	; (8012b6c <tcp_receive+0xb28>)
 8012a62:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012a64:	e0af      	b.n	8012bc6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a6a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	4a36      	ldr	r2, [pc, #216]	; (8012b50 <tcp_receive+0xb0c>)
 8012a76:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	891b      	ldrh	r3, [r3, #8]
 8012a7c:	461c      	mov	r4, r3
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	899b      	ldrh	r3, [r3, #12]
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fa f9ca 	bl	800ce20 <lwip_htons>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	f003 0303 	and.w	r3, r3, #3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d001      	beq.n	8012a9c <tcp_receive+0xa58>
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e000      	b.n	8012a9e <tcp_receive+0xa5a>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	191a      	adds	r2, r3, r4
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa4:	441a      	add	r2, r3
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aae:	461c      	mov	r4, r3
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	891b      	ldrh	r3, [r3, #8]
 8012ab4:	461d      	mov	r5, r3
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	68db      	ldr	r3, [r3, #12]
 8012aba:	899b      	ldrh	r3, [r3, #12]
 8012abc:	b29b      	uxth	r3, r3
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fa f9ae 	bl	800ce20 <lwip_htons>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	f003 0303 	and.w	r3, r3, #3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d001      	beq.n	8012ad4 <tcp_receive+0xa90>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e000      	b.n	8012ad6 <tcp_receive+0xa92>
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	442b      	add	r3, r5
 8012ad8:	429c      	cmp	r4, r3
 8012ada:	d206      	bcs.n	8012aea <tcp_receive+0xaa6>
 8012adc:	4b1e      	ldr	r3, [pc, #120]	; (8012b58 <tcp_receive+0xb14>)
 8012ade:	f240 622b 	movw	r2, #1579	; 0x62b
 8012ae2:	4923      	ldr	r1, [pc, #140]	; (8012b70 <tcp_receive+0xb2c>)
 8012ae4:	481e      	ldr	r0, [pc, #120]	; (8012b60 <tcp_receive+0xb1c>)
 8012ae6:	f005 fa13 	bl	8017f10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	891b      	ldrh	r3, [r3, #8]
 8012aee:	461c      	mov	r4, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	899b      	ldrh	r3, [r3, #12]
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7fa f991 	bl	800ce20 <lwip_htons>
 8012afe:	4603      	mov	r3, r0
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	f003 0303 	and.w	r3, r3, #3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d001      	beq.n	8012b0e <tcp_receive+0xaca>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <tcp_receive+0xacc>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	1919      	adds	r1, r3, r4
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b16:	b28b      	uxth	r3, r1
 8012b18:	1ad3      	subs	r3, r2, r3
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7fc fd17 	bl	800f554 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	891b      	ldrh	r3, [r3, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d028      	beq.n	8012b82 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012b30:	4b0d      	ldr	r3, [pc, #52]	; (8012b68 <tcp_receive+0xb24>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d01d      	beq.n	8012b74 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012b38:	4b0b      	ldr	r3, [pc, #44]	; (8012b68 <tcp_receive+0xb24>)
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	4619      	mov	r1, r3
 8012b42:	4610      	mov	r0, r2
 8012b44:	f7fb ff40 	bl	800e9c8 <pbuf_cat>
 8012b48:	e018      	b.n	8012b7c <tcp_receive+0xb38>
 8012b4a:	bf00      	nop
 8012b4c:	20011bf6 	.word	0x20011bf6
 8012b50:	20011bec 	.word	0x20011bec
 8012b54:	20011bcc 	.word	0x20011bcc
 8012b58:	0801ccd4 	.word	0x0801ccd4
 8012b5c:	0801d0b4 	.word	0x0801d0b4
 8012b60:	0801cd20 	.word	0x0801cd20
 8012b64:	0801d0f0 	.word	0x0801d0f0
 8012b68:	20011bfc 	.word	0x20011bfc
 8012b6c:	20011bf9 	.word	0x20011bf9
 8012b70:	0801d110 	.word	0x0801d110
            } else {
              recv_data = cseg->p;
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	4a70      	ldr	r2, [pc, #448]	; (8012d3c <tcp_receive+0xcf8>)
 8012b7a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	899b      	ldrh	r3, [r3, #12]
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7fa f948 	bl	800ce20 <lwip_htons>
 8012b90:	4603      	mov	r3, r0
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	f003 0301 	and.w	r3, r3, #1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00d      	beq.n	8012bb8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012b9c:	4b68      	ldr	r3, [pc, #416]	; (8012d40 <tcp_receive+0xcfc>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	f043 0320 	orr.w	r3, r3, #32
 8012ba4:	b2da      	uxtb	r2, r3
 8012ba6:	4b66      	ldr	r3, [pc, #408]	; (8012d40 <tcp_receive+0xcfc>)
 8012ba8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	7d1b      	ldrb	r3, [r3, #20]
 8012bae:	2b04      	cmp	r3, #4
 8012bb0:	d102      	bne.n	8012bb8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2207      	movs	r2, #7
 8012bb6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012bc0:	68b8      	ldr	r0, [r7, #8]
 8012bc2:	f7fd fb04 	bl	80101ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d008      	beq.n	8012be0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	685a      	ldr	r2, [r3, #4]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	f43f af43 	beq.w	8012a66 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	8b5b      	ldrh	r3, [r3, #26]
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d00e      	beq.n	8012c0a <tcp_receive+0xbc6>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8b5b      	ldrh	r3, [r3, #26]
 8012bf0:	f023 0301 	bic.w	r3, r3, #1
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	835a      	strh	r2, [r3, #26]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	8b5b      	ldrh	r3, [r3, #26]
 8012bfe:	f043 0302 	orr.w	r3, r3, #2
 8012c02:	b29a      	uxth	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012c08:	e188      	b.n	8012f1c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	8b5b      	ldrh	r3, [r3, #26]
 8012c0e:	f043 0301 	orr.w	r3, r3, #1
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012c18:	e180      	b.n	8012f1c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d106      	bne.n	8012c30 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012c22:	4848      	ldr	r0, [pc, #288]	; (8012d44 <tcp_receive+0xd00>)
 8012c24:	f7fd faec 	bl	8010200 <tcp_seg_copy>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	675a      	str	r2, [r3, #116]	; 0x74
 8012c2e:	e16d      	b.n	8012f0c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c3a:	e157      	b.n	8012eec <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	685a      	ldr	r2, [r3, #4]
 8012c42:	4b41      	ldr	r3, [pc, #260]	; (8012d48 <tcp_receive+0xd04>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d11d      	bne.n	8012c86 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012c4a:	4b3e      	ldr	r3, [pc, #248]	; (8012d44 <tcp_receive+0xd00>)
 8012c4c:	891a      	ldrh	r2, [r3, #8]
 8012c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c50:	891b      	ldrh	r3, [r3, #8]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	f240 814f 	bls.w	8012ef6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c58:	483a      	ldr	r0, [pc, #232]	; (8012d44 <tcp_receive+0xd00>)
 8012c5a:	f7fd fad1 	bl	8010200 <tcp_seg_copy>
 8012c5e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	f000 8149 	beq.w	8012efa <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d003      	beq.n	8012c76 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c70:	697a      	ldr	r2, [r7, #20]
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	e002      	b.n	8012c7c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	697a      	ldr	r2, [r7, #20]
 8012c7a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c7e:	6978      	ldr	r0, [r7, #20]
 8012c80:	f7ff f8dc 	bl	8011e3c <tcp_oos_insert_segment>
                }
                break;
 8012c84:	e139      	b.n	8012efa <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d117      	bne.n	8012cbc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012c8c:	4b2e      	ldr	r3, [pc, #184]	; (8012d48 <tcp_receive+0xd04>)
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	1ad3      	subs	r3, r2, r3
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	da57      	bge.n	8012d4c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c9c:	4829      	ldr	r0, [pc, #164]	; (8012d44 <tcp_receive+0xd00>)
 8012c9e:	f7fd faaf 	bl	8010200 <tcp_seg_copy>
 8012ca2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f000 8129 	beq.w	8012efe <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	69ba      	ldr	r2, [r7, #24]
 8012cb0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012cb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cb4:	69b8      	ldr	r0, [r7, #24]
 8012cb6:	f7ff f8c1 	bl	8011e3c <tcp_oos_insert_segment>
                  }
                  break;
 8012cba:	e120      	b.n	8012efe <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012cbc:	4b22      	ldr	r3, [pc, #136]	; (8012d48 <tcp_receive+0xd04>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	1ad3      	subs	r3, r2, r3
 8012cc8:	3b01      	subs	r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	db3e      	blt.n	8012d4c <tcp_receive+0xd08>
 8012cce:	4b1e      	ldr	r3, [pc, #120]	; (8012d48 <tcp_receive+0xd04>)
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	68db      	ldr	r3, [r3, #12]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	1ad3      	subs	r3, r2, r3
 8012cda:	3301      	adds	r3, #1
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	dc35      	bgt.n	8012d4c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ce0:	4818      	ldr	r0, [pc, #96]	; (8012d44 <tcp_receive+0xd00>)
 8012ce2:	f7fd fa8d 	bl	8010200 <tcp_seg_copy>
 8012ce6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	f000 8109 	beq.w	8012f02 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cf8:	8912      	ldrh	r2, [r2, #8]
 8012cfa:	441a      	add	r2, r3
 8012cfc:	4b12      	ldr	r3, [pc, #72]	; (8012d48 <tcp_receive+0xd04>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	1ad3      	subs	r3, r2, r3
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	dd12      	ble.n	8012d2c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012d06:	4b10      	ldr	r3, [pc, #64]	; (8012d48 <tcp_receive+0xd04>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	1ad3      	subs	r3, r2, r3
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1e:	685a      	ldr	r2, [r3, #4]
 8012d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d22:	891b      	ldrh	r3, [r3, #8]
 8012d24:	4619      	mov	r1, r3
 8012d26:	4610      	mov	r0, r2
 8012d28:	f7fb fbfa 	bl	800e520 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d2e:	69fa      	ldr	r2, [r7, #28]
 8012d30:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d34:	69f8      	ldr	r0, [r7, #28]
 8012d36:	f7ff f881 	bl	8011e3c <tcp_oos_insert_segment>
                  }
                  break;
 8012d3a:	e0e2      	b.n	8012f02 <tcp_receive+0xebe>
 8012d3c:	20011bfc 	.word	0x20011bfc
 8012d40:	20011bf9 	.word	0x20011bf9
 8012d44:	20011bcc 	.word	0x20011bcc
 8012d48:	20011bec 	.word	0x20011bec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f040 80c6 	bne.w	8012ee6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012d5a:	4b80      	ldr	r3, [pc, #512]	; (8012f5c <tcp_receive+0xf18>)
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d60:	68db      	ldr	r3, [r3, #12]
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f340 80bd 	ble.w	8012ee6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	899b      	ldrh	r3, [r3, #12]
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fa f853 	bl	800ce20 <lwip_htons>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	b2db      	uxtb	r3, r3
 8012d7e:	f003 0301 	and.w	r3, r3, #1
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f040 80bf 	bne.w	8012f06 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012d88:	4875      	ldr	r0, [pc, #468]	; (8012f60 <tcp_receive+0xf1c>)
 8012d8a:	f7fd fa39 	bl	8010200 <tcp_seg_copy>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d92:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f000 80b6 	beq.w	8012f0a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da6:	8912      	ldrh	r2, [r2, #8]
 8012da8:	441a      	add	r2, r3
 8012daa:	4b6c      	ldr	r3, [pc, #432]	; (8012f5c <tcp_receive+0xf18>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	dd12      	ble.n	8012dda <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012db4:	4b69      	ldr	r3, [pc, #420]	; (8012f5c <tcp_receive+0xf18>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	1ad3      	subs	r3, r2, r3
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	891b      	ldrh	r3, [r3, #8]
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	4610      	mov	r0, r2
 8012dd6:	f7fb fba3 	bl	800e520 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012dda:	4b62      	ldr	r3, [pc, #392]	; (8012f64 <tcp_receive+0xf20>)
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	461a      	mov	r2, r3
 8012de0:	4b5e      	ldr	r3, [pc, #376]	; (8012f5c <tcp_receive+0xf18>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	441a      	add	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dea:	6879      	ldr	r1, [r7, #4]
 8012dec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dee:	440b      	add	r3, r1
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f340 8089 	ble.w	8012f0a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	899b      	ldrh	r3, [r3, #12]
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fa f80c 	bl	800ce20 <lwip_htons>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	f003 0301 	and.w	r3, r3, #1
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d022      	beq.n	8012e5a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	899b      	ldrh	r3, [r3, #12]
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	b21b      	sxth	r3, r3
 8012e20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e24:	b21c      	sxth	r4, r3
 8012e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	899b      	ldrh	r3, [r3, #12]
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7f9 fff5 	bl	800ce20 <lwip_htons>
 8012e36:	4603      	mov	r3, r0
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f9 ffec 	bl	800ce20 <lwip_htons>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	b21b      	sxth	r3, r3
 8012e4c:	4323      	orrs	r3, r4
 8012e4e:	b21a      	sxth	r2, r3
 8012e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	b292      	uxth	r2, r2
 8012e58:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e64:	4413      	add	r3, r2
 8012e66:	b299      	uxth	r1, r3
 8012e68:	4b3c      	ldr	r3, [pc, #240]	; (8012f5c <tcp_receive+0xf18>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	1a8a      	subs	r2, r1, r2
 8012e74:	b292      	uxth	r2, r2
 8012e76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	685a      	ldr	r2, [r3, #4]
 8012e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	891b      	ldrh	r3, [r3, #8]
 8012e84:	4619      	mov	r1, r3
 8012e86:	4610      	mov	r0, r2
 8012e88:	f7fb fb4a 	bl	800e520 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	891c      	ldrh	r4, [r3, #8]
 8012e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	899b      	ldrh	r3, [r3, #12]
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7f9 ffbf 	bl	800ce20 <lwip_htons>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	f003 0303 	and.w	r3, r3, #3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <tcp_receive+0xe6e>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e000      	b.n	8012eb4 <tcp_receive+0xe70>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4423      	add	r3, r4
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	4b2a      	ldr	r3, [pc, #168]	; (8012f64 <tcp_receive+0xf20>)
 8012eba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ebc:	4b29      	ldr	r3, [pc, #164]	; (8012f64 <tcp_receive+0xf20>)
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	4b26      	ldr	r3, [pc, #152]	; (8012f5c <tcp_receive+0xf18>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	441a      	add	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ecc:	6879      	ldr	r1, [r7, #4]
 8012ece:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ed0:	440b      	add	r3, r1
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d019      	beq.n	8012f0a <tcp_receive+0xec6>
 8012ed6:	4b24      	ldr	r3, [pc, #144]	; (8012f68 <tcp_receive+0xf24>)
 8012ed8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012edc:	4923      	ldr	r1, [pc, #140]	; (8012f6c <tcp_receive+0xf28>)
 8012ede:	4824      	ldr	r0, [pc, #144]	; (8012f70 <tcp_receive+0xf2c>)
 8012ee0:	f005 f816 	bl	8017f10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012ee4:	e011      	b.n	8012f0a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8012eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f47f aea4 	bne.w	8012c3c <tcp_receive+0xbf8>
 8012ef4:	e00a      	b.n	8012f0c <tcp_receive+0xec8>
                break;
 8012ef6:	bf00      	nop
 8012ef8:	e008      	b.n	8012f0c <tcp_receive+0xec8>
                break;
 8012efa:	bf00      	nop
 8012efc:	e006      	b.n	8012f0c <tcp_receive+0xec8>
                  break;
 8012efe:	bf00      	nop
 8012f00:	e004      	b.n	8012f0c <tcp_receive+0xec8>
                  break;
 8012f02:	bf00      	nop
 8012f04:	e002      	b.n	8012f0c <tcp_receive+0xec8>
                  break;
 8012f06:	bf00      	nop
 8012f08:	e000      	b.n	8012f0c <tcp_receive+0xec8>
                break;
 8012f0a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f001 fead 	bl	8014c6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012f12:	e003      	b.n	8012f1c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f001 fea9 	bl	8014c6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f1a:	e01a      	b.n	8012f52 <tcp_receive+0xf0e>
 8012f1c:	e019      	b.n	8012f52 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012f1e:	4b0f      	ldr	r3, [pc, #60]	; (8012f5c <tcp_receive+0xf18>)
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	db0a      	blt.n	8012f42 <tcp_receive+0xefe>
 8012f2c:	4b0b      	ldr	r3, [pc, #44]	; (8012f5c <tcp_receive+0xf18>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f34:	6879      	ldr	r1, [r7, #4]
 8012f36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f38:	440b      	add	r3, r1
 8012f3a:	1ad3      	subs	r3, r2, r3
 8012f3c:	3301      	adds	r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	dd07      	ble.n	8012f52 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	8b5b      	ldrh	r3, [r3, #26]
 8012f46:	f043 0302 	orr.w	r3, r3, #2
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012f50:	e7ff      	b.n	8012f52 <tcp_receive+0xf0e>
 8012f52:	bf00      	nop
 8012f54:	3750      	adds	r7, #80	; 0x50
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bdb0      	pop	{r4, r5, r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20011bec 	.word	0x20011bec
 8012f60:	20011bcc 	.word	0x20011bcc
 8012f64:	20011bf6 	.word	0x20011bf6
 8012f68:	0801ccd4 	.word	0x0801ccd4
 8012f6c:	0801d07c 	.word	0x0801d07c
 8012f70:	0801cd20 	.word	0x0801cd20

08012f74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012f7a:	4b15      	ldr	r3, [pc, #84]	; (8012fd0 <tcp_get_next_optbyte+0x5c>)
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	b291      	uxth	r1, r2
 8012f82:	4a13      	ldr	r2, [pc, #76]	; (8012fd0 <tcp_get_next_optbyte+0x5c>)
 8012f84:	8011      	strh	r1, [r2, #0]
 8012f86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012f88:	4b12      	ldr	r3, [pc, #72]	; (8012fd4 <tcp_get_next_optbyte+0x60>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d004      	beq.n	8012f9a <tcp_get_next_optbyte+0x26>
 8012f90:	4b11      	ldr	r3, [pc, #68]	; (8012fd8 <tcp_get_next_optbyte+0x64>)
 8012f92:	881b      	ldrh	r3, [r3, #0]
 8012f94:	88fa      	ldrh	r2, [r7, #6]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d208      	bcs.n	8012fac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012f9a:	4b10      	ldr	r3, [pc, #64]	; (8012fdc <tcp_get_next_optbyte+0x68>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	3314      	adds	r3, #20
 8012fa0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012fa2:	88fb      	ldrh	r3, [r7, #6]
 8012fa4:	683a      	ldr	r2, [r7, #0]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	e00b      	b.n	8012fc4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012fac:	88fb      	ldrh	r3, [r7, #6]
 8012fae:	b2da      	uxtb	r2, r3
 8012fb0:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <tcp_get_next_optbyte+0x64>)
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	b2db      	uxtb	r3, r3
 8012fb6:	1ad3      	subs	r3, r2, r3
 8012fb8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012fba:	4b06      	ldr	r3, [pc, #24]	; (8012fd4 <tcp_get_next_optbyte+0x60>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	797b      	ldrb	r3, [r7, #5]
 8012fc0:	4413      	add	r3, r2
 8012fc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	370c      	adds	r7, #12
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr
 8012fd0:	20011be8 	.word	0x20011be8
 8012fd4:	20011be4 	.word	0x20011be4
 8012fd8:	20011be2 	.word	0x20011be2
 8012fdc:	20011bdc 	.word	0x20011bdc

08012fe0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d106      	bne.n	8012ffc <tcp_parseopt+0x1c>
 8012fee:	4b32      	ldr	r3, [pc, #200]	; (80130b8 <tcp_parseopt+0xd8>)
 8012ff0:	f240 727d 	movw	r2, #1917	; 0x77d
 8012ff4:	4931      	ldr	r1, [pc, #196]	; (80130bc <tcp_parseopt+0xdc>)
 8012ff6:	4832      	ldr	r0, [pc, #200]	; (80130c0 <tcp_parseopt+0xe0>)
 8012ff8:	f004 ff8a 	bl	8017f10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012ffc:	4b31      	ldr	r3, [pc, #196]	; (80130c4 <tcp_parseopt+0xe4>)
 8012ffe:	881b      	ldrh	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d055      	beq.n	80130b0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013004:	4b30      	ldr	r3, [pc, #192]	; (80130c8 <tcp_parseopt+0xe8>)
 8013006:	2200      	movs	r2, #0
 8013008:	801a      	strh	r2, [r3, #0]
 801300a:	e045      	b.n	8013098 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801300c:	f7ff ffb2 	bl	8012f74 <tcp_get_next_optbyte>
 8013010:	4603      	mov	r3, r0
 8013012:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013014:	7bfb      	ldrb	r3, [r7, #15]
 8013016:	2b02      	cmp	r3, #2
 8013018:	d006      	beq.n	8013028 <tcp_parseopt+0x48>
 801301a:	2b02      	cmp	r3, #2
 801301c:	dc2b      	bgt.n	8013076 <tcp_parseopt+0x96>
 801301e:	2b00      	cmp	r3, #0
 8013020:	d041      	beq.n	80130a6 <tcp_parseopt+0xc6>
 8013022:	2b01      	cmp	r3, #1
 8013024:	d127      	bne.n	8013076 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013026:	e037      	b.n	8013098 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013028:	f7ff ffa4 	bl	8012f74 <tcp_get_next_optbyte>
 801302c:	4603      	mov	r3, r0
 801302e:	2b04      	cmp	r3, #4
 8013030:	d13b      	bne.n	80130aa <tcp_parseopt+0xca>
 8013032:	4b25      	ldr	r3, [pc, #148]	; (80130c8 <tcp_parseopt+0xe8>)
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	3301      	adds	r3, #1
 8013038:	4a22      	ldr	r2, [pc, #136]	; (80130c4 <tcp_parseopt+0xe4>)
 801303a:	8812      	ldrh	r2, [r2, #0]
 801303c:	4293      	cmp	r3, r2
 801303e:	da34      	bge.n	80130aa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013040:	f7ff ff98 	bl	8012f74 <tcp_get_next_optbyte>
 8013044:	4603      	mov	r3, r0
 8013046:	b29b      	uxth	r3, r3
 8013048:	021b      	lsls	r3, r3, #8
 801304a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801304c:	f7ff ff92 	bl	8012f74 <tcp_get_next_optbyte>
 8013050:	4603      	mov	r3, r0
 8013052:	b29a      	uxth	r2, r3
 8013054:	89bb      	ldrh	r3, [r7, #12]
 8013056:	4313      	orrs	r3, r2
 8013058:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801305a:	89bb      	ldrh	r3, [r7, #12]
 801305c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013060:	d804      	bhi.n	801306c <tcp_parseopt+0x8c>
 8013062:	89bb      	ldrh	r3, [r7, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <tcp_parseopt+0x8c>
 8013068:	89ba      	ldrh	r2, [r7, #12]
 801306a:	e001      	b.n	8013070 <tcp_parseopt+0x90>
 801306c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013074:	e010      	b.n	8013098 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013076:	f7ff ff7d 	bl	8012f74 <tcp_get_next_optbyte>
 801307a:	4603      	mov	r3, r0
 801307c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801307e:	7afb      	ldrb	r3, [r7, #11]
 8013080:	2b01      	cmp	r3, #1
 8013082:	d914      	bls.n	80130ae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013084:	7afb      	ldrb	r3, [r7, #11]
 8013086:	b29a      	uxth	r2, r3
 8013088:	4b0f      	ldr	r3, [pc, #60]	; (80130c8 <tcp_parseopt+0xe8>)
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	4413      	add	r3, r2
 801308e:	b29b      	uxth	r3, r3
 8013090:	3b02      	subs	r3, #2
 8013092:	b29a      	uxth	r2, r3
 8013094:	4b0c      	ldr	r3, [pc, #48]	; (80130c8 <tcp_parseopt+0xe8>)
 8013096:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013098:	4b0b      	ldr	r3, [pc, #44]	; (80130c8 <tcp_parseopt+0xe8>)
 801309a:	881a      	ldrh	r2, [r3, #0]
 801309c:	4b09      	ldr	r3, [pc, #36]	; (80130c4 <tcp_parseopt+0xe4>)
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d3b3      	bcc.n	801300c <tcp_parseopt+0x2c>
 80130a4:	e004      	b.n	80130b0 <tcp_parseopt+0xd0>
          return;
 80130a6:	bf00      	nop
 80130a8:	e002      	b.n	80130b0 <tcp_parseopt+0xd0>
            return;
 80130aa:	bf00      	nop
 80130ac:	e000      	b.n	80130b0 <tcp_parseopt+0xd0>
            return;
 80130ae:	bf00      	nop
      }
    }
  }
}
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	0801ccd4 	.word	0x0801ccd4
 80130bc:	0801d138 	.word	0x0801d138
 80130c0:	0801cd20 	.word	0x0801cd20
 80130c4:	20011be0 	.word	0x20011be0
 80130c8:	20011be8 	.word	0x20011be8

080130cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80130cc:	b480      	push	{r7}
 80130ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80130d0:	4b05      	ldr	r3, [pc, #20]	; (80130e8 <tcp_trigger_input_pcb_close+0x1c>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f043 0310 	orr.w	r3, r3, #16
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	4b03      	ldr	r3, [pc, #12]	; (80130e8 <tcp_trigger_input_pcb_close+0x1c>)
 80130dc:	701a      	strb	r2, [r3, #0]
}
 80130de:	bf00      	nop
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	20011bf9 	.word	0x20011bf9

080130ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b084      	sub	sp, #16
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00a      	beq.n	8013114 <tcp_route+0x28>
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	7a1b      	ldrb	r3, [r3, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d006      	beq.n	8013114 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	7a1b      	ldrb	r3, [r3, #8]
 801310a:	4618      	mov	r0, r3
 801310c:	f7fb f800 	bl	800e110 <netif_get_by_index>
 8013110:	4603      	mov	r3, r0
 8013112:	e003      	b.n	801311c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f003 f96d 	bl	80163f4 <ip4_route>
 801311a:	4603      	mov	r3, r0
  }
}
 801311c:	4618      	mov	r0, r3
 801311e:	3710      	adds	r7, #16
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013124:	b590      	push	{r4, r7, lr}
 8013126:	b087      	sub	sp, #28
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	603b      	str	r3, [r7, #0]
 8013130:	4613      	mov	r3, r2
 8013132:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d105      	bne.n	8013146 <tcp_create_segment+0x22>
 801313a:	4b44      	ldr	r3, [pc, #272]	; (801324c <tcp_create_segment+0x128>)
 801313c:	22a3      	movs	r2, #163	; 0xa3
 801313e:	4944      	ldr	r1, [pc, #272]	; (8013250 <tcp_create_segment+0x12c>)
 8013140:	4844      	ldr	r0, [pc, #272]	; (8013254 <tcp_create_segment+0x130>)
 8013142:	f004 fee5 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d105      	bne.n	8013158 <tcp_create_segment+0x34>
 801314c:	4b3f      	ldr	r3, [pc, #252]	; (801324c <tcp_create_segment+0x128>)
 801314e:	22a4      	movs	r2, #164	; 0xa4
 8013150:	4941      	ldr	r1, [pc, #260]	; (8013258 <tcp_create_segment+0x134>)
 8013152:	4840      	ldr	r0, [pc, #256]	; (8013254 <tcp_create_segment+0x130>)
 8013154:	f004 fedc 	bl	8017f10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013158:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801315c:	009b      	lsls	r3, r3, #2
 801315e:	b2db      	uxtb	r3, r3
 8013160:	f003 0304 	and.w	r3, r3, #4
 8013164:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013166:	2002      	movs	r0, #2
 8013168:	f7fa fc4a 	bl	800da00 <memp_malloc>
 801316c:	6138      	str	r0, [r7, #16]
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d104      	bne.n	801317e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013174:	68b8      	ldr	r0, [r7, #8]
 8013176:	f7fb fb59 	bl	800e82c <pbuf_free>
    return NULL;
 801317a:	2300      	movs	r3, #0
 801317c:	e061      	b.n	8013242 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013184:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	2200      	movs	r2, #0
 801318a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	68ba      	ldr	r2, [r7, #8]
 8013190:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	891a      	ldrh	r2, [r3, #8]
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	b29b      	uxth	r3, r3
 801319a:	429a      	cmp	r2, r3
 801319c:	d205      	bcs.n	80131aa <tcp_create_segment+0x86>
 801319e:	4b2b      	ldr	r3, [pc, #172]	; (801324c <tcp_create_segment+0x128>)
 80131a0:	22b0      	movs	r2, #176	; 0xb0
 80131a2:	492e      	ldr	r1, [pc, #184]	; (801325c <tcp_create_segment+0x138>)
 80131a4:	482b      	ldr	r0, [pc, #172]	; (8013254 <tcp_create_segment+0x130>)
 80131a6:	f004 feb3 	bl	8017f10 <iprintf>
  seg->len = p->tot_len - optlen;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	891a      	ldrh	r2, [r3, #8]
 80131ae:	7dfb      	ldrb	r3, [r7, #23]
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80131ba:	2114      	movs	r1, #20
 80131bc:	68b8      	ldr	r0, [r7, #8]
 80131be:	f7fb fa9f 	bl	800e700 <pbuf_add_header>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d004      	beq.n	80131d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80131c8:	6938      	ldr	r0, [r7, #16]
 80131ca:	f7fd f800 	bl	80101ce <tcp_seg_free>
    return NULL;
 80131ce:	2300      	movs	r3, #0
 80131d0:	e037      	b.n	8013242 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	685a      	ldr	r2, [r3, #4]
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	8ada      	ldrh	r2, [r3, #22]
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	68dc      	ldr	r4, [r3, #12]
 80131e4:	4610      	mov	r0, r2
 80131e6:	f7f9 fe1b 	bl	800ce20 <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	8b1a      	ldrh	r2, [r3, #24]
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	68dc      	ldr	r4, [r3, #12]
 80131f6:	4610      	mov	r0, r2
 80131f8:	f7f9 fe12 	bl	800ce20 <lwip_htons>
 80131fc:	4603      	mov	r3, r0
 80131fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	68dc      	ldr	r4, [r3, #12]
 8013204:	6838      	ldr	r0, [r7, #0]
 8013206:	f7f9 fe20 	bl	800ce4a <lwip_htonl>
 801320a:	4603      	mov	r3, r0
 801320c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801320e:	7dfb      	ldrb	r3, [r7, #23]
 8013210:	089b      	lsrs	r3, r3, #2
 8013212:	b2db      	uxtb	r3, r3
 8013214:	b29b      	uxth	r3, r3
 8013216:	3305      	adds	r3, #5
 8013218:	b29b      	uxth	r3, r3
 801321a:	031b      	lsls	r3, r3, #12
 801321c:	b29a      	uxth	r2, r3
 801321e:	79fb      	ldrb	r3, [r7, #7]
 8013220:	b29b      	uxth	r3, r3
 8013222:	4313      	orrs	r3, r2
 8013224:	b29a      	uxth	r2, r3
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	68dc      	ldr	r4, [r3, #12]
 801322a:	4610      	mov	r0, r2
 801322c:	f7f9 fdf8 	bl	800ce20 <lwip_htons>
 8013230:	4603      	mov	r3, r0
 8013232:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	68db      	ldr	r3, [r3, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	749a      	strb	r2, [r3, #18]
 801323c:	2200      	movs	r2, #0
 801323e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013240:	693b      	ldr	r3, [r7, #16]
}
 8013242:	4618      	mov	r0, r3
 8013244:	371c      	adds	r7, #28
 8013246:	46bd      	mov	sp, r7
 8013248:	bd90      	pop	{r4, r7, pc}
 801324a:	bf00      	nop
 801324c:	0801d154 	.word	0x0801d154
 8013250:	0801d188 	.word	0x0801d188
 8013254:	0801d1a8 	.word	0x0801d1a8
 8013258:	0801d1d0 	.word	0x0801d1d0
 801325c:	0801d1f4 	.word	0x0801d1f4

08013260 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	af00      	add	r7, sp, #0
 8013266:	607b      	str	r3, [r7, #4]
 8013268:	4603      	mov	r3, r0
 801326a:	73fb      	strb	r3, [r7, #15]
 801326c:	460b      	mov	r3, r1
 801326e:	81bb      	strh	r3, [r7, #12]
 8013270:	4613      	mov	r3, r2
 8013272:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013274:	89bb      	ldrh	r3, [r7, #12]
 8013276:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d105      	bne.n	801328a <tcp_pbuf_prealloc+0x2a>
 801327e:	4b30      	ldr	r3, [pc, #192]	; (8013340 <tcp_pbuf_prealloc+0xe0>)
 8013280:	22e8      	movs	r2, #232	; 0xe8
 8013282:	4930      	ldr	r1, [pc, #192]	; (8013344 <tcp_pbuf_prealloc+0xe4>)
 8013284:	4830      	ldr	r0, [pc, #192]	; (8013348 <tcp_pbuf_prealloc+0xe8>)
 8013286:	f004 fe43 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801328a:	6a3b      	ldr	r3, [r7, #32]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d105      	bne.n	801329c <tcp_pbuf_prealloc+0x3c>
 8013290:	4b2b      	ldr	r3, [pc, #172]	; (8013340 <tcp_pbuf_prealloc+0xe0>)
 8013292:	22e9      	movs	r2, #233	; 0xe9
 8013294:	492d      	ldr	r1, [pc, #180]	; (801334c <tcp_pbuf_prealloc+0xec>)
 8013296:	482c      	ldr	r0, [pc, #176]	; (8013348 <tcp_pbuf_prealloc+0xe8>)
 8013298:	f004 fe3a 	bl	8017f10 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801329c:	89ba      	ldrh	r2, [r7, #12]
 801329e:	897b      	ldrh	r3, [r7, #10]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d221      	bcs.n	80132e8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80132a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80132a8:	f003 0302 	and.w	r3, r3, #2
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d111      	bne.n	80132d4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80132b0:	6a3b      	ldr	r3, [r7, #32]
 80132b2:	8b5b      	ldrh	r3, [r3, #26]
 80132b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d115      	bne.n	80132e8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80132bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d007      	beq.n	80132d4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80132c4:	6a3b      	ldr	r3, [r7, #32]
 80132c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d103      	bne.n	80132d4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d009      	beq.n	80132e8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80132d4:	89bb      	ldrh	r3, [r7, #12]
 80132d6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80132da:	f023 0203 	bic.w	r2, r3, #3
 80132de:	897b      	ldrh	r3, [r7, #10]
 80132e0:	4293      	cmp	r3, r2
 80132e2:	bf28      	it	cs
 80132e4:	4613      	movcs	r3, r2
 80132e6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80132e8:	8af9      	ldrh	r1, [r7, #22]
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fa ffb7 	bl	800e264 <pbuf_alloc>
 80132f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d101      	bne.n	8013302 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80132fe:	2300      	movs	r3, #0
 8013300:	e019      	b.n	8013336 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d006      	beq.n	8013318 <tcp_pbuf_prealloc+0xb8>
 801330a:	4b0d      	ldr	r3, [pc, #52]	; (8013340 <tcp_pbuf_prealloc+0xe0>)
 801330c:	f240 120b 	movw	r2, #267	; 0x10b
 8013310:	490f      	ldr	r1, [pc, #60]	; (8013350 <tcp_pbuf_prealloc+0xf0>)
 8013312:	480d      	ldr	r0, [pc, #52]	; (8013348 <tcp_pbuf_prealloc+0xe8>)
 8013314:	f004 fdfc 	bl	8017f10 <iprintf>
  *oversize = p->len - length;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	895a      	ldrh	r2, [r3, #10]
 801331c:	89bb      	ldrh	r3, [r7, #12]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	b29a      	uxth	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	89ba      	ldrh	r2, [r7, #12]
 801332a:	811a      	strh	r2, [r3, #8]
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	891a      	ldrh	r2, [r3, #8]
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	815a      	strh	r2, [r3, #10]
  return p;
 8013334:	693b      	ldr	r3, [r7, #16]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3718      	adds	r7, #24
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	0801d154 	.word	0x0801d154
 8013344:	0801d20c 	.word	0x0801d20c
 8013348:	0801d1a8 	.word	0x0801d1a8
 801334c:	0801d230 	.word	0x0801d230
 8013350:	0801d250 	.word	0x0801d250

08013354 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
 801335c:	460b      	mov	r3, r1
 801335e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d106      	bne.n	8013374 <tcp_write_checks+0x20>
 8013366:	4b33      	ldr	r3, [pc, #204]	; (8013434 <tcp_write_checks+0xe0>)
 8013368:	f240 1233 	movw	r2, #307	; 0x133
 801336c:	4932      	ldr	r1, [pc, #200]	; (8013438 <tcp_write_checks+0xe4>)
 801336e:	4833      	ldr	r0, [pc, #204]	; (801343c <tcp_write_checks+0xe8>)
 8013370:	f004 fdce 	bl	8017f10 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	7d1b      	ldrb	r3, [r3, #20]
 8013378:	2b04      	cmp	r3, #4
 801337a:	d00e      	beq.n	801339a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013380:	2b07      	cmp	r3, #7
 8013382:	d00a      	beq.n	801339a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013388:	2b02      	cmp	r3, #2
 801338a:	d006      	beq.n	801339a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013390:	2b03      	cmp	r3, #3
 8013392:	d002      	beq.n	801339a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013394:	f06f 030a 	mvn.w	r3, #10
 8013398:	e048      	b.n	801342c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801339a:	887b      	ldrh	r3, [r7, #2]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <tcp_write_checks+0x50>
    return ERR_OK;
 80133a0:	2300      	movs	r3, #0
 80133a2:	e043      	b.n	801342c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80133aa:	887a      	ldrh	r2, [r7, #2]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d909      	bls.n	80133c4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	8b5b      	ldrh	r3, [r3, #26]
 80133b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133c2:	e033      	b.n	801342c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133ca:	2b08      	cmp	r3, #8
 80133cc:	d909      	bls.n	80133e2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	8b5b      	ldrh	r3, [r3, #26]
 80133d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133e0:	e024      	b.n	801342c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00f      	beq.n	801340c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d11a      	bne.n	801342a <tcp_write_checks+0xd6>
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d116      	bne.n	801342a <tcp_write_checks+0xd6>
 80133fc:	4b0d      	ldr	r3, [pc, #52]	; (8013434 <tcp_write_checks+0xe0>)
 80133fe:	f240 1255 	movw	r2, #341	; 0x155
 8013402:	490f      	ldr	r1, [pc, #60]	; (8013440 <tcp_write_checks+0xec>)
 8013404:	480d      	ldr	r0, [pc, #52]	; (801343c <tcp_write_checks+0xe8>)
 8013406:	f004 fd83 	bl	8017f10 <iprintf>
 801340a:	e00e      	b.n	801342a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013410:	2b00      	cmp	r3, #0
 8013412:	d103      	bne.n	801341c <tcp_write_checks+0xc8>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013418:	2b00      	cmp	r3, #0
 801341a:	d006      	beq.n	801342a <tcp_write_checks+0xd6>
 801341c:	4b05      	ldr	r3, [pc, #20]	; (8013434 <tcp_write_checks+0xe0>)
 801341e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013422:	4908      	ldr	r1, [pc, #32]	; (8013444 <tcp_write_checks+0xf0>)
 8013424:	4805      	ldr	r0, [pc, #20]	; (801343c <tcp_write_checks+0xe8>)
 8013426:	f004 fd73 	bl	8017f10 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801342a:	2300      	movs	r3, #0
}
 801342c:	4618      	mov	r0, r3
 801342e:	3708      	adds	r7, #8
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}
 8013434:	0801d154 	.word	0x0801d154
 8013438:	0801d264 	.word	0x0801d264
 801343c:	0801d1a8 	.word	0x0801d1a8
 8013440:	0801d284 	.word	0x0801d284
 8013444:	0801d2c0 	.word	0x0801d2c0

08013448 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013448:	b590      	push	{r4, r7, lr}
 801344a:	b09b      	sub	sp, #108	; 0x6c
 801344c:	af04      	add	r7, sp, #16
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	4611      	mov	r1, r2
 8013454:	461a      	mov	r2, r3
 8013456:	460b      	mov	r3, r1
 8013458:	80fb      	strh	r3, [r7, #6]
 801345a:	4613      	mov	r3, r2
 801345c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801345e:	2300      	movs	r3, #0
 8013460:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013462:	2300      	movs	r3, #0
 8013464:	653b      	str	r3, [r7, #80]	; 0x50
 8013466:	2300      	movs	r3, #0
 8013468:	64fb      	str	r3, [r7, #76]	; 0x4c
 801346a:	2300      	movs	r3, #0
 801346c:	64bb      	str	r3, [r7, #72]	; 0x48
 801346e:	2300      	movs	r3, #0
 8013470:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013472:	2300      	movs	r3, #0
 8013474:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013478:	2300      	movs	r3, #0
 801347a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801347e:	2300      	movs	r3, #0
 8013480:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013482:	2300      	movs	r3, #0
 8013484:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013486:	2300      	movs	r3, #0
 8013488:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d109      	bne.n	80134a4 <tcp_write+0x5c>
 8013490:	4ba4      	ldr	r3, [pc, #656]	; (8013724 <tcp_write+0x2dc>)
 8013492:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013496:	49a4      	ldr	r1, [pc, #656]	; (8013728 <tcp_write+0x2e0>)
 8013498:	48a4      	ldr	r0, [pc, #656]	; (801372c <tcp_write+0x2e4>)
 801349a:	f004 fd39 	bl	8017f10 <iprintf>
 801349e:	f06f 030f 	mvn.w	r3, #15
 80134a2:	e32a      	b.n	8013afa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80134aa:	085b      	lsrs	r3, r3, #1
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134b2:	4293      	cmp	r3, r2
 80134b4:	bf28      	it	cs
 80134b6:	4613      	movcs	r3, r2
 80134b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80134ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d102      	bne.n	80134c6 <tcp_write+0x7e>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c4:	e000      	b.n	80134c8 <tcp_write+0x80>
 80134c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d109      	bne.n	80134e4 <tcp_write+0x9c>
 80134d0:	4b94      	ldr	r3, [pc, #592]	; (8013724 <tcp_write+0x2dc>)
 80134d2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80134d6:	4996      	ldr	r1, [pc, #600]	; (8013730 <tcp_write+0x2e8>)
 80134d8:	4894      	ldr	r0, [pc, #592]	; (801372c <tcp_write+0x2e4>)
 80134da:	f004 fd19 	bl	8017f10 <iprintf>
 80134de:	f06f 030f 	mvn.w	r3, #15
 80134e2:	e30a      	b.n	8013afa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80134e4:	88fb      	ldrh	r3, [r7, #6]
 80134e6:	4619      	mov	r1, r3
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f7ff ff33 	bl	8013354 <tcp_write_checks>
 80134ee:	4603      	mov	r3, r0
 80134f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80134f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d002      	beq.n	8013502 <tcp_write+0xba>
    return err;
 80134fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013500:	e2fb      	b.n	8013afa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013508:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801350c:	2300      	movs	r3, #0
 801350e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 80f6 	beq.w	8013708 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013520:	653b      	str	r3, [r7, #80]	; 0x50
 8013522:	e002      	b.n	801352a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d1f8      	bne.n	8013524 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013534:	7a9b      	ldrb	r3, [r3, #10]
 8013536:	009b      	lsls	r3, r3, #2
 8013538:	b29b      	uxth	r3, r3
 801353a:	f003 0304 	and.w	r3, r3, #4
 801353e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013540:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013544:	891b      	ldrh	r3, [r3, #8]
 8013546:	4619      	mov	r1, r3
 8013548:	8c3b      	ldrh	r3, [r7, #32]
 801354a:	440b      	add	r3, r1
 801354c:	429a      	cmp	r2, r3
 801354e:	da06      	bge.n	801355e <tcp_write+0x116>
 8013550:	4b74      	ldr	r3, [pc, #464]	; (8013724 <tcp_write+0x2dc>)
 8013552:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013556:	4977      	ldr	r1, [pc, #476]	; (8013734 <tcp_write+0x2ec>)
 8013558:	4874      	ldr	r0, [pc, #464]	; (801372c <tcp_write+0x2e4>)
 801355a:	f004 fcd9 	bl	8017f10 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801355e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013560:	891a      	ldrh	r2, [r3, #8]
 8013562:	8c3b      	ldrh	r3, [r7, #32]
 8013564:	4413      	add	r3, r2
 8013566:	b29b      	uxth	r3, r3
 8013568:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801356a:	1ad3      	subs	r3, r2, r3
 801356c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013574:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013576:	8a7b      	ldrh	r3, [r7, #18]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d026      	beq.n	80135ca <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801357c:	8a7b      	ldrh	r3, [r7, #18]
 801357e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013580:	429a      	cmp	r2, r3
 8013582:	d206      	bcs.n	8013592 <tcp_write+0x14a>
 8013584:	4b67      	ldr	r3, [pc, #412]	; (8013724 <tcp_write+0x2dc>)
 8013586:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801358a:	496b      	ldr	r1, [pc, #428]	; (8013738 <tcp_write+0x2f0>)
 801358c:	4867      	ldr	r0, [pc, #412]	; (801372c <tcp_write+0x2e4>)
 801358e:	f004 fcbf 	bl	8017f10 <iprintf>
      seg = last_unsent;
 8013592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013594:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013596:	8a7b      	ldrh	r3, [r7, #18]
 8013598:	88fa      	ldrh	r2, [r7, #6]
 801359a:	4293      	cmp	r3, r2
 801359c:	bf28      	it	cs
 801359e:	4613      	movcs	r3, r2
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135a4:	4293      	cmp	r3, r2
 80135a6:	bf28      	it	cs
 80135a8:	4613      	movcs	r3, r2
 80135aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80135ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135b2:	4413      	add	r3, r2
 80135b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80135b8:	8a7a      	ldrh	r2, [r7, #18]
 80135ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135bc:	1ad3      	subs	r3, r2, r3
 80135be:	b29b      	uxth	r3, r3
 80135c0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80135c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135c6:	1ad3      	subs	r3, r2, r3
 80135c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80135ca:	8a7b      	ldrh	r3, [r7, #18]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d00b      	beq.n	80135e8 <tcp_write+0x1a0>
 80135d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135d4:	88fb      	ldrh	r3, [r7, #6]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d006      	beq.n	80135e8 <tcp_write+0x1a0>
 80135da:	4b52      	ldr	r3, [pc, #328]	; (8013724 <tcp_write+0x2dc>)
 80135dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135e0:	4956      	ldr	r1, [pc, #344]	; (801373c <tcp_write+0x2f4>)
 80135e2:	4852      	ldr	r0, [pc, #328]	; (801372c <tcp_write+0x2e4>)
 80135e4:	f004 fc94 	bl	8017f10 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80135e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135ec:	88fb      	ldrh	r3, [r7, #6]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	f080 8167 	bcs.w	80138c2 <tcp_write+0x47a>
 80135f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	f000 8163 	beq.w	80138c2 <tcp_write+0x47a>
 80135fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135fe:	891b      	ldrh	r3, [r3, #8]
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 815e 	beq.w	80138c2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013606:	88fa      	ldrh	r2, [r7, #6]
 8013608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801360c:	1ad2      	subs	r2, r2, r3
 801360e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013610:	4293      	cmp	r3, r2
 8013612:	bfa8      	it	ge
 8013614:	4613      	movge	r3, r2
 8013616:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801361a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801361c:	797b      	ldrb	r3, [r7, #5]
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d027      	beq.n	8013676 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013626:	f107 0012 	add.w	r0, r7, #18
 801362a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801362c:	8bf9      	ldrh	r1, [r7, #30]
 801362e:	2301      	movs	r3, #1
 8013630:	9302      	str	r3, [sp, #8]
 8013632:	797b      	ldrb	r3, [r7, #5]
 8013634:	9301      	str	r3, [sp, #4]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	4603      	mov	r3, r0
 801363c:	2000      	movs	r0, #0
 801363e:	f7ff fe0f 	bl	8013260 <tcp_pbuf_prealloc>
 8013642:	6578      	str	r0, [r7, #84]	; 0x54
 8013644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013646:	2b00      	cmp	r3, #0
 8013648:	f000 8225 	beq.w	8013a96 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801364c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801364e:	6858      	ldr	r0, [r3, #4]
 8013650:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013654:	68ba      	ldr	r2, [r7, #8]
 8013656:	4413      	add	r3, r2
 8013658:	8bfa      	ldrh	r2, [r7, #30]
 801365a:	4619      	mov	r1, r3
 801365c:	f004 fb93 	bl	8017d86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013662:	f7fb f971 	bl	800e948 <pbuf_clen>
 8013666:	4603      	mov	r3, r0
 8013668:	461a      	mov	r2, r3
 801366a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801366e:	4413      	add	r3, r2
 8013670:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013674:	e041      	b.n	80136fa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	637b      	str	r3, [r7, #52]	; 0x34
 801367c:	e002      	b.n	8013684 <tcp_write+0x23c>
 801367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	637b      	str	r3, [r7, #52]	; 0x34
 8013684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d1f8      	bne.n	801367e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801368e:	7b1b      	ldrb	r3, [r3, #12]
 8013690:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d115      	bne.n	80136c4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801369e:	8952      	ldrh	r2, [r2, #10]
 80136a0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80136a2:	68ba      	ldr	r2, [r7, #8]
 80136a4:	429a      	cmp	r2, r3
 80136a6:	d10d      	bne.n	80136c4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80136a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d006      	beq.n	80136be <tcp_write+0x276>
 80136b0:	4b1c      	ldr	r3, [pc, #112]	; (8013724 <tcp_write+0x2dc>)
 80136b2:	f240 2231 	movw	r2, #561	; 0x231
 80136b6:	4922      	ldr	r1, [pc, #136]	; (8013740 <tcp_write+0x2f8>)
 80136b8:	481c      	ldr	r0, [pc, #112]	; (801372c <tcp_write+0x2e4>)
 80136ba:	f004 fc29 	bl	8017f10 <iprintf>
          extendlen = seglen;
 80136be:	8bfb      	ldrh	r3, [r7, #30]
 80136c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80136c2:	e01a      	b.n	80136fa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80136c4:	8bfb      	ldrh	r3, [r7, #30]
 80136c6:	2201      	movs	r2, #1
 80136c8:	4619      	mov	r1, r3
 80136ca:	2000      	movs	r0, #0
 80136cc:	f7fa fdca 	bl	800e264 <pbuf_alloc>
 80136d0:	6578      	str	r0, [r7, #84]	; 0x54
 80136d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 81e0 	beq.w	8013a9a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80136da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136de:	68ba      	ldr	r2, [r7, #8]
 80136e0:	441a      	add	r2, r3
 80136e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136e4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80136e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80136e8:	f7fb f92e 	bl	800e948 <pbuf_clen>
 80136ec:	4603      	mov	r3, r0
 80136ee:	461a      	mov	r2, r3
 80136f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136f4:	4413      	add	r3, r2
 80136f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80136fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136fe:	8bfb      	ldrh	r3, [r7, #30]
 8013700:	4413      	add	r3, r2
 8013702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013706:	e0dc      	b.n	80138c2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801370e:	2b00      	cmp	r3, #0
 8013710:	f000 80d7 	beq.w	80138c2 <tcp_write+0x47a>
 8013714:	4b03      	ldr	r3, [pc, #12]	; (8013724 <tcp_write+0x2dc>)
 8013716:	f240 224a 	movw	r2, #586	; 0x24a
 801371a:	490a      	ldr	r1, [pc, #40]	; (8013744 <tcp_write+0x2fc>)
 801371c:	4803      	ldr	r0, [pc, #12]	; (801372c <tcp_write+0x2e4>)
 801371e:	f004 fbf7 	bl	8017f10 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013722:	e0ce      	b.n	80138c2 <tcp_write+0x47a>
 8013724:	0801d154 	.word	0x0801d154
 8013728:	0801d2f4 	.word	0x0801d2f4
 801372c:	0801d1a8 	.word	0x0801d1a8
 8013730:	0801d30c 	.word	0x0801d30c
 8013734:	0801d340 	.word	0x0801d340
 8013738:	0801d358 	.word	0x0801d358
 801373c:	0801d378 	.word	0x0801d378
 8013740:	0801d398 	.word	0x0801d398
 8013744:	0801d3c4 	.word	0x0801d3c4
    struct pbuf *p;
    u16_t left = len - pos;
 8013748:	88fa      	ldrh	r2, [r7, #6]
 801374a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013752:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013756:	b29b      	uxth	r3, r3
 8013758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801375e:	8b7a      	ldrh	r2, [r7, #26]
 8013760:	8bbb      	ldrh	r3, [r7, #28]
 8013762:	4293      	cmp	r3, r2
 8013764:	bf28      	it	cs
 8013766:	4613      	movcs	r3, r2
 8013768:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801376a:	797b      	ldrb	r3, [r7, #5]
 801376c:	f003 0301 	and.w	r3, r3, #1
 8013770:	2b00      	cmp	r3, #0
 8013772:	d036      	beq.n	80137e2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013778:	b29a      	uxth	r2, r3
 801377a:	8b3b      	ldrh	r3, [r7, #24]
 801377c:	4413      	add	r3, r2
 801377e:	b299      	uxth	r1, r3
 8013780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013782:	2b00      	cmp	r3, #0
 8013784:	bf0c      	ite	eq
 8013786:	2301      	moveq	r3, #1
 8013788:	2300      	movne	r3, #0
 801378a:	b2db      	uxtb	r3, r3
 801378c:	f107 0012 	add.w	r0, r7, #18
 8013790:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013792:	9302      	str	r3, [sp, #8]
 8013794:	797b      	ldrb	r3, [r7, #5]
 8013796:	9301      	str	r3, [sp, #4]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	4603      	mov	r3, r0
 801379e:	2036      	movs	r0, #54	; 0x36
 80137a0:	f7ff fd5e 	bl	8013260 <tcp_pbuf_prealloc>
 80137a4:	6338      	str	r0, [r7, #48]	; 0x30
 80137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	f000 8178 	beq.w	8013a9e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80137ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b0:	895b      	ldrh	r3, [r3, #10]
 80137b2:	8b3a      	ldrh	r2, [r7, #24]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d906      	bls.n	80137c6 <tcp_write+0x37e>
 80137b8:	4b8c      	ldr	r3, [pc, #560]	; (80139ec <tcp_write+0x5a4>)
 80137ba:	f240 2266 	movw	r2, #614	; 0x266
 80137be:	498c      	ldr	r1, [pc, #560]	; (80139f0 <tcp_write+0x5a8>)
 80137c0:	488c      	ldr	r0, [pc, #560]	; (80139f4 <tcp_write+0x5ac>)
 80137c2:	f004 fba5 	bl	8017f10 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80137c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c8:	685a      	ldr	r2, [r3, #4]
 80137ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137ce:	18d0      	adds	r0, r2, r3
 80137d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	4413      	add	r3, r2
 80137d8:	8b3a      	ldrh	r2, [r7, #24]
 80137da:	4619      	mov	r1, r3
 80137dc:	f004 fad3 	bl	8017d86 <memcpy>
 80137e0:	e02f      	b.n	8013842 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80137e2:	8a7b      	ldrh	r3, [r7, #18]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d006      	beq.n	80137f6 <tcp_write+0x3ae>
 80137e8:	4b80      	ldr	r3, [pc, #512]	; (80139ec <tcp_write+0x5a4>)
 80137ea:	f240 2271 	movw	r2, #625	; 0x271
 80137ee:	4982      	ldr	r1, [pc, #520]	; (80139f8 <tcp_write+0x5b0>)
 80137f0:	4880      	ldr	r0, [pc, #512]	; (80139f4 <tcp_write+0x5ac>)
 80137f2:	f004 fb8d 	bl	8017f10 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80137f6:	8b3b      	ldrh	r3, [r7, #24]
 80137f8:	2201      	movs	r2, #1
 80137fa:	4619      	mov	r1, r3
 80137fc:	2036      	movs	r0, #54	; 0x36
 80137fe:	f7fa fd31 	bl	800e264 <pbuf_alloc>
 8013802:	6178      	str	r0, [r7, #20]
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 814b 	beq.w	8013aa2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801380c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013810:	68ba      	ldr	r2, [r7, #8]
 8013812:	441a      	add	r2, r3
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801381c:	b29b      	uxth	r3, r3
 801381e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013822:	4619      	mov	r1, r3
 8013824:	2036      	movs	r0, #54	; 0x36
 8013826:	f7fa fd1d 	bl	800e264 <pbuf_alloc>
 801382a:	6338      	str	r0, [r7, #48]	; 0x30
 801382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382e:	2b00      	cmp	r3, #0
 8013830:	d103      	bne.n	801383a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013832:	6978      	ldr	r0, [r7, #20]
 8013834:	f7fa fffa 	bl	800e82c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013838:	e136      	b.n	8013aa8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801383a:	6979      	ldr	r1, [r7, #20]
 801383c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801383e:	f7fb f8c3 	bl	800e9c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013844:	f7fb f880 	bl	800e948 <pbuf_clen>
 8013848:	4603      	mov	r3, r0
 801384a:	461a      	mov	r2, r3
 801384c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013850:	4413      	add	r3, r2
 8013852:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801385a:	2b09      	cmp	r3, #9
 801385c:	d903      	bls.n	8013866 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801385e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013860:	f7fa ffe4 	bl	800e82c <pbuf_free>
      goto memerr;
 8013864:	e120      	b.n	8013aa8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801386a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801386e:	441a      	add	r2, r3
 8013870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	4613      	mov	r3, r2
 8013878:	2200      	movs	r2, #0
 801387a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f7ff fc51 	bl	8013124 <tcp_create_segment>
 8013882:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013886:	2b00      	cmp	r3, #0
 8013888:	f000 810d 	beq.w	8013aa6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801388c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801388e:	2b00      	cmp	r3, #0
 8013890:	d102      	bne.n	8013898 <tcp_write+0x450>
      queue = seg;
 8013892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013894:	647b      	str	r3, [r7, #68]	; 0x44
 8013896:	e00c      	b.n	80138b2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <tcp_write+0x464>
 801389e:	4b53      	ldr	r3, [pc, #332]	; (80139ec <tcp_write+0x5a4>)
 80138a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80138a4:	4955      	ldr	r1, [pc, #340]	; (80139fc <tcp_write+0x5b4>)
 80138a6:	4853      	ldr	r0, [pc, #332]	; (80139f4 <tcp_write+0x5ac>)
 80138a8:	f004 fb32 	bl	8017f10 <iprintf>
      prev_seg->next = seg;
 80138ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80138ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138b0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80138b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138b4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80138b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138ba:	8b3b      	ldrh	r3, [r7, #24]
 80138bc:	4413      	add	r3, r2
 80138be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80138c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138c6:	88fb      	ldrh	r3, [r7, #6]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	f4ff af3d 	bcc.w	8013748 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80138ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d02c      	beq.n	801392e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80138d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138da:	e01e      	b.n	801391a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138de:	891a      	ldrh	r2, [r3, #8]
 80138e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138e2:	4413      	add	r3, r2
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80138ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d110      	bne.n	8013914 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80138f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138f8:	8952      	ldrh	r2, [r2, #10]
 80138fa:	4413      	add	r3, r2
 80138fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80138fe:	68b9      	ldr	r1, [r7, #8]
 8013900:	4618      	mov	r0, r3
 8013902:	f004 fa40 	bl	8017d86 <memcpy>
        p->len += oversize_used;
 8013906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013908:	895a      	ldrh	r2, [r3, #10]
 801390a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801390c:	4413      	add	r3, r2
 801390e:	b29a      	uxth	r2, r3
 8013910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013912:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	62fb      	str	r3, [r7, #44]	; 0x2c
 801391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391c:	2b00      	cmp	r3, #0
 801391e:	d1dd      	bne.n	80138dc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013922:	891a      	ldrh	r2, [r3, #8]
 8013924:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013926:	4413      	add	r3, r2
 8013928:	b29a      	uxth	r2, r3
 801392a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801392c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801392e:	8a7a      	ldrh	r2, [r7, #18]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013938:	2b00      	cmp	r3, #0
 801393a:	d018      	beq.n	801396e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801393c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801393e:	2b00      	cmp	r3, #0
 8013940:	d106      	bne.n	8013950 <tcp_write+0x508>
 8013942:	4b2a      	ldr	r3, [pc, #168]	; (80139ec <tcp_write+0x5a4>)
 8013944:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013948:	492d      	ldr	r1, [pc, #180]	; (8013a00 <tcp_write+0x5b8>)
 801394a:	482a      	ldr	r0, [pc, #168]	; (80139f4 <tcp_write+0x5ac>)
 801394c:	f004 fae0 	bl	8017f10 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013956:	4618      	mov	r0, r3
 8013958:	f7fb f836 	bl	800e9c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801395c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801395e:	891a      	ldrh	r2, [r3, #8]
 8013960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013962:	891b      	ldrh	r3, [r3, #8]
 8013964:	4413      	add	r3, r2
 8013966:	b29a      	uxth	r2, r3
 8013968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801396a:	811a      	strh	r2, [r3, #8]
 801396c:	e037      	b.n	80139de <tcp_write+0x596>
  } else if (extendlen > 0) {
 801396e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013970:	2b00      	cmp	r3, #0
 8013972:	d034      	beq.n	80139de <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013976:	2b00      	cmp	r3, #0
 8013978:	d003      	beq.n	8013982 <tcp_write+0x53a>
 801397a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801397c:	685b      	ldr	r3, [r3, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <tcp_write+0x548>
 8013982:	4b1a      	ldr	r3, [pc, #104]	; (80139ec <tcp_write+0x5a4>)
 8013984:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013988:	491e      	ldr	r1, [pc, #120]	; (8013a04 <tcp_write+0x5bc>)
 801398a:	481a      	ldr	r0, [pc, #104]	; (80139f4 <tcp_write+0x5ac>)
 801398c:	f004 fac0 	bl	8017f10 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	62bb      	str	r3, [r7, #40]	; 0x28
 8013996:	e009      	b.n	80139ac <tcp_write+0x564>
      p->tot_len += extendlen;
 8013998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399a:	891a      	ldrh	r2, [r3, #8]
 801399c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801399e:	4413      	add	r3, r2
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80139ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d1f1      	bne.n	8013998 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80139b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b6:	891a      	ldrh	r2, [r3, #8]
 80139b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139ba:	4413      	add	r3, r2
 80139bc:	b29a      	uxth	r2, r3
 80139be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c4:	895a      	ldrh	r2, [r3, #10]
 80139c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139c8:	4413      	add	r3, r2
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ce:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80139d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d2:	891a      	ldrh	r2, [r3, #8]
 80139d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139d6:	4413      	add	r3, r2
 80139d8:	b29a      	uxth	r2, r3
 80139da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139dc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80139de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d111      	bne.n	8013a08 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80139ea:	e010      	b.n	8013a0e <tcp_write+0x5c6>
 80139ec:	0801d154 	.word	0x0801d154
 80139f0:	0801d3f4 	.word	0x0801d3f4
 80139f4:	0801d1a8 	.word	0x0801d1a8
 80139f8:	0801d434 	.word	0x0801d434
 80139fc:	0801d444 	.word	0x0801d444
 8013a00:	0801d458 	.word	0x0801d458
 8013a04:	0801d490 	.word	0x0801d490
  } else {
    last_unsent->next = queue;
 8013a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a0c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a12:	88fb      	ldrh	r3, [r7, #6]
 8013a14:	441a      	add	r2, r3
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013a20:	88fb      	ldrh	r3, [r7, #6]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	b29a      	uxth	r2, r3
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d00e      	beq.n	8013a5e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d10a      	bne.n	8013a5e <tcp_write+0x616>
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d106      	bne.n	8013a5e <tcp_write+0x616>
 8013a50:	4b2c      	ldr	r3, [pc, #176]	; (8013b04 <tcp_write+0x6bc>)
 8013a52:	f240 3212 	movw	r2, #786	; 0x312
 8013a56:	492c      	ldr	r1, [pc, #176]	; (8013b08 <tcp_write+0x6c0>)
 8013a58:	482c      	ldr	r0, [pc, #176]	; (8013b0c <tcp_write+0x6c4>)
 8013a5a:	f004 fa59 	bl	8017f10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d016      	beq.n	8013a92 <tcp_write+0x64a>
 8013a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d012      	beq.n	8013a92 <tcp_write+0x64a>
 8013a6c:	797b      	ldrb	r3, [r7, #5]
 8013a6e:	f003 0302 	and.w	r3, r3, #2
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d10d      	bne.n	8013a92 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	899b      	ldrh	r3, [r3, #12]
 8013a7c:	b29c      	uxth	r4, r3
 8013a7e:	2008      	movs	r0, #8
 8013a80:	f7f9 f9ce 	bl	800ce20 <lwip_htons>
 8013a84:	4603      	mov	r3, r0
 8013a86:	461a      	mov	r2, r3
 8013a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	4322      	orrs	r2, r4
 8013a8e:	b292      	uxth	r2, r2
 8013a90:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	e031      	b.n	8013afa <tcp_write+0x6b2>
          goto memerr;
 8013a96:	bf00      	nop
 8013a98:	e006      	b.n	8013aa8 <tcp_write+0x660>
            goto memerr;
 8013a9a:	bf00      	nop
 8013a9c:	e004      	b.n	8013aa8 <tcp_write+0x660>
        goto memerr;
 8013a9e:	bf00      	nop
 8013aa0:	e002      	b.n	8013aa8 <tcp_write+0x660>
        goto memerr;
 8013aa2:	bf00      	nop
 8013aa4:	e000      	b.n	8013aa8 <tcp_write+0x660>
      goto memerr;
 8013aa6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	8b5b      	ldrh	r3, [r3, #26]
 8013aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ab0:	b29a      	uxth	r2, r3
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d002      	beq.n	8013ac2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013abc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013abe:	f7fa feb5 	bl	800e82c <pbuf_free>
  }
  if (queue != NULL) {
 8013ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d002      	beq.n	8013ace <tcp_write+0x686>
    tcp_segs_free(queue);
 8013ac8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013aca:	f7fc fb6b 	bl	80101a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00e      	beq.n	8013af6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d10a      	bne.n	8013af6 <tcp_write+0x6ae>
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d106      	bne.n	8013af6 <tcp_write+0x6ae>
 8013ae8:	4b06      	ldr	r3, [pc, #24]	; (8013b04 <tcp_write+0x6bc>)
 8013aea:	f240 3227 	movw	r2, #807	; 0x327
 8013aee:	4906      	ldr	r1, [pc, #24]	; (8013b08 <tcp_write+0x6c0>)
 8013af0:	4806      	ldr	r0, [pc, #24]	; (8013b0c <tcp_write+0x6c4>)
 8013af2:	f004 fa0d 	bl	8017f10 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	375c      	adds	r7, #92	; 0x5c
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd90      	pop	{r4, r7, pc}
 8013b02:	bf00      	nop
 8013b04:	0801d154 	.word	0x0801d154
 8013b08:	0801d4c8 	.word	0x0801d4c8
 8013b0c:	0801d1a8 	.word	0x0801d1a8

08013b10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013b10:	b590      	push	{r4, r7, lr}
 8013b12:	b08b      	sub	sp, #44	; 0x2c
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	460b      	mov	r3, r1
 8013b1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	61fb      	str	r3, [r7, #28]
 8013b20:	2300      	movs	r3, #0
 8013b22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013b24:	2300      	movs	r3, #0
 8013b26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d106      	bne.n	8013b3c <tcp_split_unsent_seg+0x2c>
 8013b2e:	4b95      	ldr	r3, [pc, #596]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b30:	f240 324b 	movw	r2, #843	; 0x34b
 8013b34:	4994      	ldr	r1, [pc, #592]	; (8013d88 <tcp_split_unsent_seg+0x278>)
 8013b36:	4895      	ldr	r0, [pc, #596]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b38:	f004 f9ea 	bl	8017f10 <iprintf>

  useg = pcb->unsent;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b4c:	e116      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013b4e:	887b      	ldrh	r3, [r7, #2]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d109      	bne.n	8013b68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013b54:	4b8b      	ldr	r3, [pc, #556]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b56:	f240 3253 	movw	r2, #851	; 0x353
 8013b5a:	498d      	ldr	r1, [pc, #564]	; (8013d90 <tcp_split_unsent_seg+0x280>)
 8013b5c:	488b      	ldr	r0, [pc, #556]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b5e:	f004 f9d7 	bl	8017f10 <iprintf>
    return ERR_VAL;
 8013b62:	f06f 0305 	mvn.w	r3, #5
 8013b66:	e109      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013b68:	697b      	ldr	r3, [r7, #20]
 8013b6a:	891b      	ldrh	r3, [r3, #8]
 8013b6c:	887a      	ldrh	r2, [r7, #2]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d301      	bcc.n	8013b76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	e102      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b7a:	887a      	ldrh	r2, [r7, #2]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d906      	bls.n	8013b8e <tcp_split_unsent_seg+0x7e>
 8013b80:	4b80      	ldr	r3, [pc, #512]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b82:	f240 325b 	movw	r2, #859	; 0x35b
 8013b86:	4983      	ldr	r1, [pc, #524]	; (8013d94 <tcp_split_unsent_seg+0x284>)
 8013b88:	4880      	ldr	r0, [pc, #512]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013b8a:	f004 f9c1 	bl	8017f10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	891b      	ldrh	r3, [r3, #8]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d106      	bne.n	8013ba4 <tcp_split_unsent_seg+0x94>
 8013b96:	4b7b      	ldr	r3, [pc, #492]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013b98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b9c:	497e      	ldr	r1, [pc, #504]	; (8013d98 <tcp_split_unsent_seg+0x288>)
 8013b9e:	487b      	ldr	r0, [pc, #492]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013ba0:	f004 f9b6 	bl	8017f10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	7a9b      	ldrb	r3, [r3, #10]
 8013ba8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013baa:	7bfb      	ldrb	r3, [r7, #15]
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	f003 0304 	and.w	r3, r3, #4
 8013bb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	891a      	ldrh	r2, [r3, #8]
 8013bba:	887b      	ldrh	r3, [r7, #2]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013bc0:	7bbb      	ldrb	r3, [r7, #14]
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	89bb      	ldrh	r3, [r7, #12]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bce:	4619      	mov	r1, r3
 8013bd0:	2036      	movs	r0, #54	; 0x36
 8013bd2:	f7fa fb47 	bl	800e264 <pbuf_alloc>
 8013bd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f000 80b7 	beq.w	8013d4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	891a      	ldrh	r2, [r3, #8]
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	891b      	ldrh	r3, [r3, #8]
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	887b      	ldrh	r3, [r7, #2]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	6858      	ldr	r0, [r3, #4]
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	7bbb      	ldrb	r3, [r7, #14]
 8013bfe:	18d1      	adds	r1, r2, r3
 8013c00:	897b      	ldrh	r3, [r7, #10]
 8013c02:	89ba      	ldrh	r2, [r7, #12]
 8013c04:	f7fb f808 	bl	800ec18 <pbuf_copy_partial>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	89bb      	ldrh	r3, [r7, #12]
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	f040 809f 	bne.w	8013d52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	899b      	ldrh	r3, [r3, #12]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7f9 f8ff 	bl	800ce20 <lwip_htons>
 8013c22:	4603      	mov	r3, r0
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013c30:	7efb      	ldrb	r3, [r7, #27]
 8013c32:	f003 0308 	and.w	r3, r3, #8
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d007      	beq.n	8013c4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013c3a:	7efb      	ldrb	r3, [r7, #27]
 8013c3c:	f023 0308 	bic.w	r3, r3, #8
 8013c40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013c42:	7ebb      	ldrb	r3, [r7, #26]
 8013c44:	f043 0308 	orr.w	r3, r3, #8
 8013c48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013c4a:	7efb      	ldrb	r3, [r7, #27]
 8013c4c:	f003 0301 	and.w	r3, r3, #1
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d007      	beq.n	8013c64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013c54:	7efb      	ldrb	r3, [r7, #27]
 8013c56:	f023 0301 	bic.w	r3, r3, #1
 8013c5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013c5c:	7ebb      	ldrb	r3, [r7, #26]
 8013c5e:	f043 0301 	orr.w	r3, r3, #1
 8013c62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7f9 f8ed 	bl	800ce4a <lwip_htonl>
 8013c70:	4602      	mov	r2, r0
 8013c72:	887b      	ldrh	r3, [r7, #2]
 8013c74:	18d1      	adds	r1, r2, r3
 8013c76:	7eba      	ldrb	r2, [r7, #26]
 8013c78:	7bfb      	ldrb	r3, [r7, #15]
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	6939      	ldr	r1, [r7, #16]
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f7ff fa4f 	bl	8013124 <tcp_create_segment>
 8013c86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d063      	beq.n	8013d56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fa fe58 	bl	800e948 <pbuf_clen>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ca2:	1a9b      	subs	r3, r3, r2
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	6858      	ldr	r0, [r3, #4]
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	685b      	ldr	r3, [r3, #4]
 8013cb4:	891a      	ldrh	r2, [r3, #8]
 8013cb6:	89bb      	ldrh	r3, [r7, #12]
 8013cb8:	1ad3      	subs	r3, r2, r3
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	f7fa fc2f 	bl	800e520 <pbuf_realloc>
  useg->len -= remainder;
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	891a      	ldrh	r2, [r3, #8]
 8013cc6:	89bb      	ldrh	r3, [r7, #12]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29a      	uxth	r2, r3
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	899b      	ldrh	r3, [r3, #12]
 8013cd6:	b29c      	uxth	r4, r3
 8013cd8:	7efb      	ldrb	r3, [r7, #27]
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7f9 f89f 	bl	800ce20 <lwip_htons>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	4322      	orrs	r2, r4
 8013cec:	b292      	uxth	r2, r2
 8013cee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fa fe27 	bl	800e948 <pbuf_clen>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d04:	4413      	add	r3, r2
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7fa fe18 	bl	800e948 <pbuf_clen>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d22:	4413      	add	r3, r2
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	69fa      	ldr	r2, [r7, #28]
 8013d38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d103      	bne.n	8013d4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	e016      	b.n	8013d7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013d4e:	bf00      	nop
 8013d50:	e002      	b.n	8013d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d52:	bf00      	nop
 8013d54:	e000      	b.n	8013d58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d006      	beq.n	8013d6c <tcp_split_unsent_seg+0x25c>
 8013d5e:	4b09      	ldr	r3, [pc, #36]	; (8013d84 <tcp_split_unsent_seg+0x274>)
 8013d60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d64:	490d      	ldr	r1, [pc, #52]	; (8013d9c <tcp_split_unsent_seg+0x28c>)
 8013d66:	4809      	ldr	r0, [pc, #36]	; (8013d8c <tcp_split_unsent_seg+0x27c>)
 8013d68:	f004 f8d2 	bl	8017f10 <iprintf>
  if (p != NULL) {
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d002      	beq.n	8013d78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013d72:	6938      	ldr	r0, [r7, #16]
 8013d74:	f7fa fd5a 	bl	800e82c <pbuf_free>
  }

  return ERR_MEM;
 8013d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3724      	adds	r7, #36	; 0x24
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd90      	pop	{r4, r7, pc}
 8013d84:	0801d154 	.word	0x0801d154
 8013d88:	0801d4e8 	.word	0x0801d4e8
 8013d8c:	0801d1a8 	.word	0x0801d1a8
 8013d90:	0801d50c 	.word	0x0801d50c
 8013d94:	0801d530 	.word	0x0801d530
 8013d98:	0801d540 	.word	0x0801d540
 8013d9c:	0801d550 	.word	0x0801d550

08013da0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b085      	sub	sp, #20
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d106      	bne.n	8013dbc <tcp_send_fin+0x1c>
 8013dae:	4b21      	ldr	r3, [pc, #132]	; (8013e34 <tcp_send_fin+0x94>)
 8013db0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013db4:	4920      	ldr	r1, [pc, #128]	; (8013e38 <tcp_send_fin+0x98>)
 8013db6:	4821      	ldr	r0, [pc, #132]	; (8013e3c <tcp_send_fin+0x9c>)
 8013db8:	f004 f8aa 	bl	8017f10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d02e      	beq.n	8013e22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dc8:	60fb      	str	r3, [r7, #12]
 8013dca:	e002      	b.n	8013dd2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1f8      	bne.n	8013dcc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	68db      	ldr	r3, [r3, #12]
 8013dde:	899b      	ldrh	r3, [r3, #12]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7f9 f81c 	bl	800ce20 <lwip_htons>
 8013de8:	4603      	mov	r3, r0
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	f003 0307 	and.w	r3, r3, #7
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d116      	bne.n	8013e22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	899b      	ldrh	r3, [r3, #12]
 8013dfa:	b29c      	uxth	r4, r3
 8013dfc:	2001      	movs	r0, #1
 8013dfe:	f7f9 f80f 	bl	800ce20 <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	4322      	orrs	r2, r4
 8013e0c:	b292      	uxth	r2, r2
 8013e0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	8b5b      	ldrh	r3, [r3, #26]
 8013e14:	f043 0320 	orr.w	r3, r3, #32
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e004      	b.n	8013e2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013e22:	2101      	movs	r1, #1
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 f80b 	bl	8013e40 <tcp_enqueue_flags>
 8013e2a:	4603      	mov	r3, r0
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3714      	adds	r7, #20
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd90      	pop	{r4, r7, pc}
 8013e34:	0801d154 	.word	0x0801d154
 8013e38:	0801d55c 	.word	0x0801d55c
 8013e3c:	0801d1a8 	.word	0x0801d1a8

08013e40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b08a      	sub	sp, #40	; 0x28
 8013e44:	af02      	add	r7, sp, #8
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e54:	78fb      	ldrb	r3, [r7, #3]
 8013e56:	f003 0303 	and.w	r3, r3, #3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_enqueue_flags+0x2c>
 8013e5e:	4b67      	ldr	r3, [pc, #412]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013e60:	f240 4211 	movw	r2, #1041	; 0x411
 8013e64:	4966      	ldr	r1, [pc, #408]	; (8014000 <tcp_enqueue_flags+0x1c0>)
 8013e66:	4867      	ldr	r0, [pc, #412]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013e68:	f004 f852 	bl	8017f10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d106      	bne.n	8013e80 <tcp_enqueue_flags+0x40>
 8013e72:	4b62      	ldr	r3, [pc, #392]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013e74:	f240 4213 	movw	r2, #1043	; 0x413
 8013e78:	4963      	ldr	r1, [pc, #396]	; (8014008 <tcp_enqueue_flags+0x1c8>)
 8013e7a:	4862      	ldr	r0, [pc, #392]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013e7c:	f004 f848 	bl	8017f10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e80:	78fb      	ldrb	r3, [r7, #3]
 8013e82:	f003 0302 	and.w	r3, r3, #2
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e8e:	7ffb      	ldrb	r3, [r7, #31]
 8013e90:	009b      	lsls	r3, r3, #2
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	f003 0304 	and.w	r3, r3, #4
 8013e98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	2036      	movs	r0, #54	; 0x36
 8013ea6:	f7fa f9dd 	bl	800e264 <pbuf_alloc>
 8013eaa:	6138      	str	r0, [r7, #16]
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d109      	bne.n	8013ec6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	8b5b      	ldrh	r3, [r3, #26]
 8013eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ec4:	e095      	b.n	8013ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013ec6:	693b      	ldr	r3, [r7, #16]
 8013ec8:	895a      	ldrh	r2, [r3, #10]
 8013eca:	7dfb      	ldrb	r3, [r7, #23]
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d206      	bcs.n	8013ee0 <tcp_enqueue_flags+0xa0>
 8013ed2:	4b4a      	ldr	r3, [pc, #296]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013ed4:	f240 4239 	movw	r2, #1081	; 0x439
 8013ed8:	494c      	ldr	r1, [pc, #304]	; (801400c <tcp_enqueue_flags+0x1cc>)
 8013eda:	484a      	ldr	r0, [pc, #296]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013edc:	f004 f818 	bl	8017f10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ee4:	78fa      	ldrb	r2, [r7, #3]
 8013ee6:	7ffb      	ldrb	r3, [r7, #31]
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	460b      	mov	r3, r1
 8013eec:	6939      	ldr	r1, [r7, #16]
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7ff f918 	bl	8013124 <tcp_create_segment>
 8013ef4:	60f8      	str	r0, [r7, #12]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d109      	bne.n	8013f10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f0e:	e070      	b.n	8013ff2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	68db      	ldr	r3, [r3, #12]
 8013f14:	f003 0303 	and.w	r3, r3, #3
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d006      	beq.n	8013f2a <tcp_enqueue_flags+0xea>
 8013f1c:	4b37      	ldr	r3, [pc, #220]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013f1e:	f240 4242 	movw	r2, #1090	; 0x442
 8013f22:	493b      	ldr	r1, [pc, #236]	; (8014010 <tcp_enqueue_flags+0x1d0>)
 8013f24:	4837      	ldr	r0, [pc, #220]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013f26:	f003 fff3 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	891b      	ldrh	r3, [r3, #8]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d006      	beq.n	8013f40 <tcp_enqueue_flags+0x100>
 8013f32:	4b32      	ldr	r3, [pc, #200]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013f34:	f240 4243 	movw	r2, #1091	; 0x443
 8013f38:	4936      	ldr	r1, [pc, #216]	; (8014014 <tcp_enqueue_flags+0x1d4>)
 8013f3a:	4832      	ldr	r0, [pc, #200]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013f3c:	f003 ffe8 	bl	8017f10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d103      	bne.n	8013f50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f4e:	e00d      	b.n	8013f6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f54:	61bb      	str	r3, [r7, #24]
 8013f56:	e002      	b.n	8013f5e <tcp_enqueue_flags+0x11e>
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	61bb      	str	r3, [r7, #24]
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1f8      	bne.n	8013f58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f74:	78fb      	ldrb	r3, [r7, #3]
 8013f76:	f003 0302 	and.w	r3, r3, #2
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d104      	bne.n	8013f88 <tcp_enqueue_flags+0x148>
 8013f7e:	78fb      	ldrb	r3, [r7, #3]
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d004      	beq.n	8013f92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f8c:	1c5a      	adds	r2, r3, #1
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f92:	78fb      	ldrb	r3, [r7, #3]
 8013f94:	f003 0301 	and.w	r3, r3, #1
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d006      	beq.n	8013faa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f043 0320 	orr.w	r3, r3, #32
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fa fcca 	bl	800e948 <pbuf_clen>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fbe:	4413      	add	r3, r2
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00e      	beq.n	8013ff0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d10a      	bne.n	8013ff0 <tcp_enqueue_flags+0x1b0>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d106      	bne.n	8013ff0 <tcp_enqueue_flags+0x1b0>
 8013fe2:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <tcp_enqueue_flags+0x1bc>)
 8013fe4:	f240 4265 	movw	r2, #1125	; 0x465
 8013fe8:	490b      	ldr	r1, [pc, #44]	; (8014018 <tcp_enqueue_flags+0x1d8>)
 8013fea:	4806      	ldr	r0, [pc, #24]	; (8014004 <tcp_enqueue_flags+0x1c4>)
 8013fec:	f003 ff90 	bl	8017f10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013ff0:	2300      	movs	r3, #0
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3720      	adds	r7, #32
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	0801d154 	.word	0x0801d154
 8014000:	0801d578 	.word	0x0801d578
 8014004:	0801d1a8 	.word	0x0801d1a8
 8014008:	0801d5d0 	.word	0x0801d5d0
 801400c:	0801d5f0 	.word	0x0801d5f0
 8014010:	0801d62c 	.word	0x0801d62c
 8014014:	0801d644 	.word	0x0801d644
 8014018:	0801d670 	.word	0x0801d670

0801401c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801401c:	b5b0      	push	{r4, r5, r7, lr}
 801401e:	b08a      	sub	sp, #40	; 0x28
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d106      	bne.n	8014038 <tcp_output+0x1c>
 801402a:	4b8a      	ldr	r3, [pc, #552]	; (8014254 <tcp_output+0x238>)
 801402c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014030:	4989      	ldr	r1, [pc, #548]	; (8014258 <tcp_output+0x23c>)
 8014032:	488a      	ldr	r0, [pc, #552]	; (801425c <tcp_output+0x240>)
 8014034:	f003 ff6c 	bl	8017f10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	7d1b      	ldrb	r3, [r3, #20]
 801403c:	2b01      	cmp	r3, #1
 801403e:	d106      	bne.n	801404e <tcp_output+0x32>
 8014040:	4b84      	ldr	r3, [pc, #528]	; (8014254 <tcp_output+0x238>)
 8014042:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014046:	4986      	ldr	r1, [pc, #536]	; (8014260 <tcp_output+0x244>)
 8014048:	4884      	ldr	r0, [pc, #528]	; (801425c <tcp_output+0x240>)
 801404a:	f003 ff61 	bl	8017f10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801404e:	4b85      	ldr	r3, [pc, #532]	; (8014264 <tcp_output+0x248>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	429a      	cmp	r2, r3
 8014056:	d101      	bne.n	801405c <tcp_output+0x40>
    return ERR_OK;
 8014058:	2300      	movs	r3, #0
 801405a:	e1ce      	b.n	80143fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014068:	4293      	cmp	r3, r2
 801406a:	bf28      	it	cs
 801406c:	4613      	movcs	r3, r2
 801406e:	b29b      	uxth	r3, r3
 8014070:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014076:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10b      	bne.n	8014096 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	8b5b      	ldrh	r3, [r3, #26]
 8014082:	f003 0302 	and.w	r3, r3, #2
 8014086:	2b00      	cmp	r3, #0
 8014088:	f000 81aa 	beq.w	80143e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f000 fded 	bl	8014c6c <tcp_send_empty_ack>
 8014092:	4603      	mov	r3, r0
 8014094:	e1b1      	b.n	80143fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014096:	6879      	ldr	r1, [r7, #4]
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	3304      	adds	r3, #4
 801409c:	461a      	mov	r2, r3
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ff f824 	bl	80130ec <tcp_route>
 80140a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <tcp_output+0x96>
    return ERR_RTE;
 80140ac:	f06f 0303 	mvn.w	r3, #3
 80140b0:	e1a3      	b.n	80143fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d003      	beq.n	80140c0 <tcp_output+0xa4>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d111      	bne.n	80140e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d002      	beq.n	80140cc <tcp_output+0xb0>
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	3304      	adds	r3, #4
 80140ca:	e000      	b.n	80140ce <tcp_output+0xb2>
 80140cc:	2300      	movs	r3, #0
 80140ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d102      	bne.n	80140dc <tcp_output+0xc0>
      return ERR_RTE;
 80140d6:	f06f 0303 	mvn.w	r3, #3
 80140da:	e18e      	b.n	80143fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80140e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e6:	68db      	ldr	r3, [r3, #12]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	4618      	mov	r0, r3
 80140ec:	f7f8 fead 	bl	800ce4a <lwip_htonl>
 80140f0:	4602      	mov	r2, r0
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140fa:	8912      	ldrh	r2, [r2, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	69ba      	ldr	r2, [r7, #24]
 8014100:	429a      	cmp	r2, r3
 8014102:	d227      	bcs.n	8014154 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801410a:	461a      	mov	r2, r3
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	4293      	cmp	r3, r2
 8014110:	d114      	bne.n	801413c <tcp_output+0x120>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014116:	2b00      	cmp	r3, #0
 8014118:	d110      	bne.n	801413c <tcp_output+0x120>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10b      	bne.n	801413c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2201      	movs	r2, #1
 8014130:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2200      	movs	r2, #0
 8014138:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	8b5b      	ldrh	r3, [r3, #26]
 8014140:	f003 0302 	and.w	r3, r3, #2
 8014144:	2b00      	cmp	r3, #0
 8014146:	f000 814d 	beq.w	80143e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 fd8e 	bl	8014c6c <tcp_send_empty_ack>
 8014150:	4603      	mov	r3, r0
 8014152:	e152      	b.n	80143fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2200      	movs	r2, #0
 8014158:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014160:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	2b00      	cmp	r3, #0
 8014166:	f000 811c 	beq.w	80143a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801416a:	e002      	b.n	8014172 <tcp_output+0x156>
 801416c:	6a3b      	ldr	r3, [r7, #32]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	623b      	str	r3, [r7, #32]
 8014172:	6a3b      	ldr	r3, [r7, #32]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d1f8      	bne.n	801416c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801417a:	e112      	b.n	80143a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	899b      	ldrh	r3, [r3, #12]
 8014182:	b29b      	uxth	r3, r3
 8014184:	4618      	mov	r0, r3
 8014186:	f7f8 fe4b 	bl	800ce20 <lwip_htons>
 801418a:	4603      	mov	r3, r0
 801418c:	b2db      	uxtb	r3, r3
 801418e:	f003 0304 	and.w	r3, r3, #4
 8014192:	2b00      	cmp	r3, #0
 8014194:	d006      	beq.n	80141a4 <tcp_output+0x188>
 8014196:	4b2f      	ldr	r3, [pc, #188]	; (8014254 <tcp_output+0x238>)
 8014198:	f240 5236 	movw	r2, #1334	; 0x536
 801419c:	4932      	ldr	r1, [pc, #200]	; (8014268 <tcp_output+0x24c>)
 801419e:	482f      	ldr	r0, [pc, #188]	; (801425c <tcp_output+0x240>)
 80141a0:	f003 feb6 	bl	8017f10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d01f      	beq.n	80141ec <tcp_output+0x1d0>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8b5b      	ldrh	r3, [r3, #26]
 80141b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d119      	bne.n	80141ec <tcp_output+0x1d0>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d00b      	beq.n	80141d8 <tcp_output+0x1bc>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d110      	bne.n	80141ec <tcp_output+0x1d0>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ce:	891a      	ldrh	r2, [r3, #8]
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d209      	bcs.n	80141ec <tcp_output+0x1d0>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d004      	beq.n	80141ec <tcp_output+0x1d0>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141e8:	2b08      	cmp	r3, #8
 80141ea:	d901      	bls.n	80141f0 <tcp_output+0x1d4>
 80141ec:	2301      	movs	r3, #1
 80141ee:	e000      	b.n	80141f2 <tcp_output+0x1d6>
 80141f0:	2300      	movs	r3, #0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8b5b      	ldrh	r3, [r3, #26]
 80141fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 80e4 	beq.w	80143cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7d1b      	ldrb	r3, [r3, #20]
 8014208:	2b02      	cmp	r3, #2
 801420a:	d00d      	beq.n	8014228 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	899b      	ldrh	r3, [r3, #12]
 8014212:	b29c      	uxth	r4, r3
 8014214:	2010      	movs	r0, #16
 8014216:	f7f8 fe03 	bl	800ce20 <lwip_htons>
 801421a:	4603      	mov	r3, r0
 801421c:	461a      	mov	r2, r3
 801421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	4322      	orrs	r2, r4
 8014224:	b292      	uxth	r2, r2
 8014226:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014228:	697a      	ldr	r2, [r7, #20]
 801422a:	6879      	ldr	r1, [r7, #4]
 801422c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801422e:	f000 f909 	bl	8014444 <tcp_output_segment>
 8014232:	4603      	mov	r3, r0
 8014234:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d016      	beq.n	801426c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
      return err;
 801424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014250:	e0d3      	b.n	80143fa <tcp_output+0x3de>
 8014252:	bf00      	nop
 8014254:	0801d154 	.word	0x0801d154
 8014258:	0801d698 	.word	0x0801d698
 801425c:	0801d1a8 	.word	0x0801d1a8
 8014260:	0801d6b0 	.word	0x0801d6b0
 8014264:	20011c00 	.word	0x20011c00
 8014268:	0801d6d8 	.word	0x0801d6d8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7d1b      	ldrb	r3, [r3, #20]
 8014278:	2b02      	cmp	r3, #2
 801427a:	d006      	beq.n	801428a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	8b5b      	ldrh	r3, [r3, #26]
 8014280:	f023 0303 	bic.w	r3, r3, #3
 8014284:	b29a      	uxth	r2, r3
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	4618      	mov	r0, r3
 8014292:	f7f8 fdda 	bl	800ce4a <lwip_htonl>
 8014296:	4604      	mov	r4, r0
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	891b      	ldrh	r3, [r3, #8]
 801429c:	461d      	mov	r5, r3
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	68db      	ldr	r3, [r3, #12]
 80142a2:	899b      	ldrh	r3, [r3, #12]
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f8 fdba 	bl	800ce20 <lwip_htons>
 80142ac:	4603      	mov	r3, r0
 80142ae:	b2db      	uxtb	r3, r3
 80142b0:	f003 0303 	and.w	r3, r3, #3
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d001      	beq.n	80142bc <tcp_output+0x2a0>
 80142b8:	2301      	movs	r3, #1
 80142ba:	e000      	b.n	80142be <tcp_output+0x2a2>
 80142bc:	2300      	movs	r3, #0
 80142be:	442b      	add	r3, r5
 80142c0:	4423      	add	r3, r4
 80142c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	1ad3      	subs	r3, r2, r3
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	da02      	bge.n	80142d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	68ba      	ldr	r2, [r7, #8]
 80142d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	461c      	mov	r4, r3
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7f8 fd9b 	bl	800ce20 <lwip_htons>
 80142ea:	4603      	mov	r3, r0
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	f003 0303 	and.w	r3, r3, #3
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <tcp_output+0x2de>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e000      	b.n	80142fc <tcp_output+0x2e0>
 80142fa:	2300      	movs	r3, #0
 80142fc:	4423      	add	r3, r4
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d049      	beq.n	8014396 <tcp_output+0x37a>
      seg->next = NULL;
 8014302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801430c:	2b00      	cmp	r3, #0
 801430e:	d105      	bne.n	801431c <tcp_output+0x300>
        pcb->unacked = seg;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014314:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	623b      	str	r3, [r7, #32]
 801431a:	e03f      	b.n	801439c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	685b      	ldr	r3, [r3, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	f7f8 fd91 	bl	800ce4a <lwip_htonl>
 8014328:	4604      	mov	r4, r0
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	68db      	ldr	r3, [r3, #12]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	f7f8 fd8a 	bl	800ce4a <lwip_htonl>
 8014336:	4603      	mov	r3, r0
 8014338:	1ae3      	subs	r3, r4, r3
 801433a:	2b00      	cmp	r3, #0
 801433c:	da24      	bge.n	8014388 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	3370      	adds	r3, #112	; 0x70
 8014342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014344:	e002      	b.n	801434c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801434c:	69fb      	ldr	r3, [r7, #28]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d011      	beq.n	8014378 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	68db      	ldr	r3, [r3, #12]
 801435a:	685b      	ldr	r3, [r3, #4]
 801435c:	4618      	mov	r0, r3
 801435e:	f7f8 fd74 	bl	800ce4a <lwip_htonl>
 8014362:	4604      	mov	r4, r0
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	4618      	mov	r0, r3
 801436c:	f7f8 fd6d 	bl	800ce4a <lwip_htonl>
 8014370:	4603      	mov	r3, r0
 8014372:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014374:	2b00      	cmp	r3, #0
 8014376:	dbe6      	blt.n	8014346 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014384:	601a      	str	r2, [r3, #0]
 8014386:	e009      	b.n	801439c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801438c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801438e:	6a3b      	ldr	r3, [r7, #32]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	623b      	str	r3, [r7, #32]
 8014394:	e002      	b.n	801439c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014398:	f7fb ff19 	bl	80101ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d012      	beq.n	80143ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80143a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f8 fd4b 	bl	800ce4a <lwip_htonl>
 80143b4:	4602      	mov	r2, r0
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ba:	1ad3      	subs	r3, r2, r3
 80143bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143be:	8912      	ldrh	r2, [r2, #8]
 80143c0:	4413      	add	r3, r2
  while (seg != NULL &&
 80143c2:	69ba      	ldr	r2, [r7, #24]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	f4bf aed9 	bcs.w	801417c <tcp_output+0x160>
 80143ca:	e000      	b.n	80143ce <tcp_output+0x3b2>
      break;
 80143cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d108      	bne.n	80143e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2200      	movs	r2, #0
 80143da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80143de:	e004      	b.n	80143ea <tcp_output+0x3ce>
    goto output_done;
 80143e0:	bf00      	nop
 80143e2:	e002      	b.n	80143ea <tcp_output+0x3ce>
    goto output_done;
 80143e4:	bf00      	nop
 80143e6:	e000      	b.n	80143ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80143e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	8b5b      	ldrh	r3, [r3, #26]
 80143ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3728      	adds	r7, #40	; 0x28
 80143fe:	46bd      	mov	sp, r7
 8014400:	bdb0      	pop	{r4, r5, r7, pc}
 8014402:	bf00      	nop

08014404 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d106      	bne.n	8014420 <tcp_output_segment_busy+0x1c>
 8014412:	4b09      	ldr	r3, [pc, #36]	; (8014438 <tcp_output_segment_busy+0x34>)
 8014414:	f240 529a 	movw	r2, #1434	; 0x59a
 8014418:	4908      	ldr	r1, [pc, #32]	; (801443c <tcp_output_segment_busy+0x38>)
 801441a:	4809      	ldr	r0, [pc, #36]	; (8014440 <tcp_output_segment_busy+0x3c>)
 801441c:	f003 fd78 	bl	8017f10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	7b9b      	ldrb	r3, [r3, #14]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d001      	beq.n	801442e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801442a:	2301      	movs	r3, #1
 801442c:	e000      	b.n	8014430 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3708      	adds	r7, #8
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}
 8014438:	0801d154 	.word	0x0801d154
 801443c:	0801d6f0 	.word	0x0801d6f0
 8014440:	0801d1a8 	.word	0x0801d1a8

08014444 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014444:	b5b0      	push	{r4, r5, r7, lr}
 8014446:	b08c      	sub	sp, #48	; 0x30
 8014448:	af04      	add	r7, sp, #16
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d106      	bne.n	8014464 <tcp_output_segment+0x20>
 8014456:	4b6c      	ldr	r3, [pc, #432]	; (8014608 <tcp_output_segment+0x1c4>)
 8014458:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801445c:	496b      	ldr	r1, [pc, #428]	; (801460c <tcp_output_segment+0x1c8>)
 801445e:	486c      	ldr	r0, [pc, #432]	; (8014610 <tcp_output_segment+0x1cc>)
 8014460:	f003 fd56 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d106      	bne.n	8014478 <tcp_output_segment+0x34>
 801446a:	4b67      	ldr	r3, [pc, #412]	; (8014608 <tcp_output_segment+0x1c4>)
 801446c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014470:	4968      	ldr	r1, [pc, #416]	; (8014614 <tcp_output_segment+0x1d0>)
 8014472:	4867      	ldr	r0, [pc, #412]	; (8014610 <tcp_output_segment+0x1cc>)
 8014474:	f003 fd4c 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d106      	bne.n	801448c <tcp_output_segment+0x48>
 801447e:	4b62      	ldr	r3, [pc, #392]	; (8014608 <tcp_output_segment+0x1c4>)
 8014480:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014484:	4964      	ldr	r1, [pc, #400]	; (8014618 <tcp_output_segment+0x1d4>)
 8014486:	4862      	ldr	r0, [pc, #392]	; (8014610 <tcp_output_segment+0x1cc>)
 8014488:	f003 fd42 	bl	8017f10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801448c:	68f8      	ldr	r0, [r7, #12]
 801448e:	f7ff ffb9 	bl	8014404 <tcp_output_segment_busy>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d001      	beq.n	801449c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	e0b1      	b.n	8014600 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	68dc      	ldr	r4, [r3, #12]
 80144a4:	4610      	mov	r0, r2
 80144a6:	f7f8 fcd0 	bl	800ce4a <lwip_htonl>
 80144aa:	4603      	mov	r3, r0
 80144ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	68dc      	ldr	r4, [r3, #12]
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7f8 fcb2 	bl	800ce20 <lwip_htons>
 80144bc:	4603      	mov	r3, r0
 80144be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c4:	68ba      	ldr	r2, [r7, #8]
 80144c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144c8:	441a      	add	r2, r3
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	3314      	adds	r3, #20
 80144d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	7a9b      	ldrb	r3, [r3, #10]
 80144da:	f003 0301 	and.w	r3, r3, #1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d015      	beq.n	801450e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	3304      	adds	r3, #4
 80144e6:	461a      	mov	r2, r3
 80144e8:	6879      	ldr	r1, [r7, #4]
 80144ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144ee:	f7fc fa33 	bl	8010958 <tcp_eff_send_mss_netif>
 80144f2:	4603      	mov	r3, r0
 80144f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144f6:	8b7b      	ldrh	r3, [r7, #26]
 80144f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f8 fca4 	bl	800ce4a <lwip_htonl>
 8014502:	4602      	mov	r2, r0
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	3304      	adds	r3, #4
 801450c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014514:	2b00      	cmp	r3, #0
 8014516:	da02      	bge.n	801451e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2200      	movs	r2, #0
 801451c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014522:	2b00      	cmp	r3, #0
 8014524:	d10c      	bne.n	8014540 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014526:	4b3d      	ldr	r3, [pc, #244]	; (801461c <tcp_output_segment+0x1d8>)
 8014528:	681a      	ldr	r2, [r3, #0]
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	4618      	mov	r0, r3
 8014536:	f7f8 fc88 	bl	800ce4a <lwip_htonl>
 801453a:	4602      	mov	r2, r0
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	68da      	ldr	r2, [r3, #12]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	1ad3      	subs	r3, r2, r3
 801454c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	8959      	ldrh	r1, [r3, #10]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	8b3a      	ldrh	r2, [r7, #24]
 801455a:	1a8a      	subs	r2, r1, r2
 801455c:	b292      	uxth	r2, r2
 801455e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	8919      	ldrh	r1, [r3, #8]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	8b3a      	ldrh	r2, [r7, #24]
 801456c:	1a8a      	subs	r2, r1, r2
 801456e:	b292      	uxth	r2, r2
 8014570:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	685b      	ldr	r3, [r3, #4]
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	68d2      	ldr	r2, [r2, #12]
 801457a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	741a      	strb	r2, [r3, #16]
 8014584:	2200      	movs	r2, #0
 8014586:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	68db      	ldr	r3, [r3, #12]
 801458c:	f103 0214 	add.w	r2, r3, #20
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	7a9b      	ldrb	r3, [r3, #10]
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	f003 0304 	and.w	r3, r3, #4
 801459a:	4413      	add	r3, r2
 801459c:	69fa      	ldr	r2, [r7, #28]
 801459e:	429a      	cmp	r2, r3
 80145a0:	d006      	beq.n	80145b0 <tcp_output_segment+0x16c>
 80145a2:	4b19      	ldr	r3, [pc, #100]	; (8014608 <tcp_output_segment+0x1c4>)
 80145a4:	f240 621c 	movw	r2, #1564	; 0x61c
 80145a8:	491d      	ldr	r1, [pc, #116]	; (8014620 <tcp_output_segment+0x1dc>)
 80145aa:	4819      	ldr	r0, [pc, #100]	; (8014610 <tcp_output_segment+0x1cc>)
 80145ac:	f003 fcb0 	bl	8017f10 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80145b8:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80145ba:	68bd      	ldr	r5, [r7, #8]
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	68d4      	ldr	r4, [r2, #12]
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	462b      	mov	r3, r5
 80145c8:	460a      	mov	r2, r1
 80145ca:	2106      	movs	r1, #6
 80145cc:	f7f8 fd5a 	bl	800d084 <ip_chksum_pseudo>
 80145d0:	4603      	mov	r3, r0
 80145d2:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	6858      	ldr	r0, [r3, #4]
 80145d8:	68b9      	ldr	r1, [r7, #8]
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	1d1c      	adds	r4, r3, #4
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	7add      	ldrb	r5, [r3, #11]
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	7a9b      	ldrb	r3, [r3, #10]
 80145e6:	687a      	ldr	r2, [r7, #4]
 80145e8:	9202      	str	r2, [sp, #8]
 80145ea:	2206      	movs	r2, #6
 80145ec:	9201      	str	r2, [sp, #4]
 80145ee:	9300      	str	r3, [sp, #0]
 80145f0:	462b      	mov	r3, r5
 80145f2:	4622      	mov	r2, r4
 80145f4:	f002 f8b2 	bl	801675c <ip4_output_if>
 80145f8:	4603      	mov	r3, r0
 80145fa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014600:	4618      	mov	r0, r3
 8014602:	3720      	adds	r7, #32
 8014604:	46bd      	mov	sp, r7
 8014606:	bdb0      	pop	{r4, r5, r7, pc}
 8014608:	0801d154 	.word	0x0801d154
 801460c:	0801d718 	.word	0x0801d718
 8014610:	0801d1a8 	.word	0x0801d1a8
 8014614:	0801d738 	.word	0x0801d738
 8014618:	0801d758 	.word	0x0801d758
 801461c:	20011bb4 	.word	0x20011bb4
 8014620:	0801d77c 	.word	0x0801d77c

08014624 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014624:	b5b0      	push	{r4, r5, r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <tcp_rexmit_rto_prepare+0x1c>
 8014632:	4b31      	ldr	r3, [pc, #196]	; (80146f8 <tcp_rexmit_rto_prepare+0xd4>)
 8014634:	f240 6263 	movw	r2, #1635	; 0x663
 8014638:	4930      	ldr	r1, [pc, #192]	; (80146fc <tcp_rexmit_rto_prepare+0xd8>)
 801463a:	4831      	ldr	r0, [pc, #196]	; (8014700 <tcp_rexmit_rto_prepare+0xdc>)
 801463c:	f003 fc68 	bl	8017f10 <iprintf>

  if (pcb->unacked == NULL) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014644:	2b00      	cmp	r3, #0
 8014646:	d102      	bne.n	801464e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014648:	f06f 0305 	mvn.w	r3, #5
 801464c:	e050      	b.n	80146f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014652:	60fb      	str	r3, [r7, #12]
 8014654:	e00b      	b.n	801466e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	f7ff fed4 	bl	8014404 <tcp_output_segment_busy>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d002      	beq.n	8014668 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014662:	f06f 0305 	mvn.w	r3, #5
 8014666:	e043      	b.n	80146f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1ef      	bne.n	8014656 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f7ff fec4 	bl	8014404 <tcp_output_segment_busy>
 801467c:	4603      	mov	r3, r0
 801467e:	2b00      	cmp	r3, #0
 8014680:	d002      	beq.n	8014688 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014682:	f06f 0305 	mvn.w	r3, #5
 8014686:	e033      	b.n	80146f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2200      	movs	r2, #0
 801469c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	8b5b      	ldrh	r3, [r3, #26]
 80146a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7f8 fbc9 	bl	800ce4a <lwip_htonl>
 80146b8:	4604      	mov	r4, r0
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	891b      	ldrh	r3, [r3, #8]
 80146be:	461d      	mov	r5, r3
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	899b      	ldrh	r3, [r3, #12]
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7f8 fba9 	bl	800ce20 <lwip_htons>
 80146ce:	4603      	mov	r3, r0
 80146d0:	b2db      	uxtb	r3, r3
 80146d2:	f003 0303 	and.w	r3, r3, #3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <tcp_rexmit_rto_prepare+0xba>
 80146da:	2301      	movs	r3, #1
 80146dc:	e000      	b.n	80146e0 <tcp_rexmit_rto_prepare+0xbc>
 80146de:	2300      	movs	r3, #0
 80146e0:	442b      	add	r3, r5
 80146e2:	18e2      	adds	r2, r4, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2200      	movs	r2, #0
 80146ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80146ee:	2300      	movs	r3, #0
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bdb0      	pop	{r4, r5, r7, pc}
 80146f8:	0801d154 	.word	0x0801d154
 80146fc:	0801d790 	.word	0x0801d790
 8014700:	0801d1a8 	.word	0x0801d1a8

08014704 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <tcp_rexmit_rto_commit+0x1c>
 8014712:	4b0d      	ldr	r3, [pc, #52]	; (8014748 <tcp_rexmit_rto_commit+0x44>)
 8014714:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014718:	490c      	ldr	r1, [pc, #48]	; (801474c <tcp_rexmit_rto_commit+0x48>)
 801471a:	480d      	ldr	r0, [pc, #52]	; (8014750 <tcp_rexmit_rto_commit+0x4c>)
 801471c:	f003 fbf8 	bl	8017f10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014726:	2bff      	cmp	r3, #255	; 0xff
 8014728:	d007      	beq.n	801473a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014730:	3301      	adds	r3, #1
 8014732:	b2da      	uxtb	r2, r3
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f7ff fc6e 	bl	801401c <tcp_output>
}
 8014740:	bf00      	nop
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	0801d154 	.word	0x0801d154
 801474c:	0801d7b4 	.word	0x0801d7b4
 8014750:	0801d1a8 	.word	0x0801d1a8

08014754 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d106      	bne.n	8014770 <tcp_rexmit_rto+0x1c>
 8014762:	4b0a      	ldr	r3, [pc, #40]	; (801478c <tcp_rexmit_rto+0x38>)
 8014764:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014768:	4909      	ldr	r1, [pc, #36]	; (8014790 <tcp_rexmit_rto+0x3c>)
 801476a:	480a      	ldr	r0, [pc, #40]	; (8014794 <tcp_rexmit_rto+0x40>)
 801476c:	f003 fbd0 	bl	8017f10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7ff ff57 	bl	8014624 <tcp_rexmit_rto_prepare>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d102      	bne.n	8014782 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff ffc1 	bl	8014704 <tcp_rexmit_rto_commit>
  }
}
 8014782:	bf00      	nop
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	0801d154 	.word	0x0801d154
 8014790:	0801d7d8 	.word	0x0801d7d8
 8014794:	0801d1a8 	.word	0x0801d1a8

08014798 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014798:	b590      	push	{r4, r7, lr}
 801479a:	b085      	sub	sp, #20
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_rexmit+0x1c>
 80147a6:	4b2f      	ldr	r3, [pc, #188]	; (8014864 <tcp_rexmit+0xcc>)
 80147a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80147ac:	492e      	ldr	r1, [pc, #184]	; (8014868 <tcp_rexmit+0xd0>)
 80147ae:	482f      	ldr	r0, [pc, #188]	; (801486c <tcp_rexmit+0xd4>)
 80147b0:	f003 fbae 	bl	8017f10 <iprintf>

  if (pcb->unacked == NULL) {
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80147bc:	f06f 0305 	mvn.w	r3, #5
 80147c0:	e04c      	b.n	801485c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80147c8:	68b8      	ldr	r0, [r7, #8]
 80147ca:	f7ff fe1b 	bl	8014404 <tcp_output_segment_busy>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d002      	beq.n	80147da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80147d4:	f06f 0305 	mvn.w	r3, #5
 80147d8:	e040      	b.n	801485c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	336c      	adds	r3, #108	; 0x6c
 80147e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147e8:	e002      	b.n	80147f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d011      	beq.n	801481c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	f7f8 fb22 	bl	800ce4a <lwip_htonl>
 8014806:	4604      	mov	r4, r0
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	4618      	mov	r0, r3
 8014810:	f7f8 fb1b 	bl	800ce4a <lwip_htonl>
 8014814:	4603      	mov	r3, r0
 8014816:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014818:	2b00      	cmp	r3, #0
 801481a:	dbe6      	blt.n	80147ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	68ba      	ldr	r2, [r7, #8]
 8014828:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d103      	bne.n	801483a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2200      	movs	r2, #0
 8014836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014840:	2bff      	cmp	r3, #255	; 0xff
 8014842:	d007      	beq.n	8014854 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801484a:	3301      	adds	r3, #1
 801484c:	b2da      	uxtb	r2, r3
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2200      	movs	r2, #0
 8014858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	3714      	adds	r7, #20
 8014860:	46bd      	mov	sp, r7
 8014862:	bd90      	pop	{r4, r7, pc}
 8014864:	0801d154 	.word	0x0801d154
 8014868:	0801d7f4 	.word	0x0801d7f4
 801486c:	0801d1a8 	.word	0x0801d1a8

08014870 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d106      	bne.n	801488c <tcp_rexmit_fast+0x1c>
 801487e:	4b2a      	ldr	r3, [pc, #168]	; (8014928 <tcp_rexmit_fast+0xb8>)
 8014880:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014884:	4929      	ldr	r1, [pc, #164]	; (801492c <tcp_rexmit_fast+0xbc>)
 8014886:	482a      	ldr	r0, [pc, #168]	; (8014930 <tcp_rexmit_fast+0xc0>)
 8014888:	f003 fb42 	bl	8017f10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014890:	2b00      	cmp	r3, #0
 8014892:	d045      	beq.n	8014920 <tcp_rexmit_fast+0xb0>
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	8b5b      	ldrh	r3, [r3, #26]
 8014898:	f003 0304 	and.w	r3, r3, #4
 801489c:	2b00      	cmp	r3, #0
 801489e:	d13f      	bne.n	8014920 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff ff79 	bl	8014798 <tcp_rexmit>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d139      	bne.n	8014920 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80148b8:	4293      	cmp	r3, r2
 80148ba:	bf28      	it	cs
 80148bc:	4613      	movcs	r3, r2
 80148be:	b29b      	uxth	r3, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	da00      	bge.n	80148c6 <tcp_rexmit_fast+0x56>
 80148c4:	3301      	adds	r3, #1
 80148c6:	105b      	asrs	r3, r3, #1
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80148d6:	461a      	mov	r2, r3
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	429a      	cmp	r2, r3
 80148e0:	d206      	bcs.n	80148f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148e6:	005b      	lsls	r3, r3, #1
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148fa:	4619      	mov	r1, r3
 80148fc:	0049      	lsls	r1, r1, #1
 80148fe:	440b      	add	r3, r1
 8014900:	b29b      	uxth	r3, r3
 8014902:	4413      	add	r3, r2
 8014904:	b29a      	uxth	r2, r3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	8b5b      	ldrh	r3, [r3, #26]
 8014910:	f043 0304 	orr.w	r3, r3, #4
 8014914:	b29a      	uxth	r2, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2200      	movs	r2, #0
 801491e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014920:	bf00      	nop
 8014922:	3708      	adds	r7, #8
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	0801d154 	.word	0x0801d154
 801492c:	0801d80c 	.word	0x0801d80c
 8014930:	0801d1a8 	.word	0x0801d1a8

08014934 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b086      	sub	sp, #24
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	607b      	str	r3, [r7, #4]
 801493e:	460b      	mov	r3, r1
 8014940:	817b      	strh	r3, [r7, #10]
 8014942:	4613      	mov	r3, r2
 8014944:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014946:	897a      	ldrh	r2, [r7, #10]
 8014948:	893b      	ldrh	r3, [r7, #8]
 801494a:	4413      	add	r3, r2
 801494c:	b29b      	uxth	r3, r3
 801494e:	3314      	adds	r3, #20
 8014950:	b29b      	uxth	r3, r3
 8014952:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014956:	4619      	mov	r1, r3
 8014958:	2022      	movs	r0, #34	; 0x22
 801495a:	f7f9 fc83 	bl	800e264 <pbuf_alloc>
 801495e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d04d      	beq.n	8014a02 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014966:	897b      	ldrh	r3, [r7, #10]
 8014968:	3313      	adds	r3, #19
 801496a:	697a      	ldr	r2, [r7, #20]
 801496c:	8952      	ldrh	r2, [r2, #10]
 801496e:	4293      	cmp	r3, r2
 8014970:	db06      	blt.n	8014980 <tcp_output_alloc_header_common+0x4c>
 8014972:	4b26      	ldr	r3, [pc, #152]	; (8014a0c <tcp_output_alloc_header_common+0xd8>)
 8014974:	f240 7223 	movw	r2, #1827	; 0x723
 8014978:	4925      	ldr	r1, [pc, #148]	; (8014a10 <tcp_output_alloc_header_common+0xdc>)
 801497a:	4826      	ldr	r0, [pc, #152]	; (8014a14 <tcp_output_alloc_header_common+0xe0>)
 801497c:	f003 fac8 	bl	8017f10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014986:	8c3b      	ldrh	r3, [r7, #32]
 8014988:	4618      	mov	r0, r3
 801498a:	f7f8 fa49 	bl	800ce20 <lwip_htons>
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014998:	4618      	mov	r0, r3
 801499a:	f7f8 fa41 	bl	800ce20 <lwip_htons>
 801499e:	4603      	mov	r3, r0
 80149a0:	461a      	mov	r2, r3
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80149ac:	68f8      	ldr	r0, [r7, #12]
 80149ae:	f7f8 fa4c 	bl	800ce4a <lwip_htonl>
 80149b2:	4602      	mov	r2, r0
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80149b8:	897b      	ldrh	r3, [r7, #10]
 80149ba:	089b      	lsrs	r3, r3, #2
 80149bc:	b29b      	uxth	r3, r3
 80149be:	3305      	adds	r3, #5
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	031b      	lsls	r3, r3, #12
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	4313      	orrs	r3, r2
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f8 fa25 	bl	800ce20 <lwip_htons>
 80149d6:	4603      	mov	r3, r0
 80149d8:	461a      	mov	r2, r3
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80149de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7f8 fa1d 	bl	800ce20 <lwip_htons>
 80149e6:	4603      	mov	r3, r0
 80149e8:	461a      	mov	r2, r3
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	2200      	movs	r2, #0
 80149f2:	741a      	strb	r2, [r3, #16]
 80149f4:	2200      	movs	r2, #0
 80149f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	2200      	movs	r2, #0
 80149fc:	749a      	strb	r2, [r3, #18]
 80149fe:	2200      	movs	r2, #0
 8014a00:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014a02:	697b      	ldr	r3, [r7, #20]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3718      	adds	r7, #24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	0801d154 	.word	0x0801d154
 8014a10:	0801d82c 	.word	0x0801d82c
 8014a14:	0801d1a8 	.word	0x0801d1a8

08014a18 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014a18:	b5b0      	push	{r4, r5, r7, lr}
 8014a1a:	b08a      	sub	sp, #40	; 0x28
 8014a1c:	af04      	add	r7, sp, #16
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	607b      	str	r3, [r7, #4]
 8014a22:	460b      	mov	r3, r1
 8014a24:	817b      	strh	r3, [r7, #10]
 8014a26:	4613      	mov	r3, r2
 8014a28:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d106      	bne.n	8014a3e <tcp_output_alloc_header+0x26>
 8014a30:	4b15      	ldr	r3, [pc, #84]	; (8014a88 <tcp_output_alloc_header+0x70>)
 8014a32:	f240 7242 	movw	r2, #1858	; 0x742
 8014a36:	4915      	ldr	r1, [pc, #84]	; (8014a8c <tcp_output_alloc_header+0x74>)
 8014a38:	4815      	ldr	r0, [pc, #84]	; (8014a90 <tcp_output_alloc_header+0x78>)
 8014a3a:	f003 fa69 	bl	8017f10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	8adb      	ldrh	r3, [r3, #22]
 8014a46:	68fa      	ldr	r2, [r7, #12]
 8014a48:	8b12      	ldrh	r2, [r2, #24]
 8014a4a:	68f9      	ldr	r1, [r7, #12]
 8014a4c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014a4e:	893d      	ldrh	r5, [r7, #8]
 8014a50:	897c      	ldrh	r4, [r7, #10]
 8014a52:	9103      	str	r1, [sp, #12]
 8014a54:	2110      	movs	r1, #16
 8014a56:	9102      	str	r1, [sp, #8]
 8014a58:	9201      	str	r2, [sp, #4]
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	462a      	mov	r2, r5
 8014a60:	4621      	mov	r1, r4
 8014a62:	f7ff ff67 	bl	8014934 <tcp_output_alloc_header_common>
 8014a66:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d006      	beq.n	8014a7c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a72:	68fa      	ldr	r2, [r7, #12]
 8014a74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a76:	441a      	add	r2, r3
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a7c:	697b      	ldr	r3, [r7, #20]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3718      	adds	r7, #24
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bdb0      	pop	{r4, r5, r7, pc}
 8014a86:	bf00      	nop
 8014a88:	0801d154 	.word	0x0801d154
 8014a8c:	0801d85c 	.word	0x0801d85c
 8014a90:	0801d1a8 	.word	0x0801d1a8

08014a94 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b088      	sub	sp, #32
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	4611      	mov	r1, r2
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	460b      	mov	r3, r1
 8014aa4:	71fb      	strb	r3, [r7, #7]
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014aaa:	2300      	movs	r3, #0
 8014aac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d106      	bne.n	8014ac2 <tcp_output_fill_options+0x2e>
 8014ab4:	4b13      	ldr	r3, [pc, #76]	; (8014b04 <tcp_output_fill_options+0x70>)
 8014ab6:	f240 7256 	movw	r2, #1878	; 0x756
 8014aba:	4913      	ldr	r1, [pc, #76]	; (8014b08 <tcp_output_fill_options+0x74>)
 8014abc:	4813      	ldr	r0, [pc, #76]	; (8014b0c <tcp_output_fill_options+0x78>)
 8014abe:	f003 fa27 	bl	8017f10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	3314      	adds	r3, #20
 8014acc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	f103 0214 	add.w	r2, r3, #20
 8014ad4:	8bfb      	ldrh	r3, [r7, #30]
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	4619      	mov	r1, r3
 8014ada:	79fb      	ldrb	r3, [r7, #7]
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	f003 0304 	and.w	r3, r3, #4
 8014ae2:	440b      	add	r3, r1
 8014ae4:	4413      	add	r3, r2
 8014ae6:	697a      	ldr	r2, [r7, #20]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d006      	beq.n	8014afa <tcp_output_fill_options+0x66>
 8014aec:	4b05      	ldr	r3, [pc, #20]	; (8014b04 <tcp_output_fill_options+0x70>)
 8014aee:	f240 7275 	movw	r2, #1909	; 0x775
 8014af2:	4907      	ldr	r1, [pc, #28]	; (8014b10 <tcp_output_fill_options+0x7c>)
 8014af4:	4805      	ldr	r0, [pc, #20]	; (8014b0c <tcp_output_fill_options+0x78>)
 8014af6:	f003 fa0b 	bl	8017f10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014afa:	bf00      	nop
 8014afc:	3720      	adds	r7, #32
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	0801d154 	.word	0x0801d154
 8014b08:	0801d884 	.word	0x0801d884
 8014b0c:	0801d1a8 	.word	0x0801d1a8
 8014b10:	0801d77c 	.word	0x0801d77c

08014b14 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b08c      	sub	sp, #48	; 0x30
 8014b18:	af04      	add	r7, sp, #16
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d106      	bne.n	8014b36 <tcp_output_control_segment+0x22>
 8014b28:	4b24      	ldr	r3, [pc, #144]	; (8014bbc <tcp_output_control_segment+0xa8>)
 8014b2a:	f240 7287 	movw	r2, #1927	; 0x787
 8014b2e:	4924      	ldr	r1, [pc, #144]	; (8014bc0 <tcp_output_control_segment+0xac>)
 8014b30:	4824      	ldr	r0, [pc, #144]	; (8014bc4 <tcp_output_control_segment+0xb0>)
 8014b32:	f003 f9ed 	bl	8017f10 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014b36:	683a      	ldr	r2, [r7, #0]
 8014b38:	6879      	ldr	r1, [r7, #4]
 8014b3a:	68f8      	ldr	r0, [r7, #12]
 8014b3c:	f7fe fad6 	bl	80130ec <tcp_route>
 8014b40:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d102      	bne.n	8014b4e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014b48:	23fc      	movs	r3, #252	; 0xfc
 8014b4a:	77fb      	strb	r3, [r7, #31]
 8014b4c:	e02c      	b.n	8014ba8 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	891a      	ldrh	r2, [r3, #8]
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	9300      	str	r3, [sp, #0]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2106      	movs	r1, #6
 8014b60:	68b8      	ldr	r0, [r7, #8]
 8014b62:	f7f8 fa8f 	bl	800d084 <ip_chksum_pseudo>
 8014b66:	4603      	mov	r3, r0
 8014b68:	461a      	mov	r2, r3
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d006      	beq.n	8014b82 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	7adb      	ldrb	r3, [r3, #11]
 8014b78:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	7a9b      	ldrb	r3, [r3, #10]
 8014b7e:	777b      	strb	r3, [r7, #29]
 8014b80:	e003      	b.n	8014b8a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b82:	23ff      	movs	r3, #255	; 0xff
 8014b84:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b8a:	7fba      	ldrb	r2, [r7, #30]
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	9302      	str	r3, [sp, #8]
 8014b90:	2306      	movs	r3, #6
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	7f7b      	ldrb	r3, [r7, #29]
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	4613      	mov	r3, r2
 8014b9a:	683a      	ldr	r2, [r7, #0]
 8014b9c:	6879      	ldr	r1, [r7, #4]
 8014b9e:	68b8      	ldr	r0, [r7, #8]
 8014ba0:	f001 fddc 	bl	801675c <ip4_output_if>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014ba8:	68b8      	ldr	r0, [r7, #8]
 8014baa:	f7f9 fe3f 	bl	800e82c <pbuf_free>
  return err;
 8014bae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3720      	adds	r7, #32
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	0801d154 	.word	0x0801d154
 8014bc0:	0801d8ac 	.word	0x0801d8ac
 8014bc4:	0801d1a8 	.word	0x0801d1a8

08014bc8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014bc8:	b590      	push	{r4, r7, lr}
 8014bca:	b08b      	sub	sp, #44	; 0x2c
 8014bcc:	af04      	add	r7, sp, #16
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	607a      	str	r2, [r7, #4]
 8014bd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d106      	bne.n	8014bea <tcp_rst+0x22>
 8014bdc:	4b1f      	ldr	r3, [pc, #124]	; (8014c5c <tcp_rst+0x94>)
 8014bde:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014be2:	491f      	ldr	r1, [pc, #124]	; (8014c60 <tcp_rst+0x98>)
 8014be4:	481f      	ldr	r0, [pc, #124]	; (8014c64 <tcp_rst+0x9c>)
 8014be6:	f003 f993 	bl	8017f10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d106      	bne.n	8014bfe <tcp_rst+0x36>
 8014bf0:	4b1a      	ldr	r3, [pc, #104]	; (8014c5c <tcp_rst+0x94>)
 8014bf2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014bf6:	491c      	ldr	r1, [pc, #112]	; (8014c68 <tcp_rst+0xa0>)
 8014bf8:	481a      	ldr	r0, [pc, #104]	; (8014c64 <tcp_rst+0x9c>)
 8014bfa:	f003 f989 	bl	8017f10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014bfe:	2300      	movs	r3, #0
 8014c00:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014c02:	f246 0308 	movw	r3, #24584	; 0x6008
 8014c06:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014c08:	7dfb      	ldrb	r3, [r7, #23]
 8014c0a:	b29c      	uxth	r4, r3
 8014c0c:	68b8      	ldr	r0, [r7, #8]
 8014c0e:	f7f8 f91c 	bl	800ce4a <lwip_htonl>
 8014c12:	4602      	mov	r2, r0
 8014c14:	8abb      	ldrh	r3, [r7, #20]
 8014c16:	9303      	str	r3, [sp, #12]
 8014c18:	2314      	movs	r3, #20
 8014c1a:	9302      	str	r3, [sp, #8]
 8014c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c1e:	9301      	str	r3, [sp, #4]
 8014c20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	4613      	mov	r3, r2
 8014c26:	2200      	movs	r2, #0
 8014c28:	4621      	mov	r1, r4
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f7ff fe82 	bl	8014934 <tcp_output_alloc_header_common>
 8014c30:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00c      	beq.n	8014c52 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c38:	7dfb      	ldrb	r3, [r7, #23]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	6939      	ldr	r1, [r7, #16]
 8014c3e:	68f8      	ldr	r0, [r7, #12]
 8014c40:	f7ff ff28 	bl	8014a94 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c46:	683a      	ldr	r2, [r7, #0]
 8014c48:	6939      	ldr	r1, [r7, #16]
 8014c4a:	68f8      	ldr	r0, [r7, #12]
 8014c4c:	f7ff ff62 	bl	8014b14 <tcp_output_control_segment>
 8014c50:	e000      	b.n	8014c54 <tcp_rst+0x8c>
    return;
 8014c52:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c54:	371c      	adds	r7, #28
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd90      	pop	{r4, r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	0801d154 	.word	0x0801d154
 8014c60:	0801d8d8 	.word	0x0801d8d8
 8014c64:	0801d1a8 	.word	0x0801d1a8
 8014c68:	0801d8f4 	.word	0x0801d8f4

08014c6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014c6c:	b590      	push	{r4, r7, lr}
 8014c6e:	b087      	sub	sp, #28
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c74:	2300      	movs	r3, #0
 8014c76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d106      	bne.n	8014c90 <tcp_send_empty_ack+0x24>
 8014c82:	4b28      	ldr	r3, [pc, #160]	; (8014d24 <tcp_send_empty_ack+0xb8>)
 8014c84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c88:	4927      	ldr	r1, [pc, #156]	; (8014d28 <tcp_send_empty_ack+0xbc>)
 8014c8a:	4828      	ldr	r0, [pc, #160]	; (8014d2c <tcp_send_empty_ack+0xc0>)
 8014c8c:	f003 f940 	bl	8017f10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c90:	7dfb      	ldrb	r3, [r7, #23]
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	b2db      	uxtb	r3, r3
 8014c96:	f003 0304 	and.w	r3, r3, #4
 8014c9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c9c:	7d7b      	ldrb	r3, [r7, #21]
 8014c9e:	b29c      	uxth	r4, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7f8 f8d0 	bl	800ce4a <lwip_htonl>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2200      	movs	r2, #0
 8014cae:	4621      	mov	r1, r4
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7ff feb1 	bl	8014a18 <tcp_output_alloc_header>
 8014cb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d109      	bne.n	8014cd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	8b5b      	ldrh	r3, [r3, #26]
 8014cc2:	f043 0303 	orr.w	r3, r3, #3
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014ccc:	f06f 0301 	mvn.w	r3, #1
 8014cd0:	e023      	b.n	8014d1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014cd2:	7dbb      	ldrb	r3, [r7, #22]
 8014cd4:	7dfa      	ldrb	r2, [r7, #23]
 8014cd6:	6939      	ldr	r1, [r7, #16]
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f7ff fedb 	bl	8014a94 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	3304      	adds	r3, #4
 8014ce4:	6939      	ldr	r1, [r7, #16]
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7ff ff14 	bl	8014b14 <tcp_output_control_segment>
 8014cec:	4603      	mov	r3, r0
 8014cee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d007      	beq.n	8014d08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f043 0303 	orr.w	r3, r3, #3
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	835a      	strh	r2, [r3, #26]
 8014d06:	e006      	b.n	8014d16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	8b5b      	ldrh	r3, [r3, #26]
 8014d0c:	f023 0303 	bic.w	r3, r3, #3
 8014d10:	b29a      	uxth	r2, r3
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	371c      	adds	r7, #28
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd90      	pop	{r4, r7, pc}
 8014d22:	bf00      	nop
 8014d24:	0801d154 	.word	0x0801d154
 8014d28:	0801d910 	.word	0x0801d910
 8014d2c:	0801d1a8 	.word	0x0801d1a8

08014d30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014d30:	b590      	push	{r4, r7, lr}
 8014d32:	b087      	sub	sp, #28
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d38:	2300      	movs	r3, #0
 8014d3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d106      	bne.n	8014d50 <tcp_keepalive+0x20>
 8014d42:	4b18      	ldr	r3, [pc, #96]	; (8014da4 <tcp_keepalive+0x74>)
 8014d44:	f640 0224 	movw	r2, #2084	; 0x824
 8014d48:	4917      	ldr	r1, [pc, #92]	; (8014da8 <tcp_keepalive+0x78>)
 8014d4a:	4818      	ldr	r0, [pc, #96]	; (8014dac <tcp_keepalive+0x7c>)
 8014d4c:	f003 f8e0 	bl	8017f10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014d50:	7dfb      	ldrb	r3, [r7, #23]
 8014d52:	b29c      	uxth	r4, r3
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7f8 f875 	bl	800ce4a <lwip_htonl>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2200      	movs	r2, #0
 8014d64:	4621      	mov	r1, r4
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7ff fe56 	bl	8014a18 <tcp_output_alloc_header>
 8014d6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d102      	bne.n	8014d7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d78:	e010      	b.n	8014d9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d7a:	7dfb      	ldrb	r3, [r7, #23]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	6939      	ldr	r1, [r7, #16]
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7ff fe87 	bl	8014a94 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	3304      	adds	r3, #4
 8014d8c:	6939      	ldr	r1, [r7, #16]
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7ff fec0 	bl	8014b14 <tcp_output_control_segment>
 8014d94:	4603      	mov	r3, r0
 8014d96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	371c      	adds	r7, #28
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd90      	pop	{r4, r7, pc}
 8014da4:	0801d154 	.word	0x0801d154
 8014da8:	0801d930 	.word	0x0801d930
 8014dac:	0801d1a8 	.word	0x0801d1a8

08014db0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014db0:	b590      	push	{r4, r7, lr}
 8014db2:	b08b      	sub	sp, #44	; 0x2c
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014db8:	2300      	movs	r3, #0
 8014dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d106      	bne.n	8014dd2 <tcp_zero_window_probe+0x22>
 8014dc4:	4b4c      	ldr	r3, [pc, #304]	; (8014ef8 <tcp_zero_window_probe+0x148>)
 8014dc6:	f640 024f 	movw	r2, #2127	; 0x84f
 8014dca:	494c      	ldr	r1, [pc, #304]	; (8014efc <tcp_zero_window_probe+0x14c>)
 8014dcc:	484c      	ldr	r0, [pc, #304]	; (8014f00 <tcp_zero_window_probe+0x150>)
 8014dce:	f003 f89f 	bl	8017f10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014dd8:	6a3b      	ldr	r3, [r7, #32]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d101      	bne.n	8014de2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014dde:	2300      	movs	r3, #0
 8014de0:	e086      	b.n	8014ef0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014de8:	2bff      	cmp	r3, #255	; 0xff
 8014dea:	d007      	beq.n	8014dfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014df2:	3301      	adds	r3, #1
 8014df4:	b2da      	uxtb	r2, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014dfc:	6a3b      	ldr	r3, [r7, #32]
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	899b      	ldrh	r3, [r3, #12]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7f8 f80b 	bl	800ce20 <lwip_htons>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	f003 0301 	and.w	r3, r3, #1
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d005      	beq.n	8014e22 <tcp_zero_window_probe+0x72>
 8014e16:	6a3b      	ldr	r3, [r7, #32]
 8014e18:	891b      	ldrh	r3, [r3, #8]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d101      	bne.n	8014e22 <tcp_zero_window_probe+0x72>
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e000      	b.n	8014e24 <tcp_zero_window_probe+0x74>
 8014e22:	2300      	movs	r3, #0
 8014e24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014e26:	7ffb      	ldrb	r3, [r7, #31]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	bf0c      	ite	eq
 8014e2c:	2301      	moveq	r3, #1
 8014e2e:	2300      	movne	r3, #0
 8014e30:	b2db      	uxtb	r3, r3
 8014e32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e38:	b299      	uxth	r1, r3
 8014e3a:	6a3b      	ldr	r3, [r7, #32]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	8bba      	ldrh	r2, [r7, #28]
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f7ff fde8 	bl	8014a18 <tcp_output_alloc_header>
 8014e48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014e4a:	69bb      	ldr	r3, [r7, #24]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d102      	bne.n	8014e56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e54:	e04c      	b.n	8014ef0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014e56:	69bb      	ldr	r3, [r7, #24]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014e5c:	7ffb      	ldrb	r3, [r7, #31]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d011      	beq.n	8014e86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	899b      	ldrh	r3, [r3, #12]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	b21b      	sxth	r3, r3
 8014e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e6e:	b21c      	sxth	r4, r3
 8014e70:	2011      	movs	r0, #17
 8014e72:	f7f7 ffd5 	bl	800ce20 <lwip_htons>
 8014e76:	4603      	mov	r3, r0
 8014e78:	b21b      	sxth	r3, r3
 8014e7a:	4323      	orrs	r3, r4
 8014e7c:	b21b      	sxth	r3, r3
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	819a      	strh	r2, [r3, #12]
 8014e84:	e010      	b.n	8014ea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	3314      	adds	r3, #20
 8014e8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e8e:	6a3b      	ldr	r3, [r7, #32]
 8014e90:	6858      	ldr	r0, [r3, #4]
 8014e92:	6a3b      	ldr	r3, [r7, #32]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	891a      	ldrh	r2, [r3, #8]
 8014e98:	6a3b      	ldr	r3, [r7, #32]
 8014e9a:	891b      	ldrh	r3, [r3, #8]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	6939      	ldr	r1, [r7, #16]
 8014ea4:	f7f9 feb8 	bl	800ec18 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014ea8:	6a3b      	ldr	r3, [r7, #32]
 8014eaa:	68db      	ldr	r3, [r3, #12]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f7 ffcb 	bl	800ce4a <lwip_htonl>
 8014eb4:	4603      	mov	r3, r0
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	1ad3      	subs	r3, r2, r3
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	da02      	bge.n	8014ecc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	68fa      	ldr	r2, [r7, #12]
 8014eca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	69b9      	ldr	r1, [r7, #24]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7ff fddd 	bl	8014a94 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	3304      	adds	r3, #4
 8014ee0:	69b9      	ldr	r1, [r7, #24]
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7ff fe16 	bl	8014b14 <tcp_output_control_segment>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014eec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	372c      	adds	r7, #44	; 0x2c
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	bd90      	pop	{r4, r7, pc}
 8014ef8:	0801d154 	.word	0x0801d154
 8014efc:	0801d94c 	.word	0x0801d94c
 8014f00:	0801d1a8 	.word	0x0801d1a8

08014f04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014f0c:	f7f9 ff72 	bl	800edf4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014f10:	4b0a      	ldr	r3, [pc, #40]	; (8014f3c <tcpip_tcp_timer+0x38>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d103      	bne.n	8014f20 <tcpip_tcp_timer+0x1c>
 8014f18:	4b09      	ldr	r3, [pc, #36]	; (8014f40 <tcpip_tcp_timer+0x3c>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d005      	beq.n	8014f2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f20:	2200      	movs	r2, #0
 8014f22:	4908      	ldr	r1, [pc, #32]	; (8014f44 <tcpip_tcp_timer+0x40>)
 8014f24:	20fa      	movs	r0, #250	; 0xfa
 8014f26:	f000 f8f3 	bl	8015110 <sys_timeout>
 8014f2a:	e003      	b.n	8014f34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014f2c:	4b06      	ldr	r3, [pc, #24]	; (8014f48 <tcpip_tcp_timer+0x44>)
 8014f2e:	2200      	movs	r2, #0
 8014f30:	601a      	str	r2, [r3, #0]
  }
}
 8014f32:	bf00      	nop
 8014f34:	bf00      	nop
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}
 8014f3c:	20011bc0 	.word	0x20011bc0
 8014f40:	20011bc4 	.word	0x20011bc4
 8014f44:	08014f05 	.word	0x08014f05
 8014f48:	20011c0c 	.word	0x20011c0c

08014f4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014f50:	4b0a      	ldr	r3, [pc, #40]	; (8014f7c <tcp_timer_needed+0x30>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d10f      	bne.n	8014f78 <tcp_timer_needed+0x2c>
 8014f58:	4b09      	ldr	r3, [pc, #36]	; (8014f80 <tcp_timer_needed+0x34>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d103      	bne.n	8014f68 <tcp_timer_needed+0x1c>
 8014f60:	4b08      	ldr	r3, [pc, #32]	; (8014f84 <tcp_timer_needed+0x38>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d007      	beq.n	8014f78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f68:	4b04      	ldr	r3, [pc, #16]	; (8014f7c <tcp_timer_needed+0x30>)
 8014f6a:	2201      	movs	r2, #1
 8014f6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f6e:	2200      	movs	r2, #0
 8014f70:	4905      	ldr	r1, [pc, #20]	; (8014f88 <tcp_timer_needed+0x3c>)
 8014f72:	20fa      	movs	r0, #250	; 0xfa
 8014f74:	f000 f8cc 	bl	8015110 <sys_timeout>
  }
}
 8014f78:	bf00      	nop
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	20011c0c 	.word	0x20011c0c
 8014f80:	20011bc0 	.word	0x20011bc0
 8014f84:	20011bc4 	.word	0x20011bc4
 8014f88:	08014f05 	.word	0x08014f05

08014f8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b086      	sub	sp, #24
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f98:	2009      	movs	r0, #9
 8014f9a:	f7f8 fd31 	bl	800da00 <memp_malloc>
 8014f9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d109      	bne.n	8014fba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d151      	bne.n	8015050 <sys_timeout_abs+0xc4>
 8014fac:	4b2a      	ldr	r3, [pc, #168]	; (8015058 <sys_timeout_abs+0xcc>)
 8014fae:	22be      	movs	r2, #190	; 0xbe
 8014fb0:	492a      	ldr	r1, [pc, #168]	; (801505c <sys_timeout_abs+0xd0>)
 8014fb2:	482b      	ldr	r0, [pc, #172]	; (8015060 <sys_timeout_abs+0xd4>)
 8014fb4:	f002 ffac 	bl	8017f10 <iprintf>
    return;
 8014fb8:	e04a      	b.n	8015050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014fc0:	693b      	ldr	r3, [r7, #16]
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	68fa      	ldr	r2, [r7, #12]
 8014fd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014fd2:	4b24      	ldr	r3, [pc, #144]	; (8015064 <sys_timeout_abs+0xd8>)
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d103      	bne.n	8014fe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014fda:	4a22      	ldr	r2, [pc, #136]	; (8015064 <sys_timeout_abs+0xd8>)
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6013      	str	r3, [r2, #0]
    return;
 8014fe0:	e037      	b.n	8015052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	685a      	ldr	r2, [r3, #4]
 8014fe6:	4b1f      	ldr	r3, [pc, #124]	; (8015064 <sys_timeout_abs+0xd8>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	0fdb      	lsrs	r3, r3, #31
 8014ff0:	f003 0301 	and.w	r3, r3, #1
 8014ff4:	b2db      	uxtb	r3, r3
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d007      	beq.n	801500a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014ffa:	4b1a      	ldr	r3, [pc, #104]	; (8015064 <sys_timeout_abs+0xd8>)
 8014ffc:	681a      	ldr	r2, [r3, #0]
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015002:	4a18      	ldr	r2, [pc, #96]	; (8015064 <sys_timeout_abs+0xd8>)
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	6013      	str	r3, [r2, #0]
 8015008:	e023      	b.n	8015052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801500a:	4b16      	ldr	r3, [pc, #88]	; (8015064 <sys_timeout_abs+0xd8>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	617b      	str	r3, [r7, #20]
 8015010:	e01a      	b.n	8015048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d00b      	beq.n	8015032 <sys_timeout_abs+0xa6>
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	685a      	ldr	r2, [r3, #4]
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	0fdb      	lsrs	r3, r3, #31
 8015028:	f003 0301 	and.w	r3, r3, #1
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b00      	cmp	r3, #0
 8015030:	d007      	beq.n	8015042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	693a      	ldr	r2, [r7, #16]
 801503e:	601a      	str	r2, [r3, #0]
        break;
 8015040:	e007      	b.n	8015052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	617b      	str	r3, [r7, #20]
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d1e1      	bne.n	8015012 <sys_timeout_abs+0x86>
 801504e:	e000      	b.n	8015052 <sys_timeout_abs+0xc6>
    return;
 8015050:	bf00      	nop
      }
    }
  }
}
 8015052:	3718      	adds	r7, #24
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	0801d970 	.word	0x0801d970
 801505c:	0801d9a4 	.word	0x0801d9a4
 8015060:	0801d9e4 	.word	0x0801d9e4
 8015064:	20011c04 	.word	0x20011c04

08015068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	4798      	blx	r3

  now = sys_now();
 801507a:	f7f1 fb33 	bl	80066e4 <sys_now>
 801507e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <lwip_cyclic_timer+0x5c>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4413      	add	r3, r2
 801508a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801508c:	68fa      	ldr	r2, [r7, #12]
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	0fdb      	lsrs	r3, r3, #31
 8015094:	f003 0301 	and.w	r3, r3, #1
 8015098:	b2db      	uxtb	r3, r3
 801509a:	2b00      	cmp	r3, #0
 801509c:	d009      	beq.n	80150b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	4413      	add	r3, r2
 80150a6:	687a      	ldr	r2, [r7, #4]
 80150a8:	4907      	ldr	r1, [pc, #28]	; (80150c8 <lwip_cyclic_timer+0x60>)
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7ff ff6e 	bl	8014f8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80150b0:	e004      	b.n	80150bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	4904      	ldr	r1, [pc, #16]	; (80150c8 <lwip_cyclic_timer+0x60>)
 80150b6:	68f8      	ldr	r0, [r7, #12]
 80150b8:	f7ff ff68 	bl	8014f8c <sys_timeout_abs>
}
 80150bc:	bf00      	nop
 80150be:	3718      	adds	r7, #24
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	20011c08 	.word	0x20011c08
 80150c8:	08015069 	.word	0x08015069

080150cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150d2:	2301      	movs	r3, #1
 80150d4:	607b      	str	r3, [r7, #4]
 80150d6:	e00e      	b.n	80150f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80150d8:	4a0b      	ldr	r2, [pc, #44]	; (8015108 <sys_timeouts_init+0x3c>)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	00db      	lsls	r3, r3, #3
 80150e4:	4a08      	ldr	r2, [pc, #32]	; (8015108 <sys_timeouts_init+0x3c>)
 80150e6:	4413      	add	r3, r2
 80150e8:	461a      	mov	r2, r3
 80150ea:	4908      	ldr	r1, [pc, #32]	; (801510c <sys_timeouts_init+0x40>)
 80150ec:	f000 f810 	bl	8015110 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	3301      	adds	r3, #1
 80150f4:	607b      	str	r3, [r7, #4]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	2b02      	cmp	r3, #2
 80150fa:	d9ed      	bls.n	80150d8 <sys_timeouts_init+0xc>
  }
}
 80150fc:	bf00      	nop
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	0801e2d8 	.word	0x0801e2d8
 801510c:	08015069 	.word	0x08015069

08015110 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b086      	sub	sp, #24
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015122:	d306      	bcc.n	8015132 <sys_timeout+0x22>
 8015124:	4b0a      	ldr	r3, [pc, #40]	; (8015150 <sys_timeout+0x40>)
 8015126:	f240 1229 	movw	r2, #297	; 0x129
 801512a:	490a      	ldr	r1, [pc, #40]	; (8015154 <sys_timeout+0x44>)
 801512c:	480a      	ldr	r0, [pc, #40]	; (8015158 <sys_timeout+0x48>)
 801512e:	f002 feef 	bl	8017f10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015132:	f7f1 fad7 	bl	80066e4 <sys_now>
 8015136:	4602      	mov	r2, r0
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	4413      	add	r3, r2
 801513c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801513e:	687a      	ldr	r2, [r7, #4]
 8015140:	68b9      	ldr	r1, [r7, #8]
 8015142:	6978      	ldr	r0, [r7, #20]
 8015144:	f7ff ff22 	bl	8014f8c <sys_timeout_abs>
#endif
}
 8015148:	bf00      	nop
 801514a:	3718      	adds	r7, #24
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	0801d970 	.word	0x0801d970
 8015154:	0801da0c 	.word	0x0801da0c
 8015158:	0801d9e4 	.word	0x0801d9e4

0801515c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015162:	f7f1 fabf 	bl	80066e4 <sys_now>
 8015166:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015168:	4b17      	ldr	r3, [pc, #92]	; (80151c8 <sys_check_timeouts+0x6c>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d022      	beq.n	80151ba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	68fa      	ldr	r2, [r7, #12]
 801517a:	1ad3      	subs	r3, r2, r3
 801517c:	0fdb      	lsrs	r3, r3, #31
 801517e:	f003 0301 	and.w	r3, r3, #1
 8015182:	b2db      	uxtb	r3, r3
 8015184:	2b00      	cmp	r3, #0
 8015186:	d11a      	bne.n	80151be <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a0e      	ldr	r2, [pc, #56]	; (80151c8 <sys_check_timeouts+0x6c>)
 801518e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	685b      	ldr	r3, [r3, #4]
 80151a0:	4a0a      	ldr	r2, [pc, #40]	; (80151cc <sys_check_timeouts+0x70>)
 80151a2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80151a4:	68b9      	ldr	r1, [r7, #8]
 80151a6:	2009      	movs	r0, #9
 80151a8:	f7f8 fca0 	bl	800daec <memp_free>
    if (handler != NULL) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d0da      	beq.n	8015168 <sys_check_timeouts+0xc>
      handler(arg);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6838      	ldr	r0, [r7, #0]
 80151b6:	4798      	blx	r3
  do {
 80151b8:	e7d6      	b.n	8015168 <sys_check_timeouts+0xc>
      return;
 80151ba:	bf00      	nop
 80151bc:	e000      	b.n	80151c0 <sys_check_timeouts+0x64>
      return;
 80151be:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	20011c04 	.word	0x20011c04
 80151cc:	20011c08 	.word	0x20011c08

080151d0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80151d6:	4b16      	ldr	r3, [pc, #88]	; (8015230 <sys_timeouts_sleeptime+0x60>)
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d102      	bne.n	80151e4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80151de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151e2:	e020      	b.n	8015226 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80151e4:	f7f1 fa7e 	bl	80066e4 <sys_now>
 80151e8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80151ea:	4b11      	ldr	r3, [pc, #68]	; (8015230 <sys_timeouts_sleeptime+0x60>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	685a      	ldr	r2, [r3, #4]
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	1ad3      	subs	r3, r2, r3
 80151f4:	0fdb      	lsrs	r3, r3, #31
 80151f6:	f003 0301 	and.w	r3, r3, #1
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d001      	beq.n	8015204 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015200:	2300      	movs	r3, #0
 8015202:	e010      	b.n	8015226 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015204:	4b0a      	ldr	r3, [pc, #40]	; (8015230 <sys_timeouts_sleeptime+0x60>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	685a      	ldr	r2, [r3, #4]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	da06      	bge.n	8015224 <sys_timeouts_sleeptime+0x54>
 8015216:	4b07      	ldr	r3, [pc, #28]	; (8015234 <sys_timeouts_sleeptime+0x64>)
 8015218:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801521c:	4906      	ldr	r1, [pc, #24]	; (8015238 <sys_timeouts_sleeptime+0x68>)
 801521e:	4807      	ldr	r0, [pc, #28]	; (801523c <sys_timeouts_sleeptime+0x6c>)
 8015220:	f002 fe76 	bl	8017f10 <iprintf>
    return ret;
 8015224:	683b      	ldr	r3, [r7, #0]
  }
}
 8015226:	4618      	mov	r0, r3
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	20011c04 	.word	0x20011c04
 8015234:	0801d970 	.word	0x0801d970
 8015238:	0801da44 	.word	0x0801da44
 801523c:	0801d9e4 	.word	0x0801d9e4

08015240 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015248:	4915      	ldr	r1, [pc, #84]	; (80152a0 <etharp_free_entry+0x60>)
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	4613      	mov	r3, r2
 801524e:	005b      	lsls	r3, r3, #1
 8015250:	4413      	add	r3, r2
 8015252:	00db      	lsls	r3, r3, #3
 8015254:	440b      	add	r3, r1
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d013      	beq.n	8015284 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801525c:	4910      	ldr	r1, [pc, #64]	; (80152a0 <etharp_free_entry+0x60>)
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	4613      	mov	r3, r2
 8015262:	005b      	lsls	r3, r3, #1
 8015264:	4413      	add	r3, r2
 8015266:	00db      	lsls	r3, r3, #3
 8015268:	440b      	add	r3, r1
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4618      	mov	r0, r3
 801526e:	f7f9 fadd 	bl	800e82c <pbuf_free>
    arp_table[i].q = NULL;
 8015272:	490b      	ldr	r1, [pc, #44]	; (80152a0 <etharp_free_entry+0x60>)
 8015274:	687a      	ldr	r2, [r7, #4]
 8015276:	4613      	mov	r3, r2
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	4413      	add	r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	440b      	add	r3, r1
 8015280:	2200      	movs	r2, #0
 8015282:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015284:	4906      	ldr	r1, [pc, #24]	; (80152a0 <etharp_free_entry+0x60>)
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	4613      	mov	r3, r2
 801528a:	005b      	lsls	r3, r3, #1
 801528c:	4413      	add	r3, r2
 801528e:	00db      	lsls	r3, r3, #3
 8015290:	440b      	add	r3, r1
 8015292:	3314      	adds	r3, #20
 8015294:	2200      	movs	r2, #0
 8015296:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	20011c10 	.word	0x20011c10

080152a4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152aa:	2300      	movs	r3, #0
 80152ac:	607b      	str	r3, [r7, #4]
 80152ae:	e096      	b.n	80153de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80152b0:	494f      	ldr	r1, [pc, #316]	; (80153f0 <etharp_tmr+0x14c>)
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	3314      	adds	r3, #20
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80152c4:	78fb      	ldrb	r3, [r7, #3]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	f000 8086 	beq.w	80153d8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80152cc:	4948      	ldr	r1, [pc, #288]	; (80153f0 <etharp_tmr+0x14c>)
 80152ce:	687a      	ldr	r2, [r7, #4]
 80152d0:	4613      	mov	r3, r2
 80152d2:	005b      	lsls	r3, r3, #1
 80152d4:	4413      	add	r3, r2
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	440b      	add	r3, r1
 80152da:	3312      	adds	r3, #18
 80152dc:	881b      	ldrh	r3, [r3, #0]
 80152de:	3301      	adds	r3, #1
 80152e0:	b298      	uxth	r0, r3
 80152e2:	4943      	ldr	r1, [pc, #268]	; (80153f0 <etharp_tmr+0x14c>)
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	4613      	mov	r3, r2
 80152e8:	005b      	lsls	r3, r3, #1
 80152ea:	4413      	add	r3, r2
 80152ec:	00db      	lsls	r3, r3, #3
 80152ee:	440b      	add	r3, r1
 80152f0:	3312      	adds	r3, #18
 80152f2:	4602      	mov	r2, r0
 80152f4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80152f6:	493e      	ldr	r1, [pc, #248]	; (80153f0 <etharp_tmr+0x14c>)
 80152f8:	687a      	ldr	r2, [r7, #4]
 80152fa:	4613      	mov	r3, r2
 80152fc:	005b      	lsls	r3, r3, #1
 80152fe:	4413      	add	r3, r2
 8015300:	00db      	lsls	r3, r3, #3
 8015302:	440b      	add	r3, r1
 8015304:	3312      	adds	r3, #18
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801530c:	d215      	bcs.n	801533a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801530e:	4938      	ldr	r1, [pc, #224]	; (80153f0 <etharp_tmr+0x14c>)
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	4613      	mov	r3, r2
 8015314:	005b      	lsls	r3, r3, #1
 8015316:	4413      	add	r3, r2
 8015318:	00db      	lsls	r3, r3, #3
 801531a:	440b      	add	r3, r1
 801531c:	3314      	adds	r3, #20
 801531e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015320:	2b01      	cmp	r3, #1
 8015322:	d10e      	bne.n	8015342 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015324:	4932      	ldr	r1, [pc, #200]	; (80153f0 <etharp_tmr+0x14c>)
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	3312      	adds	r3, #18
 8015334:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015336:	2b04      	cmp	r3, #4
 8015338:	d903      	bls.n	8015342 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f7ff ff80 	bl	8015240 <etharp_free_entry>
 8015340:	e04a      	b.n	80153d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015342:	492b      	ldr	r1, [pc, #172]	; (80153f0 <etharp_tmr+0x14c>)
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	4613      	mov	r3, r2
 8015348:	005b      	lsls	r3, r3, #1
 801534a:	4413      	add	r3, r2
 801534c:	00db      	lsls	r3, r3, #3
 801534e:	440b      	add	r3, r1
 8015350:	3314      	adds	r3, #20
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	2b03      	cmp	r3, #3
 8015356:	d10a      	bne.n	801536e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015358:	4925      	ldr	r1, [pc, #148]	; (80153f0 <etharp_tmr+0x14c>)
 801535a:	687a      	ldr	r2, [r7, #4]
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3314      	adds	r3, #20
 8015368:	2204      	movs	r2, #4
 801536a:	701a      	strb	r2, [r3, #0]
 801536c:	e034      	b.n	80153d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801536e:	4920      	ldr	r1, [pc, #128]	; (80153f0 <etharp_tmr+0x14c>)
 8015370:	687a      	ldr	r2, [r7, #4]
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	440b      	add	r3, r1
 801537c:	3314      	adds	r3, #20
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	2b04      	cmp	r3, #4
 8015382:	d10a      	bne.n	801539a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015384:	491a      	ldr	r1, [pc, #104]	; (80153f0 <etharp_tmr+0x14c>)
 8015386:	687a      	ldr	r2, [r7, #4]
 8015388:	4613      	mov	r3, r2
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	4413      	add	r3, r2
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	440b      	add	r3, r1
 8015392:	3314      	adds	r3, #20
 8015394:	2202      	movs	r2, #2
 8015396:	701a      	strb	r2, [r3, #0]
 8015398:	e01e      	b.n	80153d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801539a:	4915      	ldr	r1, [pc, #84]	; (80153f0 <etharp_tmr+0x14c>)
 801539c:	687a      	ldr	r2, [r7, #4]
 801539e:	4613      	mov	r3, r2
 80153a0:	005b      	lsls	r3, r3, #1
 80153a2:	4413      	add	r3, r2
 80153a4:	00db      	lsls	r3, r3, #3
 80153a6:	440b      	add	r3, r1
 80153a8:	3314      	adds	r3, #20
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	2b01      	cmp	r3, #1
 80153ae:	d113      	bne.n	80153d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80153b0:	490f      	ldr	r1, [pc, #60]	; (80153f0 <etharp_tmr+0x14c>)
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	4613      	mov	r3, r2
 80153b6:	005b      	lsls	r3, r3, #1
 80153b8:	4413      	add	r3, r2
 80153ba:	00db      	lsls	r3, r3, #3
 80153bc:	440b      	add	r3, r1
 80153be:	3308      	adds	r3, #8
 80153c0:	6818      	ldr	r0, [r3, #0]
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	4613      	mov	r3, r2
 80153c6:	005b      	lsls	r3, r3, #1
 80153c8:	4413      	add	r3, r2
 80153ca:	00db      	lsls	r3, r3, #3
 80153cc:	4a08      	ldr	r2, [pc, #32]	; (80153f0 <etharp_tmr+0x14c>)
 80153ce:	4413      	add	r3, r2
 80153d0:	3304      	adds	r3, #4
 80153d2:	4619      	mov	r1, r3
 80153d4:	f000 fe6e 	bl	80160b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	3301      	adds	r3, #1
 80153dc:	607b      	str	r3, [r7, #4]
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2b09      	cmp	r3, #9
 80153e2:	f77f af65 	ble.w	80152b0 <etharp_tmr+0xc>
      }
    }
  }
}
 80153e6:	bf00      	nop
 80153e8:	bf00      	nop
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	20011c10 	.word	0x20011c10

080153f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b08a      	sub	sp, #40	; 0x28
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	460b      	mov	r3, r1
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015402:	230a      	movs	r3, #10
 8015404:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015406:	230a      	movs	r3, #10
 8015408:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801540a:	230a      	movs	r3, #10
 801540c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801540e:	2300      	movs	r3, #0
 8015410:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015412:	230a      	movs	r3, #10
 8015414:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	83bb      	strh	r3, [r7, #28]
 801541a:	2300      	movs	r3, #0
 801541c:	837b      	strh	r3, [r7, #26]
 801541e:	2300      	movs	r3, #0
 8015420:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015422:	2300      	movs	r3, #0
 8015424:	843b      	strh	r3, [r7, #32]
 8015426:	e0ae      	b.n	8015586 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801542c:	49a6      	ldr	r1, [pc, #664]	; (80156c8 <etharp_find_entry+0x2d4>)
 801542e:	4613      	mov	r3, r2
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	4413      	add	r3, r2
 8015434:	00db      	lsls	r3, r3, #3
 8015436:	440b      	add	r3, r1
 8015438:	3314      	adds	r3, #20
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801543e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015442:	2b0a      	cmp	r3, #10
 8015444:	d105      	bne.n	8015452 <etharp_find_entry+0x5e>
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801544c:	8c3b      	ldrh	r3, [r7, #32]
 801544e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015450:	e095      	b.n	801557e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015452:	7dfb      	ldrb	r3, [r7, #23]
 8015454:	2b00      	cmp	r3, #0
 8015456:	f000 8092 	beq.w	801557e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801545a:	7dfb      	ldrb	r3, [r7, #23]
 801545c:	2b01      	cmp	r3, #1
 801545e:	d009      	beq.n	8015474 <etharp_find_entry+0x80>
 8015460:	7dfb      	ldrb	r3, [r7, #23]
 8015462:	2b01      	cmp	r3, #1
 8015464:	d806      	bhi.n	8015474 <etharp_find_entry+0x80>
 8015466:	4b99      	ldr	r3, [pc, #612]	; (80156cc <etharp_find_entry+0x2d8>)
 8015468:	f240 1223 	movw	r2, #291	; 0x123
 801546c:	4998      	ldr	r1, [pc, #608]	; (80156d0 <etharp_find_entry+0x2dc>)
 801546e:	4899      	ldr	r0, [pc, #612]	; (80156d4 <etharp_find_entry+0x2e0>)
 8015470:	f002 fd4e 	bl	8017f10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d020      	beq.n	80154bc <etharp_find_entry+0xc8>
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	6819      	ldr	r1, [r3, #0]
 801547e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015482:	4891      	ldr	r0, [pc, #580]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015484:	4613      	mov	r3, r2
 8015486:	005b      	lsls	r3, r3, #1
 8015488:	4413      	add	r3, r2
 801548a:	00db      	lsls	r3, r3, #3
 801548c:	4403      	add	r3, r0
 801548e:	3304      	adds	r3, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	4299      	cmp	r1, r3
 8015494:	d112      	bne.n	80154bc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d00c      	beq.n	80154b6 <etharp_find_entry+0xc2>
 801549c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a0:	4989      	ldr	r1, [pc, #548]	; (80156c8 <etharp_find_entry+0x2d4>)
 80154a2:	4613      	mov	r3, r2
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	440b      	add	r3, r1
 80154ac:	3308      	adds	r3, #8
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	687a      	ldr	r2, [r7, #4]
 80154b2:	429a      	cmp	r2, r3
 80154b4:	d102      	bne.n	80154bc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80154b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154ba:	e100      	b.n	80156be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80154bc:	7dfb      	ldrb	r3, [r7, #23]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d140      	bne.n	8015544 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80154c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154c6:	4980      	ldr	r1, [pc, #512]	; (80156c8 <etharp_find_entry+0x2d4>)
 80154c8:	4613      	mov	r3, r2
 80154ca:	005b      	lsls	r3, r3, #1
 80154cc:	4413      	add	r3, r2
 80154ce:	00db      	lsls	r3, r3, #3
 80154d0:	440b      	add	r3, r1
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d01a      	beq.n	801550e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80154d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154dc:	497a      	ldr	r1, [pc, #488]	; (80156c8 <etharp_find_entry+0x2d4>)
 80154de:	4613      	mov	r3, r2
 80154e0:	005b      	lsls	r3, r3, #1
 80154e2:	4413      	add	r3, r2
 80154e4:	00db      	lsls	r3, r3, #3
 80154e6:	440b      	add	r3, r1
 80154e8:	3312      	adds	r3, #18
 80154ea:	881b      	ldrh	r3, [r3, #0]
 80154ec:	8bba      	ldrh	r2, [r7, #28]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d845      	bhi.n	801557e <etharp_find_entry+0x18a>
            old_queue = i;
 80154f2:	8c3b      	ldrh	r3, [r7, #32]
 80154f4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80154f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154fa:	4973      	ldr	r1, [pc, #460]	; (80156c8 <etharp_find_entry+0x2d4>)
 80154fc:	4613      	mov	r3, r2
 80154fe:	005b      	lsls	r3, r3, #1
 8015500:	4413      	add	r3, r2
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	440b      	add	r3, r1
 8015506:	3312      	adds	r3, #18
 8015508:	881b      	ldrh	r3, [r3, #0]
 801550a:	83bb      	strh	r3, [r7, #28]
 801550c:	e037      	b.n	801557e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801550e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015512:	496d      	ldr	r1, [pc, #436]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015514:	4613      	mov	r3, r2
 8015516:	005b      	lsls	r3, r3, #1
 8015518:	4413      	add	r3, r2
 801551a:	00db      	lsls	r3, r3, #3
 801551c:	440b      	add	r3, r1
 801551e:	3312      	adds	r3, #18
 8015520:	881b      	ldrh	r3, [r3, #0]
 8015522:	8b7a      	ldrh	r2, [r7, #26]
 8015524:	429a      	cmp	r2, r3
 8015526:	d82a      	bhi.n	801557e <etharp_find_entry+0x18a>
            old_pending = i;
 8015528:	8c3b      	ldrh	r3, [r7, #32]
 801552a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801552c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015530:	4965      	ldr	r1, [pc, #404]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015532:	4613      	mov	r3, r2
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	4413      	add	r3, r2
 8015538:	00db      	lsls	r3, r3, #3
 801553a:	440b      	add	r3, r1
 801553c:	3312      	adds	r3, #18
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	837b      	strh	r3, [r7, #26]
 8015542:	e01c      	b.n	801557e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015544:	7dfb      	ldrb	r3, [r7, #23]
 8015546:	2b01      	cmp	r3, #1
 8015548:	d919      	bls.n	801557e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801554a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801554e:	495e      	ldr	r1, [pc, #376]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015550:	4613      	mov	r3, r2
 8015552:	005b      	lsls	r3, r3, #1
 8015554:	4413      	add	r3, r2
 8015556:	00db      	lsls	r3, r3, #3
 8015558:	440b      	add	r3, r1
 801555a:	3312      	adds	r3, #18
 801555c:	881b      	ldrh	r3, [r3, #0]
 801555e:	8b3a      	ldrh	r2, [r7, #24]
 8015560:	429a      	cmp	r2, r3
 8015562:	d80c      	bhi.n	801557e <etharp_find_entry+0x18a>
            old_stable = i;
 8015564:	8c3b      	ldrh	r3, [r7, #32]
 8015566:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015568:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801556c:	4956      	ldr	r1, [pc, #344]	; (80156c8 <etharp_find_entry+0x2d4>)
 801556e:	4613      	mov	r3, r2
 8015570:	005b      	lsls	r3, r3, #1
 8015572:	4413      	add	r3, r2
 8015574:	00db      	lsls	r3, r3, #3
 8015576:	440b      	add	r3, r1
 8015578:	3312      	adds	r3, #18
 801557a:	881b      	ldrh	r3, [r3, #0]
 801557c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801557e:	8c3b      	ldrh	r3, [r7, #32]
 8015580:	3301      	adds	r3, #1
 8015582:	b29b      	uxth	r3, r3
 8015584:	843b      	strh	r3, [r7, #32]
 8015586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801558a:	2b09      	cmp	r3, #9
 801558c:	f77f af4c 	ble.w	8015428 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015590:	7afb      	ldrb	r3, [r7, #11]
 8015592:	f003 0302 	and.w	r3, r3, #2
 8015596:	2b00      	cmp	r3, #0
 8015598:	d108      	bne.n	80155ac <etharp_find_entry+0x1b8>
 801559a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801559e:	2b0a      	cmp	r3, #10
 80155a0:	d107      	bne.n	80155b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80155a2:	7afb      	ldrb	r3, [r7, #11]
 80155a4:	f003 0301 	and.w	r3, r3, #1
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d102      	bne.n	80155b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80155ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155b0:	e085      	b.n	80156be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80155b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80155b6:	2b09      	cmp	r3, #9
 80155b8:	dc02      	bgt.n	80155c0 <etharp_find_entry+0x1cc>
    i = empty;
 80155ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155bc:	843b      	strh	r3, [r7, #32]
 80155be:	e039      	b.n	8015634 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80155c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80155c4:	2b09      	cmp	r3, #9
 80155c6:	dc14      	bgt.n	80155f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80155c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80155cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155d0:	493d      	ldr	r1, [pc, #244]	; (80156c8 <etharp_find_entry+0x2d4>)
 80155d2:	4613      	mov	r3, r2
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	4413      	add	r3, r2
 80155d8:	00db      	lsls	r3, r3, #3
 80155da:	440b      	add	r3, r1
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d018      	beq.n	8015614 <etharp_find_entry+0x220>
 80155e2:	4b3a      	ldr	r3, [pc, #232]	; (80156cc <etharp_find_entry+0x2d8>)
 80155e4:	f240 126d 	movw	r2, #365	; 0x16d
 80155e8:	493b      	ldr	r1, [pc, #236]	; (80156d8 <etharp_find_entry+0x2e4>)
 80155ea:	483a      	ldr	r0, [pc, #232]	; (80156d4 <etharp_find_entry+0x2e0>)
 80155ec:	f002 fc90 	bl	8017f10 <iprintf>
 80155f0:	e010      	b.n	8015614 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80155f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80155f6:	2b09      	cmp	r3, #9
 80155f8:	dc02      	bgt.n	8015600 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80155fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80155fc:	843b      	strh	r3, [r7, #32]
 80155fe:	e009      	b.n	8015614 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015600:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015604:	2b09      	cmp	r3, #9
 8015606:	dc02      	bgt.n	801560e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015608:	8bfb      	ldrh	r3, [r7, #30]
 801560a:	843b      	strh	r3, [r7, #32]
 801560c:	e002      	b.n	8015614 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801560e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015612:	e054      	b.n	80156be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015614:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015618:	2b09      	cmp	r3, #9
 801561a:	dd06      	ble.n	801562a <etharp_find_entry+0x236>
 801561c:	4b2b      	ldr	r3, [pc, #172]	; (80156cc <etharp_find_entry+0x2d8>)
 801561e:	f240 127f 	movw	r2, #383	; 0x17f
 8015622:	492e      	ldr	r1, [pc, #184]	; (80156dc <etharp_find_entry+0x2e8>)
 8015624:	482b      	ldr	r0, [pc, #172]	; (80156d4 <etharp_find_entry+0x2e0>)
 8015626:	f002 fc73 	bl	8017f10 <iprintf>
    etharp_free_entry(i);
 801562a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801562e:	4618      	mov	r0, r3
 8015630:	f7ff fe06 	bl	8015240 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015634:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015638:	2b09      	cmp	r3, #9
 801563a:	dd06      	ble.n	801564a <etharp_find_entry+0x256>
 801563c:	4b23      	ldr	r3, [pc, #140]	; (80156cc <etharp_find_entry+0x2d8>)
 801563e:	f240 1283 	movw	r2, #387	; 0x183
 8015642:	4926      	ldr	r1, [pc, #152]	; (80156dc <etharp_find_entry+0x2e8>)
 8015644:	4823      	ldr	r0, [pc, #140]	; (80156d4 <etharp_find_entry+0x2e0>)
 8015646:	f002 fc63 	bl	8017f10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801564a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801564e:	491e      	ldr	r1, [pc, #120]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015650:	4613      	mov	r3, r2
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4413      	add	r3, r2
 8015656:	00db      	lsls	r3, r3, #3
 8015658:	440b      	add	r3, r1
 801565a:	3314      	adds	r3, #20
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d006      	beq.n	8015670 <etharp_find_entry+0x27c>
 8015662:	4b1a      	ldr	r3, [pc, #104]	; (80156cc <etharp_find_entry+0x2d8>)
 8015664:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015668:	491d      	ldr	r1, [pc, #116]	; (80156e0 <etharp_find_entry+0x2ec>)
 801566a:	481a      	ldr	r0, [pc, #104]	; (80156d4 <etharp_find_entry+0x2e0>)
 801566c:	f002 fc50 	bl	8017f10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d00b      	beq.n	801568e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015676:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	6819      	ldr	r1, [r3, #0]
 801567e:	4812      	ldr	r0, [pc, #72]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015680:	4613      	mov	r3, r2
 8015682:	005b      	lsls	r3, r3, #1
 8015684:	4413      	add	r3, r2
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	4403      	add	r3, r0
 801568a:	3304      	adds	r3, #4
 801568c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801568e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015692:	490d      	ldr	r1, [pc, #52]	; (80156c8 <etharp_find_entry+0x2d4>)
 8015694:	4613      	mov	r3, r2
 8015696:	005b      	lsls	r3, r3, #1
 8015698:	4413      	add	r3, r2
 801569a:	00db      	lsls	r3, r3, #3
 801569c:	440b      	add	r3, r1
 801569e:	3312      	adds	r3, #18
 80156a0:	2200      	movs	r2, #0
 80156a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80156a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156a8:	4907      	ldr	r1, [pc, #28]	; (80156c8 <etharp_find_entry+0x2d4>)
 80156aa:	4613      	mov	r3, r2
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	4413      	add	r3, r2
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	440b      	add	r3, r1
 80156b4:	3308      	adds	r3, #8
 80156b6:	687a      	ldr	r2, [r7, #4]
 80156b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80156ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80156be:	4618      	mov	r0, r3
 80156c0:	3728      	adds	r7, #40	; 0x28
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	20011c10 	.word	0x20011c10
 80156cc:	0801da58 	.word	0x0801da58
 80156d0:	0801da90 	.word	0x0801da90
 80156d4:	0801dad0 	.word	0x0801dad0
 80156d8:	0801daf8 	.word	0x0801daf8
 80156dc:	0801db10 	.word	0x0801db10
 80156e0:	0801db24 	.word	0x0801db24

080156e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b088      	sub	sp, #32
 80156e8:	af02      	add	r7, sp, #8
 80156ea:	60f8      	str	r0, [r7, #12]
 80156ec:	60b9      	str	r1, [r7, #8]
 80156ee:	607a      	str	r2, [r7, #4]
 80156f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80156f8:	2b06      	cmp	r3, #6
 80156fa:	d006      	beq.n	801570a <etharp_update_arp_entry+0x26>
 80156fc:	4b48      	ldr	r3, [pc, #288]	; (8015820 <etharp_update_arp_entry+0x13c>)
 80156fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015702:	4948      	ldr	r1, [pc, #288]	; (8015824 <etharp_update_arp_entry+0x140>)
 8015704:	4848      	ldr	r0, [pc, #288]	; (8015828 <etharp_update_arp_entry+0x144>)
 8015706:	f002 fc03 	bl	8017f10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d012      	beq.n	8015736 <etharp_update_arp_entry+0x52>
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d00e      	beq.n	8015736 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	68f9      	ldr	r1, [r7, #12]
 801571e:	4618      	mov	r0, r3
 8015720:	f001 f8f4 	bl	801690c <ip4_addr_isbroadcast_u32>
 8015724:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015726:	2b00      	cmp	r3, #0
 8015728:	d105      	bne.n	8015736 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015732:	2be0      	cmp	r3, #224	; 0xe0
 8015734:	d102      	bne.n	801573c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015736:	f06f 030f 	mvn.w	r3, #15
 801573a:	e06c      	b.n	8015816 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801573c:	78fb      	ldrb	r3, [r7, #3]
 801573e:	68fa      	ldr	r2, [r7, #12]
 8015740:	4619      	mov	r1, r3
 8015742:	68b8      	ldr	r0, [r7, #8]
 8015744:	f7ff fe56 	bl	80153f4 <etharp_find_entry>
 8015748:	4603      	mov	r3, r0
 801574a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801574c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015750:	2b00      	cmp	r3, #0
 8015752:	da02      	bge.n	801575a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015754:	8afb      	ldrh	r3, [r7, #22]
 8015756:	b25b      	sxtb	r3, r3
 8015758:	e05d      	b.n	8015816 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801575a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801575e:	4933      	ldr	r1, [pc, #204]	; (801582c <etharp_update_arp_entry+0x148>)
 8015760:	4613      	mov	r3, r2
 8015762:	005b      	lsls	r3, r3, #1
 8015764:	4413      	add	r3, r2
 8015766:	00db      	lsls	r3, r3, #3
 8015768:	440b      	add	r3, r1
 801576a:	3314      	adds	r3, #20
 801576c:	2202      	movs	r2, #2
 801576e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015770:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015774:	492d      	ldr	r1, [pc, #180]	; (801582c <etharp_update_arp_entry+0x148>)
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	440b      	add	r3, r1
 8015780:	3308      	adds	r3, #8
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801578a:	4613      	mov	r3, r2
 801578c:	005b      	lsls	r3, r3, #1
 801578e:	4413      	add	r3, r2
 8015790:	00db      	lsls	r3, r3, #3
 8015792:	3308      	adds	r3, #8
 8015794:	4a25      	ldr	r2, [pc, #148]	; (801582c <etharp_update_arp_entry+0x148>)
 8015796:	4413      	add	r3, r2
 8015798:	3304      	adds	r3, #4
 801579a:	2206      	movs	r2, #6
 801579c:	6879      	ldr	r1, [r7, #4]
 801579e:	4618      	mov	r0, r3
 80157a0:	f002 faf1 	bl	8017d86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80157a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157a8:	4920      	ldr	r1, [pc, #128]	; (801582c <etharp_update_arp_entry+0x148>)
 80157aa:	4613      	mov	r3, r2
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	4413      	add	r3, r2
 80157b0:	00db      	lsls	r3, r3, #3
 80157b2:	440b      	add	r3, r1
 80157b4:	3312      	adds	r3, #18
 80157b6:	2200      	movs	r2, #0
 80157b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80157ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157be:	491b      	ldr	r1, [pc, #108]	; (801582c <etharp_update_arp_entry+0x148>)
 80157c0:	4613      	mov	r3, r2
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	4413      	add	r3, r2
 80157c6:	00db      	lsls	r3, r3, #3
 80157c8:	440b      	add	r3, r1
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d021      	beq.n	8015814 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80157d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157d4:	4915      	ldr	r1, [pc, #84]	; (801582c <etharp_update_arp_entry+0x148>)
 80157d6:	4613      	mov	r3, r2
 80157d8:	005b      	lsls	r3, r3, #1
 80157da:	4413      	add	r3, r2
 80157dc:	00db      	lsls	r3, r3, #3
 80157de:	440b      	add	r3, r1
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80157e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157e8:	4910      	ldr	r1, [pc, #64]	; (801582c <etharp_update_arp_entry+0x148>)
 80157ea:	4613      	mov	r3, r2
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	4413      	add	r3, r2
 80157f0:	00db      	lsls	r3, r3, #3
 80157f2:	440b      	add	r3, r1
 80157f4:	2200      	movs	r2, #0
 80157f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80157fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	6939      	ldr	r1, [r7, #16]
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f001 ff8d 	bl	8017728 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801580e:	6938      	ldr	r0, [r7, #16]
 8015810:	f7f9 f80c 	bl	800e82c <pbuf_free>
  }
  return ERR_OK;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3718      	adds	r7, #24
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	0801da58 	.word	0x0801da58
 8015824:	0801db50 	.word	0x0801db50
 8015828:	0801dad0 	.word	0x0801dad0
 801582c:	20011c10 	.word	0x20011c10

08015830 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015838:	2300      	movs	r3, #0
 801583a:	60fb      	str	r3, [r7, #12]
 801583c:	e01e      	b.n	801587c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801583e:	4913      	ldr	r1, [pc, #76]	; (801588c <etharp_cleanup_netif+0x5c>)
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	440b      	add	r3, r1
 801584c:	3314      	adds	r3, #20
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015852:	7afb      	ldrb	r3, [r7, #11]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d00e      	beq.n	8015876 <etharp_cleanup_netif+0x46>
 8015858:	490c      	ldr	r1, [pc, #48]	; (801588c <etharp_cleanup_netif+0x5c>)
 801585a:	68fa      	ldr	r2, [r7, #12]
 801585c:	4613      	mov	r3, r2
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	4413      	add	r3, r2
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	440b      	add	r3, r1
 8015866:	3308      	adds	r3, #8
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	687a      	ldr	r2, [r7, #4]
 801586c:	429a      	cmp	r2, r3
 801586e:	d102      	bne.n	8015876 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f7ff fce5 	bl	8015240 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	3301      	adds	r3, #1
 801587a:	60fb      	str	r3, [r7, #12]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	2b09      	cmp	r3, #9
 8015880:	dddd      	ble.n	801583e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015882:	bf00      	nop
 8015884:	bf00      	nop
 8015886:	3710      	adds	r7, #16
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	20011c10 	.word	0x20011c10

08015890 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015890:	b5b0      	push	{r4, r5, r7, lr}
 8015892:	b08a      	sub	sp, #40	; 0x28
 8015894:	af04      	add	r7, sp, #16
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d107      	bne.n	80158b0 <etharp_input+0x20>
 80158a0:	4b3d      	ldr	r3, [pc, #244]	; (8015998 <etharp_input+0x108>)
 80158a2:	f240 228a 	movw	r2, #650	; 0x28a
 80158a6:	493d      	ldr	r1, [pc, #244]	; (801599c <etharp_input+0x10c>)
 80158a8:	483d      	ldr	r0, [pc, #244]	; (80159a0 <etharp_input+0x110>)
 80158aa:	f002 fb31 	bl	8017f10 <iprintf>
 80158ae:	e06f      	b.n	8015990 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	881b      	ldrh	r3, [r3, #0]
 80158ba:	b29b      	uxth	r3, r3
 80158bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80158c0:	d10c      	bne.n	80158dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158c6:	2b06      	cmp	r3, #6
 80158c8:	d108      	bne.n	80158dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158ce:	2b04      	cmp	r3, #4
 80158d0:	d104      	bne.n	80158dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	885b      	ldrh	r3, [r3, #2]
 80158d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158d8:	2b08      	cmp	r3, #8
 80158da:	d003      	beq.n	80158e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f7f8 ffa5 	bl	800e82c <pbuf_free>
    return;
 80158e2:	e055      	b.n	8015990 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	330e      	adds	r3, #14
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	3318      	adds	r3, #24
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	3304      	adds	r3, #4
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d102      	bne.n	8015904 <etharp_input+0x74>
    for_us = 0;
 80158fe:	2300      	movs	r3, #0
 8015900:	75fb      	strb	r3, [r7, #23]
 8015902:	e009      	b.n	8015918 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015904:	68ba      	ldr	r2, [r7, #8]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	3304      	adds	r3, #4
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	429a      	cmp	r2, r3
 801590e:	bf0c      	ite	eq
 8015910:	2301      	moveq	r3, #1
 8015912:	2300      	movne	r3, #0
 8015914:	b2db      	uxtb	r3, r3
 8015916:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015918:	693b      	ldr	r3, [r7, #16]
 801591a:	f103 0208 	add.w	r2, r3, #8
 801591e:	7dfb      	ldrb	r3, [r7, #23]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d001      	beq.n	8015928 <etharp_input+0x98>
 8015924:	2301      	movs	r3, #1
 8015926:	e000      	b.n	801592a <etharp_input+0x9a>
 8015928:	2302      	movs	r3, #2
 801592a:	f107 010c 	add.w	r1, r7, #12
 801592e:	6838      	ldr	r0, [r7, #0]
 8015930:	f7ff fed8 	bl	80156e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	88db      	ldrh	r3, [r3, #6]
 8015938:	b29b      	uxth	r3, r3
 801593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801593e:	d003      	beq.n	8015948 <etharp_input+0xb8>
 8015940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015944:	d01e      	beq.n	8015984 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015946:	e020      	b.n	801598a <etharp_input+0xfa>
      if (for_us) {
 8015948:	7dfb      	ldrb	r3, [r7, #23]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d01c      	beq.n	8015988 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015964:	693a      	ldr	r2, [r7, #16]
 8015966:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015968:	2102      	movs	r1, #2
 801596a:	9103      	str	r1, [sp, #12]
 801596c:	f107 010c 	add.w	r1, r7, #12
 8015970:	9102      	str	r1, [sp, #8]
 8015972:	9201      	str	r2, [sp, #4]
 8015974:	9300      	str	r3, [sp, #0]
 8015976:	462b      	mov	r3, r5
 8015978:	4622      	mov	r2, r4
 801597a:	4601      	mov	r1, r0
 801597c:	6838      	ldr	r0, [r7, #0]
 801597e:	f000 faeb 	bl	8015f58 <etharp_raw>
      break;
 8015982:	e001      	b.n	8015988 <etharp_input+0xf8>
      break;
 8015984:	bf00      	nop
 8015986:	e000      	b.n	801598a <etharp_input+0xfa>
      break;
 8015988:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7f8 ff4e 	bl	800e82c <pbuf_free>
}
 8015990:	3718      	adds	r7, #24
 8015992:	46bd      	mov	sp, r7
 8015994:	bdb0      	pop	{r4, r5, r7, pc}
 8015996:	bf00      	nop
 8015998:	0801da58 	.word	0x0801da58
 801599c:	0801dba8 	.word	0x0801dba8
 80159a0:	0801dad0 	.word	0x0801dad0

080159a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b086      	sub	sp, #24
 80159a8:	af02      	add	r7, sp, #8
 80159aa:	60f8      	str	r0, [r7, #12]
 80159ac:	60b9      	str	r1, [r7, #8]
 80159ae:	4613      	mov	r3, r2
 80159b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80159b2:	79fa      	ldrb	r2, [r7, #7]
 80159b4:	4944      	ldr	r1, [pc, #272]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 80159b6:	4613      	mov	r3, r2
 80159b8:	005b      	lsls	r3, r3, #1
 80159ba:	4413      	add	r3, r2
 80159bc:	00db      	lsls	r3, r3, #3
 80159be:	440b      	add	r3, r1
 80159c0:	3314      	adds	r3, #20
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	2b01      	cmp	r3, #1
 80159c6:	d806      	bhi.n	80159d6 <etharp_output_to_arp_index+0x32>
 80159c8:	4b40      	ldr	r3, [pc, #256]	; (8015acc <etharp_output_to_arp_index+0x128>)
 80159ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80159ce:	4940      	ldr	r1, [pc, #256]	; (8015ad0 <etharp_output_to_arp_index+0x12c>)
 80159d0:	4840      	ldr	r0, [pc, #256]	; (8015ad4 <etharp_output_to_arp_index+0x130>)
 80159d2:	f002 fa9d 	bl	8017f10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80159d6:	79fa      	ldrb	r2, [r7, #7]
 80159d8:	493b      	ldr	r1, [pc, #236]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 80159da:	4613      	mov	r3, r2
 80159dc:	005b      	lsls	r3, r3, #1
 80159de:	4413      	add	r3, r2
 80159e0:	00db      	lsls	r3, r3, #3
 80159e2:	440b      	add	r3, r1
 80159e4:	3314      	adds	r3, #20
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	2b02      	cmp	r3, #2
 80159ea:	d153      	bne.n	8015a94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80159ec:	79fa      	ldrb	r2, [r7, #7]
 80159ee:	4936      	ldr	r1, [pc, #216]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 80159f0:	4613      	mov	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	3312      	adds	r3, #18
 80159fc:	881b      	ldrh	r3, [r3, #0]
 80159fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015a02:	d919      	bls.n	8015a38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015a04:	79fa      	ldrb	r2, [r7, #7]
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	4a2e      	ldr	r2, [pc, #184]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a10:	4413      	add	r3, r2
 8015a12:	3304      	adds	r3, #4
 8015a14:	4619      	mov	r1, r3
 8015a16:	68f8      	ldr	r0, [r7, #12]
 8015a18:	f000 fb4c 	bl	80160b4 <etharp_request>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d138      	bne.n	8015a94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a22:	79fa      	ldrb	r2, [r7, #7]
 8015a24:	4928      	ldr	r1, [pc, #160]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a26:	4613      	mov	r3, r2
 8015a28:	005b      	lsls	r3, r3, #1
 8015a2a:	4413      	add	r3, r2
 8015a2c:	00db      	lsls	r3, r3, #3
 8015a2e:	440b      	add	r3, r1
 8015a30:	3314      	adds	r3, #20
 8015a32:	2203      	movs	r2, #3
 8015a34:	701a      	strb	r2, [r3, #0]
 8015a36:	e02d      	b.n	8015a94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015a38:	79fa      	ldrb	r2, [r7, #7]
 8015a3a:	4923      	ldr	r1, [pc, #140]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a3c:	4613      	mov	r3, r2
 8015a3e:	005b      	lsls	r3, r3, #1
 8015a40:	4413      	add	r3, r2
 8015a42:	00db      	lsls	r3, r3, #3
 8015a44:	440b      	add	r3, r1
 8015a46:	3312      	adds	r3, #18
 8015a48:	881b      	ldrh	r3, [r3, #0]
 8015a4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015a4e:	d321      	bcc.n	8015a94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015a50:	79fa      	ldrb	r2, [r7, #7]
 8015a52:	4613      	mov	r3, r2
 8015a54:	005b      	lsls	r3, r3, #1
 8015a56:	4413      	add	r3, r2
 8015a58:	00db      	lsls	r3, r3, #3
 8015a5a:	4a1b      	ldr	r2, [pc, #108]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a5c:	4413      	add	r3, r2
 8015a5e:	1d19      	adds	r1, r3, #4
 8015a60:	79fa      	ldrb	r2, [r7, #7]
 8015a62:	4613      	mov	r3, r2
 8015a64:	005b      	lsls	r3, r3, #1
 8015a66:	4413      	add	r3, r2
 8015a68:	00db      	lsls	r3, r3, #3
 8015a6a:	3308      	adds	r3, #8
 8015a6c:	4a16      	ldr	r2, [pc, #88]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a6e:	4413      	add	r3, r2
 8015a70:	3304      	adds	r3, #4
 8015a72:	461a      	mov	r2, r3
 8015a74:	68f8      	ldr	r0, [r7, #12]
 8015a76:	f000 fafb 	bl	8016070 <etharp_request_dst>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d109      	bne.n	8015a94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a80:	79fa      	ldrb	r2, [r7, #7]
 8015a82:	4911      	ldr	r1, [pc, #68]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015a84:	4613      	mov	r3, r2
 8015a86:	005b      	lsls	r3, r3, #1
 8015a88:	4413      	add	r3, r2
 8015a8a:	00db      	lsls	r3, r3, #3
 8015a8c:	440b      	add	r3, r1
 8015a8e:	3314      	adds	r3, #20
 8015a90:	2203      	movs	r2, #3
 8015a92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015a9a:	79fa      	ldrb	r2, [r7, #7]
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	005b      	lsls	r3, r3, #1
 8015aa0:	4413      	add	r3, r2
 8015aa2:	00db      	lsls	r3, r3, #3
 8015aa4:	3308      	adds	r3, #8
 8015aa6:	4a08      	ldr	r2, [pc, #32]	; (8015ac8 <etharp_output_to_arp_index+0x124>)
 8015aa8:	4413      	add	r3, r2
 8015aaa:	3304      	adds	r3, #4
 8015aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ab0:	9200      	str	r2, [sp, #0]
 8015ab2:	460a      	mov	r2, r1
 8015ab4:	68b9      	ldr	r1, [r7, #8]
 8015ab6:	68f8      	ldr	r0, [r7, #12]
 8015ab8:	f001 fe36 	bl	8017728 <ethernet_output>
 8015abc:	4603      	mov	r3, r0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20011c10 	.word	0x20011c10
 8015acc:	0801da58 	.word	0x0801da58
 8015ad0:	0801dbc8 	.word	0x0801dbc8
 8015ad4:	0801dad0 	.word	0x0801dad0

08015ad8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b08a      	sub	sp, #40	; 0x28
 8015adc:	af02      	add	r7, sp, #8
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d106      	bne.n	8015afc <etharp_output+0x24>
 8015aee:	4b73      	ldr	r3, [pc, #460]	; (8015cbc <etharp_output+0x1e4>)
 8015af0:	f240 321e 	movw	r2, #798	; 0x31e
 8015af4:	4972      	ldr	r1, [pc, #456]	; (8015cc0 <etharp_output+0x1e8>)
 8015af6:	4873      	ldr	r0, [pc, #460]	; (8015cc4 <etharp_output+0x1ec>)
 8015af8:	f002 fa0a 	bl	8017f10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d106      	bne.n	8015b10 <etharp_output+0x38>
 8015b02:	4b6e      	ldr	r3, [pc, #440]	; (8015cbc <etharp_output+0x1e4>)
 8015b04:	f240 321f 	movw	r2, #799	; 0x31f
 8015b08:	496f      	ldr	r1, [pc, #444]	; (8015cc8 <etharp_output+0x1f0>)
 8015b0a:	486e      	ldr	r0, [pc, #440]	; (8015cc4 <etharp_output+0x1ec>)
 8015b0c:	f002 fa00 	bl	8017f10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d106      	bne.n	8015b24 <etharp_output+0x4c>
 8015b16:	4b69      	ldr	r3, [pc, #420]	; (8015cbc <etharp_output+0x1e4>)
 8015b18:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015b1c:	496b      	ldr	r1, [pc, #428]	; (8015ccc <etharp_output+0x1f4>)
 8015b1e:	4869      	ldr	r0, [pc, #420]	; (8015cc4 <etharp_output+0x1ec>)
 8015b20:	f002 f9f6 	bl	8017f10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	68f9      	ldr	r1, [r7, #12]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f000 feee 	bl	801690c <ip4_addr_isbroadcast_u32>
 8015b30:	4603      	mov	r3, r0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d002      	beq.n	8015b3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015b36:	4b66      	ldr	r3, [pc, #408]	; (8015cd0 <etharp_output+0x1f8>)
 8015b38:	61fb      	str	r3, [r7, #28]
 8015b3a:	e0af      	b.n	8015c9c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b44:	2be0      	cmp	r3, #224	; 0xe0
 8015b46:	d118      	bne.n	8015b7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015b48:	2301      	movs	r3, #1
 8015b4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015b50:	235e      	movs	r3, #94	; 0x5e
 8015b52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	3301      	adds	r3, #1
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	3302      	adds	r3, #2
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	3303      	adds	r3, #3
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015b72:	f107 0310 	add.w	r3, r7, #16
 8015b76:	61fb      	str	r3, [r7, #28]
 8015b78:	e090      	b.n	8015c9c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	3304      	adds	r3, #4
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	405a      	eors	r2, r3
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	3308      	adds	r3, #8
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	4013      	ands	r3, r2
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d012      	beq.n	8015bb8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b98:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015b9c:	4293      	cmp	r3, r2
 8015b9e:	d00b      	beq.n	8015bb8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	330c      	adds	r3, #12
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	330c      	adds	r3, #12
 8015bae:	61bb      	str	r3, [r7, #24]
 8015bb0:	e002      	b.n	8015bb8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015bb2:	f06f 0303 	mvn.w	r3, #3
 8015bb6:	e07d      	b.n	8015cb4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015bb8:	4b46      	ldr	r3, [pc, #280]	; (8015cd4 <etharp_output+0x1fc>)
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4a46      	ldr	r2, [pc, #280]	; (8015cd8 <etharp_output+0x200>)
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	005b      	lsls	r3, r3, #1
 8015bc4:	440b      	add	r3, r1
 8015bc6:	00db      	lsls	r3, r3, #3
 8015bc8:	4413      	add	r3, r2
 8015bca:	3314      	adds	r3, #20
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d925      	bls.n	8015c1e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015bd2:	4b40      	ldr	r3, [pc, #256]	; (8015cd4 <etharp_output+0x1fc>)
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4a3f      	ldr	r2, [pc, #252]	; (8015cd8 <etharp_output+0x200>)
 8015bda:	460b      	mov	r3, r1
 8015bdc:	005b      	lsls	r3, r3, #1
 8015bde:	440b      	add	r3, r1
 8015be0:	00db      	lsls	r3, r3, #3
 8015be2:	4413      	add	r3, r2
 8015be4:	3308      	adds	r3, #8
 8015be6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015be8:	68fa      	ldr	r2, [r7, #12]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d117      	bne.n	8015c1e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015bee:	69bb      	ldr	r3, [r7, #24]
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	4b38      	ldr	r3, [pc, #224]	; (8015cd4 <etharp_output+0x1fc>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	4937      	ldr	r1, [pc, #220]	; (8015cd8 <etharp_output+0x200>)
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	005b      	lsls	r3, r3, #1
 8015bfe:	4403      	add	r3, r0
 8015c00:	00db      	lsls	r3, r3, #3
 8015c02:	440b      	add	r3, r1
 8015c04:	3304      	adds	r3, #4
 8015c06:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d108      	bne.n	8015c1e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015c0c:	4b31      	ldr	r3, [pc, #196]	; (8015cd4 <etharp_output+0x1fc>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	461a      	mov	r2, r3
 8015c12:	68b9      	ldr	r1, [r7, #8]
 8015c14:	68f8      	ldr	r0, [r7, #12]
 8015c16:	f7ff fec5 	bl	80159a4 <etharp_output_to_arp_index>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	e04a      	b.n	8015cb4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c1e:	2300      	movs	r3, #0
 8015c20:	75fb      	strb	r3, [r7, #23]
 8015c22:	e031      	b.n	8015c88 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c24:	7dfa      	ldrb	r2, [r7, #23]
 8015c26:	492c      	ldr	r1, [pc, #176]	; (8015cd8 <etharp_output+0x200>)
 8015c28:	4613      	mov	r3, r2
 8015c2a:	005b      	lsls	r3, r3, #1
 8015c2c:	4413      	add	r3, r2
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	440b      	add	r3, r1
 8015c32:	3314      	adds	r3, #20
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	2b01      	cmp	r3, #1
 8015c38:	d923      	bls.n	8015c82 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015c3a:	7dfa      	ldrb	r2, [r7, #23]
 8015c3c:	4926      	ldr	r1, [pc, #152]	; (8015cd8 <etharp_output+0x200>)
 8015c3e:	4613      	mov	r3, r2
 8015c40:	005b      	lsls	r3, r3, #1
 8015c42:	4413      	add	r3, r2
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	440b      	add	r3, r1
 8015c48:	3308      	adds	r3, #8
 8015c4a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d117      	bne.n	8015c82 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	6819      	ldr	r1, [r3, #0]
 8015c56:	7dfa      	ldrb	r2, [r7, #23]
 8015c58:	481f      	ldr	r0, [pc, #124]	; (8015cd8 <etharp_output+0x200>)
 8015c5a:	4613      	mov	r3, r2
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	4413      	add	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	4403      	add	r3, r0
 8015c64:	3304      	adds	r3, #4
 8015c66:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015c68:	4299      	cmp	r1, r3
 8015c6a:	d10a      	bne.n	8015c82 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015c6c:	4a19      	ldr	r2, [pc, #100]	; (8015cd4 <etharp_output+0x1fc>)
 8015c6e:	7dfb      	ldrb	r3, [r7, #23]
 8015c70:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	461a      	mov	r2, r3
 8015c76:	68b9      	ldr	r1, [r7, #8]
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f7ff fe93 	bl	80159a4 <etharp_output_to_arp_index>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	e018      	b.n	8015cb4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c82:	7dfb      	ldrb	r3, [r7, #23]
 8015c84:	3301      	adds	r3, #1
 8015c86:	75fb      	strb	r3, [r7, #23]
 8015c88:	7dfb      	ldrb	r3, [r7, #23]
 8015c8a:	2b09      	cmp	r3, #9
 8015c8c:	d9ca      	bls.n	8015c24 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015c8e:	68ba      	ldr	r2, [r7, #8]
 8015c90:	69b9      	ldr	r1, [r7, #24]
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f000 f822 	bl	8015cdc <etharp_query>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	e00b      	b.n	8015cb4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	68b9      	ldr	r1, [r7, #8]
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f001 fd3b 	bl	8017728 <ethernet_output>
 8015cb2:	4603      	mov	r3, r0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3720      	adds	r7, #32
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	0801da58 	.word	0x0801da58
 8015cc0:	0801dba8 	.word	0x0801dba8
 8015cc4:	0801dad0 	.word	0x0801dad0
 8015cc8:	0801dbf8 	.word	0x0801dbf8
 8015ccc:	0801db98 	.word	0x0801db98
 8015cd0:	0801e2f4 	.word	0x0801e2f4
 8015cd4:	20011d00 	.word	0x20011d00
 8015cd8:	20011c10 	.word	0x20011c10

08015cdc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b08c      	sub	sp, #48	; 0x30
 8015ce0:	af02      	add	r7, sp, #8
 8015ce2:	60f8      	str	r0, [r7, #12]
 8015ce4:	60b9      	str	r1, [r7, #8]
 8015ce6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	3326      	adds	r3, #38	; 0x26
 8015cec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015cee:	23ff      	movs	r3, #255	; 0xff
 8015cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	68f9      	ldr	r1, [r7, #12]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 fe04 	bl	801690c <ip4_addr_isbroadcast_u32>
 8015d04:	4603      	mov	r3, r0
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d10c      	bne.n	8015d24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d0a:	68bb      	ldr	r3, [r7, #8]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d12:	2be0      	cmp	r3, #224	; 0xe0
 8015d14:	d006      	beq.n	8015d24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d003      	beq.n	8015d24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d102      	bne.n	8015d2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d24:	f06f 030f 	mvn.w	r3, #15
 8015d28:	e101      	b.n	8015f2e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015d2a:	68fa      	ldr	r2, [r7, #12]
 8015d2c:	2101      	movs	r1, #1
 8015d2e:	68b8      	ldr	r0, [r7, #8]
 8015d30:	f7ff fb60 	bl	80153f4 <etharp_find_entry>
 8015d34:	4603      	mov	r3, r0
 8015d36:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	da02      	bge.n	8015d46 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015d40:	8a7b      	ldrh	r3, [r7, #18]
 8015d42:	b25b      	sxtb	r3, r3
 8015d44:	e0f3      	b.n	8015f2e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015d46:	8a7b      	ldrh	r3, [r7, #18]
 8015d48:	2b7e      	cmp	r3, #126	; 0x7e
 8015d4a:	d906      	bls.n	8015d5a <etharp_query+0x7e>
 8015d4c:	4b7a      	ldr	r3, [pc, #488]	; (8015f38 <etharp_query+0x25c>)
 8015d4e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015d52:	497a      	ldr	r1, [pc, #488]	; (8015f3c <etharp_query+0x260>)
 8015d54:	487a      	ldr	r0, [pc, #488]	; (8015f40 <etharp_query+0x264>)
 8015d56:	f002 f8db 	bl	8017f10 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015d5a:	8a7b      	ldrh	r3, [r7, #18]
 8015d5c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015d5e:	7c7a      	ldrb	r2, [r7, #17]
 8015d60:	4978      	ldr	r1, [pc, #480]	; (8015f44 <etharp_query+0x268>)
 8015d62:	4613      	mov	r3, r2
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	4413      	add	r3, r2
 8015d68:	00db      	lsls	r3, r3, #3
 8015d6a:	440b      	add	r3, r1
 8015d6c:	3314      	adds	r3, #20
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d115      	bne.n	8015da0 <etharp_query+0xc4>
    is_new_entry = 1;
 8015d74:	2301      	movs	r3, #1
 8015d76:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015d78:	7c7a      	ldrb	r2, [r7, #17]
 8015d7a:	4972      	ldr	r1, [pc, #456]	; (8015f44 <etharp_query+0x268>)
 8015d7c:	4613      	mov	r3, r2
 8015d7e:	005b      	lsls	r3, r3, #1
 8015d80:	4413      	add	r3, r2
 8015d82:	00db      	lsls	r3, r3, #3
 8015d84:	440b      	add	r3, r1
 8015d86:	3314      	adds	r3, #20
 8015d88:	2201      	movs	r2, #1
 8015d8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015d8c:	7c7a      	ldrb	r2, [r7, #17]
 8015d8e:	496d      	ldr	r1, [pc, #436]	; (8015f44 <etharp_query+0x268>)
 8015d90:	4613      	mov	r3, r2
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	4413      	add	r3, r2
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	440b      	add	r3, r1
 8015d9a:	3308      	adds	r3, #8
 8015d9c:	68fa      	ldr	r2, [r7, #12]
 8015d9e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015da0:	7c7a      	ldrb	r2, [r7, #17]
 8015da2:	4968      	ldr	r1, [pc, #416]	; (8015f44 <etharp_query+0x268>)
 8015da4:	4613      	mov	r3, r2
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	4413      	add	r3, r2
 8015daa:	00db      	lsls	r3, r3, #3
 8015dac:	440b      	add	r3, r1
 8015dae:	3314      	adds	r3, #20
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d011      	beq.n	8015dda <etharp_query+0xfe>
 8015db6:	7c7a      	ldrb	r2, [r7, #17]
 8015db8:	4962      	ldr	r1, [pc, #392]	; (8015f44 <etharp_query+0x268>)
 8015dba:	4613      	mov	r3, r2
 8015dbc:	005b      	lsls	r3, r3, #1
 8015dbe:	4413      	add	r3, r2
 8015dc0:	00db      	lsls	r3, r3, #3
 8015dc2:	440b      	add	r3, r1
 8015dc4:	3314      	adds	r3, #20
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d806      	bhi.n	8015dda <etharp_query+0xfe>
 8015dcc:	4b5a      	ldr	r3, [pc, #360]	; (8015f38 <etharp_query+0x25c>)
 8015dce:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015dd2:	495d      	ldr	r1, [pc, #372]	; (8015f48 <etharp_query+0x26c>)
 8015dd4:	485a      	ldr	r0, [pc, #360]	; (8015f40 <etharp_query+0x264>)
 8015dd6:	f002 f89b 	bl	8017f10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015dda:	6a3b      	ldr	r3, [r7, #32]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d102      	bne.n	8015de6 <etharp_query+0x10a>
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d10c      	bne.n	8015e00 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015de6:	68b9      	ldr	r1, [r7, #8]
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f000 f963 	bl	80160b4 <etharp_request>
 8015dee:	4603      	mov	r3, r0
 8015df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d102      	bne.n	8015e00 <etharp_query+0x124>
      return result;
 8015dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015dfe:	e096      	b.n	8015f2e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d106      	bne.n	8015e14 <etharp_query+0x138>
 8015e06:	4b4c      	ldr	r3, [pc, #304]	; (8015f38 <etharp_query+0x25c>)
 8015e08:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015e0c:	494f      	ldr	r1, [pc, #316]	; (8015f4c <etharp_query+0x270>)
 8015e0e:	484c      	ldr	r0, [pc, #304]	; (8015f40 <etharp_query+0x264>)
 8015e10:	f002 f87e 	bl	8017f10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015e14:	7c7a      	ldrb	r2, [r7, #17]
 8015e16:	494b      	ldr	r1, [pc, #300]	; (8015f44 <etharp_query+0x268>)
 8015e18:	4613      	mov	r3, r2
 8015e1a:	005b      	lsls	r3, r3, #1
 8015e1c:	4413      	add	r3, r2
 8015e1e:	00db      	lsls	r3, r3, #3
 8015e20:	440b      	add	r3, r1
 8015e22:	3314      	adds	r3, #20
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	2b01      	cmp	r3, #1
 8015e28:	d917      	bls.n	8015e5a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015e2a:	4a49      	ldr	r2, [pc, #292]	; (8015f50 <etharp_query+0x274>)
 8015e2c:	7c7b      	ldrb	r3, [r7, #17]
 8015e2e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015e30:	7c7a      	ldrb	r2, [r7, #17]
 8015e32:	4613      	mov	r3, r2
 8015e34:	005b      	lsls	r3, r3, #1
 8015e36:	4413      	add	r3, r2
 8015e38:	00db      	lsls	r3, r3, #3
 8015e3a:	3308      	adds	r3, #8
 8015e3c:	4a41      	ldr	r2, [pc, #260]	; (8015f44 <etharp_query+0x268>)
 8015e3e:	4413      	add	r3, r2
 8015e40:	3304      	adds	r3, #4
 8015e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e46:	9200      	str	r2, [sp, #0]
 8015e48:	697a      	ldr	r2, [r7, #20]
 8015e4a:	6879      	ldr	r1, [r7, #4]
 8015e4c:	68f8      	ldr	r0, [r7, #12]
 8015e4e:	f001 fc6b 	bl	8017728 <ethernet_output>
 8015e52:	4603      	mov	r3, r0
 8015e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e58:	e067      	b.n	8015f2a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015e5a:	7c7a      	ldrb	r2, [r7, #17]
 8015e5c:	4939      	ldr	r1, [pc, #228]	; (8015f44 <etharp_query+0x268>)
 8015e5e:	4613      	mov	r3, r2
 8015e60:	005b      	lsls	r3, r3, #1
 8015e62:	4413      	add	r3, r2
 8015e64:	00db      	lsls	r3, r3, #3
 8015e66:	440b      	add	r3, r1
 8015e68:	3314      	adds	r3, #20
 8015e6a:	781b      	ldrb	r3, [r3, #0]
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d15c      	bne.n	8015f2a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015e70:	2300      	movs	r3, #0
 8015e72:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e78:	e01c      	b.n	8015eb4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	895a      	ldrh	r2, [r3, #10]
 8015e7e:	69fb      	ldr	r3, [r7, #28]
 8015e80:	891b      	ldrh	r3, [r3, #8]
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d10a      	bne.n	8015e9c <etharp_query+0x1c0>
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d006      	beq.n	8015e9c <etharp_query+0x1c0>
 8015e8e:	4b2a      	ldr	r3, [pc, #168]	; (8015f38 <etharp_query+0x25c>)
 8015e90:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015e94:	492f      	ldr	r1, [pc, #188]	; (8015f54 <etharp_query+0x278>)
 8015e96:	482a      	ldr	r0, [pc, #168]	; (8015f40 <etharp_query+0x264>)
 8015e98:	f002 f83a 	bl	8017f10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	7b1b      	ldrb	r3, [r3, #12]
 8015ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d002      	beq.n	8015eae <etharp_query+0x1d2>
        copy_needed = 1;
 8015ea8:	2301      	movs	r3, #1
 8015eaa:	61bb      	str	r3, [r7, #24]
        break;
 8015eac:	e005      	b.n	8015eba <etharp_query+0x1de>
      }
      p = p->next;
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1df      	bne.n	8015e7a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d007      	beq.n	8015ed0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015ec0:	687a      	ldr	r2, [r7, #4]
 8015ec2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015ec6:	200e      	movs	r0, #14
 8015ec8:	f7f8 ff18 	bl	800ecfc <pbuf_clone>
 8015ecc:	61f8      	str	r0, [r7, #28]
 8015ece:	e004      	b.n	8015eda <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015ed4:	69f8      	ldr	r0, [r7, #28]
 8015ed6:	f7f8 fd4f 	bl	800e978 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d021      	beq.n	8015f24 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015ee0:	7c7a      	ldrb	r2, [r7, #17]
 8015ee2:	4918      	ldr	r1, [pc, #96]	; (8015f44 <etharp_query+0x268>)
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	005b      	lsls	r3, r3, #1
 8015ee8:	4413      	add	r3, r2
 8015eea:	00db      	lsls	r3, r3, #3
 8015eec:	440b      	add	r3, r1
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d00a      	beq.n	8015f0a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015ef4:	7c7a      	ldrb	r2, [r7, #17]
 8015ef6:	4913      	ldr	r1, [pc, #76]	; (8015f44 <etharp_query+0x268>)
 8015ef8:	4613      	mov	r3, r2
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	4413      	add	r3, r2
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	440b      	add	r3, r1
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7f8 fc91 	bl	800e82c <pbuf_free>
      }
      arp_table[i].q = p;
 8015f0a:	7c7a      	ldrb	r2, [r7, #17]
 8015f0c:	490d      	ldr	r1, [pc, #52]	; (8015f44 <etharp_query+0x268>)
 8015f0e:	4613      	mov	r3, r2
 8015f10:	005b      	lsls	r3, r3, #1
 8015f12:	4413      	add	r3, r2
 8015f14:	00db      	lsls	r3, r3, #3
 8015f16:	440b      	add	r3, r1
 8015f18:	69fa      	ldr	r2, [r7, #28]
 8015f1a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f22:	e002      	b.n	8015f2a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015f24:	23ff      	movs	r3, #255	; 0xff
 8015f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015f2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3728      	adds	r7, #40	; 0x28
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}
 8015f36:	bf00      	nop
 8015f38:	0801da58 	.word	0x0801da58
 8015f3c:	0801dc04 	.word	0x0801dc04
 8015f40:	0801dad0 	.word	0x0801dad0
 8015f44:	20011c10 	.word	0x20011c10
 8015f48:	0801dc14 	.word	0x0801dc14
 8015f4c:	0801dbf8 	.word	0x0801dbf8
 8015f50:	20011d00 	.word	0x20011d00
 8015f54:	0801dc3c 	.word	0x0801dc3c

08015f58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b08a      	sub	sp, #40	; 0x28
 8015f5c:	af02      	add	r7, sp, #8
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015f66:	2300      	movs	r3, #0
 8015f68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d106      	bne.n	8015f7e <etharp_raw+0x26>
 8015f70:	4b3a      	ldr	r3, [pc, #232]	; (801605c <etharp_raw+0x104>)
 8015f72:	f240 4257 	movw	r2, #1111	; 0x457
 8015f76:	493a      	ldr	r1, [pc, #232]	; (8016060 <etharp_raw+0x108>)
 8015f78:	483a      	ldr	r0, [pc, #232]	; (8016064 <etharp_raw+0x10c>)
 8015f7a:	f001 ffc9 	bl	8017f10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015f7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f82:	211c      	movs	r1, #28
 8015f84:	200e      	movs	r0, #14
 8015f86:	f7f8 f96d 	bl	800e264 <pbuf_alloc>
 8015f8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d102      	bne.n	8015f98 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f96:	e05d      	b.n	8016054 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015f98:	69bb      	ldr	r3, [r7, #24]
 8015f9a:	895b      	ldrh	r3, [r3, #10]
 8015f9c:	2b1b      	cmp	r3, #27
 8015f9e:	d806      	bhi.n	8015fae <etharp_raw+0x56>
 8015fa0:	4b2e      	ldr	r3, [pc, #184]	; (801605c <etharp_raw+0x104>)
 8015fa2:	f240 4262 	movw	r2, #1122	; 0x462
 8015fa6:	4930      	ldr	r1, [pc, #192]	; (8016068 <etharp_raw+0x110>)
 8015fa8:	482e      	ldr	r0, [pc, #184]	; (8016064 <etharp_raw+0x10c>)
 8015faa:	f001 ffb1 	bl	8017f10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015fb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7f6 ff32 	bl	800ce20 <lwip_htons>
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015fca:	2b06      	cmp	r3, #6
 8015fcc:	d006      	beq.n	8015fdc <etharp_raw+0x84>
 8015fce:	4b23      	ldr	r3, [pc, #140]	; (801605c <etharp_raw+0x104>)
 8015fd0:	f240 4269 	movw	r2, #1129	; 0x469
 8015fd4:	4925      	ldr	r1, [pc, #148]	; (801606c <etharp_raw+0x114>)
 8015fd6:	4823      	ldr	r0, [pc, #140]	; (8016064 <etharp_raw+0x10c>)
 8015fd8:	f001 ff9a 	bl	8017f10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	3308      	adds	r3, #8
 8015fe0:	2206      	movs	r2, #6
 8015fe2:	6839      	ldr	r1, [r7, #0]
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f001 fece 	bl	8017d86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	3312      	adds	r3, #18
 8015fee:	2206      	movs	r2, #6
 8015ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f001 fec7 	bl	8017d86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	330e      	adds	r3, #14
 8015ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ffe:	6812      	ldr	r2, [r2, #0]
 8016000:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	3318      	adds	r3, #24
 8016006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016008:	6812      	ldr	r2, [r2, #0]
 801600a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	2200      	movs	r2, #0
 8016010:	701a      	strb	r2, [r3, #0]
 8016012:	2200      	movs	r2, #0
 8016014:	f042 0201 	orr.w	r2, r2, #1
 8016018:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	2200      	movs	r2, #0
 801601e:	f042 0208 	orr.w	r2, r2, #8
 8016022:	709a      	strb	r2, [r3, #2]
 8016024:	2200      	movs	r2, #0
 8016026:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	2206      	movs	r2, #6
 801602c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801602e:	697b      	ldr	r3, [r7, #20]
 8016030:	2204      	movs	r2, #4
 8016032:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016034:	f640 0306 	movw	r3, #2054	; 0x806
 8016038:	9300      	str	r3, [sp, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	68ba      	ldr	r2, [r7, #8]
 801603e:	69b9      	ldr	r1, [r7, #24]
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f001 fb71 	bl	8017728 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016046:	69b8      	ldr	r0, [r7, #24]
 8016048:	f7f8 fbf0 	bl	800e82c <pbuf_free>
  p = NULL;
 801604c:	2300      	movs	r3, #0
 801604e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016050:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016054:	4618      	mov	r0, r3
 8016056:	3720      	adds	r7, #32
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}
 801605c:	0801da58 	.word	0x0801da58
 8016060:	0801dba8 	.word	0x0801dba8
 8016064:	0801dad0 	.word	0x0801dad0
 8016068:	0801dc58 	.word	0x0801dc58
 801606c:	0801dc8c 	.word	0x0801dc8c

08016070 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b088      	sub	sp, #32
 8016074:	af04      	add	r7, sp, #16
 8016076:	60f8      	str	r0, [r7, #12]
 8016078:	60b9      	str	r1, [r7, #8]
 801607a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801608c:	2201      	movs	r2, #1
 801608e:	9203      	str	r2, [sp, #12]
 8016090:	68ba      	ldr	r2, [r7, #8]
 8016092:	9202      	str	r2, [sp, #8]
 8016094:	4a06      	ldr	r2, [pc, #24]	; (80160b0 <etharp_request_dst+0x40>)
 8016096:	9201      	str	r2, [sp, #4]
 8016098:	9300      	str	r3, [sp, #0]
 801609a:	4603      	mov	r3, r0
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f7ff ff5a 	bl	8015f58 <etharp_raw>
 80160a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3710      	adds	r7, #16
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	0801e2fc 	.word	0x0801e2fc

080160b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80160be:	4a05      	ldr	r2, [pc, #20]	; (80160d4 <etharp_request+0x20>)
 80160c0:	6839      	ldr	r1, [r7, #0]
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f7ff ffd4 	bl	8016070 <etharp_request_dst>
 80160c8:	4603      	mov	r3, r0
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3708      	adds	r7, #8
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	0801e2f4 	.word	0x0801e2f4

080160d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b08e      	sub	sp, #56	; 0x38
 80160dc:	af04      	add	r7, sp, #16
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80160e2:	4b79      	ldr	r3, [pc, #484]	; (80162c8 <icmp_input+0x1f0>)
 80160e4:	689b      	ldr	r3, [r3, #8]
 80160e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80160e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	f003 030f 	and.w	r3, r3, #15
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80160f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160fa:	2b13      	cmp	r3, #19
 80160fc:	f240 80cd 	bls.w	801629a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	895b      	ldrh	r3, [r3, #10]
 8016104:	2b03      	cmp	r3, #3
 8016106:	f240 80ca 	bls.w	801629e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016114:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016118:	2b00      	cmp	r3, #0
 801611a:	f000 80b7 	beq.w	801628c <icmp_input+0x1b4>
 801611e:	2b08      	cmp	r3, #8
 8016120:	f040 80b7 	bne.w	8016292 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016124:	4b69      	ldr	r3, [pc, #420]	; (80162cc <icmp_input+0x1f4>)
 8016126:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016128:	4b67      	ldr	r3, [pc, #412]	; (80162c8 <icmp_input+0x1f0>)
 801612a:	695b      	ldr	r3, [r3, #20]
 801612c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016130:	2be0      	cmp	r3, #224	; 0xe0
 8016132:	f000 80bb 	beq.w	80162ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016136:	4b64      	ldr	r3, [pc, #400]	; (80162c8 <icmp_input+0x1f0>)
 8016138:	695b      	ldr	r3, [r3, #20]
 801613a:	4a63      	ldr	r2, [pc, #396]	; (80162c8 <icmp_input+0x1f0>)
 801613c:	6812      	ldr	r2, [r2, #0]
 801613e:	4611      	mov	r1, r2
 8016140:	4618      	mov	r0, r3
 8016142:	f000 fbe3 	bl	801690c <ip4_addr_isbroadcast_u32>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	f040 80b1 	bne.w	80162b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	891b      	ldrh	r3, [r3, #8]
 8016152:	2b07      	cmp	r3, #7
 8016154:	f240 80a5 	bls.w	80162a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801615a:	330e      	adds	r3, #14
 801615c:	4619      	mov	r1, r3
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f7f8 face 	bl	800e700 <pbuf_add_header>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d04b      	beq.n	8016202 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	891a      	ldrh	r2, [r3, #8]
 801616e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016170:	4413      	add	r3, r2
 8016172:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	891b      	ldrh	r3, [r3, #8]
 8016178:	8b7a      	ldrh	r2, [r7, #26]
 801617a:	429a      	cmp	r2, r3
 801617c:	f0c0 809a 	bcc.w	80162b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016180:	8b7b      	ldrh	r3, [r7, #26]
 8016182:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016186:	4619      	mov	r1, r3
 8016188:	200e      	movs	r0, #14
 801618a:	f7f8 f86b 	bl	800e264 <pbuf_alloc>
 801618e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016190:	697b      	ldr	r3, [r7, #20]
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 8090 	beq.w	80162b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	895b      	ldrh	r3, [r3, #10]
 801619c:	461a      	mov	r2, r3
 801619e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161a0:	3308      	adds	r3, #8
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d203      	bcs.n	80161ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80161a6:	6978      	ldr	r0, [r7, #20]
 80161a8:	f7f8 fb40 	bl	800e82c <pbuf_free>
          goto icmperr;
 80161ac:	e085      	b.n	80162ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80161b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161b6:	4618      	mov	r0, r3
 80161b8:	f001 fde5 	bl	8017d86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80161bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161be:	4619      	mov	r1, r3
 80161c0:	6978      	ldr	r0, [r7, #20]
 80161c2:	f7f8 faad 	bl	800e720 <pbuf_remove_header>
 80161c6:	4603      	mov	r3, r0
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d009      	beq.n	80161e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80161cc:	4b40      	ldr	r3, [pc, #256]	; (80162d0 <icmp_input+0x1f8>)
 80161ce:	22b6      	movs	r2, #182	; 0xb6
 80161d0:	4940      	ldr	r1, [pc, #256]	; (80162d4 <icmp_input+0x1fc>)
 80161d2:	4841      	ldr	r0, [pc, #260]	; (80162d8 <icmp_input+0x200>)
 80161d4:	f001 fe9c 	bl	8017f10 <iprintf>
          pbuf_free(r);
 80161d8:	6978      	ldr	r0, [r7, #20]
 80161da:	f7f8 fb27 	bl	800e82c <pbuf_free>
          goto icmperr;
 80161de:	e06c      	b.n	80162ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80161e0:	6879      	ldr	r1, [r7, #4]
 80161e2:	6978      	ldr	r0, [r7, #20]
 80161e4:	f7f8 fc46 	bl	800ea74 <pbuf_copy>
 80161e8:	4603      	mov	r3, r0
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d003      	beq.n	80161f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80161ee:	6978      	ldr	r0, [r7, #20]
 80161f0:	f7f8 fb1c 	bl	800e82c <pbuf_free>
          goto icmperr;
 80161f4:	e061      	b.n	80162ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f7f8 fb18 	bl	800e82c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	607b      	str	r3, [r7, #4]
 8016200:	e00f      	b.n	8016222 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016204:	330e      	adds	r3, #14
 8016206:	4619      	mov	r1, r3
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f7f8 fa89 	bl	800e720 <pbuf_remove_header>
 801620e:	4603      	mov	r3, r0
 8016210:	2b00      	cmp	r3, #0
 8016212:	d006      	beq.n	8016222 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016214:	4b2e      	ldr	r3, [pc, #184]	; (80162d0 <icmp_input+0x1f8>)
 8016216:	22c7      	movs	r2, #199	; 0xc7
 8016218:	4930      	ldr	r1, [pc, #192]	; (80162dc <icmp_input+0x204>)
 801621a:	482f      	ldr	r0, [pc, #188]	; (80162d8 <icmp_input+0x200>)
 801621c:	f001 fe78 	bl	8017f10 <iprintf>
          goto icmperr;
 8016220:	e04b      	b.n	80162ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801622a:	4619      	mov	r1, r3
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f7f8 fa67 	bl	800e700 <pbuf_add_header>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d12b      	bne.n	8016290 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801623e:	69fb      	ldr	r3, [r7, #28]
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016246:	4b20      	ldr	r3, [pc, #128]	; (80162c8 <icmp_input+0x1f0>)
 8016248:	691a      	ldr	r2, [r3, #16]
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	2200      	movs	r2, #0
 8016252:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	2200      	movs	r2, #0
 8016258:	709a      	strb	r2, [r3, #2]
 801625a:	2200      	movs	r2, #0
 801625c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	22ff      	movs	r2, #255	; 0xff
 8016262:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	2200      	movs	r2, #0
 8016268:	729a      	strb	r2, [r3, #10]
 801626a:	2200      	movs	r2, #0
 801626c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	9302      	str	r3, [sp, #8]
 8016272:	2301      	movs	r3, #1
 8016274:	9301      	str	r3, [sp, #4]
 8016276:	2300      	movs	r3, #0
 8016278:	9300      	str	r3, [sp, #0]
 801627a:	23ff      	movs	r3, #255	; 0xff
 801627c:	2200      	movs	r2, #0
 801627e:	69f9      	ldr	r1, [r7, #28]
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f000 fa6b 	bl	801675c <ip4_output_if>
 8016286:	4603      	mov	r3, r0
 8016288:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801628a:	e001      	b.n	8016290 <icmp_input+0x1b8>
      break;
 801628c:	bf00      	nop
 801628e:	e000      	b.n	8016292 <icmp_input+0x1ba>
      break;
 8016290:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f7f8 faca 	bl	800e82c <pbuf_free>
  return;
 8016298:	e013      	b.n	80162c2 <icmp_input+0x1ea>
    goto lenerr;
 801629a:	bf00      	nop
 801629c:	e002      	b.n	80162a4 <icmp_input+0x1cc>
    goto lenerr;
 801629e:	bf00      	nop
 80162a0:	e000      	b.n	80162a4 <icmp_input+0x1cc>
        goto lenerr;
 80162a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7f8 fac1 	bl	800e82c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162aa:	e00a      	b.n	80162c2 <icmp_input+0x1ea>
        goto icmperr;
 80162ac:	bf00      	nop
 80162ae:	e004      	b.n	80162ba <icmp_input+0x1e2>
        goto icmperr;
 80162b0:	bf00      	nop
 80162b2:	e002      	b.n	80162ba <icmp_input+0x1e2>
          goto icmperr;
 80162b4:	bf00      	nop
 80162b6:	e000      	b.n	80162ba <icmp_input+0x1e2>
          goto icmperr;
 80162b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f7f8 fab6 	bl	800e82c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80162c2:	3728      	adds	r7, #40	; 0x28
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}
 80162c8:	20009b28 	.word	0x20009b28
 80162cc:	20009b3c 	.word	0x20009b3c
 80162d0:	0801dcd0 	.word	0x0801dcd0
 80162d4:	0801dd08 	.word	0x0801dd08
 80162d8:	0801dd40 	.word	0x0801dd40
 80162dc:	0801dd68 	.word	0x0801dd68

080162e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	460b      	mov	r3, r1
 80162ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80162ec:	78fb      	ldrb	r3, [r7, #3]
 80162ee:	461a      	mov	r2, r3
 80162f0:	2103      	movs	r1, #3
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 f814 	bl	8016320 <icmp_send_response>
}
 80162f8:	bf00      	nop
 80162fa:	3708      	adds	r7, #8
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	460b      	mov	r3, r1
 801630a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801630c:	78fb      	ldrb	r3, [r7, #3]
 801630e:	461a      	mov	r2, r3
 8016310:	210b      	movs	r1, #11
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 f804 	bl	8016320 <icmp_send_response>
}
 8016318:	bf00      	nop
 801631a:	3708      	adds	r7, #8
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b08c      	sub	sp, #48	; 0x30
 8016324:	af04      	add	r7, sp, #16
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	460b      	mov	r3, r1
 801632a:	70fb      	strb	r3, [r7, #3]
 801632c:	4613      	mov	r3, r2
 801632e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016330:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016334:	2124      	movs	r1, #36	; 0x24
 8016336:	2022      	movs	r0, #34	; 0x22
 8016338:	f7f7 ff94 	bl	800e264 <pbuf_alloc>
 801633c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d04c      	beq.n	80163de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016344:	69fb      	ldr	r3, [r7, #28]
 8016346:	895b      	ldrh	r3, [r3, #10]
 8016348:	2b23      	cmp	r3, #35	; 0x23
 801634a:	d806      	bhi.n	801635a <icmp_send_response+0x3a>
 801634c:	4b26      	ldr	r3, [pc, #152]	; (80163e8 <icmp_send_response+0xc8>)
 801634e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016352:	4926      	ldr	r1, [pc, #152]	; (80163ec <icmp_send_response+0xcc>)
 8016354:	4826      	ldr	r0, [pc, #152]	; (80163f0 <icmp_send_response+0xd0>)
 8016356:	f001 fddb 	bl	8017f10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	78fa      	ldrb	r2, [r7, #3]
 801636a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	78ba      	ldrb	r2, [r7, #2]
 8016370:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	2200      	movs	r2, #0
 8016376:	711a      	strb	r2, [r3, #4]
 8016378:	2200      	movs	r2, #0
 801637a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	2200      	movs	r2, #0
 8016380:	719a      	strb	r2, [r3, #6]
 8016382:	2200      	movs	r2, #0
 8016384:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	f103 0008 	add.w	r0, r3, #8
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	685b      	ldr	r3, [r3, #4]
 8016392:	221c      	movs	r2, #28
 8016394:	4619      	mov	r1, r3
 8016396:	f001 fcf6 	bl	8017d86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801639a:	69bb      	ldr	r3, [r7, #24]
 801639c:	68db      	ldr	r3, [r3, #12]
 801639e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80163a0:	f107 030c 	add.w	r3, r7, #12
 80163a4:	4618      	mov	r0, r3
 80163a6:	f000 f825 	bl	80163f4 <ip4_route>
 80163aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d011      	beq.n	80163d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	2200      	movs	r2, #0
 80163b6:	709a      	strb	r2, [r3, #2]
 80163b8:	2200      	movs	r2, #0
 80163ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80163bc:	f107 020c 	add.w	r2, r7, #12
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	9302      	str	r3, [sp, #8]
 80163c4:	2301      	movs	r3, #1
 80163c6:	9301      	str	r3, [sp, #4]
 80163c8:	2300      	movs	r3, #0
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	23ff      	movs	r3, #255	; 0xff
 80163ce:	2100      	movs	r1, #0
 80163d0:	69f8      	ldr	r0, [r7, #28]
 80163d2:	f000 f9c3 	bl	801675c <ip4_output_if>
  }
  pbuf_free(q);
 80163d6:	69f8      	ldr	r0, [r7, #28]
 80163d8:	f7f8 fa28 	bl	800e82c <pbuf_free>
 80163dc:	e000      	b.n	80163e0 <icmp_send_response+0xc0>
    return;
 80163de:	bf00      	nop
}
 80163e0:	3720      	adds	r7, #32
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	0801dcd0 	.word	0x0801dcd0
 80163ec:	0801dd9c 	.word	0x0801dd9c
 80163f0:	0801dd40 	.word	0x0801dd40

080163f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b085      	sub	sp, #20
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80163fc:	4b33      	ldr	r3, [pc, #204]	; (80164cc <ip4_route+0xd8>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	60fb      	str	r3, [r7, #12]
 8016402:	e036      	b.n	8016472 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801640a:	f003 0301 	and.w	r3, r3, #1
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b00      	cmp	r3, #0
 8016412:	d02b      	beq.n	801646c <ip4_route+0x78>
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801641a:	089b      	lsrs	r3, r3, #2
 801641c:	f003 0301 	and.w	r3, r3, #1
 8016420:	b2db      	uxtb	r3, r3
 8016422:	2b00      	cmp	r3, #0
 8016424:	d022      	beq.n	801646c <ip4_route+0x78>
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3304      	adds	r3, #4
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d01d      	beq.n	801646c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681a      	ldr	r2, [r3, #0]
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	3304      	adds	r3, #4
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	405a      	eors	r2, r3
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	3308      	adds	r3, #8
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4013      	ands	r3, r2
 8016444:	2b00      	cmp	r3, #0
 8016446:	d101      	bne.n	801644c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	e038      	b.n	80164be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016452:	f003 0302 	and.w	r3, r3, #2
 8016456:	2b00      	cmp	r3, #0
 8016458:	d108      	bne.n	801646c <ip4_route+0x78>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681a      	ldr	r2, [r3, #0]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	330c      	adds	r3, #12
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	429a      	cmp	r2, r3
 8016466:	d101      	bne.n	801646c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	e028      	b.n	80164be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	60fb      	str	r3, [r7, #12]
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1c5      	bne.n	8016404 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016478:	4b15      	ldr	r3, [pc, #84]	; (80164d0 <ip4_route+0xdc>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d01a      	beq.n	80164b6 <ip4_route+0xc2>
 8016480:	4b13      	ldr	r3, [pc, #76]	; (80164d0 <ip4_route+0xdc>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016488:	f003 0301 	and.w	r3, r3, #1
 801648c:	2b00      	cmp	r3, #0
 801648e:	d012      	beq.n	80164b6 <ip4_route+0xc2>
 8016490:	4b0f      	ldr	r3, [pc, #60]	; (80164d0 <ip4_route+0xdc>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016498:	f003 0304 	and.w	r3, r3, #4
 801649c:	2b00      	cmp	r3, #0
 801649e:	d00a      	beq.n	80164b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164a0:	4b0b      	ldr	r3, [pc, #44]	; (80164d0 <ip4_route+0xdc>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	3304      	adds	r3, #4
 80164a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d004      	beq.n	80164b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	b2db      	uxtb	r3, r3
 80164b2:	2b7f      	cmp	r3, #127	; 0x7f
 80164b4:	d101      	bne.n	80164ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80164b6:	2300      	movs	r3, #0
 80164b8:	e001      	b.n	80164be <ip4_route+0xca>
  }

  return netif_default;
 80164ba:	4b05      	ldr	r3, [pc, #20]	; (80164d0 <ip4_route+0xdc>)
 80164bc:	681b      	ldr	r3, [r3, #0]
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3714      	adds	r7, #20
 80164c2:	46bd      	mov	sp, r7
 80164c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c8:	4770      	bx	lr
 80164ca:	bf00      	nop
 80164cc:	20011ba8 	.word	0x20011ba8
 80164d0:	20011bac 	.word	0x20011bac

080164d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164e2:	f003 0301 	and.w	r3, r3, #1
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d016      	beq.n	801651a <ip4_input_accept+0x46>
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	3304      	adds	r3, #4
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d011      	beq.n	801651a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164f6:	4b0b      	ldr	r3, [pc, #44]	; (8016524 <ip4_input_accept+0x50>)
 80164f8:	695a      	ldr	r2, [r3, #20]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	3304      	adds	r3, #4
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	429a      	cmp	r2, r3
 8016502:	d008      	beq.n	8016516 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016504:	4b07      	ldr	r3, [pc, #28]	; (8016524 <ip4_input_accept+0x50>)
 8016506:	695b      	ldr	r3, [r3, #20]
 8016508:	6879      	ldr	r1, [r7, #4]
 801650a:	4618      	mov	r0, r3
 801650c:	f000 f9fe 	bl	801690c <ip4_addr_isbroadcast_u32>
 8016510:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016512:	2b00      	cmp	r3, #0
 8016514:	d001      	beq.n	801651a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016516:	2301      	movs	r3, #1
 8016518:	e000      	b.n	801651c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	20009b28 	.word	0x20009b28

08016528 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b086      	sub	sp, #24
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	685b      	ldr	r3, [r3, #4]
 8016536:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	781b      	ldrb	r3, [r3, #0]
 801653c:	091b      	lsrs	r3, r3, #4
 801653e:	b2db      	uxtb	r3, r3
 8016540:	2b04      	cmp	r3, #4
 8016542:	d004      	beq.n	801654e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016544:	6878      	ldr	r0, [r7, #4]
 8016546:	f7f8 f971 	bl	800e82c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	e0fd      	b.n	801674a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	f003 030f 	and.w	r3, r3, #15
 8016556:	b2db      	uxtb	r3, r3
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	b2db      	uxtb	r3, r3
 801655c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	885b      	ldrh	r3, [r3, #2]
 8016562:	b29b      	uxth	r3, r3
 8016564:	4618      	mov	r0, r3
 8016566:	f7f6 fc5b 	bl	800ce20 <lwip_htons>
 801656a:	4603      	mov	r3, r0
 801656c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	891b      	ldrh	r3, [r3, #8]
 8016572:	89ba      	ldrh	r2, [r7, #12]
 8016574:	429a      	cmp	r2, r3
 8016576:	d204      	bcs.n	8016582 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016578:	89bb      	ldrh	r3, [r7, #12]
 801657a:	4619      	mov	r1, r3
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7f7 ffcf 	bl	800e520 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	895b      	ldrh	r3, [r3, #10]
 8016586:	89fa      	ldrh	r2, [r7, #14]
 8016588:	429a      	cmp	r2, r3
 801658a:	d807      	bhi.n	801659c <ip4_input+0x74>
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	891b      	ldrh	r3, [r3, #8]
 8016590:	89ba      	ldrh	r2, [r7, #12]
 8016592:	429a      	cmp	r2, r3
 8016594:	d802      	bhi.n	801659c <ip4_input+0x74>
 8016596:	89fb      	ldrh	r3, [r7, #14]
 8016598:	2b13      	cmp	r3, #19
 801659a:	d804      	bhi.n	80165a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f7f8 f945 	bl	800e82c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80165a2:	2300      	movs	r3, #0
 80165a4:	e0d1      	b.n	801674a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	691b      	ldr	r3, [r3, #16]
 80165aa:	4a6a      	ldr	r2, [pc, #424]	; (8016754 <ip4_input+0x22c>)
 80165ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80165ae:	697b      	ldr	r3, [r7, #20]
 80165b0:	68db      	ldr	r3, [r3, #12]
 80165b2:	4a68      	ldr	r2, [pc, #416]	; (8016754 <ip4_input+0x22c>)
 80165b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165b6:	4b67      	ldr	r3, [pc, #412]	; (8016754 <ip4_input+0x22c>)
 80165b8:	695b      	ldr	r3, [r3, #20]
 80165ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165be:	2be0      	cmp	r3, #224	; 0xe0
 80165c0:	d112      	bne.n	80165e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80165c8:	f003 0301 	and.w	r3, r3, #1
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d007      	beq.n	80165e2 <ip4_input+0xba>
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	3304      	adds	r3, #4
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d002      	beq.n	80165e2 <ip4_input+0xba>
      netif = inp;
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	613b      	str	r3, [r7, #16]
 80165e0:	e02a      	b.n	8016638 <ip4_input+0x110>
    } else {
      netif = NULL;
 80165e2:	2300      	movs	r3, #0
 80165e4:	613b      	str	r3, [r7, #16]
 80165e6:	e027      	b.n	8016638 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80165e8:	6838      	ldr	r0, [r7, #0]
 80165ea:	f7ff ff73 	bl	80164d4 <ip4_input_accept>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d002      	beq.n	80165fa <ip4_input+0xd2>
      netif = inp;
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	613b      	str	r3, [r7, #16]
 80165f8:	e01e      	b.n	8016638 <ip4_input+0x110>
    } else {
      netif = NULL;
 80165fa:	2300      	movs	r3, #0
 80165fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80165fe:	4b55      	ldr	r3, [pc, #340]	; (8016754 <ip4_input+0x22c>)
 8016600:	695b      	ldr	r3, [r3, #20]
 8016602:	b2db      	uxtb	r3, r3
 8016604:	2b7f      	cmp	r3, #127	; 0x7f
 8016606:	d017      	beq.n	8016638 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016608:	4b53      	ldr	r3, [pc, #332]	; (8016758 <ip4_input+0x230>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	613b      	str	r3, [r7, #16]
 801660e:	e00e      	b.n	801662e <ip4_input+0x106>
          if (netif == inp) {
 8016610:	693a      	ldr	r2, [r7, #16]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	429a      	cmp	r2, r3
 8016616:	d006      	beq.n	8016626 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016618:	6938      	ldr	r0, [r7, #16]
 801661a:	f7ff ff5b 	bl	80164d4 <ip4_input_accept>
 801661e:	4603      	mov	r3, r0
 8016620:	2b00      	cmp	r3, #0
 8016622:	d108      	bne.n	8016636 <ip4_input+0x10e>
 8016624:	e000      	b.n	8016628 <ip4_input+0x100>
            continue;
 8016626:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	613b      	str	r3, [r7, #16]
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d1ed      	bne.n	8016610 <ip4_input+0xe8>
 8016634:	e000      	b.n	8016638 <ip4_input+0x110>
            break;
 8016636:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016638:	4b46      	ldr	r3, [pc, #280]	; (8016754 <ip4_input+0x22c>)
 801663a:	691b      	ldr	r3, [r3, #16]
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	4618      	mov	r0, r3
 8016640:	f000 f964 	bl	801690c <ip4_addr_isbroadcast_u32>
 8016644:	4603      	mov	r3, r0
 8016646:	2b00      	cmp	r3, #0
 8016648:	d105      	bne.n	8016656 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801664a:	4b42      	ldr	r3, [pc, #264]	; (8016754 <ip4_input+0x22c>)
 801664c:	691b      	ldr	r3, [r3, #16]
 801664e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016652:	2be0      	cmp	r3, #224	; 0xe0
 8016654:	d104      	bne.n	8016660 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f7f8 f8e8 	bl	800e82c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801665c:	2300      	movs	r3, #0
 801665e:	e074      	b.n	801674a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d104      	bne.n	8016670 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7f8 f8e0 	bl	800e82c <pbuf_free>
    return ERR_OK;
 801666c:	2300      	movs	r3, #0
 801666e:	e06c      	b.n	801674a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	88db      	ldrh	r3, [r3, #6]
 8016674:	b29b      	uxth	r3, r3
 8016676:	461a      	mov	r2, r3
 8016678:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801667c:	4013      	ands	r3, r2
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00b      	beq.n	801669a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f000 fc88 	bl	8016f98 <ip4_reass>
 8016688:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d101      	bne.n	8016694 <ip4_input+0x16c>
      return ERR_OK;
 8016690:	2300      	movs	r3, #0
 8016692:	e05a      	b.n	801674a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	685b      	ldr	r3, [r3, #4]
 8016698:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801669a:	4a2e      	ldr	r2, [pc, #184]	; (8016754 <ip4_input+0x22c>)
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80166a0:	4a2c      	ldr	r2, [pc, #176]	; (8016754 <ip4_input+0x22c>)
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80166a6:	4a2b      	ldr	r2, [pc, #172]	; (8016754 <ip4_input+0x22c>)
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	781b      	ldrb	r3, [r3, #0]
 80166b0:	f003 030f 	and.w	r3, r3, #15
 80166b4:	b2db      	uxtb	r3, r3
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	4b25      	ldr	r3, [pc, #148]	; (8016754 <ip4_input+0x22c>)
 80166be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80166c0:	89fb      	ldrh	r3, [r7, #14]
 80166c2:	4619      	mov	r1, r3
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7f8 f82b 	bl	800e720 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80166ca:	697b      	ldr	r3, [r7, #20]
 80166cc:	7a5b      	ldrb	r3, [r3, #9]
 80166ce:	2b01      	cmp	r3, #1
 80166d0:	d006      	beq.n	80166e0 <ip4_input+0x1b8>
 80166d2:	2b06      	cmp	r3, #6
 80166d4:	d109      	bne.n	80166ea <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80166d6:	6839      	ldr	r1, [r7, #0]
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	f7fa f9fb 	bl	8010ad4 <tcp_input>
        break;
 80166de:	e021      	b.n	8016724 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80166e0:	6839      	ldr	r1, [r7, #0]
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f7ff fcf8 	bl	80160d8 <icmp_input>
        break;
 80166e8:	e01c      	b.n	8016724 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166ea:	4b1a      	ldr	r3, [pc, #104]	; (8016754 <ip4_input+0x22c>)
 80166ec:	695b      	ldr	r3, [r3, #20]
 80166ee:	6939      	ldr	r1, [r7, #16]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f000 f90b 	bl	801690c <ip4_addr_isbroadcast_u32>
 80166f6:	4603      	mov	r3, r0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d10f      	bne.n	801671c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166fc:	4b15      	ldr	r3, [pc, #84]	; (8016754 <ip4_input+0x22c>)
 80166fe:	695b      	ldr	r3, [r3, #20]
 8016700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016704:	2be0      	cmp	r3, #224	; 0xe0
 8016706:	d009      	beq.n	801671c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801670c:	4619      	mov	r1, r3
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7f8 f879 	bl	800e806 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016714:	2102      	movs	r1, #2
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7ff fde2 	bl	80162e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f7f8 f885 	bl	800e82c <pbuf_free>
        break;
 8016722:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016724:	4b0b      	ldr	r3, [pc, #44]	; (8016754 <ip4_input+0x22c>)
 8016726:	2200      	movs	r2, #0
 8016728:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801672a:	4b0a      	ldr	r3, [pc, #40]	; (8016754 <ip4_input+0x22c>)
 801672c:	2200      	movs	r2, #0
 801672e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016730:	4b08      	ldr	r3, [pc, #32]	; (8016754 <ip4_input+0x22c>)
 8016732:	2200      	movs	r2, #0
 8016734:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016736:	4b07      	ldr	r3, [pc, #28]	; (8016754 <ip4_input+0x22c>)
 8016738:	2200      	movs	r2, #0
 801673a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801673c:	4b05      	ldr	r3, [pc, #20]	; (8016754 <ip4_input+0x22c>)
 801673e:	2200      	movs	r2, #0
 8016740:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016742:	4b04      	ldr	r3, [pc, #16]	; (8016754 <ip4_input+0x22c>)
 8016744:	2200      	movs	r2, #0
 8016746:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016748:	2300      	movs	r3, #0
}
 801674a:	4618      	mov	r0, r3
 801674c:	3718      	adds	r7, #24
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	20009b28 	.word	0x20009b28
 8016758:	20011ba8 	.word	0x20011ba8

0801675c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b08a      	sub	sp, #40	; 0x28
 8016760:	af04      	add	r7, sp, #16
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
 8016768:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d009      	beq.n	8016788 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d003      	beq.n	8016782 <ip4_output_if+0x26>
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d102      	bne.n	8016788 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016784:	3304      	adds	r3, #4
 8016786:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016788:	78fa      	ldrb	r2, [r7, #3]
 801678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801678c:	9302      	str	r3, [sp, #8]
 801678e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016792:	9301      	str	r3, [sp, #4]
 8016794:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016798:	9300      	str	r3, [sp, #0]
 801679a:	4613      	mov	r3, r2
 801679c:	687a      	ldr	r2, [r7, #4]
 801679e:	6979      	ldr	r1, [r7, #20]
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f000 f805 	bl	80167b0 <ip4_output_if_src>
 80167a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3718      	adds	r7, #24
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}

080167b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b088      	sub	sp, #32
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	60f8      	str	r0, [r7, #12]
 80167b8:	60b9      	str	r1, [r7, #8]
 80167ba:	607a      	str	r2, [r7, #4]
 80167bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	7b9b      	ldrb	r3, [r3, #14]
 80167c2:	2b01      	cmp	r3, #1
 80167c4:	d006      	beq.n	80167d4 <ip4_output_if_src+0x24>
 80167c6:	4b4b      	ldr	r3, [pc, #300]	; (80168f4 <ip4_output_if_src+0x144>)
 80167c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80167cc:	494a      	ldr	r1, [pc, #296]	; (80168f8 <ip4_output_if_src+0x148>)
 80167ce:	484b      	ldr	r0, [pc, #300]	; (80168fc <ip4_output_if_src+0x14c>)
 80167d0:	f001 fb9e 	bl	8017f10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d060      	beq.n	801689c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80167da:	2314      	movs	r3, #20
 80167dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80167de:	2114      	movs	r1, #20
 80167e0:	68f8      	ldr	r0, [r7, #12]
 80167e2:	f7f7 ff8d 	bl	800e700 <pbuf_add_header>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d002      	beq.n	80167f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167ec:	f06f 0301 	mvn.w	r3, #1
 80167f0:	e07c      	b.n	80168ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	895b      	ldrh	r3, [r3, #10]
 80167fc:	2b13      	cmp	r3, #19
 80167fe:	d806      	bhi.n	801680e <ip4_output_if_src+0x5e>
 8016800:	4b3c      	ldr	r3, [pc, #240]	; (80168f4 <ip4_output_if_src+0x144>)
 8016802:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016806:	493e      	ldr	r1, [pc, #248]	; (8016900 <ip4_output_if_src+0x150>)
 8016808:	483c      	ldr	r0, [pc, #240]	; (80168fc <ip4_output_if_src+0x14c>)
 801680a:	f001 fb81 	bl	8017f10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	78fa      	ldrb	r2, [r7, #3]
 8016812:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801681a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016824:	8b7b      	ldrh	r3, [r7, #26]
 8016826:	089b      	lsrs	r3, r3, #2
 8016828:	b29b      	uxth	r3, r3
 801682a:	b2db      	uxtb	r3, r3
 801682c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016830:	b2da      	uxtb	r2, r3
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801683c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	891b      	ldrh	r3, [r3, #8]
 8016842:	4618      	mov	r0, r3
 8016844:	f7f6 faec 	bl	800ce20 <lwip_htons>
 8016848:	4603      	mov	r3, r0
 801684a:	461a      	mov	r2, r3
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	2200      	movs	r2, #0
 8016854:	719a      	strb	r2, [r3, #6]
 8016856:	2200      	movs	r2, #0
 8016858:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801685a:	4b2a      	ldr	r3, [pc, #168]	; (8016904 <ip4_output_if_src+0x154>)
 801685c:	881b      	ldrh	r3, [r3, #0]
 801685e:	4618      	mov	r0, r3
 8016860:	f7f6 fade 	bl	800ce20 <lwip_htons>
 8016864:	4603      	mov	r3, r0
 8016866:	461a      	mov	r2, r3
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801686c:	4b25      	ldr	r3, [pc, #148]	; (8016904 <ip4_output_if_src+0x154>)
 801686e:	881b      	ldrh	r3, [r3, #0]
 8016870:	3301      	adds	r3, #1
 8016872:	b29a      	uxth	r2, r3
 8016874:	4b23      	ldr	r3, [pc, #140]	; (8016904 <ip4_output_if_src+0x154>)
 8016876:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d104      	bne.n	8016888 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801687e:	4b22      	ldr	r3, [pc, #136]	; (8016908 <ip4_output_if_src+0x158>)
 8016880:	681a      	ldr	r2, [r3, #0]
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	60da      	str	r2, [r3, #12]
 8016886:	e003      	b.n	8016890 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	69fb      	ldr	r3, [r7, #28]
 801688e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	2200      	movs	r2, #0
 8016894:	729a      	strb	r2, [r3, #10]
 8016896:	2200      	movs	r2, #0
 8016898:	72da      	strb	r2, [r3, #11]
 801689a:	e00f      	b.n	80168bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	895b      	ldrh	r3, [r3, #10]
 80168a0:	2b13      	cmp	r3, #19
 80168a2:	d802      	bhi.n	80168aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80168a4:	f06f 0301 	mvn.w	r3, #1
 80168a8:	e020      	b.n	80168ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	691b      	ldr	r3, [r3, #16]
 80168b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80168b6:	f107 0314 	add.w	r3, r7, #20
 80168ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80168bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d00c      	beq.n	80168de <ip4_output_if_src+0x12e>
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	891a      	ldrh	r2, [r3, #8]
 80168c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d906      	bls.n	80168de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168d4:	68f8      	ldr	r0, [r7, #12]
 80168d6:	f000 fd53 	bl	8017380 <ip4_frag>
 80168da:	4603      	mov	r3, r0
 80168dc:	e006      	b.n	80168ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80168de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e0:	695b      	ldr	r3, [r3, #20]
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	68f9      	ldr	r1, [r7, #12]
 80168e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168e8:	4798      	blx	r3
 80168ea:	4603      	mov	r3, r0
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3720      	adds	r7, #32
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	0801ddc8 	.word	0x0801ddc8
 80168f8:	0801ddfc 	.word	0x0801ddfc
 80168fc:	0801de08 	.word	0x0801de08
 8016900:	0801de30 	.word	0x0801de30
 8016904:	20011d02 	.word	0x20011d02
 8016908:	0801e2f0 	.word	0x0801e2f0

0801690c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016920:	d002      	beq.n	8016928 <ip4_addr_isbroadcast_u32+0x1c>
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d101      	bne.n	801692c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016928:	2301      	movs	r3, #1
 801692a:	e02a      	b.n	8016982 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016932:	f003 0302 	and.w	r3, r3, #2
 8016936:	2b00      	cmp	r3, #0
 8016938:	d101      	bne.n	801693e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801693a:	2300      	movs	r3, #0
 801693c:	e021      	b.n	8016982 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	3304      	adds	r3, #4
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	429a      	cmp	r2, r3
 8016948:	d101      	bne.n	801694e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801694a:	2300      	movs	r3, #0
 801694c:	e019      	b.n	8016982 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801694e:	68fa      	ldr	r2, [r7, #12]
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	3304      	adds	r3, #4
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	405a      	eors	r2, r3
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	3308      	adds	r3, #8
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	4013      	ands	r3, r2
 8016960:	2b00      	cmp	r3, #0
 8016962:	d10d      	bne.n	8016980 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	3308      	adds	r3, #8
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	43da      	mvns	r2, r3
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016970:	683b      	ldr	r3, [r7, #0]
 8016972:	3308      	adds	r3, #8
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016978:	429a      	cmp	r2, r3
 801697a:	d101      	bne.n	8016980 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801697c:	2301      	movs	r3, #1
 801697e:	e000      	b.n	8016982 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016980:	2300      	movs	r3, #0
  }
}
 8016982:	4618      	mov	r0, r3
 8016984:	3714      	adds	r7, #20
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
	...

08016990 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b084      	sub	sp, #16
 8016994:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016996:	2300      	movs	r3, #0
 8016998:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801699a:	4b12      	ldr	r3, [pc, #72]	; (80169e4 <ip_reass_tmr+0x54>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80169a0:	e018      	b.n	80169d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	7fdb      	ldrb	r3, [r3, #31]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d00b      	beq.n	80169c2 <ip_reass_tmr+0x32>
      r->timer--;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	7fdb      	ldrb	r3, [r3, #31]
 80169ae:	3b01      	subs	r3, #1
 80169b0:	b2da      	uxtb	r2, r3
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	60fb      	str	r3, [r7, #12]
 80169c0:	e008      	b.n	80169d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80169cc:	68b9      	ldr	r1, [r7, #8]
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 f80a 	bl	80169e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1e3      	bne.n	80169a2 <ip_reass_tmr+0x12>
    }
  }
}
 80169da:	bf00      	nop
 80169dc:	bf00      	nop
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	20011d04 	.word	0x20011d04

080169e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b088      	sub	sp, #32
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80169f6:	683a      	ldr	r2, [r7, #0]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	429a      	cmp	r2, r3
 80169fc:	d105      	bne.n	8016a0a <ip_reass_free_complete_datagram+0x22>
 80169fe:	4b45      	ldr	r3, [pc, #276]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a00:	22ab      	movs	r2, #171	; 0xab
 8016a02:	4945      	ldr	r1, [pc, #276]	; (8016b18 <ip_reass_free_complete_datagram+0x130>)
 8016a04:	4845      	ldr	r0, [pc, #276]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a06:	f001 fa83 	bl	8017f10 <iprintf>
  if (prev != NULL) {
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d005      	beq.n	8016a26 <ip_reass_free_complete_datagram+0x3e>
 8016a1a:	4b3e      	ldr	r3, [pc, #248]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a1c:	22ad      	movs	r2, #173	; 0xad
 8016a1e:	4940      	ldr	r1, [pc, #256]	; (8016b20 <ip_reass_free_complete_datagram+0x138>)
 8016a20:	483e      	ldr	r0, [pc, #248]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a22:	f001 fa75 	bl	8017f10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	685b      	ldr	r3, [r3, #4]
 8016a2a:	685b      	ldr	r3, [r3, #4]
 8016a2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	889b      	ldrh	r3, [r3, #4]
 8016a32:	b29b      	uxth	r3, r3
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d12a      	bne.n	8016a8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	6858      	ldr	r0, [r3, #4]
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	3308      	adds	r3, #8
 8016a4e:	2214      	movs	r2, #20
 8016a50:	4619      	mov	r1, r3
 8016a52:	f001 f998 	bl	8017d86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016a56:	2101      	movs	r1, #1
 8016a58:	69b8      	ldr	r0, [r7, #24]
 8016a5a:	f7ff fc51 	bl	8016300 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016a5e:	69b8      	ldr	r0, [r7, #24]
 8016a60:	f7f7 ff72 	bl	800e948 <pbuf_clen>
 8016a64:	4603      	mov	r3, r0
 8016a66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a68:	8bfa      	ldrh	r2, [r7, #30]
 8016a6a:	8a7b      	ldrh	r3, [r7, #18]
 8016a6c:	4413      	add	r3, r2
 8016a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a72:	db05      	blt.n	8016a80 <ip_reass_free_complete_datagram+0x98>
 8016a74:	4b27      	ldr	r3, [pc, #156]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016a76:	22bc      	movs	r2, #188	; 0xbc
 8016a78:	492a      	ldr	r1, [pc, #168]	; (8016b24 <ip_reass_free_complete_datagram+0x13c>)
 8016a7a:	4828      	ldr	r0, [pc, #160]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016a7c:	f001 fa48 	bl	8017f10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016a80:	8bfa      	ldrh	r2, [r7, #30]
 8016a82:	8a7b      	ldrh	r3, [r7, #18]
 8016a84:	4413      	add	r3, r2
 8016a86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016a88:	69b8      	ldr	r0, [r7, #24]
 8016a8a:	f7f7 fecf 	bl	800e82c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	685b      	ldr	r3, [r3, #4]
 8016a92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016a94:	e01f      	b.n	8016ad6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016aa0:	697b      	ldr	r3, [r7, #20]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016aa6:	68f8      	ldr	r0, [r7, #12]
 8016aa8:	f7f7 ff4e 	bl	800e948 <pbuf_clen>
 8016aac:	4603      	mov	r3, r0
 8016aae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016ab0:	8bfa      	ldrh	r2, [r7, #30]
 8016ab2:	8a7b      	ldrh	r3, [r7, #18]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aba:	db05      	blt.n	8016ac8 <ip_reass_free_complete_datagram+0xe0>
 8016abc:	4b15      	ldr	r3, [pc, #84]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016abe:	22cc      	movs	r2, #204	; 0xcc
 8016ac0:	4918      	ldr	r1, [pc, #96]	; (8016b24 <ip_reass_free_complete_datagram+0x13c>)
 8016ac2:	4816      	ldr	r0, [pc, #88]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016ac4:	f001 fa24 	bl	8017f10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ac8:	8bfa      	ldrh	r2, [r7, #30]
 8016aca:	8a7b      	ldrh	r3, [r7, #18]
 8016acc:	4413      	add	r3, r2
 8016ace:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016ad0:	68f8      	ldr	r0, [r7, #12]
 8016ad2:	f7f7 feab 	bl	800e82c <pbuf_free>
  while (p != NULL) {
 8016ad6:	69bb      	ldr	r3, [r7, #24]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d1dc      	bne.n	8016a96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016adc:	6839      	ldr	r1, [r7, #0]
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 f8c2 	bl	8016c68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016ae4:	4b10      	ldr	r3, [pc, #64]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016ae6:	881b      	ldrh	r3, [r3, #0]
 8016ae8:	8bfa      	ldrh	r2, [r7, #30]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d905      	bls.n	8016afa <ip_reass_free_complete_datagram+0x112>
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <ip_reass_free_complete_datagram+0x12c>)
 8016af0:	22d2      	movs	r2, #210	; 0xd2
 8016af2:	490e      	ldr	r1, [pc, #56]	; (8016b2c <ip_reass_free_complete_datagram+0x144>)
 8016af4:	4809      	ldr	r0, [pc, #36]	; (8016b1c <ip_reass_free_complete_datagram+0x134>)
 8016af6:	f001 fa0b 	bl	8017f10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016afa:	4b0b      	ldr	r3, [pc, #44]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016afc:	881a      	ldrh	r2, [r3, #0]
 8016afe:	8bfb      	ldrh	r3, [r7, #30]
 8016b00:	1ad3      	subs	r3, r2, r3
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	4b08      	ldr	r3, [pc, #32]	; (8016b28 <ip_reass_free_complete_datagram+0x140>)
 8016b06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016b08:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	3720      	adds	r7, #32
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	bd80      	pop	{r7, pc}
 8016b12:	bf00      	nop
 8016b14:	0801de60 	.word	0x0801de60
 8016b18:	0801de9c 	.word	0x0801de9c
 8016b1c:	0801dea8 	.word	0x0801dea8
 8016b20:	0801ded0 	.word	0x0801ded0
 8016b24:	0801dee4 	.word	0x0801dee4
 8016b28:	20011d08 	.word	0x20011d08
 8016b2c:	0801df04 	.word	0x0801df04

08016b30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b08a      	sub	sp, #40	; 0x28
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016b42:	2300      	movs	r3, #0
 8016b44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016b46:	2300      	movs	r3, #0
 8016b48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016b4e:	4b28      	ldr	r3, [pc, #160]	; (8016bf0 <ip_reass_remove_oldest_datagram+0xc0>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b54:	e030      	b.n	8016bb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	695a      	ldr	r2, [r3, #20]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d10c      	bne.n	8016b7c <ip_reass_remove_oldest_datagram+0x4c>
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	699a      	ldr	r2, [r3, #24]
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	691b      	ldr	r3, [r3, #16]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d106      	bne.n	8016b7c <ip_reass_remove_oldest_datagram+0x4c>
 8016b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b70:	899a      	ldrh	r2, [r3, #12]
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	889b      	ldrh	r3, [r3, #4]
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d014      	beq.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016b82:	6a3b      	ldr	r3, [r7, #32]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d104      	bne.n	8016b92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b8c:	69fb      	ldr	r3, [r7, #28]
 8016b8e:	61bb      	str	r3, [r7, #24]
 8016b90:	e009      	b.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b94:	7fda      	ldrb	r2, [r3, #31]
 8016b96:	6a3b      	ldr	r3, [r7, #32]
 8016b98:	7fdb      	ldrb	r3, [r3, #31]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	d803      	bhi.n	8016ba6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d001      	beq.n	8016bb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d1cb      	bne.n	8016b56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016bbe:	6a3b      	ldr	r3, [r7, #32]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d008      	beq.n	8016bd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016bc4:	69b9      	ldr	r1, [r7, #24]
 8016bc6:	6a38      	ldr	r0, [r7, #32]
 8016bc8:	f7ff ff0e 	bl	80169e8 <ip_reass_free_complete_datagram>
 8016bcc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016bce:	697a      	ldr	r2, [r7, #20]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	4413      	add	r3, r2
 8016bd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016bd6:	697a      	ldr	r2, [r7, #20]
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	da02      	bge.n	8016be4 <ip_reass_remove_oldest_datagram+0xb4>
 8016bde:	693b      	ldr	r3, [r7, #16]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	dcac      	bgt.n	8016b3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016be4:	697b      	ldr	r3, [r7, #20]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3728      	adds	r7, #40	; 0x28
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	20011d04 	.word	0x20011d04

08016bf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b084      	sub	sp, #16
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016bfe:	2003      	movs	r0, #3
 8016c00:	f7f6 fefe 	bl	800da00 <memp_malloc>
 8016c04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d110      	bne.n	8016c2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016c0c:	6839      	ldr	r1, [r7, #0]
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7ff ff8e 	bl	8016b30 <ip_reass_remove_oldest_datagram>
 8016c14:	4602      	mov	r2, r0
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	dc03      	bgt.n	8016c24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c1c:	2003      	movs	r0, #3
 8016c1e:	f7f6 feef 	bl	800da00 <memp_malloc>
 8016c22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d101      	bne.n	8016c2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	e016      	b.n	8016c5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016c2e:	2220      	movs	r2, #32
 8016c30:	2100      	movs	r1, #0
 8016c32:	68f8      	ldr	r0, [r7, #12]
 8016c34:	f001 f8cf 	bl	8017dd6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	220f      	movs	r2, #15
 8016c3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016c3e:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <ip_reass_enqueue_new_datagram+0x70>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016c46:	4a07      	ldr	r2, [pc, #28]	; (8016c64 <ip_reass_enqueue_new_datagram+0x70>)
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	3308      	adds	r3, #8
 8016c50:	2214      	movs	r2, #20
 8016c52:	6879      	ldr	r1, [r7, #4]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f001 f896 	bl	8017d86 <memcpy>
  return ipr;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3710      	adds	r7, #16
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	20011d04 	.word	0x20011d04

08016c68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016c72:	4b10      	ldr	r3, [pc, #64]	; (8016cb4 <ip_reass_dequeue_datagram+0x4c>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	d104      	bne.n	8016c86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	4a0c      	ldr	r2, [pc, #48]	; (8016cb4 <ip_reass_dequeue_datagram+0x4c>)
 8016c82:	6013      	str	r3, [r2, #0]
 8016c84:	e00d      	b.n	8016ca2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d106      	bne.n	8016c9a <ip_reass_dequeue_datagram+0x32>
 8016c8c:	4b0a      	ldr	r3, [pc, #40]	; (8016cb8 <ip_reass_dequeue_datagram+0x50>)
 8016c8e:	f240 1245 	movw	r2, #325	; 0x145
 8016c92:	490a      	ldr	r1, [pc, #40]	; (8016cbc <ip_reass_dequeue_datagram+0x54>)
 8016c94:	480a      	ldr	r0, [pc, #40]	; (8016cc0 <ip_reass_dequeue_datagram+0x58>)
 8016c96:	f001 f93b 	bl	8017f10 <iprintf>
    prev->next = ipr->next;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016ca2:	6879      	ldr	r1, [r7, #4]
 8016ca4:	2003      	movs	r0, #3
 8016ca6:	f7f6 ff21 	bl	800daec <memp_free>
}
 8016caa:	bf00      	nop
 8016cac:	3708      	adds	r7, #8
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	20011d04 	.word	0x20011d04
 8016cb8:	0801de60 	.word	0x0801de60
 8016cbc:	0801df28 	.word	0x0801df28
 8016cc0:	0801dea8 	.word	0x0801dea8

08016cc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b08c      	sub	sp, #48	; 0x30
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016cde:	69fb      	ldr	r3, [r7, #28]
 8016ce0:	885b      	ldrh	r3, [r3, #2]
 8016ce2:	b29b      	uxth	r3, r3
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7f6 f89b 	bl	800ce20 <lwip_htons>
 8016cea:	4603      	mov	r3, r0
 8016cec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	f003 030f 	and.w	r3, r3, #15
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	009b      	lsls	r3, r3, #2
 8016cfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016cfc:	7e7b      	ldrb	r3, [r7, #25]
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	8b7a      	ldrh	r2, [r7, #26]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d202      	bcs.n	8016d0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d0a:	e135      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016d0c:	7e7b      	ldrb	r3, [r7, #25]
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	8b7a      	ldrh	r2, [r7, #26]
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	88db      	ldrh	r3, [r3, #6]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7f6 f87f 	bl	800ce20 <lwip_htons>
 8016d22:	4603      	mov	r3, r0
 8016d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	00db      	lsls	r3, r3, #3
 8016d2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	2200      	movs	r2, #0
 8016d38:	701a      	strb	r2, [r3, #0]
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	705a      	strb	r2, [r3, #1]
 8016d3e:	2200      	movs	r2, #0
 8016d40:	709a      	strb	r2, [r3, #2]
 8016d42:	2200      	movs	r2, #0
 8016d44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d48:	8afa      	ldrh	r2, [r7, #22]
 8016d4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016d4c:	8afa      	ldrh	r2, [r7, #22]
 8016d4e:	8b7b      	ldrh	r3, [r7, #26]
 8016d50:	4413      	add	r3, r2
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d5a:	88db      	ldrh	r3, [r3, #6]
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	8afa      	ldrh	r2, [r7, #22]
 8016d60:	429a      	cmp	r2, r3
 8016d62:	d902      	bls.n	8016d6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d68:	e106      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8016d70:	e068      	b.n	8016e44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	889b      	ldrh	r3, [r3, #4]
 8016d7c:	b29a      	uxth	r2, r3
 8016d7e:	693b      	ldr	r3, [r7, #16]
 8016d80:	889b      	ldrh	r3, [r3, #4]
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	429a      	cmp	r2, r3
 8016d86:	d235      	bcs.n	8016df4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d020      	beq.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d96:	889b      	ldrh	r3, [r3, #4]
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9c:	88db      	ldrh	r3, [r3, #6]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d307      	bcc.n	8016db4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da6:	88db      	ldrh	r3, [r3, #6]
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	889b      	ldrh	r3, [r3, #4]
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	429a      	cmp	r2, r3
 8016db2:	d902      	bls.n	8016dba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016db8:	e0de      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc2:	88db      	ldrh	r3, [r3, #6]
 8016dc4:	b29a      	uxth	r2, r3
 8016dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc8:	889b      	ldrh	r3, [r3, #4]
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	d03d      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016dd4:	e03a      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dd8:	88db      	ldrh	r3, [r3, #6]
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	889b      	ldrh	r3, [r3, #4]
 8016de0:	b29b      	uxth	r3, r3
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d902      	bls.n	8016dec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dea:	e0c5      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	68ba      	ldr	r2, [r7, #8]
 8016df0:	605a      	str	r2, [r3, #4]
      break;
 8016df2:	e02b      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df6:	889b      	ldrh	r3, [r3, #4]
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	693b      	ldr	r3, [r7, #16]
 8016dfc:	889b      	ldrh	r3, [r3, #4]
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d102      	bne.n	8016e0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e08:	e0b6      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	889b      	ldrh	r3, [r3, #4]
 8016e0e:	b29a      	uxth	r2, r3
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	88db      	ldrh	r3, [r3, #6]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d202      	bcs.n	8016e20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e1e:	e0ab      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d009      	beq.n	8016e3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e28:	88db      	ldrh	r3, [r3, #6]
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	889b      	ldrh	r3, [r3, #4]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	429a      	cmp	r2, r3
 8016e34:	d001      	beq.n	8016e3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d193      	bne.n	8016d72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016e4a:	e000      	b.n	8016e4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016e4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d12d      	bne.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d01c      	beq.n	8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5c:	88db      	ldrh	r3, [r3, #6]
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	889b      	ldrh	r3, [r3, #4]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d906      	bls.n	8016e78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016e6a:	4b45      	ldr	r3, [pc, #276]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016e70:	4944      	ldr	r1, [pc, #272]	; (8016f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e72:	4845      	ldr	r0, [pc, #276]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e74:	f001 f84c 	bl	8017f10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e80:	88db      	ldrh	r3, [r3, #6]
 8016e82:	b29a      	uxth	r2, r3
 8016e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e86:	889b      	ldrh	r3, [r3, #4]
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d010      	beq.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	623b      	str	r3, [r7, #32]
 8016e92:	e00d      	b.n	8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d006      	beq.n	8016eaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016e9c:	4b38      	ldr	r3, [pc, #224]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016ea2:	493a      	ldr	r1, [pc, #232]	; (8016f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ea4:	4838      	ldr	r0, [pc, #224]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ea6:	f001 f833 	bl	8017f10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	68ba      	ldr	r2, [r7, #8]
 8016eae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d105      	bne.n	8016ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	7f9b      	ldrb	r3, [r3, #30]
 8016eba:	f003 0301 	and.w	r3, r3, #1
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d059      	beq.n	8016f76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d04f      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	685b      	ldr	r3, [r3, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d006      	beq.n	8016ede <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	889b      	ldrh	r3, [r3, #4]
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d002      	beq.n	8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	623b      	str	r3, [r7, #32]
 8016ee2:	e041      	b.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016eee:	e012      	b.n	8016f16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef8:	88db      	ldrh	r3, [r3, #6]
 8016efa:	b29a      	uxth	r2, r3
 8016efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efe:	889b      	ldrh	r3, [r3, #4]
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d002      	beq.n	8016f0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016f06:	2300      	movs	r3, #0
 8016f08:	623b      	str	r3, [r7, #32]
            break;
 8016f0a:	e007      	b.n	8016f1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d1e9      	bne.n	8016ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016f1c:	6a3b      	ldr	r3, [r7, #32]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d022      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d106      	bne.n	8016f38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016f2a:	4b15      	ldr	r3, [pc, #84]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f2c:	f240 12df 	movw	r2, #479	; 0x1df
 8016f30:	4917      	ldr	r1, [pc, #92]	; (8016f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f32:	4815      	ldr	r0, [pc, #84]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f34:	f000 ffec 	bl	8017f10 <iprintf>
          LWIP_ASSERT("sanity check",
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d106      	bne.n	8016f52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016f44:	4b0e      	ldr	r3, [pc, #56]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016f4a:	4911      	ldr	r1, [pc, #68]	; (8016f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f4c:	480e      	ldr	r0, [pc, #56]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f4e:	f000 ffdf 	bl	8017f10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d006      	beq.n	8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016f5a:	4b09      	ldr	r3, [pc, #36]	; (8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016f60:	490c      	ldr	r1, [pc, #48]	; (8016f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f62:	4809      	ldr	r0, [pc, #36]	; (8016f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f64:	f000 ffd4 	bl	8017f10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016f68:	6a3b      	ldr	r3, [r7, #32]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	bf14      	ite	ne
 8016f6e:	2301      	movne	r3, #1
 8016f70:	2300      	moveq	r3, #0
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	e000      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3730      	adds	r7, #48	; 0x30
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	0801de60 	.word	0x0801de60
 8016f84:	0801df44 	.word	0x0801df44
 8016f88:	0801dea8 	.word	0x0801dea8
 8016f8c:	0801df64 	.word	0x0801df64
 8016f90:	0801df9c 	.word	0x0801df9c
 8016f94:	0801dfac 	.word	0x0801dfac

08016f98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08e      	sub	sp, #56	; 0x38
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	f003 030f 	and.w	r3, r3, #15
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	2b14      	cmp	r3, #20
 8016fb6:	f040 8171 	bne.w	801729c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbc:	88db      	ldrh	r3, [r3, #6]
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7f5 ff2d 	bl	800ce20 <lwip_htons>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fd4:	885b      	ldrh	r3, [r3, #2]
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f5 ff21 	bl	800ce20 <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	f003 030f 	and.w	r3, r3, #15
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	f0c0 8150 	bcc.w	80172a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017004:	b29b      	uxth	r3, r3
 8017006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017008:	1ad3      	subs	r3, r2, r3
 801700a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f7f7 fc9b 	bl	800e948 <pbuf_clen>
 8017012:	4603      	mov	r3, r0
 8017014:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017016:	4b8c      	ldr	r3, [pc, #560]	; (8017248 <ip4_reass+0x2b0>)
 8017018:	881b      	ldrh	r3, [r3, #0]
 801701a:	461a      	mov	r2, r3
 801701c:	8c3b      	ldrh	r3, [r7, #32]
 801701e:	4413      	add	r3, r2
 8017020:	2b0a      	cmp	r3, #10
 8017022:	dd10      	ble.n	8017046 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017024:	8c3b      	ldrh	r3, [r7, #32]
 8017026:	4619      	mov	r1, r3
 8017028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801702a:	f7ff fd81 	bl	8016b30 <ip_reass_remove_oldest_datagram>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	f000 8137 	beq.w	80172a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017036:	4b84      	ldr	r3, [pc, #528]	; (8017248 <ip4_reass+0x2b0>)
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	461a      	mov	r2, r3
 801703c:	8c3b      	ldrh	r3, [r7, #32]
 801703e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017040:	2b0a      	cmp	r3, #10
 8017042:	f300 812f 	bgt.w	80172a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017046:	4b81      	ldr	r3, [pc, #516]	; (801724c <ip4_reass+0x2b4>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	633b      	str	r3, [r7, #48]	; 0x30
 801704c:	e015      	b.n	801707a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	695a      	ldr	r2, [r3, #20]
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	68db      	ldr	r3, [r3, #12]
 8017056:	429a      	cmp	r2, r3
 8017058:	d10c      	bne.n	8017074 <ip4_reass+0xdc>
 801705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705c:	699a      	ldr	r2, [r3, #24]
 801705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017060:	691b      	ldr	r3, [r3, #16]
 8017062:	429a      	cmp	r2, r3
 8017064:	d106      	bne.n	8017074 <ip4_reass+0xdc>
 8017066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017068:	899a      	ldrh	r2, [r3, #12]
 801706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706c:	889b      	ldrh	r3, [r3, #4]
 801706e:	b29b      	uxth	r3, r3
 8017070:	429a      	cmp	r2, r3
 8017072:	d006      	beq.n	8017082 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	633b      	str	r3, [r7, #48]	; 0x30
 801707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1e6      	bne.n	801704e <ip4_reass+0xb6>
 8017080:	e000      	b.n	8017084 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017082:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017086:	2b00      	cmp	r3, #0
 8017088:	d109      	bne.n	801709e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801708a:	8c3b      	ldrh	r3, [r7, #32]
 801708c:	4619      	mov	r1, r3
 801708e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017090:	f7ff fdb0 	bl	8016bf4 <ip_reass_enqueue_new_datagram>
 8017094:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	2b00      	cmp	r3, #0
 801709a:	d11c      	bne.n	80170d6 <ip4_reass+0x13e>
      goto nullreturn;
 801709c:	e105      	b.n	80172aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a0:	88db      	ldrh	r3, [r3, #6]
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f5 febb 	bl	800ce20 <lwip_htons>
 80170aa:	4603      	mov	r3, r0
 80170ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d110      	bne.n	80170d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80170b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b6:	89db      	ldrh	r3, [r3, #14]
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7f5 feb1 	bl	800ce20 <lwip_htons>
 80170be:	4603      	mov	r3, r0
 80170c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d006      	beq.n	80170d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80170c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ca:	3308      	adds	r3, #8
 80170cc:	2214      	movs	r2, #20
 80170ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80170d0:	4618      	mov	r0, r3
 80170d2:	f000 fe58 	bl	8017d86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80170d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d8:	88db      	ldrh	r3, [r3, #6]
 80170da:	b29b      	uxth	r3, r3
 80170dc:	f003 0320 	and.w	r3, r3, #32
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	bf0c      	ite	eq
 80170e4:	2301      	moveq	r3, #1
 80170e6:	2300      	movne	r3, #0
 80170e8:	b2db      	uxtb	r3, r3
 80170ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80170ec:	69fb      	ldr	r3, [r7, #28]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d00e      	beq.n	8017110 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80170f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170f6:	4413      	add	r3, r2
 80170f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80170fa:	8b7a      	ldrh	r2, [r7, #26]
 80170fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170fe:	429a      	cmp	r2, r3
 8017100:	f0c0 80a0 	bcc.w	8017244 <ip4_reass+0x2ac>
 8017104:	8b7b      	ldrh	r3, [r7, #26]
 8017106:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801710a:	4293      	cmp	r3, r2
 801710c:	f200 809a 	bhi.w	8017244 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017110:	69fa      	ldr	r2, [r7, #28]
 8017112:	6879      	ldr	r1, [r7, #4]
 8017114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017116:	f7ff fdd5 	bl	8016cc4 <ip_reass_chain_frag_into_datagram_and_validate>
 801711a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017122:	f000 809b 	beq.w	801725c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017126:	4b48      	ldr	r3, [pc, #288]	; (8017248 <ip4_reass+0x2b0>)
 8017128:	881a      	ldrh	r2, [r3, #0]
 801712a:	8c3b      	ldrh	r3, [r7, #32]
 801712c:	4413      	add	r3, r2
 801712e:	b29a      	uxth	r2, r3
 8017130:	4b45      	ldr	r3, [pc, #276]	; (8017248 <ip4_reass+0x2b0>)
 8017132:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017134:	69fb      	ldr	r3, [r7, #28]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00d      	beq.n	8017156 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801713a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801713c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801713e:	4413      	add	r3, r2
 8017140:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	8a7a      	ldrh	r2, [r7, #18]
 8017146:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714a:	7f9b      	ldrb	r3, [r3, #30]
 801714c:	f043 0301 	orr.w	r3, r3, #1
 8017150:	b2da      	uxtb	r2, r3
 8017152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017154:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	2b01      	cmp	r3, #1
 801715a:	d171      	bne.n	8017240 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801715e:	8b9b      	ldrh	r3, [r3, #28]
 8017160:	3314      	adds	r3, #20
 8017162:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017170:	685b      	ldr	r3, [r3, #4]
 8017172:	685b      	ldr	r3, [r3, #4]
 8017174:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017178:	3308      	adds	r3, #8
 801717a:	2214      	movs	r2, #20
 801717c:	4619      	mov	r1, r3
 801717e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017180:	f000 fe01 	bl	8017d86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017184:	8a3b      	ldrh	r3, [r7, #16]
 8017186:	4618      	mov	r0, r3
 8017188:	f7f5 fe4a 	bl	800ce20 <lwip_htons>
 801718c:	4603      	mov	r3, r0
 801718e:	461a      	mov	r2, r3
 8017190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017192:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017196:	2200      	movs	r2, #0
 8017198:	719a      	strb	r2, [r3, #6]
 801719a:	2200      	movs	r2, #0
 801719c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a0:	2200      	movs	r2, #0
 80171a2:	729a      	strb	r2, [r3, #10]
 80171a4:	2200      	movs	r2, #0
 80171a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80171a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80171ae:	e00d      	b.n	80171cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80171b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80171b6:	2114      	movs	r1, #20
 80171b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80171ba:	f7f7 fab1 	bl	800e720 <pbuf_remove_header>
      pbuf_cat(p, r);
 80171be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7f7 fc01 	bl	800e9c8 <pbuf_cat>
      r = iprh->next_pbuf;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80171cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1ee      	bne.n	80171b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80171d2:	4b1e      	ldr	r3, [pc, #120]	; (801724c <ip4_reass+0x2b4>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171d8:	429a      	cmp	r2, r3
 80171da:	d102      	bne.n	80171e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80171dc:	2300      	movs	r3, #0
 80171de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e0:	e010      	b.n	8017204 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171e2:	4b1a      	ldr	r3, [pc, #104]	; (801724c <ip4_reass+0x2b4>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e8:	e007      	b.n	80171fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80171ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d006      	beq.n	8017202 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d1f4      	bne.n	80171ea <ip4_reass+0x252>
 8017200:	e000      	b.n	8017204 <ip4_reass+0x26c>
          break;
 8017202:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017208:	f7ff fd2e 	bl	8016c68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801720c:	6878      	ldr	r0, [r7, #4]
 801720e:	f7f7 fb9b 	bl	800e948 <pbuf_clen>
 8017212:	4603      	mov	r3, r0
 8017214:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017216:	4b0c      	ldr	r3, [pc, #48]	; (8017248 <ip4_reass+0x2b0>)
 8017218:	881b      	ldrh	r3, [r3, #0]
 801721a:	8c3a      	ldrh	r2, [r7, #32]
 801721c:	429a      	cmp	r2, r3
 801721e:	d906      	bls.n	801722e <ip4_reass+0x296>
 8017220:	4b0b      	ldr	r3, [pc, #44]	; (8017250 <ip4_reass+0x2b8>)
 8017222:	f240 229b 	movw	r2, #667	; 0x29b
 8017226:	490b      	ldr	r1, [pc, #44]	; (8017254 <ip4_reass+0x2bc>)
 8017228:	480b      	ldr	r0, [pc, #44]	; (8017258 <ip4_reass+0x2c0>)
 801722a:	f000 fe71 	bl	8017f10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801722e:	4b06      	ldr	r3, [pc, #24]	; (8017248 <ip4_reass+0x2b0>)
 8017230:	881a      	ldrh	r2, [r3, #0]
 8017232:	8c3b      	ldrh	r3, [r7, #32]
 8017234:	1ad3      	subs	r3, r2, r3
 8017236:	b29a      	uxth	r2, r3
 8017238:	4b03      	ldr	r3, [pc, #12]	; (8017248 <ip4_reass+0x2b0>)
 801723a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	e038      	b.n	80172b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017240:	2300      	movs	r3, #0
 8017242:	e036      	b.n	80172b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017244:	bf00      	nop
 8017246:	e00a      	b.n	801725e <ip4_reass+0x2c6>
 8017248:	20011d08 	.word	0x20011d08
 801724c:	20011d04 	.word	0x20011d04
 8017250:	0801de60 	.word	0x0801de60
 8017254:	0801dfd0 	.word	0x0801dfd0
 8017258:	0801dea8 	.word	0x0801dea8
    goto nullreturn_ipr;
 801725c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017260:	2b00      	cmp	r3, #0
 8017262:	d106      	bne.n	8017272 <ip4_reass+0x2da>
 8017264:	4b15      	ldr	r3, [pc, #84]	; (80172bc <ip4_reass+0x324>)
 8017266:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801726a:	4915      	ldr	r1, [pc, #84]	; (80172c0 <ip4_reass+0x328>)
 801726c:	4815      	ldr	r0, [pc, #84]	; (80172c4 <ip4_reass+0x32c>)
 801726e:	f000 fe4f 	bl	8017f10 <iprintf>
  if (ipr->p == NULL) {
 8017272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d116      	bne.n	80172a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801727a:	4b13      	ldr	r3, [pc, #76]	; (80172c8 <ip4_reass+0x330>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017280:	429a      	cmp	r2, r3
 8017282:	d006      	beq.n	8017292 <ip4_reass+0x2fa>
 8017284:	4b0d      	ldr	r3, [pc, #52]	; (80172bc <ip4_reass+0x324>)
 8017286:	f240 22ab 	movw	r2, #683	; 0x2ab
 801728a:	4910      	ldr	r1, [pc, #64]	; (80172cc <ip4_reass+0x334>)
 801728c:	480d      	ldr	r0, [pc, #52]	; (80172c4 <ip4_reass+0x32c>)
 801728e:	f000 fe3f 	bl	8017f10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017292:	2100      	movs	r1, #0
 8017294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017296:	f7ff fce7 	bl	8016c68 <ip_reass_dequeue_datagram>
 801729a:	e006      	b.n	80172aa <ip4_reass+0x312>
    goto nullreturn;
 801729c:	bf00      	nop
 801729e:	e004      	b.n	80172aa <ip4_reass+0x312>
    goto nullreturn;
 80172a0:	bf00      	nop
 80172a2:	e002      	b.n	80172aa <ip4_reass+0x312>
      goto nullreturn;
 80172a4:	bf00      	nop
 80172a6:	e000      	b.n	80172aa <ip4_reass+0x312>
  }

nullreturn:
 80172a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f7f7 fabe 	bl	800e82c <pbuf_free>
  return NULL;
 80172b0:	2300      	movs	r3, #0
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3738      	adds	r7, #56	; 0x38
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}
 80172ba:	bf00      	nop
 80172bc:	0801de60 	.word	0x0801de60
 80172c0:	0801dfec 	.word	0x0801dfec
 80172c4:	0801dea8 	.word	0x0801dea8
 80172c8:	20011d04 	.word	0x20011d04
 80172cc:	0801dff8 	.word	0x0801dff8

080172d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80172d4:	2004      	movs	r0, #4
 80172d6:	f7f6 fb93 	bl	800da00 <memp_malloc>
 80172da:	4603      	mov	r3, r0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	bd80      	pop	{r7, pc}

080172e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80172ee:	4b07      	ldr	r3, [pc, #28]	; (801730c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80172f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80172f4:	4906      	ldr	r1, [pc, #24]	; (8017310 <ip_frag_free_pbuf_custom_ref+0x30>)
 80172f6:	4807      	ldr	r0, [pc, #28]	; (8017314 <ip_frag_free_pbuf_custom_ref+0x34>)
 80172f8:	f000 fe0a 	bl	8017f10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80172fc:	6879      	ldr	r1, [r7, #4]
 80172fe:	2004      	movs	r0, #4
 8017300:	f7f6 fbf4 	bl	800daec <memp_free>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	0801de60 	.word	0x0801de60
 8017310:	0801e018 	.word	0x0801e018
 8017314:	0801dea8 	.word	0x0801dea8

08017318 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <ipfrag_free_pbuf_custom+0x20>
 801732a:	4b11      	ldr	r3, [pc, #68]	; (8017370 <ipfrag_free_pbuf_custom+0x58>)
 801732c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017330:	4910      	ldr	r1, [pc, #64]	; (8017374 <ipfrag_free_pbuf_custom+0x5c>)
 8017332:	4811      	ldr	r0, [pc, #68]	; (8017378 <ipfrag_free_pbuf_custom+0x60>)
 8017334:	f000 fdec 	bl	8017f10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017338:	68fa      	ldr	r2, [r7, #12]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	429a      	cmp	r2, r3
 801733e:	d006      	beq.n	801734e <ipfrag_free_pbuf_custom+0x36>
 8017340:	4b0b      	ldr	r3, [pc, #44]	; (8017370 <ipfrag_free_pbuf_custom+0x58>)
 8017342:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017346:	490d      	ldr	r1, [pc, #52]	; (801737c <ipfrag_free_pbuf_custom+0x64>)
 8017348:	480b      	ldr	r0, [pc, #44]	; (8017378 <ipfrag_free_pbuf_custom+0x60>)
 801734a:	f000 fde1 	bl	8017f10 <iprintf>
  if (pcr->original != NULL) {
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	695b      	ldr	r3, [r3, #20]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d004      	beq.n	8017360 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	695b      	ldr	r3, [r3, #20]
 801735a:	4618      	mov	r0, r3
 801735c:	f7f7 fa66 	bl	800e82c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017360:	68f8      	ldr	r0, [r7, #12]
 8017362:	f7ff ffbd 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
}
 8017366:	bf00      	nop
 8017368:	3710      	adds	r7, #16
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	0801de60 	.word	0x0801de60
 8017374:	0801e024 	.word	0x0801e024
 8017378:	0801dea8 	.word	0x0801dea8
 801737c:	0801e030 	.word	0x0801e030

08017380 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b094      	sub	sp, #80	; 0x50
 8017384:	af02      	add	r7, sp, #8
 8017386:	60f8      	str	r0, [r7, #12]
 8017388:	60b9      	str	r1, [r7, #8]
 801738a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801738c:	2300      	movs	r3, #0
 801738e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017396:	3b14      	subs	r3, #20
 8017398:	2b00      	cmp	r3, #0
 801739a:	da00      	bge.n	801739e <ip4_frag+0x1e>
 801739c:	3307      	adds	r3, #7
 801739e:	10db      	asrs	r3, r3, #3
 80173a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80173a2:	2314      	movs	r3, #20
 80173a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80173ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80173b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	f003 030f 	and.w	r3, r3, #15
 80173b8:	b2db      	uxtb	r3, r3
 80173ba:	009b      	lsls	r3, r3, #2
 80173bc:	b2db      	uxtb	r3, r3
 80173be:	2b14      	cmp	r3, #20
 80173c0:	d002      	beq.n	80173c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80173c2:	f06f 0305 	mvn.w	r3, #5
 80173c6:	e110      	b.n	80175ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	895b      	ldrh	r3, [r3, #10]
 80173cc:	2b13      	cmp	r3, #19
 80173ce:	d809      	bhi.n	80173e4 <ip4_frag+0x64>
 80173d0:	4b88      	ldr	r3, [pc, #544]	; (80175f4 <ip4_frag+0x274>)
 80173d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80173d6:	4988      	ldr	r1, [pc, #544]	; (80175f8 <ip4_frag+0x278>)
 80173d8:	4888      	ldr	r0, [pc, #544]	; (80175fc <ip4_frag+0x27c>)
 80173da:	f000 fd99 	bl	8017f10 <iprintf>
 80173de:	f06f 0305 	mvn.w	r3, #5
 80173e2:	e102      	b.n	80175ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80173e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e6:	88db      	ldrh	r3, [r3, #6]
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f5 fd18 	bl	800ce20 <lwip_htons>
 80173f0:	4603      	mov	r3, r0
 80173f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80173f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80173fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017404:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	891b      	ldrh	r3, [r3, #8]
 801740a:	3b14      	subs	r3, #20
 801740c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017410:	e0e1      	b.n	80175d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017414:	00db      	lsls	r3, r3, #3
 8017416:	b29b      	uxth	r3, r3
 8017418:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801741c:	4293      	cmp	r3, r2
 801741e:	bf28      	it	cs
 8017420:	4613      	movcs	r3, r2
 8017422:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017424:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017428:	2114      	movs	r1, #20
 801742a:	200e      	movs	r0, #14
 801742c:	f7f6 ff1a 	bl	800e264 <pbuf_alloc>
 8017430:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017434:	2b00      	cmp	r3, #0
 8017436:	f000 80d5 	beq.w	80175e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	895b      	ldrh	r3, [r3, #10]
 801743e:	2b13      	cmp	r3, #19
 8017440:	d806      	bhi.n	8017450 <ip4_frag+0xd0>
 8017442:	4b6c      	ldr	r3, [pc, #432]	; (80175f4 <ip4_frag+0x274>)
 8017444:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017448:	496d      	ldr	r1, [pc, #436]	; (8017600 <ip4_frag+0x280>)
 801744a:	486c      	ldr	r0, [pc, #432]	; (80175fc <ip4_frag+0x27c>)
 801744c:	f000 fd60 	bl	8017f10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	2214      	movs	r2, #20
 8017456:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017458:	4618      	mov	r0, r3
 801745a:	f000 fc94 	bl	8017d86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017464:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017466:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801746a:	e064      	b.n	8017536 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	895a      	ldrh	r2, [r3, #10]
 8017470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017472:	1ad3      	subs	r3, r2, r3
 8017474:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	895b      	ldrh	r3, [r3, #10]
 801747a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801747c:	429a      	cmp	r2, r3
 801747e:	d906      	bls.n	801748e <ip4_frag+0x10e>
 8017480:	4b5c      	ldr	r3, [pc, #368]	; (80175f4 <ip4_frag+0x274>)
 8017482:	f240 322d 	movw	r2, #813	; 0x32d
 8017486:	495f      	ldr	r1, [pc, #380]	; (8017604 <ip4_frag+0x284>)
 8017488:	485c      	ldr	r0, [pc, #368]	; (80175fc <ip4_frag+0x27c>)
 801748a:	f000 fd41 	bl	8017f10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801748e:	8bfa      	ldrh	r2, [r7, #30]
 8017490:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017494:	4293      	cmp	r3, r2
 8017496:	bf28      	it	cs
 8017498:	4613      	movcs	r3, r2
 801749a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801749e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d105      	bne.n	80174b2 <ip4_frag+0x132>
        poff = 0;
 80174a6:	2300      	movs	r3, #0
 80174a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	60fb      	str	r3, [r7, #12]
        continue;
 80174b0:	e041      	b.n	8017536 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80174b2:	f7ff ff0d 	bl	80172d0 <ip_frag_alloc_pbuf_custom_ref>
 80174b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80174b8:	69bb      	ldr	r3, [r7, #24]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80174be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174c0:	f7f7 f9b4 	bl	800e82c <pbuf_free>
        goto memerr;
 80174c4:	e08f      	b.n	80175e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80174ce:	4413      	add	r3, r2
 80174d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80174d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80174d8:	9201      	str	r2, [sp, #4]
 80174da:	9300      	str	r3, [sp, #0]
 80174dc:	4603      	mov	r3, r0
 80174de:	2241      	movs	r2, #65	; 0x41
 80174e0:	2000      	movs	r0, #0
 80174e2:	f7f6 ffe9 	bl	800e4b8 <pbuf_alloced_custom>
 80174e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d106      	bne.n	80174fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80174ee:	69b8      	ldr	r0, [r7, #24]
 80174f0:	f7ff fef6 	bl	80172e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80174f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174f6:	f7f7 f999 	bl	800e82c <pbuf_free>
        goto memerr;
 80174fa:	e074      	b.n	80175e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80174fc:	68f8      	ldr	r0, [r7, #12]
 80174fe:	f7f7 fa3b 	bl	800e978 <pbuf_ref>
      pcr->original = p;
 8017502:	69bb      	ldr	r3, [r7, #24]
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017508:	69bb      	ldr	r3, [r7, #24]
 801750a:	4a3f      	ldr	r2, [pc, #252]	; (8017608 <ip4_frag+0x288>)
 801750c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801750e:	6979      	ldr	r1, [r7, #20]
 8017510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017512:	f7f7 fa59 	bl	800e9c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017516:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801751a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801751e:	1ad3      	subs	r3, r2, r3
 8017520:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017528:	2b00      	cmp	r3, #0
 801752a:	d004      	beq.n	8017536 <ip4_frag+0x1b6>
        poff = 0;
 801752c:	2300      	movs	r3, #0
 801752e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017536:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801753a:	2b00      	cmp	r3, #0
 801753c:	d196      	bne.n	801746c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801753e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017540:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017544:	4413      	add	r3, r2
 8017546:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801754c:	f1a3 0213 	sub.w	r2, r3, #19
 8017550:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017554:	429a      	cmp	r2, r3
 8017556:	bfcc      	ite	gt
 8017558:	2301      	movgt	r3, #1
 801755a:	2300      	movle	r3, #0
 801755c:	b2db      	uxtb	r3, r3
 801755e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017560:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017568:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801756a:	6a3b      	ldr	r3, [r7, #32]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d002      	beq.n	8017576 <ip4_frag+0x1f6>
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	2b00      	cmp	r3, #0
 8017574:	d003      	beq.n	801757e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801757c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801757e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017580:	4618      	mov	r0, r3
 8017582:	f7f5 fc4d 	bl	800ce20 <lwip_htons>
 8017586:	4603      	mov	r3, r0
 8017588:	461a      	mov	r2, r3
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801758e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017590:	3314      	adds	r3, #20
 8017592:	b29b      	uxth	r3, r3
 8017594:	4618      	mov	r0, r3
 8017596:	f7f5 fc43 	bl	800ce20 <lwip_htons>
 801759a:	4603      	mov	r3, r0
 801759c:	461a      	mov	r2, r3
 801759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80175a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a4:	2200      	movs	r2, #0
 80175a6:	729a      	strb	r2, [r3, #10]
 80175a8:	2200      	movs	r2, #0
 80175aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175b4:	68b8      	ldr	r0, [r7, #8]
 80175b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80175b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175ba:	f7f7 f937 	bl	800e82c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80175be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80175c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175c4:	1ad3      	subs	r3, r2, r3
 80175c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80175ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80175ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175d0:	4413      	add	r3, r2
 80175d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80175d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f47f af19 	bne.w	8017412 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80175e0:	2300      	movs	r3, #0
 80175e2:	e002      	b.n	80175ea <ip4_frag+0x26a>
      goto memerr;
 80175e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80175e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3748      	adds	r7, #72	; 0x48
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	bf00      	nop
 80175f4:	0801de60 	.word	0x0801de60
 80175f8:	0801e03c 	.word	0x0801e03c
 80175fc:	0801dea8 	.word	0x0801dea8
 8017600:	0801e058 	.word	0x0801e058
 8017604:	0801e078 	.word	0x0801e078
 8017608:	08017319 	.word	0x08017319

0801760c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b086      	sub	sp, #24
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
 8017614:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017616:	230e      	movs	r3, #14
 8017618:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	2b0e      	cmp	r3, #14
 8017620:	d96e      	bls.n	8017700 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	7bdb      	ldrb	r3, [r3, #15]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d106      	bne.n	8017638 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017630:	3301      	adds	r3, #1
 8017632:	b2da      	uxtb	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	7b1a      	ldrb	r2, [r3, #12]
 8017642:	7b5b      	ldrb	r3, [r3, #13]
 8017644:	021b      	lsls	r3, r3, #8
 8017646:	4313      	orrs	r3, r2
 8017648:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	f003 0301 	and.w	r3, r3, #1
 8017652:	2b00      	cmp	r3, #0
 8017654:	d023      	beq.n	801769e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	2b01      	cmp	r3, #1
 801765c:	d10f      	bne.n	801767e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	785b      	ldrb	r3, [r3, #1]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d11b      	bne.n	801769e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801766a:	2b5e      	cmp	r3, #94	; 0x5e
 801766c:	d117      	bne.n	801769e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	7b5b      	ldrb	r3, [r3, #13]
 8017672:	f043 0310 	orr.w	r3, r3, #16
 8017676:	b2da      	uxtb	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	735a      	strb	r2, [r3, #13]
 801767c:	e00f      	b.n	801769e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	2206      	movs	r2, #6
 8017682:	4928      	ldr	r1, [pc, #160]	; (8017724 <ethernet_input+0x118>)
 8017684:	4618      	mov	r0, r3
 8017686:	f000 fb6e 	bl	8017d66 <memcmp>
 801768a:	4603      	mov	r3, r0
 801768c:	2b00      	cmp	r3, #0
 801768e:	d106      	bne.n	801769e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	7b5b      	ldrb	r3, [r3, #13]
 8017694:	f043 0308 	orr.w	r3, r3, #8
 8017698:	b2da      	uxtb	r2, r3
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801769e:	89fb      	ldrh	r3, [r7, #14]
 80176a0:	2b08      	cmp	r3, #8
 80176a2:	d003      	beq.n	80176ac <ethernet_input+0xa0>
 80176a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80176a8:	d014      	beq.n	80176d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80176aa:	e032      	b.n	8017712 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176b2:	f003 0308 	and.w	r3, r3, #8
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d024      	beq.n	8017704 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176ba:	8afb      	ldrh	r3, [r7, #22]
 80176bc:	4619      	mov	r1, r3
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f7f7 f82e 	bl	800e720 <pbuf_remove_header>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d11e      	bne.n	8017708 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80176ca:	6839      	ldr	r1, [r7, #0]
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7fe ff2b 	bl	8016528 <ip4_input>
      break;
 80176d2:	e013      	b.n	80176fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176da:	f003 0308 	and.w	r3, r3, #8
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d014      	beq.n	801770c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176e2:	8afb      	ldrh	r3, [r7, #22]
 80176e4:	4619      	mov	r1, r3
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7f7 f81a 	bl	800e720 <pbuf_remove_header>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d10e      	bne.n	8017710 <ethernet_input+0x104>
        etharp_input(p, netif);
 80176f2:	6839      	ldr	r1, [r7, #0]
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f7fe f8cb 	bl	8015890 <etharp_input>
      break;
 80176fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80176fc:	2300      	movs	r3, #0
 80176fe:	e00c      	b.n	801771a <ethernet_input+0x10e>
    goto free_and_return;
 8017700:	bf00      	nop
 8017702:	e006      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017704:	bf00      	nop
 8017706:	e004      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017708:	bf00      	nop
 801770a:	e002      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 801770c:	bf00      	nop
 801770e:	e000      	b.n	8017712 <ethernet_input+0x106>
        goto free_and_return;
 8017710:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f7f7 f88a 	bl	800e82c <pbuf_free>
  return ERR_OK;
 8017718:	2300      	movs	r3, #0
}
 801771a:	4618      	mov	r0, r3
 801771c:	3718      	adds	r7, #24
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	0801e2f4 	.word	0x0801e2f4

08017728 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017736:	8c3b      	ldrh	r3, [r7, #32]
 8017738:	4618      	mov	r0, r3
 801773a:	f7f5 fb71 	bl	800ce20 <lwip_htons>
 801773e:	4603      	mov	r3, r0
 8017740:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017742:	210e      	movs	r1, #14
 8017744:	68b8      	ldr	r0, [r7, #8]
 8017746:	f7f6 ffdb 	bl	800e700 <pbuf_add_header>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	d125      	bne.n	801779c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	685b      	ldr	r3, [r3, #4]
 8017754:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	8afa      	ldrh	r2, [r7, #22]
 801775a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	2206      	movs	r2, #6
 8017760:	6839      	ldr	r1, [r7, #0]
 8017762:	4618      	mov	r0, r3
 8017764:	f000 fb0f 	bl	8017d86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	3306      	adds	r3, #6
 801776c:	2206      	movs	r2, #6
 801776e:	6879      	ldr	r1, [r7, #4]
 8017770:	4618      	mov	r0, r3
 8017772:	f000 fb08 	bl	8017d86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801777c:	2b06      	cmp	r3, #6
 801777e:	d006      	beq.n	801778e <ethernet_output+0x66>
 8017780:	4b0a      	ldr	r3, [pc, #40]	; (80177ac <ethernet_output+0x84>)
 8017782:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017786:	490a      	ldr	r1, [pc, #40]	; (80177b0 <ethernet_output+0x88>)
 8017788:	480a      	ldr	r0, [pc, #40]	; (80177b4 <ethernet_output+0x8c>)
 801778a:	f000 fbc1 	bl	8017f10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	699b      	ldr	r3, [r3, #24]
 8017792:	68b9      	ldr	r1, [r7, #8]
 8017794:	68f8      	ldr	r0, [r7, #12]
 8017796:	4798      	blx	r3
 8017798:	4603      	mov	r3, r0
 801779a:	e002      	b.n	80177a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801779c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801779e:	f06f 0301 	mvn.w	r3, #1
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3718      	adds	r7, #24
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}
 80177aa:	bf00      	nop
 80177ac:	0801e088 	.word	0x0801e088
 80177b0:	0801e0c0 	.word	0x0801e0c0
 80177b4:	0801e0f4 	.word	0x0801e0f4

080177b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
 80177c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	2200      	movs	r2, #0
 80177c6:	2104      	movs	r1, #4
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7ef fdf1 	bl	80073b0 <osMessageQueueNew>
 80177ce:	4602      	mov	r2, r0
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d102      	bne.n	80177e2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80177dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177e0:	e000      	b.n	80177e4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80177e2:	2300      	movs	r3, #0
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	3708      	adds	r7, #8
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}

080177ec <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b082      	sub	sp, #8
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7ef ff45 	bl	8007688 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	4618      	mov	r0, r3
 8017804:	f7ef ff72 	bl	80076ec <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017808:	bf00      	nop
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
 8017818:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6818      	ldr	r0, [r3, #0]
 801781e:	4639      	mov	r1, r7
 8017820:	2300      	movs	r3, #0
 8017822:	2200      	movs	r2, #0
 8017824:	f7ef fe4a 	bl	80074bc <osMessageQueuePut>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d102      	bne.n	8017834 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801782e:	2300      	movs	r3, #0
 8017830:	73fb      	strb	r3, [r7, #15]
 8017832:	e001      	b.n	8017838 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017834:	23ff      	movs	r3, #255	; 0xff
 8017836:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017838:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801783c:	4618      	mov	r0, r3
 801783e:	3710      	adds	r7, #16
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	60b9      	str	r1, [r7, #8]
 801784e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017850:	f7ef f9da 	bl	8006c08 <osKernelGetTickCount>
 8017854:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d013      	beq.n	8017884 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	6818      	ldr	r0, [r3, #0]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2200      	movs	r2, #0
 8017864:	68b9      	ldr	r1, [r7, #8]
 8017866:	f7ef fe9d 	bl	80075a4 <osMessageQueueGet>
 801786a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d105      	bne.n	801787e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017872:	f7ef f9c9 	bl	8006c08 <osKernelGetTickCount>
 8017876:	4602      	mov	r2, r0
 8017878:	697b      	ldr	r3, [r7, #20]
 801787a:	1ad3      	subs	r3, r2, r3
 801787c:	e00f      	b.n	801789e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801787e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017882:	e00c      	b.n	801789e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	6818      	ldr	r0, [r3, #0]
 8017888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801788c:	2200      	movs	r2, #0
 801788e:	68b9      	ldr	r1, [r7, #8]
 8017890:	f7ef fe88 	bl	80075a4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017894:	f7ef f9b8 	bl	8006c08 <osKernelGetTickCount>
 8017898:	4602      	mov	r2, r0
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801789e:	4618      	mov	r0, r3
 80178a0:	3718      	adds	r7, #24
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	6078      	str	r0, [r7, #4]
 80178ae:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6818      	ldr	r0, [r3, #0]
 80178b4:	2300      	movs	r3, #0
 80178b6:	2200      	movs	r2, #0
 80178b8:	6839      	ldr	r1, [r7, #0]
 80178ba:	f7ef fe73 	bl	80075a4 <osMessageQueueGet>
 80178be:	4603      	mov	r3, r0
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d101      	bne.n	80178c8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80178c4:	2300      	movs	r3, #0
 80178c6:	e001      	b.n	80178cc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80178c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d101      	bne.n	80178e8 <sys_mbox_valid+0x14>
    return 0;
 80178e4:	2300      	movs	r3, #0
 80178e6:	e000      	b.n	80178ea <sys_mbox_valid+0x16>
  else
    return 1;
 80178e8:	2301      	movs	r3, #1
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	370c      	adds	r7, #12
 80178ee:	46bd      	mov	sp, r7
 80178f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f4:	4770      	bx	lr

080178f6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80178f6:	b480      	push	{r7}
 80178f8:	b083      	sub	sp, #12
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	2200      	movs	r2, #0
 8017902:	601a      	str	r2, [r3, #0]
}
 8017904:	bf00      	nop
 8017906:	370c      	adds	r7, #12
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b082      	sub	sp, #8
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	460b      	mov	r3, r1
 801791a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801791c:	78fb      	ldrb	r3, [r7, #3]
 801791e:	2200      	movs	r2, #0
 8017920:	4619      	mov	r1, r3
 8017922:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017926:	f7ef fbb3 	bl	8007090 <osSemaphoreNew>
 801792a:	4602      	mov	r2, r0
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d102      	bne.n	801793e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801793c:	e009      	b.n	8017952 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801793e:	78fb      	ldrb	r3, [r7, #3]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d105      	bne.n	8017950 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	2100      	movs	r1, #0
 801794a:	4618      	mov	r0, r3
 801794c:	f7ef fc3c 	bl	80071c8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017950:	2300      	movs	r3, #0
}
 8017952:	4618      	mov	r0, r3
 8017954:	3708      	adds	r7, #8
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}

0801795a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801795a:	b580      	push	{r7, lr}
 801795c:	b084      	sub	sp, #16
 801795e:	af00      	add	r7, sp, #0
 8017960:	6078      	str	r0, [r7, #4]
 8017962:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8017964:	f7ef f950 	bl	8006c08 <osKernelGetTickCount>
 8017968:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d011      	beq.n	8017994 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	6839      	ldr	r1, [r7, #0]
 8017976:	4618      	mov	r0, r3
 8017978:	f7ef fc26 	bl	80071c8 <osSemaphoreAcquire>
 801797c:	4603      	mov	r3, r0
 801797e:	2b00      	cmp	r3, #0
 8017980:	d105      	bne.n	801798e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8017982:	f7ef f941 	bl	8006c08 <osKernelGetTickCount>
 8017986:	4602      	mov	r2, r0
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	1ad3      	subs	r3, r2, r3
 801798c:	e012      	b.n	80179b4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801798e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017992:	e00f      	b.n	80179b4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8017994:	bf00      	nop
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801799e:	4618      	mov	r0, r3
 80179a0:	f7ef fc12 	bl	80071c8 <osSemaphoreAcquire>
 80179a4:	4603      	mov	r3, r0
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d1f5      	bne.n	8017996 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80179aa:	f7ef f92d 	bl	8006c08 <osKernelGetTickCount>
 80179ae:	4602      	mov	r2, r0
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3710      	adds	r7, #16
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b082      	sub	sp, #8
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7ef fc63 	bl	8007294 <osSemaphoreRelease>
}
 80179ce:	bf00      	nop
 80179d0:	3708      	adds	r7, #8
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}

080179d6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80179d6:	b580      	push	{r7, lr}
 80179d8:	b082      	sub	sp, #8
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4618      	mov	r0, r3
 80179e4:	f7ef fcae 	bl	8007344 <osSemaphoreDelete>
}
 80179e8:	bf00      	nop
 80179ea:	3708      	adds	r7, #8
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}

080179f0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80179f0:	b480      	push	{r7}
 80179f2:	b083      	sub	sp, #12
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d101      	bne.n	8017a04 <sys_sem_valid+0x14>
    return 0;
 8017a00:	2300      	movs	r3, #0
 8017a02:	e000      	b.n	8017a06 <sys_sem_valid+0x16>
  else
    return 1;
 8017a04:	2301      	movs	r3, #1
}
 8017a06:	4618      	mov	r0, r3
 8017a08:	370c      	adds	r7, #12
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a10:	4770      	bx	lr

08017a12 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017a12:	b480      	push	{r7}
 8017a14:	b083      	sub	sp, #12
 8017a16:	af00      	add	r7, sp, #0
 8017a18:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	601a      	str	r2, [r3, #0]
}
 8017a20:	bf00      	nop
 8017a22:	370c      	adds	r7, #12
 8017a24:	46bd      	mov	sp, r7
 8017a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2a:	4770      	bx	lr

08017a2c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017a30:	2000      	movs	r0, #0
 8017a32:	f7ef f9e5 	bl	8006e00 <osMutexNew>
 8017a36:	4603      	mov	r3, r0
 8017a38:	4a01      	ldr	r2, [pc, #4]	; (8017a40 <sys_init+0x14>)
 8017a3a:	6013      	str	r3, [r2, #0]
#endif
}
 8017a3c:	bf00      	nop
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	20011d0c 	.word	0x20011d0c

08017a44 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b082      	sub	sp, #8
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017a4c:	2000      	movs	r0, #0
 8017a4e:	f7ef f9d7 	bl	8006e00 <osMutexNew>
 8017a52:	4602      	mov	r2, r0
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d102      	bne.n	8017a66 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a64:	e000      	b.n	8017a68 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017a66:	2300      	movs	r3, #0
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3708      	adds	r7, #8
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}

08017a70 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b082      	sub	sp, #8
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7ef fa57 	bl	8006f34 <osMutexAcquire>
#endif
}
 8017a86:	bf00      	nop
 8017a88:	3708      	adds	r7, #8
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}

08017a8e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017a8e:	b580      	push	{r7, lr}
 8017a90:	b082      	sub	sp, #8
 8017a92:	af00      	add	r7, sp, #0
 8017a94:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7ef faa8 	bl	8006ff0 <osMutexRelease>
}
 8017aa0:	bf00      	nop
 8017aa2:	3708      	adds	r7, #8
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b08e      	sub	sp, #56	; 0x38
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	60f8      	str	r0, [r7, #12]
 8017ab0:	60b9      	str	r1, [r7, #8]
 8017ab2:	607a      	str	r2, [r7, #4]
 8017ab4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017ab6:	f107 0314 	add.w	r3, r7, #20
 8017aba:	2224      	movs	r2, #36	; 0x24
 8017abc:	2100      	movs	r1, #0
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f000 f989 	bl	8017dd6 <memset>
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	617b      	str	r3, [r7, #20]
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8017acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ace:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017ad0:	f107 0314 	add.w	r3, r7, #20
 8017ad4:	461a      	mov	r2, r3
 8017ad6:	6879      	ldr	r1, [r7, #4]
 8017ad8:	68b8      	ldr	r0, [r7, #8]
 8017ada:	f7ef f8bd 	bl	8006c58 <osThreadNew>
 8017ade:	4603      	mov	r3, r0
#endif
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3738      	adds	r7, #56	; 0x38
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}

08017ae8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017aec:	4b04      	ldr	r3, [pc, #16]	; (8017b00 <sys_arch_protect+0x18>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017af4:	4618      	mov	r0, r3
 8017af6:	f7ef fa1d 	bl	8006f34 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017afa:	2301      	movs	r3, #1
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	20011d0c 	.word	0x20011d0c

08017b04 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017b0c:	4b04      	ldr	r3, [pc, #16]	; (8017b20 <sys_arch_unprotect+0x1c>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7ef fa6d 	bl	8006ff0 <osMutexRelease>
}
 8017b16:	bf00      	nop
 8017b18:	3708      	adds	r7, #8
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	20011d0c 	.word	0x20011d0c

08017b24 <atof>:
 8017b24:	2100      	movs	r1, #0
 8017b26:	f001 b971 	b.w	8018e0c <strtod>
	...

08017b2c <std>:
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	4604      	mov	r4, r0
 8017b32:	e9c0 3300 	strd	r3, r3, [r0]
 8017b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b3a:	6083      	str	r3, [r0, #8]
 8017b3c:	8181      	strh	r1, [r0, #12]
 8017b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8017b40:	81c2      	strh	r2, [r0, #14]
 8017b42:	6183      	str	r3, [r0, #24]
 8017b44:	4619      	mov	r1, r3
 8017b46:	2208      	movs	r2, #8
 8017b48:	305c      	adds	r0, #92	; 0x5c
 8017b4a:	f000 f944 	bl	8017dd6 <memset>
 8017b4e:	4b05      	ldr	r3, [pc, #20]	; (8017b64 <std+0x38>)
 8017b50:	6263      	str	r3, [r4, #36]	; 0x24
 8017b52:	4b05      	ldr	r3, [pc, #20]	; (8017b68 <std+0x3c>)
 8017b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8017b56:	4b05      	ldr	r3, [pc, #20]	; (8017b6c <std+0x40>)
 8017b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b5a:	4b05      	ldr	r3, [pc, #20]	; (8017b70 <std+0x44>)
 8017b5c:	6224      	str	r4, [r4, #32]
 8017b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8017b60:	bd10      	pop	{r4, pc}
 8017b62:	bf00      	nop
 8017b64:	080180f1 	.word	0x080180f1
 8017b68:	08018113 	.word	0x08018113
 8017b6c:	0801814b 	.word	0x0801814b
 8017b70:	0801816f 	.word	0x0801816f

08017b74 <_cleanup_r>:
 8017b74:	4901      	ldr	r1, [pc, #4]	; (8017b7c <_cleanup_r+0x8>)
 8017b76:	f000 b8af 	b.w	8017cd8 <_fwalk_reent>
 8017b7a:	bf00      	nop
 8017b7c:	08019069 	.word	0x08019069

08017b80 <__sfmoreglue>:
 8017b80:	b570      	push	{r4, r5, r6, lr}
 8017b82:	2268      	movs	r2, #104	; 0x68
 8017b84:	1e4d      	subs	r5, r1, #1
 8017b86:	4355      	muls	r5, r2
 8017b88:	460e      	mov	r6, r1
 8017b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017b8e:	f000 f94b 	bl	8017e28 <_malloc_r>
 8017b92:	4604      	mov	r4, r0
 8017b94:	b140      	cbz	r0, 8017ba8 <__sfmoreglue+0x28>
 8017b96:	2100      	movs	r1, #0
 8017b98:	e9c0 1600 	strd	r1, r6, [r0]
 8017b9c:	300c      	adds	r0, #12
 8017b9e:	60a0      	str	r0, [r4, #8]
 8017ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017ba4:	f000 f917 	bl	8017dd6 <memset>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	bd70      	pop	{r4, r5, r6, pc}

08017bac <__sfp_lock_acquire>:
 8017bac:	4801      	ldr	r0, [pc, #4]	; (8017bb4 <__sfp_lock_acquire+0x8>)
 8017bae:	f000 b8d8 	b.w	8017d62 <__retarget_lock_acquire_recursive>
 8017bb2:	bf00      	nop
 8017bb4:	20011d11 	.word	0x20011d11

08017bb8 <__sfp_lock_release>:
 8017bb8:	4801      	ldr	r0, [pc, #4]	; (8017bc0 <__sfp_lock_release+0x8>)
 8017bba:	f000 b8d3 	b.w	8017d64 <__retarget_lock_release_recursive>
 8017bbe:	bf00      	nop
 8017bc0:	20011d11 	.word	0x20011d11

08017bc4 <__sinit_lock_acquire>:
 8017bc4:	4801      	ldr	r0, [pc, #4]	; (8017bcc <__sinit_lock_acquire+0x8>)
 8017bc6:	f000 b8cc 	b.w	8017d62 <__retarget_lock_acquire_recursive>
 8017bca:	bf00      	nop
 8017bcc:	20011d12 	.word	0x20011d12

08017bd0 <__sinit_lock_release>:
 8017bd0:	4801      	ldr	r0, [pc, #4]	; (8017bd8 <__sinit_lock_release+0x8>)
 8017bd2:	f000 b8c7 	b.w	8017d64 <__retarget_lock_release_recursive>
 8017bd6:	bf00      	nop
 8017bd8:	20011d12 	.word	0x20011d12

08017bdc <__sinit>:
 8017bdc:	b510      	push	{r4, lr}
 8017bde:	4604      	mov	r4, r0
 8017be0:	f7ff fff0 	bl	8017bc4 <__sinit_lock_acquire>
 8017be4:	69a3      	ldr	r3, [r4, #24]
 8017be6:	b11b      	cbz	r3, 8017bf0 <__sinit+0x14>
 8017be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bec:	f7ff bff0 	b.w	8017bd0 <__sinit_lock_release>
 8017bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8017bf6:	4b13      	ldr	r3, [pc, #76]	; (8017c44 <__sinit+0x68>)
 8017bf8:	4a13      	ldr	r2, [pc, #76]	; (8017c48 <__sinit+0x6c>)
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8017bfe:	42a3      	cmp	r3, r4
 8017c00:	bf04      	itt	eq
 8017c02:	2301      	moveq	r3, #1
 8017c04:	61a3      	streq	r3, [r4, #24]
 8017c06:	4620      	mov	r0, r4
 8017c08:	f000 f820 	bl	8017c4c <__sfp>
 8017c0c:	6060      	str	r0, [r4, #4]
 8017c0e:	4620      	mov	r0, r4
 8017c10:	f000 f81c 	bl	8017c4c <__sfp>
 8017c14:	60a0      	str	r0, [r4, #8]
 8017c16:	4620      	mov	r0, r4
 8017c18:	f000 f818 	bl	8017c4c <__sfp>
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	60e0      	str	r0, [r4, #12]
 8017c20:	2104      	movs	r1, #4
 8017c22:	6860      	ldr	r0, [r4, #4]
 8017c24:	f7ff ff82 	bl	8017b2c <std>
 8017c28:	68a0      	ldr	r0, [r4, #8]
 8017c2a:	2201      	movs	r2, #1
 8017c2c:	2109      	movs	r1, #9
 8017c2e:	f7ff ff7d 	bl	8017b2c <std>
 8017c32:	68e0      	ldr	r0, [r4, #12]
 8017c34:	2202      	movs	r2, #2
 8017c36:	2112      	movs	r1, #18
 8017c38:	f7ff ff78 	bl	8017b2c <std>
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	61a3      	str	r3, [r4, #24]
 8017c40:	e7d2      	b.n	8017be8 <__sinit+0xc>
 8017c42:	bf00      	nop
 8017c44:	0801e464 	.word	0x0801e464
 8017c48:	08017b75 	.word	0x08017b75

08017c4c <__sfp>:
 8017c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c4e:	4607      	mov	r7, r0
 8017c50:	f7ff ffac 	bl	8017bac <__sfp_lock_acquire>
 8017c54:	4b1e      	ldr	r3, [pc, #120]	; (8017cd0 <__sfp+0x84>)
 8017c56:	681e      	ldr	r6, [r3, #0]
 8017c58:	69b3      	ldr	r3, [r6, #24]
 8017c5a:	b913      	cbnz	r3, 8017c62 <__sfp+0x16>
 8017c5c:	4630      	mov	r0, r6
 8017c5e:	f7ff ffbd 	bl	8017bdc <__sinit>
 8017c62:	3648      	adds	r6, #72	; 0x48
 8017c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017c68:	3b01      	subs	r3, #1
 8017c6a:	d503      	bpl.n	8017c74 <__sfp+0x28>
 8017c6c:	6833      	ldr	r3, [r6, #0]
 8017c6e:	b30b      	cbz	r3, 8017cb4 <__sfp+0x68>
 8017c70:	6836      	ldr	r6, [r6, #0]
 8017c72:	e7f7      	b.n	8017c64 <__sfp+0x18>
 8017c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017c78:	b9d5      	cbnz	r5, 8017cb0 <__sfp+0x64>
 8017c7a:	4b16      	ldr	r3, [pc, #88]	; (8017cd4 <__sfp+0x88>)
 8017c7c:	60e3      	str	r3, [r4, #12]
 8017c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017c82:	6665      	str	r5, [r4, #100]	; 0x64
 8017c84:	f000 f86c 	bl	8017d60 <__retarget_lock_init_recursive>
 8017c88:	f7ff ff96 	bl	8017bb8 <__sfp_lock_release>
 8017c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017c94:	6025      	str	r5, [r4, #0]
 8017c96:	61a5      	str	r5, [r4, #24]
 8017c98:	2208      	movs	r2, #8
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017ca0:	f000 f899 	bl	8017dd6 <memset>
 8017ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017cac:	4620      	mov	r0, r4
 8017cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb0:	3468      	adds	r4, #104	; 0x68
 8017cb2:	e7d9      	b.n	8017c68 <__sfp+0x1c>
 8017cb4:	2104      	movs	r1, #4
 8017cb6:	4638      	mov	r0, r7
 8017cb8:	f7ff ff62 	bl	8017b80 <__sfmoreglue>
 8017cbc:	4604      	mov	r4, r0
 8017cbe:	6030      	str	r0, [r6, #0]
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d1d5      	bne.n	8017c70 <__sfp+0x24>
 8017cc4:	f7ff ff78 	bl	8017bb8 <__sfp_lock_release>
 8017cc8:	230c      	movs	r3, #12
 8017cca:	603b      	str	r3, [r7, #0]
 8017ccc:	e7ee      	b.n	8017cac <__sfp+0x60>
 8017cce:	bf00      	nop
 8017cd0:	0801e464 	.word	0x0801e464
 8017cd4:	ffff0001 	.word	0xffff0001

08017cd8 <_fwalk_reent>:
 8017cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cdc:	4606      	mov	r6, r0
 8017cde:	4688      	mov	r8, r1
 8017ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017ce4:	2700      	movs	r7, #0
 8017ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017cea:	f1b9 0901 	subs.w	r9, r9, #1
 8017cee:	d505      	bpl.n	8017cfc <_fwalk_reent+0x24>
 8017cf0:	6824      	ldr	r4, [r4, #0]
 8017cf2:	2c00      	cmp	r4, #0
 8017cf4:	d1f7      	bne.n	8017ce6 <_fwalk_reent+0xe>
 8017cf6:	4638      	mov	r0, r7
 8017cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cfc:	89ab      	ldrh	r3, [r5, #12]
 8017cfe:	2b01      	cmp	r3, #1
 8017d00:	d907      	bls.n	8017d12 <_fwalk_reent+0x3a>
 8017d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d06:	3301      	adds	r3, #1
 8017d08:	d003      	beq.n	8017d12 <_fwalk_reent+0x3a>
 8017d0a:	4629      	mov	r1, r5
 8017d0c:	4630      	mov	r0, r6
 8017d0e:	47c0      	blx	r8
 8017d10:	4307      	orrs	r7, r0
 8017d12:	3568      	adds	r5, #104	; 0x68
 8017d14:	e7e9      	b.n	8017cea <_fwalk_reent+0x12>
	...

08017d18 <__libc_init_array>:
 8017d18:	b570      	push	{r4, r5, r6, lr}
 8017d1a:	4d0d      	ldr	r5, [pc, #52]	; (8017d50 <__libc_init_array+0x38>)
 8017d1c:	4c0d      	ldr	r4, [pc, #52]	; (8017d54 <__libc_init_array+0x3c>)
 8017d1e:	1b64      	subs	r4, r4, r5
 8017d20:	10a4      	asrs	r4, r4, #2
 8017d22:	2600      	movs	r6, #0
 8017d24:	42a6      	cmp	r6, r4
 8017d26:	d109      	bne.n	8017d3c <__libc_init_array+0x24>
 8017d28:	4d0b      	ldr	r5, [pc, #44]	; (8017d58 <__libc_init_array+0x40>)
 8017d2a:	4c0c      	ldr	r4, [pc, #48]	; (8017d5c <__libc_init_array+0x44>)
 8017d2c:	f003 f8f4 	bl	801af18 <_init>
 8017d30:	1b64      	subs	r4, r4, r5
 8017d32:	10a4      	asrs	r4, r4, #2
 8017d34:	2600      	movs	r6, #0
 8017d36:	42a6      	cmp	r6, r4
 8017d38:	d105      	bne.n	8017d46 <__libc_init_array+0x2e>
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}
 8017d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d40:	4798      	blx	r3
 8017d42:	3601      	adds	r6, #1
 8017d44:	e7ee      	b.n	8017d24 <__libc_init_array+0xc>
 8017d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d4a:	4798      	blx	r3
 8017d4c:	3601      	adds	r6, #1
 8017d4e:	e7f2      	b.n	8017d36 <__libc_init_array+0x1e>
 8017d50:	0801e7f0 	.word	0x0801e7f0
 8017d54:	0801e7f0 	.word	0x0801e7f0
 8017d58:	0801e7f0 	.word	0x0801e7f0
 8017d5c:	0801e7f4 	.word	0x0801e7f4

08017d60 <__retarget_lock_init_recursive>:
 8017d60:	4770      	bx	lr

08017d62 <__retarget_lock_acquire_recursive>:
 8017d62:	4770      	bx	lr

08017d64 <__retarget_lock_release_recursive>:
 8017d64:	4770      	bx	lr

08017d66 <memcmp>:
 8017d66:	b510      	push	{r4, lr}
 8017d68:	3901      	subs	r1, #1
 8017d6a:	4402      	add	r2, r0
 8017d6c:	4290      	cmp	r0, r2
 8017d6e:	d101      	bne.n	8017d74 <memcmp+0xe>
 8017d70:	2000      	movs	r0, #0
 8017d72:	e005      	b.n	8017d80 <memcmp+0x1a>
 8017d74:	7803      	ldrb	r3, [r0, #0]
 8017d76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d7a:	42a3      	cmp	r3, r4
 8017d7c:	d001      	beq.n	8017d82 <memcmp+0x1c>
 8017d7e:	1b18      	subs	r0, r3, r4
 8017d80:	bd10      	pop	{r4, pc}
 8017d82:	3001      	adds	r0, #1
 8017d84:	e7f2      	b.n	8017d6c <memcmp+0x6>

08017d86 <memcpy>:
 8017d86:	440a      	add	r2, r1
 8017d88:	4291      	cmp	r1, r2
 8017d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017d8e:	d100      	bne.n	8017d92 <memcpy+0xc>
 8017d90:	4770      	bx	lr
 8017d92:	b510      	push	{r4, lr}
 8017d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d9c:	4291      	cmp	r1, r2
 8017d9e:	d1f9      	bne.n	8017d94 <memcpy+0xe>
 8017da0:	bd10      	pop	{r4, pc}

08017da2 <memmove>:
 8017da2:	4288      	cmp	r0, r1
 8017da4:	b510      	push	{r4, lr}
 8017da6:	eb01 0402 	add.w	r4, r1, r2
 8017daa:	d902      	bls.n	8017db2 <memmove+0x10>
 8017dac:	4284      	cmp	r4, r0
 8017dae:	4623      	mov	r3, r4
 8017db0:	d807      	bhi.n	8017dc2 <memmove+0x20>
 8017db2:	1e43      	subs	r3, r0, #1
 8017db4:	42a1      	cmp	r1, r4
 8017db6:	d008      	beq.n	8017dca <memmove+0x28>
 8017db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017dbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017dc0:	e7f8      	b.n	8017db4 <memmove+0x12>
 8017dc2:	4402      	add	r2, r0
 8017dc4:	4601      	mov	r1, r0
 8017dc6:	428a      	cmp	r2, r1
 8017dc8:	d100      	bne.n	8017dcc <memmove+0x2a>
 8017dca:	bd10      	pop	{r4, pc}
 8017dcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017dd4:	e7f7      	b.n	8017dc6 <memmove+0x24>

08017dd6 <memset>:
 8017dd6:	4402      	add	r2, r0
 8017dd8:	4603      	mov	r3, r0
 8017dda:	4293      	cmp	r3, r2
 8017ddc:	d100      	bne.n	8017de0 <memset+0xa>
 8017dde:	4770      	bx	lr
 8017de0:	f803 1b01 	strb.w	r1, [r3], #1
 8017de4:	e7f9      	b.n	8017dda <memset+0x4>
	...

08017de8 <sbrk_aligned>:
 8017de8:	b570      	push	{r4, r5, r6, lr}
 8017dea:	4e0e      	ldr	r6, [pc, #56]	; (8017e24 <sbrk_aligned+0x3c>)
 8017dec:	460c      	mov	r4, r1
 8017dee:	6831      	ldr	r1, [r6, #0]
 8017df0:	4605      	mov	r5, r0
 8017df2:	b911      	cbnz	r1, 8017dfa <sbrk_aligned+0x12>
 8017df4:	f000 f94c 	bl	8018090 <_sbrk_r>
 8017df8:	6030      	str	r0, [r6, #0]
 8017dfa:	4621      	mov	r1, r4
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	f000 f947 	bl	8018090 <_sbrk_r>
 8017e02:	1c43      	adds	r3, r0, #1
 8017e04:	d00a      	beq.n	8017e1c <sbrk_aligned+0x34>
 8017e06:	1cc4      	adds	r4, r0, #3
 8017e08:	f024 0403 	bic.w	r4, r4, #3
 8017e0c:	42a0      	cmp	r0, r4
 8017e0e:	d007      	beq.n	8017e20 <sbrk_aligned+0x38>
 8017e10:	1a21      	subs	r1, r4, r0
 8017e12:	4628      	mov	r0, r5
 8017e14:	f000 f93c 	bl	8018090 <_sbrk_r>
 8017e18:	3001      	adds	r0, #1
 8017e1a:	d101      	bne.n	8017e20 <sbrk_aligned+0x38>
 8017e1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017e20:	4620      	mov	r0, r4
 8017e22:	bd70      	pop	{r4, r5, r6, pc}
 8017e24:	20011d18 	.word	0x20011d18

08017e28 <_malloc_r>:
 8017e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e2c:	1ccd      	adds	r5, r1, #3
 8017e2e:	f025 0503 	bic.w	r5, r5, #3
 8017e32:	3508      	adds	r5, #8
 8017e34:	2d0c      	cmp	r5, #12
 8017e36:	bf38      	it	cc
 8017e38:	250c      	movcc	r5, #12
 8017e3a:	2d00      	cmp	r5, #0
 8017e3c:	4607      	mov	r7, r0
 8017e3e:	db01      	blt.n	8017e44 <_malloc_r+0x1c>
 8017e40:	42a9      	cmp	r1, r5
 8017e42:	d905      	bls.n	8017e50 <_malloc_r+0x28>
 8017e44:	230c      	movs	r3, #12
 8017e46:	603b      	str	r3, [r7, #0]
 8017e48:	2600      	movs	r6, #0
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e50:	4e2e      	ldr	r6, [pc, #184]	; (8017f0c <_malloc_r+0xe4>)
 8017e52:	f001 fcf3 	bl	801983c <__malloc_lock>
 8017e56:	6833      	ldr	r3, [r6, #0]
 8017e58:	461c      	mov	r4, r3
 8017e5a:	bb34      	cbnz	r4, 8017eaa <_malloc_r+0x82>
 8017e5c:	4629      	mov	r1, r5
 8017e5e:	4638      	mov	r0, r7
 8017e60:	f7ff ffc2 	bl	8017de8 <sbrk_aligned>
 8017e64:	1c43      	adds	r3, r0, #1
 8017e66:	4604      	mov	r4, r0
 8017e68:	d14d      	bne.n	8017f06 <_malloc_r+0xde>
 8017e6a:	6834      	ldr	r4, [r6, #0]
 8017e6c:	4626      	mov	r6, r4
 8017e6e:	2e00      	cmp	r6, #0
 8017e70:	d140      	bne.n	8017ef4 <_malloc_r+0xcc>
 8017e72:	6823      	ldr	r3, [r4, #0]
 8017e74:	4631      	mov	r1, r6
 8017e76:	4638      	mov	r0, r7
 8017e78:	eb04 0803 	add.w	r8, r4, r3
 8017e7c:	f000 f908 	bl	8018090 <_sbrk_r>
 8017e80:	4580      	cmp	r8, r0
 8017e82:	d13a      	bne.n	8017efa <_malloc_r+0xd2>
 8017e84:	6821      	ldr	r1, [r4, #0]
 8017e86:	3503      	adds	r5, #3
 8017e88:	1a6d      	subs	r5, r5, r1
 8017e8a:	f025 0503 	bic.w	r5, r5, #3
 8017e8e:	3508      	adds	r5, #8
 8017e90:	2d0c      	cmp	r5, #12
 8017e92:	bf38      	it	cc
 8017e94:	250c      	movcc	r5, #12
 8017e96:	4629      	mov	r1, r5
 8017e98:	4638      	mov	r0, r7
 8017e9a:	f7ff ffa5 	bl	8017de8 <sbrk_aligned>
 8017e9e:	3001      	adds	r0, #1
 8017ea0:	d02b      	beq.n	8017efa <_malloc_r+0xd2>
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	442b      	add	r3, r5
 8017ea6:	6023      	str	r3, [r4, #0]
 8017ea8:	e00e      	b.n	8017ec8 <_malloc_r+0xa0>
 8017eaa:	6822      	ldr	r2, [r4, #0]
 8017eac:	1b52      	subs	r2, r2, r5
 8017eae:	d41e      	bmi.n	8017eee <_malloc_r+0xc6>
 8017eb0:	2a0b      	cmp	r2, #11
 8017eb2:	d916      	bls.n	8017ee2 <_malloc_r+0xba>
 8017eb4:	1961      	adds	r1, r4, r5
 8017eb6:	42a3      	cmp	r3, r4
 8017eb8:	6025      	str	r5, [r4, #0]
 8017eba:	bf18      	it	ne
 8017ebc:	6059      	strne	r1, [r3, #4]
 8017ebe:	6863      	ldr	r3, [r4, #4]
 8017ec0:	bf08      	it	eq
 8017ec2:	6031      	streq	r1, [r6, #0]
 8017ec4:	5162      	str	r2, [r4, r5]
 8017ec6:	604b      	str	r3, [r1, #4]
 8017ec8:	4638      	mov	r0, r7
 8017eca:	f104 060b 	add.w	r6, r4, #11
 8017ece:	f001 fcbb 	bl	8019848 <__malloc_unlock>
 8017ed2:	f026 0607 	bic.w	r6, r6, #7
 8017ed6:	1d23      	adds	r3, r4, #4
 8017ed8:	1af2      	subs	r2, r6, r3
 8017eda:	d0b6      	beq.n	8017e4a <_malloc_r+0x22>
 8017edc:	1b9b      	subs	r3, r3, r6
 8017ede:	50a3      	str	r3, [r4, r2]
 8017ee0:	e7b3      	b.n	8017e4a <_malloc_r+0x22>
 8017ee2:	6862      	ldr	r2, [r4, #4]
 8017ee4:	42a3      	cmp	r3, r4
 8017ee6:	bf0c      	ite	eq
 8017ee8:	6032      	streq	r2, [r6, #0]
 8017eea:	605a      	strne	r2, [r3, #4]
 8017eec:	e7ec      	b.n	8017ec8 <_malloc_r+0xa0>
 8017eee:	4623      	mov	r3, r4
 8017ef0:	6864      	ldr	r4, [r4, #4]
 8017ef2:	e7b2      	b.n	8017e5a <_malloc_r+0x32>
 8017ef4:	4634      	mov	r4, r6
 8017ef6:	6876      	ldr	r6, [r6, #4]
 8017ef8:	e7b9      	b.n	8017e6e <_malloc_r+0x46>
 8017efa:	230c      	movs	r3, #12
 8017efc:	603b      	str	r3, [r7, #0]
 8017efe:	4638      	mov	r0, r7
 8017f00:	f001 fca2 	bl	8019848 <__malloc_unlock>
 8017f04:	e7a1      	b.n	8017e4a <_malloc_r+0x22>
 8017f06:	6025      	str	r5, [r4, #0]
 8017f08:	e7de      	b.n	8017ec8 <_malloc_r+0xa0>
 8017f0a:	bf00      	nop
 8017f0c:	20011d14 	.word	0x20011d14

08017f10 <iprintf>:
 8017f10:	b40f      	push	{r0, r1, r2, r3}
 8017f12:	4b0a      	ldr	r3, [pc, #40]	; (8017f3c <iprintf+0x2c>)
 8017f14:	b513      	push	{r0, r1, r4, lr}
 8017f16:	681c      	ldr	r4, [r3, #0]
 8017f18:	b124      	cbz	r4, 8017f24 <iprintf+0x14>
 8017f1a:	69a3      	ldr	r3, [r4, #24]
 8017f1c:	b913      	cbnz	r3, 8017f24 <iprintf+0x14>
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f7ff fe5c 	bl	8017bdc <__sinit>
 8017f24:	ab05      	add	r3, sp, #20
 8017f26:	9a04      	ldr	r2, [sp, #16]
 8017f28:	68a1      	ldr	r1, [r4, #8]
 8017f2a:	9301      	str	r3, [sp, #4]
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f002 fb3b 	bl	801a5a8 <_vfiprintf_r>
 8017f32:	b002      	add	sp, #8
 8017f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f38:	b004      	add	sp, #16
 8017f3a:	4770      	bx	lr
 8017f3c:	2000002c 	.word	0x2000002c

08017f40 <rand>:
 8017f40:	4b16      	ldr	r3, [pc, #88]	; (8017f9c <rand+0x5c>)
 8017f42:	b510      	push	{r4, lr}
 8017f44:	681c      	ldr	r4, [r3, #0]
 8017f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017f48:	b9b3      	cbnz	r3, 8017f78 <rand+0x38>
 8017f4a:	2018      	movs	r0, #24
 8017f4c:	f001 fc5c 	bl	8019808 <malloc>
 8017f50:	63a0      	str	r0, [r4, #56]	; 0x38
 8017f52:	b928      	cbnz	r0, 8017f60 <rand+0x20>
 8017f54:	4602      	mov	r2, r0
 8017f56:	4b12      	ldr	r3, [pc, #72]	; (8017fa0 <rand+0x60>)
 8017f58:	4812      	ldr	r0, [pc, #72]	; (8017fa4 <rand+0x64>)
 8017f5a:	214e      	movs	r1, #78	; 0x4e
 8017f5c:	f000 ffd0 	bl	8018f00 <__assert_func>
 8017f60:	4a11      	ldr	r2, [pc, #68]	; (8017fa8 <rand+0x68>)
 8017f62:	4b12      	ldr	r3, [pc, #72]	; (8017fac <rand+0x6c>)
 8017f64:	e9c0 2300 	strd	r2, r3, [r0]
 8017f68:	4b11      	ldr	r3, [pc, #68]	; (8017fb0 <rand+0x70>)
 8017f6a:	6083      	str	r3, [r0, #8]
 8017f6c:	230b      	movs	r3, #11
 8017f6e:	8183      	strh	r3, [r0, #12]
 8017f70:	2201      	movs	r2, #1
 8017f72:	2300      	movs	r3, #0
 8017f74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017f78:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017f7a:	4a0e      	ldr	r2, [pc, #56]	; (8017fb4 <rand+0x74>)
 8017f7c:	6920      	ldr	r0, [r4, #16]
 8017f7e:	6963      	ldr	r3, [r4, #20]
 8017f80:	490d      	ldr	r1, [pc, #52]	; (8017fb8 <rand+0x78>)
 8017f82:	4342      	muls	r2, r0
 8017f84:	fb01 2203 	mla	r2, r1, r3, r2
 8017f88:	fba0 0101 	umull	r0, r1, r0, r1
 8017f8c:	1c43      	adds	r3, r0, #1
 8017f8e:	eb42 0001 	adc.w	r0, r2, r1
 8017f92:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017f96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017f9a:	bd10      	pop	{r4, pc}
 8017f9c:	2000002c 	.word	0x2000002c
 8017fa0:	0801e468 	.word	0x0801e468
 8017fa4:	0801e47f 	.word	0x0801e47f
 8017fa8:	abcd330e 	.word	0xabcd330e
 8017fac:	e66d1234 	.word	0xe66d1234
 8017fb0:	0005deec 	.word	0x0005deec
 8017fb4:	5851f42d 	.word	0x5851f42d
 8017fb8:	4c957f2d 	.word	0x4c957f2d

08017fbc <cleanup_glue>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	460c      	mov	r4, r1
 8017fc0:	6809      	ldr	r1, [r1, #0]
 8017fc2:	4605      	mov	r5, r0
 8017fc4:	b109      	cbz	r1, 8017fca <cleanup_glue+0xe>
 8017fc6:	f7ff fff9 	bl	8017fbc <cleanup_glue>
 8017fca:	4621      	mov	r1, r4
 8017fcc:	4628      	mov	r0, r5
 8017fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fd2:	f002 b917 	b.w	801a204 <_free_r>
	...

08017fd8 <_reclaim_reent>:
 8017fd8:	4b2c      	ldr	r3, [pc, #176]	; (801808c <_reclaim_reent+0xb4>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	4283      	cmp	r3, r0
 8017fde:	b570      	push	{r4, r5, r6, lr}
 8017fe0:	4604      	mov	r4, r0
 8017fe2:	d051      	beq.n	8018088 <_reclaim_reent+0xb0>
 8017fe4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017fe6:	b143      	cbz	r3, 8017ffa <_reclaim_reent+0x22>
 8017fe8:	68db      	ldr	r3, [r3, #12]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d14a      	bne.n	8018084 <_reclaim_reent+0xac>
 8017fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ff0:	6819      	ldr	r1, [r3, #0]
 8017ff2:	b111      	cbz	r1, 8017ffa <_reclaim_reent+0x22>
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f002 f905 	bl	801a204 <_free_r>
 8017ffa:	6961      	ldr	r1, [r4, #20]
 8017ffc:	b111      	cbz	r1, 8018004 <_reclaim_reent+0x2c>
 8017ffe:	4620      	mov	r0, r4
 8018000:	f002 f900 	bl	801a204 <_free_r>
 8018004:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018006:	b111      	cbz	r1, 801800e <_reclaim_reent+0x36>
 8018008:	4620      	mov	r0, r4
 801800a:	f002 f8fb 	bl	801a204 <_free_r>
 801800e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018010:	b111      	cbz	r1, 8018018 <_reclaim_reent+0x40>
 8018012:	4620      	mov	r0, r4
 8018014:	f002 f8f6 	bl	801a204 <_free_r>
 8018018:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801801a:	b111      	cbz	r1, 8018022 <_reclaim_reent+0x4a>
 801801c:	4620      	mov	r0, r4
 801801e:	f002 f8f1 	bl	801a204 <_free_r>
 8018022:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018024:	b111      	cbz	r1, 801802c <_reclaim_reent+0x54>
 8018026:	4620      	mov	r0, r4
 8018028:	f002 f8ec 	bl	801a204 <_free_r>
 801802c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801802e:	b111      	cbz	r1, 8018036 <_reclaim_reent+0x5e>
 8018030:	4620      	mov	r0, r4
 8018032:	f002 f8e7 	bl	801a204 <_free_r>
 8018036:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018038:	b111      	cbz	r1, 8018040 <_reclaim_reent+0x68>
 801803a:	4620      	mov	r0, r4
 801803c:	f002 f8e2 	bl	801a204 <_free_r>
 8018040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018042:	b111      	cbz	r1, 801804a <_reclaim_reent+0x72>
 8018044:	4620      	mov	r0, r4
 8018046:	f002 f8dd 	bl	801a204 <_free_r>
 801804a:	69a3      	ldr	r3, [r4, #24]
 801804c:	b1e3      	cbz	r3, 8018088 <_reclaim_reent+0xb0>
 801804e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018050:	4620      	mov	r0, r4
 8018052:	4798      	blx	r3
 8018054:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018056:	b1b9      	cbz	r1, 8018088 <_reclaim_reent+0xb0>
 8018058:	4620      	mov	r0, r4
 801805a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801805e:	f7ff bfad 	b.w	8017fbc <cleanup_glue>
 8018062:	5949      	ldr	r1, [r1, r5]
 8018064:	b941      	cbnz	r1, 8018078 <_reclaim_reent+0xa0>
 8018066:	3504      	adds	r5, #4
 8018068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801806a:	2d80      	cmp	r5, #128	; 0x80
 801806c:	68d9      	ldr	r1, [r3, #12]
 801806e:	d1f8      	bne.n	8018062 <_reclaim_reent+0x8a>
 8018070:	4620      	mov	r0, r4
 8018072:	f002 f8c7 	bl	801a204 <_free_r>
 8018076:	e7ba      	b.n	8017fee <_reclaim_reent+0x16>
 8018078:	680e      	ldr	r6, [r1, #0]
 801807a:	4620      	mov	r0, r4
 801807c:	f002 f8c2 	bl	801a204 <_free_r>
 8018080:	4631      	mov	r1, r6
 8018082:	e7ef      	b.n	8018064 <_reclaim_reent+0x8c>
 8018084:	2500      	movs	r5, #0
 8018086:	e7ef      	b.n	8018068 <_reclaim_reent+0x90>
 8018088:	bd70      	pop	{r4, r5, r6, pc}
 801808a:	bf00      	nop
 801808c:	2000002c 	.word	0x2000002c

08018090 <_sbrk_r>:
 8018090:	b538      	push	{r3, r4, r5, lr}
 8018092:	4d06      	ldr	r5, [pc, #24]	; (80180ac <_sbrk_r+0x1c>)
 8018094:	2300      	movs	r3, #0
 8018096:	4604      	mov	r4, r0
 8018098:	4608      	mov	r0, r1
 801809a:	602b      	str	r3, [r5, #0]
 801809c:	f7e9 fe90 	bl	8001dc0 <_sbrk>
 80180a0:	1c43      	adds	r3, r0, #1
 80180a2:	d102      	bne.n	80180aa <_sbrk_r+0x1a>
 80180a4:	682b      	ldr	r3, [r5, #0]
 80180a6:	b103      	cbz	r3, 80180aa <_sbrk_r+0x1a>
 80180a8:	6023      	str	r3, [r4, #0]
 80180aa:	bd38      	pop	{r3, r4, r5, pc}
 80180ac:	20011d1c 	.word	0x20011d1c

080180b0 <siprintf>:
 80180b0:	b40e      	push	{r1, r2, r3}
 80180b2:	b500      	push	{lr}
 80180b4:	b09c      	sub	sp, #112	; 0x70
 80180b6:	ab1d      	add	r3, sp, #116	; 0x74
 80180b8:	9002      	str	r0, [sp, #8]
 80180ba:	9006      	str	r0, [sp, #24]
 80180bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180c0:	4809      	ldr	r0, [pc, #36]	; (80180e8 <siprintf+0x38>)
 80180c2:	9107      	str	r1, [sp, #28]
 80180c4:	9104      	str	r1, [sp, #16]
 80180c6:	4909      	ldr	r1, [pc, #36]	; (80180ec <siprintf+0x3c>)
 80180c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80180cc:	9105      	str	r1, [sp, #20]
 80180ce:	6800      	ldr	r0, [r0, #0]
 80180d0:	9301      	str	r3, [sp, #4]
 80180d2:	a902      	add	r1, sp, #8
 80180d4:	f002 f93e 	bl	801a354 <_svfiprintf_r>
 80180d8:	9b02      	ldr	r3, [sp, #8]
 80180da:	2200      	movs	r2, #0
 80180dc:	701a      	strb	r2, [r3, #0]
 80180de:	b01c      	add	sp, #112	; 0x70
 80180e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80180e4:	b003      	add	sp, #12
 80180e6:	4770      	bx	lr
 80180e8:	2000002c 	.word	0x2000002c
 80180ec:	ffff0208 	.word	0xffff0208

080180f0 <__sread>:
 80180f0:	b510      	push	{r4, lr}
 80180f2:	460c      	mov	r4, r1
 80180f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180f8:	f002 fd1a 	bl	801ab30 <_read_r>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	bfab      	itete	ge
 8018100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018102:	89a3      	ldrhlt	r3, [r4, #12]
 8018104:	181b      	addge	r3, r3, r0
 8018106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801810a:	bfac      	ite	ge
 801810c:	6563      	strge	r3, [r4, #84]	; 0x54
 801810e:	81a3      	strhlt	r3, [r4, #12]
 8018110:	bd10      	pop	{r4, pc}

08018112 <__swrite>:
 8018112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018116:	461f      	mov	r7, r3
 8018118:	898b      	ldrh	r3, [r1, #12]
 801811a:	05db      	lsls	r3, r3, #23
 801811c:	4605      	mov	r5, r0
 801811e:	460c      	mov	r4, r1
 8018120:	4616      	mov	r6, r2
 8018122:	d505      	bpl.n	8018130 <__swrite+0x1e>
 8018124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018128:	2302      	movs	r3, #2
 801812a:	2200      	movs	r2, #0
 801812c:	f001 fb5a 	bl	80197e4 <_lseek_r>
 8018130:	89a3      	ldrh	r3, [r4, #12]
 8018132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801813a:	81a3      	strh	r3, [r4, #12]
 801813c:	4632      	mov	r2, r6
 801813e:	463b      	mov	r3, r7
 8018140:	4628      	mov	r0, r5
 8018142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018146:	f000 bec9 	b.w	8018edc <_write_r>

0801814a <__sseek>:
 801814a:	b510      	push	{r4, lr}
 801814c:	460c      	mov	r4, r1
 801814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018152:	f001 fb47 	bl	80197e4 <_lseek_r>
 8018156:	1c43      	adds	r3, r0, #1
 8018158:	89a3      	ldrh	r3, [r4, #12]
 801815a:	bf15      	itete	ne
 801815c:	6560      	strne	r0, [r4, #84]	; 0x54
 801815e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018166:	81a3      	strheq	r3, [r4, #12]
 8018168:	bf18      	it	ne
 801816a:	81a3      	strhne	r3, [r4, #12]
 801816c:	bd10      	pop	{r4, pc}

0801816e <__sclose>:
 801816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018172:	f000 bee3 	b.w	8018f3c <_close_r>

08018176 <strncmp>:
 8018176:	b510      	push	{r4, lr}
 8018178:	b17a      	cbz	r2, 801819a <strncmp+0x24>
 801817a:	4603      	mov	r3, r0
 801817c:	3901      	subs	r1, #1
 801817e:	1884      	adds	r4, r0, r2
 8018180:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018184:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018188:	4290      	cmp	r0, r2
 801818a:	d101      	bne.n	8018190 <strncmp+0x1a>
 801818c:	42a3      	cmp	r3, r4
 801818e:	d101      	bne.n	8018194 <strncmp+0x1e>
 8018190:	1a80      	subs	r0, r0, r2
 8018192:	bd10      	pop	{r4, pc}
 8018194:	2800      	cmp	r0, #0
 8018196:	d1f3      	bne.n	8018180 <strncmp+0xa>
 8018198:	e7fa      	b.n	8018190 <strncmp+0x1a>
 801819a:	4610      	mov	r0, r2
 801819c:	e7f9      	b.n	8018192 <strncmp+0x1c>

0801819e <strncpy>:
 801819e:	b510      	push	{r4, lr}
 80181a0:	3901      	subs	r1, #1
 80181a2:	4603      	mov	r3, r0
 80181a4:	b132      	cbz	r2, 80181b4 <strncpy+0x16>
 80181a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80181aa:	f803 4b01 	strb.w	r4, [r3], #1
 80181ae:	3a01      	subs	r2, #1
 80181b0:	2c00      	cmp	r4, #0
 80181b2:	d1f7      	bne.n	80181a4 <strncpy+0x6>
 80181b4:	441a      	add	r2, r3
 80181b6:	2100      	movs	r1, #0
 80181b8:	4293      	cmp	r3, r2
 80181ba:	d100      	bne.n	80181be <strncpy+0x20>
 80181bc:	bd10      	pop	{r4, pc}
 80181be:	f803 1b01 	strb.w	r1, [r3], #1
 80181c2:	e7f9      	b.n	80181b8 <strncpy+0x1a>

080181c4 <sulp>:
 80181c4:	b570      	push	{r4, r5, r6, lr}
 80181c6:	4604      	mov	r4, r0
 80181c8:	460d      	mov	r5, r1
 80181ca:	ec45 4b10 	vmov	d0, r4, r5
 80181ce:	4616      	mov	r6, r2
 80181d0:	f001 feb2 	bl	8019f38 <__ulp>
 80181d4:	ec51 0b10 	vmov	r0, r1, d0
 80181d8:	b17e      	cbz	r6, 80181fa <sulp+0x36>
 80181da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80181de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	dd09      	ble.n	80181fa <sulp+0x36>
 80181e6:	051b      	lsls	r3, r3, #20
 80181e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80181ec:	2400      	movs	r4, #0
 80181ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80181f2:	4622      	mov	r2, r4
 80181f4:	462b      	mov	r3, r5
 80181f6:	f7e8 fa1f 	bl	8000638 <__aeabi_dmul>
 80181fa:	bd70      	pop	{r4, r5, r6, pc}
 80181fc:	0000      	movs	r0, r0
	...

08018200 <_strtod_l>:
 8018200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018204:	ed2d 8b02 	vpush	{d8}
 8018208:	b09d      	sub	sp, #116	; 0x74
 801820a:	461f      	mov	r7, r3
 801820c:	2300      	movs	r3, #0
 801820e:	9318      	str	r3, [sp, #96]	; 0x60
 8018210:	4ba2      	ldr	r3, [pc, #648]	; (801849c <_strtod_l+0x29c>)
 8018212:	9213      	str	r2, [sp, #76]	; 0x4c
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	9305      	str	r3, [sp, #20]
 8018218:	4604      	mov	r4, r0
 801821a:	4618      	mov	r0, r3
 801821c:	4688      	mov	r8, r1
 801821e:	f7e7 fff7 	bl	8000210 <strlen>
 8018222:	f04f 0a00 	mov.w	sl, #0
 8018226:	4605      	mov	r5, r0
 8018228:	f04f 0b00 	mov.w	fp, #0
 801822c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8018230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018232:	781a      	ldrb	r2, [r3, #0]
 8018234:	2a2b      	cmp	r2, #43	; 0x2b
 8018236:	d04e      	beq.n	80182d6 <_strtod_l+0xd6>
 8018238:	d83b      	bhi.n	80182b2 <_strtod_l+0xb2>
 801823a:	2a0d      	cmp	r2, #13
 801823c:	d834      	bhi.n	80182a8 <_strtod_l+0xa8>
 801823e:	2a08      	cmp	r2, #8
 8018240:	d834      	bhi.n	80182ac <_strtod_l+0xac>
 8018242:	2a00      	cmp	r2, #0
 8018244:	d03e      	beq.n	80182c4 <_strtod_l+0xc4>
 8018246:	2300      	movs	r3, #0
 8018248:	930a      	str	r3, [sp, #40]	; 0x28
 801824a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801824c:	7833      	ldrb	r3, [r6, #0]
 801824e:	2b30      	cmp	r3, #48	; 0x30
 8018250:	f040 80b0 	bne.w	80183b4 <_strtod_l+0x1b4>
 8018254:	7873      	ldrb	r3, [r6, #1]
 8018256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801825a:	2b58      	cmp	r3, #88	; 0x58
 801825c:	d168      	bne.n	8018330 <_strtod_l+0x130>
 801825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018260:	9301      	str	r3, [sp, #4]
 8018262:	ab18      	add	r3, sp, #96	; 0x60
 8018264:	9702      	str	r7, [sp, #8]
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	4a8d      	ldr	r2, [pc, #564]	; (80184a0 <_strtod_l+0x2a0>)
 801826a:	ab19      	add	r3, sp, #100	; 0x64
 801826c:	a917      	add	r1, sp, #92	; 0x5c
 801826e:	4620      	mov	r0, r4
 8018270:	f000 ffb0 	bl	80191d4 <__gethex>
 8018274:	f010 0707 	ands.w	r7, r0, #7
 8018278:	4605      	mov	r5, r0
 801827a:	d005      	beq.n	8018288 <_strtod_l+0x88>
 801827c:	2f06      	cmp	r7, #6
 801827e:	d12c      	bne.n	80182da <_strtod_l+0xda>
 8018280:	3601      	adds	r6, #1
 8018282:	2300      	movs	r3, #0
 8018284:	9617      	str	r6, [sp, #92]	; 0x5c
 8018286:	930a      	str	r3, [sp, #40]	; 0x28
 8018288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801828a:	2b00      	cmp	r3, #0
 801828c:	f040 8590 	bne.w	8018db0 <_strtod_l+0xbb0>
 8018290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018292:	b1eb      	cbz	r3, 80182d0 <_strtod_l+0xd0>
 8018294:	4652      	mov	r2, sl
 8018296:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801829a:	ec43 2b10 	vmov	d0, r2, r3
 801829e:	b01d      	add	sp, #116	; 0x74
 80182a0:	ecbd 8b02 	vpop	{d8}
 80182a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a8:	2a20      	cmp	r2, #32
 80182aa:	d1cc      	bne.n	8018246 <_strtod_l+0x46>
 80182ac:	3301      	adds	r3, #1
 80182ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80182b0:	e7be      	b.n	8018230 <_strtod_l+0x30>
 80182b2:	2a2d      	cmp	r2, #45	; 0x2d
 80182b4:	d1c7      	bne.n	8018246 <_strtod_l+0x46>
 80182b6:	2201      	movs	r2, #1
 80182b8:	920a      	str	r2, [sp, #40]	; 0x28
 80182ba:	1c5a      	adds	r2, r3, #1
 80182bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80182be:	785b      	ldrb	r3, [r3, #1]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d1c2      	bne.n	801824a <_strtod_l+0x4a>
 80182c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80182c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	f040 856e 	bne.w	8018dac <_strtod_l+0xbac>
 80182d0:	4652      	mov	r2, sl
 80182d2:	465b      	mov	r3, fp
 80182d4:	e7e1      	b.n	801829a <_strtod_l+0x9a>
 80182d6:	2200      	movs	r2, #0
 80182d8:	e7ee      	b.n	80182b8 <_strtod_l+0xb8>
 80182da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80182dc:	b13a      	cbz	r2, 80182ee <_strtod_l+0xee>
 80182de:	2135      	movs	r1, #53	; 0x35
 80182e0:	a81a      	add	r0, sp, #104	; 0x68
 80182e2:	f001 ff34 	bl	801a14e <__copybits>
 80182e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80182e8:	4620      	mov	r0, r4
 80182ea:	f001 faf3 	bl	80198d4 <_Bfree>
 80182ee:	3f01      	subs	r7, #1
 80182f0:	2f04      	cmp	r7, #4
 80182f2:	d806      	bhi.n	8018302 <_strtod_l+0x102>
 80182f4:	e8df f007 	tbb	[pc, r7]
 80182f8:	1714030a 	.word	0x1714030a
 80182fc:	0a          	.byte	0x0a
 80182fd:	00          	.byte	0x00
 80182fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8018302:	0728      	lsls	r0, r5, #28
 8018304:	d5c0      	bpl.n	8018288 <_strtod_l+0x88>
 8018306:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801830a:	e7bd      	b.n	8018288 <_strtod_l+0x88>
 801830c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8018310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018312:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018316:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801831a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801831e:	e7f0      	b.n	8018302 <_strtod_l+0x102>
 8018320:	f8df b180 	ldr.w	fp, [pc, #384]	; 80184a4 <_strtod_l+0x2a4>
 8018324:	e7ed      	b.n	8018302 <_strtod_l+0x102>
 8018326:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801832a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801832e:	e7e8      	b.n	8018302 <_strtod_l+0x102>
 8018330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018332:	1c5a      	adds	r2, r3, #1
 8018334:	9217      	str	r2, [sp, #92]	; 0x5c
 8018336:	785b      	ldrb	r3, [r3, #1]
 8018338:	2b30      	cmp	r3, #48	; 0x30
 801833a:	d0f9      	beq.n	8018330 <_strtod_l+0x130>
 801833c:	2b00      	cmp	r3, #0
 801833e:	d0a3      	beq.n	8018288 <_strtod_l+0x88>
 8018340:	2301      	movs	r3, #1
 8018342:	f04f 0900 	mov.w	r9, #0
 8018346:	9304      	str	r3, [sp, #16]
 8018348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801834a:	9308      	str	r3, [sp, #32]
 801834c:	f8cd 901c 	str.w	r9, [sp, #28]
 8018350:	464f      	mov	r7, r9
 8018352:	220a      	movs	r2, #10
 8018354:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018356:	7806      	ldrb	r6, [r0, #0]
 8018358:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801835c:	b2d9      	uxtb	r1, r3
 801835e:	2909      	cmp	r1, #9
 8018360:	d92a      	bls.n	80183b8 <_strtod_l+0x1b8>
 8018362:	9905      	ldr	r1, [sp, #20]
 8018364:	462a      	mov	r2, r5
 8018366:	f7ff ff06 	bl	8018176 <strncmp>
 801836a:	b398      	cbz	r0, 80183d4 <_strtod_l+0x1d4>
 801836c:	2000      	movs	r0, #0
 801836e:	4632      	mov	r2, r6
 8018370:	463d      	mov	r5, r7
 8018372:	9005      	str	r0, [sp, #20]
 8018374:	4603      	mov	r3, r0
 8018376:	2a65      	cmp	r2, #101	; 0x65
 8018378:	d001      	beq.n	801837e <_strtod_l+0x17e>
 801837a:	2a45      	cmp	r2, #69	; 0x45
 801837c:	d118      	bne.n	80183b0 <_strtod_l+0x1b0>
 801837e:	b91d      	cbnz	r5, 8018388 <_strtod_l+0x188>
 8018380:	9a04      	ldr	r2, [sp, #16]
 8018382:	4302      	orrs	r2, r0
 8018384:	d09e      	beq.n	80182c4 <_strtod_l+0xc4>
 8018386:	2500      	movs	r5, #0
 8018388:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801838c:	f108 0201 	add.w	r2, r8, #1
 8018390:	9217      	str	r2, [sp, #92]	; 0x5c
 8018392:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018396:	2a2b      	cmp	r2, #43	; 0x2b
 8018398:	d075      	beq.n	8018486 <_strtod_l+0x286>
 801839a:	2a2d      	cmp	r2, #45	; 0x2d
 801839c:	d07b      	beq.n	8018496 <_strtod_l+0x296>
 801839e:	f04f 0c00 	mov.w	ip, #0
 80183a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80183a6:	2909      	cmp	r1, #9
 80183a8:	f240 8082 	bls.w	80184b0 <_strtod_l+0x2b0>
 80183ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80183b0:	2600      	movs	r6, #0
 80183b2:	e09d      	b.n	80184f0 <_strtod_l+0x2f0>
 80183b4:	2300      	movs	r3, #0
 80183b6:	e7c4      	b.n	8018342 <_strtod_l+0x142>
 80183b8:	2f08      	cmp	r7, #8
 80183ba:	bfd8      	it	le
 80183bc:	9907      	ldrle	r1, [sp, #28]
 80183be:	f100 0001 	add.w	r0, r0, #1
 80183c2:	bfda      	itte	le
 80183c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80183c8:	9307      	strle	r3, [sp, #28]
 80183ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80183ce:	3701      	adds	r7, #1
 80183d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80183d2:	e7bf      	b.n	8018354 <_strtod_l+0x154>
 80183d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183d6:	195a      	adds	r2, r3, r5
 80183d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80183da:	5d5a      	ldrb	r2, [r3, r5]
 80183dc:	2f00      	cmp	r7, #0
 80183de:	d037      	beq.n	8018450 <_strtod_l+0x250>
 80183e0:	9005      	str	r0, [sp, #20]
 80183e2:	463d      	mov	r5, r7
 80183e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80183e8:	2b09      	cmp	r3, #9
 80183ea:	d912      	bls.n	8018412 <_strtod_l+0x212>
 80183ec:	2301      	movs	r3, #1
 80183ee:	e7c2      	b.n	8018376 <_strtod_l+0x176>
 80183f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183f2:	1c5a      	adds	r2, r3, #1
 80183f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80183f6:	785a      	ldrb	r2, [r3, #1]
 80183f8:	3001      	adds	r0, #1
 80183fa:	2a30      	cmp	r2, #48	; 0x30
 80183fc:	d0f8      	beq.n	80183f0 <_strtod_l+0x1f0>
 80183fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018402:	2b08      	cmp	r3, #8
 8018404:	f200 84d9 	bhi.w	8018dba <_strtod_l+0xbba>
 8018408:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801840a:	9005      	str	r0, [sp, #20]
 801840c:	2000      	movs	r0, #0
 801840e:	9308      	str	r3, [sp, #32]
 8018410:	4605      	mov	r5, r0
 8018412:	3a30      	subs	r2, #48	; 0x30
 8018414:	f100 0301 	add.w	r3, r0, #1
 8018418:	d014      	beq.n	8018444 <_strtod_l+0x244>
 801841a:	9905      	ldr	r1, [sp, #20]
 801841c:	4419      	add	r1, r3
 801841e:	9105      	str	r1, [sp, #20]
 8018420:	462b      	mov	r3, r5
 8018422:	eb00 0e05 	add.w	lr, r0, r5
 8018426:	210a      	movs	r1, #10
 8018428:	4573      	cmp	r3, lr
 801842a:	d113      	bne.n	8018454 <_strtod_l+0x254>
 801842c:	182b      	adds	r3, r5, r0
 801842e:	2b08      	cmp	r3, #8
 8018430:	f105 0501 	add.w	r5, r5, #1
 8018434:	4405      	add	r5, r0
 8018436:	dc1c      	bgt.n	8018472 <_strtod_l+0x272>
 8018438:	9907      	ldr	r1, [sp, #28]
 801843a:	230a      	movs	r3, #10
 801843c:	fb03 2301 	mla	r3, r3, r1, r2
 8018440:	9307      	str	r3, [sp, #28]
 8018442:	2300      	movs	r3, #0
 8018444:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018446:	1c51      	adds	r1, r2, #1
 8018448:	9117      	str	r1, [sp, #92]	; 0x5c
 801844a:	7852      	ldrb	r2, [r2, #1]
 801844c:	4618      	mov	r0, r3
 801844e:	e7c9      	b.n	80183e4 <_strtod_l+0x1e4>
 8018450:	4638      	mov	r0, r7
 8018452:	e7d2      	b.n	80183fa <_strtod_l+0x1fa>
 8018454:	2b08      	cmp	r3, #8
 8018456:	dc04      	bgt.n	8018462 <_strtod_l+0x262>
 8018458:	9e07      	ldr	r6, [sp, #28]
 801845a:	434e      	muls	r6, r1
 801845c:	9607      	str	r6, [sp, #28]
 801845e:	3301      	adds	r3, #1
 8018460:	e7e2      	b.n	8018428 <_strtod_l+0x228>
 8018462:	f103 0c01 	add.w	ip, r3, #1
 8018466:	f1bc 0f10 	cmp.w	ip, #16
 801846a:	bfd8      	it	le
 801846c:	fb01 f909 	mulle.w	r9, r1, r9
 8018470:	e7f5      	b.n	801845e <_strtod_l+0x25e>
 8018472:	2d10      	cmp	r5, #16
 8018474:	bfdc      	itt	le
 8018476:	230a      	movle	r3, #10
 8018478:	fb03 2909 	mlale	r9, r3, r9, r2
 801847c:	e7e1      	b.n	8018442 <_strtod_l+0x242>
 801847e:	2300      	movs	r3, #0
 8018480:	9305      	str	r3, [sp, #20]
 8018482:	2301      	movs	r3, #1
 8018484:	e77c      	b.n	8018380 <_strtod_l+0x180>
 8018486:	f04f 0c00 	mov.w	ip, #0
 801848a:	f108 0202 	add.w	r2, r8, #2
 801848e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018490:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018494:	e785      	b.n	80183a2 <_strtod_l+0x1a2>
 8018496:	f04f 0c01 	mov.w	ip, #1
 801849a:	e7f6      	b.n	801848a <_strtod_l+0x28a>
 801849c:	0801e648 	.word	0x0801e648
 80184a0:	0801e4e8 	.word	0x0801e4e8
 80184a4:	7ff00000 	.word	0x7ff00000
 80184a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80184aa:	1c51      	adds	r1, r2, #1
 80184ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80184ae:	7852      	ldrb	r2, [r2, #1]
 80184b0:	2a30      	cmp	r2, #48	; 0x30
 80184b2:	d0f9      	beq.n	80184a8 <_strtod_l+0x2a8>
 80184b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80184b8:	2908      	cmp	r1, #8
 80184ba:	f63f af79 	bhi.w	80183b0 <_strtod_l+0x1b0>
 80184be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80184c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80184c4:	9206      	str	r2, [sp, #24]
 80184c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80184c8:	1c51      	adds	r1, r2, #1
 80184ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80184cc:	7852      	ldrb	r2, [r2, #1]
 80184ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80184d2:	2e09      	cmp	r6, #9
 80184d4:	d937      	bls.n	8018546 <_strtod_l+0x346>
 80184d6:	9e06      	ldr	r6, [sp, #24]
 80184d8:	1b89      	subs	r1, r1, r6
 80184da:	2908      	cmp	r1, #8
 80184dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80184e0:	dc02      	bgt.n	80184e8 <_strtod_l+0x2e8>
 80184e2:	4576      	cmp	r6, lr
 80184e4:	bfa8      	it	ge
 80184e6:	4676      	movge	r6, lr
 80184e8:	f1bc 0f00 	cmp.w	ip, #0
 80184ec:	d000      	beq.n	80184f0 <_strtod_l+0x2f0>
 80184ee:	4276      	negs	r6, r6
 80184f0:	2d00      	cmp	r5, #0
 80184f2:	d14d      	bne.n	8018590 <_strtod_l+0x390>
 80184f4:	9904      	ldr	r1, [sp, #16]
 80184f6:	4301      	orrs	r1, r0
 80184f8:	f47f aec6 	bne.w	8018288 <_strtod_l+0x88>
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	f47f aee1 	bne.w	80182c4 <_strtod_l+0xc4>
 8018502:	2a69      	cmp	r2, #105	; 0x69
 8018504:	d027      	beq.n	8018556 <_strtod_l+0x356>
 8018506:	dc24      	bgt.n	8018552 <_strtod_l+0x352>
 8018508:	2a49      	cmp	r2, #73	; 0x49
 801850a:	d024      	beq.n	8018556 <_strtod_l+0x356>
 801850c:	2a4e      	cmp	r2, #78	; 0x4e
 801850e:	f47f aed9 	bne.w	80182c4 <_strtod_l+0xc4>
 8018512:	499f      	ldr	r1, [pc, #636]	; (8018790 <_strtod_l+0x590>)
 8018514:	a817      	add	r0, sp, #92	; 0x5c
 8018516:	f001 f8b5 	bl	8019684 <__match>
 801851a:	2800      	cmp	r0, #0
 801851c:	f43f aed2 	beq.w	80182c4 <_strtod_l+0xc4>
 8018520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	2b28      	cmp	r3, #40	; 0x28
 8018526:	d12d      	bne.n	8018584 <_strtod_l+0x384>
 8018528:	499a      	ldr	r1, [pc, #616]	; (8018794 <_strtod_l+0x594>)
 801852a:	aa1a      	add	r2, sp, #104	; 0x68
 801852c:	a817      	add	r0, sp, #92	; 0x5c
 801852e:	f001 f8bd 	bl	80196ac <__hexnan>
 8018532:	2805      	cmp	r0, #5
 8018534:	d126      	bne.n	8018584 <_strtod_l+0x384>
 8018536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018538:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801853c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018540:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018544:	e6a0      	b.n	8018288 <_strtod_l+0x88>
 8018546:	210a      	movs	r1, #10
 8018548:	fb01 2e0e 	mla	lr, r1, lr, r2
 801854c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018550:	e7b9      	b.n	80184c6 <_strtod_l+0x2c6>
 8018552:	2a6e      	cmp	r2, #110	; 0x6e
 8018554:	e7db      	b.n	801850e <_strtod_l+0x30e>
 8018556:	4990      	ldr	r1, [pc, #576]	; (8018798 <_strtod_l+0x598>)
 8018558:	a817      	add	r0, sp, #92	; 0x5c
 801855a:	f001 f893 	bl	8019684 <__match>
 801855e:	2800      	cmp	r0, #0
 8018560:	f43f aeb0 	beq.w	80182c4 <_strtod_l+0xc4>
 8018564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018566:	498d      	ldr	r1, [pc, #564]	; (801879c <_strtod_l+0x59c>)
 8018568:	3b01      	subs	r3, #1
 801856a:	a817      	add	r0, sp, #92	; 0x5c
 801856c:	9317      	str	r3, [sp, #92]	; 0x5c
 801856e:	f001 f889 	bl	8019684 <__match>
 8018572:	b910      	cbnz	r0, 801857a <_strtod_l+0x37a>
 8018574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018576:	3301      	adds	r3, #1
 8018578:	9317      	str	r3, [sp, #92]	; 0x5c
 801857a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80187ac <_strtod_l+0x5ac>
 801857e:	f04f 0a00 	mov.w	sl, #0
 8018582:	e681      	b.n	8018288 <_strtod_l+0x88>
 8018584:	4886      	ldr	r0, [pc, #536]	; (80187a0 <_strtod_l+0x5a0>)
 8018586:	f002 fae7 	bl	801ab58 <nan>
 801858a:	ec5b ab10 	vmov	sl, fp, d0
 801858e:	e67b      	b.n	8018288 <_strtod_l+0x88>
 8018590:	9b05      	ldr	r3, [sp, #20]
 8018592:	9807      	ldr	r0, [sp, #28]
 8018594:	1af3      	subs	r3, r6, r3
 8018596:	2f00      	cmp	r7, #0
 8018598:	bf08      	it	eq
 801859a:	462f      	moveq	r7, r5
 801859c:	2d10      	cmp	r5, #16
 801859e:	9306      	str	r3, [sp, #24]
 80185a0:	46a8      	mov	r8, r5
 80185a2:	bfa8      	it	ge
 80185a4:	f04f 0810 	movge.w	r8, #16
 80185a8:	f7e7 ffcc 	bl	8000544 <__aeabi_ui2d>
 80185ac:	2d09      	cmp	r5, #9
 80185ae:	4682      	mov	sl, r0
 80185b0:	468b      	mov	fp, r1
 80185b2:	dd13      	ble.n	80185dc <_strtod_l+0x3dc>
 80185b4:	4b7b      	ldr	r3, [pc, #492]	; (80187a4 <_strtod_l+0x5a4>)
 80185b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80185ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80185be:	f7e8 f83b 	bl	8000638 <__aeabi_dmul>
 80185c2:	4682      	mov	sl, r0
 80185c4:	4648      	mov	r0, r9
 80185c6:	468b      	mov	fp, r1
 80185c8:	f7e7 ffbc 	bl	8000544 <__aeabi_ui2d>
 80185cc:	4602      	mov	r2, r0
 80185ce:	460b      	mov	r3, r1
 80185d0:	4650      	mov	r0, sl
 80185d2:	4659      	mov	r1, fp
 80185d4:	f7e7 fe7a 	bl	80002cc <__adddf3>
 80185d8:	4682      	mov	sl, r0
 80185da:	468b      	mov	fp, r1
 80185dc:	2d0f      	cmp	r5, #15
 80185de:	dc38      	bgt.n	8018652 <_strtod_l+0x452>
 80185e0:	9b06      	ldr	r3, [sp, #24]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	f43f ae50 	beq.w	8018288 <_strtod_l+0x88>
 80185e8:	dd24      	ble.n	8018634 <_strtod_l+0x434>
 80185ea:	2b16      	cmp	r3, #22
 80185ec:	dc0b      	bgt.n	8018606 <_strtod_l+0x406>
 80185ee:	496d      	ldr	r1, [pc, #436]	; (80187a4 <_strtod_l+0x5a4>)
 80185f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80185f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185f8:	4652      	mov	r2, sl
 80185fa:	465b      	mov	r3, fp
 80185fc:	f7e8 f81c 	bl	8000638 <__aeabi_dmul>
 8018600:	4682      	mov	sl, r0
 8018602:	468b      	mov	fp, r1
 8018604:	e640      	b.n	8018288 <_strtod_l+0x88>
 8018606:	9a06      	ldr	r2, [sp, #24]
 8018608:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801860c:	4293      	cmp	r3, r2
 801860e:	db20      	blt.n	8018652 <_strtod_l+0x452>
 8018610:	4c64      	ldr	r4, [pc, #400]	; (80187a4 <_strtod_l+0x5a4>)
 8018612:	f1c5 050f 	rsb	r5, r5, #15
 8018616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801861a:	4652      	mov	r2, sl
 801861c:	465b      	mov	r3, fp
 801861e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018622:	f7e8 f809 	bl	8000638 <__aeabi_dmul>
 8018626:	9b06      	ldr	r3, [sp, #24]
 8018628:	1b5d      	subs	r5, r3, r5
 801862a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801862e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018632:	e7e3      	b.n	80185fc <_strtod_l+0x3fc>
 8018634:	9b06      	ldr	r3, [sp, #24]
 8018636:	3316      	adds	r3, #22
 8018638:	db0b      	blt.n	8018652 <_strtod_l+0x452>
 801863a:	9b05      	ldr	r3, [sp, #20]
 801863c:	1b9e      	subs	r6, r3, r6
 801863e:	4b59      	ldr	r3, [pc, #356]	; (80187a4 <_strtod_l+0x5a4>)
 8018640:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8018644:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018648:	4650      	mov	r0, sl
 801864a:	4659      	mov	r1, fp
 801864c:	f7e8 f91e 	bl	800088c <__aeabi_ddiv>
 8018650:	e7d6      	b.n	8018600 <_strtod_l+0x400>
 8018652:	9b06      	ldr	r3, [sp, #24]
 8018654:	eba5 0808 	sub.w	r8, r5, r8
 8018658:	4498      	add	r8, r3
 801865a:	f1b8 0f00 	cmp.w	r8, #0
 801865e:	dd74      	ble.n	801874a <_strtod_l+0x54a>
 8018660:	f018 030f 	ands.w	r3, r8, #15
 8018664:	d00a      	beq.n	801867c <_strtod_l+0x47c>
 8018666:	494f      	ldr	r1, [pc, #316]	; (80187a4 <_strtod_l+0x5a4>)
 8018668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801866c:	4652      	mov	r2, sl
 801866e:	465b      	mov	r3, fp
 8018670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018674:	f7e7 ffe0 	bl	8000638 <__aeabi_dmul>
 8018678:	4682      	mov	sl, r0
 801867a:	468b      	mov	fp, r1
 801867c:	f038 080f 	bics.w	r8, r8, #15
 8018680:	d04f      	beq.n	8018722 <_strtod_l+0x522>
 8018682:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018686:	dd22      	ble.n	80186ce <_strtod_l+0x4ce>
 8018688:	2500      	movs	r5, #0
 801868a:	462e      	mov	r6, r5
 801868c:	9507      	str	r5, [sp, #28]
 801868e:	9505      	str	r5, [sp, #20]
 8018690:	2322      	movs	r3, #34	; 0x22
 8018692:	f8df b118 	ldr.w	fp, [pc, #280]	; 80187ac <_strtod_l+0x5ac>
 8018696:	6023      	str	r3, [r4, #0]
 8018698:	f04f 0a00 	mov.w	sl, #0
 801869c:	9b07      	ldr	r3, [sp, #28]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	f43f adf2 	beq.w	8018288 <_strtod_l+0x88>
 80186a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80186a6:	4620      	mov	r0, r4
 80186a8:	f001 f914 	bl	80198d4 <_Bfree>
 80186ac:	9905      	ldr	r1, [sp, #20]
 80186ae:	4620      	mov	r0, r4
 80186b0:	f001 f910 	bl	80198d4 <_Bfree>
 80186b4:	4631      	mov	r1, r6
 80186b6:	4620      	mov	r0, r4
 80186b8:	f001 f90c 	bl	80198d4 <_Bfree>
 80186bc:	9907      	ldr	r1, [sp, #28]
 80186be:	4620      	mov	r0, r4
 80186c0:	f001 f908 	bl	80198d4 <_Bfree>
 80186c4:	4629      	mov	r1, r5
 80186c6:	4620      	mov	r0, r4
 80186c8:	f001 f904 	bl	80198d4 <_Bfree>
 80186cc:	e5dc      	b.n	8018288 <_strtod_l+0x88>
 80186ce:	4b36      	ldr	r3, [pc, #216]	; (80187a8 <_strtod_l+0x5a8>)
 80186d0:	9304      	str	r3, [sp, #16]
 80186d2:	2300      	movs	r3, #0
 80186d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80186d8:	4650      	mov	r0, sl
 80186da:	4659      	mov	r1, fp
 80186dc:	4699      	mov	r9, r3
 80186de:	f1b8 0f01 	cmp.w	r8, #1
 80186e2:	dc21      	bgt.n	8018728 <_strtod_l+0x528>
 80186e4:	b10b      	cbz	r3, 80186ea <_strtod_l+0x4ea>
 80186e6:	4682      	mov	sl, r0
 80186e8:	468b      	mov	fp, r1
 80186ea:	4b2f      	ldr	r3, [pc, #188]	; (80187a8 <_strtod_l+0x5a8>)
 80186ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80186f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80186f4:	4652      	mov	r2, sl
 80186f6:	465b      	mov	r3, fp
 80186f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80186fc:	f7e7 ff9c 	bl	8000638 <__aeabi_dmul>
 8018700:	4b2a      	ldr	r3, [pc, #168]	; (80187ac <_strtod_l+0x5ac>)
 8018702:	460a      	mov	r2, r1
 8018704:	400b      	ands	r3, r1
 8018706:	492a      	ldr	r1, [pc, #168]	; (80187b0 <_strtod_l+0x5b0>)
 8018708:	428b      	cmp	r3, r1
 801870a:	4682      	mov	sl, r0
 801870c:	d8bc      	bhi.n	8018688 <_strtod_l+0x488>
 801870e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018712:	428b      	cmp	r3, r1
 8018714:	bf86      	itte	hi
 8018716:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80187b4 <_strtod_l+0x5b4>
 801871a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801871e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018722:	2300      	movs	r3, #0
 8018724:	9304      	str	r3, [sp, #16]
 8018726:	e084      	b.n	8018832 <_strtod_l+0x632>
 8018728:	f018 0f01 	tst.w	r8, #1
 801872c:	d005      	beq.n	801873a <_strtod_l+0x53a>
 801872e:	9b04      	ldr	r3, [sp, #16]
 8018730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018734:	f7e7 ff80 	bl	8000638 <__aeabi_dmul>
 8018738:	2301      	movs	r3, #1
 801873a:	9a04      	ldr	r2, [sp, #16]
 801873c:	3208      	adds	r2, #8
 801873e:	f109 0901 	add.w	r9, r9, #1
 8018742:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018746:	9204      	str	r2, [sp, #16]
 8018748:	e7c9      	b.n	80186de <_strtod_l+0x4de>
 801874a:	d0ea      	beq.n	8018722 <_strtod_l+0x522>
 801874c:	f1c8 0800 	rsb	r8, r8, #0
 8018750:	f018 020f 	ands.w	r2, r8, #15
 8018754:	d00a      	beq.n	801876c <_strtod_l+0x56c>
 8018756:	4b13      	ldr	r3, [pc, #76]	; (80187a4 <_strtod_l+0x5a4>)
 8018758:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801875c:	4650      	mov	r0, sl
 801875e:	4659      	mov	r1, fp
 8018760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018764:	f7e8 f892 	bl	800088c <__aeabi_ddiv>
 8018768:	4682      	mov	sl, r0
 801876a:	468b      	mov	fp, r1
 801876c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8018770:	d0d7      	beq.n	8018722 <_strtod_l+0x522>
 8018772:	f1b8 0f1f 	cmp.w	r8, #31
 8018776:	dd1f      	ble.n	80187b8 <_strtod_l+0x5b8>
 8018778:	2500      	movs	r5, #0
 801877a:	462e      	mov	r6, r5
 801877c:	9507      	str	r5, [sp, #28]
 801877e:	9505      	str	r5, [sp, #20]
 8018780:	2322      	movs	r3, #34	; 0x22
 8018782:	f04f 0a00 	mov.w	sl, #0
 8018786:	f04f 0b00 	mov.w	fp, #0
 801878a:	6023      	str	r3, [r4, #0]
 801878c:	e786      	b.n	801869c <_strtod_l+0x49c>
 801878e:	bf00      	nop
 8018790:	0801e4e3 	.word	0x0801e4e3
 8018794:	0801e4fc 	.word	0x0801e4fc
 8018798:	0801e4da 	.word	0x0801e4da
 801879c:	0801e4dd 	.word	0x0801e4dd
 80187a0:	0801e5d0 	.word	0x0801e5d0
 80187a4:	0801e6e0 	.word	0x0801e6e0
 80187a8:	0801e6b8 	.word	0x0801e6b8
 80187ac:	7ff00000 	.word	0x7ff00000
 80187b0:	7ca00000 	.word	0x7ca00000
 80187b4:	7fefffff 	.word	0x7fefffff
 80187b8:	f018 0310 	ands.w	r3, r8, #16
 80187bc:	bf18      	it	ne
 80187be:	236a      	movne	r3, #106	; 0x6a
 80187c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8018b70 <_strtod_l+0x970>
 80187c4:	9304      	str	r3, [sp, #16]
 80187c6:	4650      	mov	r0, sl
 80187c8:	4659      	mov	r1, fp
 80187ca:	2300      	movs	r3, #0
 80187cc:	f018 0f01 	tst.w	r8, #1
 80187d0:	d004      	beq.n	80187dc <_strtod_l+0x5dc>
 80187d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80187d6:	f7e7 ff2f 	bl	8000638 <__aeabi_dmul>
 80187da:	2301      	movs	r3, #1
 80187dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80187e0:	f109 0908 	add.w	r9, r9, #8
 80187e4:	d1f2      	bne.n	80187cc <_strtod_l+0x5cc>
 80187e6:	b10b      	cbz	r3, 80187ec <_strtod_l+0x5ec>
 80187e8:	4682      	mov	sl, r0
 80187ea:	468b      	mov	fp, r1
 80187ec:	9b04      	ldr	r3, [sp, #16]
 80187ee:	b1c3      	cbz	r3, 8018822 <_strtod_l+0x622>
 80187f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80187f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	4659      	mov	r1, fp
 80187fc:	dd11      	ble.n	8018822 <_strtod_l+0x622>
 80187fe:	2b1f      	cmp	r3, #31
 8018800:	f340 8124 	ble.w	8018a4c <_strtod_l+0x84c>
 8018804:	2b34      	cmp	r3, #52	; 0x34
 8018806:	bfde      	ittt	le
 8018808:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801880c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8018810:	fa03 f202 	lslle.w	r2, r3, r2
 8018814:	f04f 0a00 	mov.w	sl, #0
 8018818:	bfcc      	ite	gt
 801881a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801881e:	ea02 0b01 	andle.w	fp, r2, r1
 8018822:	2200      	movs	r2, #0
 8018824:	2300      	movs	r3, #0
 8018826:	4650      	mov	r0, sl
 8018828:	4659      	mov	r1, fp
 801882a:	f7e8 f96d 	bl	8000b08 <__aeabi_dcmpeq>
 801882e:	2800      	cmp	r0, #0
 8018830:	d1a2      	bne.n	8018778 <_strtod_l+0x578>
 8018832:	9b07      	ldr	r3, [sp, #28]
 8018834:	9300      	str	r3, [sp, #0]
 8018836:	9908      	ldr	r1, [sp, #32]
 8018838:	462b      	mov	r3, r5
 801883a:	463a      	mov	r2, r7
 801883c:	4620      	mov	r0, r4
 801883e:	f001 f8b1 	bl	80199a4 <__s2b>
 8018842:	9007      	str	r0, [sp, #28]
 8018844:	2800      	cmp	r0, #0
 8018846:	f43f af1f 	beq.w	8018688 <_strtod_l+0x488>
 801884a:	9b05      	ldr	r3, [sp, #20]
 801884c:	1b9e      	subs	r6, r3, r6
 801884e:	9b06      	ldr	r3, [sp, #24]
 8018850:	2b00      	cmp	r3, #0
 8018852:	bfb4      	ite	lt
 8018854:	4633      	movlt	r3, r6
 8018856:	2300      	movge	r3, #0
 8018858:	930c      	str	r3, [sp, #48]	; 0x30
 801885a:	9b06      	ldr	r3, [sp, #24]
 801885c:	2500      	movs	r5, #0
 801885e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018862:	9312      	str	r3, [sp, #72]	; 0x48
 8018864:	462e      	mov	r6, r5
 8018866:	9b07      	ldr	r3, [sp, #28]
 8018868:	4620      	mov	r0, r4
 801886a:	6859      	ldr	r1, [r3, #4]
 801886c:	f000 fff2 	bl	8019854 <_Balloc>
 8018870:	9005      	str	r0, [sp, #20]
 8018872:	2800      	cmp	r0, #0
 8018874:	f43f af0c 	beq.w	8018690 <_strtod_l+0x490>
 8018878:	9b07      	ldr	r3, [sp, #28]
 801887a:	691a      	ldr	r2, [r3, #16]
 801887c:	3202      	adds	r2, #2
 801887e:	f103 010c 	add.w	r1, r3, #12
 8018882:	0092      	lsls	r2, r2, #2
 8018884:	300c      	adds	r0, #12
 8018886:	f7ff fa7e 	bl	8017d86 <memcpy>
 801888a:	ec4b ab10 	vmov	d0, sl, fp
 801888e:	aa1a      	add	r2, sp, #104	; 0x68
 8018890:	a919      	add	r1, sp, #100	; 0x64
 8018892:	4620      	mov	r0, r4
 8018894:	f001 fbcc 	bl	801a030 <__d2b>
 8018898:	ec4b ab18 	vmov	d8, sl, fp
 801889c:	9018      	str	r0, [sp, #96]	; 0x60
 801889e:	2800      	cmp	r0, #0
 80188a0:	f43f aef6 	beq.w	8018690 <_strtod_l+0x490>
 80188a4:	2101      	movs	r1, #1
 80188a6:	4620      	mov	r0, r4
 80188a8:	f001 f916 	bl	8019ad8 <__i2b>
 80188ac:	4606      	mov	r6, r0
 80188ae:	2800      	cmp	r0, #0
 80188b0:	f43f aeee 	beq.w	8018690 <_strtod_l+0x490>
 80188b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80188b6:	9904      	ldr	r1, [sp, #16]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	bfab      	itete	ge
 80188bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80188be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80188c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80188c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80188c6:	bfac      	ite	ge
 80188c8:	eb03 0902 	addge.w	r9, r3, r2
 80188cc:	1ad7      	sublt	r7, r2, r3
 80188ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80188d0:	eba3 0801 	sub.w	r8, r3, r1
 80188d4:	4490      	add	r8, r2
 80188d6:	4ba1      	ldr	r3, [pc, #644]	; (8018b5c <_strtod_l+0x95c>)
 80188d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80188dc:	4598      	cmp	r8, r3
 80188de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80188e2:	f280 80c7 	bge.w	8018a74 <_strtod_l+0x874>
 80188e6:	eba3 0308 	sub.w	r3, r3, r8
 80188ea:	2b1f      	cmp	r3, #31
 80188ec:	eba2 0203 	sub.w	r2, r2, r3
 80188f0:	f04f 0101 	mov.w	r1, #1
 80188f4:	f300 80b1 	bgt.w	8018a5a <_strtod_l+0x85a>
 80188f8:	fa01 f303 	lsl.w	r3, r1, r3
 80188fc:	930d      	str	r3, [sp, #52]	; 0x34
 80188fe:	2300      	movs	r3, #0
 8018900:	9308      	str	r3, [sp, #32]
 8018902:	eb09 0802 	add.w	r8, r9, r2
 8018906:	9b04      	ldr	r3, [sp, #16]
 8018908:	45c1      	cmp	r9, r8
 801890a:	4417      	add	r7, r2
 801890c:	441f      	add	r7, r3
 801890e:	464b      	mov	r3, r9
 8018910:	bfa8      	it	ge
 8018912:	4643      	movge	r3, r8
 8018914:	42bb      	cmp	r3, r7
 8018916:	bfa8      	it	ge
 8018918:	463b      	movge	r3, r7
 801891a:	2b00      	cmp	r3, #0
 801891c:	bfc2      	ittt	gt
 801891e:	eba8 0803 	subgt.w	r8, r8, r3
 8018922:	1aff      	subgt	r7, r7, r3
 8018924:	eba9 0903 	subgt.w	r9, r9, r3
 8018928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801892a:	2b00      	cmp	r3, #0
 801892c:	dd17      	ble.n	801895e <_strtod_l+0x75e>
 801892e:	4631      	mov	r1, r6
 8018930:	461a      	mov	r2, r3
 8018932:	4620      	mov	r0, r4
 8018934:	f001 f990 	bl	8019c58 <__pow5mult>
 8018938:	4606      	mov	r6, r0
 801893a:	2800      	cmp	r0, #0
 801893c:	f43f aea8 	beq.w	8018690 <_strtod_l+0x490>
 8018940:	4601      	mov	r1, r0
 8018942:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018944:	4620      	mov	r0, r4
 8018946:	f001 f8dd 	bl	8019b04 <__multiply>
 801894a:	900b      	str	r0, [sp, #44]	; 0x2c
 801894c:	2800      	cmp	r0, #0
 801894e:	f43f ae9f 	beq.w	8018690 <_strtod_l+0x490>
 8018952:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018954:	4620      	mov	r0, r4
 8018956:	f000 ffbd 	bl	80198d4 <_Bfree>
 801895a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801895c:	9318      	str	r3, [sp, #96]	; 0x60
 801895e:	f1b8 0f00 	cmp.w	r8, #0
 8018962:	f300 808c 	bgt.w	8018a7e <_strtod_l+0x87e>
 8018966:	9b06      	ldr	r3, [sp, #24]
 8018968:	2b00      	cmp	r3, #0
 801896a:	dd08      	ble.n	801897e <_strtod_l+0x77e>
 801896c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801896e:	9905      	ldr	r1, [sp, #20]
 8018970:	4620      	mov	r0, r4
 8018972:	f001 f971 	bl	8019c58 <__pow5mult>
 8018976:	9005      	str	r0, [sp, #20]
 8018978:	2800      	cmp	r0, #0
 801897a:	f43f ae89 	beq.w	8018690 <_strtod_l+0x490>
 801897e:	2f00      	cmp	r7, #0
 8018980:	dd08      	ble.n	8018994 <_strtod_l+0x794>
 8018982:	9905      	ldr	r1, [sp, #20]
 8018984:	463a      	mov	r2, r7
 8018986:	4620      	mov	r0, r4
 8018988:	f001 f9c0 	bl	8019d0c <__lshift>
 801898c:	9005      	str	r0, [sp, #20]
 801898e:	2800      	cmp	r0, #0
 8018990:	f43f ae7e 	beq.w	8018690 <_strtod_l+0x490>
 8018994:	f1b9 0f00 	cmp.w	r9, #0
 8018998:	dd08      	ble.n	80189ac <_strtod_l+0x7ac>
 801899a:	4631      	mov	r1, r6
 801899c:	464a      	mov	r2, r9
 801899e:	4620      	mov	r0, r4
 80189a0:	f001 f9b4 	bl	8019d0c <__lshift>
 80189a4:	4606      	mov	r6, r0
 80189a6:	2800      	cmp	r0, #0
 80189a8:	f43f ae72 	beq.w	8018690 <_strtod_l+0x490>
 80189ac:	9a05      	ldr	r2, [sp, #20]
 80189ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80189b0:	4620      	mov	r0, r4
 80189b2:	f001 fa37 	bl	8019e24 <__mdiff>
 80189b6:	4605      	mov	r5, r0
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f43f ae69 	beq.w	8018690 <_strtod_l+0x490>
 80189be:	68c3      	ldr	r3, [r0, #12]
 80189c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80189c2:	2300      	movs	r3, #0
 80189c4:	60c3      	str	r3, [r0, #12]
 80189c6:	4631      	mov	r1, r6
 80189c8:	f001 fa10 	bl	8019dec <__mcmp>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	da60      	bge.n	8018a92 <_strtod_l+0x892>
 80189d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189d2:	ea53 030a 	orrs.w	r3, r3, sl
 80189d6:	f040 8082 	bne.w	8018ade <_strtod_l+0x8de>
 80189da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d17d      	bne.n	8018ade <_strtod_l+0x8de>
 80189e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80189e6:	0d1b      	lsrs	r3, r3, #20
 80189e8:	051b      	lsls	r3, r3, #20
 80189ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80189ee:	d976      	bls.n	8018ade <_strtod_l+0x8de>
 80189f0:	696b      	ldr	r3, [r5, #20]
 80189f2:	b913      	cbnz	r3, 80189fa <_strtod_l+0x7fa>
 80189f4:	692b      	ldr	r3, [r5, #16]
 80189f6:	2b01      	cmp	r3, #1
 80189f8:	dd71      	ble.n	8018ade <_strtod_l+0x8de>
 80189fa:	4629      	mov	r1, r5
 80189fc:	2201      	movs	r2, #1
 80189fe:	4620      	mov	r0, r4
 8018a00:	f001 f984 	bl	8019d0c <__lshift>
 8018a04:	4631      	mov	r1, r6
 8018a06:	4605      	mov	r5, r0
 8018a08:	f001 f9f0 	bl	8019dec <__mcmp>
 8018a0c:	2800      	cmp	r0, #0
 8018a0e:	dd66      	ble.n	8018ade <_strtod_l+0x8de>
 8018a10:	9904      	ldr	r1, [sp, #16]
 8018a12:	4a53      	ldr	r2, [pc, #332]	; (8018b60 <_strtod_l+0x960>)
 8018a14:	465b      	mov	r3, fp
 8018a16:	2900      	cmp	r1, #0
 8018a18:	f000 8081 	beq.w	8018b1e <_strtod_l+0x91e>
 8018a1c:	ea02 010b 	and.w	r1, r2, fp
 8018a20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018a24:	dc7b      	bgt.n	8018b1e <_strtod_l+0x91e>
 8018a26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018a2a:	f77f aea9 	ble.w	8018780 <_strtod_l+0x580>
 8018a2e:	4b4d      	ldr	r3, [pc, #308]	; (8018b64 <_strtod_l+0x964>)
 8018a30:	4650      	mov	r0, sl
 8018a32:	4659      	mov	r1, fp
 8018a34:	2200      	movs	r2, #0
 8018a36:	f7e7 fdff 	bl	8000638 <__aeabi_dmul>
 8018a3a:	460b      	mov	r3, r1
 8018a3c:	4303      	orrs	r3, r0
 8018a3e:	bf08      	it	eq
 8018a40:	2322      	moveq	r3, #34	; 0x22
 8018a42:	4682      	mov	sl, r0
 8018a44:	468b      	mov	fp, r1
 8018a46:	bf08      	it	eq
 8018a48:	6023      	streq	r3, [r4, #0]
 8018a4a:	e62b      	b.n	80186a4 <_strtod_l+0x4a4>
 8018a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a50:	fa02 f303 	lsl.w	r3, r2, r3
 8018a54:	ea03 0a0a 	and.w	sl, r3, sl
 8018a58:	e6e3      	b.n	8018822 <_strtod_l+0x622>
 8018a5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018a5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018a62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018a66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018a6a:	fa01 f308 	lsl.w	r3, r1, r8
 8018a6e:	9308      	str	r3, [sp, #32]
 8018a70:	910d      	str	r1, [sp, #52]	; 0x34
 8018a72:	e746      	b.n	8018902 <_strtod_l+0x702>
 8018a74:	2300      	movs	r3, #0
 8018a76:	9308      	str	r3, [sp, #32]
 8018a78:	2301      	movs	r3, #1
 8018a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8018a7c:	e741      	b.n	8018902 <_strtod_l+0x702>
 8018a7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018a80:	4642      	mov	r2, r8
 8018a82:	4620      	mov	r0, r4
 8018a84:	f001 f942 	bl	8019d0c <__lshift>
 8018a88:	9018      	str	r0, [sp, #96]	; 0x60
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	f47f af6b 	bne.w	8018966 <_strtod_l+0x766>
 8018a90:	e5fe      	b.n	8018690 <_strtod_l+0x490>
 8018a92:	465f      	mov	r7, fp
 8018a94:	d16e      	bne.n	8018b74 <_strtod_l+0x974>
 8018a96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a9c:	b342      	cbz	r2, 8018af0 <_strtod_l+0x8f0>
 8018a9e:	4a32      	ldr	r2, [pc, #200]	; (8018b68 <_strtod_l+0x968>)
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	d128      	bne.n	8018af6 <_strtod_l+0x8f6>
 8018aa4:	9b04      	ldr	r3, [sp, #16]
 8018aa6:	4651      	mov	r1, sl
 8018aa8:	b1eb      	cbz	r3, 8018ae6 <_strtod_l+0x8e6>
 8018aaa:	4b2d      	ldr	r3, [pc, #180]	; (8018b60 <_strtod_l+0x960>)
 8018aac:	403b      	ands	r3, r7
 8018aae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ab6:	d819      	bhi.n	8018aec <_strtod_l+0x8ec>
 8018ab8:	0d1b      	lsrs	r3, r3, #20
 8018aba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018abe:	fa02 f303 	lsl.w	r3, r2, r3
 8018ac2:	4299      	cmp	r1, r3
 8018ac4:	d117      	bne.n	8018af6 <_strtod_l+0x8f6>
 8018ac6:	4b29      	ldr	r3, [pc, #164]	; (8018b6c <_strtod_l+0x96c>)
 8018ac8:	429f      	cmp	r7, r3
 8018aca:	d102      	bne.n	8018ad2 <_strtod_l+0x8d2>
 8018acc:	3101      	adds	r1, #1
 8018ace:	f43f addf 	beq.w	8018690 <_strtod_l+0x490>
 8018ad2:	4b23      	ldr	r3, [pc, #140]	; (8018b60 <_strtod_l+0x960>)
 8018ad4:	403b      	ands	r3, r7
 8018ad6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8018ada:	f04f 0a00 	mov.w	sl, #0
 8018ade:	9b04      	ldr	r3, [sp, #16]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d1a4      	bne.n	8018a2e <_strtod_l+0x82e>
 8018ae4:	e5de      	b.n	80186a4 <_strtod_l+0x4a4>
 8018ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018aea:	e7ea      	b.n	8018ac2 <_strtod_l+0x8c2>
 8018aec:	4613      	mov	r3, r2
 8018aee:	e7e8      	b.n	8018ac2 <_strtod_l+0x8c2>
 8018af0:	ea53 030a 	orrs.w	r3, r3, sl
 8018af4:	d08c      	beq.n	8018a10 <_strtod_l+0x810>
 8018af6:	9b08      	ldr	r3, [sp, #32]
 8018af8:	b1db      	cbz	r3, 8018b32 <_strtod_l+0x932>
 8018afa:	423b      	tst	r3, r7
 8018afc:	d0ef      	beq.n	8018ade <_strtod_l+0x8de>
 8018afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b00:	9a04      	ldr	r2, [sp, #16]
 8018b02:	4650      	mov	r0, sl
 8018b04:	4659      	mov	r1, fp
 8018b06:	b1c3      	cbz	r3, 8018b3a <_strtod_l+0x93a>
 8018b08:	f7ff fb5c 	bl	80181c4 <sulp>
 8018b0c:	4602      	mov	r2, r0
 8018b0e:	460b      	mov	r3, r1
 8018b10:	ec51 0b18 	vmov	r0, r1, d8
 8018b14:	f7e7 fbda 	bl	80002cc <__adddf3>
 8018b18:	4682      	mov	sl, r0
 8018b1a:	468b      	mov	fp, r1
 8018b1c:	e7df      	b.n	8018ade <_strtod_l+0x8de>
 8018b1e:	4013      	ands	r3, r2
 8018b20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018b24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018b28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018b2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018b30:	e7d5      	b.n	8018ade <_strtod_l+0x8de>
 8018b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b34:	ea13 0f0a 	tst.w	r3, sl
 8018b38:	e7e0      	b.n	8018afc <_strtod_l+0x8fc>
 8018b3a:	f7ff fb43 	bl	80181c4 <sulp>
 8018b3e:	4602      	mov	r2, r0
 8018b40:	460b      	mov	r3, r1
 8018b42:	ec51 0b18 	vmov	r0, r1, d8
 8018b46:	f7e7 fbbf 	bl	80002c8 <__aeabi_dsub>
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	4682      	mov	sl, r0
 8018b50:	468b      	mov	fp, r1
 8018b52:	f7e7 ffd9 	bl	8000b08 <__aeabi_dcmpeq>
 8018b56:	2800      	cmp	r0, #0
 8018b58:	d0c1      	beq.n	8018ade <_strtod_l+0x8de>
 8018b5a:	e611      	b.n	8018780 <_strtod_l+0x580>
 8018b5c:	fffffc02 	.word	0xfffffc02
 8018b60:	7ff00000 	.word	0x7ff00000
 8018b64:	39500000 	.word	0x39500000
 8018b68:	000fffff 	.word	0x000fffff
 8018b6c:	7fefffff 	.word	0x7fefffff
 8018b70:	0801e510 	.word	0x0801e510
 8018b74:	4631      	mov	r1, r6
 8018b76:	4628      	mov	r0, r5
 8018b78:	f001 fab6 	bl	801a0e8 <__ratio>
 8018b7c:	ec59 8b10 	vmov	r8, r9, d0
 8018b80:	ee10 0a10 	vmov	r0, s0
 8018b84:	2200      	movs	r2, #0
 8018b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018b8a:	4649      	mov	r1, r9
 8018b8c:	f7e7 ffd0 	bl	8000b30 <__aeabi_dcmple>
 8018b90:	2800      	cmp	r0, #0
 8018b92:	d07a      	beq.n	8018c8a <_strtod_l+0xa8a>
 8018b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d04a      	beq.n	8018c30 <_strtod_l+0xa30>
 8018b9a:	4b95      	ldr	r3, [pc, #596]	; (8018df0 <_strtod_l+0xbf0>)
 8018b9c:	2200      	movs	r2, #0
 8018b9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018ba2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018df0 <_strtod_l+0xbf0>
 8018ba6:	f04f 0800 	mov.w	r8, #0
 8018baa:	4b92      	ldr	r3, [pc, #584]	; (8018df4 <_strtod_l+0xbf4>)
 8018bac:	403b      	ands	r3, r7
 8018bae:	930d      	str	r3, [sp, #52]	; 0x34
 8018bb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018bb2:	4b91      	ldr	r3, [pc, #580]	; (8018df8 <_strtod_l+0xbf8>)
 8018bb4:	429a      	cmp	r2, r3
 8018bb6:	f040 80b0 	bne.w	8018d1a <_strtod_l+0xb1a>
 8018bba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018bbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018bc2:	ec4b ab10 	vmov	d0, sl, fp
 8018bc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018bca:	f001 f9b5 	bl	8019f38 <__ulp>
 8018bce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018bd2:	ec53 2b10 	vmov	r2, r3, d0
 8018bd6:	f7e7 fd2f 	bl	8000638 <__aeabi_dmul>
 8018bda:	4652      	mov	r2, sl
 8018bdc:	465b      	mov	r3, fp
 8018bde:	f7e7 fb75 	bl	80002cc <__adddf3>
 8018be2:	460b      	mov	r3, r1
 8018be4:	4983      	ldr	r1, [pc, #524]	; (8018df4 <_strtod_l+0xbf4>)
 8018be6:	4a85      	ldr	r2, [pc, #532]	; (8018dfc <_strtod_l+0xbfc>)
 8018be8:	4019      	ands	r1, r3
 8018bea:	4291      	cmp	r1, r2
 8018bec:	4682      	mov	sl, r0
 8018bee:	d960      	bls.n	8018cb2 <_strtod_l+0xab2>
 8018bf0:	ee18 3a90 	vmov	r3, s17
 8018bf4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018bf8:	4293      	cmp	r3, r2
 8018bfa:	d104      	bne.n	8018c06 <_strtod_l+0xa06>
 8018bfc:	ee18 3a10 	vmov	r3, s16
 8018c00:	3301      	adds	r3, #1
 8018c02:	f43f ad45 	beq.w	8018690 <_strtod_l+0x490>
 8018c06:	f8df b200 	ldr.w	fp, [pc, #512]	; 8018e08 <_strtod_l+0xc08>
 8018c0a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018c0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018c10:	4620      	mov	r0, r4
 8018c12:	f000 fe5f 	bl	80198d4 <_Bfree>
 8018c16:	9905      	ldr	r1, [sp, #20]
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f000 fe5b 	bl	80198d4 <_Bfree>
 8018c1e:	4631      	mov	r1, r6
 8018c20:	4620      	mov	r0, r4
 8018c22:	f000 fe57 	bl	80198d4 <_Bfree>
 8018c26:	4629      	mov	r1, r5
 8018c28:	4620      	mov	r0, r4
 8018c2a:	f000 fe53 	bl	80198d4 <_Bfree>
 8018c2e:	e61a      	b.n	8018866 <_strtod_l+0x666>
 8018c30:	f1ba 0f00 	cmp.w	sl, #0
 8018c34:	d11b      	bne.n	8018c6e <_strtod_l+0xa6e>
 8018c36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018c3a:	b9f3      	cbnz	r3, 8018c7a <_strtod_l+0xa7a>
 8018c3c:	4b6c      	ldr	r3, [pc, #432]	; (8018df0 <_strtod_l+0xbf0>)
 8018c3e:	2200      	movs	r2, #0
 8018c40:	4640      	mov	r0, r8
 8018c42:	4649      	mov	r1, r9
 8018c44:	f7e7 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 8018c48:	b9d0      	cbnz	r0, 8018c80 <_strtod_l+0xa80>
 8018c4a:	4640      	mov	r0, r8
 8018c4c:	4649      	mov	r1, r9
 8018c4e:	4b6c      	ldr	r3, [pc, #432]	; (8018e00 <_strtod_l+0xc00>)
 8018c50:	2200      	movs	r2, #0
 8018c52:	f7e7 fcf1 	bl	8000638 <__aeabi_dmul>
 8018c56:	4680      	mov	r8, r0
 8018c58:	4689      	mov	r9, r1
 8018c5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018c5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8018c62:	9315      	str	r3, [sp, #84]	; 0x54
 8018c64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018c68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018c6c:	e79d      	b.n	8018baa <_strtod_l+0x9aa>
 8018c6e:	f1ba 0f01 	cmp.w	sl, #1
 8018c72:	d102      	bne.n	8018c7a <_strtod_l+0xa7a>
 8018c74:	2f00      	cmp	r7, #0
 8018c76:	f43f ad83 	beq.w	8018780 <_strtod_l+0x580>
 8018c7a:	4b62      	ldr	r3, [pc, #392]	; (8018e04 <_strtod_l+0xc04>)
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	e78e      	b.n	8018b9e <_strtod_l+0x99e>
 8018c80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8018e00 <_strtod_l+0xc00>
 8018c84:	f04f 0800 	mov.w	r8, #0
 8018c88:	e7e7      	b.n	8018c5a <_strtod_l+0xa5a>
 8018c8a:	4b5d      	ldr	r3, [pc, #372]	; (8018e00 <_strtod_l+0xc00>)
 8018c8c:	4640      	mov	r0, r8
 8018c8e:	4649      	mov	r1, r9
 8018c90:	2200      	movs	r2, #0
 8018c92:	f7e7 fcd1 	bl	8000638 <__aeabi_dmul>
 8018c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c98:	4680      	mov	r8, r0
 8018c9a:	4689      	mov	r9, r1
 8018c9c:	b933      	cbnz	r3, 8018cac <_strtod_l+0xaac>
 8018c9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ca2:	900e      	str	r0, [sp, #56]	; 0x38
 8018ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ca6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018caa:	e7dd      	b.n	8018c68 <_strtod_l+0xa68>
 8018cac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8018cb0:	e7f9      	b.n	8018ca6 <_strtod_l+0xaa6>
 8018cb2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018cb6:	9b04      	ldr	r3, [sp, #16]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d1a8      	bne.n	8018c0e <_strtod_l+0xa0e>
 8018cbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018cc2:	0d1b      	lsrs	r3, r3, #20
 8018cc4:	051b      	lsls	r3, r3, #20
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	d1a1      	bne.n	8018c0e <_strtod_l+0xa0e>
 8018cca:	4640      	mov	r0, r8
 8018ccc:	4649      	mov	r1, r9
 8018cce:	f7e7 ffd5 	bl	8000c7c <__aeabi_d2lz>
 8018cd2:	f7e7 fc83 	bl	80005dc <__aeabi_l2d>
 8018cd6:	4602      	mov	r2, r0
 8018cd8:	460b      	mov	r3, r1
 8018cda:	4640      	mov	r0, r8
 8018cdc:	4649      	mov	r1, r9
 8018cde:	f7e7 faf3 	bl	80002c8 <__aeabi_dsub>
 8018ce2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018ce8:	ea43 030a 	orr.w	r3, r3, sl
 8018cec:	4313      	orrs	r3, r2
 8018cee:	4680      	mov	r8, r0
 8018cf0:	4689      	mov	r9, r1
 8018cf2:	d055      	beq.n	8018da0 <_strtod_l+0xba0>
 8018cf4:	a336      	add	r3, pc, #216	; (adr r3, 8018dd0 <_strtod_l+0xbd0>)
 8018cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cfa:	f7e7 ff0f 	bl	8000b1c <__aeabi_dcmplt>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	f47f acd0 	bne.w	80186a4 <_strtod_l+0x4a4>
 8018d04:	a334      	add	r3, pc, #208	; (adr r3, 8018dd8 <_strtod_l+0xbd8>)
 8018d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d0a:	4640      	mov	r0, r8
 8018d0c:	4649      	mov	r1, r9
 8018d0e:	f7e7 ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	f43f af7b 	beq.w	8018c0e <_strtod_l+0xa0e>
 8018d18:	e4c4      	b.n	80186a4 <_strtod_l+0x4a4>
 8018d1a:	9b04      	ldr	r3, [sp, #16]
 8018d1c:	b333      	cbz	r3, 8018d6c <_strtod_l+0xb6c>
 8018d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018d24:	d822      	bhi.n	8018d6c <_strtod_l+0xb6c>
 8018d26:	a32e      	add	r3, pc, #184	; (adr r3, 8018de0 <_strtod_l+0xbe0>)
 8018d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d2c:	4640      	mov	r0, r8
 8018d2e:	4649      	mov	r1, r9
 8018d30:	f7e7 fefe 	bl	8000b30 <__aeabi_dcmple>
 8018d34:	b1a0      	cbz	r0, 8018d60 <_strtod_l+0xb60>
 8018d36:	4649      	mov	r1, r9
 8018d38:	4640      	mov	r0, r8
 8018d3a:	f7e7 ff17 	bl	8000b6c <__aeabi_d2uiz>
 8018d3e:	2801      	cmp	r0, #1
 8018d40:	bf38      	it	cc
 8018d42:	2001      	movcc	r0, #1
 8018d44:	f7e7 fbfe 	bl	8000544 <__aeabi_ui2d>
 8018d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d4a:	4680      	mov	r8, r0
 8018d4c:	4689      	mov	r9, r1
 8018d4e:	bb23      	cbnz	r3, 8018d9a <_strtod_l+0xb9a>
 8018d50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d54:	9010      	str	r0, [sp, #64]	; 0x40
 8018d56:	9311      	str	r3, [sp, #68]	; 0x44
 8018d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018d5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018d64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018d68:	1a9b      	subs	r3, r3, r2
 8018d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8018d6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018d70:	eeb0 0a48 	vmov.f32	s0, s16
 8018d74:	eef0 0a68 	vmov.f32	s1, s17
 8018d78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018d7c:	f001 f8dc 	bl	8019f38 <__ulp>
 8018d80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018d84:	ec53 2b10 	vmov	r2, r3, d0
 8018d88:	f7e7 fc56 	bl	8000638 <__aeabi_dmul>
 8018d8c:	ec53 2b18 	vmov	r2, r3, d8
 8018d90:	f7e7 fa9c 	bl	80002cc <__adddf3>
 8018d94:	4682      	mov	sl, r0
 8018d96:	468b      	mov	fp, r1
 8018d98:	e78d      	b.n	8018cb6 <_strtod_l+0xab6>
 8018d9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8018d9e:	e7db      	b.n	8018d58 <_strtod_l+0xb58>
 8018da0:	a311      	add	r3, pc, #68	; (adr r3, 8018de8 <_strtod_l+0xbe8>)
 8018da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da6:	f7e7 feb9 	bl	8000b1c <__aeabi_dcmplt>
 8018daa:	e7b2      	b.n	8018d12 <_strtod_l+0xb12>
 8018dac:	2300      	movs	r3, #0
 8018dae:	930a      	str	r3, [sp, #40]	; 0x28
 8018db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018db2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018db4:	6013      	str	r3, [r2, #0]
 8018db6:	f7ff ba6b 	b.w	8018290 <_strtod_l+0x90>
 8018dba:	2a65      	cmp	r2, #101	; 0x65
 8018dbc:	f43f ab5f 	beq.w	801847e <_strtod_l+0x27e>
 8018dc0:	2a45      	cmp	r2, #69	; 0x45
 8018dc2:	f43f ab5c 	beq.w	801847e <_strtod_l+0x27e>
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	f7ff bb94 	b.w	80184f4 <_strtod_l+0x2f4>
 8018dcc:	f3af 8000 	nop.w
 8018dd0:	94a03595 	.word	0x94a03595
 8018dd4:	3fdfffff 	.word	0x3fdfffff
 8018dd8:	35afe535 	.word	0x35afe535
 8018ddc:	3fe00000 	.word	0x3fe00000
 8018de0:	ffc00000 	.word	0xffc00000
 8018de4:	41dfffff 	.word	0x41dfffff
 8018de8:	94a03595 	.word	0x94a03595
 8018dec:	3fcfffff 	.word	0x3fcfffff
 8018df0:	3ff00000 	.word	0x3ff00000
 8018df4:	7ff00000 	.word	0x7ff00000
 8018df8:	7fe00000 	.word	0x7fe00000
 8018dfc:	7c9fffff 	.word	0x7c9fffff
 8018e00:	3fe00000 	.word	0x3fe00000
 8018e04:	bff00000 	.word	0xbff00000
 8018e08:	7fefffff 	.word	0x7fefffff

08018e0c <strtod>:
 8018e0c:	460a      	mov	r2, r1
 8018e0e:	4601      	mov	r1, r0
 8018e10:	4802      	ldr	r0, [pc, #8]	; (8018e1c <strtod+0x10>)
 8018e12:	4b03      	ldr	r3, [pc, #12]	; (8018e20 <strtod+0x14>)
 8018e14:	6800      	ldr	r0, [r0, #0]
 8018e16:	f7ff b9f3 	b.w	8018200 <_strtod_l>
 8018e1a:	bf00      	nop
 8018e1c:	2000002c 	.word	0x2000002c
 8018e20:	20000094 	.word	0x20000094

08018e24 <strtok>:
 8018e24:	4b16      	ldr	r3, [pc, #88]	; (8018e80 <strtok+0x5c>)
 8018e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018e28:	681e      	ldr	r6, [r3, #0]
 8018e2a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018e2c:	4605      	mov	r5, r0
 8018e2e:	b9fc      	cbnz	r4, 8018e70 <strtok+0x4c>
 8018e30:	2050      	movs	r0, #80	; 0x50
 8018e32:	9101      	str	r1, [sp, #4]
 8018e34:	f000 fce8 	bl	8019808 <malloc>
 8018e38:	9901      	ldr	r1, [sp, #4]
 8018e3a:	65b0      	str	r0, [r6, #88]	; 0x58
 8018e3c:	4602      	mov	r2, r0
 8018e3e:	b920      	cbnz	r0, 8018e4a <strtok+0x26>
 8018e40:	4b10      	ldr	r3, [pc, #64]	; (8018e84 <strtok+0x60>)
 8018e42:	4811      	ldr	r0, [pc, #68]	; (8018e88 <strtok+0x64>)
 8018e44:	2157      	movs	r1, #87	; 0x57
 8018e46:	f000 f85b 	bl	8018f00 <__assert_func>
 8018e4a:	e9c0 4400 	strd	r4, r4, [r0]
 8018e4e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018e52:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018e56:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018e5a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018e5e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018e62:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018e66:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018e6a:	6184      	str	r4, [r0, #24]
 8018e6c:	7704      	strb	r4, [r0, #28]
 8018e6e:	6244      	str	r4, [r0, #36]	; 0x24
 8018e70:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018e72:	2301      	movs	r3, #1
 8018e74:	4628      	mov	r0, r5
 8018e76:	b002      	add	sp, #8
 8018e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e7c:	f000 b806 	b.w	8018e8c <__strtok_r>
 8018e80:	2000002c 	.word	0x2000002c
 8018e84:	0801e468 	.word	0x0801e468
 8018e88:	0801e538 	.word	0x0801e538

08018e8c <__strtok_r>:
 8018e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e8e:	b908      	cbnz	r0, 8018e94 <__strtok_r+0x8>
 8018e90:	6810      	ldr	r0, [r2, #0]
 8018e92:	b188      	cbz	r0, 8018eb8 <__strtok_r+0x2c>
 8018e94:	4604      	mov	r4, r0
 8018e96:	4620      	mov	r0, r4
 8018e98:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018e9c:	460f      	mov	r7, r1
 8018e9e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018ea2:	b91e      	cbnz	r6, 8018eac <__strtok_r+0x20>
 8018ea4:	b965      	cbnz	r5, 8018ec0 <__strtok_r+0x34>
 8018ea6:	6015      	str	r5, [r2, #0]
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	e005      	b.n	8018eb8 <__strtok_r+0x2c>
 8018eac:	42b5      	cmp	r5, r6
 8018eae:	d1f6      	bne.n	8018e9e <__strtok_r+0x12>
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d1f0      	bne.n	8018e96 <__strtok_r+0xa>
 8018eb4:	6014      	str	r4, [r2, #0]
 8018eb6:	7003      	strb	r3, [r0, #0]
 8018eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018eba:	461c      	mov	r4, r3
 8018ebc:	e00c      	b.n	8018ed8 <__strtok_r+0x4c>
 8018ebe:	b915      	cbnz	r5, 8018ec6 <__strtok_r+0x3a>
 8018ec0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018ec4:	460e      	mov	r6, r1
 8018ec6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018eca:	42ab      	cmp	r3, r5
 8018ecc:	d1f7      	bne.n	8018ebe <__strtok_r+0x32>
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d0f3      	beq.n	8018eba <__strtok_r+0x2e>
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018ed8:	6014      	str	r4, [r2, #0]
 8018eda:	e7ed      	b.n	8018eb8 <__strtok_r+0x2c>

08018edc <_write_r>:
 8018edc:	b538      	push	{r3, r4, r5, lr}
 8018ede:	4d07      	ldr	r5, [pc, #28]	; (8018efc <_write_r+0x20>)
 8018ee0:	4604      	mov	r4, r0
 8018ee2:	4608      	mov	r0, r1
 8018ee4:	4611      	mov	r1, r2
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	602a      	str	r2, [r5, #0]
 8018eea:	461a      	mov	r2, r3
 8018eec:	f7e8 ff17 	bl	8001d1e <_write>
 8018ef0:	1c43      	adds	r3, r0, #1
 8018ef2:	d102      	bne.n	8018efa <_write_r+0x1e>
 8018ef4:	682b      	ldr	r3, [r5, #0]
 8018ef6:	b103      	cbz	r3, 8018efa <_write_r+0x1e>
 8018ef8:	6023      	str	r3, [r4, #0]
 8018efa:	bd38      	pop	{r3, r4, r5, pc}
 8018efc:	20011d1c 	.word	0x20011d1c

08018f00 <__assert_func>:
 8018f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f02:	4614      	mov	r4, r2
 8018f04:	461a      	mov	r2, r3
 8018f06:	4b09      	ldr	r3, [pc, #36]	; (8018f2c <__assert_func+0x2c>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	4605      	mov	r5, r0
 8018f0c:	68d8      	ldr	r0, [r3, #12]
 8018f0e:	b14c      	cbz	r4, 8018f24 <__assert_func+0x24>
 8018f10:	4b07      	ldr	r3, [pc, #28]	; (8018f30 <__assert_func+0x30>)
 8018f12:	9100      	str	r1, [sp, #0]
 8018f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018f18:	4906      	ldr	r1, [pc, #24]	; (8018f34 <__assert_func+0x34>)
 8018f1a:	462b      	mov	r3, r5
 8018f1c:	f000 f8e0 	bl	80190e0 <fiprintf>
 8018f20:	f001 fef0 	bl	801ad04 <abort>
 8018f24:	4b04      	ldr	r3, [pc, #16]	; (8018f38 <__assert_func+0x38>)
 8018f26:	461c      	mov	r4, r3
 8018f28:	e7f3      	b.n	8018f12 <__assert_func+0x12>
 8018f2a:	bf00      	nop
 8018f2c:	2000002c 	.word	0x2000002c
 8018f30:	0801e595 	.word	0x0801e595
 8018f34:	0801e5a2 	.word	0x0801e5a2
 8018f38:	0801e5d0 	.word	0x0801e5d0

08018f3c <_close_r>:
 8018f3c:	b538      	push	{r3, r4, r5, lr}
 8018f3e:	4d06      	ldr	r5, [pc, #24]	; (8018f58 <_close_r+0x1c>)
 8018f40:	2300      	movs	r3, #0
 8018f42:	4604      	mov	r4, r0
 8018f44:	4608      	mov	r0, r1
 8018f46:	602b      	str	r3, [r5, #0]
 8018f48:	f7e8 ff05 	bl	8001d56 <_close>
 8018f4c:	1c43      	adds	r3, r0, #1
 8018f4e:	d102      	bne.n	8018f56 <_close_r+0x1a>
 8018f50:	682b      	ldr	r3, [r5, #0]
 8018f52:	b103      	cbz	r3, 8018f56 <_close_r+0x1a>
 8018f54:	6023      	str	r3, [r4, #0]
 8018f56:	bd38      	pop	{r3, r4, r5, pc}
 8018f58:	20011d1c 	.word	0x20011d1c

08018f5c <__sflush_r>:
 8018f5c:	898a      	ldrh	r2, [r1, #12]
 8018f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f62:	4605      	mov	r5, r0
 8018f64:	0710      	lsls	r0, r2, #28
 8018f66:	460c      	mov	r4, r1
 8018f68:	d458      	bmi.n	801901c <__sflush_r+0xc0>
 8018f6a:	684b      	ldr	r3, [r1, #4]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	dc05      	bgt.n	8018f7c <__sflush_r+0x20>
 8018f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	dc02      	bgt.n	8018f7c <__sflush_r+0x20>
 8018f76:	2000      	movs	r0, #0
 8018f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018f7e:	2e00      	cmp	r6, #0
 8018f80:	d0f9      	beq.n	8018f76 <__sflush_r+0x1a>
 8018f82:	2300      	movs	r3, #0
 8018f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018f88:	682f      	ldr	r7, [r5, #0]
 8018f8a:	602b      	str	r3, [r5, #0]
 8018f8c:	d032      	beq.n	8018ff4 <__sflush_r+0x98>
 8018f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018f90:	89a3      	ldrh	r3, [r4, #12]
 8018f92:	075a      	lsls	r2, r3, #29
 8018f94:	d505      	bpl.n	8018fa2 <__sflush_r+0x46>
 8018f96:	6863      	ldr	r3, [r4, #4]
 8018f98:	1ac0      	subs	r0, r0, r3
 8018f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018f9c:	b10b      	cbz	r3, 8018fa2 <__sflush_r+0x46>
 8018f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018fa0:	1ac0      	subs	r0, r0, r3
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	4602      	mov	r2, r0
 8018fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018fa8:	6a21      	ldr	r1, [r4, #32]
 8018faa:	4628      	mov	r0, r5
 8018fac:	47b0      	blx	r6
 8018fae:	1c43      	adds	r3, r0, #1
 8018fb0:	89a3      	ldrh	r3, [r4, #12]
 8018fb2:	d106      	bne.n	8018fc2 <__sflush_r+0x66>
 8018fb4:	6829      	ldr	r1, [r5, #0]
 8018fb6:	291d      	cmp	r1, #29
 8018fb8:	d82c      	bhi.n	8019014 <__sflush_r+0xb8>
 8018fba:	4a2a      	ldr	r2, [pc, #168]	; (8019064 <__sflush_r+0x108>)
 8018fbc:	40ca      	lsrs	r2, r1
 8018fbe:	07d6      	lsls	r6, r2, #31
 8018fc0:	d528      	bpl.n	8019014 <__sflush_r+0xb8>
 8018fc2:	2200      	movs	r2, #0
 8018fc4:	6062      	str	r2, [r4, #4]
 8018fc6:	04d9      	lsls	r1, r3, #19
 8018fc8:	6922      	ldr	r2, [r4, #16]
 8018fca:	6022      	str	r2, [r4, #0]
 8018fcc:	d504      	bpl.n	8018fd8 <__sflush_r+0x7c>
 8018fce:	1c42      	adds	r2, r0, #1
 8018fd0:	d101      	bne.n	8018fd6 <__sflush_r+0x7a>
 8018fd2:	682b      	ldr	r3, [r5, #0]
 8018fd4:	b903      	cbnz	r3, 8018fd8 <__sflush_r+0x7c>
 8018fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8018fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fda:	602f      	str	r7, [r5, #0]
 8018fdc:	2900      	cmp	r1, #0
 8018fde:	d0ca      	beq.n	8018f76 <__sflush_r+0x1a>
 8018fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fe4:	4299      	cmp	r1, r3
 8018fe6:	d002      	beq.n	8018fee <__sflush_r+0x92>
 8018fe8:	4628      	mov	r0, r5
 8018fea:	f001 f90b 	bl	801a204 <_free_r>
 8018fee:	2000      	movs	r0, #0
 8018ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8018ff2:	e7c1      	b.n	8018f78 <__sflush_r+0x1c>
 8018ff4:	6a21      	ldr	r1, [r4, #32]
 8018ff6:	2301      	movs	r3, #1
 8018ff8:	4628      	mov	r0, r5
 8018ffa:	47b0      	blx	r6
 8018ffc:	1c41      	adds	r1, r0, #1
 8018ffe:	d1c7      	bne.n	8018f90 <__sflush_r+0x34>
 8019000:	682b      	ldr	r3, [r5, #0]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d0c4      	beq.n	8018f90 <__sflush_r+0x34>
 8019006:	2b1d      	cmp	r3, #29
 8019008:	d001      	beq.n	801900e <__sflush_r+0xb2>
 801900a:	2b16      	cmp	r3, #22
 801900c:	d101      	bne.n	8019012 <__sflush_r+0xb6>
 801900e:	602f      	str	r7, [r5, #0]
 8019010:	e7b1      	b.n	8018f76 <__sflush_r+0x1a>
 8019012:	89a3      	ldrh	r3, [r4, #12]
 8019014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019018:	81a3      	strh	r3, [r4, #12]
 801901a:	e7ad      	b.n	8018f78 <__sflush_r+0x1c>
 801901c:	690f      	ldr	r7, [r1, #16]
 801901e:	2f00      	cmp	r7, #0
 8019020:	d0a9      	beq.n	8018f76 <__sflush_r+0x1a>
 8019022:	0793      	lsls	r3, r2, #30
 8019024:	680e      	ldr	r6, [r1, #0]
 8019026:	bf08      	it	eq
 8019028:	694b      	ldreq	r3, [r1, #20]
 801902a:	600f      	str	r7, [r1, #0]
 801902c:	bf18      	it	ne
 801902e:	2300      	movne	r3, #0
 8019030:	eba6 0807 	sub.w	r8, r6, r7
 8019034:	608b      	str	r3, [r1, #8]
 8019036:	f1b8 0f00 	cmp.w	r8, #0
 801903a:	dd9c      	ble.n	8018f76 <__sflush_r+0x1a>
 801903c:	6a21      	ldr	r1, [r4, #32]
 801903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019040:	4643      	mov	r3, r8
 8019042:	463a      	mov	r2, r7
 8019044:	4628      	mov	r0, r5
 8019046:	47b0      	blx	r6
 8019048:	2800      	cmp	r0, #0
 801904a:	dc06      	bgt.n	801905a <__sflush_r+0xfe>
 801904c:	89a3      	ldrh	r3, [r4, #12]
 801904e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019052:	81a3      	strh	r3, [r4, #12]
 8019054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019058:	e78e      	b.n	8018f78 <__sflush_r+0x1c>
 801905a:	4407      	add	r7, r0
 801905c:	eba8 0800 	sub.w	r8, r8, r0
 8019060:	e7e9      	b.n	8019036 <__sflush_r+0xda>
 8019062:	bf00      	nop
 8019064:	20400001 	.word	0x20400001

08019068 <_fflush_r>:
 8019068:	b538      	push	{r3, r4, r5, lr}
 801906a:	690b      	ldr	r3, [r1, #16]
 801906c:	4605      	mov	r5, r0
 801906e:	460c      	mov	r4, r1
 8019070:	b913      	cbnz	r3, 8019078 <_fflush_r+0x10>
 8019072:	2500      	movs	r5, #0
 8019074:	4628      	mov	r0, r5
 8019076:	bd38      	pop	{r3, r4, r5, pc}
 8019078:	b118      	cbz	r0, 8019082 <_fflush_r+0x1a>
 801907a:	6983      	ldr	r3, [r0, #24]
 801907c:	b90b      	cbnz	r3, 8019082 <_fflush_r+0x1a>
 801907e:	f7fe fdad 	bl	8017bdc <__sinit>
 8019082:	4b14      	ldr	r3, [pc, #80]	; (80190d4 <_fflush_r+0x6c>)
 8019084:	429c      	cmp	r4, r3
 8019086:	d11b      	bne.n	80190c0 <_fflush_r+0x58>
 8019088:	686c      	ldr	r4, [r5, #4]
 801908a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d0ef      	beq.n	8019072 <_fflush_r+0xa>
 8019092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019094:	07d0      	lsls	r0, r2, #31
 8019096:	d404      	bmi.n	80190a2 <_fflush_r+0x3a>
 8019098:	0599      	lsls	r1, r3, #22
 801909a:	d402      	bmi.n	80190a2 <_fflush_r+0x3a>
 801909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801909e:	f7fe fe60 	bl	8017d62 <__retarget_lock_acquire_recursive>
 80190a2:	4628      	mov	r0, r5
 80190a4:	4621      	mov	r1, r4
 80190a6:	f7ff ff59 	bl	8018f5c <__sflush_r>
 80190aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80190ac:	07da      	lsls	r2, r3, #31
 80190ae:	4605      	mov	r5, r0
 80190b0:	d4e0      	bmi.n	8019074 <_fflush_r+0xc>
 80190b2:	89a3      	ldrh	r3, [r4, #12]
 80190b4:	059b      	lsls	r3, r3, #22
 80190b6:	d4dd      	bmi.n	8019074 <_fflush_r+0xc>
 80190b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80190ba:	f7fe fe53 	bl	8017d64 <__retarget_lock_release_recursive>
 80190be:	e7d9      	b.n	8019074 <_fflush_r+0xc>
 80190c0:	4b05      	ldr	r3, [pc, #20]	; (80190d8 <_fflush_r+0x70>)
 80190c2:	429c      	cmp	r4, r3
 80190c4:	d101      	bne.n	80190ca <_fflush_r+0x62>
 80190c6:	68ac      	ldr	r4, [r5, #8]
 80190c8:	e7df      	b.n	801908a <_fflush_r+0x22>
 80190ca:	4b04      	ldr	r3, [pc, #16]	; (80190dc <_fflush_r+0x74>)
 80190cc:	429c      	cmp	r4, r3
 80190ce:	bf08      	it	eq
 80190d0:	68ec      	ldreq	r4, [r5, #12]
 80190d2:	e7da      	b.n	801908a <_fflush_r+0x22>
 80190d4:	0801e424 	.word	0x0801e424
 80190d8:	0801e444 	.word	0x0801e444
 80190dc:	0801e404 	.word	0x0801e404

080190e0 <fiprintf>:
 80190e0:	b40e      	push	{r1, r2, r3}
 80190e2:	b503      	push	{r0, r1, lr}
 80190e4:	4601      	mov	r1, r0
 80190e6:	ab03      	add	r3, sp, #12
 80190e8:	4805      	ldr	r0, [pc, #20]	; (8019100 <fiprintf+0x20>)
 80190ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80190ee:	6800      	ldr	r0, [r0, #0]
 80190f0:	9301      	str	r3, [sp, #4]
 80190f2:	f001 fa59 	bl	801a5a8 <_vfiprintf_r>
 80190f6:	b002      	add	sp, #8
 80190f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80190fc:	b003      	add	sp, #12
 80190fe:	4770      	bx	lr
 8019100:	2000002c 	.word	0x2000002c

08019104 <rshift>:
 8019104:	6903      	ldr	r3, [r0, #16]
 8019106:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801910a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801910e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019112:	f100 0414 	add.w	r4, r0, #20
 8019116:	dd45      	ble.n	80191a4 <rshift+0xa0>
 8019118:	f011 011f 	ands.w	r1, r1, #31
 801911c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019120:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019124:	d10c      	bne.n	8019140 <rshift+0x3c>
 8019126:	f100 0710 	add.w	r7, r0, #16
 801912a:	4629      	mov	r1, r5
 801912c:	42b1      	cmp	r1, r6
 801912e:	d334      	bcc.n	801919a <rshift+0x96>
 8019130:	1a9b      	subs	r3, r3, r2
 8019132:	009b      	lsls	r3, r3, #2
 8019134:	1eea      	subs	r2, r5, #3
 8019136:	4296      	cmp	r6, r2
 8019138:	bf38      	it	cc
 801913a:	2300      	movcc	r3, #0
 801913c:	4423      	add	r3, r4
 801913e:	e015      	b.n	801916c <rshift+0x68>
 8019140:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019144:	f1c1 0820 	rsb	r8, r1, #32
 8019148:	40cf      	lsrs	r7, r1
 801914a:	f105 0e04 	add.w	lr, r5, #4
 801914e:	46a1      	mov	r9, r4
 8019150:	4576      	cmp	r6, lr
 8019152:	46f4      	mov	ip, lr
 8019154:	d815      	bhi.n	8019182 <rshift+0x7e>
 8019156:	1a9a      	subs	r2, r3, r2
 8019158:	0092      	lsls	r2, r2, #2
 801915a:	3a04      	subs	r2, #4
 801915c:	3501      	adds	r5, #1
 801915e:	42ae      	cmp	r6, r5
 8019160:	bf38      	it	cc
 8019162:	2200      	movcc	r2, #0
 8019164:	18a3      	adds	r3, r4, r2
 8019166:	50a7      	str	r7, [r4, r2]
 8019168:	b107      	cbz	r7, 801916c <rshift+0x68>
 801916a:	3304      	adds	r3, #4
 801916c:	1b1a      	subs	r2, r3, r4
 801916e:	42a3      	cmp	r3, r4
 8019170:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019174:	bf08      	it	eq
 8019176:	2300      	moveq	r3, #0
 8019178:	6102      	str	r2, [r0, #16]
 801917a:	bf08      	it	eq
 801917c:	6143      	streq	r3, [r0, #20]
 801917e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019182:	f8dc c000 	ldr.w	ip, [ip]
 8019186:	fa0c fc08 	lsl.w	ip, ip, r8
 801918a:	ea4c 0707 	orr.w	r7, ip, r7
 801918e:	f849 7b04 	str.w	r7, [r9], #4
 8019192:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019196:	40cf      	lsrs	r7, r1
 8019198:	e7da      	b.n	8019150 <rshift+0x4c>
 801919a:	f851 cb04 	ldr.w	ip, [r1], #4
 801919e:	f847 cf04 	str.w	ip, [r7, #4]!
 80191a2:	e7c3      	b.n	801912c <rshift+0x28>
 80191a4:	4623      	mov	r3, r4
 80191a6:	e7e1      	b.n	801916c <rshift+0x68>

080191a8 <__hexdig_fun>:
 80191a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80191ac:	2b09      	cmp	r3, #9
 80191ae:	d802      	bhi.n	80191b6 <__hexdig_fun+0xe>
 80191b0:	3820      	subs	r0, #32
 80191b2:	b2c0      	uxtb	r0, r0
 80191b4:	4770      	bx	lr
 80191b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80191ba:	2b05      	cmp	r3, #5
 80191bc:	d801      	bhi.n	80191c2 <__hexdig_fun+0x1a>
 80191be:	3847      	subs	r0, #71	; 0x47
 80191c0:	e7f7      	b.n	80191b2 <__hexdig_fun+0xa>
 80191c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80191c6:	2b05      	cmp	r3, #5
 80191c8:	d801      	bhi.n	80191ce <__hexdig_fun+0x26>
 80191ca:	3827      	subs	r0, #39	; 0x27
 80191cc:	e7f1      	b.n	80191b2 <__hexdig_fun+0xa>
 80191ce:	2000      	movs	r0, #0
 80191d0:	4770      	bx	lr
	...

080191d4 <__gethex>:
 80191d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191d8:	ed2d 8b02 	vpush	{d8}
 80191dc:	b089      	sub	sp, #36	; 0x24
 80191de:	ee08 0a10 	vmov	s16, r0
 80191e2:	9304      	str	r3, [sp, #16]
 80191e4:	4bb4      	ldr	r3, [pc, #720]	; (80194b8 <__gethex+0x2e4>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	9301      	str	r3, [sp, #4]
 80191ea:	4618      	mov	r0, r3
 80191ec:	468b      	mov	fp, r1
 80191ee:	4690      	mov	r8, r2
 80191f0:	f7e7 f80e 	bl	8000210 <strlen>
 80191f4:	9b01      	ldr	r3, [sp, #4]
 80191f6:	f8db 2000 	ldr.w	r2, [fp]
 80191fa:	4403      	add	r3, r0
 80191fc:	4682      	mov	sl, r0
 80191fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019202:	9305      	str	r3, [sp, #20]
 8019204:	1c93      	adds	r3, r2, #2
 8019206:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801920a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801920e:	32fe      	adds	r2, #254	; 0xfe
 8019210:	18d1      	adds	r1, r2, r3
 8019212:	461f      	mov	r7, r3
 8019214:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019218:	9100      	str	r1, [sp, #0]
 801921a:	2830      	cmp	r0, #48	; 0x30
 801921c:	d0f8      	beq.n	8019210 <__gethex+0x3c>
 801921e:	f7ff ffc3 	bl	80191a8 <__hexdig_fun>
 8019222:	4604      	mov	r4, r0
 8019224:	2800      	cmp	r0, #0
 8019226:	d13a      	bne.n	801929e <__gethex+0xca>
 8019228:	9901      	ldr	r1, [sp, #4]
 801922a:	4652      	mov	r2, sl
 801922c:	4638      	mov	r0, r7
 801922e:	f7fe ffa2 	bl	8018176 <strncmp>
 8019232:	4605      	mov	r5, r0
 8019234:	2800      	cmp	r0, #0
 8019236:	d168      	bne.n	801930a <__gethex+0x136>
 8019238:	f817 000a 	ldrb.w	r0, [r7, sl]
 801923c:	eb07 060a 	add.w	r6, r7, sl
 8019240:	f7ff ffb2 	bl	80191a8 <__hexdig_fun>
 8019244:	2800      	cmp	r0, #0
 8019246:	d062      	beq.n	801930e <__gethex+0x13a>
 8019248:	4633      	mov	r3, r6
 801924a:	7818      	ldrb	r0, [r3, #0]
 801924c:	2830      	cmp	r0, #48	; 0x30
 801924e:	461f      	mov	r7, r3
 8019250:	f103 0301 	add.w	r3, r3, #1
 8019254:	d0f9      	beq.n	801924a <__gethex+0x76>
 8019256:	f7ff ffa7 	bl	80191a8 <__hexdig_fun>
 801925a:	2301      	movs	r3, #1
 801925c:	fab0 f480 	clz	r4, r0
 8019260:	0964      	lsrs	r4, r4, #5
 8019262:	4635      	mov	r5, r6
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	463a      	mov	r2, r7
 8019268:	4616      	mov	r6, r2
 801926a:	3201      	adds	r2, #1
 801926c:	7830      	ldrb	r0, [r6, #0]
 801926e:	f7ff ff9b 	bl	80191a8 <__hexdig_fun>
 8019272:	2800      	cmp	r0, #0
 8019274:	d1f8      	bne.n	8019268 <__gethex+0x94>
 8019276:	9901      	ldr	r1, [sp, #4]
 8019278:	4652      	mov	r2, sl
 801927a:	4630      	mov	r0, r6
 801927c:	f7fe ff7b 	bl	8018176 <strncmp>
 8019280:	b980      	cbnz	r0, 80192a4 <__gethex+0xd0>
 8019282:	b94d      	cbnz	r5, 8019298 <__gethex+0xc4>
 8019284:	eb06 050a 	add.w	r5, r6, sl
 8019288:	462a      	mov	r2, r5
 801928a:	4616      	mov	r6, r2
 801928c:	3201      	adds	r2, #1
 801928e:	7830      	ldrb	r0, [r6, #0]
 8019290:	f7ff ff8a 	bl	80191a8 <__hexdig_fun>
 8019294:	2800      	cmp	r0, #0
 8019296:	d1f8      	bne.n	801928a <__gethex+0xb6>
 8019298:	1bad      	subs	r5, r5, r6
 801929a:	00ad      	lsls	r5, r5, #2
 801929c:	e004      	b.n	80192a8 <__gethex+0xd4>
 801929e:	2400      	movs	r4, #0
 80192a0:	4625      	mov	r5, r4
 80192a2:	e7e0      	b.n	8019266 <__gethex+0x92>
 80192a4:	2d00      	cmp	r5, #0
 80192a6:	d1f7      	bne.n	8019298 <__gethex+0xc4>
 80192a8:	7833      	ldrb	r3, [r6, #0]
 80192aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80192ae:	2b50      	cmp	r3, #80	; 0x50
 80192b0:	d13b      	bne.n	801932a <__gethex+0x156>
 80192b2:	7873      	ldrb	r3, [r6, #1]
 80192b4:	2b2b      	cmp	r3, #43	; 0x2b
 80192b6:	d02c      	beq.n	8019312 <__gethex+0x13e>
 80192b8:	2b2d      	cmp	r3, #45	; 0x2d
 80192ba:	d02e      	beq.n	801931a <__gethex+0x146>
 80192bc:	1c71      	adds	r1, r6, #1
 80192be:	f04f 0900 	mov.w	r9, #0
 80192c2:	7808      	ldrb	r0, [r1, #0]
 80192c4:	f7ff ff70 	bl	80191a8 <__hexdig_fun>
 80192c8:	1e43      	subs	r3, r0, #1
 80192ca:	b2db      	uxtb	r3, r3
 80192cc:	2b18      	cmp	r3, #24
 80192ce:	d82c      	bhi.n	801932a <__gethex+0x156>
 80192d0:	f1a0 0210 	sub.w	r2, r0, #16
 80192d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80192d8:	f7ff ff66 	bl	80191a8 <__hexdig_fun>
 80192dc:	1e43      	subs	r3, r0, #1
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	2b18      	cmp	r3, #24
 80192e2:	d91d      	bls.n	8019320 <__gethex+0x14c>
 80192e4:	f1b9 0f00 	cmp.w	r9, #0
 80192e8:	d000      	beq.n	80192ec <__gethex+0x118>
 80192ea:	4252      	negs	r2, r2
 80192ec:	4415      	add	r5, r2
 80192ee:	f8cb 1000 	str.w	r1, [fp]
 80192f2:	b1e4      	cbz	r4, 801932e <__gethex+0x15a>
 80192f4:	9b00      	ldr	r3, [sp, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	bf14      	ite	ne
 80192fa:	2700      	movne	r7, #0
 80192fc:	2706      	moveq	r7, #6
 80192fe:	4638      	mov	r0, r7
 8019300:	b009      	add	sp, #36	; 0x24
 8019302:	ecbd 8b02 	vpop	{d8}
 8019306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801930a:	463e      	mov	r6, r7
 801930c:	4625      	mov	r5, r4
 801930e:	2401      	movs	r4, #1
 8019310:	e7ca      	b.n	80192a8 <__gethex+0xd4>
 8019312:	f04f 0900 	mov.w	r9, #0
 8019316:	1cb1      	adds	r1, r6, #2
 8019318:	e7d3      	b.n	80192c2 <__gethex+0xee>
 801931a:	f04f 0901 	mov.w	r9, #1
 801931e:	e7fa      	b.n	8019316 <__gethex+0x142>
 8019320:	230a      	movs	r3, #10
 8019322:	fb03 0202 	mla	r2, r3, r2, r0
 8019326:	3a10      	subs	r2, #16
 8019328:	e7d4      	b.n	80192d4 <__gethex+0x100>
 801932a:	4631      	mov	r1, r6
 801932c:	e7df      	b.n	80192ee <__gethex+0x11a>
 801932e:	1bf3      	subs	r3, r6, r7
 8019330:	3b01      	subs	r3, #1
 8019332:	4621      	mov	r1, r4
 8019334:	2b07      	cmp	r3, #7
 8019336:	dc0b      	bgt.n	8019350 <__gethex+0x17c>
 8019338:	ee18 0a10 	vmov	r0, s16
 801933c:	f000 fa8a 	bl	8019854 <_Balloc>
 8019340:	4604      	mov	r4, r0
 8019342:	b940      	cbnz	r0, 8019356 <__gethex+0x182>
 8019344:	4b5d      	ldr	r3, [pc, #372]	; (80194bc <__gethex+0x2e8>)
 8019346:	4602      	mov	r2, r0
 8019348:	21de      	movs	r1, #222	; 0xde
 801934a:	485d      	ldr	r0, [pc, #372]	; (80194c0 <__gethex+0x2ec>)
 801934c:	f7ff fdd8 	bl	8018f00 <__assert_func>
 8019350:	3101      	adds	r1, #1
 8019352:	105b      	asrs	r3, r3, #1
 8019354:	e7ee      	b.n	8019334 <__gethex+0x160>
 8019356:	f100 0914 	add.w	r9, r0, #20
 801935a:	f04f 0b00 	mov.w	fp, #0
 801935e:	f1ca 0301 	rsb	r3, sl, #1
 8019362:	f8cd 9008 	str.w	r9, [sp, #8]
 8019366:	f8cd b000 	str.w	fp, [sp]
 801936a:	9306      	str	r3, [sp, #24]
 801936c:	42b7      	cmp	r7, r6
 801936e:	d340      	bcc.n	80193f2 <__gethex+0x21e>
 8019370:	9802      	ldr	r0, [sp, #8]
 8019372:	9b00      	ldr	r3, [sp, #0]
 8019374:	f840 3b04 	str.w	r3, [r0], #4
 8019378:	eba0 0009 	sub.w	r0, r0, r9
 801937c:	1080      	asrs	r0, r0, #2
 801937e:	0146      	lsls	r6, r0, #5
 8019380:	6120      	str	r0, [r4, #16]
 8019382:	4618      	mov	r0, r3
 8019384:	f000 fb58 	bl	8019a38 <__hi0bits>
 8019388:	1a30      	subs	r0, r6, r0
 801938a:	f8d8 6000 	ldr.w	r6, [r8]
 801938e:	42b0      	cmp	r0, r6
 8019390:	dd63      	ble.n	801945a <__gethex+0x286>
 8019392:	1b87      	subs	r7, r0, r6
 8019394:	4639      	mov	r1, r7
 8019396:	4620      	mov	r0, r4
 8019398:	f000 fefc 	bl	801a194 <__any_on>
 801939c:	4682      	mov	sl, r0
 801939e:	b1a8      	cbz	r0, 80193cc <__gethex+0x1f8>
 80193a0:	1e7b      	subs	r3, r7, #1
 80193a2:	1159      	asrs	r1, r3, #5
 80193a4:	f003 021f 	and.w	r2, r3, #31
 80193a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80193ac:	f04f 0a01 	mov.w	sl, #1
 80193b0:	fa0a f202 	lsl.w	r2, sl, r2
 80193b4:	420a      	tst	r2, r1
 80193b6:	d009      	beq.n	80193cc <__gethex+0x1f8>
 80193b8:	4553      	cmp	r3, sl
 80193ba:	dd05      	ble.n	80193c8 <__gethex+0x1f4>
 80193bc:	1eb9      	subs	r1, r7, #2
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 fee8 	bl	801a194 <__any_on>
 80193c4:	2800      	cmp	r0, #0
 80193c6:	d145      	bne.n	8019454 <__gethex+0x280>
 80193c8:	f04f 0a02 	mov.w	sl, #2
 80193cc:	4639      	mov	r1, r7
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7ff fe98 	bl	8019104 <rshift>
 80193d4:	443d      	add	r5, r7
 80193d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80193da:	42ab      	cmp	r3, r5
 80193dc:	da4c      	bge.n	8019478 <__gethex+0x2a4>
 80193de:	ee18 0a10 	vmov	r0, s16
 80193e2:	4621      	mov	r1, r4
 80193e4:	f000 fa76 	bl	80198d4 <_Bfree>
 80193e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80193ea:	2300      	movs	r3, #0
 80193ec:	6013      	str	r3, [r2, #0]
 80193ee:	27a3      	movs	r7, #163	; 0xa3
 80193f0:	e785      	b.n	80192fe <__gethex+0x12a>
 80193f2:	1e73      	subs	r3, r6, #1
 80193f4:	9a05      	ldr	r2, [sp, #20]
 80193f6:	9303      	str	r3, [sp, #12]
 80193f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80193fc:	4293      	cmp	r3, r2
 80193fe:	d019      	beq.n	8019434 <__gethex+0x260>
 8019400:	f1bb 0f20 	cmp.w	fp, #32
 8019404:	d107      	bne.n	8019416 <__gethex+0x242>
 8019406:	9b02      	ldr	r3, [sp, #8]
 8019408:	9a00      	ldr	r2, [sp, #0]
 801940a:	f843 2b04 	str.w	r2, [r3], #4
 801940e:	9302      	str	r3, [sp, #8]
 8019410:	2300      	movs	r3, #0
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	469b      	mov	fp, r3
 8019416:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801941a:	f7ff fec5 	bl	80191a8 <__hexdig_fun>
 801941e:	9b00      	ldr	r3, [sp, #0]
 8019420:	f000 000f 	and.w	r0, r0, #15
 8019424:	fa00 f00b 	lsl.w	r0, r0, fp
 8019428:	4303      	orrs	r3, r0
 801942a:	9300      	str	r3, [sp, #0]
 801942c:	f10b 0b04 	add.w	fp, fp, #4
 8019430:	9b03      	ldr	r3, [sp, #12]
 8019432:	e00d      	b.n	8019450 <__gethex+0x27c>
 8019434:	9b03      	ldr	r3, [sp, #12]
 8019436:	9a06      	ldr	r2, [sp, #24]
 8019438:	4413      	add	r3, r2
 801943a:	42bb      	cmp	r3, r7
 801943c:	d3e0      	bcc.n	8019400 <__gethex+0x22c>
 801943e:	4618      	mov	r0, r3
 8019440:	9901      	ldr	r1, [sp, #4]
 8019442:	9307      	str	r3, [sp, #28]
 8019444:	4652      	mov	r2, sl
 8019446:	f7fe fe96 	bl	8018176 <strncmp>
 801944a:	9b07      	ldr	r3, [sp, #28]
 801944c:	2800      	cmp	r0, #0
 801944e:	d1d7      	bne.n	8019400 <__gethex+0x22c>
 8019450:	461e      	mov	r6, r3
 8019452:	e78b      	b.n	801936c <__gethex+0x198>
 8019454:	f04f 0a03 	mov.w	sl, #3
 8019458:	e7b8      	b.n	80193cc <__gethex+0x1f8>
 801945a:	da0a      	bge.n	8019472 <__gethex+0x29e>
 801945c:	1a37      	subs	r7, r6, r0
 801945e:	4621      	mov	r1, r4
 8019460:	ee18 0a10 	vmov	r0, s16
 8019464:	463a      	mov	r2, r7
 8019466:	f000 fc51 	bl	8019d0c <__lshift>
 801946a:	1bed      	subs	r5, r5, r7
 801946c:	4604      	mov	r4, r0
 801946e:	f100 0914 	add.w	r9, r0, #20
 8019472:	f04f 0a00 	mov.w	sl, #0
 8019476:	e7ae      	b.n	80193d6 <__gethex+0x202>
 8019478:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801947c:	42a8      	cmp	r0, r5
 801947e:	dd72      	ble.n	8019566 <__gethex+0x392>
 8019480:	1b45      	subs	r5, r0, r5
 8019482:	42ae      	cmp	r6, r5
 8019484:	dc36      	bgt.n	80194f4 <__gethex+0x320>
 8019486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801948a:	2b02      	cmp	r3, #2
 801948c:	d02a      	beq.n	80194e4 <__gethex+0x310>
 801948e:	2b03      	cmp	r3, #3
 8019490:	d02c      	beq.n	80194ec <__gethex+0x318>
 8019492:	2b01      	cmp	r3, #1
 8019494:	d11c      	bne.n	80194d0 <__gethex+0x2fc>
 8019496:	42ae      	cmp	r6, r5
 8019498:	d11a      	bne.n	80194d0 <__gethex+0x2fc>
 801949a:	2e01      	cmp	r6, #1
 801949c:	d112      	bne.n	80194c4 <__gethex+0x2f0>
 801949e:	9a04      	ldr	r2, [sp, #16]
 80194a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80194a4:	6013      	str	r3, [r2, #0]
 80194a6:	2301      	movs	r3, #1
 80194a8:	6123      	str	r3, [r4, #16]
 80194aa:	f8c9 3000 	str.w	r3, [r9]
 80194ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80194b0:	2762      	movs	r7, #98	; 0x62
 80194b2:	601c      	str	r4, [r3, #0]
 80194b4:	e723      	b.n	80192fe <__gethex+0x12a>
 80194b6:	bf00      	nop
 80194b8:	0801e648 	.word	0x0801e648
 80194bc:	0801e5d1 	.word	0x0801e5d1
 80194c0:	0801e5e2 	.word	0x0801e5e2
 80194c4:	1e71      	subs	r1, r6, #1
 80194c6:	4620      	mov	r0, r4
 80194c8:	f000 fe64 	bl	801a194 <__any_on>
 80194cc:	2800      	cmp	r0, #0
 80194ce:	d1e6      	bne.n	801949e <__gethex+0x2ca>
 80194d0:	ee18 0a10 	vmov	r0, s16
 80194d4:	4621      	mov	r1, r4
 80194d6:	f000 f9fd 	bl	80198d4 <_Bfree>
 80194da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80194dc:	2300      	movs	r3, #0
 80194de:	6013      	str	r3, [r2, #0]
 80194e0:	2750      	movs	r7, #80	; 0x50
 80194e2:	e70c      	b.n	80192fe <__gethex+0x12a>
 80194e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d1f2      	bne.n	80194d0 <__gethex+0x2fc>
 80194ea:	e7d8      	b.n	801949e <__gethex+0x2ca>
 80194ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d1d5      	bne.n	801949e <__gethex+0x2ca>
 80194f2:	e7ed      	b.n	80194d0 <__gethex+0x2fc>
 80194f4:	1e6f      	subs	r7, r5, #1
 80194f6:	f1ba 0f00 	cmp.w	sl, #0
 80194fa:	d131      	bne.n	8019560 <__gethex+0x38c>
 80194fc:	b127      	cbz	r7, 8019508 <__gethex+0x334>
 80194fe:	4639      	mov	r1, r7
 8019500:	4620      	mov	r0, r4
 8019502:	f000 fe47 	bl	801a194 <__any_on>
 8019506:	4682      	mov	sl, r0
 8019508:	117b      	asrs	r3, r7, #5
 801950a:	2101      	movs	r1, #1
 801950c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019510:	f007 071f 	and.w	r7, r7, #31
 8019514:	fa01 f707 	lsl.w	r7, r1, r7
 8019518:	421f      	tst	r7, r3
 801951a:	4629      	mov	r1, r5
 801951c:	4620      	mov	r0, r4
 801951e:	bf18      	it	ne
 8019520:	f04a 0a02 	orrne.w	sl, sl, #2
 8019524:	1b76      	subs	r6, r6, r5
 8019526:	f7ff fded 	bl	8019104 <rshift>
 801952a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801952e:	2702      	movs	r7, #2
 8019530:	f1ba 0f00 	cmp.w	sl, #0
 8019534:	d048      	beq.n	80195c8 <__gethex+0x3f4>
 8019536:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801953a:	2b02      	cmp	r3, #2
 801953c:	d015      	beq.n	801956a <__gethex+0x396>
 801953e:	2b03      	cmp	r3, #3
 8019540:	d017      	beq.n	8019572 <__gethex+0x39e>
 8019542:	2b01      	cmp	r3, #1
 8019544:	d109      	bne.n	801955a <__gethex+0x386>
 8019546:	f01a 0f02 	tst.w	sl, #2
 801954a:	d006      	beq.n	801955a <__gethex+0x386>
 801954c:	f8d9 0000 	ldr.w	r0, [r9]
 8019550:	ea4a 0a00 	orr.w	sl, sl, r0
 8019554:	f01a 0f01 	tst.w	sl, #1
 8019558:	d10e      	bne.n	8019578 <__gethex+0x3a4>
 801955a:	f047 0710 	orr.w	r7, r7, #16
 801955e:	e033      	b.n	80195c8 <__gethex+0x3f4>
 8019560:	f04f 0a01 	mov.w	sl, #1
 8019564:	e7d0      	b.n	8019508 <__gethex+0x334>
 8019566:	2701      	movs	r7, #1
 8019568:	e7e2      	b.n	8019530 <__gethex+0x35c>
 801956a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801956c:	f1c3 0301 	rsb	r3, r3, #1
 8019570:	9315      	str	r3, [sp, #84]	; 0x54
 8019572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019574:	2b00      	cmp	r3, #0
 8019576:	d0f0      	beq.n	801955a <__gethex+0x386>
 8019578:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801957c:	f104 0314 	add.w	r3, r4, #20
 8019580:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019584:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019588:	f04f 0c00 	mov.w	ip, #0
 801958c:	4618      	mov	r0, r3
 801958e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019592:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8019596:	d01c      	beq.n	80195d2 <__gethex+0x3fe>
 8019598:	3201      	adds	r2, #1
 801959a:	6002      	str	r2, [r0, #0]
 801959c:	2f02      	cmp	r7, #2
 801959e:	f104 0314 	add.w	r3, r4, #20
 80195a2:	d13f      	bne.n	8019624 <__gethex+0x450>
 80195a4:	f8d8 2000 	ldr.w	r2, [r8]
 80195a8:	3a01      	subs	r2, #1
 80195aa:	42b2      	cmp	r2, r6
 80195ac:	d10a      	bne.n	80195c4 <__gethex+0x3f0>
 80195ae:	1171      	asrs	r1, r6, #5
 80195b0:	2201      	movs	r2, #1
 80195b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80195b6:	f006 061f 	and.w	r6, r6, #31
 80195ba:	fa02 f606 	lsl.w	r6, r2, r6
 80195be:	421e      	tst	r6, r3
 80195c0:	bf18      	it	ne
 80195c2:	4617      	movne	r7, r2
 80195c4:	f047 0720 	orr.w	r7, r7, #32
 80195c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80195ca:	601c      	str	r4, [r3, #0]
 80195cc:	9b04      	ldr	r3, [sp, #16]
 80195ce:	601d      	str	r5, [r3, #0]
 80195d0:	e695      	b.n	80192fe <__gethex+0x12a>
 80195d2:	4299      	cmp	r1, r3
 80195d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80195d8:	d8d8      	bhi.n	801958c <__gethex+0x3b8>
 80195da:	68a3      	ldr	r3, [r4, #8]
 80195dc:	459b      	cmp	fp, r3
 80195de:	db19      	blt.n	8019614 <__gethex+0x440>
 80195e0:	6861      	ldr	r1, [r4, #4]
 80195e2:	ee18 0a10 	vmov	r0, s16
 80195e6:	3101      	adds	r1, #1
 80195e8:	f000 f934 	bl	8019854 <_Balloc>
 80195ec:	4681      	mov	r9, r0
 80195ee:	b918      	cbnz	r0, 80195f8 <__gethex+0x424>
 80195f0:	4b1a      	ldr	r3, [pc, #104]	; (801965c <__gethex+0x488>)
 80195f2:	4602      	mov	r2, r0
 80195f4:	2184      	movs	r1, #132	; 0x84
 80195f6:	e6a8      	b.n	801934a <__gethex+0x176>
 80195f8:	6922      	ldr	r2, [r4, #16]
 80195fa:	3202      	adds	r2, #2
 80195fc:	f104 010c 	add.w	r1, r4, #12
 8019600:	0092      	lsls	r2, r2, #2
 8019602:	300c      	adds	r0, #12
 8019604:	f7fe fbbf 	bl	8017d86 <memcpy>
 8019608:	4621      	mov	r1, r4
 801960a:	ee18 0a10 	vmov	r0, s16
 801960e:	f000 f961 	bl	80198d4 <_Bfree>
 8019612:	464c      	mov	r4, r9
 8019614:	6923      	ldr	r3, [r4, #16]
 8019616:	1c5a      	adds	r2, r3, #1
 8019618:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801961c:	6122      	str	r2, [r4, #16]
 801961e:	2201      	movs	r2, #1
 8019620:	615a      	str	r2, [r3, #20]
 8019622:	e7bb      	b.n	801959c <__gethex+0x3c8>
 8019624:	6922      	ldr	r2, [r4, #16]
 8019626:	455a      	cmp	r2, fp
 8019628:	dd0b      	ble.n	8019642 <__gethex+0x46e>
 801962a:	2101      	movs	r1, #1
 801962c:	4620      	mov	r0, r4
 801962e:	f7ff fd69 	bl	8019104 <rshift>
 8019632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019636:	3501      	adds	r5, #1
 8019638:	42ab      	cmp	r3, r5
 801963a:	f6ff aed0 	blt.w	80193de <__gethex+0x20a>
 801963e:	2701      	movs	r7, #1
 8019640:	e7c0      	b.n	80195c4 <__gethex+0x3f0>
 8019642:	f016 061f 	ands.w	r6, r6, #31
 8019646:	d0fa      	beq.n	801963e <__gethex+0x46a>
 8019648:	4453      	add	r3, sl
 801964a:	f1c6 0620 	rsb	r6, r6, #32
 801964e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019652:	f000 f9f1 	bl	8019a38 <__hi0bits>
 8019656:	42b0      	cmp	r0, r6
 8019658:	dbe7      	blt.n	801962a <__gethex+0x456>
 801965a:	e7f0      	b.n	801963e <__gethex+0x46a>
 801965c:	0801e5d1 	.word	0x0801e5d1

08019660 <L_shift>:
 8019660:	f1c2 0208 	rsb	r2, r2, #8
 8019664:	0092      	lsls	r2, r2, #2
 8019666:	b570      	push	{r4, r5, r6, lr}
 8019668:	f1c2 0620 	rsb	r6, r2, #32
 801966c:	6843      	ldr	r3, [r0, #4]
 801966e:	6804      	ldr	r4, [r0, #0]
 8019670:	fa03 f506 	lsl.w	r5, r3, r6
 8019674:	432c      	orrs	r4, r5
 8019676:	40d3      	lsrs	r3, r2
 8019678:	6004      	str	r4, [r0, #0]
 801967a:	f840 3f04 	str.w	r3, [r0, #4]!
 801967e:	4288      	cmp	r0, r1
 8019680:	d3f4      	bcc.n	801966c <L_shift+0xc>
 8019682:	bd70      	pop	{r4, r5, r6, pc}

08019684 <__match>:
 8019684:	b530      	push	{r4, r5, lr}
 8019686:	6803      	ldr	r3, [r0, #0]
 8019688:	3301      	adds	r3, #1
 801968a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801968e:	b914      	cbnz	r4, 8019696 <__match+0x12>
 8019690:	6003      	str	r3, [r0, #0]
 8019692:	2001      	movs	r0, #1
 8019694:	bd30      	pop	{r4, r5, pc}
 8019696:	f813 2b01 	ldrb.w	r2, [r3], #1
 801969a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801969e:	2d19      	cmp	r5, #25
 80196a0:	bf98      	it	ls
 80196a2:	3220      	addls	r2, #32
 80196a4:	42a2      	cmp	r2, r4
 80196a6:	d0f0      	beq.n	801968a <__match+0x6>
 80196a8:	2000      	movs	r0, #0
 80196aa:	e7f3      	b.n	8019694 <__match+0x10>

080196ac <__hexnan>:
 80196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b0:	680b      	ldr	r3, [r1, #0]
 80196b2:	115e      	asrs	r6, r3, #5
 80196b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80196b8:	f013 031f 	ands.w	r3, r3, #31
 80196bc:	b087      	sub	sp, #28
 80196be:	bf18      	it	ne
 80196c0:	3604      	addne	r6, #4
 80196c2:	2500      	movs	r5, #0
 80196c4:	1f37      	subs	r7, r6, #4
 80196c6:	4690      	mov	r8, r2
 80196c8:	6802      	ldr	r2, [r0, #0]
 80196ca:	9301      	str	r3, [sp, #4]
 80196cc:	4682      	mov	sl, r0
 80196ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80196d2:	46b9      	mov	r9, r7
 80196d4:	463c      	mov	r4, r7
 80196d6:	9502      	str	r5, [sp, #8]
 80196d8:	46ab      	mov	fp, r5
 80196da:	7851      	ldrb	r1, [r2, #1]
 80196dc:	1c53      	adds	r3, r2, #1
 80196de:	9303      	str	r3, [sp, #12]
 80196e0:	b341      	cbz	r1, 8019734 <__hexnan+0x88>
 80196e2:	4608      	mov	r0, r1
 80196e4:	9205      	str	r2, [sp, #20]
 80196e6:	9104      	str	r1, [sp, #16]
 80196e8:	f7ff fd5e 	bl	80191a8 <__hexdig_fun>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d14f      	bne.n	8019790 <__hexnan+0xe4>
 80196f0:	9904      	ldr	r1, [sp, #16]
 80196f2:	9a05      	ldr	r2, [sp, #20]
 80196f4:	2920      	cmp	r1, #32
 80196f6:	d818      	bhi.n	801972a <__hexnan+0x7e>
 80196f8:	9b02      	ldr	r3, [sp, #8]
 80196fa:	459b      	cmp	fp, r3
 80196fc:	dd13      	ble.n	8019726 <__hexnan+0x7a>
 80196fe:	454c      	cmp	r4, r9
 8019700:	d206      	bcs.n	8019710 <__hexnan+0x64>
 8019702:	2d07      	cmp	r5, #7
 8019704:	dc04      	bgt.n	8019710 <__hexnan+0x64>
 8019706:	462a      	mov	r2, r5
 8019708:	4649      	mov	r1, r9
 801970a:	4620      	mov	r0, r4
 801970c:	f7ff ffa8 	bl	8019660 <L_shift>
 8019710:	4544      	cmp	r4, r8
 8019712:	d950      	bls.n	80197b6 <__hexnan+0x10a>
 8019714:	2300      	movs	r3, #0
 8019716:	f1a4 0904 	sub.w	r9, r4, #4
 801971a:	f844 3c04 	str.w	r3, [r4, #-4]
 801971e:	f8cd b008 	str.w	fp, [sp, #8]
 8019722:	464c      	mov	r4, r9
 8019724:	461d      	mov	r5, r3
 8019726:	9a03      	ldr	r2, [sp, #12]
 8019728:	e7d7      	b.n	80196da <__hexnan+0x2e>
 801972a:	2929      	cmp	r1, #41	; 0x29
 801972c:	d156      	bne.n	80197dc <__hexnan+0x130>
 801972e:	3202      	adds	r2, #2
 8019730:	f8ca 2000 	str.w	r2, [sl]
 8019734:	f1bb 0f00 	cmp.w	fp, #0
 8019738:	d050      	beq.n	80197dc <__hexnan+0x130>
 801973a:	454c      	cmp	r4, r9
 801973c:	d206      	bcs.n	801974c <__hexnan+0xa0>
 801973e:	2d07      	cmp	r5, #7
 8019740:	dc04      	bgt.n	801974c <__hexnan+0xa0>
 8019742:	462a      	mov	r2, r5
 8019744:	4649      	mov	r1, r9
 8019746:	4620      	mov	r0, r4
 8019748:	f7ff ff8a 	bl	8019660 <L_shift>
 801974c:	4544      	cmp	r4, r8
 801974e:	d934      	bls.n	80197ba <__hexnan+0x10e>
 8019750:	f1a8 0204 	sub.w	r2, r8, #4
 8019754:	4623      	mov	r3, r4
 8019756:	f853 1b04 	ldr.w	r1, [r3], #4
 801975a:	f842 1f04 	str.w	r1, [r2, #4]!
 801975e:	429f      	cmp	r7, r3
 8019760:	d2f9      	bcs.n	8019756 <__hexnan+0xaa>
 8019762:	1b3b      	subs	r3, r7, r4
 8019764:	f023 0303 	bic.w	r3, r3, #3
 8019768:	3304      	adds	r3, #4
 801976a:	3401      	adds	r4, #1
 801976c:	3e03      	subs	r6, #3
 801976e:	42b4      	cmp	r4, r6
 8019770:	bf88      	it	hi
 8019772:	2304      	movhi	r3, #4
 8019774:	4443      	add	r3, r8
 8019776:	2200      	movs	r2, #0
 8019778:	f843 2b04 	str.w	r2, [r3], #4
 801977c:	429f      	cmp	r7, r3
 801977e:	d2fb      	bcs.n	8019778 <__hexnan+0xcc>
 8019780:	683b      	ldr	r3, [r7, #0]
 8019782:	b91b      	cbnz	r3, 801978c <__hexnan+0xe0>
 8019784:	4547      	cmp	r7, r8
 8019786:	d127      	bne.n	80197d8 <__hexnan+0x12c>
 8019788:	2301      	movs	r3, #1
 801978a:	603b      	str	r3, [r7, #0]
 801978c:	2005      	movs	r0, #5
 801978e:	e026      	b.n	80197de <__hexnan+0x132>
 8019790:	3501      	adds	r5, #1
 8019792:	2d08      	cmp	r5, #8
 8019794:	f10b 0b01 	add.w	fp, fp, #1
 8019798:	dd06      	ble.n	80197a8 <__hexnan+0xfc>
 801979a:	4544      	cmp	r4, r8
 801979c:	d9c3      	bls.n	8019726 <__hexnan+0x7a>
 801979e:	2300      	movs	r3, #0
 80197a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80197a4:	2501      	movs	r5, #1
 80197a6:	3c04      	subs	r4, #4
 80197a8:	6822      	ldr	r2, [r4, #0]
 80197aa:	f000 000f 	and.w	r0, r0, #15
 80197ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80197b2:	6022      	str	r2, [r4, #0]
 80197b4:	e7b7      	b.n	8019726 <__hexnan+0x7a>
 80197b6:	2508      	movs	r5, #8
 80197b8:	e7b5      	b.n	8019726 <__hexnan+0x7a>
 80197ba:	9b01      	ldr	r3, [sp, #4]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d0df      	beq.n	8019780 <__hexnan+0xd4>
 80197c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80197c4:	f1c3 0320 	rsb	r3, r3, #32
 80197c8:	fa22 f303 	lsr.w	r3, r2, r3
 80197cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80197d0:	401a      	ands	r2, r3
 80197d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80197d6:	e7d3      	b.n	8019780 <__hexnan+0xd4>
 80197d8:	3f04      	subs	r7, #4
 80197da:	e7d1      	b.n	8019780 <__hexnan+0xd4>
 80197dc:	2004      	movs	r0, #4
 80197de:	b007      	add	sp, #28
 80197e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197e4 <_lseek_r>:
 80197e4:	b538      	push	{r3, r4, r5, lr}
 80197e6:	4d07      	ldr	r5, [pc, #28]	; (8019804 <_lseek_r+0x20>)
 80197e8:	4604      	mov	r4, r0
 80197ea:	4608      	mov	r0, r1
 80197ec:	4611      	mov	r1, r2
 80197ee:	2200      	movs	r2, #0
 80197f0:	602a      	str	r2, [r5, #0]
 80197f2:	461a      	mov	r2, r3
 80197f4:	f7e8 fad6 	bl	8001da4 <_lseek>
 80197f8:	1c43      	adds	r3, r0, #1
 80197fa:	d102      	bne.n	8019802 <_lseek_r+0x1e>
 80197fc:	682b      	ldr	r3, [r5, #0]
 80197fe:	b103      	cbz	r3, 8019802 <_lseek_r+0x1e>
 8019800:	6023      	str	r3, [r4, #0]
 8019802:	bd38      	pop	{r3, r4, r5, pc}
 8019804:	20011d1c 	.word	0x20011d1c

08019808 <malloc>:
 8019808:	4b02      	ldr	r3, [pc, #8]	; (8019814 <malloc+0xc>)
 801980a:	4601      	mov	r1, r0
 801980c:	6818      	ldr	r0, [r3, #0]
 801980e:	f7fe bb0b 	b.w	8017e28 <_malloc_r>
 8019812:	bf00      	nop
 8019814:	2000002c 	.word	0x2000002c

08019818 <__ascii_mbtowc>:
 8019818:	b082      	sub	sp, #8
 801981a:	b901      	cbnz	r1, 801981e <__ascii_mbtowc+0x6>
 801981c:	a901      	add	r1, sp, #4
 801981e:	b142      	cbz	r2, 8019832 <__ascii_mbtowc+0x1a>
 8019820:	b14b      	cbz	r3, 8019836 <__ascii_mbtowc+0x1e>
 8019822:	7813      	ldrb	r3, [r2, #0]
 8019824:	600b      	str	r3, [r1, #0]
 8019826:	7812      	ldrb	r2, [r2, #0]
 8019828:	1e10      	subs	r0, r2, #0
 801982a:	bf18      	it	ne
 801982c:	2001      	movne	r0, #1
 801982e:	b002      	add	sp, #8
 8019830:	4770      	bx	lr
 8019832:	4610      	mov	r0, r2
 8019834:	e7fb      	b.n	801982e <__ascii_mbtowc+0x16>
 8019836:	f06f 0001 	mvn.w	r0, #1
 801983a:	e7f8      	b.n	801982e <__ascii_mbtowc+0x16>

0801983c <__malloc_lock>:
 801983c:	4801      	ldr	r0, [pc, #4]	; (8019844 <__malloc_lock+0x8>)
 801983e:	f7fe ba90 	b.w	8017d62 <__retarget_lock_acquire_recursive>
 8019842:	bf00      	nop
 8019844:	20011d10 	.word	0x20011d10

08019848 <__malloc_unlock>:
 8019848:	4801      	ldr	r0, [pc, #4]	; (8019850 <__malloc_unlock+0x8>)
 801984a:	f7fe ba8b 	b.w	8017d64 <__retarget_lock_release_recursive>
 801984e:	bf00      	nop
 8019850:	20011d10 	.word	0x20011d10

08019854 <_Balloc>:
 8019854:	b570      	push	{r4, r5, r6, lr}
 8019856:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019858:	4604      	mov	r4, r0
 801985a:	460d      	mov	r5, r1
 801985c:	b976      	cbnz	r6, 801987c <_Balloc+0x28>
 801985e:	2010      	movs	r0, #16
 8019860:	f7ff ffd2 	bl	8019808 <malloc>
 8019864:	4602      	mov	r2, r0
 8019866:	6260      	str	r0, [r4, #36]	; 0x24
 8019868:	b920      	cbnz	r0, 8019874 <_Balloc+0x20>
 801986a:	4b18      	ldr	r3, [pc, #96]	; (80198cc <_Balloc+0x78>)
 801986c:	4818      	ldr	r0, [pc, #96]	; (80198d0 <_Balloc+0x7c>)
 801986e:	2166      	movs	r1, #102	; 0x66
 8019870:	f7ff fb46 	bl	8018f00 <__assert_func>
 8019874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019878:	6006      	str	r6, [r0, #0]
 801987a:	60c6      	str	r6, [r0, #12]
 801987c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801987e:	68f3      	ldr	r3, [r6, #12]
 8019880:	b183      	cbz	r3, 80198a4 <_Balloc+0x50>
 8019882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019884:	68db      	ldr	r3, [r3, #12]
 8019886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801988a:	b9b8      	cbnz	r0, 80198bc <_Balloc+0x68>
 801988c:	2101      	movs	r1, #1
 801988e:	fa01 f605 	lsl.w	r6, r1, r5
 8019892:	1d72      	adds	r2, r6, #5
 8019894:	0092      	lsls	r2, r2, #2
 8019896:	4620      	mov	r0, r4
 8019898:	f000 fc9d 	bl	801a1d6 <_calloc_r>
 801989c:	b160      	cbz	r0, 80198b8 <_Balloc+0x64>
 801989e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80198a2:	e00e      	b.n	80198c2 <_Balloc+0x6e>
 80198a4:	2221      	movs	r2, #33	; 0x21
 80198a6:	2104      	movs	r1, #4
 80198a8:	4620      	mov	r0, r4
 80198aa:	f000 fc94 	bl	801a1d6 <_calloc_r>
 80198ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80198b0:	60f0      	str	r0, [r6, #12]
 80198b2:	68db      	ldr	r3, [r3, #12]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d1e4      	bne.n	8019882 <_Balloc+0x2e>
 80198b8:	2000      	movs	r0, #0
 80198ba:	bd70      	pop	{r4, r5, r6, pc}
 80198bc:	6802      	ldr	r2, [r0, #0]
 80198be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80198c2:	2300      	movs	r3, #0
 80198c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80198c8:	e7f7      	b.n	80198ba <_Balloc+0x66>
 80198ca:	bf00      	nop
 80198cc:	0801e468 	.word	0x0801e468
 80198d0:	0801e65c 	.word	0x0801e65c

080198d4 <_Bfree>:
 80198d4:	b570      	push	{r4, r5, r6, lr}
 80198d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80198d8:	4605      	mov	r5, r0
 80198da:	460c      	mov	r4, r1
 80198dc:	b976      	cbnz	r6, 80198fc <_Bfree+0x28>
 80198de:	2010      	movs	r0, #16
 80198e0:	f7ff ff92 	bl	8019808 <malloc>
 80198e4:	4602      	mov	r2, r0
 80198e6:	6268      	str	r0, [r5, #36]	; 0x24
 80198e8:	b920      	cbnz	r0, 80198f4 <_Bfree+0x20>
 80198ea:	4b09      	ldr	r3, [pc, #36]	; (8019910 <_Bfree+0x3c>)
 80198ec:	4809      	ldr	r0, [pc, #36]	; (8019914 <_Bfree+0x40>)
 80198ee:	218a      	movs	r1, #138	; 0x8a
 80198f0:	f7ff fb06 	bl	8018f00 <__assert_func>
 80198f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80198f8:	6006      	str	r6, [r0, #0]
 80198fa:	60c6      	str	r6, [r0, #12]
 80198fc:	b13c      	cbz	r4, 801990e <_Bfree+0x3a>
 80198fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019900:	6862      	ldr	r2, [r4, #4]
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019908:	6021      	str	r1, [r4, #0]
 801990a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801990e:	bd70      	pop	{r4, r5, r6, pc}
 8019910:	0801e468 	.word	0x0801e468
 8019914:	0801e65c 	.word	0x0801e65c

08019918 <__multadd>:
 8019918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801991c:	690d      	ldr	r5, [r1, #16]
 801991e:	4607      	mov	r7, r0
 8019920:	460c      	mov	r4, r1
 8019922:	461e      	mov	r6, r3
 8019924:	f101 0c14 	add.w	ip, r1, #20
 8019928:	2000      	movs	r0, #0
 801992a:	f8dc 3000 	ldr.w	r3, [ip]
 801992e:	b299      	uxth	r1, r3
 8019930:	fb02 6101 	mla	r1, r2, r1, r6
 8019934:	0c1e      	lsrs	r6, r3, #16
 8019936:	0c0b      	lsrs	r3, r1, #16
 8019938:	fb02 3306 	mla	r3, r2, r6, r3
 801993c:	b289      	uxth	r1, r1
 801993e:	3001      	adds	r0, #1
 8019940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019944:	4285      	cmp	r5, r0
 8019946:	f84c 1b04 	str.w	r1, [ip], #4
 801994a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801994e:	dcec      	bgt.n	801992a <__multadd+0x12>
 8019950:	b30e      	cbz	r6, 8019996 <__multadd+0x7e>
 8019952:	68a3      	ldr	r3, [r4, #8]
 8019954:	42ab      	cmp	r3, r5
 8019956:	dc19      	bgt.n	801998c <__multadd+0x74>
 8019958:	6861      	ldr	r1, [r4, #4]
 801995a:	4638      	mov	r0, r7
 801995c:	3101      	adds	r1, #1
 801995e:	f7ff ff79 	bl	8019854 <_Balloc>
 8019962:	4680      	mov	r8, r0
 8019964:	b928      	cbnz	r0, 8019972 <__multadd+0x5a>
 8019966:	4602      	mov	r2, r0
 8019968:	4b0c      	ldr	r3, [pc, #48]	; (801999c <__multadd+0x84>)
 801996a:	480d      	ldr	r0, [pc, #52]	; (80199a0 <__multadd+0x88>)
 801996c:	21b5      	movs	r1, #181	; 0xb5
 801996e:	f7ff fac7 	bl	8018f00 <__assert_func>
 8019972:	6922      	ldr	r2, [r4, #16]
 8019974:	3202      	adds	r2, #2
 8019976:	f104 010c 	add.w	r1, r4, #12
 801997a:	0092      	lsls	r2, r2, #2
 801997c:	300c      	adds	r0, #12
 801997e:	f7fe fa02 	bl	8017d86 <memcpy>
 8019982:	4621      	mov	r1, r4
 8019984:	4638      	mov	r0, r7
 8019986:	f7ff ffa5 	bl	80198d4 <_Bfree>
 801998a:	4644      	mov	r4, r8
 801998c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019990:	3501      	adds	r5, #1
 8019992:	615e      	str	r6, [r3, #20]
 8019994:	6125      	str	r5, [r4, #16]
 8019996:	4620      	mov	r0, r4
 8019998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801999c:	0801e5d1 	.word	0x0801e5d1
 80199a0:	0801e65c 	.word	0x0801e65c

080199a4 <__s2b>:
 80199a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80199a8:	460c      	mov	r4, r1
 80199aa:	4615      	mov	r5, r2
 80199ac:	461f      	mov	r7, r3
 80199ae:	2209      	movs	r2, #9
 80199b0:	3308      	adds	r3, #8
 80199b2:	4606      	mov	r6, r0
 80199b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80199b8:	2100      	movs	r1, #0
 80199ba:	2201      	movs	r2, #1
 80199bc:	429a      	cmp	r2, r3
 80199be:	db09      	blt.n	80199d4 <__s2b+0x30>
 80199c0:	4630      	mov	r0, r6
 80199c2:	f7ff ff47 	bl	8019854 <_Balloc>
 80199c6:	b940      	cbnz	r0, 80199da <__s2b+0x36>
 80199c8:	4602      	mov	r2, r0
 80199ca:	4b19      	ldr	r3, [pc, #100]	; (8019a30 <__s2b+0x8c>)
 80199cc:	4819      	ldr	r0, [pc, #100]	; (8019a34 <__s2b+0x90>)
 80199ce:	21ce      	movs	r1, #206	; 0xce
 80199d0:	f7ff fa96 	bl	8018f00 <__assert_func>
 80199d4:	0052      	lsls	r2, r2, #1
 80199d6:	3101      	adds	r1, #1
 80199d8:	e7f0      	b.n	80199bc <__s2b+0x18>
 80199da:	9b08      	ldr	r3, [sp, #32]
 80199dc:	6143      	str	r3, [r0, #20]
 80199de:	2d09      	cmp	r5, #9
 80199e0:	f04f 0301 	mov.w	r3, #1
 80199e4:	6103      	str	r3, [r0, #16]
 80199e6:	dd16      	ble.n	8019a16 <__s2b+0x72>
 80199e8:	f104 0909 	add.w	r9, r4, #9
 80199ec:	46c8      	mov	r8, r9
 80199ee:	442c      	add	r4, r5
 80199f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80199f4:	4601      	mov	r1, r0
 80199f6:	3b30      	subs	r3, #48	; 0x30
 80199f8:	220a      	movs	r2, #10
 80199fa:	4630      	mov	r0, r6
 80199fc:	f7ff ff8c 	bl	8019918 <__multadd>
 8019a00:	45a0      	cmp	r8, r4
 8019a02:	d1f5      	bne.n	80199f0 <__s2b+0x4c>
 8019a04:	f1a5 0408 	sub.w	r4, r5, #8
 8019a08:	444c      	add	r4, r9
 8019a0a:	1b2d      	subs	r5, r5, r4
 8019a0c:	1963      	adds	r3, r4, r5
 8019a0e:	42bb      	cmp	r3, r7
 8019a10:	db04      	blt.n	8019a1c <__s2b+0x78>
 8019a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a16:	340a      	adds	r4, #10
 8019a18:	2509      	movs	r5, #9
 8019a1a:	e7f6      	b.n	8019a0a <__s2b+0x66>
 8019a1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019a20:	4601      	mov	r1, r0
 8019a22:	3b30      	subs	r3, #48	; 0x30
 8019a24:	220a      	movs	r2, #10
 8019a26:	4630      	mov	r0, r6
 8019a28:	f7ff ff76 	bl	8019918 <__multadd>
 8019a2c:	e7ee      	b.n	8019a0c <__s2b+0x68>
 8019a2e:	bf00      	nop
 8019a30:	0801e5d1 	.word	0x0801e5d1
 8019a34:	0801e65c 	.word	0x0801e65c

08019a38 <__hi0bits>:
 8019a38:	0c03      	lsrs	r3, r0, #16
 8019a3a:	041b      	lsls	r3, r3, #16
 8019a3c:	b9d3      	cbnz	r3, 8019a74 <__hi0bits+0x3c>
 8019a3e:	0400      	lsls	r0, r0, #16
 8019a40:	2310      	movs	r3, #16
 8019a42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019a46:	bf04      	itt	eq
 8019a48:	0200      	lsleq	r0, r0, #8
 8019a4a:	3308      	addeq	r3, #8
 8019a4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019a50:	bf04      	itt	eq
 8019a52:	0100      	lsleq	r0, r0, #4
 8019a54:	3304      	addeq	r3, #4
 8019a56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019a5a:	bf04      	itt	eq
 8019a5c:	0080      	lsleq	r0, r0, #2
 8019a5e:	3302      	addeq	r3, #2
 8019a60:	2800      	cmp	r0, #0
 8019a62:	db05      	blt.n	8019a70 <__hi0bits+0x38>
 8019a64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019a68:	f103 0301 	add.w	r3, r3, #1
 8019a6c:	bf08      	it	eq
 8019a6e:	2320      	moveq	r3, #32
 8019a70:	4618      	mov	r0, r3
 8019a72:	4770      	bx	lr
 8019a74:	2300      	movs	r3, #0
 8019a76:	e7e4      	b.n	8019a42 <__hi0bits+0xa>

08019a78 <__lo0bits>:
 8019a78:	6803      	ldr	r3, [r0, #0]
 8019a7a:	f013 0207 	ands.w	r2, r3, #7
 8019a7e:	4601      	mov	r1, r0
 8019a80:	d00b      	beq.n	8019a9a <__lo0bits+0x22>
 8019a82:	07da      	lsls	r2, r3, #31
 8019a84:	d423      	bmi.n	8019ace <__lo0bits+0x56>
 8019a86:	0798      	lsls	r0, r3, #30
 8019a88:	bf49      	itett	mi
 8019a8a:	085b      	lsrmi	r3, r3, #1
 8019a8c:	089b      	lsrpl	r3, r3, #2
 8019a8e:	2001      	movmi	r0, #1
 8019a90:	600b      	strmi	r3, [r1, #0]
 8019a92:	bf5c      	itt	pl
 8019a94:	600b      	strpl	r3, [r1, #0]
 8019a96:	2002      	movpl	r0, #2
 8019a98:	4770      	bx	lr
 8019a9a:	b298      	uxth	r0, r3
 8019a9c:	b9a8      	cbnz	r0, 8019aca <__lo0bits+0x52>
 8019a9e:	0c1b      	lsrs	r3, r3, #16
 8019aa0:	2010      	movs	r0, #16
 8019aa2:	b2da      	uxtb	r2, r3
 8019aa4:	b90a      	cbnz	r2, 8019aaa <__lo0bits+0x32>
 8019aa6:	3008      	adds	r0, #8
 8019aa8:	0a1b      	lsrs	r3, r3, #8
 8019aaa:	071a      	lsls	r2, r3, #28
 8019aac:	bf04      	itt	eq
 8019aae:	091b      	lsreq	r3, r3, #4
 8019ab0:	3004      	addeq	r0, #4
 8019ab2:	079a      	lsls	r2, r3, #30
 8019ab4:	bf04      	itt	eq
 8019ab6:	089b      	lsreq	r3, r3, #2
 8019ab8:	3002      	addeq	r0, #2
 8019aba:	07da      	lsls	r2, r3, #31
 8019abc:	d403      	bmi.n	8019ac6 <__lo0bits+0x4e>
 8019abe:	085b      	lsrs	r3, r3, #1
 8019ac0:	f100 0001 	add.w	r0, r0, #1
 8019ac4:	d005      	beq.n	8019ad2 <__lo0bits+0x5a>
 8019ac6:	600b      	str	r3, [r1, #0]
 8019ac8:	4770      	bx	lr
 8019aca:	4610      	mov	r0, r2
 8019acc:	e7e9      	b.n	8019aa2 <__lo0bits+0x2a>
 8019ace:	2000      	movs	r0, #0
 8019ad0:	4770      	bx	lr
 8019ad2:	2020      	movs	r0, #32
 8019ad4:	4770      	bx	lr
	...

08019ad8 <__i2b>:
 8019ad8:	b510      	push	{r4, lr}
 8019ada:	460c      	mov	r4, r1
 8019adc:	2101      	movs	r1, #1
 8019ade:	f7ff feb9 	bl	8019854 <_Balloc>
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	b928      	cbnz	r0, 8019af2 <__i2b+0x1a>
 8019ae6:	4b05      	ldr	r3, [pc, #20]	; (8019afc <__i2b+0x24>)
 8019ae8:	4805      	ldr	r0, [pc, #20]	; (8019b00 <__i2b+0x28>)
 8019aea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019aee:	f7ff fa07 	bl	8018f00 <__assert_func>
 8019af2:	2301      	movs	r3, #1
 8019af4:	6144      	str	r4, [r0, #20]
 8019af6:	6103      	str	r3, [r0, #16]
 8019af8:	bd10      	pop	{r4, pc}
 8019afa:	bf00      	nop
 8019afc:	0801e5d1 	.word	0x0801e5d1
 8019b00:	0801e65c 	.word	0x0801e65c

08019b04 <__multiply>:
 8019b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b08:	4691      	mov	r9, r2
 8019b0a:	690a      	ldr	r2, [r1, #16]
 8019b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019b10:	429a      	cmp	r2, r3
 8019b12:	bfb8      	it	lt
 8019b14:	460b      	movlt	r3, r1
 8019b16:	460c      	mov	r4, r1
 8019b18:	bfbc      	itt	lt
 8019b1a:	464c      	movlt	r4, r9
 8019b1c:	4699      	movlt	r9, r3
 8019b1e:	6927      	ldr	r7, [r4, #16]
 8019b20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019b24:	68a3      	ldr	r3, [r4, #8]
 8019b26:	6861      	ldr	r1, [r4, #4]
 8019b28:	eb07 060a 	add.w	r6, r7, sl
 8019b2c:	42b3      	cmp	r3, r6
 8019b2e:	b085      	sub	sp, #20
 8019b30:	bfb8      	it	lt
 8019b32:	3101      	addlt	r1, #1
 8019b34:	f7ff fe8e 	bl	8019854 <_Balloc>
 8019b38:	b930      	cbnz	r0, 8019b48 <__multiply+0x44>
 8019b3a:	4602      	mov	r2, r0
 8019b3c:	4b44      	ldr	r3, [pc, #272]	; (8019c50 <__multiply+0x14c>)
 8019b3e:	4845      	ldr	r0, [pc, #276]	; (8019c54 <__multiply+0x150>)
 8019b40:	f240 115d 	movw	r1, #349	; 0x15d
 8019b44:	f7ff f9dc 	bl	8018f00 <__assert_func>
 8019b48:	f100 0514 	add.w	r5, r0, #20
 8019b4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019b50:	462b      	mov	r3, r5
 8019b52:	2200      	movs	r2, #0
 8019b54:	4543      	cmp	r3, r8
 8019b56:	d321      	bcc.n	8019b9c <__multiply+0x98>
 8019b58:	f104 0314 	add.w	r3, r4, #20
 8019b5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019b60:	f109 0314 	add.w	r3, r9, #20
 8019b64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019b68:	9202      	str	r2, [sp, #8]
 8019b6a:	1b3a      	subs	r2, r7, r4
 8019b6c:	3a15      	subs	r2, #21
 8019b6e:	f022 0203 	bic.w	r2, r2, #3
 8019b72:	3204      	adds	r2, #4
 8019b74:	f104 0115 	add.w	r1, r4, #21
 8019b78:	428f      	cmp	r7, r1
 8019b7a:	bf38      	it	cc
 8019b7c:	2204      	movcc	r2, #4
 8019b7e:	9201      	str	r2, [sp, #4]
 8019b80:	9a02      	ldr	r2, [sp, #8]
 8019b82:	9303      	str	r3, [sp, #12]
 8019b84:	429a      	cmp	r2, r3
 8019b86:	d80c      	bhi.n	8019ba2 <__multiply+0x9e>
 8019b88:	2e00      	cmp	r6, #0
 8019b8a:	dd03      	ble.n	8019b94 <__multiply+0x90>
 8019b8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d05a      	beq.n	8019c4a <__multiply+0x146>
 8019b94:	6106      	str	r6, [r0, #16]
 8019b96:	b005      	add	sp, #20
 8019b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9c:	f843 2b04 	str.w	r2, [r3], #4
 8019ba0:	e7d8      	b.n	8019b54 <__multiply+0x50>
 8019ba2:	f8b3 a000 	ldrh.w	sl, [r3]
 8019ba6:	f1ba 0f00 	cmp.w	sl, #0
 8019baa:	d024      	beq.n	8019bf6 <__multiply+0xf2>
 8019bac:	f104 0e14 	add.w	lr, r4, #20
 8019bb0:	46a9      	mov	r9, r5
 8019bb2:	f04f 0c00 	mov.w	ip, #0
 8019bb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019bba:	f8d9 1000 	ldr.w	r1, [r9]
 8019bbe:	fa1f fb82 	uxth.w	fp, r2
 8019bc2:	b289      	uxth	r1, r1
 8019bc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8019bc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8019bd0:	4461      	add	r1, ip
 8019bd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019bd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8019bda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019bde:	b289      	uxth	r1, r1
 8019be0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019be4:	4577      	cmp	r7, lr
 8019be6:	f849 1b04 	str.w	r1, [r9], #4
 8019bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019bee:	d8e2      	bhi.n	8019bb6 <__multiply+0xb2>
 8019bf0:	9a01      	ldr	r2, [sp, #4]
 8019bf2:	f845 c002 	str.w	ip, [r5, r2]
 8019bf6:	9a03      	ldr	r2, [sp, #12]
 8019bf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019bfc:	3304      	adds	r3, #4
 8019bfe:	f1b9 0f00 	cmp.w	r9, #0
 8019c02:	d020      	beq.n	8019c46 <__multiply+0x142>
 8019c04:	6829      	ldr	r1, [r5, #0]
 8019c06:	f104 0c14 	add.w	ip, r4, #20
 8019c0a:	46ae      	mov	lr, r5
 8019c0c:	f04f 0a00 	mov.w	sl, #0
 8019c10:	f8bc b000 	ldrh.w	fp, [ip]
 8019c14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019c18:	fb09 220b 	mla	r2, r9, fp, r2
 8019c1c:	4492      	add	sl, r2
 8019c1e:	b289      	uxth	r1, r1
 8019c20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019c24:	f84e 1b04 	str.w	r1, [lr], #4
 8019c28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019c2c:	f8be 1000 	ldrh.w	r1, [lr]
 8019c30:	0c12      	lsrs	r2, r2, #16
 8019c32:	fb09 1102 	mla	r1, r9, r2, r1
 8019c36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019c3a:	4567      	cmp	r7, ip
 8019c3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019c40:	d8e6      	bhi.n	8019c10 <__multiply+0x10c>
 8019c42:	9a01      	ldr	r2, [sp, #4]
 8019c44:	50a9      	str	r1, [r5, r2]
 8019c46:	3504      	adds	r5, #4
 8019c48:	e79a      	b.n	8019b80 <__multiply+0x7c>
 8019c4a:	3e01      	subs	r6, #1
 8019c4c:	e79c      	b.n	8019b88 <__multiply+0x84>
 8019c4e:	bf00      	nop
 8019c50:	0801e5d1 	.word	0x0801e5d1
 8019c54:	0801e65c 	.word	0x0801e65c

08019c58 <__pow5mult>:
 8019c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c5c:	4615      	mov	r5, r2
 8019c5e:	f012 0203 	ands.w	r2, r2, #3
 8019c62:	4606      	mov	r6, r0
 8019c64:	460f      	mov	r7, r1
 8019c66:	d007      	beq.n	8019c78 <__pow5mult+0x20>
 8019c68:	4c25      	ldr	r4, [pc, #148]	; (8019d00 <__pow5mult+0xa8>)
 8019c6a:	3a01      	subs	r2, #1
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019c72:	f7ff fe51 	bl	8019918 <__multadd>
 8019c76:	4607      	mov	r7, r0
 8019c78:	10ad      	asrs	r5, r5, #2
 8019c7a:	d03d      	beq.n	8019cf8 <__pow5mult+0xa0>
 8019c7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019c7e:	b97c      	cbnz	r4, 8019ca0 <__pow5mult+0x48>
 8019c80:	2010      	movs	r0, #16
 8019c82:	f7ff fdc1 	bl	8019808 <malloc>
 8019c86:	4602      	mov	r2, r0
 8019c88:	6270      	str	r0, [r6, #36]	; 0x24
 8019c8a:	b928      	cbnz	r0, 8019c98 <__pow5mult+0x40>
 8019c8c:	4b1d      	ldr	r3, [pc, #116]	; (8019d04 <__pow5mult+0xac>)
 8019c8e:	481e      	ldr	r0, [pc, #120]	; (8019d08 <__pow5mult+0xb0>)
 8019c90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019c94:	f7ff f934 	bl	8018f00 <__assert_func>
 8019c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019c9c:	6004      	str	r4, [r0, #0]
 8019c9e:	60c4      	str	r4, [r0, #12]
 8019ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019ca8:	b94c      	cbnz	r4, 8019cbe <__pow5mult+0x66>
 8019caa:	f240 2171 	movw	r1, #625	; 0x271
 8019cae:	4630      	mov	r0, r6
 8019cb0:	f7ff ff12 	bl	8019ad8 <__i2b>
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8019cba:	4604      	mov	r4, r0
 8019cbc:	6003      	str	r3, [r0, #0]
 8019cbe:	f04f 0900 	mov.w	r9, #0
 8019cc2:	07eb      	lsls	r3, r5, #31
 8019cc4:	d50a      	bpl.n	8019cdc <__pow5mult+0x84>
 8019cc6:	4639      	mov	r1, r7
 8019cc8:	4622      	mov	r2, r4
 8019cca:	4630      	mov	r0, r6
 8019ccc:	f7ff ff1a 	bl	8019b04 <__multiply>
 8019cd0:	4639      	mov	r1, r7
 8019cd2:	4680      	mov	r8, r0
 8019cd4:	4630      	mov	r0, r6
 8019cd6:	f7ff fdfd 	bl	80198d4 <_Bfree>
 8019cda:	4647      	mov	r7, r8
 8019cdc:	106d      	asrs	r5, r5, #1
 8019cde:	d00b      	beq.n	8019cf8 <__pow5mult+0xa0>
 8019ce0:	6820      	ldr	r0, [r4, #0]
 8019ce2:	b938      	cbnz	r0, 8019cf4 <__pow5mult+0x9c>
 8019ce4:	4622      	mov	r2, r4
 8019ce6:	4621      	mov	r1, r4
 8019ce8:	4630      	mov	r0, r6
 8019cea:	f7ff ff0b 	bl	8019b04 <__multiply>
 8019cee:	6020      	str	r0, [r4, #0]
 8019cf0:	f8c0 9000 	str.w	r9, [r0]
 8019cf4:	4604      	mov	r4, r0
 8019cf6:	e7e4      	b.n	8019cc2 <__pow5mult+0x6a>
 8019cf8:	4638      	mov	r0, r7
 8019cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cfe:	bf00      	nop
 8019d00:	0801e7a8 	.word	0x0801e7a8
 8019d04:	0801e468 	.word	0x0801e468
 8019d08:	0801e65c 	.word	0x0801e65c

08019d0c <__lshift>:
 8019d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d10:	460c      	mov	r4, r1
 8019d12:	6849      	ldr	r1, [r1, #4]
 8019d14:	6923      	ldr	r3, [r4, #16]
 8019d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019d1a:	68a3      	ldr	r3, [r4, #8]
 8019d1c:	4607      	mov	r7, r0
 8019d1e:	4691      	mov	r9, r2
 8019d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019d24:	f108 0601 	add.w	r6, r8, #1
 8019d28:	42b3      	cmp	r3, r6
 8019d2a:	db0b      	blt.n	8019d44 <__lshift+0x38>
 8019d2c:	4638      	mov	r0, r7
 8019d2e:	f7ff fd91 	bl	8019854 <_Balloc>
 8019d32:	4605      	mov	r5, r0
 8019d34:	b948      	cbnz	r0, 8019d4a <__lshift+0x3e>
 8019d36:	4602      	mov	r2, r0
 8019d38:	4b2a      	ldr	r3, [pc, #168]	; (8019de4 <__lshift+0xd8>)
 8019d3a:	482b      	ldr	r0, [pc, #172]	; (8019de8 <__lshift+0xdc>)
 8019d3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019d40:	f7ff f8de 	bl	8018f00 <__assert_func>
 8019d44:	3101      	adds	r1, #1
 8019d46:	005b      	lsls	r3, r3, #1
 8019d48:	e7ee      	b.n	8019d28 <__lshift+0x1c>
 8019d4a:	2300      	movs	r3, #0
 8019d4c:	f100 0114 	add.w	r1, r0, #20
 8019d50:	f100 0210 	add.w	r2, r0, #16
 8019d54:	4618      	mov	r0, r3
 8019d56:	4553      	cmp	r3, sl
 8019d58:	db37      	blt.n	8019dca <__lshift+0xbe>
 8019d5a:	6920      	ldr	r0, [r4, #16]
 8019d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019d60:	f104 0314 	add.w	r3, r4, #20
 8019d64:	f019 091f 	ands.w	r9, r9, #31
 8019d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019d6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019d70:	d02f      	beq.n	8019dd2 <__lshift+0xc6>
 8019d72:	f1c9 0e20 	rsb	lr, r9, #32
 8019d76:	468a      	mov	sl, r1
 8019d78:	f04f 0c00 	mov.w	ip, #0
 8019d7c:	681a      	ldr	r2, [r3, #0]
 8019d7e:	fa02 f209 	lsl.w	r2, r2, r9
 8019d82:	ea42 020c 	orr.w	r2, r2, ip
 8019d86:	f84a 2b04 	str.w	r2, [sl], #4
 8019d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d8e:	4298      	cmp	r0, r3
 8019d90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019d94:	d8f2      	bhi.n	8019d7c <__lshift+0x70>
 8019d96:	1b03      	subs	r3, r0, r4
 8019d98:	3b15      	subs	r3, #21
 8019d9a:	f023 0303 	bic.w	r3, r3, #3
 8019d9e:	3304      	adds	r3, #4
 8019da0:	f104 0215 	add.w	r2, r4, #21
 8019da4:	4290      	cmp	r0, r2
 8019da6:	bf38      	it	cc
 8019da8:	2304      	movcc	r3, #4
 8019daa:	f841 c003 	str.w	ip, [r1, r3]
 8019dae:	f1bc 0f00 	cmp.w	ip, #0
 8019db2:	d001      	beq.n	8019db8 <__lshift+0xac>
 8019db4:	f108 0602 	add.w	r6, r8, #2
 8019db8:	3e01      	subs	r6, #1
 8019dba:	4638      	mov	r0, r7
 8019dbc:	612e      	str	r6, [r5, #16]
 8019dbe:	4621      	mov	r1, r4
 8019dc0:	f7ff fd88 	bl	80198d4 <_Bfree>
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8019dce:	3301      	adds	r3, #1
 8019dd0:	e7c1      	b.n	8019d56 <__lshift+0x4a>
 8019dd2:	3904      	subs	r1, #4
 8019dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8019ddc:	4298      	cmp	r0, r3
 8019dde:	d8f9      	bhi.n	8019dd4 <__lshift+0xc8>
 8019de0:	e7ea      	b.n	8019db8 <__lshift+0xac>
 8019de2:	bf00      	nop
 8019de4:	0801e5d1 	.word	0x0801e5d1
 8019de8:	0801e65c 	.word	0x0801e65c

08019dec <__mcmp>:
 8019dec:	b530      	push	{r4, r5, lr}
 8019dee:	6902      	ldr	r2, [r0, #16]
 8019df0:	690c      	ldr	r4, [r1, #16]
 8019df2:	1b12      	subs	r2, r2, r4
 8019df4:	d10e      	bne.n	8019e14 <__mcmp+0x28>
 8019df6:	f100 0314 	add.w	r3, r0, #20
 8019dfa:	3114      	adds	r1, #20
 8019dfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019e00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019e04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019e08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019e0c:	42a5      	cmp	r5, r4
 8019e0e:	d003      	beq.n	8019e18 <__mcmp+0x2c>
 8019e10:	d305      	bcc.n	8019e1e <__mcmp+0x32>
 8019e12:	2201      	movs	r2, #1
 8019e14:	4610      	mov	r0, r2
 8019e16:	bd30      	pop	{r4, r5, pc}
 8019e18:	4283      	cmp	r3, r0
 8019e1a:	d3f3      	bcc.n	8019e04 <__mcmp+0x18>
 8019e1c:	e7fa      	b.n	8019e14 <__mcmp+0x28>
 8019e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019e22:	e7f7      	b.n	8019e14 <__mcmp+0x28>

08019e24 <__mdiff>:
 8019e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e28:	460c      	mov	r4, r1
 8019e2a:	4606      	mov	r6, r0
 8019e2c:	4611      	mov	r1, r2
 8019e2e:	4620      	mov	r0, r4
 8019e30:	4690      	mov	r8, r2
 8019e32:	f7ff ffdb 	bl	8019dec <__mcmp>
 8019e36:	1e05      	subs	r5, r0, #0
 8019e38:	d110      	bne.n	8019e5c <__mdiff+0x38>
 8019e3a:	4629      	mov	r1, r5
 8019e3c:	4630      	mov	r0, r6
 8019e3e:	f7ff fd09 	bl	8019854 <_Balloc>
 8019e42:	b930      	cbnz	r0, 8019e52 <__mdiff+0x2e>
 8019e44:	4b3a      	ldr	r3, [pc, #232]	; (8019f30 <__mdiff+0x10c>)
 8019e46:	4602      	mov	r2, r0
 8019e48:	f240 2132 	movw	r1, #562	; 0x232
 8019e4c:	4839      	ldr	r0, [pc, #228]	; (8019f34 <__mdiff+0x110>)
 8019e4e:	f7ff f857 	bl	8018f00 <__assert_func>
 8019e52:	2301      	movs	r3, #1
 8019e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e5c:	bfa4      	itt	ge
 8019e5e:	4643      	movge	r3, r8
 8019e60:	46a0      	movge	r8, r4
 8019e62:	4630      	mov	r0, r6
 8019e64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019e68:	bfa6      	itte	ge
 8019e6a:	461c      	movge	r4, r3
 8019e6c:	2500      	movge	r5, #0
 8019e6e:	2501      	movlt	r5, #1
 8019e70:	f7ff fcf0 	bl	8019854 <_Balloc>
 8019e74:	b920      	cbnz	r0, 8019e80 <__mdiff+0x5c>
 8019e76:	4b2e      	ldr	r3, [pc, #184]	; (8019f30 <__mdiff+0x10c>)
 8019e78:	4602      	mov	r2, r0
 8019e7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019e7e:	e7e5      	b.n	8019e4c <__mdiff+0x28>
 8019e80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019e84:	6926      	ldr	r6, [r4, #16]
 8019e86:	60c5      	str	r5, [r0, #12]
 8019e88:	f104 0914 	add.w	r9, r4, #20
 8019e8c:	f108 0514 	add.w	r5, r8, #20
 8019e90:	f100 0e14 	add.w	lr, r0, #20
 8019e94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019e9c:	f108 0210 	add.w	r2, r8, #16
 8019ea0:	46f2      	mov	sl, lr
 8019ea2:	2100      	movs	r1, #0
 8019ea4:	f859 3b04 	ldr.w	r3, [r9], #4
 8019ea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019eac:	fa1f f883 	uxth.w	r8, r3
 8019eb0:	fa11 f18b 	uxtah	r1, r1, fp
 8019eb4:	0c1b      	lsrs	r3, r3, #16
 8019eb6:	eba1 0808 	sub.w	r8, r1, r8
 8019eba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019ebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019ec2:	fa1f f888 	uxth.w	r8, r8
 8019ec6:	1419      	asrs	r1, r3, #16
 8019ec8:	454e      	cmp	r6, r9
 8019eca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019ece:	f84a 3b04 	str.w	r3, [sl], #4
 8019ed2:	d8e7      	bhi.n	8019ea4 <__mdiff+0x80>
 8019ed4:	1b33      	subs	r3, r6, r4
 8019ed6:	3b15      	subs	r3, #21
 8019ed8:	f023 0303 	bic.w	r3, r3, #3
 8019edc:	3304      	adds	r3, #4
 8019ede:	3415      	adds	r4, #21
 8019ee0:	42a6      	cmp	r6, r4
 8019ee2:	bf38      	it	cc
 8019ee4:	2304      	movcc	r3, #4
 8019ee6:	441d      	add	r5, r3
 8019ee8:	4473      	add	r3, lr
 8019eea:	469e      	mov	lr, r3
 8019eec:	462e      	mov	r6, r5
 8019eee:	4566      	cmp	r6, ip
 8019ef0:	d30e      	bcc.n	8019f10 <__mdiff+0xec>
 8019ef2:	f10c 0203 	add.w	r2, ip, #3
 8019ef6:	1b52      	subs	r2, r2, r5
 8019ef8:	f022 0203 	bic.w	r2, r2, #3
 8019efc:	3d03      	subs	r5, #3
 8019efe:	45ac      	cmp	ip, r5
 8019f00:	bf38      	it	cc
 8019f02:	2200      	movcc	r2, #0
 8019f04:	441a      	add	r2, r3
 8019f06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019f0a:	b17b      	cbz	r3, 8019f2c <__mdiff+0x108>
 8019f0c:	6107      	str	r7, [r0, #16]
 8019f0e:	e7a3      	b.n	8019e58 <__mdiff+0x34>
 8019f10:	f856 8b04 	ldr.w	r8, [r6], #4
 8019f14:	fa11 f288 	uxtah	r2, r1, r8
 8019f18:	1414      	asrs	r4, r2, #16
 8019f1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019f1e:	b292      	uxth	r2, r2
 8019f20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019f24:	f84e 2b04 	str.w	r2, [lr], #4
 8019f28:	1421      	asrs	r1, r4, #16
 8019f2a:	e7e0      	b.n	8019eee <__mdiff+0xca>
 8019f2c:	3f01      	subs	r7, #1
 8019f2e:	e7ea      	b.n	8019f06 <__mdiff+0xe2>
 8019f30:	0801e5d1 	.word	0x0801e5d1
 8019f34:	0801e65c 	.word	0x0801e65c

08019f38 <__ulp>:
 8019f38:	b082      	sub	sp, #8
 8019f3a:	ed8d 0b00 	vstr	d0, [sp]
 8019f3e:	9b01      	ldr	r3, [sp, #4]
 8019f40:	4912      	ldr	r1, [pc, #72]	; (8019f8c <__ulp+0x54>)
 8019f42:	4019      	ands	r1, r3
 8019f44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019f48:	2900      	cmp	r1, #0
 8019f4a:	dd05      	ble.n	8019f58 <__ulp+0x20>
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	460b      	mov	r3, r1
 8019f50:	ec43 2b10 	vmov	d0, r2, r3
 8019f54:	b002      	add	sp, #8
 8019f56:	4770      	bx	lr
 8019f58:	4249      	negs	r1, r1
 8019f5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019f5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019f62:	f04f 0200 	mov.w	r2, #0
 8019f66:	f04f 0300 	mov.w	r3, #0
 8019f6a:	da04      	bge.n	8019f76 <__ulp+0x3e>
 8019f6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019f70:	fa41 f300 	asr.w	r3, r1, r0
 8019f74:	e7ec      	b.n	8019f50 <__ulp+0x18>
 8019f76:	f1a0 0114 	sub.w	r1, r0, #20
 8019f7a:	291e      	cmp	r1, #30
 8019f7c:	bfda      	itte	le
 8019f7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019f82:	fa20 f101 	lsrle.w	r1, r0, r1
 8019f86:	2101      	movgt	r1, #1
 8019f88:	460a      	mov	r2, r1
 8019f8a:	e7e1      	b.n	8019f50 <__ulp+0x18>
 8019f8c:	7ff00000 	.word	0x7ff00000

08019f90 <__b2d>:
 8019f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f92:	6905      	ldr	r5, [r0, #16]
 8019f94:	f100 0714 	add.w	r7, r0, #20
 8019f98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019f9c:	1f2e      	subs	r6, r5, #4
 8019f9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019fa2:	4620      	mov	r0, r4
 8019fa4:	f7ff fd48 	bl	8019a38 <__hi0bits>
 8019fa8:	f1c0 0320 	rsb	r3, r0, #32
 8019fac:	280a      	cmp	r0, #10
 8019fae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a02c <__b2d+0x9c>
 8019fb2:	600b      	str	r3, [r1, #0]
 8019fb4:	dc14      	bgt.n	8019fe0 <__b2d+0x50>
 8019fb6:	f1c0 0e0b 	rsb	lr, r0, #11
 8019fba:	fa24 f10e 	lsr.w	r1, r4, lr
 8019fbe:	42b7      	cmp	r7, r6
 8019fc0:	ea41 030c 	orr.w	r3, r1, ip
 8019fc4:	bf34      	ite	cc
 8019fc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019fca:	2100      	movcs	r1, #0
 8019fcc:	3015      	adds	r0, #21
 8019fce:	fa04 f000 	lsl.w	r0, r4, r0
 8019fd2:	fa21 f10e 	lsr.w	r1, r1, lr
 8019fd6:	ea40 0201 	orr.w	r2, r0, r1
 8019fda:	ec43 2b10 	vmov	d0, r2, r3
 8019fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fe0:	42b7      	cmp	r7, r6
 8019fe2:	bf3a      	itte	cc
 8019fe4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019fe8:	f1a5 0608 	subcc.w	r6, r5, #8
 8019fec:	2100      	movcs	r1, #0
 8019fee:	380b      	subs	r0, #11
 8019ff0:	d017      	beq.n	801a022 <__b2d+0x92>
 8019ff2:	f1c0 0c20 	rsb	ip, r0, #32
 8019ff6:	fa04 f500 	lsl.w	r5, r4, r0
 8019ffa:	42be      	cmp	r6, r7
 8019ffc:	fa21 f40c 	lsr.w	r4, r1, ip
 801a000:	ea45 0504 	orr.w	r5, r5, r4
 801a004:	bf8c      	ite	hi
 801a006:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a00a:	2400      	movls	r4, #0
 801a00c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a010:	fa01 f000 	lsl.w	r0, r1, r0
 801a014:	fa24 f40c 	lsr.w	r4, r4, ip
 801a018:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a01c:	ea40 0204 	orr.w	r2, r0, r4
 801a020:	e7db      	b.n	8019fda <__b2d+0x4a>
 801a022:	ea44 030c 	orr.w	r3, r4, ip
 801a026:	460a      	mov	r2, r1
 801a028:	e7d7      	b.n	8019fda <__b2d+0x4a>
 801a02a:	bf00      	nop
 801a02c:	3ff00000 	.word	0x3ff00000

0801a030 <__d2b>:
 801a030:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a034:	4689      	mov	r9, r1
 801a036:	2101      	movs	r1, #1
 801a038:	ec57 6b10 	vmov	r6, r7, d0
 801a03c:	4690      	mov	r8, r2
 801a03e:	f7ff fc09 	bl	8019854 <_Balloc>
 801a042:	4604      	mov	r4, r0
 801a044:	b930      	cbnz	r0, 801a054 <__d2b+0x24>
 801a046:	4602      	mov	r2, r0
 801a048:	4b25      	ldr	r3, [pc, #148]	; (801a0e0 <__d2b+0xb0>)
 801a04a:	4826      	ldr	r0, [pc, #152]	; (801a0e4 <__d2b+0xb4>)
 801a04c:	f240 310a 	movw	r1, #778	; 0x30a
 801a050:	f7fe ff56 	bl	8018f00 <__assert_func>
 801a054:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a05c:	bb35      	cbnz	r5, 801a0ac <__d2b+0x7c>
 801a05e:	2e00      	cmp	r6, #0
 801a060:	9301      	str	r3, [sp, #4]
 801a062:	d028      	beq.n	801a0b6 <__d2b+0x86>
 801a064:	4668      	mov	r0, sp
 801a066:	9600      	str	r6, [sp, #0]
 801a068:	f7ff fd06 	bl	8019a78 <__lo0bits>
 801a06c:	9900      	ldr	r1, [sp, #0]
 801a06e:	b300      	cbz	r0, 801a0b2 <__d2b+0x82>
 801a070:	9a01      	ldr	r2, [sp, #4]
 801a072:	f1c0 0320 	rsb	r3, r0, #32
 801a076:	fa02 f303 	lsl.w	r3, r2, r3
 801a07a:	430b      	orrs	r3, r1
 801a07c:	40c2      	lsrs	r2, r0
 801a07e:	6163      	str	r3, [r4, #20]
 801a080:	9201      	str	r2, [sp, #4]
 801a082:	9b01      	ldr	r3, [sp, #4]
 801a084:	61a3      	str	r3, [r4, #24]
 801a086:	2b00      	cmp	r3, #0
 801a088:	bf14      	ite	ne
 801a08a:	2202      	movne	r2, #2
 801a08c:	2201      	moveq	r2, #1
 801a08e:	6122      	str	r2, [r4, #16]
 801a090:	b1d5      	cbz	r5, 801a0c8 <__d2b+0x98>
 801a092:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a096:	4405      	add	r5, r0
 801a098:	f8c9 5000 	str.w	r5, [r9]
 801a09c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a0a0:	f8c8 0000 	str.w	r0, [r8]
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	b003      	add	sp, #12
 801a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a0b0:	e7d5      	b.n	801a05e <__d2b+0x2e>
 801a0b2:	6161      	str	r1, [r4, #20]
 801a0b4:	e7e5      	b.n	801a082 <__d2b+0x52>
 801a0b6:	a801      	add	r0, sp, #4
 801a0b8:	f7ff fcde 	bl	8019a78 <__lo0bits>
 801a0bc:	9b01      	ldr	r3, [sp, #4]
 801a0be:	6163      	str	r3, [r4, #20]
 801a0c0:	2201      	movs	r2, #1
 801a0c2:	6122      	str	r2, [r4, #16]
 801a0c4:	3020      	adds	r0, #32
 801a0c6:	e7e3      	b.n	801a090 <__d2b+0x60>
 801a0c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a0cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a0d0:	f8c9 0000 	str.w	r0, [r9]
 801a0d4:	6918      	ldr	r0, [r3, #16]
 801a0d6:	f7ff fcaf 	bl	8019a38 <__hi0bits>
 801a0da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a0de:	e7df      	b.n	801a0a0 <__d2b+0x70>
 801a0e0:	0801e5d1 	.word	0x0801e5d1
 801a0e4:	0801e65c 	.word	0x0801e65c

0801a0e8 <__ratio>:
 801a0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ec:	4688      	mov	r8, r1
 801a0ee:	4669      	mov	r1, sp
 801a0f0:	4681      	mov	r9, r0
 801a0f2:	f7ff ff4d 	bl	8019f90 <__b2d>
 801a0f6:	a901      	add	r1, sp, #4
 801a0f8:	4640      	mov	r0, r8
 801a0fa:	ec55 4b10 	vmov	r4, r5, d0
 801a0fe:	f7ff ff47 	bl	8019f90 <__b2d>
 801a102:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a106:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a10a:	eba3 0c02 	sub.w	ip, r3, r2
 801a10e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a112:	1a9b      	subs	r3, r3, r2
 801a114:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a118:	ec51 0b10 	vmov	r0, r1, d0
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	bfd6      	itet	le
 801a120:	460a      	movle	r2, r1
 801a122:	462a      	movgt	r2, r5
 801a124:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a128:	468b      	mov	fp, r1
 801a12a:	462f      	mov	r7, r5
 801a12c:	bfd4      	ite	le
 801a12e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a132:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a136:	4620      	mov	r0, r4
 801a138:	ee10 2a10 	vmov	r2, s0
 801a13c:	465b      	mov	r3, fp
 801a13e:	4639      	mov	r1, r7
 801a140:	f7e6 fba4 	bl	800088c <__aeabi_ddiv>
 801a144:	ec41 0b10 	vmov	d0, r0, r1
 801a148:	b003      	add	sp, #12
 801a14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a14e <__copybits>:
 801a14e:	3901      	subs	r1, #1
 801a150:	b570      	push	{r4, r5, r6, lr}
 801a152:	1149      	asrs	r1, r1, #5
 801a154:	6914      	ldr	r4, [r2, #16]
 801a156:	3101      	adds	r1, #1
 801a158:	f102 0314 	add.w	r3, r2, #20
 801a15c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a160:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a164:	1f05      	subs	r5, r0, #4
 801a166:	42a3      	cmp	r3, r4
 801a168:	d30c      	bcc.n	801a184 <__copybits+0x36>
 801a16a:	1aa3      	subs	r3, r4, r2
 801a16c:	3b11      	subs	r3, #17
 801a16e:	f023 0303 	bic.w	r3, r3, #3
 801a172:	3211      	adds	r2, #17
 801a174:	42a2      	cmp	r2, r4
 801a176:	bf88      	it	hi
 801a178:	2300      	movhi	r3, #0
 801a17a:	4418      	add	r0, r3
 801a17c:	2300      	movs	r3, #0
 801a17e:	4288      	cmp	r0, r1
 801a180:	d305      	bcc.n	801a18e <__copybits+0x40>
 801a182:	bd70      	pop	{r4, r5, r6, pc}
 801a184:	f853 6b04 	ldr.w	r6, [r3], #4
 801a188:	f845 6f04 	str.w	r6, [r5, #4]!
 801a18c:	e7eb      	b.n	801a166 <__copybits+0x18>
 801a18e:	f840 3b04 	str.w	r3, [r0], #4
 801a192:	e7f4      	b.n	801a17e <__copybits+0x30>

0801a194 <__any_on>:
 801a194:	f100 0214 	add.w	r2, r0, #20
 801a198:	6900      	ldr	r0, [r0, #16]
 801a19a:	114b      	asrs	r3, r1, #5
 801a19c:	4298      	cmp	r0, r3
 801a19e:	b510      	push	{r4, lr}
 801a1a0:	db11      	blt.n	801a1c6 <__any_on+0x32>
 801a1a2:	dd0a      	ble.n	801a1ba <__any_on+0x26>
 801a1a4:	f011 011f 	ands.w	r1, r1, #31
 801a1a8:	d007      	beq.n	801a1ba <__any_on+0x26>
 801a1aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a1ae:	fa24 f001 	lsr.w	r0, r4, r1
 801a1b2:	fa00 f101 	lsl.w	r1, r0, r1
 801a1b6:	428c      	cmp	r4, r1
 801a1b8:	d10b      	bne.n	801a1d2 <__any_on+0x3e>
 801a1ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a1be:	4293      	cmp	r3, r2
 801a1c0:	d803      	bhi.n	801a1ca <__any_on+0x36>
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	bd10      	pop	{r4, pc}
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	e7f7      	b.n	801a1ba <__any_on+0x26>
 801a1ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a1ce:	2900      	cmp	r1, #0
 801a1d0:	d0f5      	beq.n	801a1be <__any_on+0x2a>
 801a1d2:	2001      	movs	r0, #1
 801a1d4:	e7f6      	b.n	801a1c4 <__any_on+0x30>

0801a1d6 <_calloc_r>:
 801a1d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1d8:	fba1 2402 	umull	r2, r4, r1, r2
 801a1dc:	b94c      	cbnz	r4, 801a1f2 <_calloc_r+0x1c>
 801a1de:	4611      	mov	r1, r2
 801a1e0:	9201      	str	r2, [sp, #4]
 801a1e2:	f7fd fe21 	bl	8017e28 <_malloc_r>
 801a1e6:	9a01      	ldr	r2, [sp, #4]
 801a1e8:	4605      	mov	r5, r0
 801a1ea:	b930      	cbnz	r0, 801a1fa <_calloc_r+0x24>
 801a1ec:	4628      	mov	r0, r5
 801a1ee:	b003      	add	sp, #12
 801a1f0:	bd30      	pop	{r4, r5, pc}
 801a1f2:	220c      	movs	r2, #12
 801a1f4:	6002      	str	r2, [r0, #0]
 801a1f6:	2500      	movs	r5, #0
 801a1f8:	e7f8      	b.n	801a1ec <_calloc_r+0x16>
 801a1fa:	4621      	mov	r1, r4
 801a1fc:	f7fd fdeb 	bl	8017dd6 <memset>
 801a200:	e7f4      	b.n	801a1ec <_calloc_r+0x16>
	...

0801a204 <_free_r>:
 801a204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a206:	2900      	cmp	r1, #0
 801a208:	d044      	beq.n	801a294 <_free_r+0x90>
 801a20a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a20e:	9001      	str	r0, [sp, #4]
 801a210:	2b00      	cmp	r3, #0
 801a212:	f1a1 0404 	sub.w	r4, r1, #4
 801a216:	bfb8      	it	lt
 801a218:	18e4      	addlt	r4, r4, r3
 801a21a:	f7ff fb0f 	bl	801983c <__malloc_lock>
 801a21e:	4a1e      	ldr	r2, [pc, #120]	; (801a298 <_free_r+0x94>)
 801a220:	9801      	ldr	r0, [sp, #4]
 801a222:	6813      	ldr	r3, [r2, #0]
 801a224:	b933      	cbnz	r3, 801a234 <_free_r+0x30>
 801a226:	6063      	str	r3, [r4, #4]
 801a228:	6014      	str	r4, [r2, #0]
 801a22a:	b003      	add	sp, #12
 801a22c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a230:	f7ff bb0a 	b.w	8019848 <__malloc_unlock>
 801a234:	42a3      	cmp	r3, r4
 801a236:	d908      	bls.n	801a24a <_free_r+0x46>
 801a238:	6825      	ldr	r5, [r4, #0]
 801a23a:	1961      	adds	r1, r4, r5
 801a23c:	428b      	cmp	r3, r1
 801a23e:	bf01      	itttt	eq
 801a240:	6819      	ldreq	r1, [r3, #0]
 801a242:	685b      	ldreq	r3, [r3, #4]
 801a244:	1949      	addeq	r1, r1, r5
 801a246:	6021      	streq	r1, [r4, #0]
 801a248:	e7ed      	b.n	801a226 <_free_r+0x22>
 801a24a:	461a      	mov	r2, r3
 801a24c:	685b      	ldr	r3, [r3, #4]
 801a24e:	b10b      	cbz	r3, 801a254 <_free_r+0x50>
 801a250:	42a3      	cmp	r3, r4
 801a252:	d9fa      	bls.n	801a24a <_free_r+0x46>
 801a254:	6811      	ldr	r1, [r2, #0]
 801a256:	1855      	adds	r5, r2, r1
 801a258:	42a5      	cmp	r5, r4
 801a25a:	d10b      	bne.n	801a274 <_free_r+0x70>
 801a25c:	6824      	ldr	r4, [r4, #0]
 801a25e:	4421      	add	r1, r4
 801a260:	1854      	adds	r4, r2, r1
 801a262:	42a3      	cmp	r3, r4
 801a264:	6011      	str	r1, [r2, #0]
 801a266:	d1e0      	bne.n	801a22a <_free_r+0x26>
 801a268:	681c      	ldr	r4, [r3, #0]
 801a26a:	685b      	ldr	r3, [r3, #4]
 801a26c:	6053      	str	r3, [r2, #4]
 801a26e:	4421      	add	r1, r4
 801a270:	6011      	str	r1, [r2, #0]
 801a272:	e7da      	b.n	801a22a <_free_r+0x26>
 801a274:	d902      	bls.n	801a27c <_free_r+0x78>
 801a276:	230c      	movs	r3, #12
 801a278:	6003      	str	r3, [r0, #0]
 801a27a:	e7d6      	b.n	801a22a <_free_r+0x26>
 801a27c:	6825      	ldr	r5, [r4, #0]
 801a27e:	1961      	adds	r1, r4, r5
 801a280:	428b      	cmp	r3, r1
 801a282:	bf04      	itt	eq
 801a284:	6819      	ldreq	r1, [r3, #0]
 801a286:	685b      	ldreq	r3, [r3, #4]
 801a288:	6063      	str	r3, [r4, #4]
 801a28a:	bf04      	itt	eq
 801a28c:	1949      	addeq	r1, r1, r5
 801a28e:	6021      	streq	r1, [r4, #0]
 801a290:	6054      	str	r4, [r2, #4]
 801a292:	e7ca      	b.n	801a22a <_free_r+0x26>
 801a294:	b003      	add	sp, #12
 801a296:	bd30      	pop	{r4, r5, pc}
 801a298:	20011d14 	.word	0x20011d14

0801a29c <__ssputs_r>:
 801a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2a0:	688e      	ldr	r6, [r1, #8]
 801a2a2:	429e      	cmp	r6, r3
 801a2a4:	4682      	mov	sl, r0
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	4690      	mov	r8, r2
 801a2aa:	461f      	mov	r7, r3
 801a2ac:	d838      	bhi.n	801a320 <__ssputs_r+0x84>
 801a2ae:	898a      	ldrh	r2, [r1, #12]
 801a2b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a2b4:	d032      	beq.n	801a31c <__ssputs_r+0x80>
 801a2b6:	6825      	ldr	r5, [r4, #0]
 801a2b8:	6909      	ldr	r1, [r1, #16]
 801a2ba:	eba5 0901 	sub.w	r9, r5, r1
 801a2be:	6965      	ldr	r5, [r4, #20]
 801a2c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a2c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a2c8:	3301      	adds	r3, #1
 801a2ca:	444b      	add	r3, r9
 801a2cc:	106d      	asrs	r5, r5, #1
 801a2ce:	429d      	cmp	r5, r3
 801a2d0:	bf38      	it	cc
 801a2d2:	461d      	movcc	r5, r3
 801a2d4:	0553      	lsls	r3, r2, #21
 801a2d6:	d531      	bpl.n	801a33c <__ssputs_r+0xa0>
 801a2d8:	4629      	mov	r1, r5
 801a2da:	f7fd fda5 	bl	8017e28 <_malloc_r>
 801a2de:	4606      	mov	r6, r0
 801a2e0:	b950      	cbnz	r0, 801a2f8 <__ssputs_r+0x5c>
 801a2e2:	230c      	movs	r3, #12
 801a2e4:	f8ca 3000 	str.w	r3, [sl]
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2ee:	81a3      	strh	r3, [r4, #12]
 801a2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f8:	6921      	ldr	r1, [r4, #16]
 801a2fa:	464a      	mov	r2, r9
 801a2fc:	f7fd fd43 	bl	8017d86 <memcpy>
 801a300:	89a3      	ldrh	r3, [r4, #12]
 801a302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a30a:	81a3      	strh	r3, [r4, #12]
 801a30c:	6126      	str	r6, [r4, #16]
 801a30e:	6165      	str	r5, [r4, #20]
 801a310:	444e      	add	r6, r9
 801a312:	eba5 0509 	sub.w	r5, r5, r9
 801a316:	6026      	str	r6, [r4, #0]
 801a318:	60a5      	str	r5, [r4, #8]
 801a31a:	463e      	mov	r6, r7
 801a31c:	42be      	cmp	r6, r7
 801a31e:	d900      	bls.n	801a322 <__ssputs_r+0x86>
 801a320:	463e      	mov	r6, r7
 801a322:	6820      	ldr	r0, [r4, #0]
 801a324:	4632      	mov	r2, r6
 801a326:	4641      	mov	r1, r8
 801a328:	f7fd fd3b 	bl	8017da2 <memmove>
 801a32c:	68a3      	ldr	r3, [r4, #8]
 801a32e:	1b9b      	subs	r3, r3, r6
 801a330:	60a3      	str	r3, [r4, #8]
 801a332:	6823      	ldr	r3, [r4, #0]
 801a334:	4433      	add	r3, r6
 801a336:	6023      	str	r3, [r4, #0]
 801a338:	2000      	movs	r0, #0
 801a33a:	e7db      	b.n	801a2f4 <__ssputs_r+0x58>
 801a33c:	462a      	mov	r2, r5
 801a33e:	f000 fd4d 	bl	801addc <_realloc_r>
 801a342:	4606      	mov	r6, r0
 801a344:	2800      	cmp	r0, #0
 801a346:	d1e1      	bne.n	801a30c <__ssputs_r+0x70>
 801a348:	6921      	ldr	r1, [r4, #16]
 801a34a:	4650      	mov	r0, sl
 801a34c:	f7ff ff5a 	bl	801a204 <_free_r>
 801a350:	e7c7      	b.n	801a2e2 <__ssputs_r+0x46>
	...

0801a354 <_svfiprintf_r>:
 801a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a358:	4698      	mov	r8, r3
 801a35a:	898b      	ldrh	r3, [r1, #12]
 801a35c:	061b      	lsls	r3, r3, #24
 801a35e:	b09d      	sub	sp, #116	; 0x74
 801a360:	4607      	mov	r7, r0
 801a362:	460d      	mov	r5, r1
 801a364:	4614      	mov	r4, r2
 801a366:	d50e      	bpl.n	801a386 <_svfiprintf_r+0x32>
 801a368:	690b      	ldr	r3, [r1, #16]
 801a36a:	b963      	cbnz	r3, 801a386 <_svfiprintf_r+0x32>
 801a36c:	2140      	movs	r1, #64	; 0x40
 801a36e:	f7fd fd5b 	bl	8017e28 <_malloc_r>
 801a372:	6028      	str	r0, [r5, #0]
 801a374:	6128      	str	r0, [r5, #16]
 801a376:	b920      	cbnz	r0, 801a382 <_svfiprintf_r+0x2e>
 801a378:	230c      	movs	r3, #12
 801a37a:	603b      	str	r3, [r7, #0]
 801a37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a380:	e0d1      	b.n	801a526 <_svfiprintf_r+0x1d2>
 801a382:	2340      	movs	r3, #64	; 0x40
 801a384:	616b      	str	r3, [r5, #20]
 801a386:	2300      	movs	r3, #0
 801a388:	9309      	str	r3, [sp, #36]	; 0x24
 801a38a:	2320      	movs	r3, #32
 801a38c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a390:	f8cd 800c 	str.w	r8, [sp, #12]
 801a394:	2330      	movs	r3, #48	; 0x30
 801a396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a540 <_svfiprintf_r+0x1ec>
 801a39a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a39e:	f04f 0901 	mov.w	r9, #1
 801a3a2:	4623      	mov	r3, r4
 801a3a4:	469a      	mov	sl, r3
 801a3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3aa:	b10a      	cbz	r2, 801a3b0 <_svfiprintf_r+0x5c>
 801a3ac:	2a25      	cmp	r2, #37	; 0x25
 801a3ae:	d1f9      	bne.n	801a3a4 <_svfiprintf_r+0x50>
 801a3b0:	ebba 0b04 	subs.w	fp, sl, r4
 801a3b4:	d00b      	beq.n	801a3ce <_svfiprintf_r+0x7a>
 801a3b6:	465b      	mov	r3, fp
 801a3b8:	4622      	mov	r2, r4
 801a3ba:	4629      	mov	r1, r5
 801a3bc:	4638      	mov	r0, r7
 801a3be:	f7ff ff6d 	bl	801a29c <__ssputs_r>
 801a3c2:	3001      	adds	r0, #1
 801a3c4:	f000 80aa 	beq.w	801a51c <_svfiprintf_r+0x1c8>
 801a3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3ca:	445a      	add	r2, fp
 801a3cc:	9209      	str	r2, [sp, #36]	; 0x24
 801a3ce:	f89a 3000 	ldrb.w	r3, [sl]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	f000 80a2 	beq.w	801a51c <_svfiprintf_r+0x1c8>
 801a3d8:	2300      	movs	r3, #0
 801a3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3e2:	f10a 0a01 	add.w	sl, sl, #1
 801a3e6:	9304      	str	r3, [sp, #16]
 801a3e8:	9307      	str	r3, [sp, #28]
 801a3ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a3ee:	931a      	str	r3, [sp, #104]	; 0x68
 801a3f0:	4654      	mov	r4, sl
 801a3f2:	2205      	movs	r2, #5
 801a3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3f8:	4851      	ldr	r0, [pc, #324]	; (801a540 <_svfiprintf_r+0x1ec>)
 801a3fa:	f7e5 ff11 	bl	8000220 <memchr>
 801a3fe:	9a04      	ldr	r2, [sp, #16]
 801a400:	b9d8      	cbnz	r0, 801a43a <_svfiprintf_r+0xe6>
 801a402:	06d0      	lsls	r0, r2, #27
 801a404:	bf44      	itt	mi
 801a406:	2320      	movmi	r3, #32
 801a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a40c:	0711      	lsls	r1, r2, #28
 801a40e:	bf44      	itt	mi
 801a410:	232b      	movmi	r3, #43	; 0x2b
 801a412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a416:	f89a 3000 	ldrb.w	r3, [sl]
 801a41a:	2b2a      	cmp	r3, #42	; 0x2a
 801a41c:	d015      	beq.n	801a44a <_svfiprintf_r+0xf6>
 801a41e:	9a07      	ldr	r2, [sp, #28]
 801a420:	4654      	mov	r4, sl
 801a422:	2000      	movs	r0, #0
 801a424:	f04f 0c0a 	mov.w	ip, #10
 801a428:	4621      	mov	r1, r4
 801a42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a42e:	3b30      	subs	r3, #48	; 0x30
 801a430:	2b09      	cmp	r3, #9
 801a432:	d94e      	bls.n	801a4d2 <_svfiprintf_r+0x17e>
 801a434:	b1b0      	cbz	r0, 801a464 <_svfiprintf_r+0x110>
 801a436:	9207      	str	r2, [sp, #28]
 801a438:	e014      	b.n	801a464 <_svfiprintf_r+0x110>
 801a43a:	eba0 0308 	sub.w	r3, r0, r8
 801a43e:	fa09 f303 	lsl.w	r3, r9, r3
 801a442:	4313      	orrs	r3, r2
 801a444:	9304      	str	r3, [sp, #16]
 801a446:	46a2      	mov	sl, r4
 801a448:	e7d2      	b.n	801a3f0 <_svfiprintf_r+0x9c>
 801a44a:	9b03      	ldr	r3, [sp, #12]
 801a44c:	1d19      	adds	r1, r3, #4
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	9103      	str	r1, [sp, #12]
 801a452:	2b00      	cmp	r3, #0
 801a454:	bfbb      	ittet	lt
 801a456:	425b      	neglt	r3, r3
 801a458:	f042 0202 	orrlt.w	r2, r2, #2
 801a45c:	9307      	strge	r3, [sp, #28]
 801a45e:	9307      	strlt	r3, [sp, #28]
 801a460:	bfb8      	it	lt
 801a462:	9204      	strlt	r2, [sp, #16]
 801a464:	7823      	ldrb	r3, [r4, #0]
 801a466:	2b2e      	cmp	r3, #46	; 0x2e
 801a468:	d10c      	bne.n	801a484 <_svfiprintf_r+0x130>
 801a46a:	7863      	ldrb	r3, [r4, #1]
 801a46c:	2b2a      	cmp	r3, #42	; 0x2a
 801a46e:	d135      	bne.n	801a4dc <_svfiprintf_r+0x188>
 801a470:	9b03      	ldr	r3, [sp, #12]
 801a472:	1d1a      	adds	r2, r3, #4
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	9203      	str	r2, [sp, #12]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	bfb8      	it	lt
 801a47c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a480:	3402      	adds	r4, #2
 801a482:	9305      	str	r3, [sp, #20]
 801a484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a550 <_svfiprintf_r+0x1fc>
 801a488:	7821      	ldrb	r1, [r4, #0]
 801a48a:	2203      	movs	r2, #3
 801a48c:	4650      	mov	r0, sl
 801a48e:	f7e5 fec7 	bl	8000220 <memchr>
 801a492:	b140      	cbz	r0, 801a4a6 <_svfiprintf_r+0x152>
 801a494:	2340      	movs	r3, #64	; 0x40
 801a496:	eba0 000a 	sub.w	r0, r0, sl
 801a49a:	fa03 f000 	lsl.w	r0, r3, r0
 801a49e:	9b04      	ldr	r3, [sp, #16]
 801a4a0:	4303      	orrs	r3, r0
 801a4a2:	3401      	adds	r4, #1
 801a4a4:	9304      	str	r3, [sp, #16]
 801a4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4aa:	4826      	ldr	r0, [pc, #152]	; (801a544 <_svfiprintf_r+0x1f0>)
 801a4ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4b0:	2206      	movs	r2, #6
 801a4b2:	f7e5 feb5 	bl	8000220 <memchr>
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	d038      	beq.n	801a52c <_svfiprintf_r+0x1d8>
 801a4ba:	4b23      	ldr	r3, [pc, #140]	; (801a548 <_svfiprintf_r+0x1f4>)
 801a4bc:	bb1b      	cbnz	r3, 801a506 <_svfiprintf_r+0x1b2>
 801a4be:	9b03      	ldr	r3, [sp, #12]
 801a4c0:	3307      	adds	r3, #7
 801a4c2:	f023 0307 	bic.w	r3, r3, #7
 801a4c6:	3308      	adds	r3, #8
 801a4c8:	9303      	str	r3, [sp, #12]
 801a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4cc:	4433      	add	r3, r6
 801a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801a4d0:	e767      	b.n	801a3a2 <_svfiprintf_r+0x4e>
 801a4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4d6:	460c      	mov	r4, r1
 801a4d8:	2001      	movs	r0, #1
 801a4da:	e7a5      	b.n	801a428 <_svfiprintf_r+0xd4>
 801a4dc:	2300      	movs	r3, #0
 801a4de:	3401      	adds	r4, #1
 801a4e0:	9305      	str	r3, [sp, #20]
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	f04f 0c0a 	mov.w	ip, #10
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4ee:	3a30      	subs	r2, #48	; 0x30
 801a4f0:	2a09      	cmp	r2, #9
 801a4f2:	d903      	bls.n	801a4fc <_svfiprintf_r+0x1a8>
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d0c5      	beq.n	801a484 <_svfiprintf_r+0x130>
 801a4f8:	9105      	str	r1, [sp, #20]
 801a4fa:	e7c3      	b.n	801a484 <_svfiprintf_r+0x130>
 801a4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a500:	4604      	mov	r4, r0
 801a502:	2301      	movs	r3, #1
 801a504:	e7f0      	b.n	801a4e8 <_svfiprintf_r+0x194>
 801a506:	ab03      	add	r3, sp, #12
 801a508:	9300      	str	r3, [sp, #0]
 801a50a:	462a      	mov	r2, r5
 801a50c:	4b0f      	ldr	r3, [pc, #60]	; (801a54c <_svfiprintf_r+0x1f8>)
 801a50e:	a904      	add	r1, sp, #16
 801a510:	4638      	mov	r0, r7
 801a512:	f3af 8000 	nop.w
 801a516:	1c42      	adds	r2, r0, #1
 801a518:	4606      	mov	r6, r0
 801a51a:	d1d6      	bne.n	801a4ca <_svfiprintf_r+0x176>
 801a51c:	89ab      	ldrh	r3, [r5, #12]
 801a51e:	065b      	lsls	r3, r3, #25
 801a520:	f53f af2c 	bmi.w	801a37c <_svfiprintf_r+0x28>
 801a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a526:	b01d      	add	sp, #116	; 0x74
 801a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a52c:	ab03      	add	r3, sp, #12
 801a52e:	9300      	str	r3, [sp, #0]
 801a530:	462a      	mov	r2, r5
 801a532:	4b06      	ldr	r3, [pc, #24]	; (801a54c <_svfiprintf_r+0x1f8>)
 801a534:	a904      	add	r1, sp, #16
 801a536:	4638      	mov	r0, r7
 801a538:	f000 f9d4 	bl	801a8e4 <_printf_i>
 801a53c:	e7eb      	b.n	801a516 <_svfiprintf_r+0x1c2>
 801a53e:	bf00      	nop
 801a540:	0801e7b4 	.word	0x0801e7b4
 801a544:	0801e7be 	.word	0x0801e7be
 801a548:	00000000 	.word	0x00000000
 801a54c:	0801a29d 	.word	0x0801a29d
 801a550:	0801e7ba 	.word	0x0801e7ba

0801a554 <__sfputc_r>:
 801a554:	6893      	ldr	r3, [r2, #8]
 801a556:	3b01      	subs	r3, #1
 801a558:	2b00      	cmp	r3, #0
 801a55a:	b410      	push	{r4}
 801a55c:	6093      	str	r3, [r2, #8]
 801a55e:	da08      	bge.n	801a572 <__sfputc_r+0x1e>
 801a560:	6994      	ldr	r4, [r2, #24]
 801a562:	42a3      	cmp	r3, r4
 801a564:	db01      	blt.n	801a56a <__sfputc_r+0x16>
 801a566:	290a      	cmp	r1, #10
 801a568:	d103      	bne.n	801a572 <__sfputc_r+0x1e>
 801a56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a56e:	f000 bafb 	b.w	801ab68 <__swbuf_r>
 801a572:	6813      	ldr	r3, [r2, #0]
 801a574:	1c58      	adds	r0, r3, #1
 801a576:	6010      	str	r0, [r2, #0]
 801a578:	7019      	strb	r1, [r3, #0]
 801a57a:	4608      	mov	r0, r1
 801a57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a580:	4770      	bx	lr

0801a582 <__sfputs_r>:
 801a582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a584:	4606      	mov	r6, r0
 801a586:	460f      	mov	r7, r1
 801a588:	4614      	mov	r4, r2
 801a58a:	18d5      	adds	r5, r2, r3
 801a58c:	42ac      	cmp	r4, r5
 801a58e:	d101      	bne.n	801a594 <__sfputs_r+0x12>
 801a590:	2000      	movs	r0, #0
 801a592:	e007      	b.n	801a5a4 <__sfputs_r+0x22>
 801a594:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a598:	463a      	mov	r2, r7
 801a59a:	4630      	mov	r0, r6
 801a59c:	f7ff ffda 	bl	801a554 <__sfputc_r>
 801a5a0:	1c43      	adds	r3, r0, #1
 801a5a2:	d1f3      	bne.n	801a58c <__sfputs_r+0xa>
 801a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a5a8 <_vfiprintf_r>:
 801a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ac:	460d      	mov	r5, r1
 801a5ae:	b09d      	sub	sp, #116	; 0x74
 801a5b0:	4614      	mov	r4, r2
 801a5b2:	4698      	mov	r8, r3
 801a5b4:	4606      	mov	r6, r0
 801a5b6:	b118      	cbz	r0, 801a5c0 <_vfiprintf_r+0x18>
 801a5b8:	6983      	ldr	r3, [r0, #24]
 801a5ba:	b90b      	cbnz	r3, 801a5c0 <_vfiprintf_r+0x18>
 801a5bc:	f7fd fb0e 	bl	8017bdc <__sinit>
 801a5c0:	4b89      	ldr	r3, [pc, #548]	; (801a7e8 <_vfiprintf_r+0x240>)
 801a5c2:	429d      	cmp	r5, r3
 801a5c4:	d11b      	bne.n	801a5fe <_vfiprintf_r+0x56>
 801a5c6:	6875      	ldr	r5, [r6, #4]
 801a5c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5ca:	07d9      	lsls	r1, r3, #31
 801a5cc:	d405      	bmi.n	801a5da <_vfiprintf_r+0x32>
 801a5ce:	89ab      	ldrh	r3, [r5, #12]
 801a5d0:	059a      	lsls	r2, r3, #22
 801a5d2:	d402      	bmi.n	801a5da <_vfiprintf_r+0x32>
 801a5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5d6:	f7fd fbc4 	bl	8017d62 <__retarget_lock_acquire_recursive>
 801a5da:	89ab      	ldrh	r3, [r5, #12]
 801a5dc:	071b      	lsls	r3, r3, #28
 801a5de:	d501      	bpl.n	801a5e4 <_vfiprintf_r+0x3c>
 801a5e0:	692b      	ldr	r3, [r5, #16]
 801a5e2:	b9eb      	cbnz	r3, 801a620 <_vfiprintf_r+0x78>
 801a5e4:	4629      	mov	r1, r5
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f000 fb1e 	bl	801ac28 <__swsetup_r>
 801a5ec:	b1c0      	cbz	r0, 801a620 <_vfiprintf_r+0x78>
 801a5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5f0:	07dc      	lsls	r4, r3, #31
 801a5f2:	d50e      	bpl.n	801a612 <_vfiprintf_r+0x6a>
 801a5f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a5f8:	b01d      	add	sp, #116	; 0x74
 801a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5fe:	4b7b      	ldr	r3, [pc, #492]	; (801a7ec <_vfiprintf_r+0x244>)
 801a600:	429d      	cmp	r5, r3
 801a602:	d101      	bne.n	801a608 <_vfiprintf_r+0x60>
 801a604:	68b5      	ldr	r5, [r6, #8]
 801a606:	e7df      	b.n	801a5c8 <_vfiprintf_r+0x20>
 801a608:	4b79      	ldr	r3, [pc, #484]	; (801a7f0 <_vfiprintf_r+0x248>)
 801a60a:	429d      	cmp	r5, r3
 801a60c:	bf08      	it	eq
 801a60e:	68f5      	ldreq	r5, [r6, #12]
 801a610:	e7da      	b.n	801a5c8 <_vfiprintf_r+0x20>
 801a612:	89ab      	ldrh	r3, [r5, #12]
 801a614:	0598      	lsls	r0, r3, #22
 801a616:	d4ed      	bmi.n	801a5f4 <_vfiprintf_r+0x4c>
 801a618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a61a:	f7fd fba3 	bl	8017d64 <__retarget_lock_release_recursive>
 801a61e:	e7e9      	b.n	801a5f4 <_vfiprintf_r+0x4c>
 801a620:	2300      	movs	r3, #0
 801a622:	9309      	str	r3, [sp, #36]	; 0x24
 801a624:	2320      	movs	r3, #32
 801a626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a62a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a62e:	2330      	movs	r3, #48	; 0x30
 801a630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a7f4 <_vfiprintf_r+0x24c>
 801a634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a638:	f04f 0901 	mov.w	r9, #1
 801a63c:	4623      	mov	r3, r4
 801a63e:	469a      	mov	sl, r3
 801a640:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a644:	b10a      	cbz	r2, 801a64a <_vfiprintf_r+0xa2>
 801a646:	2a25      	cmp	r2, #37	; 0x25
 801a648:	d1f9      	bne.n	801a63e <_vfiprintf_r+0x96>
 801a64a:	ebba 0b04 	subs.w	fp, sl, r4
 801a64e:	d00b      	beq.n	801a668 <_vfiprintf_r+0xc0>
 801a650:	465b      	mov	r3, fp
 801a652:	4622      	mov	r2, r4
 801a654:	4629      	mov	r1, r5
 801a656:	4630      	mov	r0, r6
 801a658:	f7ff ff93 	bl	801a582 <__sfputs_r>
 801a65c:	3001      	adds	r0, #1
 801a65e:	f000 80aa 	beq.w	801a7b6 <_vfiprintf_r+0x20e>
 801a662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a664:	445a      	add	r2, fp
 801a666:	9209      	str	r2, [sp, #36]	; 0x24
 801a668:	f89a 3000 	ldrb.w	r3, [sl]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	f000 80a2 	beq.w	801a7b6 <_vfiprintf_r+0x20e>
 801a672:	2300      	movs	r3, #0
 801a674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a67c:	f10a 0a01 	add.w	sl, sl, #1
 801a680:	9304      	str	r3, [sp, #16]
 801a682:	9307      	str	r3, [sp, #28]
 801a684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a688:	931a      	str	r3, [sp, #104]	; 0x68
 801a68a:	4654      	mov	r4, sl
 801a68c:	2205      	movs	r2, #5
 801a68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a692:	4858      	ldr	r0, [pc, #352]	; (801a7f4 <_vfiprintf_r+0x24c>)
 801a694:	f7e5 fdc4 	bl	8000220 <memchr>
 801a698:	9a04      	ldr	r2, [sp, #16]
 801a69a:	b9d8      	cbnz	r0, 801a6d4 <_vfiprintf_r+0x12c>
 801a69c:	06d1      	lsls	r1, r2, #27
 801a69e:	bf44      	itt	mi
 801a6a0:	2320      	movmi	r3, #32
 801a6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6a6:	0713      	lsls	r3, r2, #28
 801a6a8:	bf44      	itt	mi
 801a6aa:	232b      	movmi	r3, #43	; 0x2b
 801a6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a6b4:	2b2a      	cmp	r3, #42	; 0x2a
 801a6b6:	d015      	beq.n	801a6e4 <_vfiprintf_r+0x13c>
 801a6b8:	9a07      	ldr	r2, [sp, #28]
 801a6ba:	4654      	mov	r4, sl
 801a6bc:	2000      	movs	r0, #0
 801a6be:	f04f 0c0a 	mov.w	ip, #10
 801a6c2:	4621      	mov	r1, r4
 801a6c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a6c8:	3b30      	subs	r3, #48	; 0x30
 801a6ca:	2b09      	cmp	r3, #9
 801a6cc:	d94e      	bls.n	801a76c <_vfiprintf_r+0x1c4>
 801a6ce:	b1b0      	cbz	r0, 801a6fe <_vfiprintf_r+0x156>
 801a6d0:	9207      	str	r2, [sp, #28]
 801a6d2:	e014      	b.n	801a6fe <_vfiprintf_r+0x156>
 801a6d4:	eba0 0308 	sub.w	r3, r0, r8
 801a6d8:	fa09 f303 	lsl.w	r3, r9, r3
 801a6dc:	4313      	orrs	r3, r2
 801a6de:	9304      	str	r3, [sp, #16]
 801a6e0:	46a2      	mov	sl, r4
 801a6e2:	e7d2      	b.n	801a68a <_vfiprintf_r+0xe2>
 801a6e4:	9b03      	ldr	r3, [sp, #12]
 801a6e6:	1d19      	adds	r1, r3, #4
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	9103      	str	r1, [sp, #12]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	bfbb      	ittet	lt
 801a6f0:	425b      	neglt	r3, r3
 801a6f2:	f042 0202 	orrlt.w	r2, r2, #2
 801a6f6:	9307      	strge	r3, [sp, #28]
 801a6f8:	9307      	strlt	r3, [sp, #28]
 801a6fa:	bfb8      	it	lt
 801a6fc:	9204      	strlt	r2, [sp, #16]
 801a6fe:	7823      	ldrb	r3, [r4, #0]
 801a700:	2b2e      	cmp	r3, #46	; 0x2e
 801a702:	d10c      	bne.n	801a71e <_vfiprintf_r+0x176>
 801a704:	7863      	ldrb	r3, [r4, #1]
 801a706:	2b2a      	cmp	r3, #42	; 0x2a
 801a708:	d135      	bne.n	801a776 <_vfiprintf_r+0x1ce>
 801a70a:	9b03      	ldr	r3, [sp, #12]
 801a70c:	1d1a      	adds	r2, r3, #4
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	9203      	str	r2, [sp, #12]
 801a712:	2b00      	cmp	r3, #0
 801a714:	bfb8      	it	lt
 801a716:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a71a:	3402      	adds	r4, #2
 801a71c:	9305      	str	r3, [sp, #20]
 801a71e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a804 <_vfiprintf_r+0x25c>
 801a722:	7821      	ldrb	r1, [r4, #0]
 801a724:	2203      	movs	r2, #3
 801a726:	4650      	mov	r0, sl
 801a728:	f7e5 fd7a 	bl	8000220 <memchr>
 801a72c:	b140      	cbz	r0, 801a740 <_vfiprintf_r+0x198>
 801a72e:	2340      	movs	r3, #64	; 0x40
 801a730:	eba0 000a 	sub.w	r0, r0, sl
 801a734:	fa03 f000 	lsl.w	r0, r3, r0
 801a738:	9b04      	ldr	r3, [sp, #16]
 801a73a:	4303      	orrs	r3, r0
 801a73c:	3401      	adds	r4, #1
 801a73e:	9304      	str	r3, [sp, #16]
 801a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a744:	482c      	ldr	r0, [pc, #176]	; (801a7f8 <_vfiprintf_r+0x250>)
 801a746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a74a:	2206      	movs	r2, #6
 801a74c:	f7e5 fd68 	bl	8000220 <memchr>
 801a750:	2800      	cmp	r0, #0
 801a752:	d03f      	beq.n	801a7d4 <_vfiprintf_r+0x22c>
 801a754:	4b29      	ldr	r3, [pc, #164]	; (801a7fc <_vfiprintf_r+0x254>)
 801a756:	bb1b      	cbnz	r3, 801a7a0 <_vfiprintf_r+0x1f8>
 801a758:	9b03      	ldr	r3, [sp, #12]
 801a75a:	3307      	adds	r3, #7
 801a75c:	f023 0307 	bic.w	r3, r3, #7
 801a760:	3308      	adds	r3, #8
 801a762:	9303      	str	r3, [sp, #12]
 801a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a766:	443b      	add	r3, r7
 801a768:	9309      	str	r3, [sp, #36]	; 0x24
 801a76a:	e767      	b.n	801a63c <_vfiprintf_r+0x94>
 801a76c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a770:	460c      	mov	r4, r1
 801a772:	2001      	movs	r0, #1
 801a774:	e7a5      	b.n	801a6c2 <_vfiprintf_r+0x11a>
 801a776:	2300      	movs	r3, #0
 801a778:	3401      	adds	r4, #1
 801a77a:	9305      	str	r3, [sp, #20]
 801a77c:	4619      	mov	r1, r3
 801a77e:	f04f 0c0a 	mov.w	ip, #10
 801a782:	4620      	mov	r0, r4
 801a784:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a788:	3a30      	subs	r2, #48	; 0x30
 801a78a:	2a09      	cmp	r2, #9
 801a78c:	d903      	bls.n	801a796 <_vfiprintf_r+0x1ee>
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d0c5      	beq.n	801a71e <_vfiprintf_r+0x176>
 801a792:	9105      	str	r1, [sp, #20]
 801a794:	e7c3      	b.n	801a71e <_vfiprintf_r+0x176>
 801a796:	fb0c 2101 	mla	r1, ip, r1, r2
 801a79a:	4604      	mov	r4, r0
 801a79c:	2301      	movs	r3, #1
 801a79e:	e7f0      	b.n	801a782 <_vfiprintf_r+0x1da>
 801a7a0:	ab03      	add	r3, sp, #12
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	462a      	mov	r2, r5
 801a7a6:	4b16      	ldr	r3, [pc, #88]	; (801a800 <_vfiprintf_r+0x258>)
 801a7a8:	a904      	add	r1, sp, #16
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f3af 8000 	nop.w
 801a7b0:	4607      	mov	r7, r0
 801a7b2:	1c78      	adds	r0, r7, #1
 801a7b4:	d1d6      	bne.n	801a764 <_vfiprintf_r+0x1bc>
 801a7b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7b8:	07d9      	lsls	r1, r3, #31
 801a7ba:	d405      	bmi.n	801a7c8 <_vfiprintf_r+0x220>
 801a7bc:	89ab      	ldrh	r3, [r5, #12]
 801a7be:	059a      	lsls	r2, r3, #22
 801a7c0:	d402      	bmi.n	801a7c8 <_vfiprintf_r+0x220>
 801a7c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7c4:	f7fd face 	bl	8017d64 <__retarget_lock_release_recursive>
 801a7c8:	89ab      	ldrh	r3, [r5, #12]
 801a7ca:	065b      	lsls	r3, r3, #25
 801a7cc:	f53f af12 	bmi.w	801a5f4 <_vfiprintf_r+0x4c>
 801a7d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7d2:	e711      	b.n	801a5f8 <_vfiprintf_r+0x50>
 801a7d4:	ab03      	add	r3, sp, #12
 801a7d6:	9300      	str	r3, [sp, #0]
 801a7d8:	462a      	mov	r2, r5
 801a7da:	4b09      	ldr	r3, [pc, #36]	; (801a800 <_vfiprintf_r+0x258>)
 801a7dc:	a904      	add	r1, sp, #16
 801a7de:	4630      	mov	r0, r6
 801a7e0:	f000 f880 	bl	801a8e4 <_printf_i>
 801a7e4:	e7e4      	b.n	801a7b0 <_vfiprintf_r+0x208>
 801a7e6:	bf00      	nop
 801a7e8:	0801e424 	.word	0x0801e424
 801a7ec:	0801e444 	.word	0x0801e444
 801a7f0:	0801e404 	.word	0x0801e404
 801a7f4:	0801e7b4 	.word	0x0801e7b4
 801a7f8:	0801e7be 	.word	0x0801e7be
 801a7fc:	00000000 	.word	0x00000000
 801a800:	0801a583 	.word	0x0801a583
 801a804:	0801e7ba 	.word	0x0801e7ba

0801a808 <_printf_common>:
 801a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a80c:	4616      	mov	r6, r2
 801a80e:	4699      	mov	r9, r3
 801a810:	688a      	ldr	r2, [r1, #8]
 801a812:	690b      	ldr	r3, [r1, #16]
 801a814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a818:	4293      	cmp	r3, r2
 801a81a:	bfb8      	it	lt
 801a81c:	4613      	movlt	r3, r2
 801a81e:	6033      	str	r3, [r6, #0]
 801a820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a824:	4607      	mov	r7, r0
 801a826:	460c      	mov	r4, r1
 801a828:	b10a      	cbz	r2, 801a82e <_printf_common+0x26>
 801a82a:	3301      	adds	r3, #1
 801a82c:	6033      	str	r3, [r6, #0]
 801a82e:	6823      	ldr	r3, [r4, #0]
 801a830:	0699      	lsls	r1, r3, #26
 801a832:	bf42      	ittt	mi
 801a834:	6833      	ldrmi	r3, [r6, #0]
 801a836:	3302      	addmi	r3, #2
 801a838:	6033      	strmi	r3, [r6, #0]
 801a83a:	6825      	ldr	r5, [r4, #0]
 801a83c:	f015 0506 	ands.w	r5, r5, #6
 801a840:	d106      	bne.n	801a850 <_printf_common+0x48>
 801a842:	f104 0a19 	add.w	sl, r4, #25
 801a846:	68e3      	ldr	r3, [r4, #12]
 801a848:	6832      	ldr	r2, [r6, #0]
 801a84a:	1a9b      	subs	r3, r3, r2
 801a84c:	42ab      	cmp	r3, r5
 801a84e:	dc26      	bgt.n	801a89e <_printf_common+0x96>
 801a850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a854:	1e13      	subs	r3, r2, #0
 801a856:	6822      	ldr	r2, [r4, #0]
 801a858:	bf18      	it	ne
 801a85a:	2301      	movne	r3, #1
 801a85c:	0692      	lsls	r2, r2, #26
 801a85e:	d42b      	bmi.n	801a8b8 <_printf_common+0xb0>
 801a860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a864:	4649      	mov	r1, r9
 801a866:	4638      	mov	r0, r7
 801a868:	47c0      	blx	r8
 801a86a:	3001      	adds	r0, #1
 801a86c:	d01e      	beq.n	801a8ac <_printf_common+0xa4>
 801a86e:	6823      	ldr	r3, [r4, #0]
 801a870:	68e5      	ldr	r5, [r4, #12]
 801a872:	6832      	ldr	r2, [r6, #0]
 801a874:	f003 0306 	and.w	r3, r3, #6
 801a878:	2b04      	cmp	r3, #4
 801a87a:	bf08      	it	eq
 801a87c:	1aad      	subeq	r5, r5, r2
 801a87e:	68a3      	ldr	r3, [r4, #8]
 801a880:	6922      	ldr	r2, [r4, #16]
 801a882:	bf0c      	ite	eq
 801a884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a888:	2500      	movne	r5, #0
 801a88a:	4293      	cmp	r3, r2
 801a88c:	bfc4      	itt	gt
 801a88e:	1a9b      	subgt	r3, r3, r2
 801a890:	18ed      	addgt	r5, r5, r3
 801a892:	2600      	movs	r6, #0
 801a894:	341a      	adds	r4, #26
 801a896:	42b5      	cmp	r5, r6
 801a898:	d11a      	bne.n	801a8d0 <_printf_common+0xc8>
 801a89a:	2000      	movs	r0, #0
 801a89c:	e008      	b.n	801a8b0 <_printf_common+0xa8>
 801a89e:	2301      	movs	r3, #1
 801a8a0:	4652      	mov	r2, sl
 801a8a2:	4649      	mov	r1, r9
 801a8a4:	4638      	mov	r0, r7
 801a8a6:	47c0      	blx	r8
 801a8a8:	3001      	adds	r0, #1
 801a8aa:	d103      	bne.n	801a8b4 <_printf_common+0xac>
 801a8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8b4:	3501      	adds	r5, #1
 801a8b6:	e7c6      	b.n	801a846 <_printf_common+0x3e>
 801a8b8:	18e1      	adds	r1, r4, r3
 801a8ba:	1c5a      	adds	r2, r3, #1
 801a8bc:	2030      	movs	r0, #48	; 0x30
 801a8be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a8c2:	4422      	add	r2, r4
 801a8c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a8c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a8cc:	3302      	adds	r3, #2
 801a8ce:	e7c7      	b.n	801a860 <_printf_common+0x58>
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	4649      	mov	r1, r9
 801a8d6:	4638      	mov	r0, r7
 801a8d8:	47c0      	blx	r8
 801a8da:	3001      	adds	r0, #1
 801a8dc:	d0e6      	beq.n	801a8ac <_printf_common+0xa4>
 801a8de:	3601      	adds	r6, #1
 801a8e0:	e7d9      	b.n	801a896 <_printf_common+0x8e>
	...

0801a8e4 <_printf_i>:
 801a8e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8e8:	7e0f      	ldrb	r7, [r1, #24]
 801a8ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a8ec:	2f78      	cmp	r7, #120	; 0x78
 801a8ee:	4691      	mov	r9, r2
 801a8f0:	4680      	mov	r8, r0
 801a8f2:	460c      	mov	r4, r1
 801a8f4:	469a      	mov	sl, r3
 801a8f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a8fa:	d807      	bhi.n	801a90c <_printf_i+0x28>
 801a8fc:	2f62      	cmp	r7, #98	; 0x62
 801a8fe:	d80a      	bhi.n	801a916 <_printf_i+0x32>
 801a900:	2f00      	cmp	r7, #0
 801a902:	f000 80d8 	beq.w	801aab6 <_printf_i+0x1d2>
 801a906:	2f58      	cmp	r7, #88	; 0x58
 801a908:	f000 80a3 	beq.w	801aa52 <_printf_i+0x16e>
 801a90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a914:	e03a      	b.n	801a98c <_printf_i+0xa8>
 801a916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a91a:	2b15      	cmp	r3, #21
 801a91c:	d8f6      	bhi.n	801a90c <_printf_i+0x28>
 801a91e:	a101      	add	r1, pc, #4	; (adr r1, 801a924 <_printf_i+0x40>)
 801a920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a924:	0801a97d 	.word	0x0801a97d
 801a928:	0801a991 	.word	0x0801a991
 801a92c:	0801a90d 	.word	0x0801a90d
 801a930:	0801a90d 	.word	0x0801a90d
 801a934:	0801a90d 	.word	0x0801a90d
 801a938:	0801a90d 	.word	0x0801a90d
 801a93c:	0801a991 	.word	0x0801a991
 801a940:	0801a90d 	.word	0x0801a90d
 801a944:	0801a90d 	.word	0x0801a90d
 801a948:	0801a90d 	.word	0x0801a90d
 801a94c:	0801a90d 	.word	0x0801a90d
 801a950:	0801aa9d 	.word	0x0801aa9d
 801a954:	0801a9c1 	.word	0x0801a9c1
 801a958:	0801aa7f 	.word	0x0801aa7f
 801a95c:	0801a90d 	.word	0x0801a90d
 801a960:	0801a90d 	.word	0x0801a90d
 801a964:	0801aabf 	.word	0x0801aabf
 801a968:	0801a90d 	.word	0x0801a90d
 801a96c:	0801a9c1 	.word	0x0801a9c1
 801a970:	0801a90d 	.word	0x0801a90d
 801a974:	0801a90d 	.word	0x0801a90d
 801a978:	0801aa87 	.word	0x0801aa87
 801a97c:	682b      	ldr	r3, [r5, #0]
 801a97e:	1d1a      	adds	r2, r3, #4
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	602a      	str	r2, [r5, #0]
 801a984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a98c:	2301      	movs	r3, #1
 801a98e:	e0a3      	b.n	801aad8 <_printf_i+0x1f4>
 801a990:	6820      	ldr	r0, [r4, #0]
 801a992:	6829      	ldr	r1, [r5, #0]
 801a994:	0606      	lsls	r6, r0, #24
 801a996:	f101 0304 	add.w	r3, r1, #4
 801a99a:	d50a      	bpl.n	801a9b2 <_printf_i+0xce>
 801a99c:	680e      	ldr	r6, [r1, #0]
 801a99e:	602b      	str	r3, [r5, #0]
 801a9a0:	2e00      	cmp	r6, #0
 801a9a2:	da03      	bge.n	801a9ac <_printf_i+0xc8>
 801a9a4:	232d      	movs	r3, #45	; 0x2d
 801a9a6:	4276      	negs	r6, r6
 801a9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a9ac:	485e      	ldr	r0, [pc, #376]	; (801ab28 <_printf_i+0x244>)
 801a9ae:	230a      	movs	r3, #10
 801a9b0:	e019      	b.n	801a9e6 <_printf_i+0x102>
 801a9b2:	680e      	ldr	r6, [r1, #0]
 801a9b4:	602b      	str	r3, [r5, #0]
 801a9b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a9ba:	bf18      	it	ne
 801a9bc:	b236      	sxthne	r6, r6
 801a9be:	e7ef      	b.n	801a9a0 <_printf_i+0xbc>
 801a9c0:	682b      	ldr	r3, [r5, #0]
 801a9c2:	6820      	ldr	r0, [r4, #0]
 801a9c4:	1d19      	adds	r1, r3, #4
 801a9c6:	6029      	str	r1, [r5, #0]
 801a9c8:	0601      	lsls	r1, r0, #24
 801a9ca:	d501      	bpl.n	801a9d0 <_printf_i+0xec>
 801a9cc:	681e      	ldr	r6, [r3, #0]
 801a9ce:	e002      	b.n	801a9d6 <_printf_i+0xf2>
 801a9d0:	0646      	lsls	r6, r0, #25
 801a9d2:	d5fb      	bpl.n	801a9cc <_printf_i+0xe8>
 801a9d4:	881e      	ldrh	r6, [r3, #0]
 801a9d6:	4854      	ldr	r0, [pc, #336]	; (801ab28 <_printf_i+0x244>)
 801a9d8:	2f6f      	cmp	r7, #111	; 0x6f
 801a9da:	bf0c      	ite	eq
 801a9dc:	2308      	moveq	r3, #8
 801a9de:	230a      	movne	r3, #10
 801a9e0:	2100      	movs	r1, #0
 801a9e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a9e6:	6865      	ldr	r5, [r4, #4]
 801a9e8:	60a5      	str	r5, [r4, #8]
 801a9ea:	2d00      	cmp	r5, #0
 801a9ec:	bfa2      	ittt	ge
 801a9ee:	6821      	ldrge	r1, [r4, #0]
 801a9f0:	f021 0104 	bicge.w	r1, r1, #4
 801a9f4:	6021      	strge	r1, [r4, #0]
 801a9f6:	b90e      	cbnz	r6, 801a9fc <_printf_i+0x118>
 801a9f8:	2d00      	cmp	r5, #0
 801a9fa:	d04d      	beq.n	801aa98 <_printf_i+0x1b4>
 801a9fc:	4615      	mov	r5, r2
 801a9fe:	fbb6 f1f3 	udiv	r1, r6, r3
 801aa02:	fb03 6711 	mls	r7, r3, r1, r6
 801aa06:	5dc7      	ldrb	r7, [r0, r7]
 801aa08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aa0c:	4637      	mov	r7, r6
 801aa0e:	42bb      	cmp	r3, r7
 801aa10:	460e      	mov	r6, r1
 801aa12:	d9f4      	bls.n	801a9fe <_printf_i+0x11a>
 801aa14:	2b08      	cmp	r3, #8
 801aa16:	d10b      	bne.n	801aa30 <_printf_i+0x14c>
 801aa18:	6823      	ldr	r3, [r4, #0]
 801aa1a:	07de      	lsls	r6, r3, #31
 801aa1c:	d508      	bpl.n	801aa30 <_printf_i+0x14c>
 801aa1e:	6923      	ldr	r3, [r4, #16]
 801aa20:	6861      	ldr	r1, [r4, #4]
 801aa22:	4299      	cmp	r1, r3
 801aa24:	bfde      	ittt	le
 801aa26:	2330      	movle	r3, #48	; 0x30
 801aa28:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aa2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801aa30:	1b52      	subs	r2, r2, r5
 801aa32:	6122      	str	r2, [r4, #16]
 801aa34:	f8cd a000 	str.w	sl, [sp]
 801aa38:	464b      	mov	r3, r9
 801aa3a:	aa03      	add	r2, sp, #12
 801aa3c:	4621      	mov	r1, r4
 801aa3e:	4640      	mov	r0, r8
 801aa40:	f7ff fee2 	bl	801a808 <_printf_common>
 801aa44:	3001      	adds	r0, #1
 801aa46:	d14c      	bne.n	801aae2 <_printf_i+0x1fe>
 801aa48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa4c:	b004      	add	sp, #16
 801aa4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa52:	4835      	ldr	r0, [pc, #212]	; (801ab28 <_printf_i+0x244>)
 801aa54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801aa58:	6829      	ldr	r1, [r5, #0]
 801aa5a:	6823      	ldr	r3, [r4, #0]
 801aa5c:	f851 6b04 	ldr.w	r6, [r1], #4
 801aa60:	6029      	str	r1, [r5, #0]
 801aa62:	061d      	lsls	r5, r3, #24
 801aa64:	d514      	bpl.n	801aa90 <_printf_i+0x1ac>
 801aa66:	07df      	lsls	r7, r3, #31
 801aa68:	bf44      	itt	mi
 801aa6a:	f043 0320 	orrmi.w	r3, r3, #32
 801aa6e:	6023      	strmi	r3, [r4, #0]
 801aa70:	b91e      	cbnz	r6, 801aa7a <_printf_i+0x196>
 801aa72:	6823      	ldr	r3, [r4, #0]
 801aa74:	f023 0320 	bic.w	r3, r3, #32
 801aa78:	6023      	str	r3, [r4, #0]
 801aa7a:	2310      	movs	r3, #16
 801aa7c:	e7b0      	b.n	801a9e0 <_printf_i+0xfc>
 801aa7e:	6823      	ldr	r3, [r4, #0]
 801aa80:	f043 0320 	orr.w	r3, r3, #32
 801aa84:	6023      	str	r3, [r4, #0]
 801aa86:	2378      	movs	r3, #120	; 0x78
 801aa88:	4828      	ldr	r0, [pc, #160]	; (801ab2c <_printf_i+0x248>)
 801aa8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aa8e:	e7e3      	b.n	801aa58 <_printf_i+0x174>
 801aa90:	0659      	lsls	r1, r3, #25
 801aa92:	bf48      	it	mi
 801aa94:	b2b6      	uxthmi	r6, r6
 801aa96:	e7e6      	b.n	801aa66 <_printf_i+0x182>
 801aa98:	4615      	mov	r5, r2
 801aa9a:	e7bb      	b.n	801aa14 <_printf_i+0x130>
 801aa9c:	682b      	ldr	r3, [r5, #0]
 801aa9e:	6826      	ldr	r6, [r4, #0]
 801aaa0:	6961      	ldr	r1, [r4, #20]
 801aaa2:	1d18      	adds	r0, r3, #4
 801aaa4:	6028      	str	r0, [r5, #0]
 801aaa6:	0635      	lsls	r5, r6, #24
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	d501      	bpl.n	801aab0 <_printf_i+0x1cc>
 801aaac:	6019      	str	r1, [r3, #0]
 801aaae:	e002      	b.n	801aab6 <_printf_i+0x1d2>
 801aab0:	0670      	lsls	r0, r6, #25
 801aab2:	d5fb      	bpl.n	801aaac <_printf_i+0x1c8>
 801aab4:	8019      	strh	r1, [r3, #0]
 801aab6:	2300      	movs	r3, #0
 801aab8:	6123      	str	r3, [r4, #16]
 801aaba:	4615      	mov	r5, r2
 801aabc:	e7ba      	b.n	801aa34 <_printf_i+0x150>
 801aabe:	682b      	ldr	r3, [r5, #0]
 801aac0:	1d1a      	adds	r2, r3, #4
 801aac2:	602a      	str	r2, [r5, #0]
 801aac4:	681d      	ldr	r5, [r3, #0]
 801aac6:	6862      	ldr	r2, [r4, #4]
 801aac8:	2100      	movs	r1, #0
 801aaca:	4628      	mov	r0, r5
 801aacc:	f7e5 fba8 	bl	8000220 <memchr>
 801aad0:	b108      	cbz	r0, 801aad6 <_printf_i+0x1f2>
 801aad2:	1b40      	subs	r0, r0, r5
 801aad4:	6060      	str	r0, [r4, #4]
 801aad6:	6863      	ldr	r3, [r4, #4]
 801aad8:	6123      	str	r3, [r4, #16]
 801aada:	2300      	movs	r3, #0
 801aadc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aae0:	e7a8      	b.n	801aa34 <_printf_i+0x150>
 801aae2:	6923      	ldr	r3, [r4, #16]
 801aae4:	462a      	mov	r2, r5
 801aae6:	4649      	mov	r1, r9
 801aae8:	4640      	mov	r0, r8
 801aaea:	47d0      	blx	sl
 801aaec:	3001      	adds	r0, #1
 801aaee:	d0ab      	beq.n	801aa48 <_printf_i+0x164>
 801aaf0:	6823      	ldr	r3, [r4, #0]
 801aaf2:	079b      	lsls	r3, r3, #30
 801aaf4:	d413      	bmi.n	801ab1e <_printf_i+0x23a>
 801aaf6:	68e0      	ldr	r0, [r4, #12]
 801aaf8:	9b03      	ldr	r3, [sp, #12]
 801aafa:	4298      	cmp	r0, r3
 801aafc:	bfb8      	it	lt
 801aafe:	4618      	movlt	r0, r3
 801ab00:	e7a4      	b.n	801aa4c <_printf_i+0x168>
 801ab02:	2301      	movs	r3, #1
 801ab04:	4632      	mov	r2, r6
 801ab06:	4649      	mov	r1, r9
 801ab08:	4640      	mov	r0, r8
 801ab0a:	47d0      	blx	sl
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	d09b      	beq.n	801aa48 <_printf_i+0x164>
 801ab10:	3501      	adds	r5, #1
 801ab12:	68e3      	ldr	r3, [r4, #12]
 801ab14:	9903      	ldr	r1, [sp, #12]
 801ab16:	1a5b      	subs	r3, r3, r1
 801ab18:	42ab      	cmp	r3, r5
 801ab1a:	dcf2      	bgt.n	801ab02 <_printf_i+0x21e>
 801ab1c:	e7eb      	b.n	801aaf6 <_printf_i+0x212>
 801ab1e:	2500      	movs	r5, #0
 801ab20:	f104 0619 	add.w	r6, r4, #25
 801ab24:	e7f5      	b.n	801ab12 <_printf_i+0x22e>
 801ab26:	bf00      	nop
 801ab28:	0801e7c5 	.word	0x0801e7c5
 801ab2c:	0801e7d6 	.word	0x0801e7d6

0801ab30 <_read_r>:
 801ab30:	b538      	push	{r3, r4, r5, lr}
 801ab32:	4d07      	ldr	r5, [pc, #28]	; (801ab50 <_read_r+0x20>)
 801ab34:	4604      	mov	r4, r0
 801ab36:	4608      	mov	r0, r1
 801ab38:	4611      	mov	r1, r2
 801ab3a:	2200      	movs	r2, #0
 801ab3c:	602a      	str	r2, [r5, #0]
 801ab3e:	461a      	mov	r2, r3
 801ab40:	f7e7 f8d0 	bl	8001ce4 <_read>
 801ab44:	1c43      	adds	r3, r0, #1
 801ab46:	d102      	bne.n	801ab4e <_read_r+0x1e>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	b103      	cbz	r3, 801ab4e <_read_r+0x1e>
 801ab4c:	6023      	str	r3, [r4, #0]
 801ab4e:	bd38      	pop	{r3, r4, r5, pc}
 801ab50:	20011d1c 	.word	0x20011d1c
 801ab54:	00000000 	.word	0x00000000

0801ab58 <nan>:
 801ab58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ab60 <nan+0x8>
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop
 801ab60:	00000000 	.word	0x00000000
 801ab64:	7ff80000 	.word	0x7ff80000

0801ab68 <__swbuf_r>:
 801ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab6a:	460e      	mov	r6, r1
 801ab6c:	4614      	mov	r4, r2
 801ab6e:	4605      	mov	r5, r0
 801ab70:	b118      	cbz	r0, 801ab7a <__swbuf_r+0x12>
 801ab72:	6983      	ldr	r3, [r0, #24]
 801ab74:	b90b      	cbnz	r3, 801ab7a <__swbuf_r+0x12>
 801ab76:	f7fd f831 	bl	8017bdc <__sinit>
 801ab7a:	4b21      	ldr	r3, [pc, #132]	; (801ac00 <__swbuf_r+0x98>)
 801ab7c:	429c      	cmp	r4, r3
 801ab7e:	d12b      	bne.n	801abd8 <__swbuf_r+0x70>
 801ab80:	686c      	ldr	r4, [r5, #4]
 801ab82:	69a3      	ldr	r3, [r4, #24]
 801ab84:	60a3      	str	r3, [r4, #8]
 801ab86:	89a3      	ldrh	r3, [r4, #12]
 801ab88:	071a      	lsls	r2, r3, #28
 801ab8a:	d52f      	bpl.n	801abec <__swbuf_r+0x84>
 801ab8c:	6923      	ldr	r3, [r4, #16]
 801ab8e:	b36b      	cbz	r3, 801abec <__swbuf_r+0x84>
 801ab90:	6923      	ldr	r3, [r4, #16]
 801ab92:	6820      	ldr	r0, [r4, #0]
 801ab94:	1ac0      	subs	r0, r0, r3
 801ab96:	6963      	ldr	r3, [r4, #20]
 801ab98:	b2f6      	uxtb	r6, r6
 801ab9a:	4283      	cmp	r3, r0
 801ab9c:	4637      	mov	r7, r6
 801ab9e:	dc04      	bgt.n	801abaa <__swbuf_r+0x42>
 801aba0:	4621      	mov	r1, r4
 801aba2:	4628      	mov	r0, r5
 801aba4:	f7fe fa60 	bl	8019068 <_fflush_r>
 801aba8:	bb30      	cbnz	r0, 801abf8 <__swbuf_r+0x90>
 801abaa:	68a3      	ldr	r3, [r4, #8]
 801abac:	3b01      	subs	r3, #1
 801abae:	60a3      	str	r3, [r4, #8]
 801abb0:	6823      	ldr	r3, [r4, #0]
 801abb2:	1c5a      	adds	r2, r3, #1
 801abb4:	6022      	str	r2, [r4, #0]
 801abb6:	701e      	strb	r6, [r3, #0]
 801abb8:	6963      	ldr	r3, [r4, #20]
 801abba:	3001      	adds	r0, #1
 801abbc:	4283      	cmp	r3, r0
 801abbe:	d004      	beq.n	801abca <__swbuf_r+0x62>
 801abc0:	89a3      	ldrh	r3, [r4, #12]
 801abc2:	07db      	lsls	r3, r3, #31
 801abc4:	d506      	bpl.n	801abd4 <__swbuf_r+0x6c>
 801abc6:	2e0a      	cmp	r6, #10
 801abc8:	d104      	bne.n	801abd4 <__swbuf_r+0x6c>
 801abca:	4621      	mov	r1, r4
 801abcc:	4628      	mov	r0, r5
 801abce:	f7fe fa4b 	bl	8019068 <_fflush_r>
 801abd2:	b988      	cbnz	r0, 801abf8 <__swbuf_r+0x90>
 801abd4:	4638      	mov	r0, r7
 801abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abd8:	4b0a      	ldr	r3, [pc, #40]	; (801ac04 <__swbuf_r+0x9c>)
 801abda:	429c      	cmp	r4, r3
 801abdc:	d101      	bne.n	801abe2 <__swbuf_r+0x7a>
 801abde:	68ac      	ldr	r4, [r5, #8]
 801abe0:	e7cf      	b.n	801ab82 <__swbuf_r+0x1a>
 801abe2:	4b09      	ldr	r3, [pc, #36]	; (801ac08 <__swbuf_r+0xa0>)
 801abe4:	429c      	cmp	r4, r3
 801abe6:	bf08      	it	eq
 801abe8:	68ec      	ldreq	r4, [r5, #12]
 801abea:	e7ca      	b.n	801ab82 <__swbuf_r+0x1a>
 801abec:	4621      	mov	r1, r4
 801abee:	4628      	mov	r0, r5
 801abf0:	f000 f81a 	bl	801ac28 <__swsetup_r>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	d0cb      	beq.n	801ab90 <__swbuf_r+0x28>
 801abf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801abfc:	e7ea      	b.n	801abd4 <__swbuf_r+0x6c>
 801abfe:	bf00      	nop
 801ac00:	0801e424 	.word	0x0801e424
 801ac04:	0801e444 	.word	0x0801e444
 801ac08:	0801e404 	.word	0x0801e404

0801ac0c <__ascii_wctomb>:
 801ac0c:	b149      	cbz	r1, 801ac22 <__ascii_wctomb+0x16>
 801ac0e:	2aff      	cmp	r2, #255	; 0xff
 801ac10:	bf85      	ittet	hi
 801ac12:	238a      	movhi	r3, #138	; 0x8a
 801ac14:	6003      	strhi	r3, [r0, #0]
 801ac16:	700a      	strbls	r2, [r1, #0]
 801ac18:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801ac1c:	bf98      	it	ls
 801ac1e:	2001      	movls	r0, #1
 801ac20:	4770      	bx	lr
 801ac22:	4608      	mov	r0, r1
 801ac24:	4770      	bx	lr
	...

0801ac28 <__swsetup_r>:
 801ac28:	4b32      	ldr	r3, [pc, #200]	; (801acf4 <__swsetup_r+0xcc>)
 801ac2a:	b570      	push	{r4, r5, r6, lr}
 801ac2c:	681d      	ldr	r5, [r3, #0]
 801ac2e:	4606      	mov	r6, r0
 801ac30:	460c      	mov	r4, r1
 801ac32:	b125      	cbz	r5, 801ac3e <__swsetup_r+0x16>
 801ac34:	69ab      	ldr	r3, [r5, #24]
 801ac36:	b913      	cbnz	r3, 801ac3e <__swsetup_r+0x16>
 801ac38:	4628      	mov	r0, r5
 801ac3a:	f7fc ffcf 	bl	8017bdc <__sinit>
 801ac3e:	4b2e      	ldr	r3, [pc, #184]	; (801acf8 <__swsetup_r+0xd0>)
 801ac40:	429c      	cmp	r4, r3
 801ac42:	d10f      	bne.n	801ac64 <__swsetup_r+0x3c>
 801ac44:	686c      	ldr	r4, [r5, #4]
 801ac46:	89a3      	ldrh	r3, [r4, #12]
 801ac48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ac4c:	0719      	lsls	r1, r3, #28
 801ac4e:	d42c      	bmi.n	801acaa <__swsetup_r+0x82>
 801ac50:	06dd      	lsls	r5, r3, #27
 801ac52:	d411      	bmi.n	801ac78 <__swsetup_r+0x50>
 801ac54:	2309      	movs	r3, #9
 801ac56:	6033      	str	r3, [r6, #0]
 801ac58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ac5c:	81a3      	strh	r3, [r4, #12]
 801ac5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac62:	e03e      	b.n	801ace2 <__swsetup_r+0xba>
 801ac64:	4b25      	ldr	r3, [pc, #148]	; (801acfc <__swsetup_r+0xd4>)
 801ac66:	429c      	cmp	r4, r3
 801ac68:	d101      	bne.n	801ac6e <__swsetup_r+0x46>
 801ac6a:	68ac      	ldr	r4, [r5, #8]
 801ac6c:	e7eb      	b.n	801ac46 <__swsetup_r+0x1e>
 801ac6e:	4b24      	ldr	r3, [pc, #144]	; (801ad00 <__swsetup_r+0xd8>)
 801ac70:	429c      	cmp	r4, r3
 801ac72:	bf08      	it	eq
 801ac74:	68ec      	ldreq	r4, [r5, #12]
 801ac76:	e7e6      	b.n	801ac46 <__swsetup_r+0x1e>
 801ac78:	0758      	lsls	r0, r3, #29
 801ac7a:	d512      	bpl.n	801aca2 <__swsetup_r+0x7a>
 801ac7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac7e:	b141      	cbz	r1, 801ac92 <__swsetup_r+0x6a>
 801ac80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac84:	4299      	cmp	r1, r3
 801ac86:	d002      	beq.n	801ac8e <__swsetup_r+0x66>
 801ac88:	4630      	mov	r0, r6
 801ac8a:	f7ff fabb 	bl	801a204 <_free_r>
 801ac8e:	2300      	movs	r3, #0
 801ac90:	6363      	str	r3, [r4, #52]	; 0x34
 801ac92:	89a3      	ldrh	r3, [r4, #12]
 801ac94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ac98:	81a3      	strh	r3, [r4, #12]
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	6063      	str	r3, [r4, #4]
 801ac9e:	6923      	ldr	r3, [r4, #16]
 801aca0:	6023      	str	r3, [r4, #0]
 801aca2:	89a3      	ldrh	r3, [r4, #12]
 801aca4:	f043 0308 	orr.w	r3, r3, #8
 801aca8:	81a3      	strh	r3, [r4, #12]
 801acaa:	6923      	ldr	r3, [r4, #16]
 801acac:	b94b      	cbnz	r3, 801acc2 <__swsetup_r+0x9a>
 801acae:	89a3      	ldrh	r3, [r4, #12]
 801acb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801acb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801acb8:	d003      	beq.n	801acc2 <__swsetup_r+0x9a>
 801acba:	4621      	mov	r1, r4
 801acbc:	4630      	mov	r0, r6
 801acbe:	f000 f84d 	bl	801ad5c <__smakebuf_r>
 801acc2:	89a0      	ldrh	r0, [r4, #12]
 801acc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801acc8:	f010 0301 	ands.w	r3, r0, #1
 801accc:	d00a      	beq.n	801ace4 <__swsetup_r+0xbc>
 801acce:	2300      	movs	r3, #0
 801acd0:	60a3      	str	r3, [r4, #8]
 801acd2:	6963      	ldr	r3, [r4, #20]
 801acd4:	425b      	negs	r3, r3
 801acd6:	61a3      	str	r3, [r4, #24]
 801acd8:	6923      	ldr	r3, [r4, #16]
 801acda:	b943      	cbnz	r3, 801acee <__swsetup_r+0xc6>
 801acdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ace0:	d1ba      	bne.n	801ac58 <__swsetup_r+0x30>
 801ace2:	bd70      	pop	{r4, r5, r6, pc}
 801ace4:	0781      	lsls	r1, r0, #30
 801ace6:	bf58      	it	pl
 801ace8:	6963      	ldrpl	r3, [r4, #20]
 801acea:	60a3      	str	r3, [r4, #8]
 801acec:	e7f4      	b.n	801acd8 <__swsetup_r+0xb0>
 801acee:	2000      	movs	r0, #0
 801acf0:	e7f7      	b.n	801ace2 <__swsetup_r+0xba>
 801acf2:	bf00      	nop
 801acf4:	2000002c 	.word	0x2000002c
 801acf8:	0801e424 	.word	0x0801e424
 801acfc:	0801e444 	.word	0x0801e444
 801ad00:	0801e404 	.word	0x0801e404

0801ad04 <abort>:
 801ad04:	b508      	push	{r3, lr}
 801ad06:	2006      	movs	r0, #6
 801ad08:	f000 f8c0 	bl	801ae8c <raise>
 801ad0c:	2001      	movs	r0, #1
 801ad0e:	f7e6 ffdf 	bl	8001cd0 <_exit>

0801ad12 <__swhatbuf_r>:
 801ad12:	b570      	push	{r4, r5, r6, lr}
 801ad14:	460e      	mov	r6, r1
 801ad16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad1a:	2900      	cmp	r1, #0
 801ad1c:	b096      	sub	sp, #88	; 0x58
 801ad1e:	4614      	mov	r4, r2
 801ad20:	461d      	mov	r5, r3
 801ad22:	da08      	bge.n	801ad36 <__swhatbuf_r+0x24>
 801ad24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	602a      	str	r2, [r5, #0]
 801ad2c:	061a      	lsls	r2, r3, #24
 801ad2e:	d410      	bmi.n	801ad52 <__swhatbuf_r+0x40>
 801ad30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ad34:	e00e      	b.n	801ad54 <__swhatbuf_r+0x42>
 801ad36:	466a      	mov	r2, sp
 801ad38:	f000 f8c4 	bl	801aec4 <_fstat_r>
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	dbf1      	blt.n	801ad24 <__swhatbuf_r+0x12>
 801ad40:	9a01      	ldr	r2, [sp, #4]
 801ad42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ad46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ad4a:	425a      	negs	r2, r3
 801ad4c:	415a      	adcs	r2, r3
 801ad4e:	602a      	str	r2, [r5, #0]
 801ad50:	e7ee      	b.n	801ad30 <__swhatbuf_r+0x1e>
 801ad52:	2340      	movs	r3, #64	; 0x40
 801ad54:	2000      	movs	r0, #0
 801ad56:	6023      	str	r3, [r4, #0]
 801ad58:	b016      	add	sp, #88	; 0x58
 801ad5a:	bd70      	pop	{r4, r5, r6, pc}

0801ad5c <__smakebuf_r>:
 801ad5c:	898b      	ldrh	r3, [r1, #12]
 801ad5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ad60:	079d      	lsls	r5, r3, #30
 801ad62:	4606      	mov	r6, r0
 801ad64:	460c      	mov	r4, r1
 801ad66:	d507      	bpl.n	801ad78 <__smakebuf_r+0x1c>
 801ad68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ad6c:	6023      	str	r3, [r4, #0]
 801ad6e:	6123      	str	r3, [r4, #16]
 801ad70:	2301      	movs	r3, #1
 801ad72:	6163      	str	r3, [r4, #20]
 801ad74:	b002      	add	sp, #8
 801ad76:	bd70      	pop	{r4, r5, r6, pc}
 801ad78:	ab01      	add	r3, sp, #4
 801ad7a:	466a      	mov	r2, sp
 801ad7c:	f7ff ffc9 	bl	801ad12 <__swhatbuf_r>
 801ad80:	9900      	ldr	r1, [sp, #0]
 801ad82:	4605      	mov	r5, r0
 801ad84:	4630      	mov	r0, r6
 801ad86:	f7fd f84f 	bl	8017e28 <_malloc_r>
 801ad8a:	b948      	cbnz	r0, 801ada0 <__smakebuf_r+0x44>
 801ad8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad90:	059a      	lsls	r2, r3, #22
 801ad92:	d4ef      	bmi.n	801ad74 <__smakebuf_r+0x18>
 801ad94:	f023 0303 	bic.w	r3, r3, #3
 801ad98:	f043 0302 	orr.w	r3, r3, #2
 801ad9c:	81a3      	strh	r3, [r4, #12]
 801ad9e:	e7e3      	b.n	801ad68 <__smakebuf_r+0xc>
 801ada0:	4b0d      	ldr	r3, [pc, #52]	; (801add8 <__smakebuf_r+0x7c>)
 801ada2:	62b3      	str	r3, [r6, #40]	; 0x28
 801ada4:	89a3      	ldrh	r3, [r4, #12]
 801ada6:	6020      	str	r0, [r4, #0]
 801ada8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adac:	81a3      	strh	r3, [r4, #12]
 801adae:	9b00      	ldr	r3, [sp, #0]
 801adb0:	6163      	str	r3, [r4, #20]
 801adb2:	9b01      	ldr	r3, [sp, #4]
 801adb4:	6120      	str	r0, [r4, #16]
 801adb6:	b15b      	cbz	r3, 801add0 <__smakebuf_r+0x74>
 801adb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adbc:	4630      	mov	r0, r6
 801adbe:	f000 f893 	bl	801aee8 <_isatty_r>
 801adc2:	b128      	cbz	r0, 801add0 <__smakebuf_r+0x74>
 801adc4:	89a3      	ldrh	r3, [r4, #12]
 801adc6:	f023 0303 	bic.w	r3, r3, #3
 801adca:	f043 0301 	orr.w	r3, r3, #1
 801adce:	81a3      	strh	r3, [r4, #12]
 801add0:	89a0      	ldrh	r0, [r4, #12]
 801add2:	4305      	orrs	r5, r0
 801add4:	81a5      	strh	r5, [r4, #12]
 801add6:	e7cd      	b.n	801ad74 <__smakebuf_r+0x18>
 801add8:	08017b75 	.word	0x08017b75

0801addc <_realloc_r>:
 801addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ade0:	4680      	mov	r8, r0
 801ade2:	4614      	mov	r4, r2
 801ade4:	460e      	mov	r6, r1
 801ade6:	b921      	cbnz	r1, 801adf2 <_realloc_r+0x16>
 801ade8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801adec:	4611      	mov	r1, r2
 801adee:	f7fd b81b 	b.w	8017e28 <_malloc_r>
 801adf2:	b92a      	cbnz	r2, 801ae00 <_realloc_r+0x24>
 801adf4:	f7ff fa06 	bl	801a204 <_free_r>
 801adf8:	4625      	mov	r5, r4
 801adfa:	4628      	mov	r0, r5
 801adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae00:	f000 f882 	bl	801af08 <_malloc_usable_size_r>
 801ae04:	4284      	cmp	r4, r0
 801ae06:	4607      	mov	r7, r0
 801ae08:	d802      	bhi.n	801ae10 <_realloc_r+0x34>
 801ae0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ae0e:	d812      	bhi.n	801ae36 <_realloc_r+0x5a>
 801ae10:	4621      	mov	r1, r4
 801ae12:	4640      	mov	r0, r8
 801ae14:	f7fd f808 	bl	8017e28 <_malloc_r>
 801ae18:	4605      	mov	r5, r0
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d0ed      	beq.n	801adfa <_realloc_r+0x1e>
 801ae1e:	42bc      	cmp	r4, r7
 801ae20:	4622      	mov	r2, r4
 801ae22:	4631      	mov	r1, r6
 801ae24:	bf28      	it	cs
 801ae26:	463a      	movcs	r2, r7
 801ae28:	f7fc ffad 	bl	8017d86 <memcpy>
 801ae2c:	4631      	mov	r1, r6
 801ae2e:	4640      	mov	r0, r8
 801ae30:	f7ff f9e8 	bl	801a204 <_free_r>
 801ae34:	e7e1      	b.n	801adfa <_realloc_r+0x1e>
 801ae36:	4635      	mov	r5, r6
 801ae38:	e7df      	b.n	801adfa <_realloc_r+0x1e>

0801ae3a <_raise_r>:
 801ae3a:	291f      	cmp	r1, #31
 801ae3c:	b538      	push	{r3, r4, r5, lr}
 801ae3e:	4604      	mov	r4, r0
 801ae40:	460d      	mov	r5, r1
 801ae42:	d904      	bls.n	801ae4e <_raise_r+0x14>
 801ae44:	2316      	movs	r3, #22
 801ae46:	6003      	str	r3, [r0, #0]
 801ae48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae4c:	bd38      	pop	{r3, r4, r5, pc}
 801ae4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ae50:	b112      	cbz	r2, 801ae58 <_raise_r+0x1e>
 801ae52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae56:	b94b      	cbnz	r3, 801ae6c <_raise_r+0x32>
 801ae58:	4620      	mov	r0, r4
 801ae5a:	f000 f831 	bl	801aec0 <_getpid_r>
 801ae5e:	462a      	mov	r2, r5
 801ae60:	4601      	mov	r1, r0
 801ae62:	4620      	mov	r0, r4
 801ae64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae68:	f000 b818 	b.w	801ae9c <_kill_r>
 801ae6c:	2b01      	cmp	r3, #1
 801ae6e:	d00a      	beq.n	801ae86 <_raise_r+0x4c>
 801ae70:	1c59      	adds	r1, r3, #1
 801ae72:	d103      	bne.n	801ae7c <_raise_r+0x42>
 801ae74:	2316      	movs	r3, #22
 801ae76:	6003      	str	r3, [r0, #0]
 801ae78:	2001      	movs	r0, #1
 801ae7a:	e7e7      	b.n	801ae4c <_raise_r+0x12>
 801ae7c:	2400      	movs	r4, #0
 801ae7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ae82:	4628      	mov	r0, r5
 801ae84:	4798      	blx	r3
 801ae86:	2000      	movs	r0, #0
 801ae88:	e7e0      	b.n	801ae4c <_raise_r+0x12>
	...

0801ae8c <raise>:
 801ae8c:	4b02      	ldr	r3, [pc, #8]	; (801ae98 <raise+0xc>)
 801ae8e:	4601      	mov	r1, r0
 801ae90:	6818      	ldr	r0, [r3, #0]
 801ae92:	f7ff bfd2 	b.w	801ae3a <_raise_r>
 801ae96:	bf00      	nop
 801ae98:	2000002c 	.word	0x2000002c

0801ae9c <_kill_r>:
 801ae9c:	b538      	push	{r3, r4, r5, lr}
 801ae9e:	4d07      	ldr	r5, [pc, #28]	; (801aebc <_kill_r+0x20>)
 801aea0:	2300      	movs	r3, #0
 801aea2:	4604      	mov	r4, r0
 801aea4:	4608      	mov	r0, r1
 801aea6:	4611      	mov	r1, r2
 801aea8:	602b      	str	r3, [r5, #0]
 801aeaa:	f7e6 feff 	bl	8001cac <_kill>
 801aeae:	1c43      	adds	r3, r0, #1
 801aeb0:	d102      	bne.n	801aeb8 <_kill_r+0x1c>
 801aeb2:	682b      	ldr	r3, [r5, #0]
 801aeb4:	b103      	cbz	r3, 801aeb8 <_kill_r+0x1c>
 801aeb6:	6023      	str	r3, [r4, #0]
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}
 801aeba:	bf00      	nop
 801aebc:	20011d1c 	.word	0x20011d1c

0801aec0 <_getpid_r>:
 801aec0:	f7e6 beec 	b.w	8001c9c <_getpid>

0801aec4 <_fstat_r>:
 801aec4:	b538      	push	{r3, r4, r5, lr}
 801aec6:	4d07      	ldr	r5, [pc, #28]	; (801aee4 <_fstat_r+0x20>)
 801aec8:	2300      	movs	r3, #0
 801aeca:	4604      	mov	r4, r0
 801aecc:	4608      	mov	r0, r1
 801aece:	4611      	mov	r1, r2
 801aed0:	602b      	str	r3, [r5, #0]
 801aed2:	f7e6 ff4c 	bl	8001d6e <_fstat>
 801aed6:	1c43      	adds	r3, r0, #1
 801aed8:	d102      	bne.n	801aee0 <_fstat_r+0x1c>
 801aeda:	682b      	ldr	r3, [r5, #0]
 801aedc:	b103      	cbz	r3, 801aee0 <_fstat_r+0x1c>
 801aede:	6023      	str	r3, [r4, #0]
 801aee0:	bd38      	pop	{r3, r4, r5, pc}
 801aee2:	bf00      	nop
 801aee4:	20011d1c 	.word	0x20011d1c

0801aee8 <_isatty_r>:
 801aee8:	b538      	push	{r3, r4, r5, lr}
 801aeea:	4d06      	ldr	r5, [pc, #24]	; (801af04 <_isatty_r+0x1c>)
 801aeec:	2300      	movs	r3, #0
 801aeee:	4604      	mov	r4, r0
 801aef0:	4608      	mov	r0, r1
 801aef2:	602b      	str	r3, [r5, #0]
 801aef4:	f7e6 ff4b 	bl	8001d8e <_isatty>
 801aef8:	1c43      	adds	r3, r0, #1
 801aefa:	d102      	bne.n	801af02 <_isatty_r+0x1a>
 801aefc:	682b      	ldr	r3, [r5, #0]
 801aefe:	b103      	cbz	r3, 801af02 <_isatty_r+0x1a>
 801af00:	6023      	str	r3, [r4, #0]
 801af02:	bd38      	pop	{r3, r4, r5, pc}
 801af04:	20011d1c 	.word	0x20011d1c

0801af08 <_malloc_usable_size_r>:
 801af08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af0c:	1f18      	subs	r0, r3, #4
 801af0e:	2b00      	cmp	r3, #0
 801af10:	bfbc      	itt	lt
 801af12:	580b      	ldrlt	r3, [r1, r0]
 801af14:	18c0      	addlt	r0, r0, r3
 801af16:	4770      	bx	lr

0801af18 <_init>:
 801af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af1a:	bf00      	nop
 801af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af1e:	bc08      	pop	{r3}
 801af20:	469e      	mov	lr, r3
 801af22:	4770      	bx	lr

0801af24 <_fini>:
 801af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af26:	bf00      	nop
 801af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af2a:	bc08      	pop	{r3}
 801af2c:	469e      	mov	lr, r3
 801af2e:	4770      	bx	lr
