
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038d8  0801ae50  0801ae50  0002ae50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e728  0801e728  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801e728  0801e728  0002e728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e730  0801e730  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e730  0801e730  0002e730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e734  0801e734  0002e734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801e738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801e938  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801e9d8  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000119dc  20000340  0801ea78  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011d1c  0801ea78  00031d1c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   000347ec  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007bcf  00000000  00000000  00064b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002460  00000000  00000000  0006c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036dd5  00000000  00000000  0006eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003736d  00000000  00000000  000a5965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112edd  00000000  00000000  000dccd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001efbaf  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 000022a8  00000000  00000000  001efc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a8a4  00000000  00000000  001f1ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ae38 	.word	0x0801ae38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	0801ae38 	.word	0x0801ae38

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 fabe 	bl	8001614 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f001 f938 	bl	8002314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f844 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f940 	bl	800132c <MX_GPIO_Init>
  MX_TIM3_Init();
 80010ac:	f000 f8d8 	bl	8001260 <MX_TIM3_Init>
  MX_DAC_Init();
 80010b0:	f000 f8ac 	bl	800120c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b4:	f005 fccc 	bl	8006a50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <main+0x70>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4811      	ldr	r0, [pc, #68]	; (8001104 <main+0x74>)
 80010be:	f005 fd59 	bl	8006b74 <osThreadNew>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <main+0x78>)
 80010c6:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <main+0x7c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4810      	ldr	r0, [pc, #64]	; (8001110 <main+0x80>)
 80010ce:	f005 fd51 	bl	8006b74 <osThreadNew>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x84>)
 80010d6:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <main+0x88>)
 80010da:	2100      	movs	r1, #0
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <main+0x8c>)
 80010de:	f005 fd49 	bl	8006b74 <osThreadNew>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x90>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* creation of control_systems */
  control_systemsHandle = osThreadNew(start_control_systems, NULL, &control_systems_attributes);
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <main+0x94>)
 80010ea:	2100      	movs	r1, #0
 80010ec:	480e      	ldr	r0, [pc, #56]	; (8001128 <main+0x98>)
 80010ee:	f005 fd41 	bl	8006b74 <osThreadNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <main+0x9c>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f8:	f005 fcde 	bl	8006ab8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x6c>
 80010fe:	bf00      	nop
 8001100:	0801e074 	.word	0x0801e074
 8001104:	0800144d 	.word	0x0800144d
 8001108:	200003bc 	.word	0x200003bc
 800110c:	0801e098 	.word	0x0801e098
 8001110:	08001465 	.word	0x08001465
 8001114:	200003c0 	.word	0x200003c0
 8001118:	0801e0bc 	.word	0x0801e0bc
 800111c:	080014d9 	.word	0x080014d9
 8001120:	200003c4 	.word	0x200003c4
 8001124:	0801e0e0 	.word	0x0801e0e0
 8001128:	08001501 	.word	0x08001501
 800112c:	200003c8 	.word	0x200003c8

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f016 fdd9 	bl	8017cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <SystemClock_Config+0xd4>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xd4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <SystemClock_Config+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a25      	ldr	r2, [pc, #148]	; (8001208 <SystemClock_Config+0xd8>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <SystemClock_Config+0xd8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001198:	2319      	movs	r3, #25
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800119c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ff9e 	bl	80040f0 <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011ba:	f000 fa6b 	bl	8001694 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011be:	f002 ff47 	bl	8004050 <HAL_PWREx_EnableOverDrive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c8:	f000 fa64 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2107      	movs	r1, #7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fa24 	bl	8004638 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f6:	f000 fa4d 	bl	8001694 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_DAC_Init+0x4c>)
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <MX_DAC_Init+0x50>)
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_DAC_Init+0x4c>)
 8001222:	f001 fa2f 	bl	8002684 <HAL_DAC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800122c:	f000 fa32 	bl	8001694 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_DAC_Init+0x4c>)
 8001240:	f001 fa42 	bl	80026c8 <HAL_DAC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800124a:	f000 fa23 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000035c 	.word	0x2000035c
 800125c:	40007400 	.word	0x40007400

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_TIM3_Init+0xc4>)
 8001286:	4a28      	ldr	r2, [pc, #160]	; (8001328 <MX_TIM3_Init+0xc8>)
 8001288:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_TIM3_Init+0xc4>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_TIM3_Init+0xc4>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_TIM3_Init+0xc4>)
 8001298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_TIM3_Init+0xc4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_TIM3_Init+0xc4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012aa:	481e      	ldr	r0, [pc, #120]	; (8001324 <MX_TIM3_Init+0xc4>)
 80012ac:	f003 fca2 	bl	8004bf4 <HAL_TIM_PWM_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80012b6:	f000 f9ed 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4816      	ldr	r0, [pc, #88]	; (8001324 <MX_TIM3_Init+0xc4>)
 80012ca:	f004 fcc9 	bl	8005c60 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 f9de 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_TIM3_Init+0xc4>)
 80012f0:	f003 fef2 	bl	80050d8 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012fa:	f000 f9cb 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fe:	463b      	mov	r3, r7
 8001300:	2204      	movs	r2, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM3_Init+0xc4>)
 8001306:	f003 fee7 	bl	80050d8 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001310:	f000 f9c0 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM3_Init+0xc4>)
 8001316:	f000 fb5d 	bl	80019d4 <HAL_TIM_MspPostInit>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000370 	.word	0x20000370
 8001328:	40000400 	.word	0x40000400

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <MX_GPIO_Init+0x110>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <MX_GPIO_Init+0x110>)
 8001348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MX_GPIO_Init+0x110>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <MX_GPIO_Init+0x110>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a37      	ldr	r2, [pc, #220]	; (800143c <MX_GPIO_Init+0x110>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <MX_GPIO_Init+0x110>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <MX_GPIO_Init+0x110>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a31      	ldr	r2, [pc, #196]	; (800143c <MX_GPIO_Init+0x110>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b2f      	ldr	r3, [pc, #188]	; (800143c <MX_GPIO_Init+0x110>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <MX_GPIO_Init+0x110>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a2b      	ldr	r2, [pc, #172]	; (800143c <MX_GPIO_Init+0x110>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <MX_GPIO_Init+0x110>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_GPIO_Init+0x110>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a25      	ldr	r2, [pc, #148]	; (800143c <MX_GPIO_Init+0x110>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <MX_GPIO_Init+0x110>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	4820      	ldr	r0, [pc, #128]	; (8001440 <MX_GPIO_Init+0x114>)
 80013c0:	f002 fe2c 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	481e      	ldr	r0, [pc, #120]	; (8001444 <MX_GPIO_Init+0x118>)
 80013cc:	f002 fe26 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	481c      	ldr	r0, [pc, #112]	; (8001448 <MX_GPIO_Init+0x11c>)
 80013d8:	f002 fe20 	bl	800401c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013dc:	2320      	movs	r3, #32
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4813      	ldr	r0, [pc, #76]	; (8001440 <MX_GPIO_Init+0x114>)
 80013f4:	f002 fc66 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_GPIO_Init+0x118>)
 8001412:	f002 fc57 	bl	8003cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_GPIO_Init+0x11c>)
 8001430:	f002 fc48 	bl	8003cc4 <HAL_GPIO_Init>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800

0800144c <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001454:	f004 fcba 	bl	8005dcc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 8001458:	f000 fdaa 	bl	8001fb0 <tcpclient_init>
  for (;;) {
    osDelay(1);
 800145c:	2001      	movs	r0, #1
 800145e:	f005 fc2f 	bl	8006cc0 <osDelay>
 8001462:	e7fb      	b.n	800145c <start_conn_handler+0x10>

08001464 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af06      	add	r7, sp, #24
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */

	// 0 -> LEFT_MOTOR
	// 1 -> RIGHT_MOTOR
  DC_MOTOR_Init(DC_MOTOR_CfgParam[0]);
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <start_motor_control+0x68>)
 800146e:	466c      	mov	r4, sp
 8001470:	f103 0210 	add.w	r2, r3, #16
 8001474:	ca07      	ldmia	r2, {r0, r1, r2}
 8001476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800147a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147c:	f000 f910 	bl	80016a0 <DC_MOTOR_Init>
  DC_MOTOR_Init(DC_MOTOR_CfgParam[1]);
 8001480:	4d12      	ldr	r5, [pc, #72]	; (80014cc <start_motor_control+0x68>)
 8001482:	466c      	mov	r4, sp
 8001484:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 8001488:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800148c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001490:	f105 031c 	add.w	r3, r5, #28
 8001494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001496:	f000 f903 	bl	80016a0 <DC_MOTOR_Init>
  /* Infinite loop */
  for(;;)
  {
    set_idx(motor_speed);
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <start_motor_control+0x6c>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fc9c 	bl	8001ddc <set_idx>
    DC_MOTOR_Start(DC_MOTOR_CfgParam[0], motor_dir, motor_speed);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <start_motor_control+0x70>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <start_motor_control+0x6c>)
 80014aa:	8819      	ldrh	r1, [r3, #0]
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <start_motor_control+0x68>)
 80014ae:	9104      	str	r1, [sp, #16]
 80014b0:	9203      	str	r2, [sp, #12]
 80014b2:	466c      	mov	r4, sp
 80014b4:	f103 0210 	add.w	r2, r3, #16
 80014b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c0:	f000 f9d0 	bl	8001864 <DC_MOTOR_Start>
    osDelay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f005 fbfb 	bl	8006cc0 <osDelay>
  {
 80014ca:	e7e6      	b.n	800149a <start_motor_control+0x36>
 80014cc:	0801e03c 	.word	0x0801e03c
 80014d0:	200003ce 	.word	0x200003ce
 80014d4:	200003cc 	.word	0x200003cc

080014d8 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 80014e0:	f004 fc6a 	bl	8005db8 <get_static_netif>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f005 f811 	bl	8006510 <ethernetif_input>
  sys_check_timeouts();
 80014ee:	f013 fdc5 	bl	801507c <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f005 fbe4 	bl	8006cc0 <osDelay>
 80014f8:	e7fb      	b.n	80014f2 <start_tcp_thread+0x1a>
 80014fa:	0000      	movs	r0, r0
 80014fc:	0000      	movs	r0, r0
	...

08001500 <start_control_systems>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_systems */
void start_control_systems(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_systems */
  float *linear_x_ptr = get_linear_x();
 8001508:	f000 fc78 	bl	8001dfc <get_linear_x>
 800150c:	4603      	mov	r3, r0
 800150e:	617b      	str	r3, [r7, #20]
  float *angular_z_ptr = get_angular_z();
 8001510:	f000 fc7e 	bl	8001e10 <get_angular_z>
 8001514:	4603      	mov	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	float angular_z = *angular_z_ptr;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61fb      	str	r3, [r7, #28]
	if (angular_z > 0) {
 800151e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	dd03      	ble.n	8001534 <start_control_systems+0x34>
		motor_dir = DIR_CW;
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <start_control_systems+0x100>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	e008      	b.n	8001546 <start_control_systems+0x46>
	} else {
		motor_dir = DIR_ACW;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <start_control_systems+0x100>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		angular_z *= -1;
 800153a:	edd7 7a07 	vldr	s15, [r7, #28]
 800153e:	eef1 7a67 	vneg.f32	s15, s15
 8001542:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (angular_z >= 1){
 8001546:	edd7 7a07 	vldr	s15, [r7, #28]
 800154a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	db02      	blt.n	800155e <start_control_systems+0x5e>
		angular_z = 1;
 8001558:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800155c:	61fb      	str	r3, [r7, #28]
	}
	motor_speed = 65535*angular_z;
 800155e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001562:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001604 <start_control_systems+0x104>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156e:	ee17 3a90 	vmov	r3, s15
 8001572:	b29a      	uxth	r2, r3
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <start_control_systems+0x108>)
 8001576:	801a      	strh	r2, [r3, #0]
    int m = (*linear_x_ptr) * 100;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800160c <start_control_systems+0x10c>
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 3a90 	vmov	r3, s15
 800158e:	60fb      	str	r3, [r7, #12]

    float linear_x = *linear_x_ptr;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61bb      	str	r3, [r7, #24]
    if (linear_x < 0) {
 8001596:	edd7 7a06 	vldr	s15, [r7, #24]
 800159a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d505      	bpl.n	80015b0 <start_control_systems+0xb0>
        linear_x *= -1;
 80015a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a8:	eef1 7a67 	vneg.f32	s15, s15
 80015ac:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    if (linear_x > 1) {
 80015b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dd02      	ble.n	80015c8 <start_control_systems+0xc8>
    	linear_x = 1;
 80015c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015c6:	61bb      	str	r3, [r7, #24]
    }

    dac_voltage = linear_x*3.3;
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f7fe ffdd 	bl	8000588 <__aeabi_f2d>
 80015ce:	a30a      	add	r3, pc, #40	; (adr r3, 80015f8 <start_control_systems+0xf8>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7ff f830 	bl	8000638 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fae4 	bl	8000bac <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <start_control_systems+0x110>)
 80015e8:	6013      	str	r3, [r2, #0]
    osDelay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f005 fb68 	bl	8006cc0 <osDelay>
  {
 80015f0:	e792      	b.n	8001518 <start_control_systems+0x18>
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	66666666 	.word	0x66666666
 80015fc:	400a6666 	.word	0x400a6666
 8001600:	200003cc 	.word	0x200003cc
 8001604:	477fff00 	.word	0x477fff00
 8001608:	200003ce 	.word	0x200003ce
 800160c:	42c80000 	.word	0x42c80000
 8001610:	200003d0 	.word	0x200003d0

08001614 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001626:	f000 ffb1 	bl	800258c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800162a:	2301      	movs	r3, #1
 800162c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800162e:	2300      	movs	r3, #0
 8001630:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MPU_Config+0x58>)
 8001634:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001636:	230e      	movs	r3, #14
 8001638:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800163a:	2300      	movs	r3, #0
 800163c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800163e:	2301      	movs	r3, #1
 8001640:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001642:	2303      	movs	r3, #3
 8001644:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001656:	463b      	mov	r3, r7
 8001658:	4618      	mov	r0, r3
 800165a:	f000 ffcf 	bl	80025fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800165e:	2004      	movs	r0, #4
 8001660:	f000 ffac 	bl	80025bc <HAL_MPU_Enable>

}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20010000 	.word	0x20010000

08001670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001682:	f000 fe5d 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010000 	.word	0x40010000

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <DC_MOTOR_Init>:
#include "mdds30.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(DC_MOTOR_CfgType au8_MOTOR_Instance)
{
 80016a0:	b084      	sub	sp, #16
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b0aa      	sub	sp, #168	; 0xa8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	f107 0cb0 	add.w	ip, r7, #176	; 0xb0
 80016ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	619a      	str	r2, [r3, #24]
	TIM_HandleTypeDef htim;
	uint32_t PSC_Value = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t ARR_Value = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t i = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	/*------------Configure Direction GPIO Pin---------------*/
//	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].IN_GPIO == GPIOA){
	if(au8_MOTOR_Instance.IN_GPIO == GPIOA){
 8001700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001704:	4a54      	ldr	r2, [pc, #336]	; (8001858 <DC_MOTOR_Init+0x1b8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10b      	bne.n	8001722 <DC_MOTOR_Init+0x82>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <DC_MOTOR_Init+0x1bc>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a53      	ldr	r2, [pc, #332]	; (800185c <DC_MOTOR_Init+0x1bc>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b51      	ldr	r3, [pc, #324]	; (800185c <DC_MOTOR_Init+0x1bc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
	}
	GPIO_InitStruct.Pin = au8_MOTOR_Instance.IN_PIN;
 8001722:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_GPIO_Init(au8_MOTOR_Instance.IN_GPIO, &GPIO_InitStruct);
 8001736:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800173a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fabf 	bl	8003cc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN,0);
 8001746:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800174a:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 800174e:	2200      	movs	r2, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fc63 	bl	800401c <HAL_GPIO_WritePin>

	//Calculate PSC & ARR
	ARR_Value = 1;
 8001756:	2301      	movs	r3, #1
 8001758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 800175c:	2300      	movs	r3, #0
 800175e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001762:	e009      	b.n	8001778 <DC_MOTOR_Init+0xd8>
		ARR_Value *=2;
 8001764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 800176e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001772:	3301      	adds	r3, #1
 8001774:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001778:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800177c:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001780:	429a      	cmp	r2, r3
 8001782:	d3ef      	bcc.n	8001764 <DC_MOTOR_Init+0xc4>
	}
	PSC_Value =(uint32_t)((au8_MOTOR_Instance.TIM_CLK_MHz*1000000) / (ARR_Value*au8_MOTOR_Instance.PWM_FREQ_Hz));
 8001784:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001788:	461a      	mov	r2, r3
 800178a:	4b35      	ldr	r3, [pc, #212]	; (8001860 <DC_MOTOR_Init+0x1c0>)
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	4619      	mov	r1, r3
 8001792:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001796:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	PSC_Value--;
 80017a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value -= 2;
 80017b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017b4:	3b02      	subs	r3, #2
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//Configure the DC Motor PWM Timer Channel

	htim.Instance = au8_MOTOR_Instance.TIM_Instance;
 80017ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017be:	607b      	str	r3, [r7, #4]
	htim.Init.Prescaler = PSC_Value;
 80017c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c4:	60bb      	str	r3, [r7, #8]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
	htim.Init.Period = ARR_Value;
 80017ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ce:	613b      	str	r3, [r7, #16]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	61fb      	str	r3, [r7, #28]
	HAL_TIM_Base_Init(&htim);
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f930 	bl	8004a40 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80017e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fd86 	bl	8005300 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f9fc 	bl	8004bf4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8001804:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fa27 	bl	8005c60 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001812:	2360      	movs	r3, #96	; 0x60
 8001814:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181a:	2300      	movs	r3, #0
 800181c:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, au8_MOTOR_Instance.PWM_TIM_CH);
 8001822:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001826:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f003 fc53 	bl	80050d8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4618      	mov	r0, r3
 8001836:	f000 f8cd 	bl	80019d4 <HAL_TIM_MspPostInit>

	//Start PWM
	HAL_TIM_PWM_Start(&htim, au8_MOTOR_Instance.PWM_TIM_CH);
 800183a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fa2e 	bl	8004ca4 <HAL_TIM_PWM_Start>
}
 8001848:	bf00      	nop
 800184a:	37a8      	adds	r7, #168	; 0xa8
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001852:	b004      	add	sp, #16
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40020000 	.word	0x40020000
 800185c:	40023800 	.word	0x40023800
 8001860:	000f4240 	.word	0x000f4240

08001864 <DC_MOTOR_Start>:
void DC_MOTOR_Start(DC_MOTOR_CfgType au8_MOTOR_Instance,uint8_t au8_DIR,uint16_t au16_SPEED){
 8001864:	b084      	sub	sp, #16
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
 800186a:	f107 0c08 	add.w	ip, r7, #8
 800186e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Write to Direction PIN

	if(au8_DIR == DIR_CW){
 8001872:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001876:	2b01      	cmp	r3, #1
 8001878:	d106      	bne.n	8001888 <DC_MOTOR_Start+0x24>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 1);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	89b9      	ldrh	r1, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fbcb 	bl	800401c <HAL_GPIO_WritePin>
 8001886:	e009      	b.n	800189c <DC_MOTOR_Start+0x38>

	}
	else if(au8_DIR == DIR_ACW){
 8001888:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <DC_MOTOR_Start+0x38>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 0);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	89b9      	ldrh	r1, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fbc0 	bl	800401c <HAL_GPIO_WritePin>
	}

	//Write Speed -> Duty Cycle Register
	if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_1){
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <DC_MOTOR_Start+0x46>
		au8_MOTOR_Instance.TIM_Instance->CCR1 = au16_SPEED;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
	}
}
 80018a8:	e005      	b.n	80018b6 <DC_MOTOR_Start+0x52>
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d102      	bne.n	80018b6 <DC_MOTOR_Start+0x52>
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018be:	b004      	add	sp, #16
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_MspInit+0x4c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_MspInit+0x4c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	210f      	movs	r1, #15
 80018fe:	f06f 0001 	mvn.w	r0, #1
 8001902:	f000 fe19 	bl	8002538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_DAC_MspInit+0x74>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d123      	bne.n	800197e <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_DAC_MspInit+0x78>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a14      	ldr	r2, [pc, #80]	; (800198c <HAL_DAC_MspInit+0x78>)
 800193c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_DAC_MspInit+0x78>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_DAC_MspInit+0x78>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_DAC_MspInit+0x78>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_DAC_MspInit+0x78>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001966:	2310      	movs	r3, #16
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_DAC_MspInit+0x7c>)
 800197a:	f002 f9a3 	bl	8003cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40007400 	.word	0x40007400
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000

08001994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_TIM_PWM_MspInit+0x38>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10b      	bne.n	80019be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_TIM_MspPostInit+0x9c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d137      	bne.n	8001a66 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_TIM_MspPostInit+0xa0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a36:	2302      	movs	r3, #2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <HAL_TIM_MspPostInit+0xa4>)
 8001a42:	f002 f93f 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a56:	2302      	movs	r3, #2
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <HAL_TIM_MspPostInit+0xa8>)
 8001a62:	f002 f92f 	bl	8003cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020800 	.word	0x40020800

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_InitTick+0xd0>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <HAL_InitTick+0xd0>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_InitTick+0xd0>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa8:	f107 020c 	add.w	r2, r7, #12
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 ff92 	bl	80049dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ab8:	f002 ff7c 	bl	80049b4 <HAL_RCC_GetPCLK2Freq>
 8001abc:	4603      	mov	r3, r0
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_InitTick+0xd4>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	3b01      	subs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ad2:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <HAL_InitTick+0xdc>)
 8001ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001adc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_InitTick+0xd8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_InitTick+0xd8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_InitTick+0xd8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001af6:	4818      	ldr	r0, [pc, #96]	; (8001b58 <HAL_InitTick+0xd8>)
 8001af8:	f002 ffa2 	bl	8004a40 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11b      	bne.n	8001b42 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <HAL_InitTick+0xd8>)
 8001b0c:	f002 fffa 	bl	8004b04 <HAL_TIM_Base_Start_IT>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d111      	bne.n	8001b42 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b1e:	2019      	movs	r0, #25
 8001b20:	f000 fd26 	bl	8002570 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d808      	bhi.n	8001b3c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	2019      	movs	r0, #25
 8001b30:	f000 fd02 	bl	8002538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_InitTick+0xe0>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e002      	b.n	8001b42 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3730      	adds	r7, #48	; 0x30
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	200003d4 	.word	0x200003d4
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	20000004 	.word	0x20000004

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b96:	f003 f97f 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003d4 	.word	0x200003d4

08001ba4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <ETH_IRQHandler+0x10>)
 8001baa:	f001 f9b7 	bl	8002f1c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20005004 	.word	0x20005004

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_kill>:

int _kill(int pid, int sig)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <_kill+0x20>)
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	20011d18 	.word	0x20011d18

08001bec <_exit>:

void _exit (int status)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ffe5 	bl	8001bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bfe:	e7fe      	b.n	8001bfe <_exit+0x12>

08001c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	4601      	mov	r1, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf0      	blt.n	8001c12 <_read+0x12>
	}

return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e009      	b.n	8001c60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf1      	blt.n	8001c4c <_write+0x12>
	}
	return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_close>:

int _close(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_isatty>:

int _isatty(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <_sbrk+0x5c>)
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <_sbrk+0x60>)
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_sbrk+0x64>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <_sbrk+0x68>)
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d205      	bcs.n	8001d18 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <_sbrk+0x6c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	20050000 	.word	0x20050000
 8001d3c:	00000400 	.word	0x00000400
 8001d40:	20000420 	.word	0x20000420
 8001d44:	20011d20 	.word	0x20011d20
 8001d48:	20011d18 	.word	0x20011d18

08001d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <SystemInit+0x24>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <SystemInit+0x24>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x28>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	40023800 	.word	0x40023800

08001d78 <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 8001d84:	4913      	ldr	r1, [pc, #76]	; (8001dd4 <fun+0x5c>)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f016 ffdc 	bl	8018d44 <strtok>
 8001d8c:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 8001d8e:	e018      	b.n	8001dc2 <fun+0x4a>
    {
        x = atof(token);
 8001d90:	6978      	ldr	r0, [r7, #20]
 8001d92:	f015 fe57 	bl	8017a44 <atof>
 8001d96:	ec53 2b10 	vmov	r2, r3, d0
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe ff05 	bl	8000bac <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <fun+0x60>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	3301      	adds	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <fun+0x5c>)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f016 ffc2 	bl	8018d44 <strtok>
 8001dc0:	6178      	str	r0, [r7, #20]
    while (token)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e3      	bne.n	8001d90 <fun+0x18>
    }
    return res;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <fun+0x60>)
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0801ae8c 	.word	0x0801ae8c
 8001dd8:	200005d4 	.word	0x200005d4

08001ddc <set_idx>:

// Function to send the data to the server
void tcpsend (char *data);

void set_idx(int ix) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	indx = ix;
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <set_idx+0x1c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	200005c4 	.word	0x200005c4

08001dfc <get_linear_x>:

float *get_linear_x() {
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
    return &linear_x;
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <get_linear_x+0x10>)
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	200005c8 	.word	0x200005c8

08001e10 <get_angular_z>:

float *get_angular_z() {
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	return &angular_z;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <get_angular_z+0x10>)
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	200005cc 	.word	0x200005cc

08001e24 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2010      	movs	r0, #16
 8001e32:	f008 fe61 	bl	800aaf8 <netconn_new_with_proto_and_callback>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <tcpinit_thread+0xfc>)
 8001e3a:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <tcpinit_thread+0xfc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d068      	beq.n	8001f16 <tcpinit_thread+0xf2>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <tcpinit_thread+0xfc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	220a      	movs	r2, #10
 8001e4a:	4936      	ldr	r1, [pc, #216]	; (8001f24 <tcpinit_thread+0x100>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f008 ff0d 	bl	800ac6c <netconn_bind>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d156      	bne.n	8001f0c <tcpinit_thread+0xe8>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <tcpinit_thread+0x104>)
 8001e60:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <tcpinit_thread+0x108>)
 8001e62:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <tcpinit_thread+0x10c>)
 8001e66:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e6a:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <tcpinit_thread+0xfc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <tcpinit_thread+0x10c>)
 8001e72:	8812      	ldrh	r2, [r2, #0]
 8001e74:	492c      	ldr	r1, [pc, #176]	; (8001f28 <tcpinit_thread+0x104>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f008 ff30 	bl	800acdc <netconn_connect>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8001e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d136      	bne.n	8001ef6 <tcpinit_thread+0xd2>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8001e88:	482a      	ldr	r0, [pc, #168]	; (8001f34 <tcpinit_thread+0x110>)
 8001e8a:	f015 fd27 	bl	80178dc <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <tcpinit_thread+0xfc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4929      	ldr	r1, [pc, #164]	; (8001f38 <tcpinit_thread+0x114>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f009 f8bd 	bl	800b014 <netconn_recv>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f6      	bne.n	8001e8e <tcpinit_thread+0x6a>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <tcpinit_thread+0x114>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <tcpinit_thread+0x114>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	895b      	ldrh	r3, [r3, #10]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4822      	ldr	r0, [pc, #136]	; (8001f3c <tcpinit_thread+0x118>)
 8001eb4:	f016 f903 	bl	80180be <strncpy>

							float *linx = fun(msgc);
 8001eb8:	4820      	ldr	r0, [pc, #128]	; (8001f3c <tcpinit_thread+0x118>)
 8001eba:	f7ff ff5d 	bl	8001d78 <fun>
 8001ebe:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <tcpinit_thread+0x11c>)
 8001ec6:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <tcpinit_thread+0x120>)
 8001ece:	6013      	str	r3, [r2, #0]
//							sys_arch_sem_wait(&tcpsem, 5);
//
//							// send the data to the TCP Server
//							tcpsend (smsgc);

							memset (msgc, '\0', 100);  // clear the buffer
 8001ed0:	2264      	movs	r2, #100	; 0x64
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4819      	ldr	r0, [pc, #100]	; (8001f3c <tcpinit_thread+0x118>)
 8001ed6:	f015 ff0e 	bl	8017cf6 <memset>
						}
						while (netbuf_next(buf) > 0);
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <tcpinit_thread+0x114>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00a fd46 	bl	800c970 <netbuf_next>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dcda      	bgt.n	8001ea0 <tcpinit_thread+0x7c>

						netbuf_delete(buf);
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <tcpinit_thread+0x114>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00a fd1e 	bl	800c930 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001ef4:	e7cb      	b.n	8001e8e <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <tcpinit_thread+0xfc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f009 f9f8 	bl	800b2f0 <netconn_close>
				netconn_delete(conn);
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <tcpinit_thread+0xfc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f008 fe95 	bl	800ac34 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001f0a:	e004      	b.n	8001f16 <tcpinit_thread+0xf2>
			netconn_delete(conn);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <tcpinit_thread+0xfc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f008 fe8f 	bl	800ac34 <netconn_delete>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000424 	.word	0x20000424
 8001f24:	0801e22c 	.word	0x0801e22c
 8001f28:	2000042c 	.word	0x2000042c
 8001f2c:	01002a0a 	.word	0x01002a0a
 8001f30:	20000430 	.word	0x20000430
 8001f34:	200005d0 	.word	0x200005d0
 8001f38:	20000428 	.word	0x20000428
 8001f3c:	20000434 	.word	0x20000434
 8001f40:	200005c8 	.word	0x200005c8
 8001f44:	200005cc 	.word	0x200005cc

08001f48 <tcpsend>:

void tcpsend (char *data)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <tcpsend+0x30>)
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe f95b 	bl	8000210 <strlen>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2301      	movs	r3, #1
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4620      	mov	r0, r4
 8001f66:	f009 f8c1 	bl	800b0ec <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8001f6a:	4804      	ldr	r0, [pc, #16]	; (8001f7c <tcpsend+0x34>)
 8001f6c:	f015 fcb6 	bl	80178dc <sys_sem_signal>
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	20000424 	.word	0x20000424
 8001f7c:	200005d0 	.word	0x200005d0

08001f80 <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <tcpsend_thread+0x24>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <tcpsend_thread+0x28>)
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <tcpsend_thread+0x2c>)
 8001f92:	f016 f81d 	bl	8017fd0 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
//		sys_arch_sem_wait(&tcpsem, 5);
		// send the data to the server
		tcpsend(smsgc);
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <tcpsend_thread+0x2c>)
 8001f98:	f7ff ffd6 	bl	8001f48 <tcpsend>
		osDelay(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f004 fe8f 	bl	8006cc0 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 8001fa2:	e7f1      	b.n	8001f88 <tcpsend_thread+0x8>
 8001fa4:	200005c4 	.word	0x200005c4
 8001fa8:	0801ae90 	.word	0x0801ae90
 8001fac:	200004fc 	.word	0x200004fc

08001fb0 <tcpclient_init>:




void tcpclient_init (void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <tcpclient_init+0x3c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f015 fc37 	bl	8017830 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001fc2:	2318      	movs	r3, #24
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <tcpclient_init+0x40>)
 8001fce:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <tcpclient_init+0x44>)
 8001fd0:	f015 fcfa 	bl	80179c8 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001fd4:	2318      	movs	r3, #24
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4906      	ldr	r1, [pc, #24]	; (8001ff8 <tcpclient_init+0x48>)
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <tcpclient_init+0x4c>)
 8001fe2:	f015 fcf1 	bl	80179c8 <sys_thread_new>
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200005d0 	.word	0x200005d0
 8001ff0:	08001e25 	.word	0x08001e25
 8001ff4:	0801aea4 	.word	0x0801aea4
 8001ff8:	08001f81 	.word	0x08001f81
 8001ffc:	0801aeb4 	.word	0x0801aeb4

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202a:	f7ff fe8f 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f015 fe03 	bl	8017c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7ff f82d 	bl	8001090 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002038:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002044:	0801e738 	.word	0x0801e738
  ldr r2, =_sbss
 8002048:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 800204c:	20011d1c 	.word	0x20011d1c

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>

08002052 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <LAN8742_RegisterBusIO+0x28>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <LAN8742_RegisterBusIO+0x28>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <LAN8742_RegisterBusIO+0x28>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207e:	e014      	b.n	80020aa <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b086      	sub	sp, #24
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d17c      	bne.n	80021d0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e01c      	b.n	800212a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f107 0208 	add.w	r2, r7, #8
 80020f8:	2112      	movs	r1, #18
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	4798      	blx	r3
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	da03      	bge.n	800210c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002104:	f06f 0304 	mvn.w	r3, #4
 8002108:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800210a:	e00b      	b.n	8002124 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	d105      	bne.n	8002124 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
         break;
 8002122:	e005      	b.n	8002130 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3301      	adds	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b1f      	cmp	r3, #31
 800212e:	d9df      	bls.n	80020f0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b1f      	cmp	r3, #31
 8002136:	d902      	bls.n	800213e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002138:	f06f 0302 	mvn.w	r3, #2
 800213c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d145      	bne.n	80021d0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6810      	ldr	r0, [r2, #0]
 800214c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002150:	2100      	movs	r1, #0
 8002152:	4798      	blx	r3
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	db37      	blt.n	80021ca <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6810      	ldr	r0, [r2, #0]
 8002162:	f107 0208 	add.w	r2, r7, #8
 8002166:	2100      	movs	r1, #0
 8002168:	4798      	blx	r3
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	db28      	blt.n	80021c2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4798      	blx	r3
 8002176:	4603      	mov	r3, r0
 8002178:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800217a:	e01c      	b.n	80021b6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4798      	blx	r3
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800218e:	d80e      	bhi.n	80021ae <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6810      	ldr	r0, [r2, #0]
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	2100      	movs	r1, #0
 800219e:	4798      	blx	r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da07      	bge.n	80021b6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80021a6:	f06f 0304 	mvn.w	r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
                 break;
 80021ac:	e010      	b.n	80021d0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80021ae:	f06f 0301 	mvn.w	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
               break;
 80021b4:	e00c      	b.n	80021d0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1dd      	bne.n	800217c <LAN8742_Init+0xc6>
 80021c0:	e006      	b.n	80021d0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80021c2:	f06f 0304 	mvn.w	r3, #4
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e002      	b.n	80021d0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80021ca:	f06f 0303 	mvn.w	r3, #3
 80021ce:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d112      	bne.n	80021fc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4798      	blx	r3
 80021dc:	4603      	mov	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80021e0:	bf00      	nop
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4798      	blx	r3
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80021f4:	d9f5      	bls.n	80021e2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80021fc:	693b      	ldr	r3, [r7, #16]
 }
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6810      	ldr	r0, [r2, #0]
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	2101      	movs	r1, #1
 8002220:	4798      	blx	r3
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	da02      	bge.n	800222e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002228:	f06f 0304 	mvn.w	r3, #4
 800222c:	e06e      	b.n	800230c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6810      	ldr	r0, [r2, #0]
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	2101      	movs	r1, #1
 800223c:	4798      	blx	r3
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	da02      	bge.n	800224a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002244:	f06f 0304 	mvn.w	r3, #4
 8002248:	e060      	b.n	800230c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002254:	2301      	movs	r3, #1
 8002256:	e059      	b.n	800230c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6810      	ldr	r0, [r2, #0]
 8002260:	f107 020c 	add.w	r2, r7, #12
 8002264:	2100      	movs	r1, #0
 8002266:	4798      	blx	r3
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	da02      	bge.n	8002274 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800226e:	f06f 0304 	mvn.w	r3, #4
 8002272:	e04b      	b.n	800230c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11b      	bne.n	80022b6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <LAN8742_GetLinkState+0x90>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002292:	2302      	movs	r3, #2
 8002294:	e03a      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e033      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022ae:	2304      	movs	r3, #4
 80022b0:	e02c      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022b2:	2305      	movs	r3, #5
 80022b4:	e02a      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6810      	ldr	r0, [r2, #0]
 80022be:	f107 020c 	add.w	r2, r7, #12
 80022c2:	211f      	movs	r1, #31
 80022c4:	4798      	blx	r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da02      	bge.n	80022d2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022cc:	f06f 0304 	mvn.w	r3, #4
 80022d0:	e01c      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022dc:	2306      	movs	r3, #6
 80022de:	e015      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 031c 	and.w	r3, r3, #28
 80022e6:	2b18      	cmp	r3, #24
 80022e8:	d101      	bne.n	80022ee <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022ea:	2302      	movs	r3, #2
 80022ec:	e00e      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 031c 	and.w	r3, r3, #28
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d101      	bne.n	80022fc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e007      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 031c 	and.w	r3, r3, #28
 8002302:	2b14      	cmp	r3, #20
 8002304:	d101      	bne.n	800230a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002306:	2304      	movs	r3, #4
 8002308:	e000      	b.n	800230c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800230a:	2305      	movs	r3, #5
    }				
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x28>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x28>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f8fc 	bl	8002522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff fba8 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fac8 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000008 	.word	0x20000008
 8002364:	200005fc 	.word	0x200005fc

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200005fc 	.word	0x200005fc

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000008 	.word	0x20000008

080023c8 <__NVIC_SetPriorityGrouping>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <__NVIC_SetPriorityGrouping+0x40>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x40>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00
 800240c:	05fa0000 	.word	0x05fa0000

08002410 <__NVIC_GetPriorityGrouping>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff4c 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254a:	f7ff ff61 	bl	8002410 <__NVIC_GetPriorityGrouping>
 800254e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7ff ffb1 	bl	80024bc <NVIC_EncodePriority>
 800255a:	4602      	mov	r2, r0
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff80 	bl	8002468 <__NVIC_SetPriority>
}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff54 	bl	800242c <__NVIC_EnableIRQ>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002590:	f3bf 8f5f 	dmb	sy
}
 8002594:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_MPU_Disable+0x28>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_MPU_Disable+0x28>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_MPU_Disable+0x2c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000ed00 	.word	0xe000ed00
 80025b8:	e000ed90 	.word	0xe000ed90

080025bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_MPU_Enable+0x38>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_MPU_Enable+0x3c>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_MPU_Enable+0x3c>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025da:	f3bf 8f4f 	dsb	sy
}
 80025de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025e0:	f3bf 8f6f 	isb	sy
}
 80025e4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed90 	.word	0xe000ed90
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	785a      	ldrb	r2, [r3, #1]
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_MPU_ConfigRegion+0x84>)
 800260a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d029      	beq.n	8002668 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002614:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <HAL_MPU_ConfigRegion+0x84>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7b1b      	ldrb	r3, [r3, #12]
 8002620:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7adb      	ldrb	r3, [r3, #11]
 8002626:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002628:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7a9b      	ldrb	r3, [r3, #10]
 800262e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002630:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7b5b      	ldrb	r3, [r3, #13]
 8002636:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002638:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7b9b      	ldrb	r3, [r3, #14]
 800263e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002640:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7bdb      	ldrb	r3, [r3, #15]
 8002646:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002648:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7a5b      	ldrb	r3, [r3, #9]
 800264e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002650:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	7a1b      	ldrb	r3, [r3, #8]
 8002656:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002658:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002662:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002664:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002666:	e005      	b.n	8002674 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_MPU_ConfigRegion+0x84>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_MPU_ConfigRegion+0x84>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed90 	.word	0xe000ed90

08002684 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e014      	b.n	80026c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff f934 	bl	8001914 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	795b      	ldrb	r3, [r3, #5]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_DAC_ConfigChannel+0x18>
 80026dc:	2302      	movs	r3, #2
 80026de:	e03c      	b.n	800275a <HAL_DAC_ConfigChannel+0x92>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2202      	movs	r2, #2
 80026ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4013      	ands	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6819      	ldr	r1, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	22c0      	movs	r2, #192	; 0xc0
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06a      	b.n	8002850 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	2b00      	cmp	r3, #0
 8002782:	d106      	bne.n	8002792 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2223      	movs	r2, #35	; 0x23
 8002788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f003 ff3f 	bl	8006610 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_ETH_Init+0xf0>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a30      	ldr	r2, [pc, #192]	; (8002858 <HAL_ETH_Init+0xf0>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_ETH_Init+0xf0>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_ETH_Init+0xf4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a2b      	ldr	r2, [pc, #172]	; (800285c <HAL_ETH_Init+0xf4>)
 80027b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_ETH_Init+0xf4>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4927      	ldr	r1, [pc, #156]	; (800285c <HAL_ETH_Init+0xf4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_ETH_Init+0xf4>)
 80027c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e0:	f7ff fdc2 	bl	8002368 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027e6:	e011      	b.n	800280c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80027e8:	f7ff fdbe 	bl	8002368 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027f6:	d909      	bls.n	800280c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	22e0      	movs	r2, #224	; 0xe0
 8002804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e021      	b.n	8002850 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e4      	bne.n	80027e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 ffac 	bl	800377c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f001 f853 	bl	80038d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f001 f8a9 	bl	8003982 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	461a      	mov	r2, r3
 8002836:	2100      	movs	r1, #0
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 f811 	bl	8003860 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2210      	movs	r2, #16
 800284a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40013800 	.word	0x40013800

08002860 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286e:	2b10      	cmp	r3, #16
 8002870:	d150      	bne.n	8002914 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2223      	movs	r2, #35	; 0x23
 8002876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2204      	movs	r2, #4
 800287e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fa7b 	bl	8002d7c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0208 	orr.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800289e:	2001      	movs	r0, #1
 80028a0:	f7ff fd6e 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0204 	orr.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff fd5b 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fdf3 	bl	80034be <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ee:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002906:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2223      	movs	r2, #35	; 0x23
 800290c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292e:	2b10      	cmp	r3, #16
 8002930:	d17b      	bne.n	8002a2a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2223      	movs	r2, #35	; 0x23
 8002936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_ETH_Start_IT+0x114>)
 800295e:	430b      	orrs	r3, r1
 8002960:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002974:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9fc 	bl	8002d7c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff fcef 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0204 	orr.w	r2, r2, #4
 80029b8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7ff fcdc 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fd74 	bl	80034be <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029ec:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a04:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0e:	69d9      	ldr	r1, [r3, #28]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_ETH_Start_IT+0x118>)
 8002a16:	430b      	orrs	r3, r1
 8002a18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a1c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2223      	movs	r2, #35	; 0x23
 8002a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00020060 	.word	0x00020060
 8002a38:	0001a0c1 	.word	0x0001a0c1

08002a3c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a4a:	2b23      	cmp	r3, #35	; 0x23
 8002a4c:	d16e      	bne.n	8002b2c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2223      	movs	r2, #35	; 0x23
 8002a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a5e:	69d9      	ldr	r1, [r3, #28]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_ETH_Stop_IT+0xfc>)
 8002a66:	400b      	ands	r3, r1
 8002a68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a6c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a84:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	f023 0302 	bic.w	r3, r3, #2
 8002a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a9c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0204 	bic.w	r2, r2, #4
 8002aac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff fc62 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fcfa 	bl	80034be <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0208 	bic.w	r2, r2, #8
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f7ff fc4c 	bl	8002380 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e00e      	b.n	8002b14 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	3212      	adds	r2, #18
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d9ed      	bls.n	8002af6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2210      	movs	r2, #16
 8002b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	fffe5f3e 	.word	0xfffe5f3e

08002b3c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e045      	b.n	8002bec <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b66:	2b23      	cmp	r3, #35	; 0x23
 8002b68:	d13f      	bne.n	8002bea <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002b72:	2201      	movs	r2, #1
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 ff70 	bl	8003a5c <ETH_Prepare_Tx_Descriptors>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f043 0202 	orr.w	r2, r3, #2
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e02a      	b.n	8002bec <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b96:	f3bf 8f4f 	dsb	sy
}
 8002b9a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d904      	bls.n	8002bb8 <HAL_ETH_Transmit_IT+0x7c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	1f1a      	subs	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00d      	beq.n	8002be6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be0:	461a      	mov	r2, r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
  }
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0a8      	b.n	8002d72 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c26:	2b23      	cmp	r3, #35	; 0x23
 8002c28:	d001      	beq.n	8002c2e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a1      	b.n	8002d72 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	3212      	adds	r2, #18
 8002c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c44:	f1c3 0304 	rsb	r3, r3, #4
 8002c48:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c4a:	e06a      	b.n	8002d22 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	699a      	ldr	r2, [r3, #24]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_ETH_ReadData+0x88>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d040      	beq.n	8002cfe <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002cb0:	3b04      	subs	r3, #4
 8002cb2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cd8:	461a      	mov	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f003 fe63 	bl	80069a8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d902      	bls.n	8002d10 <HAL_ETH_ReadData+0x11c>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b04      	subs	r3, #4
 8002d0e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	3212      	adds	r2, #18
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db06      	blt.n	8002d38 <HAL_ETH_ReadData+0x144>
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d202      	bcs.n	8002d38 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d089      	beq.n	8002c4c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f815 	bl	8002d7c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d90:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	3212      	adds	r2, #18
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002da4:	e040      	b.n	8002e28 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d112      	bne.n	8002dd4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fdc8 	bl	8006948 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	74fb      	strb	r3, [r7, #19]
 8002dc2:	e007      	b.n	8002dd4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d026      	beq.n	8002e28 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <ETH_UpdateDescriptor+0xe4>)
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	e003      	b.n	8002df2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002df0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8002df2:	f3bf 8f5f 	dmb	sy
}
 8002df6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	3301      	adds	r3, #1
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d902      	bls.n	8002e16 <ETH_UpdateDescriptor+0x9a>
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	3b04      	subs	r3, #4
 8002e14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	3212      	adds	r2, #18
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	617b      	str	r3, [r7, #20]
      desccount--;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <ETH_UpdateDescriptor+0xb8>
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1b8      	bne.n	8002da6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d00c      	beq.n	8002e58 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e46:	461a      	mov	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3720      	adds	r7, #32
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	800045f8 	.word	0x800045f8

08002e64 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3318      	adds	r3, #24
 8002e70:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002e82:	e03f      	b.n	8002f04 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3304      	adds	r3, #4
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002eac:	7bbb      	ldrb	r3, [r7, #14]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68d9      	ldr	r1, [r3, #12]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	440b      	add	r3, r1
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db1b      	blt.n	8002f00 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fda9 	bl	8006a2c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002efe:	e001      	b.n	8002f04 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_ETH_ReleaseTxPacket+0xac>
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1b9      	bne.n	8002e84 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b40      	cmp	r3, #64	; 0x40
 8002f34:	d112      	bne.n	8002f5c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d109      	bne.n	8002f5c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_ETH_IRQHandler+0x178>)
 8002f54:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f003 f8bc 	bl	80060d4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d113      	bne.n	8002f96 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10a      	bne.n	8002f96 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002f8e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f003 f8af 	bl	80060f4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa8:	d14c      	bne.n	8003044 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbc:	d142      	bne.n	8003044 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f043 0208 	orr.w	r2, r3, #8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe0:	d11a      	bne.n	8003018 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_ETH_IRQHandler+0x17c>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800300c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	22e0      	movs	r2, #224	; 0xe0
 8003012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003016:	e012      	b.n	800303e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	f248 6380 	movw	r3, #34432	; 0x8680
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003036:	461a      	mov	r2, r3
 8003038:	f248 6380 	movw	r3, #34432	; 0x8680
 800303c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f003 f868 	bl	8006114 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d10e      	bne.n	8003070 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f81c 	bl	80030a0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_ETH_IRQHandler+0x180>)
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d006      	beq.n	800308a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_ETH_IRQHandler+0x180>)
 800307e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003082:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f815 	bl	80030b4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	00010040 	.word	0x00010040
 8003098:	007e2000 	.word	0x007e2000
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 031c 	and.w	r3, r3, #28
 80030e4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	02db      	lsls	r3, r3, #11
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003118:	f7ff f926 	bl	8002368 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800311e:	e00d      	b.n	800313c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003120:	f7ff f922 	bl	8002368 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d301      	bcc.n	8003134 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e010      	b.n	8003156 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ec      	bne.n	8003120 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	b29b      	uxth	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 031c 	and.w	r3, r3, #28
 800317a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	02db      	lsls	r3, r3, #11
 8003180:	b29b      	uxth	r3, r3
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b8:	f7ff f8d6 	bl	8002368 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031be:	e00d      	b.n	80031dc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80031c0:	f7ff f8d2 	bl	8002368 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d301      	bcc.n	80031d4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e009      	b.n	80031e8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ec      	bne.n	80031c0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0d9      	b.n	80033b8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	0c1b      	lsrs	r3, r3, #16
 8003378:	b29a      	uxth	r2, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e00b      	b.n	80033f0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d105      	bne.n	80033ee <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f88f 	bl	8003508 <ETH_SetMACConfig>

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 031c 	bic.w	r3, r3, #28
 800340e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003410:	f001 fac4 	bl	800499c <HAL_RCC_GetHCLKFreq>
 8003414:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_ETH_SetMDIOClockRange+0x98>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d908      	bls.n	8003430 <HAL_ETH_SetMDIOClockRange+0x38>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d804      	bhi.n	8003430 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	e027      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a18      	ldr	r2, [pc, #96]	; (8003494 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d908      	bls.n	800344a <HAL_ETH_SetMDIOClockRange+0x52>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d204      	bcs.n	800344a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 030c 	orr.w	r3, r3, #12
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e01a      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a12      	ldr	r2, [pc, #72]	; (8003498 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d303      	bcc.n	800345a <HAL_ETH_SetMDIOClockRange+0x62>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d911      	bls.n	800347e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4a0f      	ldr	r2, [pc, #60]	; (800349c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d908      	bls.n	8003474 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d804      	bhi.n	8003474 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e005      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f043 0310 	orr.w	r3, r3, #16
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e000      	b.n	8003480 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800347e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	611a      	str	r2, [r3, #16]
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	01312cff 	.word	0x01312cff
 8003494:	02160ebf 	.word	0x02160ebf
 8003498:	03938700 	.word	0x03938700
 800349c:	05f5e0ff 	.word	0x05f5e0ff
 80034a0:	08f0d17f 	.word	0x08f0d17f

080034a4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f7fe ff46 	bl	8002380 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034fe:	6193      	str	r3, [r2, #24]
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <ETH_SetMACConfig+0x15c>)
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	7c1b      	ldrb	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d102      	bne.n	8003530 <ETH_SetMACConfig+0x28>
 800352a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800352e:	e000      	b.n	8003532 <ETH_SetMACConfig+0x2a>
 8003530:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	7c5b      	ldrb	r3, [r3, #17]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <ETH_SetMACConfig+0x38>
 800353a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800353e:	e000      	b.n	8003542 <ETH_SetMACConfig+0x3a>
 8003540:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003542:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003548:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	7fdb      	ldrb	r3, [r3, #31]
 800354e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003550:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003556:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	7f92      	ldrb	r2, [r2, #30]
 800355c:	2a00      	cmp	r2, #0
 800355e:	d102      	bne.n	8003566 <ETH_SetMACConfig+0x5e>
 8003560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003564:	e000      	b.n	8003568 <ETH_SetMACConfig+0x60>
 8003566:	2200      	movs	r2, #0
                        macconf->Speed |
 8003568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
 800356e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003570:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003576:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	791b      	ldrb	r3, [r3, #4]
 800357c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800357e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003586:	2a00      	cmp	r2, #0
 8003588:	d102      	bne.n	8003590 <ETH_SetMACConfig+0x88>
 800358a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800358e:	e000      	b.n	8003592 <ETH_SetMACConfig+0x8a>
 8003590:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	7bdb      	ldrb	r3, [r3, #15]
 8003598:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800359a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035aa:	4313      	orrs	r3, r2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7fe fedc 	bl	8002380 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035de:	4013      	ands	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d101      	bne.n	80035f6 <ETH_SetMACConfig+0xee>
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	e000      	b.n	80035f8 <ETH_SetMACConfig+0xf0>
 80035f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003606:	2a01      	cmp	r2, #1
 8003608:	d101      	bne.n	800360e <ETH_SetMACConfig+0x106>
 800360a:	2208      	movs	r2, #8
 800360c:	e000      	b.n	8003610 <ETH_SetMACConfig+0x108>
 800360e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003610:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003618:	2a01      	cmp	r2, #1
 800361a:	d101      	bne.n	8003620 <ETH_SetMACConfig+0x118>
 800361c:	2204      	movs	r2, #4
 800361e:	e000      	b.n	8003622 <ETH_SetMACConfig+0x11a>
 8003620:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003622:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800362a:	2a01      	cmp	r2, #1
 800362c:	d101      	bne.n	8003632 <ETH_SetMACConfig+0x12a>
 800362e:	2202      	movs	r2, #2
 8003630:	e000      	b.n	8003634 <ETH_SetMACConfig+0x12c>
 8003632:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003634:	4313      	orrs	r3, r2
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800364c:	2001      	movs	r0, #1
 800364e:	f7fe fe97 	bl	8002380 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	619a      	str	r2, [r3, #24]
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	ff20810f 	.word	0xff20810f

08003668 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <ETH_SetDMAConfig+0x110>)
 8003682:	4013      	ands	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	7b1b      	ldrb	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <ETH_SetDMAConfig+0x2c>
 800368e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003692:	e000      	b.n	8003696 <ETH_SetDMAConfig+0x2e>
 8003694:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	7b5b      	ldrb	r3, [r3, #13]
 800369a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800369c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	7f52      	ldrb	r2, [r2, #29]
 80036a2:	2a00      	cmp	r2, #0
 80036a4:	d102      	bne.n	80036ac <ETH_SetDMAConfig+0x44>
 80036a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036aa:	e000      	b.n	80036ae <ETH_SetDMAConfig+0x46>
 80036ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7b9b      	ldrb	r3, [r3, #14]
 80036b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	7f1b      	ldrb	r3, [r3, #28]
 80036c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80036c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	7f9b      	ldrb	r3, [r3, #30]
 80036ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036dc:	4313      	orrs	r3, r2
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	461a      	mov	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036fe:	2001      	movs	r0, #1
 8003700:	f7fe fe3e 	bl	8002380 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370c:	461a      	mov	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800371c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003722:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003728:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003730:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003732:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800373a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003740:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800374a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800374e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800375c:	2001      	movs	r0, #1
 800375e:	f7fe fe0f 	bl	8002380 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	f8de3f23 	.word	0xf8de3f23

0800377c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0a6      	sub	sp, #152	; 0x98
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003790:	2300      	movs	r3, #0
 8003792:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037b8:	2300      	movs	r3, #0
 80037ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fe86 	bl	8003508 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003800:	2301      	movs	r3, #1
 8003802:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800380a:	2301      	movs	r3, #1
 800380c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800381e:	2300      	movs	r3, #0
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003828:	2301      	movs	r3, #1
 800382a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800382c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003830:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003836:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800383c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003844:	2300      	movs	r3, #0
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003848:	2300      	movs	r3, #0
 800384a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff08 	bl	8003668 <ETH_SetDMAConfig>
}
 8003858:	bf00      	nop
 800385a:	3798      	adds	r7, #152	; 0x98
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3305      	adds	r3, #5
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	3204      	adds	r2, #4
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <ETH_MACAddressConfig+0x68>)
 8003882:	4413      	add	r3, r2
 8003884:	461a      	mov	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3303      	adds	r3, #3
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	061a      	lsls	r2, r3, #24
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3302      	adds	r3, #2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	4313      	orrs	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <ETH_MACAddressConfig+0x6c>)
 80038b2:	4413      	add	r3, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40028040 	.word	0x40028040
 80038cc:	40028044 	.word	0x40028044

080038d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e03e      	b.n	800395c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68d9      	ldr	r1, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	3206      	adds	r2, #6
 8003910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d80c      	bhi.n	8003940 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e004      	b.n	800394a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d9bd      	bls.n	80038de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003974:	611a      	str	r2, [r3, #16]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e046      	b.n	8003a1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6919      	ldr	r1, [r3, #16]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80039d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	3212      	adds	r2, #18
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d80c      	bhi.n	8003a0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6919      	ldr	r1, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	440b      	add	r3, r1
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e004      	b.n	8003a18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d9b5      	bls.n	8003990 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4e:	60da      	str	r2, [r3, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b08d      	sub	sp, #52	; 0x34
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a86:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a9e:	d007      	beq.n	8003ab0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0ff      	b.n	8003cb4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4b7d      	ldr	r3, [pc, #500]	; (8003cc0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b36:	f3bf 8f5f 	dmb	sy
}
 8003b3a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b48:	e082      	b.n	8003c50 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e005      	b.n	8003b76 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b78:	3301      	adds	r3, #1
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d902      	bls.n	8003b88 <ETH_Prepare_Tx_Descriptors+0x12c>
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	3b04      	subs	r3, #4
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b90:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003baa:	d007      	beq.n	8003bbc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d029      	beq.n	8003c10 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	e019      	b.n	8003c04 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003bd0:	f3bf 8f5f 	dmb	sy
}
 8003bd4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	3301      	adds	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d902      	bls.n	8003bf4 <ETH_Prepare_Tx_Descriptors+0x198>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	3b04      	subs	r3, #4
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	3301      	adds	r3, #1
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d3e1      	bcc.n	8003bd0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e051      	b.n	8003cb4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	6852      	ldr	r2, [r2, #4]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c3e:	f3bf 8f5f 	dmb	sy
}
 8003c42:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f47f af78 	bne.w	8003b4a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d006      	beq.n	8003c6e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e005      	b.n	8003c7a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	3304      	adds	r3, #4
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c9a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c9c:	b672      	cpsid	i
}
 8003c9e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003cae:	b662      	cpsie	i
}
 8003cb0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3734      	adds	r7, #52	; 0x34
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	ffffe000 	.word	0xffffe000

08003cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e175      	b.n	8003fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	f040 8164 	bne.w	8003fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d005      	beq.n	8003d1a <HAL_GPIO_Init+0x56>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d130      	bne.n	8003d7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	2203      	movs	r2, #3
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d50:	2201      	movs	r2, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 0201 	and.w	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d017      	beq.n	8003db8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d123      	bne.n	8003e0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	08da      	lsrs	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3208      	adds	r2, #8
 8003dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	220f      	movs	r2, #15
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	08da      	lsrs	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3208      	adds	r2, #8
 8003e06:	69b9      	ldr	r1, [r7, #24]
 8003e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2203      	movs	r2, #3
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80be 	beq.w	8003fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	4a65      	ldr	r2, [pc, #404]	; (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e58:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5a:	4b63      	ldr	r3, [pc, #396]	; (8003fe8 <HAL_GPIO_Init+0x324>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e66:	4a61      	ldr	r2, [pc, #388]	; (8003fec <HAL_GPIO_Init+0x328>)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_GPIO_Init+0x32c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d037      	beq.n	8003f02 <HAL_GPIO_Init+0x23e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a57      	ldr	r2, [pc, #348]	; (8003ff4 <HAL_GPIO_Init+0x330>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_GPIO_Init+0x23a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a56      	ldr	r2, [pc, #344]	; (8003ff8 <HAL_GPIO_Init+0x334>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d02b      	beq.n	8003efa <HAL_GPIO_Init+0x236>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a55      	ldr	r2, [pc, #340]	; (8003ffc <HAL_GPIO_Init+0x338>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d025      	beq.n	8003ef6 <HAL_GPIO_Init+0x232>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_GPIO_Init+0x33c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <HAL_GPIO_Init+0x22e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a53      	ldr	r2, [pc, #332]	; (8004004 <HAL_GPIO_Init+0x340>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x22a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a52      	ldr	r2, [pc, #328]	; (8004008 <HAL_GPIO_Init+0x344>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x226>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a51      	ldr	r2, [pc, #324]	; (800400c <HAL_GPIO_Init+0x348>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x222>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a50      	ldr	r2, [pc, #320]	; (8004010 <HAL_GPIO_Init+0x34c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x21e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a4f      	ldr	r2, [pc, #316]	; (8004014 <HAL_GPIO_Init+0x350>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x21a>
 8003eda:	2309      	movs	r3, #9
 8003edc:	e012      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ede:	230a      	movs	r3, #10
 8003ee0:	e010      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	e00e      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ee6:	2307      	movs	r3, #7
 8003ee8:	e00c      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003eea:	2306      	movs	r3, #6
 8003eec:	e00a      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003eee:	2305      	movs	r3, #5
 8003ef0:	e008      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	e006      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e004      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e002      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <HAL_GPIO_Init+0x240>
 8003f02:	2300      	movs	r3, #0
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	f002 0203 	and.w	r2, r2, #3
 8003f0a:	0092      	lsls	r2, r2, #2
 8003f0c:	4093      	lsls	r3, r2
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f14:	4935      	ldr	r1, [pc, #212]	; (8003fec <HAL_GPIO_Init+0x328>)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f22:	4b3d      	ldr	r3, [pc, #244]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f46:	4a34      	ldr	r2, [pc, #208]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f4c:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f70:	4a29      	ldr	r2, [pc, #164]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f76:	4b28      	ldr	r3, [pc, #160]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4013      	ands	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_GPIO_Init+0x354>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	f67f ae86 	bls.w	8003ce4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40020400 	.word	0x40020400
 8003ff8:	40020800 	.word	0x40020800
 8003ffc:	40020c00 	.word	0x40020c00
 8004000:	40021000 	.word	0x40021000
 8004004:	40021400 	.word	0x40021400
 8004008:	40021800 	.word	0x40021800
 800400c:	40021c00 	.word	0x40021c00
 8004010:	40022000 	.word	0x40022000
 8004014:	40022400 	.word	0x40022400
 8004018:	40013c00 	.word	0x40013c00

0800401c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
 8004028:	4613      	mov	r3, r2
 800402a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800402c:	787b      	ldrb	r3, [r7, #1]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004032:	887a      	ldrh	r2, [r7, #2]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	041a      	lsls	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	619a      	str	r2, [r3, #24]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800407e:	f7fe f973 	bl	8002368 <HAL_GetTick>
 8004082:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004084:	e009      	b.n	800409a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004086:	f7fe f96f 	bl	8002368 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004094:	d901      	bls.n	800409a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e022      	b.n	80040e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d1ee      	bne.n	8004086 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040a8:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040b4:	f7fe f958 	bl	8002368 <HAL_GetTick>
 80040b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040ba:	e009      	b.n	80040d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040bc:	f7fe f954 	bl	8002368 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ca:	d901      	bls.n	80040d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e007      	b.n	80040e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d1ee      	bne.n	80040bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000

080040f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040f8:	2300      	movs	r3, #0
 80040fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e291      	b.n	800462a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8087 	beq.w	8004222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004114:	4b96      	ldr	r3, [pc, #600]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b04      	cmp	r3, #4
 800411e:	d00c      	beq.n	800413a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004120:	4b93      	ldr	r3, [pc, #588]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d112      	bne.n	8004152 <HAL_RCC_OscConfig+0x62>
 800412c:	4b90      	ldr	r3, [pc, #576]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004138:	d10b      	bne.n	8004152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413a:	4b8d      	ldr	r3, [pc, #564]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d06c      	beq.n	8004220 <HAL_RCC_OscConfig+0x130>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d168      	bne.n	8004220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e26b      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d106      	bne.n	800416a <HAL_RCC_OscConfig+0x7a>
 800415c:	4b84      	ldr	r3, [pc, #528]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a83      	ldr	r2, [pc, #524]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e02e      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x9c>
 8004172:	4b7f      	ldr	r3, [pc, #508]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a7e      	ldr	r2, [pc, #504]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a7b      	ldr	r2, [pc, #492]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0xc0>
 8004196:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a75      	ldr	r2, [pc, #468]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b73      	ldr	r3, [pc, #460]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a72      	ldr	r2, [pc, #456]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xd8>
 80041b0:	4b6f      	ldr	r3, [pc, #444]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a6e      	ldr	r2, [pc, #440]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6b      	ldr	r2, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe f8ca 	bl	8002368 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fe f8c6 	bl	8002368 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e21f      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b61      	ldr	r3, [pc, #388]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xe8>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fe f8b6 	bl	8002368 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe f8b2 	bl	8002368 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e20b      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b57      	ldr	r3, [pc, #348]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x110>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d069      	beq.n	8004302 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422e:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b4d      	ldr	r3, [pc, #308]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x190>
 8004246:	4b4a      	ldr	r3, [pc, #296]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x17a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1df      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b41      	ldr	r3, [pc, #260]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	493d      	ldr	r1, [pc, #244]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e040      	b.n	8004302 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d023      	beq.n	80042d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a38      	ldr	r2, [pc, #224]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe f868 	bl	8002368 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe f864 	bl	8002368 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1bd      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b30      	ldr	r3, [pc, #192]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b2d      	ldr	r3, [pc, #180]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4929      	ldr	r1, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	e018      	b.n	8004302 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe f844 	bl	8002368 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e4:	f7fe f840 	bl	8002368 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e199      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d038      	beq.n	8004380 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d019      	beq.n	800434a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fe f821 	bl	8002368 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432a:	f7fe f81d 	bl	8002368 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e176      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800433e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x23a>
 8004348:	e01a      	b.n	8004380 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <HAL_RCC_OscConfig+0x280>)
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004356:	f7fe f807 	bl	8002368 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800435c:	e00a      	b.n	8004374 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435e:	f7fe f803 	bl	8002368 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d903      	bls.n	8004374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e15c      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
 8004370:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	4b91      	ldr	r3, [pc, #580]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1ee      	bne.n	800435e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 80a4 	beq.w	80044d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438e:	4b8b      	ldr	r3, [pc, #556]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a87      	ldr	r2, [pc, #540]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b2:	2301      	movs	r3, #1
 80043b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b6:	4b82      	ldr	r3, [pc, #520]	; (80045c0 <HAL_RCC_OscConfig+0x4d0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d118      	bne.n	80043f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043c2:	4b7f      	ldr	r3, [pc, #508]	; (80045c0 <HAL_RCC_OscConfig+0x4d0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7e      	ldr	r2, [pc, #504]	; (80045c0 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ce:	f7fd ffcb 	bl	8002368 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d6:	f7fd ffc7 	bl	8002368 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b64      	cmp	r3, #100	; 0x64
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e120      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCC_OscConfig+0x4d0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x31a>
 80043fc:	4b6f      	ldr	r3, [pc, #444]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	4a6e      	ldr	r2, [pc, #440]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6713      	str	r3, [r2, #112]	; 0x70
 8004408:	e02d      	b.n	8004466 <HAL_RCC_OscConfig+0x376>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x33c>
 8004412:	4b6a      	ldr	r3, [pc, #424]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	4a69      	ldr	r2, [pc, #420]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	6713      	str	r3, [r2, #112]	; 0x70
 800441e:	4b67      	ldr	r3, [pc, #412]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a66      	ldr	r2, [pc, #408]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004424:	f023 0304 	bic.w	r3, r3, #4
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e01c      	b.n	8004466 <HAL_RCC_OscConfig+0x376>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x35e>
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a60      	ldr	r2, [pc, #384]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	4b5e      	ldr	r3, [pc, #376]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a5d      	ldr	r2, [pc, #372]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e00b      	b.n	8004466 <HAL_RCC_OscConfig+0x376>
 800444e:	4b5b      	ldr	r3, [pc, #364]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	4a5a      	ldr	r2, [pc, #360]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	6713      	str	r3, [r2, #112]	; 0x70
 800445a:	4b58      	ldr	r3, [pc, #352]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a57      	ldr	r2, [pc, #348]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fd ff7b 	bl	8002368 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd ff77 	bl	8002368 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0ce      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCC_OscConfig+0x386>
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd ff65 	bl	8002368 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd ff61 	bl	8002368 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0b8      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b8:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80a4 	beq.w	8004628 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d06b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d149      	bne.n	8004588 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b31      	ldr	r3, [pc, #196]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a30      	ldr	r2, [pc, #192]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80044fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd ff32 	bl	8002368 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7fd ff2e 	bl	8002368 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e087      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69da      	ldr	r2, [r3, #28]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	061b      	lsls	r3, r3, #24
 800454a:	4313      	orrs	r3, r2
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800454e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004552:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a18      	ldr	r2, [pc, #96]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800455a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd ff02 	bl	8002368 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd fefe 	bl	8002368 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e057      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0x478>
 8004586:	e04f      	b.n	8004628 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd fee8 	bl	8002368 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd fee4 	bl	8002368 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e03d      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x4ac>
 80045ba:	e035      	b.n	8004628 <HAL_RCC_OscConfig+0x538>
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x544>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d028      	beq.n	8004624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d121      	bne.n	8004624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d11a      	bne.n	8004624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d111      	bne.n	8004624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	3b01      	subs	r3, #1
 800460e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0d0      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004650:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d910      	bls.n	8004680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b67      	ldr	r3, [pc, #412]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	4965      	ldr	r1, [pc, #404]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b63      	ldr	r3, [pc, #396]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0b8      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d020      	beq.n	80046ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004698:	4b59      	ldr	r3, [pc, #356]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a58      	ldr	r2, [pc, #352]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b0:	4b53      	ldr	r3, [pc, #332]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a52      	ldr	r2, [pc, #328]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046bc:	4b50      	ldr	r3, [pc, #320]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	494d      	ldr	r1, [pc, #308]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d040      	beq.n	800475c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e2:	4b47      	ldr	r3, [pc, #284]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d115      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07f      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d107      	bne.n	800470a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e073      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06b      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4936      	ldr	r1, [pc, #216]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fd fe1c 	bl	8002368 <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fd fe18 	bl	8002368 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e053      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b2d      	ldr	r3, [pc, #180]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800475c:	4b27      	ldr	r3, [pc, #156]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d210      	bcs.n	800478c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 020f 	bic.w	r2, r3, #15
 8004772:	4922      	ldr	r1, [pc, #136]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	4313      	orrs	r3, r2
 8004778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e032      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004798:	4b19      	ldr	r3, [pc, #100]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4916      	ldr	r1, [pc, #88]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	490e      	ldr	r1, [pc, #56]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ca:	f000 f821 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	490a      	ldr	r1, [pc, #40]	; (8004804 <HAL_RCC_ClockConfig+0x1cc>)
 80047dc:	5ccb      	ldrb	r3, [r1, r3]
 80047de:	fa22 f303 	lsr.w	r3, r2, r3
 80047e2:	4a09      	ldr	r2, [pc, #36]	; (8004808 <HAL_RCC_ClockConfig+0x1d0>)
 80047e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fd f948 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40023c00 	.word	0x40023c00
 8004800:	40023800 	.word	0x40023800
 8004804:	0801e104 	.word	0x0801e104
 8004808:	20000000 	.word	0x20000000
 800480c:	20000004 	.word	0x20000004

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b090      	sub	sp, #64	; 0x40
 8004816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
 800481c:	2300      	movs	r3, #0
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	2300      	movs	r3, #0
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004828:	4b59      	ldr	r3, [pc, #356]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b08      	cmp	r3, #8
 8004832:	d00d      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x40>
 8004834:	2b08      	cmp	r3, #8
 8004836:	f200 80a1 	bhi.w	800497c <HAL_RCC_GetSysClockFreq+0x16c>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x34>
 800483e:	2b04      	cmp	r3, #4
 8004840:	d003      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0x3a>
 8004842:	e09b      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_GetSysClockFreq+0x184>)
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004848:	e09b      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <HAL_RCC_GetSysClockFreq+0x188>)
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800484e:	e098      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004850:	4b4f      	ldr	r3, [pc, #316]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800485a:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d028      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004866:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	2200      	movs	r2, #0
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	627a      	str	r2, [r7, #36]	; 0x24
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004878:	2100      	movs	r1, #0
 800487a:	4b47      	ldr	r3, [pc, #284]	; (8004998 <HAL_RCC_GetSysClockFreq+0x188>)
 800487c:	fb03 f201 	mul.w	r2, r3, r1
 8004880:	2300      	movs	r3, #0
 8004882:	fb00 f303 	mul.w	r3, r0, r3
 8004886:	4413      	add	r3, r2
 8004888:	4a43      	ldr	r2, [pc, #268]	; (8004998 <HAL_RCC_GetSysClockFreq+0x188>)
 800488a:	fba0 1202 	umull	r1, r2, r0, r2
 800488e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004890:	460a      	mov	r2, r1
 8004892:	62ba      	str	r2, [r7, #40]	; 0x28
 8004894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004896:	4413      	add	r3, r2
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	2200      	movs	r2, #0
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	61fa      	str	r2, [r7, #28]
 80048a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048aa:	f7fc f9cf 	bl	8000c4c <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4613      	mov	r3, r2
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b6:	e053      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	2200      	movs	r2, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	617a      	str	r2, [r7, #20]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048ca:	f04f 0b00 	mov.w	fp, #0
 80048ce:	4652      	mov	r2, sl
 80048d0:	465b      	mov	r3, fp
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	0159      	lsls	r1, r3, #5
 80048dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e0:	0150      	lsls	r0, r2, #5
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	ebb2 080a 	subs.w	r8, r2, sl
 80048ea:	eb63 090b 	sbc.w	r9, r3, fp
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004902:	ebb2 0408 	subs.w	r4, r2, r8
 8004906:	eb63 0509 	sbc.w	r5, r3, r9
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	00eb      	lsls	r3, r5, #3
 8004914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004918:	00e2      	lsls	r2, r4, #3
 800491a:	4614      	mov	r4, r2
 800491c:	461d      	mov	r5, r3
 800491e:	eb14 030a 	adds.w	r3, r4, sl
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	eb45 030b 	adc.w	r3, r5, fp
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004936:	4629      	mov	r1, r5
 8004938:	028b      	lsls	r3, r1, #10
 800493a:	4621      	mov	r1, r4
 800493c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004940:	4621      	mov	r1, r4
 8004942:	028a      	lsls	r2, r1, #10
 8004944:	4610      	mov	r0, r2
 8004946:	4619      	mov	r1, r3
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494a:	2200      	movs	r2, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	60fa      	str	r2, [r7, #12]
 8004950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004954:	f7fc f97a 	bl	8000c4c <__aeabi_uldivmod>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4613      	mov	r3, r2
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_GetSysClockFreq+0x180>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	3301      	adds	r3, #1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800497a:	e002      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetSysClockFreq+0x184>)
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004984:	4618      	mov	r0, r3
 8004986:	3740      	adds	r7, #64	; 0x40
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	00f42400 	.word	0x00f42400
 8004998:	017d7840 	.word	0x017d7840

0800499c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000

080049b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049b8:	f7ff fff0 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0b5b      	lsrs	r3, r3, #13
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	4903      	ldr	r1, [pc, #12]	; (80049d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0801e114 	.word	0x0801e114

080049dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	220f      	movs	r2, #15
 80049ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ec:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0203 	and.w	r2, r3, #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_GetClockConfig+0x5c>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <HAL_RCC_GetClockConfig+0x60>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e049      	b.n	8004ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f841 	bl	8004aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f000 fd30 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e054      	b.n	8004bc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d01d      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a22      	ldr	r2, [pc, #136]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	; (8004be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_TIM_Base_Start_IT+0xe8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d115      	bne.n	8004bb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xec>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d015      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0xbe>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d011      	beq.n	8004bc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0201 	orr.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	e008      	b.n	8004bc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e000      	b.n	8004bc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40000400 	.word	0x40000400
 8004bdc:	40000800 	.word	0x40000800
 8004be0:	40000c00 	.word	0x40000c00
 8004be4:	40010400 	.word	0x40010400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40001800 	.word	0x40001800
 8004bf0:	00010007 	.word	0x00010007

08004bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc feba 	bl	8001994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fc56 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x24>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e03c      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d109      	bne.n	8004ce2 <HAL_TIM_PWM_Start+0x3e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	bf14      	ite	ne
 8004cda:	2301      	movne	r3, #1
 8004cdc:	2300      	moveq	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e02f      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start+0x58>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e022      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b0c      	cmp	r3, #12
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x72>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e015      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start+0x8c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_PWM_Start+0x9e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e092      	b.n	8004e70 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_PWM_Start+0xb6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d58:	e023      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_PWM_Start+0xc6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d68:	e01b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Start+0xd6>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0xe6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xf6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_PWM_Start+0xfe>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2201      	movs	r2, #1
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff32 	bl	8005c14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a30      	ldr	r2, [pc, #192]	; (8004e78 <HAL_TIM_PWM_Start+0x1d4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d004      	beq.n	8004dc4 <HAL_TIM_PWM_Start+0x120>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2f      	ldr	r2, [pc, #188]	; (8004e7c <HAL_TIM_PWM_Start+0x1d8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_PWM_Start+0x124>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <HAL_TIM_PWM_Start+0x126>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <HAL_TIM_PWM_Start+0x1d4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_TIM_PWM_Start+0x1dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_TIM_PWM_Start+0x1e0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_TIM_PWM_Start+0x1e4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_TIM_PWM_Start+0x1d8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <HAL_TIM_PWM_Start+0x1e8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x18a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a19      	ldr	r2, [pc, #100]	; (8004e90 <HAL_TIM_PWM_Start+0x1ec>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d115      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_TIM_PWM_Start+0x1f0>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d015      	beq.n	8004e6c <HAL_TIM_PWM_Start+0x1c8>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d011      	beq.n	8004e6c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e008      	b.n	8004e6c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e000      	b.n	8004e6e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40010400 	.word	0x40010400
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800
 8004e94:	00010007 	.word	0x00010007

08004e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d122      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11b      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0202 	mvn.w	r2, #2
 8004ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fae4 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fad6 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fae7 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d122      	bne.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d11b      	bne.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0204 	mvn.w	r2, #4
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 faba 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 faac 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fabd 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d122      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d11b      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0208 	mvn.w	r2, #8
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa90 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa82 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fa93 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0210 	mvn.w	r2, #16
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa66 	bl	80054a8 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa58 	bl	8005494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa69 	bl	80054bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0201 	mvn.w	r2, #1
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc fb2a 	bl	8001670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fea4 	bl	8005d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d10e      	bne.n	8005076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d107      	bne.n	8005076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fe97 	bl	8005da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fa17 	bl	80054d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d10e      	bne.n	80050ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0220 	mvn.w	r2, #32
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fe57 	bl	8005d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e0ff      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b14      	cmp	r3, #20
 8005102:	f200 80f0 	bhi.w	80052e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005161 	.word	0x08005161
 8005110:	080052e7 	.word	0x080052e7
 8005114:	080052e7 	.word	0x080052e7
 8005118:	080052e7 	.word	0x080052e7
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080052e7 	.word	0x080052e7
 8005124:	080052e7 	.word	0x080052e7
 8005128:	080052e7 	.word	0x080052e7
 800512c:	080051e3 	.word	0x080051e3
 8005130:	080052e7 	.word	0x080052e7
 8005134:	080052e7 	.word	0x080052e7
 8005138:	080052e7 	.word	0x080052e7
 800513c:	08005223 	.word	0x08005223
 8005140:	080052e7 	.word	0x080052e7
 8005144:	080052e7 	.word	0x080052e7
 8005148:	080052e7 	.word	0x080052e7
 800514c:	08005265 	.word	0x08005265
 8005150:	080052e7 	.word	0x080052e7
 8005154:	080052e7 	.word	0x080052e7
 8005158:	080052e7 	.word	0x080052e7
 800515c:	080052a5 	.word	0x080052a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fa5c 	bl	8005624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
      break;
 800519e:	e0a5      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 faae 	bl	8005708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
      break;
 80051e0:	e084      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fb05 	bl	80057f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0208 	orr.w	r2, r2, #8
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0204 	bic.w	r2, r2, #4
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	61da      	str	r2, [r3, #28]
      break;
 8005220:	e064      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fb5b 	bl	80058e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	61da      	str	r2, [r3, #28]
      break;
 8005262:	e043      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fb92 	bl	8005994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0208 	orr.w	r2, r2, #8
 800527e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052a2:	e023      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fbc4 	bl	8005a38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052e4:	e002      	b.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
      break;
 80052ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIM_ConfigClockSource+0x1c>
 8005318:	2302      	movs	r3, #2
 800531a:	e0b4      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x186>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4b56      	ldr	r3, [pc, #344]	; (8005490 <HAL_TIM_ConfigClockSource+0x190>)
 8005338:	4013      	ands	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005354:	d03e      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	f200 8087 	bhi.w	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	f000 8086 	beq.w	8005472 <HAL_TIM_ConfigClockSource+0x172>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d87f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b70      	cmp	r3, #112	; 0x70
 800536e:	d01a      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005370:	2b70      	cmp	r3, #112	; 0x70
 8005372:	d87b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b60      	cmp	r3, #96	; 0x60
 8005376:	d050      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x11a>
 8005378:	2b60      	cmp	r3, #96	; 0x60
 800537a:	d877      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b50      	cmp	r3, #80	; 0x50
 800537e:	d03c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xfa>
 8005380:	2b50      	cmp	r3, #80	; 0x50
 8005382:	d873      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d058      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x13a>
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d86f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	d064      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	2b30      	cmp	r3, #48	; 0x30
 8005392:	d86b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d060      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d867      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d05c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d05a      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	e062      	b.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f000 fc0d 	bl	8005bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
      break;
 80053d2:	e04f      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 fbf6 	bl	8005bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e03c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	461a      	mov	r2, r3
 8005408:	f000 fb6a 	bl	8005ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2150      	movs	r1, #80	; 0x50
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fbc3 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005418:	e02c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	461a      	mov	r2, r3
 8005428:	f000 fb89 	bl	8005b3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2160      	movs	r1, #96	; 0x60
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fbb3 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005438:	e01c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	461a      	mov	r2, r3
 8005448:	f000 fb4a 	bl	8005ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2140      	movs	r1, #64	; 0x40
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fba3 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 8005458:	e00c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fb9a 	bl	8005b9e <TIM_ITRx_SetConfig>
      break;
 800546a:	e003      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	fffeff88 	.word	0xfffeff88

08005494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3d      	ldr	r2, [pc, #244]	; (80055fc <TIM_Base_SetConfig+0x118>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <TIM_Base_SetConfig+0x120>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d027      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <TIM_Base_SetConfig+0x118>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d023      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <TIM_Base_SetConfig+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <TIM_Base_SetConfig+0x128>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <TIM_Base_SetConfig+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <TIM_Base_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <TIM_Base_SetConfig+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a24      	ldr	r2, [pc, #144]	; (800561c <TIM_Base_SetConfig+0x138>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <TIM_Base_SetConfig+0x13c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <TIM_OC1_SetConfig+0xd8>)
 8005650:	4013      	ands	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0302 	bic.w	r3, r3, #2
 800566c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a21      	ldr	r2, [pc, #132]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC1_SetConfig+0x64>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <TIM_OC1_SetConfig+0xe0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10c      	bne.n	80056a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0308 	bic.w	r3, r3, #8
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a16      	ldr	r2, [pc, #88]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC1_SetConfig+0x8e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <TIM_OC1_SetConfig+0xe0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	fffeff8f 	.word	0xfffeff8f
 8005700:	40010000 	.word	0x40010000
 8005704:	40010400 	.word	0x40010400

08005708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0210 	bic.w	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4b2e      	ldr	r3, [pc, #184]	; (80057ec <TIM_OC2_SetConfig+0xe4>)
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0320 	bic.w	r3, r3, #32
 8005752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <TIM_OC2_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC2_SetConfig+0x68>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <TIM_OC2_SetConfig+0xec>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d10d      	bne.n	800578c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <TIM_OC2_SetConfig+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC2_SetConfig+0x94>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <TIM_OC2_SetConfig+0xec>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d113      	bne.n	80057c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	feff8fff 	.word	0xfeff8fff
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400

080057f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <TIM_OC3_SetConfig+0xe0>)
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <TIM_OC3_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC3_SetConfig+0x66>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <TIM_OC3_SetConfig+0xe8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d10d      	bne.n	800587a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a17      	ldr	r2, [pc, #92]	; (80058dc <TIM_OC3_SetConfig+0xe4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x92>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <TIM_OC3_SetConfig+0xe8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d113      	bne.n	80058b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	fffeff8f 	.word	0xfffeff8f
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40010400 	.word	0x40010400

080058e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <TIM_OC4_SetConfig+0xa4>)
 8005910:	4013      	ands	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800592e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a13      	ldr	r2, [pc, #76]	; (800598c <TIM_OC4_SetConfig+0xa8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC4_SetConfig+0x68>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <TIM_OC4_SetConfig+0xac>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	feff8fff 	.word	0xfeff8fff
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <TIM_OC5_SetConfig+0x98>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <TIM_OC5_SetConfig+0x9c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC5_SetConfig+0x5e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <TIM_OC5_SetConfig+0xa0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d109      	bne.n	8005a06 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	fffeff8f 	.word	0xfffeff8f
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40010400 	.word	0x40010400

08005a38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <TIM_OC6_SetConfig+0x9c>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	051b      	lsls	r3, r3, #20
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <TIM_OC6_SetConfig+0xa0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d003      	beq.n	8005a98 <TIM_OC6_SetConfig+0x60>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a12      	ldr	r2, [pc, #72]	; (8005adc <TIM_OC6_SetConfig+0xa4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d109      	bne.n	8005aac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	feff8fff 	.word	0xfeff8fff
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40010400 	.word	0x40010400

08005ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f023 0201 	bic.w	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f023 030a 	bic.w	r3, r3, #10
 8005b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b087      	sub	sp, #28
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0210 	bic.w	r2, r3, #16
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	031b      	lsls	r3, r3, #12
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f043 0307 	orr.w	r3, r3, #7
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	021a      	lsls	r2, r3, #8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	609a      	str	r2, [r3, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 031f 	and.w	r3, r3, #31
 8005c26:	2201      	movs	r2, #1
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1a      	ldr	r2, [r3, #32]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	43db      	mvns	r3, r3
 8005c36:	401a      	ands	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1a      	ldr	r2, [r3, #32]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e06d      	b.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d108      	bne.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d022      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d01d      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d018      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00e      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10c      	bne.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40001800 	.word	0x40001800

08005d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return &gnetif;
 8005dbc:	4b02      	ldr	r3, [pc, #8]	; (8005dc8 <get_static_netif+0x10>)
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	20000600 	.word	0x20000600

08005dcc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005dd2:	4b98      	ldr	r3, [pc, #608]	; (8006034 <MX_LWIP_Init+0x268>)
 8005dd4:	220a      	movs	r2, #10
 8005dd6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005dd8:	4b96      	ldr	r3, [pc, #600]	; (8006034 <MX_LWIP_Init+0x268>)
 8005dda:	222a      	movs	r2, #42	; 0x2a
 8005ddc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005dde:	4b95      	ldr	r3, [pc, #596]	; (8006034 <MX_LWIP_Init+0x268>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8005de4:	4b93      	ldr	r3, [pc, #588]	; (8006034 <MX_LWIP_Init+0x268>)
 8005de6:	2220      	movs	r2, #32
 8005de8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005dea:	4b93      	ldr	r3, [pc, #588]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005dec:	22ff      	movs	r2, #255	; 0xff
 8005dee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005df0:	4b91      	ldr	r3, [pc, #580]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005df2:	22ff      	movs	r2, #255	; 0xff
 8005df4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005df6:	4b90      	ldr	r3, [pc, #576]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005dfc:	4b8e      	ldr	r3, [pc, #568]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005e02:	4b8e      	ldr	r3, [pc, #568]	; (800603c <MX_LWIP_Init+0x270>)
 8005e04:	220a      	movs	r2, #10
 8005e06:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8005e08:	4b8c      	ldr	r3, [pc, #560]	; (800603c <MX_LWIP_Init+0x270>)
 8005e0a:	222a      	movs	r2, #42	; 0x2a
 8005e0c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005e0e:	4b8b      	ldr	r3, [pc, #556]	; (800603c <MX_LWIP_Init+0x270>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005e14:	4b89      	ldr	r3, [pc, #548]	; (800603c <MX_LWIP_Init+0x270>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f006 ff45 	bl	800ccac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005e22:	4b84      	ldr	r3, [pc, #528]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	061a      	lsls	r2, r3, #24
 8005e28:	4b82      	ldr	r3, [pc, #520]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	4b80      	ldr	r3, [pc, #512]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e32:	789b      	ldrb	r3, [r3, #2]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a7e      	ldr	r2, [pc, #504]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e3a:	78d2      	ldrb	r2, [r2, #3]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	061a      	lsls	r2, r3, #24
 8005e40:	4b7c      	ldr	r3, [pc, #496]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	0619      	lsls	r1, r3, #24
 8005e46:	4b7b      	ldr	r3, [pc, #492]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	4319      	orrs	r1, r3
 8005e4e:	4b79      	ldr	r3, [pc, #484]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e50:	789b      	ldrb	r3, [r3, #2]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	430b      	orrs	r3, r1
 8005e56:	4977      	ldr	r1, [pc, #476]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e58:	78c9      	ldrb	r1, [r1, #3]
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e62:	431a      	orrs	r2, r3
 8005e64:	4b73      	ldr	r3, [pc, #460]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	0619      	lsls	r1, r3, #24
 8005e6a:	4b72      	ldr	r3, [pc, #456]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	4319      	orrs	r1, r3
 8005e72:	4b70      	ldr	r3, [pc, #448]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e74:	789b      	ldrb	r3, [r3, #2]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	496e      	ldr	r1, [pc, #440]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e7c:	78c9      	ldrb	r1, [r1, #3]
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e86:	431a      	orrs	r2, r3
 8005e88:	4b6a      	ldr	r3, [pc, #424]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	0619      	lsls	r1, r3, #24
 8005e8e:	4b69      	ldr	r3, [pc, #420]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	4319      	orrs	r1, r3
 8005e96:	4b67      	ldr	r3, [pc, #412]	; (8006034 <MX_LWIP_Init+0x268>)
 8005e98:	789b      	ldrb	r3, [r3, #2]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	4965      	ldr	r1, [pc, #404]	; (8006034 <MX_LWIP_Init+0x268>)
 8005ea0:	78c9      	ldrb	r1, [r1, #3]
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	0e1b      	lsrs	r3, r3, #24
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	4a65      	ldr	r2, [pc, #404]	; (8006040 <MX_LWIP_Init+0x274>)
 8005eaa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005eac:	4b62      	ldr	r3, [pc, #392]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	061a      	lsls	r2, r3, #24
 8005eb2:	4b61      	ldr	r3, [pc, #388]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	4b5f      	ldr	r3, [pc, #380]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ebc:	789b      	ldrb	r3, [r3, #2]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	4a5d      	ldr	r2, [pc, #372]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ec4:	78d2      	ldrb	r2, [r2, #3]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	061a      	lsls	r2, r3, #24
 8005eca:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	0619      	lsls	r1, r3, #24
 8005ed0:	4b59      	ldr	r3, [pc, #356]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	4319      	orrs	r1, r3
 8005ed8:	4b57      	ldr	r3, [pc, #348]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005eda:	789b      	ldrb	r3, [r3, #2]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4955      	ldr	r1, [pc, #340]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ee2:	78c9      	ldrb	r1, [r1, #3]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005eec:	431a      	orrs	r2, r3
 8005eee:	4b52      	ldr	r3, [pc, #328]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	0619      	lsls	r1, r3, #24
 8005ef4:	4b50      	ldr	r3, [pc, #320]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	4319      	orrs	r1, r3
 8005efc:	4b4e      	ldr	r3, [pc, #312]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005efe:	789b      	ldrb	r3, [r3, #2]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	430b      	orrs	r3, r1
 8005f04:	494c      	ldr	r1, [pc, #304]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005f06:	78c9      	ldrb	r1, [r1, #3]
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f10:	431a      	orrs	r2, r3
 8005f12:	4b49      	ldr	r3, [pc, #292]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	0619      	lsls	r1, r3, #24
 8005f18:	4b47      	ldr	r3, [pc, #284]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	041b      	lsls	r3, r3, #16
 8005f1e:	4319      	orrs	r1, r3
 8005f20:	4b45      	ldr	r3, [pc, #276]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	430b      	orrs	r3, r1
 8005f28:	4943      	ldr	r1, [pc, #268]	; (8006038 <MX_LWIP_Init+0x26c>)
 8005f2a:	78c9      	ldrb	r1, [r1, #3]
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	0e1b      	lsrs	r3, r3, #24
 8005f30:	4313      	orrs	r3, r2
 8005f32:	4a44      	ldr	r2, [pc, #272]	; (8006044 <MX_LWIP_Init+0x278>)
 8005f34:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005f36:	4b41      	ldr	r3, [pc, #260]	; (800603c <MX_LWIP_Init+0x270>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	061a      	lsls	r2, r3, #24
 8005f3c:	4b3f      	ldr	r3, [pc, #252]	; (800603c <MX_LWIP_Init+0x270>)
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	041b      	lsls	r3, r3, #16
 8005f42:	431a      	orrs	r2, r3
 8005f44:	4b3d      	ldr	r3, [pc, #244]	; (800603c <MX_LWIP_Init+0x270>)
 8005f46:	789b      	ldrb	r3, [r3, #2]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	4a3b      	ldr	r2, [pc, #236]	; (800603c <MX_LWIP_Init+0x270>)
 8005f4e:	78d2      	ldrb	r2, [r2, #3]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	061a      	lsls	r2, r3, #24
 8005f54:	4b39      	ldr	r3, [pc, #228]	; (800603c <MX_LWIP_Init+0x270>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	0619      	lsls	r1, r3, #24
 8005f5a:	4b38      	ldr	r3, [pc, #224]	; (800603c <MX_LWIP_Init+0x270>)
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	4319      	orrs	r1, r3
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <MX_LWIP_Init+0x270>)
 8005f64:	789b      	ldrb	r3, [r3, #2]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	4934      	ldr	r1, [pc, #208]	; (800603c <MX_LWIP_Init+0x270>)
 8005f6c:	78c9      	ldrb	r1, [r1, #3]
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f76:	431a      	orrs	r2, r3
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <MX_LWIP_Init+0x270>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	0619      	lsls	r1, r3, #24
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <MX_LWIP_Init+0x270>)
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	4319      	orrs	r1, r3
 8005f86:	4b2d      	ldr	r3, [pc, #180]	; (800603c <MX_LWIP_Init+0x270>)
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	492b      	ldr	r1, [pc, #172]	; (800603c <MX_LWIP_Init+0x270>)
 8005f90:	78c9      	ldrb	r1, [r1, #3]
 8005f92:	430b      	orrs	r3, r1
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	4b27      	ldr	r3, [pc, #156]	; (800603c <MX_LWIP_Init+0x270>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	0619      	lsls	r1, r3, #24
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <MX_LWIP_Init+0x270>)
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	4319      	orrs	r1, r3
 8005faa:	4b24      	ldr	r3, [pc, #144]	; (800603c <MX_LWIP_Init+0x270>)
 8005fac:	789b      	ldrb	r3, [r3, #2]
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	4922      	ldr	r1, [pc, #136]	; (800603c <MX_LWIP_Init+0x270>)
 8005fb4:	78c9      	ldrb	r1, [r1, #3]
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	0e1b      	lsrs	r3, r3, #24
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <MX_LWIP_Init+0x27c>)
 8005fbe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005fc0:	4b22      	ldr	r3, [pc, #136]	; (800604c <MX_LWIP_Init+0x280>)
 8005fc2:	9302      	str	r3, [sp, #8]
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <MX_LWIP_Init+0x284>)
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <MX_LWIP_Init+0x27c>)
 8005fce:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <MX_LWIP_Init+0x278>)
 8005fd0:	491b      	ldr	r1, [pc, #108]	; (8006040 <MX_LWIP_Init+0x274>)
 8005fd2:	4820      	ldr	r0, [pc, #128]	; (8006054 <MX_LWIP_Init+0x288>)
 8005fd4:	f007 fd4c 	bl	800da70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005fd8:	481e      	ldr	r0, [pc, #120]	; (8006054 <MX_LWIP_Init+0x288>)
 8005fda:	f007 fef7 	bl	800ddcc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <MX_LWIP_Init+0x288>)
 8005fe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fe4:	089b      	lsrs	r3, r3, #2
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005ff0:	4818      	ldr	r0, [pc, #96]	; (8006054 <MX_LWIP_Init+0x288>)
 8005ff2:	f007 fefb 	bl	800ddec <netif_set_up>
 8005ff6:	e002      	b.n	8005ffe <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005ff8:	4816      	ldr	r0, [pc, #88]	; (8006054 <MX_LWIP_Init+0x288>)
 8005ffa:	f007 ff63 	bl	800dec4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005ffe:	4916      	ldr	r1, [pc, #88]	; (8006058 <MX_LWIP_Init+0x28c>)
 8006000:	4814      	ldr	r0, [pc, #80]	; (8006054 <MX_LWIP_Init+0x288>)
 8006002:	f007 fff5 	bl	800dff0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006006:	2224      	movs	r2, #36	; 0x24
 8006008:	2100      	movs	r1, #0
 800600a:	4814      	ldr	r0, [pc, #80]	; (800605c <MX_LWIP_Init+0x290>)
 800600c:	f011 fe73 	bl	8017cf6 <memset>
  attributes.name = "EthLink";
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <MX_LWIP_Init+0x290>)
 8006012:	4a13      	ldr	r2, [pc, #76]	; (8006060 <MX_LWIP_Init+0x294>)
 8006014:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <MX_LWIP_Init+0x290>)
 8006018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800601c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <MX_LWIP_Init+0x290>)
 8006020:	2210      	movs	r2, #16
 8006022:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006024:	4a0d      	ldr	r2, [pc, #52]	; (800605c <MX_LWIP_Init+0x290>)
 8006026:	490b      	ldr	r1, [pc, #44]	; (8006054 <MX_LWIP_Init+0x288>)
 8006028:	480e      	ldr	r0, [pc, #56]	; (8006064 <MX_LWIP_Init+0x298>)
 800602a:	f000 fda3 	bl	8006b74 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800602e:	bf00      	nop
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000640 	.word	0x20000640
 8006038:	20000644 	.word	0x20000644
 800603c:	20000648 	.word	0x20000648
 8006040:	20000634 	.word	0x20000634
 8006044:	20000638 	.word	0x20000638
 8006048:	2000063c 	.word	0x2000063c
 800604c:	0800cbbd 	.word	0x0800cbbd
 8006050:	08006565 	.word	0x08006565
 8006054:	20000600 	.word	0x20000600
 8006058:	08006069 	.word	0x08006069
 800605c:	2000064c 	.word	0x2000064c
 8006060:	0801aec4 	.word	0x0801aec4
 8006064:	0800682d 	.word	0x0800682d

08006068 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800608e:	2320      	movs	r3, #32
 8006090:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006092:	f3bf 8f4f 	dsb	sy
}
 8006096:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006098:	e00b      	b.n	80060b2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800609a:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dcf0      	bgt.n	800609a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80060b8:	f3bf 8f4f 	dsb	sy
}
 80060bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060be:	f3bf 8f6f 	isb	sy
}
 80060c2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <HAL_ETH_RxCpltCallback+0x1c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f865 	bl	80071b0 <osSemaphoreRelease>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20004ffc 	.word	0x20004ffc

080060f4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <HAL_ETH_TxCpltCallback+0x1c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f001 f855 	bl	80071b0 <osSemaphoreRelease>
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20005000 	.word	0x20005000

08006114 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fd f9c1 	bl	80034a4 <HAL_ETH_GetDMAError>
 8006122:	4603      	mov	r3, r0
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d104      	bne.n	8006136 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <HAL_ETH_ErrorCallback+0x2c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f001 f83d 	bl	80071b0 <osSemaphoreRelease>
  }
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20004ffc 	.word	0x20004ffc

08006144 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b0aa      	sub	sp, #168	; 0xa8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800615e:	f107 0310 	add.w	r3, r7, #16
 8006162:	2264      	movs	r2, #100	; 0x64
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f011 fdc5 	bl	8017cf6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800616c:	4b85      	ldr	r3, [pc, #532]	; (8006384 <low_level_init+0x240>)
 800616e:	4a86      	ldr	r2, [pc, #536]	; (8006388 <low_level_init+0x244>)
 8006170:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006172:	2300      	movs	r3, #0
 8006174:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800617a:	23e1      	movs	r3, #225	; 0xe1
 800617c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800617e:	2300      	movs	r3, #0
 8006180:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006182:	2300      	movs	r3, #0
 8006184:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006186:	2300      	movs	r3, #0
 8006188:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800618a:	4a7e      	ldr	r2, [pc, #504]	; (8006384 <low_level_init+0x240>)
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006192:	4b7c      	ldr	r3, [pc, #496]	; (8006384 <low_level_init+0x240>)
 8006194:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006198:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800619a:	4b7a      	ldr	r3, [pc, #488]	; (8006384 <low_level_init+0x240>)
 800619c:	4a7b      	ldr	r2, [pc, #492]	; (800638c <low_level_init+0x248>)
 800619e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80061a0:	4b78      	ldr	r3, [pc, #480]	; (8006384 <low_level_init+0x240>)
 80061a2:	4a7b      	ldr	r2, [pc, #492]	; (8006390 <low_level_init+0x24c>)
 80061a4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80061a6:	4b77      	ldr	r3, [pc, #476]	; (8006384 <low_level_init+0x240>)
 80061a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80061ac:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80061ae:	4875      	ldr	r0, [pc, #468]	; (8006384 <low_level_init+0x240>)
 80061b0:	f7fc fada 	bl	8002768 <HAL_ETH_Init>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80061ba:	2238      	movs	r2, #56	; 0x38
 80061bc:	2100      	movs	r1, #0
 80061be:	4875      	ldr	r0, [pc, #468]	; (8006394 <low_level_init+0x250>)
 80061c0:	f011 fd99 	bl	8017cf6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80061c4:	4b73      	ldr	r3, [pc, #460]	; (8006394 <low_level_init+0x250>)
 80061c6:	2221      	movs	r2, #33	; 0x21
 80061c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80061ca:	4b72      	ldr	r3, [pc, #456]	; (8006394 <low_level_init+0x250>)
 80061cc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80061d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80061d2:	4b70      	ldr	r3, [pc, #448]	; (8006394 <low_level_init+0x250>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80061d8:	486f      	ldr	r0, [pc, #444]	; (8006398 <low_level_init+0x254>)
 80061da:	f007 fb03 	bl	800d7e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2206      	movs	r2, #6
 80061e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80061e6:	4b67      	ldr	r3, [pc, #412]	; (8006384 <low_level_init+0x240>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80061f2:	4b64      	ldr	r3, [pc, #400]	; (8006384 <low_level_init+0x240>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	785a      	ldrb	r2, [r3, #1]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80061fe:	4b61      	ldr	r3, [pc, #388]	; (8006384 <low_level_init+0x240>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	789a      	ldrb	r2, [r3, #2]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800620a:	4b5e      	ldr	r3, [pc, #376]	; (8006384 <low_level_init+0x240>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	78da      	ldrb	r2, [r3, #3]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006216:	4b5b      	ldr	r3, [pc, #364]	; (8006384 <low_level_init+0x240>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	791a      	ldrb	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006222:	4b58      	ldr	r3, [pc, #352]	; (8006384 <low_level_init+0x240>)
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	795a      	ldrb	r2, [r3, #5]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006234:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800623c:	f043 030a 	orr.w	r3, r3, #10
 8006240:	b2da      	uxtb	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006248:	2200      	movs	r2, #0
 800624a:	2101      	movs	r1, #1
 800624c:	2001      	movs	r0, #1
 800624e:	f000 fead 	bl	8006fac <osSemaphoreNew>
 8006252:	4603      	mov	r3, r0
 8006254:	4a51      	ldr	r2, [pc, #324]	; (800639c <low_level_init+0x258>)
 8006256:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006258:	2200      	movs	r2, #0
 800625a:	2101      	movs	r1, #1
 800625c:	2001      	movs	r0, #1
 800625e:	f000 fea5 	bl	8006fac <osSemaphoreNew>
 8006262:	4603      	mov	r3, r0
 8006264:	4a4e      	ldr	r2, [pc, #312]	; (80063a0 <low_level_init+0x25c>)
 8006266:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006268:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800626c:	2224      	movs	r2, #36	; 0x24
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f011 fd40 	bl	8017cf6 <memset>
  attributes.name = "EthIf";
 8006276:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <low_level_init+0x260>)
 8006278:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800627a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800627e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8006282:	2330      	movs	r3, #48	; 0x30
 8006284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006288:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800628c:	461a      	mov	r2, r3
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4845      	ldr	r0, [pc, #276]	; (80063a8 <low_level_init+0x264>)
 8006292:	f000 fc6f 	bl	8006b74 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006296:	4945      	ldr	r1, [pc, #276]	; (80063ac <low_level_init+0x268>)
 8006298:	4845      	ldr	r0, [pc, #276]	; (80063b0 <low_level_init+0x26c>)
 800629a:	f7fb feda 	bl	8002052 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800629e:	4844      	ldr	r0, [pc, #272]	; (80063b0 <low_level_init+0x26c>)
 80062a0:	f7fb ff09 	bl	80020b6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80062a4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d164      	bne.n	8006376 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80062ac:	4840      	ldr	r0, [pc, #256]	; (80063b0 <low_level_init+0x26c>)
 80062ae:	f7fb ffaa 	bl	8002206 <LAN8742_GetLinkState>
 80062b2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80062b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	dc06      	bgt.n	80062cc <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f007 fe66 	bl	800df90 <netif_set_link_down>
      netif_set_down(netif);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f007 fdfd 	bl	800dec4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80062ca:	e056      	b.n	800637a <low_level_init+0x236>
      switch (PHYLinkState)
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	3b02      	subs	r3, #2
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d82a      	bhi.n	800632c <low_level_init+0x1e8>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <low_level_init+0x198>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	080062ed 	.word	0x080062ed
 80062e0:	080062ff 	.word	0x080062ff
 80062e4:	0800630f 	.word	0x0800630f
 80062e8:	0800631f 	.word	0x0800631f
        duplex = ETH_FULLDUPLEX_MODE;
 80062ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80062f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80062fc:	e01f      	b.n	800633e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80062fe:	2300      	movs	r3, #0
 8006300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800630c:	e017      	b.n	800633e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800630e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8006316:	2300      	movs	r3, #0
 8006318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800631c:	e00f      	b.n	800633e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800631e:	2300      	movs	r3, #0
 8006320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800632a:	e008      	b.n	800633e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800632c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8006334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800633c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	4619      	mov	r1, r3
 8006344:	480f      	ldr	r0, [pc, #60]	; (8006384 <low_level_init+0x240>)
 8006346:	f7fc ff53 	bl	80031f0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800634a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8006350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006356:	f107 0310 	add.w	r3, r7, #16
 800635a:	4619      	mov	r1, r3
 800635c:	4809      	ldr	r0, [pc, #36]	; (8006384 <low_level_init+0x240>)
 800635e:	f7fd f831 	bl	80033c4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006362:	4808      	ldr	r0, [pc, #32]	; (8006384 <low_level_init+0x240>)
 8006364:	f7fc fadc 	bl	8002920 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f007 fd3f 	bl	800ddec <netif_set_up>
    netif_set_link_up(netif);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f007 fdda 	bl	800df28 <netif_set_link_up>
}
 8006374:	e001      	b.n	800637a <low_level_init+0x236>
    Error_Handler();
 8006376:	f7fb f98d 	bl	8001694 <Error_Handler>
}
 800637a:	bf00      	nop
 800637c:	37a8      	adds	r7, #168	; 0xa8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20005004 	.word	0x20005004
 8006388:	40028000 	.word	0x40028000
 800638c:	200002a0 	.word	0x200002a0
 8006390:	20000200 	.word	0x20000200
 8006394:	200050b4 	.word	0x200050b4
 8006398:	0801e11c 	.word	0x0801e11c
 800639c:	20004ffc 	.word	0x20004ffc
 80063a0:	20005000 	.word	0x20005000
 80063a4:	0801aecc 	.word	0x0801aecc
 80063a8:	08006511 	.word	0x08006511
 80063ac:	2000000c 	.word	0x2000000c
 80063b0:	200050ec 	.word	0x200050ec

080063b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b092      	sub	sp, #72	; 0x48
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	2230      	movs	r2, #48	; 0x30
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f011 fc8e 	bl	8017cf6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80063da:	f107 030c 	add.w	r3, r7, #12
 80063de:	2230      	movs	r2, #48	; 0x30
 80063e0:	2100      	movs	r1, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f011 fc87 	bl	8017cf6 <memset>

  for(q = p; q != NULL; q = q->next)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	643b      	str	r3, [r7, #64]	; 0x40
 80063ec:	e045      	b.n	800647a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80063ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d902      	bls.n	80063fa <low_level_output+0x46>
      return ERR_IF;
 80063f4:	f06f 030b 	mvn.w	r3, #11
 80063f8:	e065      	b.n	80064c6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80063fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3348      	adds	r3, #72	; 0x48
 800640a:	443b      	add	r3, r7
 800640c:	3b3c      	subs	r3, #60	; 0x3c
 800640e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006412:	895b      	ldrh	r3, [r3, #10]
 8006414:	4619      	mov	r1, r3
 8006416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3348      	adds	r3, #72	; 0x48
 8006422:	443b      	add	r3, r7
 8006424:	3b38      	subs	r3, #56	; 0x38
 8006426:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800642a:	2b00      	cmp	r3, #0
 800642c:	d011      	beq.n	8006452 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	f107 000c 	add.w	r0, r7, #12
 8006436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006438:	460b      	mov	r3, r1
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	440b      	add	r3, r1
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	18c1      	adds	r1, r0, r3
 8006442:	4613      	mov	r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	3348      	adds	r3, #72	; 0x48
 800644c:	443b      	add	r3, r7
 800644e:	3b34      	subs	r3, #52	; 0x34
 8006450:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800645a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3348      	adds	r3, #72	; 0x48
 8006466:	443b      	add	r3, r7
 8006468:	3b34      	subs	r3, #52	; 0x34
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800646e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006470:	3301      	adds	r3, #1
 8006472:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
 800647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1b6      	bne.n	80063ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	461a      	mov	r2, r3
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <low_level_output+0x11c>)
 8006488:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800648a:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <low_level_output+0x11c>)
 800648c:	f107 030c 	add.w	r3, r7, #12
 8006490:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006492:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <low_level_output+0x11c>)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f008 f9fd 	bl	800e898 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800649e:	490c      	ldr	r1, [pc, #48]	; (80064d0 <low_level_output+0x11c>)
 80064a0:	480c      	ldr	r0, [pc, #48]	; (80064d4 <low_level_output+0x120>)
 80064a2:	f7fc fb4b 	bl	8002b3c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80064a6:	bf00      	nop
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <low_level_output+0x124>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fe17 	bl	80070e4 <osSemaphoreAcquire>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f5      	bne.n	80064a8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80064bc:	4805      	ldr	r0, [pc, #20]	; (80064d4 <low_level_output+0x120>)
 80064be:	f7fc fcd1 	bl	8002e64 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80064c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3748      	adds	r7, #72	; 0x48
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200050b4 	.word	0x200050b4
 80064d4:	20005004 	.word	0x20005004
 80064d8:	20005000 	.word	0x20005000

080064dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <low_level_input+0x2c>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d105      	bne.n	80064fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4619      	mov	r1, r3
 80064f6:	4805      	ldr	r0, [pc, #20]	; (800650c <low_level_input+0x30>)
 80064f8:	f7fc fb7c 	bl	8002bf4 <HAL_ETH_ReadData>
  }

  return p;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20004ff8 	.word	0x20004ff8
 800650c:	20005004 	.word	0x20005004

08006510 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <ethernetif_input+0x50>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fddb 	bl	80070e4 <osSemaphoreAcquire>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f5      	bne.n	8006520 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	f7ff ffd1 	bl	80064dc <low_level_input>
 800653a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	4798      	blx	r3
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f008 f8fa 	bl	800e74c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1ea      	bne.n	8006534 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800655e:	e7df      	b.n	8006520 <ethernetif_input+0x10>
 8006560:	20004ffc 	.word	0x20004ffc

08006564 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <ethernetif_init+0x1c>
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <ethernetif_init+0x48>)
 8006574:	f44f 720d 	mov.w	r2, #564	; 0x234
 8006578:	490d      	ldr	r1, [pc, #52]	; (80065b0 <ethernetif_init+0x4c>)
 800657a:	480e      	ldr	r0, [pc, #56]	; (80065b4 <ethernetif_init+0x50>)
 800657c:	f011 fc58 	bl	8017e30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2273      	movs	r2, #115	; 0x73
 8006584:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2274      	movs	r2, #116	; 0x74
 800658c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <ethernetif_init+0x54>)
 8006594:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <ethernetif_init+0x58>)
 800659a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff fdd1 	bl	8006144 <low_level_init>

  return ERR_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	0801aed4 	.word	0x0801aed4
 80065b0:	0801aef0 	.word	0x0801aef0
 80065b4:	0801af00 	.word	0x0801af00
 80065b8:	080159f9 	.word	0x080159f9
 80065bc:	080063b5 	.word	0x080063b5

080065c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	4809      	ldr	r0, [pc, #36]	; (80065f4 <pbuf_free_custom+0x34>)
 80065d0:	f007 f9f8 	bl	800d9c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80065d4:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <pbuf_free_custom+0x38>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <pbuf_free_custom+0x38>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <pbuf_free_custom+0x3c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fde2 	bl	80071b0 <osSemaphoreRelease>
  }
}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	0801e11c 	.word	0x0801e11c
 80065f8:	20004ff8 	.word	0x20004ff8
 80065fc:	20004ffc 	.word	0x20004ffc

08006600 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006604:	f7fb feb0 	bl	8002368 <HAL_GetTick>
 8006608:	4603      	mov	r3, r0
}
 800660a:	4618      	mov	r0, r3
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08e      	sub	sp, #56	; 0x38
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	605a      	str	r2, [r3, #4]
 8006622:	609a      	str	r2, [r3, #8]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a52      	ldr	r2, [pc, #328]	; (8006778 <HAL_ETH_MspInit+0x168>)
 800662e:	4293      	cmp	r3, r2
 8006630:	f040 809e 	bne.w	8006770 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006634:	4b51      	ldr	r3, [pc, #324]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	4a50      	ldr	r2, [pc, #320]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800663a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800663e:	6313      	str	r3, [r2, #48]	; 0x30
 8006640:	4b4e      	ldr	r3, [pc, #312]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	4b4b      	ldr	r3, [pc, #300]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	4a4a      	ldr	r2, [pc, #296]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006656:	6313      	str	r3, [r2, #48]	; 0x30
 8006658:	4b48      	ldr	r3, [pc, #288]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4b45      	ldr	r3, [pc, #276]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4a44      	ldr	r2, [pc, #272]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800666a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800666e:	6313      	str	r3, [r2, #48]	; 0x30
 8006670:	4b42      	ldr	r3, [pc, #264]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800667c:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	4a3e      	ldr	r2, [pc, #248]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006682:	f043 0304 	orr.w	r3, r3, #4
 8006686:	6313      	str	r3, [r2, #48]	; 0x30
 8006688:	4b3c      	ldr	r3, [pc, #240]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006694:	4b39      	ldr	r3, [pc, #228]	; (800677c <HAL_ETH_MspInit+0x16c>)
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	4a38      	ldr	r2, [pc, #224]	; (800677c <HAL_ETH_MspInit+0x16c>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6313      	str	r3, [r2, #48]	; 0x30
 80066a0:	4b36      	ldr	r3, [pc, #216]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ac:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	4a32      	ldr	r2, [pc, #200]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066b2:	f043 0302 	orr.w	r3, r3, #2
 80066b6:	6313      	str	r3, [r2, #48]	; 0x30
 80066b8:	4b30      	ldr	r3, [pc, #192]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80066c4:	4b2d      	ldr	r3, [pc, #180]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	4a2c      	ldr	r2, [pc, #176]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ce:	6313      	str	r3, [r2, #48]	; 0x30
 80066d0:	4b2a      	ldr	r3, [pc, #168]	; (800677c <HAL_ETH_MspInit+0x16c>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80066dc:	2332      	movs	r3, #50	; 0x32
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e0:	2302      	movs	r3, #2
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e8:	2303      	movs	r3, #3
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80066ec:	230b      	movs	r3, #11
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f4:	4619      	mov	r1, r3
 80066f6:	4822      	ldr	r0, [pc, #136]	; (8006780 <HAL_ETH_MspInit+0x170>)
 80066f8:	f7fd fae4 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80066fc:	2386      	movs	r3, #134	; 0x86
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006700:	2302      	movs	r3, #2
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006704:	2300      	movs	r3, #0
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006708:	2303      	movs	r3, #3
 800670a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800670c:	230b      	movs	r3, #11
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006714:	4619      	mov	r1, r3
 8006716:	481b      	ldr	r0, [pc, #108]	; (8006784 <HAL_ETH_MspInit+0x174>)
 8006718:	f7fd fad4 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800671c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006722:	2302      	movs	r3, #2
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006726:	2300      	movs	r3, #0
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800672a:	2303      	movs	r3, #3
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800672e:	230b      	movs	r3, #11
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006736:	4619      	mov	r1, r3
 8006738:	4813      	ldr	r0, [pc, #76]	; (8006788 <HAL_ETH_MspInit+0x178>)
 800673a:	f7fd fac3 	bl	8003cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800673e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674c:	2303      	movs	r3, #3
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006750:	230b      	movs	r3, #11
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006758:	4619      	mov	r1, r3
 800675a:	480c      	ldr	r0, [pc, #48]	; (800678c <HAL_ETH_MspInit+0x17c>)
 800675c:	f7fd fab2 	bl	8003cc4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006760:	2200      	movs	r2, #0
 8006762:	2105      	movs	r1, #5
 8006764:	203d      	movs	r0, #61	; 0x3d
 8006766:	f7fb fee7 	bl	8002538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800676a:	203d      	movs	r0, #61	; 0x3d
 800676c:	f7fb ff00 	bl	8002570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006770:	bf00      	nop
 8006772:	3738      	adds	r7, #56	; 0x38
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40028000 	.word	0x40028000
 800677c:	40023800 	.word	0x40023800
 8006780:	40020800 	.word	0x40020800
 8006784:	40020000 	.word	0x40020000
 8006788:	40020400 	.word	0x40020400
 800678c:	40021800 	.word	0x40021800

08006790 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006794:	4802      	ldr	r0, [pc, #8]	; (80067a0 <ETH_PHY_IO_Init+0x10>)
 8006796:	f7fc fe2f 	bl	80033f8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20005004 	.word	0x20005004

080067a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return 0;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	68f9      	ldr	r1, [r7, #12]
 80067c6:	4807      	ldr	r0, [pc, #28]	; (80067e4 <ETH_PHY_IO_ReadReg+0x30>)
 80067c8:	f7fc fc7e 	bl	80030c8 <HAL_ETH_ReadPHYRegister>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80067d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067d6:	e000      	b.n	80067da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20005004 	.word	0x20005004

080067e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	4807      	ldr	r0, [pc, #28]	; (8006818 <ETH_PHY_IO_WriteReg+0x30>)
 80067fc:	f7fc fcaf 	bl	800315e <HAL_ETH_WritePHYRegister>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800680a:	e000      	b.n	800680e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20005004 	.word	0x20005004

0800681c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006820:	f7fb fda2 	bl	8002368 <HAL_GetTick>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b0a0      	sub	sp, #128	; 0x80
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	2264      	movs	r2, #100	; 0x64
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f011 fa5a 	bl	8017cf6 <memset>
  int32_t PHYLinkState = 0;
 8006842:	2300      	movs	r3, #0
 8006844:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	67fb      	str	r3, [r7, #124]	; 0x7c
 800684a:	2300      	movs	r3, #0
 800684c:	67bb      	str	r3, [r7, #120]	; 0x78
 800684e:	2300      	movs	r3, #0
 8006850:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006856:	483a      	ldr	r0, [pc, #232]	; (8006940 <ethernet_link_thread+0x114>)
 8006858:	f7fb fcd5 	bl	8002206 <LAN8742_GetLinkState>
 800685c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800685e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006860:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006864:	089b      	lsrs	r3, r3, #2
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00c      	beq.n	800688a <ethernet_link_thread+0x5e>
 8006870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006872:	2b01      	cmp	r3, #1
 8006874:	dc09      	bgt.n	800688a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006876:	4833      	ldr	r0, [pc, #204]	; (8006944 <ethernet_link_thread+0x118>)
 8006878:	f7fc f8e0 	bl	8002a3c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800687c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800687e:	f007 fb21 	bl	800dec4 <netif_set_down>
    netif_set_link_down(netif);
 8006882:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006884:	f007 fb84 	bl	800df90 <netif_set_link_down>
 8006888:	e055      	b.n	8006936 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d14e      	bne.n	8006936 <ethernet_link_thread+0x10a>
 8006898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800689a:	2b01      	cmp	r3, #1
 800689c:	dd4b      	ble.n	8006936 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800689e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a0:	3b02      	subs	r3, #2
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d82a      	bhi.n	80068fc <ethernet_link_thread+0xd0>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <ethernet_link_thread+0x80>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068cf 	.word	0x080068cf
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068ef 	.word	0x080068ef
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80068bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80068c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068c8:	2301      	movs	r3, #1
 80068ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068cc:	e017      	b.n	80068fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80068d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068d8:	2301      	movs	r3, #1
 80068da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068dc:	e00f      	b.n	80068fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80068de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068e2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80068e4:	2300      	movs	r3, #0
 80068e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068e8:	2301      	movs	r3, #1
 80068ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068ec:	e007      	b.n	80068fe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80068f2:	2300      	movs	r3, #0
 80068f4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80068fa:	e000      	b.n	80068fe <ethernet_link_thread+0xd2>
    default:
      break;
 80068fc:	bf00      	nop
    }

    if(linkchanged)
 80068fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	4619      	mov	r1, r3
 800690a:	480e      	ldr	r0, [pc, #56]	; (8006944 <ethernet_link_thread+0x118>)
 800690c:	f7fc fc70 	bl	80031f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006912:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006916:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4619      	mov	r1, r3
 800691e:	4809      	ldr	r0, [pc, #36]	; (8006944 <ethernet_link_thread+0x118>)
 8006920:	f7fc fd50 	bl	80033c4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006924:	4807      	ldr	r0, [pc, #28]	; (8006944 <ethernet_link_thread+0x118>)
 8006926:	f7fb ff9b 	bl	8002860 <HAL_ETH_Start>
      netif_set_up(netif);
 800692a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800692c:	f007 fa5e 	bl	800ddec <netif_set_up>
      netif_set_link_up(netif);
 8006930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006932:	f007 faf9 	bl	800df28 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006936:	2064      	movs	r0, #100	; 0x64
 8006938:	f000 f9c2 	bl	8006cc0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800693c:	e78b      	b.n	8006856 <ethernet_link_thread+0x2a>
 800693e:	bf00      	nop
 8006940:	200050ec 	.word	0x200050ec
 8006944:	20005004 	.word	0x20005004

08006948 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006950:	4812      	ldr	r0, [pc, #72]	; (800699c <HAL_ETH_RxAllocateCallback+0x54>)
 8006952:	f006 ffc3 	bl	800d8dc <memp_malloc_pool>
 8006956:	60f8      	str	r0, [r7, #12]
  if (p)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d014      	beq.n	8006988 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f103 0220 	add.w	r2, r3, #32
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a0d      	ldr	r2, [pc, #52]	; (80069a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800696c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006976:	9201      	str	r2, [sp, #4]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2241      	movs	r2, #65	; 0x41
 800697e:	2100      	movs	r1, #0
 8006980:	2000      	movs	r0, #0
 8006982:	f007 fd29 	bl	800e3d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006986:	e005      	b.n	8006994 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800698a:	2201      	movs	r2, #1
 800698c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	0801e11c 	.word	0x0801e11c
 80069a0:	080065c1 	.word	0x080065c1
 80069a4:	20004ff8 	.word	0x20004ff8

080069a8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3b20      	subs	r3, #32
 80069c6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	2200      	movs	r2, #0
 80069d2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d103      	bne.n	80069ea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e003      	b.n	80069f2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	e009      	b.n	8006a14 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	891a      	ldrh	r2, [r3, #8]
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	4413      	add	r3, r2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1f2      	bne.n	8006a00 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006a1a:	887b      	ldrh	r3, [r7, #2]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fb2c 	bl	800607c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f007 fe89 	bl	800e74c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a42:	b480      	push	{r7}
 8006a44:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a56:	f3ef 8305 	mrs	r3, IPSR
 8006a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10f      	bne.n	8006a82 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	607b      	str	r3, [r7, #4]
  return(result);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d105      	bne.n	8006a7a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a72:	603b      	str	r3, [r7, #0]
  return(result);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <osKernelInitialize+0x3a>
 8006a7a:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <osKernelInitialize+0x64>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d103      	bne.n	8006a8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a82:	f06f 0305 	mvn.w	r3, #5
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e00c      	b.n	8006aa4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <osKernelInitialize+0x64>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a92:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <osKernelInitialize+0x64>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e002      	b.n	8006aa4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aa2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000510c 	.word	0x2000510c

08006ab8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ace:	607b      	str	r3, [r7, #4]
  return(result);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8006ada:	603b      	str	r3, [r7, #0]
  return(result);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <osKernelStart+0x3a>
 8006ae2:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <osKernelStart+0x68>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d103      	bne.n	8006af2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006aea:	f06f 0305 	mvn.w	r3, #5
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e010      	b.n	8006b14 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006af2:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <osKernelStart+0x68>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d109      	bne.n	8006b0e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006afa:	f7ff ffa2 	bl	8006a42 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006afe:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <osKernelStart+0x68>)
 8006b00:	2202      	movs	r2, #2
 8006b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b04:	f002 f9e4 	bl	8008ed0 <vTaskStartScheduler>
      stat = osOK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e002      	b.n	8006b14 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b14:	68fb      	ldr	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000510c 	.word	0x2000510c

08006b24 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b2a:	f3ef 8305 	mrs	r3, IPSR
 8006b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b30:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10f      	bne.n	8006b56 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b36:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3a:	607b      	str	r3, [r7, #4]
  return(result);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b42:	f3ef 8311 	mrs	r3, BASEPRI
 8006b46:	603b      	str	r3, [r7, #0]
  return(result);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d007      	beq.n	8006b5e <osKernelGetTickCount+0x3a>
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <osKernelGetTickCount+0x4c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d103      	bne.n	8006b5e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006b56:	f002 faed 	bl	8009134 <xTaskGetTickCountFromISR>
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	e002      	b.n	8006b64 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006b5e:	f002 fad9 	bl	8009114 <xTaskGetTickCount>
 8006b62:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006b64:	68fb      	ldr	r3, [r7, #12]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	2000510c 	.word	0x2000510c

08006b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b090      	sub	sp, #64	; 0x40
 8006b78:	af04      	add	r7, sp, #16
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b84:	f3ef 8305 	mrs	r3, IPSR
 8006b88:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 808f 	bne.w	8006cb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b92:	f3ef 8310 	mrs	r3, PRIMASK
 8006b96:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <osThreadNew+0x3e>
 8006baa:	4b44      	ldr	r3, [pc, #272]	; (8006cbc <osThreadNew+0x148>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d07e      	beq.n	8006cb0 <osThreadNew+0x13c>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d07b      	beq.n	8006cb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006bbc:	2318      	movs	r3, #24
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d045      	beq.n	8006c5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <osThreadNew+0x6a>
        name = attr->name;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <osThreadNew+0x90>
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	2b38      	cmp	r3, #56	; 0x38
 8006bf6:	d805      	bhi.n	8006c04 <osThreadNew+0x90>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <osThreadNew+0x94>
        return (NULL);
 8006c04:	2300      	movs	r3, #0
 8006c06:	e054      	b.n	8006cb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <osThreadNew+0xca>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2bbb      	cmp	r3, #187	; 0xbb
 8006c26:	d90a      	bls.n	8006c3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d006      	beq.n	8006c3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <osThreadNew+0xca>
        mem = 1;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	e010      	b.n	8006c60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10c      	bne.n	8006c60 <osThreadNew+0xec>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <osThreadNew+0xec>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <osThreadNew+0xec>
          mem = 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	e001      	b.n	8006c60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d110      	bne.n	8006c88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c6e:	9202      	str	r2, [sp, #8]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 ff31 	bl	8008ae4 <xTaskCreateStatic>
 8006c82:	4603      	mov	r3, r0
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	e013      	b.n	8006cb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d110      	bne.n	8006cb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	f107 0310 	add.w	r3, r7, #16
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f001 ff82 	bl	8008baa <xTaskCreate>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d001      	beq.n	8006cb0 <osThreadNew+0x13c>
          hTask = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cb0:	693b      	ldr	r3, [r7, #16]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3730      	adds	r7, #48	; 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	2000510c 	.word	0x2000510c

08006cc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc8:	f3ef 8305 	mrs	r3, IPSR
 8006ccc:	613b      	str	r3, [r7, #16]
  return(result);
 8006cce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d105      	bne.n	8006cec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <osDelay+0x3c>
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <osDelay+0x58>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d103      	bne.n	8006cfc <osDelay+0x3c>
    stat = osErrorISR;
 8006cf4:	f06f 0305 	mvn.w	r3, #5
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e007      	b.n	8006d0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f002 f8ac 	bl	8008e64 <vTaskDelay>
    }
  }

  return (stat);
 8006d0c:	697b      	ldr	r3, [r7, #20]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	2000510c 	.word	0x2000510c

08006d1c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d28:	f3ef 8305 	mrs	r3, IPSR
 8006d2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006d2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 8085 	bne.w	8006e40 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d36:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d105      	bne.n	8006d4e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d42:	f3ef 8311 	mrs	r3, BASEPRI
 8006d46:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <osMutexNew+0x3a>
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	; (8006e4c <osMutexNew+0x130>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d074      	beq.n	8006e40 <osMutexNew+0x124>
    if (attr != NULL) {
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	e001      	b.n	8006d68 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <osMutexNew+0x5c>
      rmtx = 1U;
 8006d72:	2301      	movs	r3, #1
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e001      	b.n	8006d7c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	f003 0308 	and.w	r3, r3, #8
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d15c      	bne.n	8006e40 <osMutexNew+0x124>
      mem = -1;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d8a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d015      	beq.n	8006dbe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d006      	beq.n	8006da8 <osMutexNew+0x8c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2b4f      	cmp	r3, #79	; 0x4f
 8006da0:	d902      	bls.n	8006da8 <osMutexNew+0x8c>
          mem = 1;
 8006da2:	2301      	movs	r3, #1
 8006da4:	61bb      	str	r3, [r7, #24]
 8006da6:	e00c      	b.n	8006dc2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d108      	bne.n	8006dc2 <osMutexNew+0xa6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <osMutexNew+0xa6>
            mem = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e001      	b.n	8006dc2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d112      	bne.n	8006dee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d007      	beq.n	8006dde <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	2004      	movs	r0, #4
 8006dd6:	f000 feb8 	bl	8007b4a <xQueueCreateMutexStatic>
 8006dda:	6278      	str	r0, [r7, #36]	; 0x24
 8006ddc:	e016      	b.n	8006e0c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4619      	mov	r1, r3
 8006de4:	2001      	movs	r0, #1
 8006de6:	f000 feb0 	bl	8007b4a <xQueueCreateMutexStatic>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24
 8006dec:	e00e      	b.n	8006e0c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006dfa:	2004      	movs	r0, #4
 8006dfc:	f000 fe8d 	bl	8007b1a <xQueueCreateMutex>
 8006e00:	6278      	str	r0, [r7, #36]	; 0x24
 8006e02:	e003      	b.n	8006e0c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006e04:	2001      	movs	r0, #1
 8006e06:	f000 fe88 	bl	8007b1a <xQueueCreateMutex>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <osMutexNew+0x110>
        if (attr != NULL) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <osMutexNew+0x104>
          name = attr->name;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e001      	b.n	8006e24 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e28:	f001 fdd4 	bl	80089d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <osMutexNew+0x124>
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3728      	adds	r7, #40	; 0x28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	2000510c 	.word	0x2000510c

08006e50 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e6e:	f3ef 8305 	mrs	r3, IPSR
 8006e72:	613b      	str	r3, [r7, #16]
  return(result);
 8006e74:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10f      	bne.n	8006e9a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d105      	bne.n	8006e92 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e86:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <osMutexAcquire+0x52>
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <osMutexAcquire+0xb8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d103      	bne.n	8006ea2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006e9a:	f06f 0305 	mvn.w	r3, #5
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e02c      	b.n	8006efc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006ea8:	f06f 0303 	mvn.w	r3, #3
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	e025      	b.n	8006efc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d011      	beq.n	8006eda <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	69b8      	ldr	r0, [r7, #24]
 8006eba:	f000 fe97 	bl	8007bec <xQueueTakeMutexRecursive>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d01b      	beq.n	8006efc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006eca:	f06f 0301 	mvn.w	r3, #1
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e014      	b.n	8006efc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006ed2:	f06f 0302 	mvn.w	r3, #2
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e010      	b.n	8006efc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	f001 fa51 	bl	8008384 <xQueueSemaphoreTake>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d009      	beq.n	8006efc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006eee:	f06f 0301 	mvn.w	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e002      	b.n	8006efc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006ef6:	f06f 0302 	mvn.w	r3, #2
 8006efa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006efc:	69fb      	ldr	r3, [r7, #28]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2000510c 	.word	0x2000510c

08006f0c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f28:	f3ef 8305 	mrs	r3, IPSR
 8006f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006f2e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f34:	f3ef 8310 	mrs	r3, PRIMASK
 8006f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f40:	f3ef 8311 	mrs	r3, BASEPRI
 8006f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <osMutexRelease+0x50>
 8006f4c:	4b16      	ldr	r3, [pc, #88]	; (8006fa8 <osMutexRelease+0x9c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d103      	bne.n	8006f5c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006f54:	f06f 0305 	mvn.w	r3, #5
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	e01f      	b.n	8006f9c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006f62:	f06f 0303 	mvn.w	r3, #3
 8006f66:	61fb      	str	r3, [r7, #28]
 8006f68:	e018      	b.n	8006f9c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d009      	beq.n	8006f84 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f70:	69b8      	ldr	r0, [r7, #24]
 8006f72:	f000 fe05 	bl	8007b80 <xQueueGiveMutexRecursive>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d00f      	beq.n	8006f9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006f7c:	f06f 0302 	mvn.w	r3, #2
 8006f80:	61fb      	str	r3, [r7, #28]
 8006f82:	e00b      	b.n	8006f9c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f84:	2300      	movs	r3, #0
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	69b8      	ldr	r0, [r7, #24]
 8006f8c:	f000 fed8 	bl	8007d40 <xQueueGenericSend>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d002      	beq.n	8006f9c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006f96:	f06f 0302 	mvn.w	r3, #2
 8006f9a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000510c 	.word	0x2000510c

08006fac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	; 0x30
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fbc:	f3ef 8305 	mrs	r3, IPSR
 8006fc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fc2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8086 	bne.w	80070d6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fca:	f3ef 8310 	mrs	r3, PRIMASK
 8006fce:	617b      	str	r3, [r7, #20]
  return(result);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fda:	613b      	str	r3, [r7, #16]
  return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osSemaphoreNew+0x3e>
 8006fe2:	4b3f      	ldr	r3, [pc, #252]	; (80070e0 <osSemaphoreNew+0x134>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d075      	beq.n	80070d6 <osSemaphoreNew+0x12a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d072      	beq.n	80070d6 <osSemaphoreNew+0x12a>
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d86e      	bhi.n	80070d6 <osSemaphoreNew+0x12a>
    mem = -1;
 8006ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ffc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d015      	beq.n	8007030 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d006      	beq.n	800701a <osSemaphoreNew+0x6e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b4f      	cmp	r3, #79	; 0x4f
 8007012:	d902      	bls.n	800701a <osSemaphoreNew+0x6e>
        mem = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	623b      	str	r3, [r7, #32]
 8007018:	e00c      	b.n	8007034 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <osSemaphoreNew+0x88>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <osSemaphoreNew+0x88>
          mem = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	623b      	str	r3, [r7, #32]
 800702e:	e001      	b.n	8007034 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703a:	d04c      	beq.n	80070d6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d128      	bne.n	8007094 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d10a      	bne.n	800705e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2203      	movs	r2, #3
 800704e:	9200      	str	r2, [sp, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	2001      	movs	r0, #1
 8007056:	f000 fc5f 	bl	8007918 <xQueueGenericCreateStatic>
 800705a:	6278      	str	r0, [r7, #36]	; 0x24
 800705c:	e005      	b.n	800706a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800705e:	2203      	movs	r2, #3
 8007060:	2100      	movs	r1, #0
 8007062:	2001      	movs	r0, #1
 8007064:	f000 fcda 	bl	8007a1c <xQueueGenericCreate>
 8007068:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d022      	beq.n	80070b6 <osSemaphoreNew+0x10a>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01f      	beq.n	80070b6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007076:	2300      	movs	r3, #0
 8007078:	2200      	movs	r2, #0
 800707a:	2100      	movs	r1, #0
 800707c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800707e:	f000 fe5f 	bl	8007d40 <xQueueGenericSend>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d016      	beq.n	80070b6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800708a:	f001 fb55 	bl	8008738 <vQueueDelete>
            hSemaphore = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	e010      	b.n	80070b6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d108      	bne.n	80070ac <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	461a      	mov	r2, r3
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 fdda 	bl	8007c5c <xQueueCreateCountingSemaphoreStatic>
 80070a8:	6278      	str	r0, [r7, #36]	; 0x24
 80070aa:	e004      	b.n	80070b6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 fe0f 	bl	8007cd2 <xQueueCreateCountingSemaphore>
 80070b4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00c      	beq.n	80070d6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <osSemaphoreNew+0x11e>
          name = attr->name;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	e001      	b.n	80070ce <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80070ce:	69f9      	ldr	r1, [r7, #28]
 80070d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070d2:	f001 fc7f 	bl	80089d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3728      	adds	r7, #40	; 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000510c 	.word	0x2000510c

080070e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80070fc:	f06f 0303 	mvn.w	r3, #3
 8007100:	61fb      	str	r3, [r7, #28]
 8007102:	e04b      	b.n	800719c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007104:	f3ef 8305 	mrs	r3, IPSR
 8007108:	617b      	str	r3, [r7, #20]
  return(result);
 800710a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10f      	bne.n	8007130 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007110:	f3ef 8310 	mrs	r3, PRIMASK
 8007114:	613b      	str	r3, [r7, #16]
  return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d105      	bne.n	8007128 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800711c:	f3ef 8311 	mrs	r3, BASEPRI
 8007120:	60fb      	str	r3, [r7, #12]
  return(result);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d026      	beq.n	8007176 <osSemaphoreAcquire+0x92>
 8007128:	4b1f      	ldr	r3, [pc, #124]	; (80071a8 <osSemaphoreAcquire+0xc4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d122      	bne.n	8007176 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007136:	f06f 0303 	mvn.w	r3, #3
 800713a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800713c:	e02d      	b.n	800719a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800713e:	2300      	movs	r3, #0
 8007140:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	461a      	mov	r2, r3
 8007148:	2100      	movs	r1, #0
 800714a:	69b8      	ldr	r0, [r7, #24]
 800714c:	f001 fa2e 	bl	80085ac <xQueueReceiveFromISR>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d003      	beq.n	800715e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007156:	f06f 0302 	mvn.w	r3, #2
 800715a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800715c:	e01d      	b.n	800719a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01a      	beq.n	800719a <osSemaphoreAcquire+0xb6>
 8007164:	4b11      	ldr	r3, [pc, #68]	; (80071ac <osSemaphoreAcquire+0xc8>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007174:	e011      	b.n	800719a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	69b8      	ldr	r0, [r7, #24]
 800717a:	f001 f903 	bl	8008384 <xQueueSemaphoreTake>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d00b      	beq.n	800719c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800718a:	f06f 0301 	mvn.w	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
 8007190:	e004      	b.n	800719c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007192:	f06f 0302 	mvn.w	r3, #2
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	e000      	b.n	800719c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800719a:	bf00      	nop
      }
    }
  }

  return (stat);
 800719c:	69fb      	ldr	r3, [r7, #28]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	2000510c 	.word	0x2000510c
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80071c6:	f06f 0303 	mvn.w	r3, #3
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e03e      	b.n	800724c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ce:	f3ef 8305 	mrs	r3, IPSR
 80071d2:	617b      	str	r3, [r7, #20]
  return(result);
 80071d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10f      	bne.n	80071fa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071da:	f3ef 8310 	mrs	r3, PRIMASK
 80071de:	613b      	str	r3, [r7, #16]
  return(result);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071e6:	f3ef 8311 	mrs	r3, BASEPRI
 80071ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01e      	beq.n	8007230 <osSemaphoreRelease+0x80>
 80071f2:	4b19      	ldr	r3, [pc, #100]	; (8007258 <osSemaphoreRelease+0xa8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d11a      	bne.n	8007230 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80071fe:	f107 0308 	add.w	r3, r7, #8
 8007202:	4619      	mov	r1, r3
 8007204:	69b8      	ldr	r0, [r7, #24]
 8007206:	f000 ff41 	bl	800808c <xQueueGiveFromISR>
 800720a:	4603      	mov	r3, r0
 800720c:	2b01      	cmp	r3, #1
 800720e:	d003      	beq.n	8007218 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007210:	f06f 0302 	mvn.w	r3, #2
 8007214:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007216:	e018      	b.n	800724a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d015      	beq.n	800724a <osSemaphoreRelease+0x9a>
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <osSemaphoreRelease+0xac>)
 8007220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800722e:	e00c      	b.n	800724a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007230:	2300      	movs	r3, #0
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	69b8      	ldr	r0, [r7, #24]
 8007238:	f000 fd82 	bl	8007d40 <xQueueGenericSend>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d004      	beq.n	800724c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007242:	f06f 0302 	mvn.w	r3, #2
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e000      	b.n	800724c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800724a:	bf00      	nop
    }
  }

  return (stat);
 800724c:	69fb      	ldr	r3, [r7, #28]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2000510c 	.word	0x2000510c
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800726c:	f3ef 8305 	mrs	r3, IPSR
 8007270:	617b      	str	r3, [r7, #20]
  return(result);
 8007272:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007278:	f3ef 8310 	mrs	r3, PRIMASK
 800727c:	613b      	str	r3, [r7, #16]
  return(result);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007284:	f3ef 8311 	mrs	r3, BASEPRI
 8007288:	60fb      	str	r3, [r7, #12]
  return(result);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <osSemaphoreDelete+0x40>
 8007290:	4b0d      	ldr	r3, [pc, #52]	; (80072c8 <osSemaphoreDelete+0x68>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d103      	bne.n	80072a0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007298:	f06f 0305 	mvn.w	r3, #5
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e00e      	b.n	80072be <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80072a6:	f06f 0303 	mvn.w	r3, #3
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	e007      	b.n	80072be <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80072ae:	69b8      	ldr	r0, [r7, #24]
 80072b0:	f001 fbba 	bl	8008a28 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80072b8:	69b8      	ldr	r0, [r7, #24]
 80072ba:	f001 fa3d 	bl	8008738 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80072be:	69fb      	ldr	r3, [r7, #28]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	2000510c 	.word	0x2000510c

080072cc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072dc:	f3ef 8305 	mrs	r3, IPSR
 80072e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80072e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d16f      	bne.n	80073c8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ec:	617b      	str	r3, [r7, #20]
  return(result);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072f4:	f3ef 8311 	mrs	r3, BASEPRI
 80072f8:	613b      	str	r3, [r7, #16]
  return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <osMessageQueueNew+0x3c>
 8007300:	4b34      	ldr	r3, [pc, #208]	; (80073d4 <osMessageQueueNew+0x108>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d05f      	beq.n	80073c8 <osMessageQueueNew+0xfc>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d05c      	beq.n	80073c8 <osMessageQueueNew+0xfc>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d059      	beq.n	80073c8 <osMessageQueueNew+0xfc>
    mem = -1;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007318:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d029      	beq.n	8007374 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d012      	beq.n	800734e <osMessageQueueNew+0x82>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b4f      	cmp	r3, #79	; 0x4f
 800732e:	d90e      	bls.n	800734e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <osMessageQueueNew+0x82>
        mem = 1;
 8007348:	2301      	movs	r3, #1
 800734a:	623b      	str	r3, [r7, #32]
 800734c:	e014      	b.n	8007378 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d110      	bne.n	8007378 <osMessageQueueNew+0xac>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10c      	bne.n	8007378 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007362:	2b00      	cmp	r3, #0
 8007364:	d108      	bne.n	8007378 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <osMessageQueueNew+0xac>
          mem = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	623b      	str	r3, [r7, #32]
 8007372:	e001      	b.n	8007378 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d10b      	bne.n	8007396 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2100      	movs	r1, #0
 8007388:	9100      	str	r1, [sp, #0]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fac3 	bl	8007918 <xQueueGenericCreateStatic>
 8007392:	6278      	str	r0, [r7, #36]	; 0x24
 8007394:	e008      	b.n	80073a8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d105      	bne.n	80073a8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800739c:	2200      	movs	r2, #0
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fb3b 	bl	8007a1c <xQueueGenericCreate>
 80073a6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <osMessageQueueNew+0xf0>
        name = attr->name;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	e001      	b.n	80073c0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073c4:	f001 fb06 	bl	80089d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3728      	adds	r7, #40	; 0x28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000510c 	.word	0x2000510c

080073d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f0:	f3ef 8305 	mrs	r3, IPSR
 80073f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80073f6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007400:	61bb      	str	r3, [r7, #24]
  return(result);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	617b      	str	r3, [r7, #20]
  return(result);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d02c      	beq.n	800746e <osMessageQueuePut+0x96>
 8007414:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <osMessageQueuePut+0xe0>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d128      	bne.n	800746e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <osMessageQueuePut+0x56>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <osMessageQueuePut+0x56>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800742e:	f06f 0303 	mvn.w	r3, #3
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007434:	e039      	b.n	80074aa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800743a:	f107 0210 	add.w	r2, r7, #16
 800743e:	2300      	movs	r3, #0
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	6a38      	ldr	r0, [r7, #32]
 8007444:	f000 fd82 	bl	8007f4c <xQueueGenericSendFromISR>
 8007448:	4603      	mov	r3, r0
 800744a:	2b01      	cmp	r3, #1
 800744c:	d003      	beq.n	8007456 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800744e:	f06f 0302 	mvn.w	r3, #2
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007454:	e029      	b.n	80074aa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d026      	beq.n	80074aa <osMessageQueuePut+0xd2>
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <osMessageQueuePut+0xe4>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800746c:	e01d      	b.n	80074aa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <osMessageQueuePut+0xa2>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800747a:	f06f 0303 	mvn.w	r3, #3
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
 8007480:	e014      	b.n	80074ac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007482:	2300      	movs	r3, #0
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	6a38      	ldr	r0, [r7, #32]
 800748a:	f000 fc59 	bl	8007d40 <xQueueGenericSend>
 800748e:	4603      	mov	r3, r0
 8007490:	2b01      	cmp	r3, #1
 8007492:	d00b      	beq.n	80074ac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800749a:	f06f 0301 	mvn.w	r3, #1
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
 80074a0:	e004      	b.n	80074ac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80074a2:	f06f 0302 	mvn.w	r3, #2
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	e000      	b.n	80074ac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	2000510c 	.word	0x2000510c
 80074bc:	e000ed04 	.word	0xe000ed04

080074c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08a      	sub	sp, #40	; 0x28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d6:	f3ef 8305 	mrs	r3, IPSR
 80074da:	61fb      	str	r3, [r7, #28]
  return(result);
 80074dc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10f      	bne.n	8007502 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e2:	f3ef 8310 	mrs	r3, PRIMASK
 80074e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ee:	f3ef 8311 	mrs	r3, BASEPRI
 80074f2:	617b      	str	r3, [r7, #20]
  return(result);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d02c      	beq.n	8007554 <osMessageQueueGet+0x94>
 80074fa:	4b28      	ldr	r3, [pc, #160]	; (800759c <osMessageQueueGet+0xdc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d128      	bne.n	8007554 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <osMessageQueueGet+0x54>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <osMessageQueueGet+0x54>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007514:	f06f 0303 	mvn.w	r3, #3
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800751a:	e038      	b.n	800758e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007520:	f107 0310 	add.w	r3, r7, #16
 8007524:	461a      	mov	r2, r3
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	6a38      	ldr	r0, [r7, #32]
 800752a:	f001 f83f 	bl	80085ac <xQueueReceiveFromISR>
 800752e:	4603      	mov	r3, r0
 8007530:	2b01      	cmp	r3, #1
 8007532:	d003      	beq.n	800753c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007534:	f06f 0302 	mvn.w	r3, #2
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800753a:	e028      	b.n	800758e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d025      	beq.n	800758e <osMessageQueueGet+0xce>
 8007542:	4b17      	ldr	r3, [pc, #92]	; (80075a0 <osMessageQueueGet+0xe0>)
 8007544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007552:	e01c      	b.n	800758e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <osMessageQueueGet+0xa0>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007560:	f06f 0303 	mvn.w	r3, #3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
 8007566:	e013      	b.n	8007590 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	6a38      	ldr	r0, [r7, #32]
 800756e:	f000 fe23 	bl	80081b8 <xQueueReceive>
 8007572:	4603      	mov	r3, r0
 8007574:	2b01      	cmp	r3, #1
 8007576:	d00b      	beq.n	8007590 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800757e:	f06f 0301 	mvn.w	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
 8007584:	e004      	b.n	8007590 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007586:	f06f 0302 	mvn.w	r3, #2
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
 800758c:	e000      	b.n	8007590 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800758e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007592:	4618      	mov	r0, r3
 8007594:	3728      	adds	r7, #40	; 0x28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	2000510c 	.word	0x2000510c
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <osMessageQueueGetCount+0x18>
    count = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e01e      	b.n	80075fa <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075bc:	f3ef 8305 	mrs	r3, IPSR
 80075c0:	617b      	str	r3, [r7, #20]
  return(result);
 80075c2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10f      	bne.n	80075e8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c8:	f3ef 8310 	mrs	r3, PRIMASK
 80075cc:	613b      	str	r3, [r7, #16]
  return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d105      	bne.n	80075e0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d4:	f3ef 8311 	mrs	r3, BASEPRI
 80075d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <osMessageQueueGetCount+0x4e>
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <osMessageQueueGetCount+0x60>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d104      	bne.n	80075f2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	f001 f885 	bl	80086f8 <uxQueueMessagesWaitingFromISR>
 80075ee:	61f8      	str	r0, [r7, #28]
 80075f0:	e003      	b.n	80075fa <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80075f2:	69b8      	ldr	r0, [r7, #24]
 80075f4:	f001 f860 	bl	80086b8 <uxQueueMessagesWaiting>
 80075f8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80075fa:	69fb      	ldr	r3, [r7, #28]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	2000510c 	.word	0x2000510c

08007608 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007614:	f3ef 8305 	mrs	r3, IPSR
 8007618:	617b      	str	r3, [r7, #20]
  return(result);
 800761a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10f      	bne.n	8007640 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007620:	f3ef 8310 	mrs	r3, PRIMASK
 8007624:	613b      	str	r3, [r7, #16]
  return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800762c:	f3ef 8311 	mrs	r3, BASEPRI
 8007630:	60fb      	str	r3, [r7, #12]
  return(result);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <osMessageQueueDelete+0x40>
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <osMessageQueueDelete+0x68>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d103      	bne.n	8007648 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007640:	f06f 0305 	mvn.w	r3, #5
 8007644:	61fb      	str	r3, [r7, #28]
 8007646:	e00e      	b.n	8007666 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d103      	bne.n	8007656 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800764e:	f06f 0303 	mvn.w	r3, #3
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	e007      	b.n	8007666 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007656:	69b8      	ldr	r0, [r7, #24]
 8007658:	f001 f9e6 	bl	8008a28 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007660:	69b8      	ldr	r0, [r7, #24]
 8007662:	f001 f869 	bl	8008738 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007666:	69fb      	ldr	r3, [r7, #28]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3720      	adds	r7, #32
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000510c 	.word	0x2000510c

08007674 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4a06      	ldr	r2, [pc, #24]	; (80076a4 <vApplicationGetIdleTaskMemory+0x30>)
 800768a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2280      	movs	r2, #128	; 0x80
 8007690:	601a      	str	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	20005110 	.word	0x20005110
 80076a4:	200051cc 	.word	0x200051cc

080076a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80076b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4a06      	ldr	r2, [pc, #24]	; (80076d8 <vApplicationGetTimerTaskMemory+0x30>)
 80076be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c6:	601a      	str	r2, [r3, #0]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	200053cc 	.word	0x200053cc
 80076d8:	20005488 	.word	0x20005488

080076dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f103 0208 	add.w	r2, r3, #8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0208 	add.w	r2, r3, #8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0208 	add.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	601a      	str	r2, [r3, #0]
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007794:	d103      	bne.n	800779e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e00c      	b.n	80077b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3308      	adds	r3, #8
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e002      	b.n	80077ac <vListInsert+0x2e>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d2f6      	bcs.n	80077a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6892      	ldr	r2, [r2, #8]
 8007806:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6852      	ldr	r2, [r2, #4]
 8007810:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d103      	bne.n	8007824 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	1e5a      	subs	r2, r3, #1
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10c      	bne.n	8007872 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	b672      	cpsid	i
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	b662      	cpsie	i
 800786c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007872:	f002 fe13 	bl	800a49c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	68f9      	ldr	r1, [r7, #12]
 8007880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007882:	fb01 f303 	mul.w	r3, r1, r3
 8007886:	441a      	add	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a2:	3b01      	subs	r3, #1
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	441a      	add	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	22ff      	movs	r2, #255	; 0xff
 80078be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d114      	bne.n	80078f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01a      	beq.n	8007906 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3310      	adds	r3, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 fdb5 	bl	8009444 <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d012      	beq.n	8007906 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <xQueueGenericReset+0xd0>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	e009      	b.n	8007906 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3310      	adds	r3, #16
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fef0 	bl	80076dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3324      	adds	r3, #36	; 0x24
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff feeb 	bl	80076dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007906:	f002 fdfd 	bl	800a504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800790a:	2301      	movs	r3, #1
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08e      	sub	sp, #56	; 0x38
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	b672      	cpsid	i
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	b662      	cpsie	i
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <xQueueGenericCreateStatic+0x5a>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <xQueueGenericCreateStatic+0x5e>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <xQueueGenericCreateStatic+0x60>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10c      	bne.n	8007996 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	b672      	cpsid	i
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	b662      	cpsie	i
 8007990:	623b      	str	r3, [r7, #32]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <xQueueGenericCreateStatic+0x8a>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <xQueueGenericCreateStatic+0x8e>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e000      	b.n	80079a8 <xQueueGenericCreateStatic+0x90>
 80079a6:	2300      	movs	r3, #0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10c      	bne.n	80079c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	b672      	cpsid	i
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	b662      	cpsie	i
 80079c0:	61fb      	str	r3, [r7, #28]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079c6:	2350      	movs	r3, #80	; 0x50
 80079c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b50      	cmp	r3, #80	; 0x50
 80079ce:	d00c      	beq.n	80079ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	61bb      	str	r3, [r7, #24]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	4613      	mov	r3, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f847 	bl	8007aa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3730      	adds	r7, #48	; 0x30
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	b672      	cpsid	i
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	b662      	cpsie	i
 8007a44:	613b      	str	r3, [r7, #16]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	e004      	b.n	8007a60 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
 8007a5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	3350      	adds	r3, #80	; 0x50
 8007a64:	4618      	mov	r0, r3
 8007a66:	f002 fe45 	bl	800a6f4 <pvPortMalloc>
 8007a6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d011      	beq.n	8007a96 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	3350      	adds	r3, #80	; 0x50
 8007a7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a84:	79fa      	ldrb	r2, [r7, #7]
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f805 	bl	8007aa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a96:	69bb      	ldr	r3, [r7, #24]
	}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ace:	2101      	movs	r1, #1
 8007ad0:	69b8      	ldr	r0, [r7, #24]
 8007ad2:	f7ff feb7 	bl	8007844 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b06:	2300      	movs	r3, #0
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f917 	bl	8007d40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	4603      	mov	r3, r0
 8007b22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6939      	ldr	r1, [r7, #16]
 8007b32:	6978      	ldr	r0, [r7, #20]
 8007b34:	f7ff ff72 	bl	8007a1c <xQueueGenericCreate>
 8007b38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ffd3 	bl	8007ae6 <prvInitialiseMutex>

		return xNewQueue;
 8007b40:	68fb      	ldr	r3, [r7, #12]
	}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b088      	sub	sp, #32
 8007b4e:	af02      	add	r7, sp, #8
 8007b50:	4603      	mov	r3, r0
 8007b52:	6039      	str	r1, [r7, #0]
 8007b54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2200      	movs	r2, #0
 8007b66:	6939      	ldr	r1, [r7, #16]
 8007b68:	6978      	ldr	r0, [r7, #20]
 8007b6a:	f7ff fed5 	bl	8007918 <xQueueGenericCreateStatic>
 8007b6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff ffb8 	bl	8007ae6 <prvInitialiseMutex>

		return xNewQueue;
 8007b76:	68fb      	ldr	r3, [r7, #12]
	}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b80:	b590      	push	{r4, r7, lr}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10c      	bne.n	8007bac <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	b672      	cpsid	i
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	b662      	cpsie	i
 8007ba6:	60fb      	str	r3, [r7, #12]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	689c      	ldr	r4, [r3, #8]
 8007bb0:	f001 fe12 	bl	80097d8 <xTaskGetCurrentTaskHandle>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d111      	bne.n	8007bde <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	1e5a      	subs	r2, r3, #1
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007bcc:	2300      	movs	r3, #0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	6938      	ldr	r0, [r7, #16]
 8007bd4:	f000 f8b4 	bl	8007d40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e001      	b.n	8007be2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007be2:	697b      	ldr	r3, [r7, #20]
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}

08007bec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	b672      	cpsid	i
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	b662      	cpsie	i
 8007c14:	60fb      	str	r3, [r7, #12]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	689c      	ldr	r4, [r3, #8]
 8007c1e:	f001 fddb 	bl	80097d8 <xTaskGetCurrentTaskHandle>
 8007c22:	4603      	mov	r3, r0
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d107      	bne.n	8007c38 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c32:	2301      	movs	r3, #1
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e00c      	b.n	8007c52 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6938      	ldr	r0, [r7, #16]
 8007c3c:	f000 fba2 	bl	8008384 <xQueueSemaphoreTake>
 8007c40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d004      	beq.n	8007c52 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c52:	697b      	ldr	r3, [r7, #20]
	}
 8007c54:	4618      	mov	r0, r3
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd90      	pop	{r4, r7, pc}

08007c5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10c      	bne.n	8007c88 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	b672      	cpsid	i
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	b662      	cpsie	i
 8007c82:	61bb      	str	r3, [r7, #24]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d90c      	bls.n	8007caa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	b672      	cpsid	i
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	b662      	cpsie	i
 8007ca4:	617b      	str	r3, [r7, #20]
}
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007caa:	2302      	movs	r3, #2
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fe2f 	bl	8007918 <xQueueGenericCreateStatic>
 8007cba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
	}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	613b      	str	r3, [r7, #16]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d90c      	bls.n	8007d1e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	b672      	cpsid	i
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	b662      	cpsie	i
 8007d18:	60fb      	str	r3, [r7, #12]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d1e:	2202      	movs	r2, #2
 8007d20:	2100      	movs	r1, #0
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fe7a 	bl	8007a1c <xQueueGenericCreate>
 8007d28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d36:	697b      	ldr	r3, [r7, #20]
	}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08e      	sub	sp, #56	; 0x38
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10c      	bne.n	8007d76 <xQueueGenericSend+0x36>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	b672      	cpsid	i
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	b662      	cpsie	i
 8007d70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <xQueueGenericSend+0x44>
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <xQueueGenericSend+0x48>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <xQueueGenericSend+0x4a>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10c      	bne.n	8007da8 <xQueueGenericSend+0x68>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d103      	bne.n	8007db6 <xQueueGenericSend+0x76>
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <xQueueGenericSend+0x7a>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <xQueueGenericSend+0x7c>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10c      	bne.n	8007dda <xQueueGenericSend+0x9a>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc4:	b672      	cpsid	i
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	b662      	cpsie	i
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dda:	f001 fd0d 	bl	80097f8 <xTaskGetSchedulerState>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <xQueueGenericSend+0xaa>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <xQueueGenericSend+0xae>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <xQueueGenericSend+0xb0>
 8007dee:	2300      	movs	r3, #0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10c      	bne.n	8007e0e <xQueueGenericSend+0xce>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	b672      	cpsid	i
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	b662      	cpsie	i
 8007e08:	61fb      	str	r3, [r7, #28]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e0e:	f002 fb45 	bl	800a49c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <xQueueGenericSend+0xe4>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d129      	bne.n	8007e78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e2a:	f000 fcc2 	bl	80087b2 <prvCopyDataToQueue>
 8007e2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	3324      	adds	r3, #36	; 0x24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fb01 	bl	8009444 <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d013      	beq.n	8007e70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e48:	4b3f      	ldr	r3, [pc, #252]	; (8007f48 <xQueueGenericSend+0x208>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e00a      	b.n	8007e70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <xQueueGenericSend+0x208>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e70:	f002 fb48 	bl	800a504 <vPortExitCritical>
				return pdPASS;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e063      	b.n	8007f40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e7e:	f002 fb41 	bl	800a504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e05c      	b.n	8007f40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fb3d 	bl	8009510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e9a:	f002 fb33 	bl	800a504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9e:	f001 f88b 	bl	8008fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ea2:	f002 fafb 	bl	800a49c <vPortEnterCritical>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb2:	d103      	bne.n	8007ebc <xQueueGenericSend+0x17c>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x192>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ed2:	f002 fb17 	bl	800a504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed6:	1d3a      	adds	r2, r7, #4
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 fb2c 	bl	800953c <xTaskCheckForTimeOut>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d124      	bne.n	8007f34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eec:	f000 fd59 	bl	80089a2 <prvIsQueueFull>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	3310      	adds	r3, #16
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 fa4c 	bl	800939c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f06:	f000 fce4 	bl	80088d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f0a:	f001 f863 	bl	8008fd4 <xTaskResumeAll>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f af7c 	bne.w	8007e0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007f16:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <xQueueGenericSend+0x208>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	e772      	b.n	8007e0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f2a:	f000 fcd2 	bl	80088d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f2e:	f001 f851 	bl	8008fd4 <xTaskResumeAll>
 8007f32:	e76c      	b.n	8007e0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f36:	f000 fccc 	bl	80088d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f3a:	f001 f84b 	bl	8008fd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3738      	adds	r7, #56	; 0x38
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d103      	bne.n	8007f8c <xQueueGenericSendFromISR+0x40>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <xQueueGenericSendFromISR+0x44>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <xQueueGenericSendFromISR+0x46>
 8007f90:	2300      	movs	r3, #0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	b672      	cpsid	i
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	b662      	cpsie	i
 8007faa:	623b      	str	r3, [r7, #32]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d103      	bne.n	8007fbe <xQueueGenericSendFromISR+0x72>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <xQueueGenericSendFromISR+0x76>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <xQueueGenericSendFromISR+0x78>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	b672      	cpsid	i
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	b662      	cpsie	i
 8007fdc:	61fb      	str	r3, [r7, #28]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fe2:	f002 fb43 	bl	800a66c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	b672      	cpsid	i
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	b662      	cpsie	i
 8007ffe:	61ba      	str	r2, [r7, #24]
 8008000:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008002:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800e:	429a      	cmp	r2, r3
 8008010:	d302      	bcc.n	8008018 <xQueueGenericSendFromISR+0xcc>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d12c      	bne.n	8008072 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008028:	f000 fbc3 	bl	80087b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800802c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008034:	d112      	bne.n	800805c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	3324      	adds	r3, #36	; 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f001 f9fe 	bl	8009444 <xTaskRemoveFromEventList>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00e      	beq.n	800806c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	e007      	b.n	800806c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800805c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008060:	3301      	adds	r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	b25a      	sxtb	r2, r3
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800806c:	2301      	movs	r3, #1
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008070:	e001      	b.n	8008076 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008072:	2300      	movs	r3, #0
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008084:	4618      	mov	r0, r3
 8008086:	3738      	adds	r7, #56	; 0x38
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10c      	bne.n	80080ba <xQueueGiveFromISR+0x2e>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	b672      	cpsid	i
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	b662      	cpsie	i
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <xQueueGiveFromISR+0x50>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	61fb      	str	r3, [r7, #28]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <xQueueGiveFromISR+0x60>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <xQueueGiveFromISR+0x64>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <xQueueGiveFromISR+0x66>
 80080f0:	2300      	movs	r3, #0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10c      	bne.n	8008110 <xQueueGiveFromISR+0x84>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	61bb      	str	r3, [r7, #24]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008110:	f002 faac 	bl	800a66c <vPortValidateInterruptPriority>
	__asm volatile
 8008114:	f3ef 8211 	mrs	r2, BASEPRI
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	617a      	str	r2, [r7, #20]
 800812e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008130:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008132:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008140:	429a      	cmp	r2, r3
 8008142:	d22b      	bcs.n	800819c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008156:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815e:	d112      	bne.n	8008186 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d016      	beq.n	8008196 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	3324      	adds	r3, #36	; 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f969 	bl	8009444 <xTaskRemoveFromEventList>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00e      	beq.n	8008196 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2201      	movs	r2, #1
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e007      	b.n	8008196 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800818a:	3301      	adds	r3, #1
 800818c:	b2db      	uxtb	r3, r3
 800818e:	b25a      	sxtb	r2, r3
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008196:	2301      	movs	r3, #1
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
 800819a:	e001      	b.n	80081a0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800819c:	2300      	movs	r3, #0
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f383 8811 	msr	BASEPRI, r3
}
 80081aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3738      	adds	r7, #56	; 0x38
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	; 0x30
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10c      	bne.n	80081ec <xQueueReceive+0x34>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	623b      	str	r3, [r7, #32]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d103      	bne.n	80081fa <xQueueReceive+0x42>
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <xQueueReceive+0x46>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueReceive+0x48>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10c      	bne.n	800821e <xQueueReceive+0x66>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	b672      	cpsid	i
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	b662      	cpsie	i
 8008218:	61fb      	str	r3, [r7, #28]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800821e:	f001 faeb 	bl	80097f8 <xTaskGetSchedulerState>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <xQueueReceive+0x76>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <xQueueReceive+0x7a>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <xQueueReceive+0x7c>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10c      	bne.n	8008252 <xQueueReceive+0x9a>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	b672      	cpsid	i
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	b662      	cpsie	i
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008252:	f002 f923 	bl	800a49c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01f      	beq.n	80082a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008266:	f000 fb0e 	bl	8008886 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00f      	beq.n	800829a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	3310      	adds	r3, #16
 800827e:	4618      	mov	r0, r3
 8008280:	f001 f8e0 	bl	8009444 <xTaskRemoveFromEventList>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800828a:	4b3d      	ldr	r3, [pc, #244]	; (8008380 <xQueueReceive+0x1c8>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800829a:	f002 f933 	bl	800a504 <vPortExitCritical>
				return pdPASS;
 800829e:	2301      	movs	r3, #1
 80082a0:	e069      	b.n	8008376 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082a8:	f002 f92c 	bl	800a504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e062      	b.n	8008376 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f928 	bl	8009510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c4:	f002 f91e 	bl	800a504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c8:	f000 fe76 	bl	8008fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082cc:	f002 f8e6 	bl	800a49c <vPortEnterCritical>
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082dc:	d103      	bne.n	80082e6 <xQueueReceive+0x12e>
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f2:	d103      	bne.n	80082fc <xQueueReceive+0x144>
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082fc:	f002 f902 	bl	800a504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008300:	1d3a      	adds	r2, r7, #4
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f917 	bl	800953c <xTaskCheckForTimeOut>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d123      	bne.n	800835c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008316:	f000 fb2e 	bl	8008976 <prvIsQueueEmpty>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d017      	beq.n	8008350 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f837 	bl	800939c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800832e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008330:	f000 facf 	bl	80088d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008334:	f000 fe4e 	bl	8008fd4 <xTaskResumeAll>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d189      	bne.n	8008252 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800833e:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xQueueReceive+0x1c8>)
 8008340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	e780      	b.n	8008252 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008352:	f000 fabe 	bl	80088d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008356:	f000 fe3d 	bl	8008fd4 <xTaskResumeAll>
 800835a:	e77a      	b.n	8008252 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800835c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835e:	f000 fab8 	bl	80088d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008362:	f000 fe37 	bl	8008fd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008368:	f000 fb05 	bl	8008976 <prvIsQueueEmpty>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	f43f af6f 	beq.w	8008252 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008376:	4618      	mov	r0, r3
 8008378:	3730      	adds	r7, #48	; 0x30
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	; 0x38
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	623b      	str	r3, [r7, #32]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00c      	beq.n	80083dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	b672      	cpsid	i
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	b662      	cpsie	i
 80083d6:	61fb      	str	r3, [r7, #28]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083dc:	f001 fa0c 	bl	80097f8 <xTaskGetSchedulerState>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <xQueueSemaphoreTake+0x68>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueSemaphoreTake+0x6c>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueSemaphoreTake+0x6e>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	b672      	cpsid	i
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	b662      	cpsie	i
 800840a:	61bb      	str	r3, [r7, #24]
}
 800840c:	bf00      	nop
 800840e:	e7fe      	b.n	800840e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008410:	f002 f844 	bl	800a49c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	d024      	beq.n	800846a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008430:	f001 fb60 	bl	8009af4 <pvTaskIncrementMutexHeldCount>
 8008434:	4602      	mov	r2, r0
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00f      	beq.n	8008462 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	3310      	adds	r3, #16
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fffc 	bl	8009444 <xTaskRemoveFromEventList>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008452:	4b55      	ldr	r3, [pc, #340]	; (80085a8 <xQueueSemaphoreTake+0x224>)
 8008454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008462:	f002 f84f 	bl	800a504 <vPortExitCritical>
				return pdPASS;
 8008466:	2301      	movs	r3, #1
 8008468:	e099      	b.n	800859e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d113      	bne.n	8008498 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00c      	beq.n	8008490 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	b672      	cpsid	i
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	b662      	cpsie	i
 800848a:	617b      	str	r3, [r7, #20]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008490:	f002 f838 	bl	800a504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008494:	2300      	movs	r3, #0
 8008496:	e082      	b.n	800859e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	2b00      	cmp	r3, #0
 800849c:	d106      	bne.n	80084ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 f834 	bl	8009510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084ac:	f002 f82a 	bl	800a504 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084b0:	f000 fd82 	bl	8008fb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084b4:	f001 fff2 	bl	800a49c <vPortEnterCritical>
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d103      	bne.n	80084ce <xQueueSemaphoreTake+0x14a>
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084da:	d103      	bne.n	80084e4 <xQueueSemaphoreTake+0x160>
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084e4:	f002 f80e 	bl	800a504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084e8:	463a      	mov	r2, r7
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	4611      	mov	r1, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 f823 	bl	800953c <xTaskCheckForTimeOut>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d132      	bne.n	8008562 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084fe:	f000 fa3a 	bl	8008976 <prvIsQueueEmpty>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d026      	beq.n	8008556 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008510:	f001 ffc4 	bl	800a49c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f001 f98b 	bl	8009834 <xTaskPriorityInherit>
 800851e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008520:	f001 fff0 	bl	800a504 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	3324      	adds	r3, #36	; 0x24
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	4611      	mov	r1, r2
 800852c:	4618      	mov	r0, r3
 800852e:	f000 ff35 	bl	800939c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008534:	f000 f9cd 	bl	80088d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008538:	f000 fd4c 	bl	8008fd4 <xTaskResumeAll>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	f47f af66 	bne.w	8008410 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008544:	4b18      	ldr	r3, [pc, #96]	; (80085a8 <xQueueSemaphoreTake+0x224>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	e75c      	b.n	8008410 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008558:	f000 f9bb 	bl	80088d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800855c:	f000 fd3a 	bl	8008fd4 <xTaskResumeAll>
 8008560:	e756      	b.n	8008410 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008564:	f000 f9b5 	bl	80088d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008568:	f000 fd34 	bl	8008fd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800856c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800856e:	f000 fa02 	bl	8008976 <prvIsQueueEmpty>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	f43f af4b 	beq.w	8008410 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00d      	beq.n	800859c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008580:	f001 ff8c 	bl	800a49c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008586:	f000 f8fc 	bl	8008782 <prvGetDisinheritPriorityAfterTimeout>
 800858a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800858c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fa28 	bl	80099e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008598:	f001 ffb4 	bl	800a504 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800859c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3738      	adds	r7, #56	; 0x38
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08e      	sub	sp, #56	; 0x38
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	623b      	str	r3, [r7, #32]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <xQueueReceiveFromISR+0x3e>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <xQueueReceiveFromISR+0x42>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <xQueueReceiveFromISR+0x44>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10c      	bne.n	800860e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	b672      	cpsid	i
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	b662      	cpsie	i
 8008608:	61fb      	str	r3, [r7, #28]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800860e:	f002 f82d 	bl	800a66c <vPortValidateInterruptPriority>
	__asm volatile
 8008612:	f3ef 8211 	mrs	r2, BASEPRI
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	b672      	cpsid	i
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	b662      	cpsie	i
 800862a:	61ba      	str	r2, [r7, #24]
 800862c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800862e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d02f      	beq.n	800869e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008648:	68b9      	ldr	r1, [r7, #8]
 800864a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864c:	f000 f91b 	bl	8008886 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	1e5a      	subs	r2, r3, #1
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008660:	d112      	bne.n	8008688 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fee8 	bl	8009444 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00e      	beq.n	8008698 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e007      	b.n	8008698 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800868c:	3301      	adds	r3, #1
 800868e:	b2db      	uxtb	r3, r3
 8008690:	b25a      	sxtb	r2, r3
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
 800869c:	e001      	b.n	80086a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800869e:	2300      	movs	r3, #0
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f383 8811 	msr	BASEPRI, r3
}
 80086ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3738      	adds	r7, #56	; 0x38
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10c      	bne.n	80086e0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	b672      	cpsid	i
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	b662      	cpsie	i
 80086da:	60bb      	str	r3, [r7, #8]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80086e0:	f001 fedc 	bl	800a49c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80086ea:	f001 ff0b 	bl	800a504 <vPortExitCritical>

	return uxReturn;
 80086ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10c      	bne.n	8008724 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	b672      	cpsid	i
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	b662      	cpsie	i
 800871e:	60fb      	str	r3, [r7, #12]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800872a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800872c:	4618      	mov	r0, r3
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10c      	bne.n	8008764 <vQueueDelete+0x2c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	b672      	cpsid	i
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	b662      	cpsie	i
 800875e:	60bb      	str	r3, [r7, #8]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f95f 	bl	8008a28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f002 f887 	bl	800a888 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	e001      	b.n	80087a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80087a4:	68fb      	ldr	r3, [r7, #12]
	}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10d      	bne.n	80087ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d14d      	bne.n	8008874 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 f891 	bl	8009904 <xTaskPriorityDisinherit>
 80087e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	609a      	str	r2, [r3, #8]
 80087ea:	e043      	b.n	8008874 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d119      	bne.n	8008826 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6858      	ldr	r0, [r3, #4]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	461a      	mov	r2, r3
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	f00f fa52 	bl	8017ca6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	441a      	add	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	429a      	cmp	r2, r3
 800881a:	d32b      	bcc.n	8008874 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	605a      	str	r2, [r3, #4]
 8008824:	e026      	b.n	8008874 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68d8      	ldr	r0, [r3, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882e:	461a      	mov	r2, r3
 8008830:	68b9      	ldr	r1, [r7, #8]
 8008832:	f00f fa38 	bl	8017ca6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	425b      	negs	r3, r3
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d207      	bcs.n	8008862 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	425b      	negs	r3, r3
 800885c:	441a      	add	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d105      	bne.n	8008874 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	3b01      	subs	r3, #1
 8008872:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800887c:	697b      	ldr	r3, [r7, #20]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b082      	sub	sp, #8
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d018      	beq.n	80088ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a0:	441a      	add	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d303      	bcc.n	80088ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68d9      	ldr	r1, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	461a      	mov	r2, r3
 80088c4:	6838      	ldr	r0, [r7, #0]
 80088c6:	f00f f9ee 	bl	8017ca6 <memcpy>
	}
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088da:	f001 fddf 	bl	800a49c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088e6:	e011      	b.n	800890c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d012      	beq.n	8008916 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3324      	adds	r3, #36	; 0x24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fda5 	bl	8009444 <xTaskRemoveFromEventList>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008900:	f000 fe82 	bl	8009608 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	3b01      	subs	r3, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800890c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dce9      	bgt.n	80088e8 <prvUnlockQueue+0x16>
 8008914:	e000      	b.n	8008918 <prvUnlockQueue+0x46>
					break;
 8008916:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	22ff      	movs	r2, #255	; 0xff
 800891c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008920:	f001 fdf0 	bl	800a504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008924:	f001 fdba 	bl	800a49c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800892e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008930:	e011      	b.n	8008956 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d012      	beq.n	8008960 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3310      	adds	r3, #16
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fd80 	bl	8009444 <xTaskRemoveFromEventList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800894a:	f000 fe5d 	bl	8009608 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	3b01      	subs	r3, #1
 8008952:	b2db      	uxtb	r3, r3
 8008954:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008956:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dce9      	bgt.n	8008932 <prvUnlockQueue+0x60>
 800895e:	e000      	b.n	8008962 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008960:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	22ff      	movs	r2, #255	; 0xff
 8008966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800896a:	f001 fdcb 	bl	800a504 <vPortExitCritical>
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800897e:	f001 fd8d 	bl	800a49c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d102      	bne.n	8008990 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800898a:	2301      	movs	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	e001      	b.n	8008994 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008994:	f001 fdb6 	bl	800a504 <vPortExitCritical>

	return xReturn;
 8008998:	68fb      	ldr	r3, [r7, #12]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089aa:	f001 fd77 	bl	800a49c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d102      	bne.n	80089c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	e001      	b.n	80089c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089c4:	f001 fd9e 	bl	800a504 <vPortExitCritical>

	return xReturn;
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	e014      	b.n	8008a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089e4:	4a0f      	ldr	r2, [pc, #60]	; (8008a24 <vQueueAddToRegistry+0x50>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10b      	bne.n	8008a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089f0:	490c      	ldr	r1, [pc, #48]	; (8008a24 <vQueueAddToRegistry+0x50>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089fa:	4a0a      	ldr	r2, [pc, #40]	; (8008a24 <vQueueAddToRegistry+0x50>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a06:	e006      	b.n	8008a16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b07      	cmp	r3, #7
 8008a12:	d9e7      	bls.n	80089e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	20005888 	.word	0x20005888

08008a28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e016      	b.n	8008a64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a36:	4a10      	ldr	r2, [pc, #64]	; (8008a78 <vQueueUnregisterQueue+0x50>)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d10b      	bne.n	8008a5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <vQueueUnregisterQueue+0x50>)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a50:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <vQueueUnregisterQueue+0x50>)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4413      	add	r3, r2
 8008a58:	2200      	movs	r2, #0
 8008a5a:	605a      	str	r2, [r3, #4]
				break;
 8008a5c:	e006      	b.n	8008a6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3301      	adds	r3, #1
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b07      	cmp	r3, #7
 8008a68:	d9e5      	bls.n	8008a36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a6a:	bf00      	nop
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	20005888 	.word	0x20005888

08008a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a8c:	f001 fd06 	bl	800a49c <vPortEnterCritical>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a9c:	d103      	bne.n	8008aa6 <vQueueWaitForMessageRestricted+0x2a>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aac:	b25b      	sxtb	r3, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab2:	d103      	bne.n	8008abc <vQueueWaitForMessageRestricted+0x40>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008abc:	f001 fd22 	bl	800a504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d106      	bne.n	8008ad6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	3324      	adds	r3, #36	; 0x24
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fc89 	bl	80093e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ad6:	6978      	ldr	r0, [r7, #20]
 8008ad8:	f7ff fefb 	bl	80088d2 <prvUnlockQueue>
	}
 8008adc:	bf00      	nop
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08e      	sub	sp, #56	; 0x38
 8008ae8:	af04      	add	r7, sp, #16
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10c      	bne.n	8008b12 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	b672      	cpsid	i
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	b662      	cpsie	i
 8008b0c:	623b      	str	r3, [r7, #32]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	b672      	cpsid	i
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	b662      	cpsie	i
 8008b2c:	61fb      	str	r3, [r7, #28]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b32:	23bc      	movs	r3, #188	; 0xbc
 8008b34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	2bbc      	cmp	r3, #188	; 0xbc
 8008b3a:	d00c      	beq.n	8008b56 <xTaskCreateStatic+0x72>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	b672      	cpsid	i
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	b662      	cpsie	i
 8008b50:	61bb      	str	r3, [r7, #24]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d01e      	beq.n	8008b9c <xTaskCreateStatic+0xb8>
 8008b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01b      	beq.n	8008b9c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	2202      	movs	r2, #2
 8008b72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b76:	2300      	movs	r3, #0
 8008b78:	9303      	str	r3, [sp, #12]
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	9302      	str	r3, [sp, #8]
 8008b7e:	f107 0314 	add.w	r3, r7, #20
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f850 	bl	8008c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b96:	f000 f8f5 	bl	8008d84 <prvAddNewTaskToReadyList>
 8008b9a:	e001      	b.n	8008ba0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ba0:	697b      	ldr	r3, [r7, #20]
	}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3728      	adds	r7, #40	; 0x28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b08c      	sub	sp, #48	; 0x30
 8008bae:	af04      	add	r7, sp, #16
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	603b      	str	r3, [r7, #0]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fd98 	bl	800a6f4 <pvPortMalloc>
 8008bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bcc:	20bc      	movs	r0, #188	; 0xbc
 8008bce:	f001 fd91 	bl	800a6f4 <pvPortMalloc>
 8008bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30
 8008be0:	e005      	b.n	8008bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008be2:	6978      	ldr	r0, [r7, #20]
 8008be4:	f001 fe50 	bl	800a888 <vPortFree>
 8008be8:	e001      	b.n	8008bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d017      	beq.n	8008c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008bfc:	88fa      	ldrh	r2, [r7, #6]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9303      	str	r3, [sp, #12]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	9302      	str	r3, [sp, #8]
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 f80e 	bl	8008c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c18:	69f8      	ldr	r0, [r7, #28]
 8008c1a:	f000 f8b3 	bl	8008d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e002      	b.n	8008c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3720      	adds	r7, #32
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	21a5      	movs	r1, #165	; 0xa5
 8008c4e:	f00f f852 	bl	8017cf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c5c:	440b      	add	r3, r1
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	f023 0307 	bic.w	r3, r3, #7
 8008c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00c      	beq.n	8008c90 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	b672      	cpsid	i
 8008c7c:	f383 8811 	msr	BASEPRI, r3
 8008c80:	f3bf 8f6f 	isb	sy
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	b662      	cpsie	i
 8008c8a:	617b      	str	r3, [r7, #20]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01f      	beq.n	8008cd6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	e012      	b.n	8008cc2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	7819      	ldrb	r1, [r3, #0]
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3334      	adds	r3, #52	; 0x34
 8008cac:	460a      	mov	r2, r1
 8008cae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	61fb      	str	r3, [r7, #28]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b0f      	cmp	r3, #15
 8008cc6:	d9e9      	bls.n	8008c9c <prvInitialiseNewTask+0x68>
 8008cc8:	e000      	b.n	8008ccc <prvInitialiseNewTask+0x98>
			{
				break;
 8008cca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cd4:	e003      	b.n	8008cde <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce0:	2b37      	cmp	r3, #55	; 0x37
 8008ce2:	d901      	bls.n	8008ce8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ce4:	2337      	movs	r3, #55	; 0x37
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fd0c 	bl	800771c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	3318      	adds	r3, #24
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fe fd07 	bl	800771c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	3354      	adds	r3, #84	; 0x54
 8008d38:	2260      	movs	r2, #96	; 0x60
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f00e ffda 	bl	8017cf6 <memset>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <prvInitialiseNewTask+0x144>)
 8008d46:	659a      	str	r2, [r3, #88]	; 0x58
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	4a0c      	ldr	r2, [pc, #48]	; (8008d7c <prvInitialiseNewTask+0x148>)
 8008d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	4a0b      	ldr	r2, [pc, #44]	; (8008d80 <prvInitialiseNewTask+0x14c>)
 8008d52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	69b8      	ldr	r0, [r7, #24]
 8008d5a:	f001 fa8f 	bl	800a27c <pxPortInitialiseStack>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d70:	bf00      	nop
 8008d72:	3720      	adds	r7, #32
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	0801e360 	.word	0x0801e360
 8008d7c:	0801e380 	.word	0x0801e380
 8008d80:	0801e340 	.word	0x0801e340

08008d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d8c:	f001 fb86 	bl	800a49c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d90:	4b2d      	ldr	r3, [pc, #180]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3301      	adds	r3, #1
 8008d96:	4a2c      	ldr	r2, [pc, #176]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008da2:	4a2a      	ldr	r2, [pc, #168]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008da8:	4b27      	ldr	r3, [pc, #156]	; (8008e48 <prvAddNewTaskToReadyList+0xc4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d110      	bne.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008db0:	f000 fc4e 	bl	8009650 <prvInitialiseTaskLists>
 8008db4:	e00d      	b.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008db6:	4b26      	ldr	r3, [pc, #152]	; (8008e50 <prvAddNewTaskToReadyList+0xcc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d802      	bhi.n	8008dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008dcc:	4a1f      	ldr	r2, [pc, #124]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dd2:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ddc:	4b1d      	ldr	r3, [pc, #116]	; (8008e54 <prvAddNewTaskToReadyList+0xd0>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <prvAddNewTaskToReadyList+0xd4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d903      	bls.n	8008df8 <prvAddNewTaskToReadyList+0x74>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <prvAddNewTaskToReadyList+0xd4>)
 8008df6:	6013      	str	r3, [r2, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <prvAddNewTaskToReadyList+0xd8>)
 8008e06:	441a      	add	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f7fe fc91 	bl	8007736 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e14:	f001 fb76 	bl	800a504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <prvAddNewTaskToReadyList+0xcc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00e      	beq.n	8008e3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <prvAddNewTaskToReadyList+0xc8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d207      	bcs.n	8008e3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <prvAddNewTaskToReadyList+0xdc>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20005d9c 	.word	0x20005d9c
 8008e4c:	200058c8 	.word	0x200058c8
 8008e50:	20005da8 	.word	0x20005da8
 8008e54:	20005db8 	.word	0x20005db8
 8008e58:	20005da4 	.word	0x20005da4
 8008e5c:	200058cc 	.word	0x200058cc
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <vTaskDelay+0x64>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00c      	beq.n	8008e98 <vTaskDelay+0x34>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	b672      	cpsid	i
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	b662      	cpsie	i
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e98:	f000 f88e 	bl	8008fb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fe3c 	bl	8009b1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ea4:	f000 f896 	bl	8008fd4 <xTaskResumeAll>
 8008ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d107      	bne.n	8008ec0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <vTaskDelay+0x68>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20005dc4 	.word	0x20005dc4
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ede:	463a      	mov	r2, r7
 8008ee0:	1d39      	adds	r1, r7, #4
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fbc4 	bl	8007674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	9202      	str	r2, [sp, #8]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	460a      	mov	r2, r1
 8008efe:	4926      	ldr	r1, [pc, #152]	; (8008f98 <vTaskStartScheduler+0xc8>)
 8008f00:	4826      	ldr	r0, [pc, #152]	; (8008f9c <vTaskStartScheduler+0xcc>)
 8008f02:	f7ff fdef 	bl	8008ae4 <xTaskCreateStatic>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4a25      	ldr	r2, [pc, #148]	; (8008fa0 <vTaskStartScheduler+0xd0>)
 8008f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f0c:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <vTaskStartScheduler+0xd0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f14:	2301      	movs	r3, #1
 8008f16:	617b      	str	r3, [r7, #20]
 8008f18:	e001      	b.n	8008f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d102      	bne.n	8008f2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f24:	f000 fe4e 	bl	8009bc4 <xTimerCreateTimerTask>
 8008f28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d11d      	bne.n	8008f6c <vTaskStartScheduler+0x9c>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	b672      	cpsid	i
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	b662      	cpsie	i
 8008f44:	613b      	str	r3, [r7, #16]
}
 8008f46:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f48:	4b16      	ldr	r3, [pc, #88]	; (8008fa4 <vTaskStartScheduler+0xd4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3354      	adds	r3, #84	; 0x54
 8008f4e:	4a16      	ldr	r2, [pc, #88]	; (8008fa8 <vTaskStartScheduler+0xd8>)
 8008f50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <vTaskStartScheduler+0xdc>)
 8008f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <vTaskStartScheduler+0xe0>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f60:	4b14      	ldr	r3, [pc, #80]	; (8008fb4 <vTaskStartScheduler+0xe4>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f66:	f001 fa1b 	bl	800a3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f6a:	e010      	b.n	8008f8e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f72:	d10c      	bne.n	8008f8e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	b672      	cpsid	i
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	b662      	cpsie	i
 8008f88:	60fb      	str	r3, [r7, #12]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <vTaskStartScheduler+0xbc>
}
 8008f8e:	bf00      	nop
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	0801af28 	.word	0x0801af28
 8008f9c:	08009621 	.word	0x08009621
 8008fa0:	20005dc0 	.word	0x20005dc0
 8008fa4:	200058c8 	.word	0x200058c8
 8008fa8:	2000002c 	.word	0x2000002c
 8008fac:	20005dbc 	.word	0x20005dbc
 8008fb0:	20005da8 	.word	0x20005da8
 8008fb4:	20005da0 	.word	0x20005da0

08008fb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <vTaskSuspendAll+0x18>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a03      	ldr	r2, [pc, #12]	; (8008fd0 <vTaskSuspendAll+0x18>)
 8008fc4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008fc6:	bf00      	nop
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20005dc4 	.word	0x20005dc4

08008fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fe2:	4b43      	ldr	r3, [pc, #268]	; (80090f0 <xTaskResumeAll+0x11c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10c      	bne.n	8009004 <xTaskResumeAll+0x30>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	b672      	cpsid	i
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	b662      	cpsie	i
 8008ffe:	603b      	str	r3, [r7, #0]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009004:	f001 fa4a 	bl	800a49c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009008:	4b39      	ldr	r3, [pc, #228]	; (80090f0 <xTaskResumeAll+0x11c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3b01      	subs	r3, #1
 800900e:	4a38      	ldr	r2, [pc, #224]	; (80090f0 <xTaskResumeAll+0x11c>)
 8009010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009012:	4b37      	ldr	r3, [pc, #220]	; (80090f0 <xTaskResumeAll+0x11c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d162      	bne.n	80090e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800901a:	4b36      	ldr	r3, [pc, #216]	; (80090f4 <xTaskResumeAll+0x120>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d05e      	beq.n	80090e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009022:	e02f      	b.n	8009084 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009024:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <xTaskResumeAll+0x124>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3318      	adds	r3, #24
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe fbdd 	bl	80077f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fbd8 	bl	80077f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	4b2d      	ldr	r3, [pc, #180]	; (80090fc <xTaskResumeAll+0x128>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d903      	bls.n	8009054 <xTaskResumeAll+0x80>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <xTaskResumeAll+0x128>)
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4a27      	ldr	r2, [pc, #156]	; (8009100 <xTaskResumeAll+0x12c>)
 8009062:	441a      	add	r2, r3
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3304      	adds	r3, #4
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f7fe fb63 	bl	8007736 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b23      	ldr	r3, [pc, #140]	; (8009104 <xTaskResumeAll+0x130>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	429a      	cmp	r2, r3
 800907c:	d302      	bcc.n	8009084 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800907e:	4b22      	ldr	r3, [pc, #136]	; (8009108 <xTaskResumeAll+0x134>)
 8009080:	2201      	movs	r2, #1
 8009082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009084:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <xTaskResumeAll+0x124>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1cb      	bne.n	8009024 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009092:	f000 fb81 	bl	8009798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009096:	4b1d      	ldr	r3, [pc, #116]	; (800910c <xTaskResumeAll+0x138>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d010      	beq.n	80090c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090a2:	f000 f859 	bl	8009158 <xTaskIncrementTick>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80090ac:	4b16      	ldr	r3, [pc, #88]	; (8009108 <xTaskResumeAll+0x134>)
 80090ae:	2201      	movs	r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f1      	bne.n	80090a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <xTaskResumeAll+0x138>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090c4:	4b10      	ldr	r3, [pc, #64]	; (8009108 <xTaskResumeAll+0x134>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d009      	beq.n	80090e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090d0:	4b0f      	ldr	r3, [pc, #60]	; (8009110 <xTaskResumeAll+0x13c>)
 80090d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090d6:	601a      	str	r2, [r3, #0]
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090e0:	f001 fa10 	bl	800a504 <vPortExitCritical>

	return xAlreadyYielded;
 80090e4:	68bb      	ldr	r3, [r7, #8]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20005dc4 	.word	0x20005dc4
 80090f4:	20005d9c 	.word	0x20005d9c
 80090f8:	20005d5c 	.word	0x20005d5c
 80090fc:	20005da4 	.word	0x20005da4
 8009100:	200058cc 	.word	0x200058cc
 8009104:	200058c8 	.word	0x200058c8
 8009108:	20005db0 	.word	0x20005db0
 800910c:	20005dac 	.word	0x20005dac
 8009110:	e000ed04 	.word	0xe000ed04

08009114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <xTaskGetTickCount+0x1c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009120:	687b      	ldr	r3, [r7, #4]
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20005da0 	.word	0x20005da0

08009134 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800913a:	f001 fa97 	bl	800a66c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <xTaskGetTickCountFromISR+0x20>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009148:	683b      	ldr	r3, [r7, #0]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20005da0 	.word	0x20005da0

08009158 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009162:	4b50      	ldr	r3, [pc, #320]	; (80092a4 <xTaskIncrementTick+0x14c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 808b 	bne.w	8009282 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800916c:	4b4e      	ldr	r3, [pc, #312]	; (80092a8 <xTaskIncrementTick+0x150>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3301      	adds	r3, #1
 8009172:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009174:	4a4c      	ldr	r2, [pc, #304]	; (80092a8 <xTaskIncrementTick+0x150>)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d122      	bne.n	80091c6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009180:	4b4a      	ldr	r3, [pc, #296]	; (80092ac <xTaskIncrementTick+0x154>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00c      	beq.n	80091a4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	b672      	cpsid	i
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	b662      	cpsie	i
 800919e:	603b      	str	r3, [r7, #0]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <xTaskIncrementTick+0x4a>
 80091a4:	4b41      	ldr	r3, [pc, #260]	; (80092ac <xTaskIncrementTick+0x154>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	4b41      	ldr	r3, [pc, #260]	; (80092b0 <xTaskIncrementTick+0x158>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a3f      	ldr	r2, [pc, #252]	; (80092ac <xTaskIncrementTick+0x154>)
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	4a3f      	ldr	r2, [pc, #252]	; (80092b0 <xTaskIncrementTick+0x158>)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4b3e      	ldr	r3, [pc, #248]	; (80092b4 <xTaskIncrementTick+0x15c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a3d      	ldr	r2, [pc, #244]	; (80092b4 <xTaskIncrementTick+0x15c>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	f000 fae9 	bl	8009798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091c6:	4b3c      	ldr	r3, [pc, #240]	; (80092b8 <xTaskIncrementTick+0x160>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d349      	bcc.n	8009264 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d0:	4b36      	ldr	r3, [pc, #216]	; (80092ac <xTaskIncrementTick+0x154>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091da:	4b37      	ldr	r3, [pc, #220]	; (80092b8 <xTaskIncrementTick+0x160>)
 80091dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091e0:	601a      	str	r2, [r3, #0]
					break;
 80091e2:	e03f      	b.n	8009264 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e4:	4b31      	ldr	r3, [pc, #196]	; (80092ac <xTaskIncrementTick+0x154>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d203      	bcs.n	8009204 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091fc:	4a2e      	ldr	r2, [pc, #184]	; (80092b8 <xTaskIncrementTick+0x160>)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009202:	e02f      	b.n	8009264 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe faf1 	bl	80077f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3318      	adds	r3, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fae8 	bl	80077f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	4b25      	ldr	r3, [pc, #148]	; (80092bc <xTaskIncrementTick+0x164>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d903      	bls.n	8009234 <xTaskIncrementTick+0xdc>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4a22      	ldr	r2, [pc, #136]	; (80092bc <xTaskIncrementTick+0x164>)
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <xTaskIncrementTick+0x168>)
 8009242:	441a      	add	r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	3304      	adds	r3, #4
 8009248:	4619      	mov	r1, r3
 800924a:	4610      	mov	r0, r2
 800924c:	f7fe fa73 	bl	8007736 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4b1b      	ldr	r3, [pc, #108]	; (80092c4 <xTaskIncrementTick+0x16c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	429a      	cmp	r2, r3
 800925c:	d3b8      	bcc.n	80091d0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800925e:	2301      	movs	r3, #1
 8009260:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009262:	e7b5      	b.n	80091d0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009264:	4b17      	ldr	r3, [pc, #92]	; (80092c4 <xTaskIncrementTick+0x16c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926a:	4915      	ldr	r1, [pc, #84]	; (80092c0 <xTaskIncrementTick+0x168>)
 800926c:	4613      	mov	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d907      	bls.n	800928c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e004      	b.n	800928c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009282:	4b11      	ldr	r3, [pc, #68]	; (80092c8 <xTaskIncrementTick+0x170>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	4a0f      	ldr	r2, [pc, #60]	; (80092c8 <xTaskIncrementTick+0x170>)
 800928a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <xTaskIncrementTick+0x174>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009294:	2301      	movs	r3, #1
 8009296:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009298:	697b      	ldr	r3, [r7, #20]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20005dc4 	.word	0x20005dc4
 80092a8:	20005da0 	.word	0x20005da0
 80092ac:	20005d54 	.word	0x20005d54
 80092b0:	20005d58 	.word	0x20005d58
 80092b4:	20005db4 	.word	0x20005db4
 80092b8:	20005dbc 	.word	0x20005dbc
 80092bc:	20005da4 	.word	0x20005da4
 80092c0:	200058cc 	.word	0x200058cc
 80092c4:	200058c8 	.word	0x200058c8
 80092c8:	20005dac 	.word	0x20005dac
 80092cc:	20005db0 	.word	0x20005db0

080092d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092d6:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <vTaskSwitchContext+0xb4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092de:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <vTaskSwitchContext+0xb8>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092e4:	e048      	b.n	8009378 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80092e6:	4b28      	ldr	r3, [pc, #160]	; (8009388 <vTaskSwitchContext+0xb8>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ec:	4b27      	ldr	r3, [pc, #156]	; (800938c <vTaskSwitchContext+0xbc>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	e012      	b.n	800931a <vTaskSwitchContext+0x4a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10c      	bne.n	8009314 <vTaskSwitchContext+0x44>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	b672      	cpsid	i
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	b662      	cpsie	i
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <vTaskSwitchContext+0x42>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3b01      	subs	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	491d      	ldr	r1, [pc, #116]	; (8009390 <vTaskSwitchContext+0xc0>)
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	440b      	add	r3, r1
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0e2      	beq.n	80092f4 <vTaskSwitchContext+0x24>
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4a15      	ldr	r2, [pc, #84]	; (8009390 <vTaskSwitchContext+0xc0>)
 800933a:	4413      	add	r3, r2
 800933c:	60bb      	str	r3, [r7, #8]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	605a      	str	r2, [r3, #4]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	3308      	adds	r3, #8
 8009350:	429a      	cmp	r2, r3
 8009352:	d104      	bne.n	800935e <vTaskSwitchContext+0x8e>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	4a0b      	ldr	r2, [pc, #44]	; (8009394 <vTaskSwitchContext+0xc4>)
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <vTaskSwitchContext+0xbc>)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800936e:	4b09      	ldr	r3, [pc, #36]	; (8009394 <vTaskSwitchContext+0xc4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3354      	adds	r3, #84	; 0x54
 8009374:	4a08      	ldr	r2, [pc, #32]	; (8009398 <vTaskSwitchContext+0xc8>)
 8009376:	6013      	str	r3, [r2, #0]
}
 8009378:	bf00      	nop
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20005dc4 	.word	0x20005dc4
 8009388:	20005db0 	.word	0x20005db0
 800938c:	20005da4 	.word	0x20005da4
 8009390:	200058cc 	.word	0x200058cc
 8009394:	200058c8 	.word	0x200058c8
 8009398:	2000002c 	.word	0x2000002c

0800939c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10c      	bne.n	80093c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	b672      	cpsid	i
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	b662      	cpsie	i
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093c6:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <vTaskPlaceOnEventList+0x48>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3318      	adds	r3, #24
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fe f9d5 	bl	800777e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093d4:	2101      	movs	r1, #1
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f000 fba0 	bl	8009b1c <prvAddCurrentTaskToDelayedList>
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	200058c8 	.word	0x200058c8

080093e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10c      	bne.n	8009414 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	b672      	cpsid	i
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	b662      	cpsie	i
 800940e:	617b      	str	r3, [r7, #20]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009414:	4b0a      	ldr	r3, [pc, #40]	; (8009440 <vTaskPlaceOnEventListRestricted+0x58>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3318      	adds	r3, #24
 800941a:	4619      	mov	r1, r3
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7fe f98a 	bl	8007736 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800942c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	68b8      	ldr	r0, [r7, #8]
 8009432:	f000 fb73 	bl	8009b1c <prvAddCurrentTaskToDelayedList>
	}
 8009436:	bf00      	nop
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200058c8 	.word	0x200058c8

08009444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10c      	bne.n	8009474 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	b672      	cpsid	i
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	b662      	cpsie	i
 800946e:	60fb      	str	r3, [r7, #12]
}
 8009470:	bf00      	nop
 8009472:	e7fe      	b.n	8009472 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	3318      	adds	r3, #24
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe f9b9 	bl	80077f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800947e:	4b1e      	ldr	r3, [pc, #120]	; (80094f8 <xTaskRemoveFromEventList+0xb4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d11d      	bne.n	80094c2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	3304      	adds	r3, #4
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe f9b0 	bl	80077f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009494:	4b19      	ldr	r3, [pc, #100]	; (80094fc <xTaskRemoveFromEventList+0xb8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d903      	bls.n	80094a4 <xTaskRemoveFromEventList+0x60>
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	4a16      	ldr	r2, [pc, #88]	; (80094fc <xTaskRemoveFromEventList+0xb8>)
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a8:	4613      	mov	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4a13      	ldr	r2, [pc, #76]	; (8009500 <xTaskRemoveFromEventList+0xbc>)
 80094b2:	441a      	add	r2, r3
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f7fe f93b 	bl	8007736 <vListInsertEnd>
 80094c0:	e005      	b.n	80094ce <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	3318      	adds	r3, #24
 80094c6:	4619      	mov	r1, r3
 80094c8:	480e      	ldr	r0, [pc, #56]	; (8009504 <xTaskRemoveFromEventList+0xc0>)
 80094ca:	f7fe f934 	bl	8007736 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d2:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <xTaskRemoveFromEventList+0xc4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	429a      	cmp	r2, r3
 80094da:	d905      	bls.n	80094e8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094dc:	2301      	movs	r3, #1
 80094de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094e0:	4b0a      	ldr	r3, [pc, #40]	; (800950c <xTaskRemoveFromEventList+0xc8>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	601a      	str	r2, [r3, #0]
 80094e6:	e001      	b.n	80094ec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80094ec:	697b      	ldr	r3, [r7, #20]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20005dc4 	.word	0x20005dc4
 80094fc:	20005da4 	.word	0x20005da4
 8009500:	200058cc 	.word	0x200058cc
 8009504:	20005d5c 	.word	0x20005d5c
 8009508:	200058c8 	.word	0x200058c8
 800950c:	20005db0 	.word	0x20005db0

08009510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009518:	4b06      	ldr	r3, [pc, #24]	; (8009534 <vTaskInternalSetTimeOutState+0x24>)
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009520:	4b05      	ldr	r3, [pc, #20]	; (8009538 <vTaskInternalSetTimeOutState+0x28>)
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	605a      	str	r2, [r3, #4]
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	20005db4 	.word	0x20005db4
 8009538:	20005da0 	.word	0x20005da0

0800953c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10c      	bne.n	8009566 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	b672      	cpsid	i
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	b662      	cpsie	i
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10c      	bne.n	8009586 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	b672      	cpsid	i
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	b662      	cpsie	i
 8009580:	60fb      	str	r3, [r7, #12]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009586:	f000 ff89 	bl	800a49c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <xTaskCheckForTimeOut+0xc4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a2:	d102      	bne.n	80095aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	61fb      	str	r3, [r7, #28]
 80095a8:	e023      	b.n	80095f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b15      	ldr	r3, [pc, #84]	; (8009604 <xTaskCheckForTimeOut+0xc8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d007      	beq.n	80095c6 <xTaskCheckForTimeOut+0x8a>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d302      	bcc.n	80095c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095c0:	2301      	movs	r3, #1
 80095c2:	61fb      	str	r3, [r7, #28]
 80095c4:	e015      	b.n	80095f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d20b      	bcs.n	80095e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	1ad2      	subs	r2, r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ff97 	bl	8009510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
 80095e6:	e004      	b.n	80095f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095f2:	f000 ff87 	bl	800a504 <vPortExitCritical>

	return xReturn;
 80095f6:	69fb      	ldr	r3, [r7, #28]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3720      	adds	r7, #32
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20005da0 	.word	0x20005da0
 8009604:	20005db4 	.word	0x20005db4

08009608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009608:	b480      	push	{r7}
 800960a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <vTaskMissedYield+0x14>)
 800960e:	2201      	movs	r2, #1
 8009610:	601a      	str	r2, [r3, #0]
}
 8009612:	bf00      	nop
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	20005db0 	.word	0x20005db0

08009620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009628:	f000 f852 	bl	80096d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <prvIdleTask+0x28>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d9f9      	bls.n	8009628 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <prvIdleTask+0x2c>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009644:	e7f0      	b.n	8009628 <prvIdleTask+0x8>
 8009646:	bf00      	nop
 8009648:	200058cc 	.word	0x200058cc
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009656:	2300      	movs	r3, #0
 8009658:	607b      	str	r3, [r7, #4]
 800965a:	e00c      	b.n	8009676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	4613      	mov	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4a12      	ldr	r2, [pc, #72]	; (80096b0 <prvInitialiseTaskLists+0x60>)
 8009668:	4413      	add	r3, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe f836 	bl	80076dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3301      	adds	r3, #1
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b37      	cmp	r3, #55	; 0x37
 800967a:	d9ef      	bls.n	800965c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800967c:	480d      	ldr	r0, [pc, #52]	; (80096b4 <prvInitialiseTaskLists+0x64>)
 800967e:	f7fe f82d 	bl	80076dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009682:	480d      	ldr	r0, [pc, #52]	; (80096b8 <prvInitialiseTaskLists+0x68>)
 8009684:	f7fe f82a 	bl	80076dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009688:	480c      	ldr	r0, [pc, #48]	; (80096bc <prvInitialiseTaskLists+0x6c>)
 800968a:	f7fe f827 	bl	80076dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800968e:	480c      	ldr	r0, [pc, #48]	; (80096c0 <prvInitialiseTaskLists+0x70>)
 8009690:	f7fe f824 	bl	80076dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009694:	480b      	ldr	r0, [pc, #44]	; (80096c4 <prvInitialiseTaskLists+0x74>)
 8009696:	f7fe f821 	bl	80076dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800969a:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <prvInitialiseTaskLists+0x78>)
 800969c:	4a05      	ldr	r2, [pc, #20]	; (80096b4 <prvInitialiseTaskLists+0x64>)
 800969e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096a0:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <prvInitialiseTaskLists+0x7c>)
 80096a2:	4a05      	ldr	r2, [pc, #20]	; (80096b8 <prvInitialiseTaskLists+0x68>)
 80096a4:	601a      	str	r2, [r3, #0]
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	200058cc 	.word	0x200058cc
 80096b4:	20005d2c 	.word	0x20005d2c
 80096b8:	20005d40 	.word	0x20005d40
 80096bc:	20005d5c 	.word	0x20005d5c
 80096c0:	20005d70 	.word	0x20005d70
 80096c4:	20005d88 	.word	0x20005d88
 80096c8:	20005d54 	.word	0x20005d54
 80096cc:	20005d58 	.word	0x20005d58

080096d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096d6:	e019      	b.n	800970c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096d8:	f000 fee0 	bl	800a49c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096dc:	4b10      	ldr	r3, [pc, #64]	; (8009720 <prvCheckTasksWaitingTermination+0x50>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3304      	adds	r3, #4
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe f881 	bl	80077f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096ee:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <prvCheckTasksWaitingTermination+0x54>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	4a0b      	ldr	r2, [pc, #44]	; (8009724 <prvCheckTasksWaitingTermination+0x54>)
 80096f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096f8:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <prvCheckTasksWaitingTermination+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	4a0a      	ldr	r2, [pc, #40]	; (8009728 <prvCheckTasksWaitingTermination+0x58>)
 8009700:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009702:	f000 feff 	bl	800a504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f810 	bl	800972c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <prvCheckTasksWaitingTermination+0x58>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e1      	bne.n	80096d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20005d70 	.word	0x20005d70
 8009724:	20005d9c 	.word	0x20005d9c
 8009728:	20005d84 	.word	0x20005d84

0800972c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3354      	adds	r3, #84	; 0x54
 8009738:	4618      	mov	r0, r3
 800973a:	f00e fbdd 	bl	8017ef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009744:	2b00      	cmp	r3, #0
 8009746:	d108      	bne.n	800975a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	4618      	mov	r0, r3
 800974e:	f001 f89b 	bl	800a888 <vPortFree>
				vPortFree( pxTCB );
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 f898 	bl	800a888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009758:	e01a      	b.n	8009790 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009760:	2b01      	cmp	r3, #1
 8009762:	d103      	bne.n	800976c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 f88f 	bl	800a888 <vPortFree>
	}
 800976a:	e011      	b.n	8009790 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009772:	2b02      	cmp	r3, #2
 8009774:	d00c      	beq.n	8009790 <prvDeleteTCB+0x64>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	b672      	cpsid	i
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	b662      	cpsie	i
 800978a:	60fb      	str	r3, [r7, #12]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <prvDeleteTCB+0x62>
	}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800979e:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <prvResetNextTaskUnblockTime+0x38>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d104      	bne.n	80097b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097a8:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <prvResetNextTaskUnblockTime+0x3c>)
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097b0:	e008      	b.n	80097c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b2:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <prvResetNextTaskUnblockTime+0x38>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <prvResetNextTaskUnblockTime+0x3c>)
 80097c2:	6013      	str	r3, [r2, #0]
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20005d54 	.word	0x20005d54
 80097d4:	20005dbc 	.word	0x20005dbc

080097d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80097de:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <xTaskGetCurrentTaskHandle+0x1c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80097e4:	687b      	ldr	r3, [r7, #4]
	}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	200058c8 	.word	0x200058c8

080097f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097fe:	4b0b      	ldr	r3, [pc, #44]	; (800982c <xTaskGetSchedulerState+0x34>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009806:	2301      	movs	r3, #1
 8009808:	607b      	str	r3, [r7, #4]
 800980a:	e008      	b.n	800981e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <xTaskGetSchedulerState+0x38>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d102      	bne.n	800981a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009814:	2302      	movs	r3, #2
 8009816:	607b      	str	r3, [r7, #4]
 8009818:	e001      	b.n	800981e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800981e:	687b      	ldr	r3, [r7, #4]
	}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20005da8 	.word	0x20005da8
 8009830:	20005dc4 	.word	0x20005dc4

08009834 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009840:	2300      	movs	r3, #0
 8009842:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d051      	beq.n	80098ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4b2a      	ldr	r3, [pc, #168]	; (80098f8 <xTaskPriorityInherit+0xc4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d241      	bcs.n	80098dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	db06      	blt.n	800986e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <xTaskPriorityInherit+0xc4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6959      	ldr	r1, [r3, #20]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <xTaskPriorityInherit+0xc8>)
 8009880:	4413      	add	r3, r2
 8009882:	4299      	cmp	r1, r3
 8009884:	d122      	bne.n	80098cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	3304      	adds	r3, #4
 800988a:	4618      	mov	r0, r3
 800988c:	f7fd ffb0 	bl	80077f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009890:	4b19      	ldr	r3, [pc, #100]	; (80098f8 <xTaskPriorityInherit+0xc4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	4b18      	ldr	r3, [pc, #96]	; (8009900 <xTaskPriorityInherit+0xcc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d903      	bls.n	80098ae <xTaskPriorityInherit+0x7a>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098aa:	4a15      	ldr	r2, [pc, #84]	; (8009900 <xTaskPriorityInherit+0xcc>)
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4a10      	ldr	r2, [pc, #64]	; (80098fc <xTaskPriorityInherit+0xc8>)
 80098bc:	441a      	add	r2, r3
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7fd ff36 	bl	8007736 <vListInsertEnd>
 80098ca:	e004      	b.n	80098d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <xTaskPriorityInherit+0xc4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80098d6:	2301      	movs	r3, #1
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	e008      	b.n	80098ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <xTaskPriorityInherit+0xc4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d201      	bcs.n	80098ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80098ea:	2301      	movs	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098ee:	68fb      	ldr	r3, [r7, #12]
	}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200058c8 	.word	0x200058c8
 80098fc:	200058cc 	.word	0x200058cc
 8009900:	20005da4 	.word	0x20005da4

08009904 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009910:	2300      	movs	r3, #0
 8009912:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d05a      	beq.n	80099d0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800991a:	4b30      	ldr	r3, [pc, #192]	; (80099dc <xTaskPriorityDisinherit+0xd8>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	429a      	cmp	r2, r3
 8009922:	d00c      	beq.n	800993e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	b672      	cpsid	i
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	b662      	cpsie	i
 8009938:	60fb      	str	r3, [r7, #12]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10c      	bne.n	8009960 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	b672      	cpsid	i
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	b662      	cpsie	i
 800995a:	60bb      	str	r3, [r7, #8]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009964:	1e5a      	subs	r2, r3, #1
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009972:	429a      	cmp	r2, r3
 8009974:	d02c      	beq.n	80099d0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997a:	2b00      	cmp	r3, #0
 800997c:	d128      	bne.n	80099d0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3304      	adds	r3, #4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fd ff34 	bl	80077f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <xTaskPriorityDisinherit+0xdc>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d903      	bls.n	80099b0 <xTaskPriorityDisinherit+0xac>
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4a0c      	ldr	r2, [pc, #48]	; (80099e0 <xTaskPriorityDisinherit+0xdc>)
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <xTaskPriorityDisinherit+0xe0>)
 80099be:	441a      	add	r2, r3
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f7fd feb5 	bl	8007736 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099d0:	697b      	ldr	r3, [r7, #20]
	}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200058c8 	.word	0x200058c8
 80099e0:	20005da4 	.word	0x20005da4
 80099e4:	200058cc 	.word	0x200058cc

080099e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d06e      	beq.n	8009ade <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10c      	bne.n	8009a22 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	b672      	cpsid	i
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	b662      	cpsie	i
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d902      	bls.n	8009a32 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	61fb      	str	r3, [r7, #28]
 8009a30:	e002      	b.n	8009a38 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d04d      	beq.n	8009ade <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d148      	bne.n	8009ade <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009a4c:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d10c      	bne.n	8009a70 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	b672      	cpsid	i
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	b662      	cpsie	i
 8009a6a:	60bb      	str	r3, [r7, #8]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	db04      	blt.n	8009a8e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	6959      	ldr	r1, [r3, #20]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4a13      	ldr	r2, [pc, #76]	; (8009aec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a9e:	4413      	add	r3, r2
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d11c      	bne.n	8009ade <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fd fea1 	bl	80077f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d903      	bls.n	8009ac2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	4a0c      	ldr	r2, [pc, #48]	; (8009af0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4a07      	ldr	r2, [pc, #28]	; (8009aec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009ad0:	441a      	add	r2, r3
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7fd fe2c 	bl	8007736 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ade:	bf00      	nop
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200058c8 	.word	0x200058c8
 8009aec:	200058cc 	.word	0x200058cc
 8009af0:	20005da4 	.word	0x20005da4

08009af4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009af8:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b00:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b06:	3201      	adds	r2, #1
 8009b08:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009b0a:	4b03      	ldr	r3, [pc, #12]	; (8009b18 <pvTaskIncrementMutexHeldCount+0x24>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
	}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	200058c8 	.word	0x200058c8

08009b1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b26:	4b21      	ldr	r3, [pc, #132]	; (8009bac <prvAddCurrentTaskToDelayedList+0x90>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b2c:	4b20      	ldr	r3, [pc, #128]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fd fe5c 	bl	80077f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b3e:	d10a      	bne.n	8009b56 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d007      	beq.n	8009b56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b46:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4819      	ldr	r0, [pc, #100]	; (8009bb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b50:	f7fd fdf1 	bl	8007736 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b54:	e026      	b.n	8009ba4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b5e:	4b14      	ldr	r3, [pc, #80]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d209      	bcs.n	8009b82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f7fd fdff 	bl	800777e <vListInsert>
}
 8009b80:	e010      	b.n	8009ba4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b82:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fd fdf5 	bl	800777e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d202      	bcs.n	8009ba4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b9e:	4a08      	ldr	r2, [pc, #32]	; (8009bc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6013      	str	r3, [r2, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20005da0 	.word	0x20005da0
 8009bb0:	200058c8 	.word	0x200058c8
 8009bb4:	20005d88 	.word	0x20005d88
 8009bb8:	20005d58 	.word	0x20005d58
 8009bbc:	20005d54 	.word	0x20005d54
 8009bc0:	20005dbc 	.word	0x20005dbc

08009bc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bce:	f000 fb15 	bl	800a1fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bd2:	4b1d      	ldr	r3, [pc, #116]	; (8009c48 <xTimerCreateTimerTask+0x84>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d021      	beq.n	8009c1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009be2:	1d3a      	adds	r2, r7, #4
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fd fd5b 	bl	80076a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	9202      	str	r2, [sp, #8]
 8009bfa:	9301      	str	r3, [sp, #4]
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	2300      	movs	r3, #0
 8009c02:	460a      	mov	r2, r1
 8009c04:	4911      	ldr	r1, [pc, #68]	; (8009c4c <xTimerCreateTimerTask+0x88>)
 8009c06:	4812      	ldr	r0, [pc, #72]	; (8009c50 <xTimerCreateTimerTask+0x8c>)
 8009c08:	f7fe ff6c 	bl	8008ae4 <xTaskCreateStatic>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	4a11      	ldr	r2, [pc, #68]	; (8009c54 <xTimerCreateTimerTask+0x90>)
 8009c10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c12:	4b10      	ldr	r3, [pc, #64]	; (8009c54 <xTimerCreateTimerTask+0x90>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10c      	bne.n	8009c3e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	b672      	cpsid	i
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	b662      	cpsie	i
 8009c38:	613b      	str	r3, [r7, #16]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009c3e:	697b      	ldr	r3, [r7, #20]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20005df8 	.word	0x20005df8
 8009c4c:	0801af30 	.word	0x0801af30
 8009c50:	08009d95 	.word	0x08009d95
 8009c54:	20005dfc 	.word	0x20005dfc

08009c58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10c      	bne.n	8009c8a <xTimerGenericCommand+0x32>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	b672      	cpsid	i
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	b662      	cpsie	i
 8009c84:	623b      	str	r3, [r7, #32]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c8a:	4b1a      	ldr	r3, [pc, #104]	; (8009cf4 <xTimerGenericCommand+0x9c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d02a      	beq.n	8009ce8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b05      	cmp	r3, #5
 8009ca2:	dc18      	bgt.n	8009cd6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ca4:	f7ff fda8 	bl	80097f8 <xTaskGetSchedulerState>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d109      	bne.n	8009cc2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cae:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <xTimerGenericCommand+0x9c>)
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f107 0110 	add.w	r1, r7, #16
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cba:	f7fe f841 	bl	8007d40 <xQueueGenericSend>
 8009cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8009cc0:	e012      	b.n	8009ce8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cc2:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <xTimerGenericCommand+0x9c>)
 8009cc4:	6818      	ldr	r0, [r3, #0]
 8009cc6:	f107 0110 	add.w	r1, r7, #16
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f7fe f837 	bl	8007d40 <xQueueGenericSend>
 8009cd2:	6278      	str	r0, [r7, #36]	; 0x24
 8009cd4:	e008      	b.n	8009ce8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cd6:	4b07      	ldr	r3, [pc, #28]	; (8009cf4 <xTimerGenericCommand+0x9c>)
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f107 0110 	add.w	r1, r7, #16
 8009cde:	2300      	movs	r3, #0
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	f7fe f933 	bl	8007f4c <xQueueGenericSendFromISR>
 8009ce6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3728      	adds	r7, #40	; 0x28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20005df8 	.word	0x20005df8

08009cf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d02:	4b23      	ldr	r3, [pc, #140]	; (8009d90 <prvProcessExpiredTimer+0x98>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd fd6d 	bl	80077f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d024      	beq.n	8009d6e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	18d1      	adds	r1, r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	6978      	ldr	r0, [r7, #20]
 8009d32:	f000 f8d3 	bl	8009edc <prvInsertTimerInActiveList>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d021      	beq.n	8009d80 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	2300      	movs	r3, #0
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	2100      	movs	r1, #0
 8009d46:	6978      	ldr	r0, [r7, #20]
 8009d48:	f7ff ff86 	bl	8009c58 <xTimerGenericCommand>
 8009d4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d115      	bne.n	8009d80 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	b672      	cpsid	i
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	b662      	cpsie	i
 8009d68:	60fb      	str	r3, [r7, #12]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d74:	f023 0301 	bic.w	r3, r3, #1
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	6978      	ldr	r0, [r7, #20]
 8009d86:	4798      	blx	r3
}
 8009d88:	bf00      	nop
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20005df0 	.word	0x20005df0

08009d94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d9c:	f107 0308 	add.w	r3, r7, #8
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f857 	bl	8009e54 <prvGetNextExpireTime>
 8009da6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	4619      	mov	r1, r3
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f803 	bl	8009db8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009db2:	f000 f8d5 	bl	8009f60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009db6:	e7f1      	b.n	8009d9c <prvTimerTask+0x8>

08009db8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dc2:	f7ff f8f9 	bl	8008fb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dc6:	f107 0308 	add.w	r3, r7, #8
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f866 	bl	8009e9c <prvSampleTimeNow>
 8009dd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d130      	bne.n	8009e3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <prvProcessTimerOrBlockTask+0x3c>
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d806      	bhi.n	8009df4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009de6:	f7ff f8f5 	bl	8008fd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff83 	bl	8009cf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009df2:	e024      	b.n	8009e3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009dfa:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <prvProcessTimerOrBlockTask+0x90>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <prvProcessTimerOrBlockTask+0x50>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <prvProcessTimerOrBlockTask+0x52>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e0c:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <prvProcessTimerOrBlockTask+0x94>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f7fe fe2f 	bl	8008a7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e1e:	f7ff f8d9 	bl	8008fd4 <xTaskResumeAll>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e28:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <prvProcessTimerOrBlockTask+0x98>)
 8009e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	f3bf 8f6f 	isb	sy
}
 8009e38:	e001      	b.n	8009e3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e3a:	f7ff f8cb 	bl	8008fd4 <xTaskResumeAll>
}
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20005df4 	.word	0x20005df4
 8009e4c:	20005df8 	.word	0x20005df8
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e5c:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <prvGetNextExpireTime+0x44>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <prvGetNextExpireTime+0x16>
 8009e66:	2201      	movs	r2, #1
 8009e68:	e000      	b.n	8009e6c <prvGetNextExpireTime+0x18>
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d105      	bne.n	8009e84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <prvGetNextExpireTime+0x44>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e001      	b.n	8009e88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e88:	68fb      	ldr	r3, [r7, #12]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	20005df0 	.word	0x20005df0

08009e9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ea4:	f7ff f936 	bl	8009114 <xTaskGetTickCount>
 8009ea8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009eaa:	4b0b      	ldr	r3, [pc, #44]	; (8009ed8 <prvSampleTimeNow+0x3c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d205      	bcs.n	8009ec0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009eb4:	f000 f93c 	bl	800a130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ec6:	4a04      	ldr	r2, [pc, #16]	; (8009ed8 <prvSampleTimeNow+0x3c>)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20005e00 	.word	0x20005e00

08009edc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d812      	bhi.n	8009f28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	1ad2      	subs	r2, r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d302      	bcc.n	8009f16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	e01b      	b.n	8009f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f16:	4b10      	ldr	r3, [pc, #64]	; (8009f58 <prvInsertTimerInActiveList+0x7c>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4610      	mov	r0, r2
 8009f22:	f7fd fc2c 	bl	800777e <vListInsert>
 8009f26:	e012      	b.n	8009f4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d206      	bcs.n	8009f3e <prvInsertTimerInActiveList+0x62>
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d302      	bcc.n	8009f3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e007      	b.n	8009f4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f3e:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <prvInsertTimerInActiveList+0x80>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3304      	adds	r3, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f7fd fc18 	bl	800777e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f4e:	697b      	ldr	r3, [r7, #20]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20005df4 	.word	0x20005df4
 8009f5c:	20005df0 	.word	0x20005df0

08009f60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08e      	sub	sp, #56	; 0x38
 8009f64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f66:	e0d0      	b.n	800a10a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	da1a      	bge.n	8009fa4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f6e:	1d3b      	adds	r3, r7, #4
 8009f70:	3304      	adds	r3, #4
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10c      	bne.n	8009f94 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	b672      	cpsid	i
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	b662      	cpsie	i
 8009f8e:	61fb      	str	r3, [r7, #28]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9a:	6850      	ldr	r0, [r2, #4]
 8009f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9e:	6892      	ldr	r2, [r2, #8]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f2c0 80ae 	blt.w	800a108 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d004      	beq.n	8009fc2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fd fc17 	bl	80077f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff ff69 	bl	8009e9c <prvSampleTimeNow>
 8009fca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b09      	cmp	r3, #9
 8009fd0:	f200 809b 	bhi.w	800a10a <prvProcessReceivedCommands+0x1aa>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <prvProcessReceivedCommands+0x7c>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	0800a07d 	.word	0x0800a07d
 8009fec:	0800a091 	.word	0x0800a091
 8009ff0:	0800a0df 	.word	0x0800a0df
 8009ff4:	0800a005 	.word	0x0800a005
 8009ff8:	0800a005 	.word	0x0800a005
 8009ffc:	0800a07d 	.word	0x0800a07d
 800a000:	0800a091 	.word	0x0800a091
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a00a:	f043 0301 	orr.w	r3, r3, #1
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	18d1      	adds	r1, r2, r3
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a024:	f7ff ff5a 	bl	8009edc <prvInsertTimerInActiveList>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d06d      	beq.n	800a10a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a034:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d062      	beq.n	800a10a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	441a      	add	r2, r3
 800a04c:	2300      	movs	r3, #0
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	2300      	movs	r3, #0
 800a052:	2100      	movs	r1, #0
 800a054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a056:	f7ff fdff 	bl	8009c58 <xTimerGenericCommand>
 800a05a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d153      	bne.n	800a10a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	b672      	cpsid	i
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	b662      	cpsie	i
 800a076:	61bb      	str	r3, [r7, #24]
}
 800a078:	bf00      	nop
 800a07a:	e7fe      	b.n	800a07a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a082:	f023 0301 	bic.w	r3, r3, #1
 800a086:	b2da      	uxtb	r2, r3
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a08e:	e03c      	b.n	800a10a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10c      	bne.n	800a0ca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	b672      	cpsid	i
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	b662      	cpsie	i
 800a0c4:	617b      	str	r3, [r7, #20]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	699a      	ldr	r2, [r3, #24]
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	18d1      	adds	r1, r2, r3
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d8:	f7ff ff00 	bl	8009edc <prvInsertTimerInActiveList>
					break;
 800a0dc:	e015      	b.n	800a10a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0e4:	f003 0302 	and.w	r3, r3, #2
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ee:	f000 fbcb 	bl	800a888 <vPortFree>
 800a0f2:	e00a      	b.n	800a10a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0fa:	f023 0301 	bic.w	r3, r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a106:	e000      	b.n	800a10a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a108:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a10a:	4b08      	ldr	r3, [pc, #32]	; (800a12c <prvProcessReceivedCommands+0x1cc>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	1d39      	adds	r1, r7, #4
 800a110:	2200      	movs	r2, #0
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe f850 	bl	80081b8 <xQueueReceive>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f47f af24 	bne.w	8009f68 <prvProcessReceivedCommands+0x8>
	}
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	3730      	adds	r7, #48	; 0x30
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20005df8 	.word	0x20005df8

0800a130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a136:	e04a      	b.n	800a1ce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a138:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a142:	4b2c      	ldr	r3, [pc, #176]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3304      	adds	r3, #4
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd fb4d 	bl	80077f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d030      	beq.n	800a1ce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4413      	add	r3, r2
 800a174:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d90e      	bls.n	800a19c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fd faf2 	bl	800777e <vListInsert>
 800a19a:	e018      	b.n	800a1ce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a19c:	2300      	movs	r3, #0
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff fd56 	bl	8009c58 <xTimerGenericCommand>
 800a1ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10c      	bne.n	800a1ce <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	b672      	cpsid	i
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	b662      	cpsie	i
 800a1c8:	603b      	str	r3, [r7, #0]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1af      	bne.n	800a138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1d8:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1de:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <prvSwitchTimerLists+0xc8>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <prvSwitchTimerLists+0xc4>)
 800a1e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1e6:	4a04      	ldr	r2, [pc, #16]	; (800a1f8 <prvSwitchTimerLists+0xc8>)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	6013      	str	r3, [r2, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20005df0 	.word	0x20005df0
 800a1f8:	20005df4 	.word	0x20005df4

0800a1fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a202:	f000 f94b 	bl	800a49c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <prvCheckForValidListAndQueue+0x60>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d120      	bne.n	800a250 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a20e:	4814      	ldr	r0, [pc, #80]	; (800a260 <prvCheckForValidListAndQueue+0x64>)
 800a210:	f7fd fa64 	bl	80076dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a214:	4813      	ldr	r0, [pc, #76]	; (800a264 <prvCheckForValidListAndQueue+0x68>)
 800a216:	f7fd fa61 	bl	80076dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a21a:	4b13      	ldr	r3, [pc, #76]	; (800a268 <prvCheckForValidListAndQueue+0x6c>)
 800a21c:	4a10      	ldr	r2, [pc, #64]	; (800a260 <prvCheckForValidListAndQueue+0x64>)
 800a21e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a220:	4b12      	ldr	r3, [pc, #72]	; (800a26c <prvCheckForValidListAndQueue+0x70>)
 800a222:	4a10      	ldr	r2, [pc, #64]	; (800a264 <prvCheckForValidListAndQueue+0x68>)
 800a224:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a226:	2300      	movs	r3, #0
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	4b11      	ldr	r3, [pc, #68]	; (800a270 <prvCheckForValidListAndQueue+0x74>)
 800a22c:	4a11      	ldr	r2, [pc, #68]	; (800a274 <prvCheckForValidListAndQueue+0x78>)
 800a22e:	2110      	movs	r1, #16
 800a230:	200a      	movs	r0, #10
 800a232:	f7fd fb71 	bl	8007918 <xQueueGenericCreateStatic>
 800a236:	4603      	mov	r3, r0
 800a238:	4a08      	ldr	r2, [pc, #32]	; (800a25c <prvCheckForValidListAndQueue+0x60>)
 800a23a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a23c:	4b07      	ldr	r3, [pc, #28]	; (800a25c <prvCheckForValidListAndQueue+0x60>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a244:	4b05      	ldr	r3, [pc, #20]	; (800a25c <prvCheckForValidListAndQueue+0x60>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	490b      	ldr	r1, [pc, #44]	; (800a278 <prvCheckForValidListAndQueue+0x7c>)
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fbc2 	bl	80089d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a250:	f000 f958 	bl	800a504 <vPortExitCritical>
}
 800a254:	bf00      	nop
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	20005df8 	.word	0x20005df8
 800a260:	20005dc8 	.word	0x20005dc8
 800a264:	20005ddc 	.word	0x20005ddc
 800a268:	20005df0 	.word	0x20005df0
 800a26c:	20005df4 	.word	0x20005df4
 800a270:	20005ea4 	.word	0x20005ea4
 800a274:	20005e04 	.word	0x20005e04
 800a278:	0801af38 	.word	0x0801af38

0800a27c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3b04      	subs	r3, #4
 800a28c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3b04      	subs	r3, #4
 800a29a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f023 0201 	bic.w	r2, r3, #1
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3b04      	subs	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2ac:	4a0c      	ldr	r2, [pc, #48]	; (800a2e0 <pxPortInitialiseStack+0x64>)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3b14      	subs	r3, #20
 800a2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f06f 0202 	mvn.w	r2, #2
 800a2ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3b20      	subs	r3, #32
 800a2d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	0800a2e5 	.word	0x0800a2e5

0800a2e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2ee:	4b14      	ldr	r3, [pc, #80]	; (800a340 <prvTaskExitError+0x5c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2f6:	d00c      	beq.n	800a312 <prvTaskExitError+0x2e>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	b672      	cpsid	i
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	b662      	cpsie	i
 800a30c:	60fb      	str	r3, [r7, #12]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <prvTaskExitError+0x2c>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	b672      	cpsid	i
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	b662      	cpsie	i
 800a326:	60bb      	str	r3, [r7, #8]
}
 800a328:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a32a:	bf00      	nop
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0fc      	beq.n	800a32c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	20000020 	.word	0x20000020
	...

0800a350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <pxCurrentTCBConst2>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	6808      	ldr	r0, [r1, #0]
 800a356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	f380 8809 	msr	PSP, r0
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8811 	msr	BASEPRI, r0
 800a36a:	4770      	bx	lr
 800a36c:	f3af 8000 	nop.w

0800a370 <pxCurrentTCBConst2>:
 800a370:	200058c8 	.word	0x200058c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a374:	bf00      	nop
 800a376:	bf00      	nop

0800a378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a378:	4808      	ldr	r0, [pc, #32]	; (800a39c <prvPortStartFirstTask+0x24>)
 800a37a:	6800      	ldr	r0, [r0, #0]
 800a37c:	6800      	ldr	r0, [r0, #0]
 800a37e:	f380 8808 	msr	MSP, r0
 800a382:	f04f 0000 	mov.w	r0, #0
 800a386:	f380 8814 	msr	CONTROL, r0
 800a38a:	b662      	cpsie	i
 800a38c:	b661      	cpsie	f
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	df00      	svc	0
 800a398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a39a:	bf00      	nop
 800a39c:	e000ed08 	.word	0xe000ed08

0800a3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3a6:	4b37      	ldr	r3, [pc, #220]	; (800a484 <xPortStartScheduler+0xe4>)
 800a3a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	22ff      	movs	r2, #255	; 0xff
 800a3b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3c0:	78fb      	ldrb	r3, [r7, #3]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	4b2f      	ldr	r3, [pc, #188]	; (800a488 <xPortStartScheduler+0xe8>)
 800a3cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ce:	4b2f      	ldr	r3, [pc, #188]	; (800a48c <xPortStartScheduler+0xec>)
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3d4:	e009      	b.n	800a3ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3d6:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <xPortStartScheduler+0xec>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	4a2b      	ldr	r2, [pc, #172]	; (800a48c <xPortStartScheduler+0xec>)
 800a3de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d0ef      	beq.n	800a3d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3f6:	4b25      	ldr	r3, [pc, #148]	; (800a48c <xPortStartScheduler+0xec>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f1c3 0307 	rsb	r3, r3, #7
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d00c      	beq.n	800a41c <xPortStartScheduler+0x7c>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	b672      	cpsid	i
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	b662      	cpsie	i
 800a416:	60bb      	str	r3, [r7, #8]
}
 800a418:	bf00      	nop
 800a41a:	e7fe      	b.n	800a41a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a41c:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <xPortStartScheduler+0xec>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <xPortStartScheduler+0xec>)
 800a424:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <xPortStartScheduler+0xec>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a42e:	4a17      	ldr	r2, [pc, #92]	; (800a48c <xPortStartScheduler+0xec>)
 800a430:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	b2da      	uxtb	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a43a:	4b15      	ldr	r3, [pc, #84]	; (800a490 <xPortStartScheduler+0xf0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a14      	ldr	r2, [pc, #80]	; (800a490 <xPortStartScheduler+0xf0>)
 800a440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a444:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <xPortStartScheduler+0xf0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a11      	ldr	r2, [pc, #68]	; (800a490 <xPortStartScheduler+0xf0>)
 800a44c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a450:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a452:	f000 f8dd 	bl	800a610 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a456:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <xPortStartScheduler+0xf4>)
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a45c:	f000 f8fc 	bl	800a658 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <xPortStartScheduler+0xf8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0c      	ldr	r2, [pc, #48]	; (800a498 <xPortStartScheduler+0xf8>)
 800a466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a46a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a46c:	f7ff ff84 	bl	800a378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a470:	f7fe ff2e 	bl	80092d0 <vTaskSwitchContext>
	prvTaskExitError();
 800a474:	f7ff ff36 	bl	800a2e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	e000e400 	.word	0xe000e400
 800a488:	20005ef4 	.word	0x20005ef4
 800a48c:	20005ef8 	.word	0x20005ef8
 800a490:	e000ed20 	.word	0xe000ed20
 800a494:	20000020 	.word	0x20000020
 800a498:	e000ef34 	.word	0xe000ef34

0800a49c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	b672      	cpsid	i
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	b662      	cpsie	i
 800a4b6:	607b      	str	r3, [r7, #4]
}
 800a4b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4ba:	4b10      	ldr	r3, [pc, #64]	; (800a4fc <vPortEnterCritical+0x60>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	4a0e      	ldr	r2, [pc, #56]	; (800a4fc <vPortEnterCritical+0x60>)
 800a4c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4c4:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <vPortEnterCritical+0x60>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d111      	bne.n	800a4f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <vPortEnterCritical+0x64>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <vPortEnterCritical+0x54>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	b672      	cpsid	i
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	b662      	cpsie	i
 800a4ea:	603b      	str	r3, [r7, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <vPortEnterCritical+0x52>
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20000020 	.word	0x20000020
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a50a:	4b13      	ldr	r3, [pc, #76]	; (800a558 <vPortExitCritical+0x54>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10c      	bne.n	800a52c <vPortExitCritical+0x28>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	b672      	cpsid	i
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	b662      	cpsie	i
 800a526:	607b      	str	r3, [r7, #4]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a52c:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <vPortExitCritical+0x54>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3b01      	subs	r3, #1
 800a532:	4a09      	ldr	r2, [pc, #36]	; (800a558 <vPortExitCritical+0x54>)
 800a534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <vPortExitCritical+0x54>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <vPortExitCritical+0x46>
 800a53e:	2300      	movs	r3, #0
 800a540:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	f383 8811 	msr	BASEPRI, r3
}
 800a548:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	20000020 	.word	0x20000020
 800a55c:	00000000 	.word	0x00000000

0800a560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a560:	f3ef 8009 	mrs	r0, PSP
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <pxCurrentTCBConst>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	f01e 0f10 	tst.w	lr, #16
 800a570:	bf08      	it	eq
 800a572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57a:	6010      	str	r0, [r2, #0]
 800a57c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a580:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a584:	b672      	cpsid	i
 800a586:	f380 8811 	msr	BASEPRI, r0
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	b662      	cpsie	i
 800a594:	f7fe fe9c 	bl	80092d0 <vTaskSwitchContext>
 800a598:	f04f 0000 	mov.w	r0, #0
 800a59c:	f380 8811 	msr	BASEPRI, r0
 800a5a0:	bc09      	pop	{r0, r3}
 800a5a2:	6819      	ldr	r1, [r3, #0]
 800a5a4:	6808      	ldr	r0, [r1, #0]
 800a5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	f01e 0f10 	tst.w	lr, #16
 800a5ae:	bf08      	it	eq
 800a5b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5b4:	f380 8809 	msr	PSP, r0
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop

0800a5c0 <pxCurrentTCBConst>:
 800a5c0:	200058c8 	.word	0x200058c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop

0800a5c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	b672      	cpsid	i
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	b662      	cpsie	i
 800a5e2:	607b      	str	r3, [r7, #4]
}
 800a5e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5e6:	f7fe fdb7 	bl	8009158 <xTaskIncrementTick>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5f0:	4b06      	ldr	r3, [pc, #24]	; (800a60c <SysTick_Handler+0x44>)
 800a5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	f383 8811 	msr	BASEPRI, r3
}
 800a602:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a610:	b480      	push	{r7}
 800a612:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a614:	4b0b      	ldr	r3, [pc, #44]	; (800a644 <vPortSetupTimerInterrupt+0x34>)
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a61a:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <vPortSetupTimerInterrupt+0x38>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <vPortSetupTimerInterrupt+0x3c>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a0a      	ldr	r2, [pc, #40]	; (800a650 <vPortSetupTimerInterrupt+0x40>)
 800a626:	fba2 2303 	umull	r2, r3, r2, r3
 800a62a:	099b      	lsrs	r3, r3, #6
 800a62c:	4a09      	ldr	r2, [pc, #36]	; (800a654 <vPortSetupTimerInterrupt+0x44>)
 800a62e:	3b01      	subs	r3, #1
 800a630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a632:	4b04      	ldr	r3, [pc, #16]	; (800a644 <vPortSetupTimerInterrupt+0x34>)
 800a634:	2207      	movs	r2, #7
 800a636:	601a      	str	r2, [r3, #0]
}
 800a638:	bf00      	nop
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	e000e010 	.word	0xe000e010
 800a648:	e000e018 	.word	0xe000e018
 800a64c:	20000000 	.word	0x20000000
 800a650:	10624dd3 	.word	0x10624dd3
 800a654:	e000e014 	.word	0xe000e014

0800a658 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a658:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a668 <vPortEnableVFP+0x10>
 800a65c:	6801      	ldr	r1, [r0, #0]
 800a65e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a662:	6001      	str	r1, [r0, #0]
 800a664:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a666:	bf00      	nop
 800a668:	e000ed88 	.word	0xe000ed88

0800a66c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a672:	f3ef 8305 	mrs	r3, IPSR
 800a676:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b0f      	cmp	r3, #15
 800a67c:	d916      	bls.n	800a6ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a67e:	4a19      	ldr	r2, [pc, #100]	; (800a6e4 <vPortValidateInterruptPriority+0x78>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4413      	add	r3, r2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a688:	4b17      	ldr	r3, [pc, #92]	; (800a6e8 <vPortValidateInterruptPriority+0x7c>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	7afa      	ldrb	r2, [r7, #11]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d20c      	bcs.n	800a6ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	b672      	cpsid	i
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	b662      	cpsie	i
 800a6a6:	607b      	str	r3, [r7, #4]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6ac:	4b0f      	ldr	r3, [pc, #60]	; (800a6ec <vPortValidateInterruptPriority+0x80>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <vPortValidateInterruptPriority+0x84>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d90c      	bls.n	800a6d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	b672      	cpsid	i
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	b662      	cpsie	i
 800a6d0:	603b      	str	r3, [r7, #0]
}
 800a6d2:	bf00      	nop
 800a6d4:	e7fe      	b.n	800a6d4 <vPortValidateInterruptPriority+0x68>
	}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	e000e3f0 	.word	0xe000e3f0
 800a6e8:	20005ef4 	.word	0x20005ef4
 800a6ec:	e000ed0c 	.word	0xe000ed0c
 800a6f0:	20005ef8 	.word	0x20005ef8

0800a6f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	; 0x28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a700:	f7fe fc5a 	bl	8008fb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a704:	4b5b      	ldr	r3, [pc, #364]	; (800a874 <pvPortMalloc+0x180>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a70c:	f000 f91a 	bl	800a944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a710:	4b59      	ldr	r3, [pc, #356]	; (800a878 <pvPortMalloc+0x184>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4013      	ands	r3, r2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f040 8092 	bne.w	800a842 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d01f      	beq.n	800a764 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a724:	2208      	movs	r2, #8
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4413      	add	r3, r2
 800a72a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	2b00      	cmp	r3, #0
 800a734:	d016      	beq.n	800a764 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f023 0307 	bic.w	r3, r3, #7
 800a73c:	3308      	adds	r3, #8
 800a73e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f003 0307 	and.w	r3, r3, #7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00c      	beq.n	800a764 <pvPortMalloc+0x70>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	b672      	cpsid	i
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	b662      	cpsie	i
 800a75e:	617b      	str	r3, [r7, #20]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d06b      	beq.n	800a842 <pvPortMalloc+0x14e>
 800a76a:	4b44      	ldr	r3, [pc, #272]	; (800a87c <pvPortMalloc+0x188>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	429a      	cmp	r2, r3
 800a772:	d866      	bhi.n	800a842 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a774:	4b42      	ldr	r3, [pc, #264]	; (800a880 <pvPortMalloc+0x18c>)
 800a776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a778:	4b41      	ldr	r3, [pc, #260]	; (800a880 <pvPortMalloc+0x18c>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a77e:	e004      	b.n	800a78a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	d903      	bls.n	800a79c <pvPortMalloc+0xa8>
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1f1      	bne.n	800a780 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a79c:	4b35      	ldr	r3, [pc, #212]	; (800a874 <pvPortMalloc+0x180>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d04d      	beq.n	800a842 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	4413      	add	r3, r2
 800a7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	1ad2      	subs	r2, r2, r3
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d921      	bls.n	800a80c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00c      	beq.n	800a7f4 <pvPortMalloc+0x100>
	__asm volatile
 800a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7de:	b672      	cpsid	i
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	b662      	cpsie	i
 800a7ee:	613b      	str	r3, [r7, #16]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	1ad2      	subs	r2, r2, r3
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a806:	69b8      	ldr	r0, [r7, #24]
 800a808:	f000 f8fe 	bl	800aa08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a80c:	4b1b      	ldr	r3, [pc, #108]	; (800a87c <pvPortMalloc+0x188>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	4a19      	ldr	r2, [pc, #100]	; (800a87c <pvPortMalloc+0x188>)
 800a818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a81a:	4b18      	ldr	r3, [pc, #96]	; (800a87c <pvPortMalloc+0x188>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b19      	ldr	r3, [pc, #100]	; (800a884 <pvPortMalloc+0x190>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d203      	bcs.n	800a82e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a826:	4b15      	ldr	r3, [pc, #84]	; (800a87c <pvPortMalloc+0x188>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a16      	ldr	r2, [pc, #88]	; (800a884 <pvPortMalloc+0x190>)
 800a82c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	4b11      	ldr	r3, [pc, #68]	; (800a878 <pvPortMalloc+0x184>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	431a      	orrs	r2, r3
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	2200      	movs	r2, #0
 800a840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a842:	f7fe fbc7 	bl	8008fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00c      	beq.n	800a86a <pvPortMalloc+0x176>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	b672      	cpsid	i
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	b662      	cpsie	i
 800a864:	60fb      	str	r3, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	e7fe      	b.n	800a868 <pvPortMalloc+0x174>
	return pvReturn;
 800a86a:	69fb      	ldr	r3, [r7, #28]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3728      	adds	r7, #40	; 0x28
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20009b04 	.word	0x20009b04
 800a878:	20009b10 	.word	0x20009b10
 800a87c:	20009b08 	.word	0x20009b08
 800a880:	20009afc 	.word	0x20009afc
 800a884:	20009b0c 	.word	0x20009b0c

0800a888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d04c      	beq.n	800a934 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a89a:	2308      	movs	r3, #8
 800a89c:	425b      	negs	r3, r3
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	4b23      	ldr	r3, [pc, #140]	; (800a93c <vPortFree+0xb4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10c      	bne.n	800a8d0 <vPortFree+0x48>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	b672      	cpsid	i
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	b662      	cpsie	i
 800a8ca:	60fb      	str	r3, [r7, #12]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <vPortFree+0x6a>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	b672      	cpsid	i
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	b662      	cpsie	i
 800a8ec:	60bb      	str	r3, [r7, #8]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	685a      	ldr	r2, [r3, #4]
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <vPortFree+0xb4>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d019      	beq.n	800a934 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d115      	bne.n	800a934 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <vPortFree+0xb4>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	43db      	mvns	r3, r3
 800a912:	401a      	ands	r2, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a918:	f7fe fb4e 	bl	8008fb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	685a      	ldr	r2, [r3, #4]
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <vPortFree+0xb8>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4413      	add	r3, r2
 800a926:	4a06      	ldr	r2, [pc, #24]	; (800a940 <vPortFree+0xb8>)
 800a928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a92a:	6938      	ldr	r0, [r7, #16]
 800a92c:	f000 f86c 	bl	800aa08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a930:	f7fe fb50 	bl	8008fd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a934:	bf00      	nop
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20009b10 	.word	0x20009b10
 800a940:	20009b08 	.word	0x20009b08

0800a944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a94a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a94e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a950:	4b27      	ldr	r3, [pc, #156]	; (800a9f0 <prvHeapInit+0xac>)
 800a952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00c      	beq.n	800a978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3307      	adds	r3, #7
 800a962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0307 	bic.w	r3, r3, #7
 800a96a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	4a1f      	ldr	r2, [pc, #124]	; (800a9f0 <prvHeapInit+0xac>)
 800a974:	4413      	add	r3, r2
 800a976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a97c:	4a1d      	ldr	r2, [pc, #116]	; (800a9f4 <prvHeapInit+0xb0>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a982:	4b1c      	ldr	r3, [pc, #112]	; (800a9f4 <prvHeapInit+0xb0>)
 800a984:	2200      	movs	r2, #0
 800a986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	4413      	add	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a990:	2208      	movs	r2, #8
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	1a9b      	subs	r3, r3, r2
 800a996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9a6:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9ae:	4b12      	ldr	r3, [pc, #72]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <prvHeapInit+0xb4>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	; (800a9fc <prvHeapInit+0xb8>)
 800a9d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <prvHeapInit+0xbc>)
 800a9da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9dc:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <prvHeapInit+0xc0>)
 800a9de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	20005efc 	.word	0x20005efc
 800a9f4:	20009afc 	.word	0x20009afc
 800a9f8:	20009b04 	.word	0x20009b04
 800a9fc:	20009b0c 	.word	0x20009b0c
 800aa00:	20009b08 	.word	0x20009b08
 800aa04:	20009b10 	.word	0x20009b10

0800aa08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa10:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <prvInsertBlockIntoFreeList+0xac>)
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	e002      	b.n	800aa1c <prvInsertBlockIntoFreeList+0x14>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d8f7      	bhi.n	800aa16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d108      	bne.n	800aa4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	441a      	add	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	441a      	add	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d118      	bne.n	800aa90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b15      	ldr	r3, [pc, #84]	; (800aab8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d00d      	beq.n	800aa86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	441a      	add	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	e008      	b.n	800aa98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa86:	4b0c      	ldr	r3, [pc, #48]	; (800aab8 <prvInsertBlockIntoFreeList+0xb0>)
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	e003      	b.n	800aa98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d002      	beq.n	800aaa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	20009afc 	.word	0x20009afc
 800aab8:	20009b04 	.word	0x20009b04

0800aabc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	330c      	adds	r3, #12
 800aacc:	461a      	mov	r2, r3
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f002 f8d5 	bl	800cc80 <tcpip_send_msg_wait_sem>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800aada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d103      	bne.n	800aaea <netconn_apimsg+0x2e>
    return apimsg->err;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800aae8:	e001      	b.n	800aaee <netconn_apimsg+0x32>
  }
  return err;
 800aaea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08c      	sub	sp, #48	; 0x30
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	603a      	str	r2, [r7, #0]
 800ab02:	71fb      	strb	r3, [r7, #7]
 800ab04:	460b      	mov	r3, r1
 800ab06:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	6839      	ldr	r1, [r7, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 ff1b 	bl	800b948 <netconn_alloc>
 800ab12:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d054      	beq.n	800abc4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ab1a:	79bb      	ldrb	r3, [r7, #6]
 800ab1c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	4619      	mov	r1, r3
 800ab28:	4829      	ldr	r0, [pc, #164]	; (800abd0 <netconn_new_with_proto_and_callback+0xd8>)
 800ab2a:	f7ff ffc7 	bl	800aabc <netconn_apimsg>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ab34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d043      	beq.n	800abc4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <netconn_new_with_proto_and_callback+0x58>
 800ab44:	4b23      	ldr	r3, [pc, #140]	; (800abd4 <netconn_new_with_proto_and_callback+0xdc>)
 800ab46:	22a3      	movs	r2, #163	; 0xa3
 800ab48:	4923      	ldr	r1, [pc, #140]	; (800abd8 <netconn_new_with_proto_and_callback+0xe0>)
 800ab4a:	4824      	ldr	r0, [pc, #144]	; (800abdc <netconn_new_with_proto_and_callback+0xe4>)
 800ab4c:	f00d f970 	bl	8017e30 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab52:	3310      	adds	r3, #16
 800ab54:	4618      	mov	r0, r3
 800ab56:	f00c fe4d 	bl	80177f4 <sys_mbox_valid>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d105      	bne.n	800ab6c <netconn_new_with_proto_and_callback+0x74>
 800ab60:	4b1c      	ldr	r3, [pc, #112]	; (800abd4 <netconn_new_with_proto_and_callback+0xdc>)
 800ab62:	22a4      	movs	r2, #164	; 0xa4
 800ab64:	491e      	ldr	r1, [pc, #120]	; (800abe0 <netconn_new_with_proto_and_callback+0xe8>)
 800ab66:	481d      	ldr	r0, [pc, #116]	; (800abdc <netconn_new_with_proto_and_callback+0xe4>)
 800ab68:	f00d f962 	bl	8017e30 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	3314      	adds	r3, #20
 800ab70:	4618      	mov	r0, r3
 800ab72:	f00c fe3f 	bl	80177f4 <sys_mbox_valid>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <netconn_new_with_proto_and_callback+0x90>
 800ab7c:	4b15      	ldr	r3, [pc, #84]	; (800abd4 <netconn_new_with_proto_and_callback+0xdc>)
 800ab7e:	22a6      	movs	r2, #166	; 0xa6
 800ab80:	4918      	ldr	r1, [pc, #96]	; (800abe4 <netconn_new_with_proto_and_callback+0xec>)
 800ab82:	4816      	ldr	r0, [pc, #88]	; (800abdc <netconn_new_with_proto_and_callback+0xe4>)
 800ab84:	f00d f954 	bl	8017e30 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	330c      	adds	r3, #12
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f00c febf 	bl	8017910 <sys_sem_valid>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <netconn_new_with_proto_and_callback+0xac>
 800ab98:	4b0e      	ldr	r3, [pc, #56]	; (800abd4 <netconn_new_with_proto_and_callback+0xdc>)
 800ab9a:	22a9      	movs	r2, #169	; 0xa9
 800ab9c:	4912      	ldr	r1, [pc, #72]	; (800abe8 <netconn_new_with_proto_and_callback+0xf0>)
 800ab9e:	480f      	ldr	r0, [pc, #60]	; (800abdc <netconn_new_with_proto_and_callback+0xe4>)
 800aba0:	f00d f946 	bl	8017e30 <iprintf>
      sys_sem_free(&conn->op_completed);
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	330c      	adds	r3, #12
 800aba8:	4618      	mov	r0, r3
 800abaa:	f00c fea4 	bl	80178f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	3310      	adds	r3, #16
 800abb2:	4618      	mov	r0, r3
 800abb4:	f00c fdaa 	bl	801770c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800abb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abba:	2006      	movs	r0, #6
 800abbc:	f002 ff26 	bl	800da0c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800abc0:	2300      	movs	r3, #0
 800abc2:	e000      	b.n	800abc6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3730      	adds	r7, #48	; 0x30
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	0800b91d 	.word	0x0800b91d
 800abd4:	0801af40 	.word	0x0801af40
 800abd8:	0801af74 	.word	0x0801af74
 800abdc:	0801af98 	.word	0x0801af98
 800abe0:	0801afc0 	.word	0x0801afc0
 800abe4:	0801afd8 	.word	0x0801afd8
 800abe8:	0801affc 	.word	0x0801affc

0800abec <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08c      	sub	sp, #48	; 0x30
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <netconn_prepare_delete+0x12>
    return ERR_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	e014      	b.n	800ac28 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ac02:	2329      	movs	r3, #41	; 0x29
 800ac04:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ac06:	f107 030c 	add.w	r3, r7, #12
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4808      	ldr	r0, [pc, #32]	; (800ac30 <netconn_prepare_delete+0x44>)
 800ac0e:	f7ff ff55 	bl	800aabc <netconn_apimsg>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ac18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <netconn_prepare_delete+0x3a>
    return err;
 800ac20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ac24:	e000      	b.n	800ac28 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3730      	adds	r7, #48	; 0x30
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	0800be81 	.word	0x0800be81

0800ac34 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <netconn_delete+0x12>
    return ERR_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	e00d      	b.n	800ac62 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff ffd0 	bl	800abec <netconn_prepare_delete>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ac50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <netconn_delete+0x2a>
    netconn_free(conn);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fedf 	bl	800ba1c <netconn_free>
  }
  return err;
 800ac5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08e      	sub	sp, #56	; 0x38
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	4613      	mov	r3, r2
 800ac78:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d109      	bne.n	800ac94 <netconn_bind+0x28>
 800ac80:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <netconn_bind+0x5c>)
 800ac82:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ac86:	4911      	ldr	r1, [pc, #68]	; (800accc <netconn_bind+0x60>)
 800ac88:	4811      	ldr	r0, [pc, #68]	; (800acd0 <netconn_bind+0x64>)
 800ac8a:	f00d f8d1 	bl	8017e30 <iprintf>
 800ac8e:	f06f 030f 	mvn.w	r3, #15
 800ac92:	e015      	b.n	800acc0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <netconn_bind+0x68>)
 800ac9c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800acaa:	f107 0314 	add.w	r3, r7, #20
 800acae:	4619      	mov	r1, r3
 800acb0:	4809      	ldr	r0, [pc, #36]	; (800acd8 <netconn_bind+0x6c>)
 800acb2:	f7ff ff03 	bl	800aabc <netconn_apimsg>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800acbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3738      	adds	r7, #56	; 0x38
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	0801af40 	.word	0x0801af40
 800accc:	0801b078 	.word	0x0801b078
 800acd0:	0801af98 	.word	0x0801af98
 800acd4:	0801e22c 	.word	0x0801e22c
 800acd8:	0800c02d 	.word	0x0800c02d

0800acdc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08e      	sub	sp, #56	; 0x38
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <netconn_connect+0x28>
 800acf0:	4b11      	ldr	r3, [pc, #68]	; (800ad38 <netconn_connect+0x5c>)
 800acf2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800acf6:	4911      	ldr	r1, [pc, #68]	; (800ad3c <netconn_connect+0x60>)
 800acf8:	4811      	ldr	r0, [pc, #68]	; (800ad40 <netconn_connect+0x64>)
 800acfa:	f00d f899 	bl	8017e30 <iprintf>
 800acfe:	f06f 030f 	mvn.w	r3, #15
 800ad02:	e015      	b.n	800ad30 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800ad0a:	4b0e      	ldr	r3, [pc, #56]	; (800ad44 <netconn_connect+0x68>)
 800ad0c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800ad1a:	f107 0314 	add.w	r3, r7, #20
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4809      	ldr	r0, [pc, #36]	; (800ad48 <netconn_connect+0x6c>)
 800ad22:	f7ff fecb 	bl	800aabc <netconn_apimsg>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ad2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3738      	adds	r7, #56	; 0x38
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	0801af40 	.word	0x0801af40
 800ad3c:	0801b0b4 	.word	0x0801b0b4
 800ad40:	0801af98 	.word	0x0801af98
 800ad44:	0801e22c 	.word	0x0801e22c
 800ad48:	0800c1a5 	.word	0x0800c1a5

0800ad4c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4613      	mov	r3, r2
 800ad58:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d109      	bne.n	800ad78 <netconn_recv_data+0x2c>
 800ad64:	4b4d      	ldr	r3, [pc, #308]	; (800ae9c <netconn_recv_data+0x150>)
 800ad66:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ad6a:	494d      	ldr	r1, [pc, #308]	; (800aea0 <netconn_recv_data+0x154>)
 800ad6c:	484d      	ldr	r0, [pc, #308]	; (800aea4 <netconn_recv_data+0x158>)
 800ad6e:	f00d f85f 	bl	8017e30 <iprintf>
 800ad72:	f06f 030f 	mvn.w	r3, #15
 800ad76:	e08d      	b.n	800ae94 <netconn_recv_data+0x148>
  *new_buf = NULL;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d109      	bne.n	800ad98 <netconn_recv_data+0x4c>
 800ad84:	4b45      	ldr	r3, [pc, #276]	; (800ae9c <netconn_recv_data+0x150>)
 800ad86:	f240 224a 	movw	r2, #586	; 0x24a
 800ad8a:	4947      	ldr	r1, [pc, #284]	; (800aea8 <netconn_recv_data+0x15c>)
 800ad8c:	4845      	ldr	r0, [pc, #276]	; (800aea4 <netconn_recv_data+0x158>)
 800ad8e:	f00d f84f 	bl	8017e30 <iprintf>
 800ad92:	f06f 030f 	mvn.w	r3, #15
 800ad96:	e07d      	b.n	800ae94 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3310      	adds	r3, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f00c fd29 	bl	80177f4 <sys_mbox_valid>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10e      	bne.n	800adc6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 faae 	bl	800b30a <netconn_err>
 800adae:	4603      	mov	r3, r0
 800adb0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800adb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800adba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adbe:	e069      	b.n	800ae94 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 800adc0:	f06f 030a 	mvn.w	r3, #10
 800adc4:	e066      	b.n	800ae94 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	7f1b      	ldrb	r3, [r3, #28]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10f      	bne.n	800adf2 <netconn_recv_data+0xa6>
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	7f1b      	ldrb	r3, [r3, #28]
 800ade0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d023      	beq.n	800ae3a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3310      	adds	r3, #16
 800adf6:	f107 0214 	add.w	r2, r7, #20
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f00c fce2 	bl	80177c6 <sys_arch_mbox_tryfetch>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae08:	d11f      	bne.n	800ae4a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f000 fa7d 	bl	800b30a <netconn_err>
 800ae10:	4603      	mov	r3, r0
 800ae12:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 800ae14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ae1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae20:	e038      	b.n	800ae94 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	7f1b      	ldrb	r3, [r3, #28]
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ae2e:	f06f 030a 	mvn.w	r3, #10
 800ae32:	e02f      	b.n	800ae94 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 800ae34:	f06f 0306 	mvn.w	r3, #6
 800ae38:	e02c      	b.n	800ae94 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3310      	adds	r3, #16
 800ae3e:	f107 0114 	add.w	r1, r7, #20
 800ae42:	2200      	movs	r2, #0
 800ae44:	4618      	mov	r0, r3
 800ae46:	f00c fc8d 	bl	8017764 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f107 0213 	add.w	r2, r7, #19
 800ae50:	4611      	mov	r1, r2
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 faaa 	bl	800b3ac <lwip_netconn_is_err_msg>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ae5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae62:	f113 0f0f 	cmn.w	r3, #15
 800ae66:	d101      	bne.n	800ae6c <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e013      	b.n	800ae94 <netconn_recv_data+0x148>
      }
      return err;
 800ae6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae70:	e010      	b.n	800ae94 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	891b      	ldrh	r3, [r3, #8]
 800ae76:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <netconn_recv_data+0x140>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	8bba      	ldrh	r2, [r7, #28]
 800ae86:	2101      	movs	r1, #1
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	0801af40 	.word	0x0801af40
 800aea0:	0801b158 	.word	0x0801b158
 800aea4:	0801af98 	.word	0x0801af98
 800aea8:	0801b178 	.word	0x0801b178

0800aeac <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d005      	beq.n	800aeca <netconn_tcp_recvd_msg+0x1e>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec6:	2b10      	cmp	r3, #16
 800aec8:	d009      	beq.n	800aede <netconn_tcp_recvd_msg+0x32>
 800aeca:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <netconn_tcp_recvd_msg+0x50>)
 800aecc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800aed0:	490b      	ldr	r1, [pc, #44]	; (800af00 <netconn_tcp_recvd_msg+0x54>)
 800aed2:	480c      	ldr	r0, [pc, #48]	; (800af04 <netconn_tcp_recvd_msg+0x58>)
 800aed4:	f00c ffac 	bl	8017e30 <iprintf>
 800aed8:	f06f 030f 	mvn.w	r3, #15
 800aedc:	e00a      	b.n	800aef4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	4806      	ldr	r0, [pc, #24]	; (800af08 <netconn_tcp_recvd_msg+0x5c>)
 800aeee:	f7ff fde5 	bl	800aabc <netconn_apimsg>
 800aef2:	4603      	mov	r3, r0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	0801af40 	.word	0x0801af40
 800af00:	0801b194 	.word	0x0801b194
 800af04:	0801af98 	.word	0x0801af98
 800af08:	0800c301 	.word	0x0800c301

0800af0c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b090      	sub	sp, #64	; 0x40
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3310      	adds	r3, #16
 800af1e:	4618      	mov	r0, r3
 800af20:	f00c fc68 	bl	80177f4 <sys_mbox_valid>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d102      	bne.n	800af30 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800af2a:	f06f 030a 	mvn.w	r3, #10
 800af2e:	e06d      	b.n	800b00c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	7f1b      	ldrb	r3, [r3, #28]
 800af34:	b25b      	sxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	da07      	bge.n	800af4a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	7f1b      	ldrb	r3, [r3, #28]
 800af3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af42:	b2da      	uxtb	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800af48:	e039      	b.n	800afbe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	461a      	mov	r2, r3
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fefb 	bl	800ad4c <netconn_recv_data>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800af5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800af64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af68:	e050      	b.n	800b00c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	f003 0308 	and.w	r3, r3, #8
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10e      	bne.n	800af98 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <netconn_recv_data_tcp+0x7a>
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	891b      	ldrh	r3, [r3, #8]
 800af84:	e000      	b.n	800af88 <netconn_recv_data_tcp+0x7c>
 800af86:	2301      	movs	r3, #1
 800af88:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800af8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af8c:	f107 0214 	add.w	r2, r7, #20
 800af90:	4619      	mov	r1, r3
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff ff8a 	bl	800aeac <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d134      	bne.n	800b008 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	f003 0310 	and.w	r3, r3, #16
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d009      	beq.n	800afbc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	7f1b      	ldrb	r3, [r3, #28]
 800afac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800afb6:	f06f 0306 	mvn.w	r3, #6
 800afba:	e027      	b.n	800b00c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800afbc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <netconn_recv_data_tcp+0xc6>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	2101      	movs	r1, #1
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10f      	bne.n	800affa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f000 f995 	bl	800b30a <netconn_err>
 800afe0:	4603      	mov	r3, r0
 800afe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800afe6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <netconn_recv_data_tcp+0xe8>
          return err;
 800afee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aff2:	e00b      	b.n	800b00c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800aff4:	f06f 030d 	mvn.w	r3, #13
 800aff8:	e008      	b.n	800b00c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800affa:	2101      	movs	r1, #1
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 f947 	bl	800b290 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800b002:	f06f 030e 	mvn.w	r3, #14
 800b006:	e001      	b.n	800b00c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800b008:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3740      	adds	r7, #64	; 0x40
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <netconn_recv+0x28>
 800b028:	4b2b      	ldr	r3, [pc, #172]	; (800b0d8 <netconn_recv+0xc4>)
 800b02a:	f240 3263 	movw	r2, #867	; 0x363
 800b02e:	492b      	ldr	r1, [pc, #172]	; (800b0dc <netconn_recv+0xc8>)
 800b030:	482b      	ldr	r0, [pc, #172]	; (800b0e0 <netconn_recv+0xcc>)
 800b032:	f00c fefd 	bl	8017e30 <iprintf>
 800b036:	f06f 030f 	mvn.w	r3, #15
 800b03a:	e049      	b.n	800b0d0 <netconn_recv+0xbc>
  *new_buf = NULL;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d109      	bne.n	800b05c <netconn_recv+0x48>
 800b048:	4b23      	ldr	r3, [pc, #140]	; (800b0d8 <netconn_recv+0xc4>)
 800b04a:	f240 3265 	movw	r2, #869	; 0x365
 800b04e:	4925      	ldr	r1, [pc, #148]	; (800b0e4 <netconn_recv+0xd0>)
 800b050:	4823      	ldr	r0, [pc, #140]	; (800b0e0 <netconn_recv+0xcc>)
 800b052:	f00c feed 	bl	8017e30 <iprintf>
 800b056:	f06f 030f 	mvn.w	r3, #15
 800b05a:	e039      	b.n	800b0d0 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800b060:	2005      	movs	r0, #5
 800b062:	f002 fc5d 	bl	800d920 <memp_malloc>
 800b066:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <netconn_recv+0x60>
      return ERR_MEM;
 800b06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b072:	e02d      	b.n	800b0d0 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800b074:	f107 030c 	add.w	r3, r7, #12
 800b078:	2200      	movs	r2, #0
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff ff45 	bl	800af0c <netconn_recv_data_tcp>
 800b082:	4603      	mov	r3, r0
 800b084:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b086:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d006      	beq.n	800b09c <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 800b08e:	6979      	ldr	r1, [r7, #20]
 800b090:	2005      	movs	r0, #5
 800b092:	f002 fcbb 	bl	800da0c <memp_free>
      return err;
 800b096:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b09a:	e019      	b.n	800b0d0 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d106      	bne.n	800b0b0 <netconn_recv+0x9c>
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <netconn_recv+0xc4>)
 800b0a4:	f240 3279 	movw	r2, #889	; 0x379
 800b0a8:	490f      	ldr	r1, [pc, #60]	; (800b0e8 <netconn_recv+0xd4>)
 800b0aa:	480d      	ldr	r0, [pc, #52]	; (800b0e0 <netconn_recv+0xcc>)
 800b0ac:	f00c fec0 	bl	8017e30 <iprintf>

    buf->p = p;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800b0ce:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	0801af40 	.word	0x0801af40
 800b0dc:	0801b158 	.word	0x0801b158
 800b0e0:	0801af98 	.word	0x0801af98
 800b0e4:	0801b178 	.word	0x0801b178
 800b0e8:	0801b1e4 	.word	0x0801b1e4

0800b0ec <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800b102:	78fa      	ldrb	r2, [r7, #3]
 800b104:	f107 0110 	add.w	r1, r7, #16
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	2201      	movs	r2, #1
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f000 f805 	bl	800b120 <netconn_write_vectors_partly>
 800b116:	4603      	mov	r3, r0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b092      	sub	sp, #72	; 0x48
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4611      	mov	r1, r2
 800b12c:	461a      	mov	r2, r3
 800b12e:	460b      	mov	r3, r1
 800b130:	80fb      	strh	r3, [r7, #6]
 800b132:	4613      	mov	r3, r2
 800b134:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d109      	bne.n	800b150 <netconn_write_vectors_partly+0x30>
 800b13c:	4b4e      	ldr	r3, [pc, #312]	; (800b278 <netconn_write_vectors_partly+0x158>)
 800b13e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b142:	494e      	ldr	r1, [pc, #312]	; (800b27c <netconn_write_vectors_partly+0x15c>)
 800b144:	484e      	ldr	r0, [pc, #312]	; (800b280 <netconn_write_vectors_partly+0x160>)
 800b146:	f00c fe73 	bl	8017e30 <iprintf>
 800b14a:	f06f 030f 	mvn.w	r3, #15
 800b14e:	e08e      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b158:	2b10      	cmp	r3, #16
 800b15a:	d009      	beq.n	800b170 <netconn_write_vectors_partly+0x50>
 800b15c:	4b46      	ldr	r3, [pc, #280]	; (800b278 <netconn_write_vectors_partly+0x158>)
 800b15e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b162:	4948      	ldr	r1, [pc, #288]	; (800b284 <netconn_write_vectors_partly+0x164>)
 800b164:	4846      	ldr	r0, [pc, #280]	; (800b280 <netconn_write_vectors_partly+0x160>)
 800b166:	f00c fe63 	bl	8017e30 <iprintf>
 800b16a:	f06f 0305 	mvn.w	r3, #5
 800b16e:	e07e      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	7f1b      	ldrb	r3, [r3, #28]
 800b174:	f003 0302 	and.w	r3, r3, #2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d104      	bne.n	800b186 <netconn_write_vectors_partly+0x66>
 800b17c:	797b      	ldrb	r3, [r7, #5]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <netconn_write_vectors_partly+0x6a>
 800b186:	2301      	movs	r3, #1
 800b188:	e000      	b.n	800b18c <netconn_write_vectors_partly+0x6c>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800b190:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b194:	2b00      	cmp	r3, #0
 800b196:	d005      	beq.n	800b1a4 <netconn_write_vectors_partly+0x84>
 800b198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800b19e:	f06f 0305 	mvn.w	r3, #5
 800b1a2:	e064      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ac:	e015      	b.n	800b1da <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800b1ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ba:	4413      	add	r3, r2
 800b1bc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c0:	00db      	lsls	r3, r3, #3
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d202      	bcs.n	800b1d4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800b1ce:	f06f 0305 	mvn.w	r3, #5
 800b1d2:	e04c      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800b1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b1da:	88fb      	ldrh	r3, [r7, #6]
 800b1dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	dbe5      	blt.n	800b1ae <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800b1e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	e040      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da0a      	bge.n	800b208 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800b1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d102      	bne.n	800b1fe <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800b1f8:	f06f 0305 	mvn.w	r3, #5
 800b1fc:	e037      	b.n	800b26e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800b1fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b202:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800b210:	88fb      	ldrh	r3, [r7, #6]
 800b212:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800b218:	797b      	ldrb	r3, [r7, #5]
 800b21a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800b21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800b226:	f107 0314 	add.w	r3, r7, #20
 800b22a:	4619      	mov	r1, r3
 800b22c:	4816      	ldr	r0, [pc, #88]	; (800b288 <netconn_write_vectors_partly+0x168>)
 800b22e:	f7ff fc45 	bl	800aabc <netconn_apimsg>
 800b232:	4603      	mov	r3, r0
 800b234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800b238:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d114      	bne.n	800b26a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800b240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800b246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b24a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800b24c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b258:	429a      	cmp	r2, r3
 800b25a:	d006      	beq.n	800b26a <netconn_write_vectors_partly+0x14a>
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <netconn_write_vectors_partly+0x158>)
 800b25e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b262:	490a      	ldr	r1, [pc, #40]	; (800b28c <netconn_write_vectors_partly+0x16c>)
 800b264:	4806      	ldr	r0, [pc, #24]	; (800b280 <netconn_write_vectors_partly+0x160>)
 800b266:	f00c fde3 	bl	8017e30 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800b26a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3748      	adds	r7, #72	; 0x48
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	0801af40 	.word	0x0801af40
 800b27c:	0801b20c 	.word	0x0801b20c
 800b280:	0801af98 	.word	0x0801af98
 800b284:	0801b228 	.word	0x0801b228
 800b288:	0800c705 	.word	0x0800c705
 800b28c:	0801b24c 	.word	0x0801b24c

0800b290 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08c      	sub	sp, #48	; 0x30
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d109      	bne.n	800b2b6 <netconn_close_shutdown+0x26>
 800b2a2:	4b0f      	ldr	r3, [pc, #60]	; (800b2e0 <netconn_close_shutdown+0x50>)
 800b2a4:	f240 4247 	movw	r2, #1095	; 0x447
 800b2a8:	490e      	ldr	r1, [pc, #56]	; (800b2e4 <netconn_close_shutdown+0x54>)
 800b2aa:	480f      	ldr	r0, [pc, #60]	; (800b2e8 <netconn_close_shutdown+0x58>)
 800b2ac:	f00c fdc0 	bl	8017e30 <iprintf>
 800b2b0:	f06f 030f 	mvn.w	r3, #15
 800b2b4:	e010      	b.n	800b2d8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b2be:	2329      	movs	r3, #41	; 0x29
 800b2c0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b2c2:	f107 030c 	add.w	r3, r7, #12
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4808      	ldr	r0, [pc, #32]	; (800b2ec <netconn_close_shutdown+0x5c>)
 800b2ca:	f7ff fbf7 	bl	800aabc <netconn_apimsg>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b2d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3730      	adds	r7, #48	; 0x30
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	0801af40 	.word	0x0801af40
 800b2e4:	0801b270 	.word	0x0801b270
 800b2e8:	0801af98 	.word	0x0801af98
 800b2ec:	0800c819 	.word	0x0800c819

0800b2f0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b2f8:	2103      	movs	r1, #3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ffc8 	bl	800b290 <netconn_close_shutdown>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <netconn_err+0x12>
    return ERR_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	e00d      	b.n	800b338 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b31c:	f00c fb74 	bl	8017a08 <sys_arch_protect>
 800b320:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7a1b      	ldrb	r3, [r3, #8]
 800b326:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f00c fb78 	bl	8017a24 <sys_arch_unprotect>
  return err;
 800b334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b34a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b34e:	f113 0f0d 	cmn.w	r3, #13
 800b352:	d009      	beq.n	800b368 <lwip_netconn_err_to_msg+0x28>
 800b354:	f113 0f0d 	cmn.w	r3, #13
 800b358:	dc0c      	bgt.n	800b374 <lwip_netconn_err_to_msg+0x34>
 800b35a:	f113 0f0f 	cmn.w	r3, #15
 800b35e:	d007      	beq.n	800b370 <lwip_netconn_err_to_msg+0x30>
 800b360:	f113 0f0e 	cmn.w	r3, #14
 800b364:	d002      	beq.n	800b36c <lwip_netconn_err_to_msg+0x2c>
 800b366:	e005      	b.n	800b374 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b368:	4b0a      	ldr	r3, [pc, #40]	; (800b394 <lwip_netconn_err_to_msg+0x54>)
 800b36a:	e00e      	b.n	800b38a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b36c:	4b0a      	ldr	r3, [pc, #40]	; (800b398 <lwip_netconn_err_to_msg+0x58>)
 800b36e:	e00c      	b.n	800b38a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b370:	4b0a      	ldr	r3, [pc, #40]	; (800b39c <lwip_netconn_err_to_msg+0x5c>)
 800b372:	e00a      	b.n	800b38a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <lwip_netconn_err_to_msg+0x48>
 800b37c:	4b08      	ldr	r3, [pc, #32]	; (800b3a0 <lwip_netconn_err_to_msg+0x60>)
 800b37e:	227d      	movs	r2, #125	; 0x7d
 800b380:	4908      	ldr	r1, [pc, #32]	; (800b3a4 <lwip_netconn_err_to_msg+0x64>)
 800b382:	4809      	ldr	r0, [pc, #36]	; (800b3a8 <lwip_netconn_err_to_msg+0x68>)
 800b384:	f00c fd54 	bl	8017e30 <iprintf>
      return NULL;
 800b388:	2300      	movs	r3, #0
  }
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	0801e128 	.word	0x0801e128
 800b398:	0801e129 	.word	0x0801e129
 800b39c:	0801e12a 	.word	0x0801e12a
 800b3a0:	0801b28c 	.word	0x0801b28c
 800b3a4:	0801b2c0 	.word	0x0801b2c0
 800b3a8:	0801b2d0 	.word	0x0801b2d0

0800b3ac <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d105      	bne.n	800b3c8 <lwip_netconn_is_err_msg+0x1c>
 800b3bc:	4b12      	ldr	r3, [pc, #72]	; (800b408 <lwip_netconn_is_err_msg+0x5c>)
 800b3be:	2285      	movs	r2, #133	; 0x85
 800b3c0:	4912      	ldr	r1, [pc, #72]	; (800b40c <lwip_netconn_is_err_msg+0x60>)
 800b3c2:	4813      	ldr	r0, [pc, #76]	; (800b410 <lwip_netconn_is_err_msg+0x64>)
 800b3c4:	f00c fd34 	bl	8017e30 <iprintf>

  if (msg == &netconn_aborted) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a12      	ldr	r2, [pc, #72]	; (800b414 <lwip_netconn_is_err_msg+0x68>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d104      	bne.n	800b3da <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	22f3      	movs	r2, #243	; 0xf3
 800b3d4:	701a      	strb	r2, [r3, #0]
    return 1;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e012      	b.n	800b400 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a0e      	ldr	r2, [pc, #56]	; (800b418 <lwip_netconn_is_err_msg+0x6c>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d104      	bne.n	800b3ec <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	22f2      	movs	r2, #242	; 0xf2
 800b3e6:	701a      	strb	r2, [r3, #0]
    return 1;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e009      	b.n	800b400 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a0b      	ldr	r2, [pc, #44]	; (800b41c <lwip_netconn_is_err_msg+0x70>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d104      	bne.n	800b3fe <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	22f1      	movs	r2, #241	; 0xf1
 800b3f8:	701a      	strb	r2, [r3, #0]
    return 1;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0801b28c 	.word	0x0801b28c
 800b40c:	0801b2f8 	.word	0x0801b2f8
 800b410:	0801b2d0 	.word	0x0801b2d0
 800b414:	0801e128 	.word	0x0801e128
 800b418:	0801e129 	.word	0x0801e129
 800b41c:	0801e12a 	.word	0x0801e12a

0800b420 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <recv_tcp+0x22>
 800b434:	4b36      	ldr	r3, [pc, #216]	; (800b510 <recv_tcp+0xf0>)
 800b436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b43a:	4936      	ldr	r1, [pc, #216]	; (800b514 <recv_tcp+0xf4>)
 800b43c:	4836      	ldr	r0, [pc, #216]	; (800b518 <recv_tcp+0xf8>)
 800b43e:	f00c fcf7 	bl	8017e30 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <recv_tcp+0x36>
 800b448:	4b31      	ldr	r3, [pc, #196]	; (800b510 <recv_tcp+0xf0>)
 800b44a:	f240 122d 	movw	r2, #301	; 0x12d
 800b44e:	4933      	ldr	r1, [pc, #204]	; (800b51c <recv_tcp+0xfc>)
 800b450:	4831      	ldr	r0, [pc, #196]	; (800b518 <recv_tcp+0xf8>)
 800b452:	f00c fced 	bl	8017e30 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d006      	beq.n	800b46c <recv_tcp+0x4c>
 800b45e:	4b2c      	ldr	r3, [pc, #176]	; (800b510 <recv_tcp+0xf0>)
 800b460:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b464:	492e      	ldr	r1, [pc, #184]	; (800b520 <recv_tcp+0x100>)
 800b466:	482c      	ldr	r0, [pc, #176]	; (800b518 <recv_tcp+0xf8>)
 800b468:	f00c fce2 	bl	8017e30 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d102      	bne.n	800b47c <recv_tcp+0x5c>
    return ERR_VAL;
 800b476:	f06f 0305 	mvn.w	r3, #5
 800b47a:	e045      	b.n	800b508 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	429a      	cmp	r2, r3
 800b484:	d006      	beq.n	800b494 <recv_tcp+0x74>
 800b486:	4b22      	ldr	r3, [pc, #136]	; (800b510 <recv_tcp+0xf0>)
 800b488:	f240 1235 	movw	r2, #309	; 0x135
 800b48c:	4925      	ldr	r1, [pc, #148]	; (800b524 <recv_tcp+0x104>)
 800b48e:	4822      	ldr	r0, [pc, #136]	; (800b518 <recv_tcp+0xf8>)
 800b490:	f00c fcce 	bl	8017e30 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3310      	adds	r3, #16
 800b498:	4618      	mov	r0, r3
 800b49a:	f00c f9ab 	bl	80177f4 <sys_mbox_valid>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10d      	bne.n	800b4c0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d008      	beq.n	800b4bc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	891b      	ldrh	r3, [r3, #8]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f004 f839 	bl	800f528 <tcp_recved>
      pbuf_free(p);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f003 f948 	bl	800e74c <pbuf_free>
    }
    return ERR_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e023      	b.n	800b508 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <recv_tcp+0xb2>
    msg = p;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	891b      	ldrh	r3, [r3, #8]
 800b4ce:	83fb      	strh	r3, [r7, #30]
 800b4d0:	e003      	b.n	800b4da <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <recv_tcp+0x108>)
 800b4d4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	3310      	adds	r3, #16
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f00c f925 	bl	8017730 <sys_mbox_trypost>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f0:	e00a      	b.n	800b508 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <recv_tcp+0xe6>
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	8bfa      	ldrh	r2, [r7, #30]
 800b500:	2100      	movs	r1, #0
 800b502:	6978      	ldr	r0, [r7, #20]
 800b504:	4798      	blx	r3
  }

  return ERR_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3720      	adds	r7, #32
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	0801b28c 	.word	0x0801b28c
 800b514:	0801b304 	.word	0x0801b304
 800b518:	0801b2d0 	.word	0x0801b2d0
 800b51c:	0801b328 	.word	0x0801b328
 800b520:	0801b348 	.word	0x0801b348
 800b524:	0801b360 	.word	0x0801b360
 800b528:	0801e12a 	.word	0x0801e12a

0800b52c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d106      	bne.n	800b54e <poll_tcp+0x22>
 800b540:	4b29      	ldr	r3, [pc, #164]	; (800b5e8 <poll_tcp+0xbc>)
 800b542:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b546:	4929      	ldr	r1, [pc, #164]	; (800b5ec <poll_tcp+0xc0>)
 800b548:	4829      	ldr	r0, [pc, #164]	; (800b5f0 <poll_tcp+0xc4>)
 800b54a:	f00c fc71 	bl	8017e30 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	785b      	ldrb	r3, [r3, #1]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d104      	bne.n	800b560 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b556:	2101      	movs	r1, #1
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 ff07 	bl	800c36c <lwip_netconn_do_writemore>
 800b55e:	e016      	b.n	800b58e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d112      	bne.n	800b58e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	6a1b      	ldr	r3, [r3, #32]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00a      	beq.n	800b586 <poll_tcp+0x5a>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	7a5b      	ldrb	r3, [r3, #9]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	7a5a      	ldrb	r2, [r3, #9]
 800b580:	3a01      	subs	r2, #1
 800b582:	b2d2      	uxtb	r2, r2
 800b584:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b586:	2101      	movs	r1, #1
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 fb0f 	bl	800bbac <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	7f1b      	ldrb	r3, [r3, #28]
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b00      	cmp	r3, #0
 800b598:	d021      	beq.n	800b5de <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d01d      	beq.n	800b5de <poll_tcp+0xb2>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b5aa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b5ae:	d316      	bcc.n	800b5de <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d810      	bhi.n	800b5de <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	7f1b      	ldrb	r3, [r3, #28]
 800b5c0:	f023 0310 	bic.w	r3, r3, #16
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <poll_tcp+0xb2>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2102      	movs	r1, #2
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	0801b28c 	.word	0x0801b28c
 800b5ec:	0801b380 	.word	0x0801b380
 800b5f0:	0801b2d0 	.word	0x0801b2d0

0800b5f4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <sent_tcp+0x26>
 800b60c:	4b20      	ldr	r3, [pc, #128]	; (800b690 <sent_tcp+0x9c>)
 800b60e:	f240 1293 	movw	r2, #403	; 0x193
 800b612:	4920      	ldr	r1, [pc, #128]	; (800b694 <sent_tcp+0xa0>)
 800b614:	4820      	ldr	r0, [pc, #128]	; (800b698 <sent_tcp+0xa4>)
 800b616:	f00c fc0b 	bl	8017e30 <iprintf>

  if (conn) {
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d032      	beq.n	800b686 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	785b      	ldrb	r3, [r3, #1]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d104      	bne.n	800b632 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b628:	2101      	movs	r1, #1
 800b62a:	6978      	ldr	r0, [r7, #20]
 800b62c:	f000 fe9e 	bl	800c36c <lwip_netconn_do_writemore>
 800b630:	e007      	b.n	800b642 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b04      	cmp	r3, #4
 800b638:	d103      	bne.n	800b642 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b63a:	2101      	movs	r1, #1
 800b63c:	6978      	ldr	r0, [r7, #20]
 800b63e:	f000 fab5 	bl	800bbac <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d01d      	beq.n	800b686 <sent_tcp+0x92>
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b652:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b656:	d316      	bcc.n	800b686 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b660:	2b04      	cmp	r3, #4
 800b662:	d810      	bhi.n	800b686 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	7f1b      	ldrb	r3, [r3, #28]
 800b668:	f023 0310 	bic.w	r3, r3, #16
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	2b00      	cmp	r3, #0
 800b678:	d005      	beq.n	800b686 <sent_tcp+0x92>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	2102      	movs	r1, #2
 800b682:	6978      	ldr	r0, [r7, #20]
 800b684:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	0801b28c 	.word	0x0801b28c
 800b694:	0801b380 	.word	0x0801b380
 800b698:	0801b2d0 	.word	0x0801b2d0

0800b69c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <err_tcp+0x24>
 800b6b2:	4b5f      	ldr	r3, [pc, #380]	; (800b830 <err_tcp+0x194>)
 800b6b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b6b8:	495e      	ldr	r1, [pc, #376]	; (800b834 <err_tcp+0x198>)
 800b6ba:	485f      	ldr	r0, [pc, #380]	; (800b838 <err_tcp+0x19c>)
 800b6bc:	f00c fbb8 	bl	8017e30 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b6c0:	f00c f9a2 	bl	8017a08 <sys_arch_protect>
 800b6c4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	78fa      	ldrb	r2, [r7, #3]
 800b6d0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	7f1b      	ldrb	r3, [r3, #28]
 800b6d6:	f043 0301 	orr.w	r3, r3, #1
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	785b      	ldrb	r3, [r3, #1]
 800b6e4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b6ec:	69b8      	ldr	r0, [r7, #24]
 800b6ee:	f00c f999 	bl	8017a24 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d005      	beq.n	800b706 <err_tcp+0x6a>
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	2200      	movs	r2, #0
 800b700:	2104      	movs	r1, #4
 800b702:	69f8      	ldr	r0, [r7, #28]
 800b704:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d005      	beq.n	800b71a <err_tcp+0x7e>
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	2200      	movs	r2, #0
 800b714:	2100      	movs	r1, #0
 800b716:	69f8      	ldr	r0, [r7, #28]
 800b718:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <err_tcp+0x92>
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b726:	2200      	movs	r2, #0
 800b728:	2102      	movs	r1, #2
 800b72a:	69f8      	ldr	r0, [r7, #28]
 800b72c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b72e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b732:	4618      	mov	r0, r3
 800b734:	f7ff fe04 	bl	800b340 <lwip_netconn_err_to_msg>
 800b738:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	3310      	adds	r3, #16
 800b73e:	4618      	mov	r0, r3
 800b740:	f00c f858 	bl	80177f4 <sys_mbox_valid>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	3310      	adds	r3, #16
 800b74e:	6939      	ldr	r1, [r7, #16]
 800b750:	4618      	mov	r0, r3
 800b752:	f00b ffed 	bl	8017730 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	3314      	adds	r3, #20
 800b75a:	4618      	mov	r0, r3
 800b75c:	f00c f84a 	bl	80177f4 <sys_mbox_valid>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d005      	beq.n	800b772 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	3314      	adds	r3, #20
 800b76a:	6939      	ldr	r1, [r7, #16]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f00b ffdf 	bl	8017730 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d005      	beq.n	800b784 <err_tcp+0xe8>
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d002      	beq.n	800b784 <err_tcp+0xe8>
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	2b03      	cmp	r3, #3
 800b782:	d143      	bne.n	800b80c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	7f1b      	ldrb	r3, [r3, #28]
 800b788:	f003 0304 	and.w	r3, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bf14      	ite	ne
 800b790:	2301      	movne	r3, #1
 800b792:	2300      	moveq	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	7f1b      	ldrb	r3, [r3, #28]
 800b79c:	f023 0304 	bic.w	r3, r3, #4
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d13b      	bne.n	800b824 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d106      	bne.n	800b7c2 <err_tcp+0x126>
 800b7b4:	4b1e      	ldr	r3, [pc, #120]	; (800b830 <err_tcp+0x194>)
 800b7b6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b7ba:	4920      	ldr	r1, [pc, #128]	; (800b83c <err_tcp+0x1a0>)
 800b7bc:	481e      	ldr	r0, [pc, #120]	; (800b838 <err_tcp+0x19c>)
 800b7be:	f00c fb37 	bl	8017e30 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d104      	bne.n	800b7d2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	711a      	strb	r2, [r3, #4]
 800b7d0:	e003      	b.n	800b7da <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b7e4:	68b8      	ldr	r0, [r7, #8]
 800b7e6:	f00c f893 	bl	8017910 <sys_sem_valid>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <err_tcp+0x162>
 800b7f0:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <err_tcp+0x194>)
 800b7f2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b7f6:	4912      	ldr	r1, [pc, #72]	; (800b840 <err_tcp+0x1a4>)
 800b7f8:	480f      	ldr	r0, [pc, #60]	; (800b838 <err_tcp+0x19c>)
 800b7fa:	f00c fb19 	bl	8017e30 <iprintf>
      conn->current_msg = NULL;
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	2200      	movs	r2, #0
 800b802:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b804:	68b8      	ldr	r0, [r7, #8]
 800b806:	f00c f869 	bl	80178dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b80a:	e00b      	b.n	800b824 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d008      	beq.n	800b826 <err_tcp+0x18a>
 800b814:	4b06      	ldr	r3, [pc, #24]	; (800b830 <err_tcp+0x194>)
 800b816:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b81a:	490a      	ldr	r1, [pc, #40]	; (800b844 <err_tcp+0x1a8>)
 800b81c:	4806      	ldr	r0, [pc, #24]	; (800b838 <err_tcp+0x19c>)
 800b81e:	f00c fb07 	bl	8017e30 <iprintf>
  }
}
 800b822:	e000      	b.n	800b826 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b824:	bf00      	nop
}
 800b826:	bf00      	nop
 800b828:	3720      	adds	r7, #32
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	0801b28c 	.word	0x0801b28c
 800b834:	0801b380 	.word	0x0801b380
 800b838:	0801b2d0 	.word	0x0801b2d0
 800b83c:	0801b390 	.word	0x0801b390
 800b840:	0801b3ac 	.word	0x0801b3ac
 800b844:	0801b3c8 	.word	0x0801b3c8

0800b848 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f004 fe43 	bl	80104e4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b85e:	490a      	ldr	r1, [pc, #40]	; (800b888 <setup_tcp+0x40>)
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f004 fe51 	bl	8010508 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b866:	4909      	ldr	r1, [pc, #36]	; (800b88c <setup_tcp+0x44>)
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f004 fe6f 	bl	801054c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b86e:	2202      	movs	r2, #2
 800b870:	4907      	ldr	r1, [pc, #28]	; (800b890 <setup_tcp+0x48>)
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f004 fec6 	bl	8010604 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b878:	4906      	ldr	r1, [pc, #24]	; (800b894 <setup_tcp+0x4c>)
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f004 fe88 	bl	8010590 <tcp_err>
}
 800b880:	bf00      	nop
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	0800b421 	.word	0x0800b421
 800b88c:	0800b5f5 	.word	0x0800b5f5
 800b890:	0800b52d 	.word	0x0800b52d
 800b894:	0800b69d 	.word	0x0800b69d

0800b898 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b898:	b590      	push	{r4, r7, lr}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d006      	beq.n	800b8bc <pcb_new+0x24>
 800b8ae:	4b18      	ldr	r3, [pc, #96]	; (800b910 <pcb_new+0x78>)
 800b8b0:	f240 2265 	movw	r2, #613	; 0x265
 800b8b4:	4917      	ldr	r1, [pc, #92]	; (800b914 <pcb_new+0x7c>)
 800b8b6:	4818      	ldr	r0, [pc, #96]	; (800b918 <pcb_new+0x80>)
 800b8b8:	f00c faba 	bl	8017e30 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8c6:	2b10      	cmp	r3, #16
 800b8c8:	d112      	bne.n	800b8f0 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681c      	ldr	r4, [r3, #0]
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f004 fdf9 	bl	80104c8 <tcp_new_ip_type>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff ffad 	bl	800b848 <setup_tcp>
      }
      break;
 800b8ee:	e003      	b.n	800b8f8 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	22fa      	movs	r2, #250	; 0xfa
 800b8f4:	711a      	strb	r2, [r3, #4]
      return;
 800b8f6:	e008      	b.n	800b90a <pcb_new+0x72>
      break;
 800b8f8:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <pcb_new+0x72>
    msg->err = ERR_MEM;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	22ff      	movs	r2, #255	; 0xff
 800b908:	711a      	strb	r2, [r3, #4]
  }
}
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd90      	pop	{r4, r7, pc}
 800b910:	0801b28c 	.word	0x0801b28c
 800b914:	0801b40c 	.word	0x0801b40c
 800b918:	0801b2d0 	.word	0x0801b2d0

0800b91c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d102      	bne.n	800b93e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff ffad 	bl	800b898 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	6039      	str	r1, [r7, #0]
 800b952:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b958:	2006      	movs	r0, #6
 800b95a:	f001 ffe1 	bl	800d920 <memp_malloc>
 800b95e:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <netconn_alloc+0x22>
    return NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	e04d      	b.n	800ba06 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2200      	movs	r2, #0
 800b96e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	79fa      	ldrb	r2, [r7, #7]
 800b974:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2200      	movs	r2, #0
 800b97a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b97c:	79fb      	ldrb	r3, [r7, #7]
 800b97e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b982:	2b10      	cmp	r3, #16
 800b984:	d10c      	bne.n	800b9a0 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b986:	2306      	movs	r3, #6
 800b988:	60fb      	str	r3, [r7, #12]
      break;
 800b98a:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	3310      	adds	r3, #16
 800b990:	68f9      	ldr	r1, [r7, #12]
 800b992:	4618      	mov	r0, r3
 800b994:	f00b fea0 	bl	80176d8 <sys_mbox_new>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d008      	beq.n	800b9b0 <netconn_alloc+0x68>
    goto free_and_return;
 800b99e:	e02d      	b.n	800b9fc <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b9a0:	4b1b      	ldr	r3, [pc, #108]	; (800ba10 <netconn_alloc+0xc8>)
 800b9a2:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b9a6:	491b      	ldr	r1, [pc, #108]	; (800ba14 <netconn_alloc+0xcc>)
 800b9a8:	481b      	ldr	r0, [pc, #108]	; (800ba18 <netconn_alloc+0xd0>)
 800b9aa:	f00c fa41 	bl	8017e30 <iprintf>
      goto free_and_return;
 800b9ae:	e025      	b.n	800b9fc <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f00b ff3a 	bl	8017830 <sys_sem_new>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d005      	beq.n	800b9ce <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	3310      	adds	r3, #16
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f00b fea0 	bl	801770c <sys_mbox_free>
    goto free_and_return;
 800b9cc:	e016      	b.n	800b9fc <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f00b ff1f 	bl	8017816 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9e4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	7dfa      	ldrb	r2, [r7, #23]
 800b9f6:	771a      	strb	r2, [r3, #28]
  return conn;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	e004      	b.n	800ba06 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b9fc:	6939      	ldr	r1, [r7, #16]
 800b9fe:	2006      	movs	r0, #6
 800ba00:	f002 f804 	bl	800da0c <memp_free>
  return NULL;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3718      	adds	r7, #24
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	0801b28c 	.word	0x0801b28c
 800ba14:	0801b42c 	.word	0x0801b42c
 800ba18:	0801b2d0 	.word	0x0801b2d0

0800ba1c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d006      	beq.n	800ba3a <netconn_free+0x1e>
 800ba2c:	4b1b      	ldr	r3, [pc, #108]	; (800ba9c <netconn_free+0x80>)
 800ba2e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ba32:	491b      	ldr	r1, [pc, #108]	; (800baa0 <netconn_free+0x84>)
 800ba34:	481b      	ldr	r0, [pc, #108]	; (800baa4 <netconn_free+0x88>)
 800ba36:	f00c f9fb 	bl	8017e30 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f00b fed8 	bl	80177f4 <sys_mbox_valid>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d006      	beq.n	800ba58 <netconn_free+0x3c>
 800ba4a:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <netconn_free+0x80>)
 800ba4c:	f240 3223 	movw	r2, #803	; 0x323
 800ba50:	4915      	ldr	r1, [pc, #84]	; (800baa8 <netconn_free+0x8c>)
 800ba52:	4814      	ldr	r0, [pc, #80]	; (800baa4 <netconn_free+0x88>)
 800ba54:	f00c f9ec 	bl	8017e30 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3314      	adds	r3, #20
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f00b fec9 	bl	80177f4 <sys_mbox_valid>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d006      	beq.n	800ba76 <netconn_free+0x5a>
 800ba68:	4b0c      	ldr	r3, [pc, #48]	; (800ba9c <netconn_free+0x80>)
 800ba6a:	f240 3226 	movw	r2, #806	; 0x326
 800ba6e:	490f      	ldr	r1, [pc, #60]	; (800baac <netconn_free+0x90>)
 800ba70:	480c      	ldr	r0, [pc, #48]	; (800baa4 <netconn_free+0x88>)
 800ba72:	f00c f9dd 	bl	8017e30 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	330c      	adds	r3, #12
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f00b ff3b 	bl	80178f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	330c      	adds	r3, #12
 800ba84:	4618      	mov	r0, r3
 800ba86:	f00b ff54 	bl	8017932 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ba8a:	6879      	ldr	r1, [r7, #4]
 800ba8c:	2006      	movs	r0, #6
 800ba8e:	f001 ffbd 	bl	800da0c <memp_free>
}
 800ba92:	bf00      	nop
 800ba94:	3708      	adds	r7, #8
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	0801b28c 	.word	0x0801b28c
 800baa0:	0801b454 	.word	0x0801b454
 800baa4:	0801b2d0 	.word	0x0801b2d0
 800baa8:	0801b484 	.word	0x0801b484
 800baac:	0801b4c0 	.word	0x0801b4c0

0800bab0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3310      	adds	r3, #16
 800babc:	4618      	mov	r0, r3
 800babe:	f00b fe99 	bl	80177f4 <sys_mbox_valid>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d02f      	beq.n	800bb28 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bac8:	e018      	b.n	800bafc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bad2:	2b10      	cmp	r3, #16
 800bad4:	d10e      	bne.n	800baf4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f107 020f 	add.w	r2, r7, #15
 800badc:	4611      	mov	r1, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff fc64 	bl	800b3ac <lwip_netconn_is_err_msg>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d108      	bne.n	800bafc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	4618      	mov	r0, r3
 800baee:	f002 fe2d 	bl	800e74c <pbuf_free>
 800baf2:	e003      	b.n	800bafc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 ff1a 	bl	800c930 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3310      	adds	r3, #16
 800bb00:	f107 0210 	add.w	r2, r7, #16
 800bb04:	4611      	mov	r1, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f00b fe5d 	bl	80177c6 <sys_arch_mbox_tryfetch>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb12:	d1da      	bne.n	800baca <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3310      	adds	r3, #16
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f00b fdf7 	bl	801770c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	3310      	adds	r3, #16
 800bb22:	4618      	mov	r0, r3
 800bb24:	f00b fe77 	bl	8017816 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f00b fe61 	bl	80177f4 <sys_mbox_valid>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d034      	beq.n	800bba2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bb38:	e01d      	b.n	800bb76 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f107 020e 	add.w	r2, r7, #14
 800bb40:	4611      	mov	r1, r2
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7ff fc32 	bl	800b3ac <lwip_netconn_is_err_msg>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d113      	bne.n	800bb76 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff ffac 	bl	800bab0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f003 fbe1 	bl	800f32c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800bb70:	6978      	ldr	r0, [r7, #20]
 800bb72:	f7ff ff53 	bl	800ba1c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	3314      	adds	r3, #20
 800bb7a:	f107 0210 	add.w	r2, r7, #16
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f00b fe20 	bl	80177c6 <sys_arch_mbox_tryfetch>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb8c:	d1d5      	bne.n	800bb3a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3314      	adds	r3, #20
 800bb92:	4618      	mov	r0, r3
 800bb94:	f00b fdba 	bl	801770c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3314      	adds	r3, #20
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f00b fe3a 	bl	8017816 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800bba2:	bf00      	nop
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <lwip_netconn_do_close_internal+0x24>
 800bbc2:	4b87      	ldr	r3, [pc, #540]	; (800bde0 <lwip_netconn_do_close_internal+0x234>)
 800bbc4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800bbc8:	4986      	ldr	r1, [pc, #536]	; (800bde4 <lwip_netconn_do_close_internal+0x238>)
 800bbca:	4887      	ldr	r0, [pc, #540]	; (800bde8 <lwip_netconn_do_close_internal+0x23c>)
 800bbcc:	f00c f930 	bl	8017e30 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d006      	beq.n	800bbea <lwip_netconn_do_close_internal+0x3e>
 800bbdc:	4b80      	ldr	r3, [pc, #512]	; (800bde0 <lwip_netconn_do_close_internal+0x234>)
 800bbde:	f240 32a3 	movw	r2, #931	; 0x3a3
 800bbe2:	4982      	ldr	r1, [pc, #520]	; (800bdec <lwip_netconn_do_close_internal+0x240>)
 800bbe4:	4880      	ldr	r0, [pc, #512]	; (800bde8 <lwip_netconn_do_close_internal+0x23c>)
 800bbe6:	f00c f923 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	d006      	beq.n	800bc00 <lwip_netconn_do_close_internal+0x54>
 800bbf2:	4b7b      	ldr	r3, [pc, #492]	; (800bde0 <lwip_netconn_do_close_internal+0x234>)
 800bbf4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800bbf8:	497d      	ldr	r1, [pc, #500]	; (800bdf0 <lwip_netconn_do_close_internal+0x244>)
 800bbfa:	487b      	ldr	r0, [pc, #492]	; (800bde8 <lwip_netconn_do_close_internal+0x23c>)
 800bbfc:	f00c f918 	bl	8017e30 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <lwip_netconn_do_close_internal+0x6a>
 800bc08:	4b75      	ldr	r3, [pc, #468]	; (800bde0 <lwip_netconn_do_close_internal+0x234>)
 800bc0a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800bc0e:	4979      	ldr	r1, [pc, #484]	; (800bdf4 <lwip_netconn_do_close_internal+0x248>)
 800bc10:	4875      	ldr	r0, [pc, #468]	; (800bde8 <lwip_netconn_do_close_internal+0x23c>)
 800bc12:	f00c f90d 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a1b      	ldr	r3, [r3, #32]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d106      	bne.n	800bc2c <lwip_netconn_do_close_internal+0x80>
 800bc1e:	4b70      	ldr	r3, [pc, #448]	; (800bde0 <lwip_netconn_do_close_internal+0x234>)
 800bc20:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bc24:	4974      	ldr	r1, [pc, #464]	; (800bdf8 <lwip_netconn_do_close_internal+0x24c>)
 800bc26:	4870      	ldr	r0, [pc, #448]	; (800bde8 <lwip_netconn_do_close_internal+0x23c>)
 800bc28:	f00c f902 	bl	8017e30 <iprintf>

  tpcb = conn->pcb.tcp;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	7a1b      	ldrb	r3, [r3, #8]
 800bc38:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800bc42:	7bfb      	ldrb	r3, [r7, #15]
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d102      	bne.n	800bc56 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800bc50:	2301      	movs	r3, #1
 800bc52:	75bb      	strb	r3, [r7, #22]
 800bc54:	e01f      	b.n	800bc96 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00e      	beq.n	800bc7a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800bc60:	2b05      	cmp	r3, #5
 800bc62:	d007      	beq.n	800bc74 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800bc68:	2b06      	cmp	r3, #6
 800bc6a:	d003      	beq.n	800bc74 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800bc70:	2b08      	cmp	r3, #8
 800bc72:	d102      	bne.n	800bc7a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800bc74:	2301      	movs	r3, #1
 800bc76:	75bb      	strb	r3, [r7, #22]
 800bc78:	e00d      	b.n	800bc96 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800bc7a:	7b7b      	ldrb	r3, [r7, #13]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d008      	beq.n	800bc92 <lwip_netconn_do_close_internal+0xe6>
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	8b5b      	ldrh	r3, [r3, #26]
 800bc84:	f003 0310 	and.w	r3, r3, #16
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	75bb      	strb	r3, [r7, #22]
 800bc90:	e001      	b.n	800bc96 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800bc96:	7dbb      	ldrb	r3, [r7, #22]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	6938      	ldr	r0, [r7, #16]
 800bca0:	f004 fc20 	bl	80104e4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	7d1b      	ldrb	r3, [r3, #20]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d104      	bne.n	800bcb6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800bcac:	2100      	movs	r1, #0
 800bcae:	6938      	ldr	r0, [r7, #16]
 800bcb0:	f004 fc90 	bl	80105d4 <tcp_accept>
 800bcb4:	e01d      	b.n	800bcf2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800bcb6:	7bbb      	ldrb	r3, [r7, #14]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d007      	beq.n	800bccc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6938      	ldr	r0, [r7, #16]
 800bcc0:	f004 fc22 	bl	8010508 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	6938      	ldr	r0, [r7, #16]
 800bcc8:	f004 fc84 	bl	80105d4 <tcp_accept>
    }
    if (shut_tx) {
 800bccc:	7b7b      	ldrb	r3, [r7, #13]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6938      	ldr	r0, [r7, #16]
 800bcd6:	f004 fc39 	bl	801054c <tcp_sent>
    }
    if (shut_close) {
 800bcda:	7dbb      	ldrb	r3, [r7, #22]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d008      	beq.n	800bcf2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	6938      	ldr	r0, [r7, #16]
 800bce6:	f004 fc8d 	bl	8010604 <tcp_poll>
      tcp_err(tpcb, NULL);
 800bcea:	2100      	movs	r1, #0
 800bcec:	6938      	ldr	r0, [r7, #16]
 800bcee:	f004 fc4f 	bl	8010590 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800bcf2:	7dbb      	ldrb	r3, [r7, #22]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800bcf8:	6938      	ldr	r0, [r7, #16]
 800bcfa:	f003 f9d1 	bl	800f0a0 <tcp_close>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]
 800bd02:	e007      	b.n	800bd14 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
 800bd06:	7b7a      	ldrb	r2, [r7, #13]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6938      	ldr	r0, [r7, #16]
 800bd0c:	f003 f9f4 	bl	800f0f8 <tcp_shutdown>
 800bd10:	4603      	mov	r3, r0
 800bd12:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800bd14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	757b      	strb	r3, [r7, #21]
 800bd20:	e016      	b.n	800bd50 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800bd22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd2a:	d10f      	bne.n	800bd4c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	7a5b      	ldrb	r3, [r3, #9]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10c      	bne.n	800bd50 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800bd36:	2301      	movs	r3, #1
 800bd38:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800bd3a:	7dbb      	ldrb	r3, [r7, #22]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800bd40:	6938      	ldr	r0, [r7, #16]
 800bd42:	f003 faf3 	bl	800f32c <tcp_abort>
          err = ERR_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	75fb      	strb	r3, [r7, #23]
 800bd4a:	e001      	b.n	800bd50 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bd50:	7d7b      	ldrb	r3, [r7, #21]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d052      	beq.n	800bdfc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	7dfa      	ldrb	r2, [r7, #23]
 800bd66:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800bd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d129      	bne.n	800bdd0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800bd7c:	7dbb      	ldrb	r3, [r7, #22]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00c      	beq.n	800bd9c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <lwip_netconn_do_close_internal+0x1f0>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2200      	movs	r2, #0
 800bd96:	2104      	movs	r1, #4
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	4798      	blx	r3
      }
      if (shut_rx) {
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d009      	beq.n	800bdb6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <lwip_netconn_do_close_internal+0x20a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
      }
      if (shut_tx) {
 800bdb6:	7b7b      	ldrb	r3, [r7, #13]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d009      	beq.n	800bdd0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d005      	beq.n	800bdd0 <lwip_netconn_do_close_internal+0x224>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2102      	movs	r1, #2
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d002      	beq.n	800bddc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bdd6:	68b8      	ldr	r0, [r7, #8]
 800bdd8:	f00b fd80 	bl	80178dc <sys_sem_signal>
    }
    return ERR_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e03c      	b.n	800be5a <lwip_netconn_do_close_internal+0x2ae>
 800bde0:	0801b28c 	.word	0x0801b28c
 800bde4:	0801b4fc 	.word	0x0801b4fc
 800bde8:	0801b2d0 	.word	0x0801b2d0
 800bdec:	0801b50c 	.word	0x0801b50c
 800bdf0:	0801b52c 	.word	0x0801b52c
 800bdf4:	0801b550 	.word	0x0801b550
 800bdf8:	0801b390 	.word	0x0801b390
  }
  if (!close_finished) {
 800bdfc:	7d7b      	ldrb	r3, [r7, #21]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d11e      	bne.n	800be40 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	7d1b      	ldrb	r3, [r3, #20]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d106      	bne.n	800be18 <lwip_netconn_do_close_internal+0x26c>
 800be0a:	4b16      	ldr	r3, [pc, #88]	; (800be64 <lwip_netconn_do_close_internal+0x2b8>)
 800be0c:	f240 4241 	movw	r2, #1089	; 0x441
 800be10:	4915      	ldr	r1, [pc, #84]	; (800be68 <lwip_netconn_do_close_internal+0x2bc>)
 800be12:	4816      	ldr	r0, [pc, #88]	; (800be6c <lwip_netconn_do_close_internal+0x2c0>)
 800be14:	f00c f80c 	bl	8017e30 <iprintf>
    if (shut_tx) {
 800be18:	7b7b      	ldrb	r3, [r7, #13]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800be1e:	4914      	ldr	r1, [pc, #80]	; (800be70 <lwip_netconn_do_close_internal+0x2c4>)
 800be20:	6938      	ldr	r0, [r7, #16]
 800be22:	f004 fb93 	bl	801054c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800be26:	2201      	movs	r2, #1
 800be28:	4912      	ldr	r1, [pc, #72]	; (800be74 <lwip_netconn_do_close_internal+0x2c8>)
 800be2a:	6938      	ldr	r0, [r7, #16]
 800be2c:	f004 fbea 	bl	8010604 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800be30:	4911      	ldr	r1, [pc, #68]	; (800be78 <lwip_netconn_do_close_internal+0x2cc>)
 800be32:	6938      	ldr	r0, [r7, #16]
 800be34:	f004 fbac 	bl	8010590 <tcp_err>
    tcp_arg(tpcb, conn);
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	6938      	ldr	r0, [r7, #16]
 800be3c:	f004 fb52 	bl	80104e4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800be40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <lwip_netconn_do_close_internal+0x2aa>
 800be48:	4b06      	ldr	r3, [pc, #24]	; (800be64 <lwip_netconn_do_close_internal+0x2b8>)
 800be4a:	f240 424d 	movw	r2, #1101	; 0x44d
 800be4e:	490b      	ldr	r1, [pc, #44]	; (800be7c <lwip_netconn_do_close_internal+0x2d0>)
 800be50:	4806      	ldr	r0, [pc, #24]	; (800be6c <lwip_netconn_do_close_internal+0x2c0>)
 800be52:	f00b ffed 	bl	8017e30 <iprintf>
  return err;
 800be56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	0801b28c 	.word	0x0801b28c
 800be68:	0801b564 	.word	0x0801b564
 800be6c:	0801b2d0 	.word	0x0801b2d0
 800be70:	0800b5f5 	.word	0x0800b5f5
 800be74:	0800b52d 	.word	0x0800b52d
 800be78:	0800b69d 	.word	0x0800b69d
 800be7c:	0801b588 	.word	0x0801b588

0800be80 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	785b      	ldrb	r3, [r3, #1]
 800be92:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00d      	beq.n	800beb6 <lwip_netconn_do_delconn+0x36>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bea4:	2b10      	cmp	r3, #16
 800bea6:	d006      	beq.n	800beb6 <lwip_netconn_do_delconn+0x36>
 800bea8:	4b59      	ldr	r3, [pc, #356]	; (800c010 <lwip_netconn_do_delconn+0x190>)
 800beaa:	f240 425e 	movw	r2, #1118	; 0x45e
 800beae:	4959      	ldr	r1, [pc, #356]	; (800c014 <lwip_netconn_do_delconn+0x194>)
 800beb0:	4859      	ldr	r0, [pc, #356]	; (800c018 <lwip_netconn_do_delconn+0x198>)
 800beb2:	f00b ffbd 	bl	8017e30 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d005      	beq.n	800bec8 <lwip_netconn_do_delconn+0x48>
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d002      	beq.n	800bec8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d109      	bne.n	800bedc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	2b03      	cmp	r3, #3
 800becc:	d10a      	bne.n	800bee4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	7f1b      	ldrb	r3, [r3, #28]
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	22fb      	movs	r2, #251	; 0xfb
 800bee0:	711a      	strb	r2, [r3, #4]
 800bee2:	e089      	b.n	800bff8 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d10d      	bne.n	800bf06 <lwip_netconn_do_delconn+0x86>
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	7f1b      	ldrb	r3, [r3, #28]
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d106      	bne.n	800bf06 <lwip_netconn_do_delconn+0x86>
 800bef8:	4b45      	ldr	r3, [pc, #276]	; (800c010 <lwip_netconn_do_delconn+0x190>)
 800befa:	f240 427a 	movw	r2, #1146	; 0x47a
 800befe:	4947      	ldr	r1, [pc, #284]	; (800c01c <lwip_netconn_do_delconn+0x19c>)
 800bf00:	4845      	ldr	r0, [pc, #276]	; (800c018 <lwip_netconn_do_delconn+0x198>)
 800bf02:	f00b ff95 	bl	8017e30 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fdcd 	bl	800bab0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d051      	beq.n	800bfc4 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf2a:	2b10      	cmp	r3, #16
 800bf2c:	d145      	bne.n	800bfba <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <lwip_netconn_do_delconn+0xc6>
 800bf38:	4b35      	ldr	r3, [pc, #212]	; (800c010 <lwip_netconn_do_delconn+0x190>)
 800bf3a:	f240 4294 	movw	r2, #1172	; 0x494
 800bf3e:	4938      	ldr	r1, [pc, #224]	; (800c020 <lwip_netconn_do_delconn+0x1a0>)
 800bf40:	4835      	ldr	r0, [pc, #212]	; (800c018 <lwip_netconn_do_delconn+0x198>)
 800bf42:	f00b ff75 	bl	8017e30 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2204      	movs	r2, #4
 800bf4c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2203      	movs	r2, #3
 800bf52:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2100      	movs	r1, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff fe22 	bl	800bbac <lwip_netconn_do_close_internal>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d04b      	beq.n	800c006 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	785b      	ldrb	r3, [r3, #1]
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d006      	beq.n	800bf86 <lwip_netconn_do_delconn+0x106>
 800bf78:	4b25      	ldr	r3, [pc, #148]	; (800c010 <lwip_netconn_do_delconn+0x190>)
 800bf7a:	f240 429a 	movw	r2, #1178	; 0x49a
 800bf7e:	4929      	ldr	r1, [pc, #164]	; (800c024 <lwip_netconn_do_delconn+0x1a4>)
 800bf80:	4825      	ldr	r0, [pc, #148]	; (800c018 <lwip_netconn_do_delconn+0x198>)
 800bf82:	f00b ff55 	bl	8017e30 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bf86:	4828      	ldr	r0, [pc, #160]	; (800c028 <lwip_netconn_do_delconn+0x1a8>)
 800bf88:	f00b fd11 	bl	80179ae <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	2100      	movs	r1, #0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f00b fc70 	bl	801787a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bf9a:	4823      	ldr	r0, [pc, #140]	; (800c028 <lwip_netconn_do_delconn+0x1a8>)
 800bf9c:	f00b fcf8 	bl	8017990 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d02d      	beq.n	800c006 <lwip_netconn_do_delconn+0x186>
 800bfaa:	4b19      	ldr	r3, [pc, #100]	; (800c010 <lwip_netconn_do_delconn+0x190>)
 800bfac:	f240 429e 	movw	r2, #1182	; 0x49e
 800bfb0:	491c      	ldr	r1, [pc, #112]	; (800c024 <lwip_netconn_do_delconn+0x1a4>)
 800bfb2:	4819      	ldr	r0, [pc, #100]	; (800c018 <lwip_netconn_do_delconn+0x198>)
 800bfb4:	f00b ff3c 	bl	8017e30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bfb8:	e025      	b.n	800c006 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800bfba:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d007      	beq.n	800bfde <lwip_netconn_do_delconn+0x15e>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	6810      	ldr	r0, [r2, #0]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d007      	beq.n	800bff8 <lwip_netconn_do_delconn+0x178>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	6810      	ldr	r0, [r2, #0]
 800bff2:	2200      	movs	r2, #0
 800bff4:	2102      	movs	r1, #2
 800bff6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	4618      	mov	r0, r3
 800c000:	f00b fc86 	bl	8017910 <sys_sem_valid>
 800c004:	e000      	b.n	800c008 <lwip_netconn_do_delconn+0x188>
          return;
 800c006:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	0801b28c 	.word	0x0801b28c
 800c014:	0801b598 	.word	0x0801b598
 800c018:	0801b2d0 	.word	0x0801b2d0
 800c01c:	0801b5ac 	.word	0x0801b5ac
 800c020:	0801b5cc 	.word	0x0801b5cc
 800c024:	0801b5e8 	.word	0x0801b5e8
 800c028:	20009b20 	.word	0x20009b20

0800c02c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d016      	beq.n	800c070 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c04c:	2b10      	cmp	r3, #16
 800c04e:	d10c      	bne.n	800c06a <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6858      	ldr	r0, [r3, #4]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6899      	ldr	r1, [r3, #8]
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	899b      	ldrh	r3, [r3, #12]
 800c05e:	461a      	mov	r2, r3
 800c060:	f003 f970 	bl	800f344 <tcp_bind>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
        break;
 800c068:	e004      	b.n	800c074 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800c06a:	23fa      	movs	r3, #250	; 0xfa
 800c06c:	73fb      	strb	r3, [r7, #15]
        break;
 800c06e:	e001      	b.n	800c074 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800c070:	23fa      	movs	r3, #250	; 0xfa
 800c072:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	7bfa      	ldrb	r2, [r7, #15]
 800c078:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	4613      	mov	r3, r2
 800c090:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800c092:	2300      	movs	r3, #0
 800c094:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800c0a0:	f06f 0305 	mvn.w	r3, #5
 800c0a4:	e070      	b.n	800c188 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d006      	beq.n	800c0bc <lwip_netconn_do_connected+0x38>
 800c0ae:	4b38      	ldr	r3, [pc, #224]	; (800c190 <lwip_netconn_do_connected+0x10c>)
 800c0b0:	f240 5223 	movw	r2, #1315	; 0x523
 800c0b4:	4937      	ldr	r1, [pc, #220]	; (800c194 <lwip_netconn_do_connected+0x110>)
 800c0b6:	4838      	ldr	r0, [pc, #224]	; (800c198 <lwip_netconn_do_connected+0x114>)
 800c0b8:	f00b feba 	bl	8017e30 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d10c      	bne.n	800c0de <lwip_netconn_do_connected+0x5a>
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	7f1b      	ldrb	r3, [r3, #28]
 800c0c8:	f003 0304 	and.w	r3, r3, #4
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d106      	bne.n	800c0de <lwip_netconn_do_connected+0x5a>
 800c0d0:	4b2f      	ldr	r3, [pc, #188]	; (800c190 <lwip_netconn_do_connected+0x10c>)
 800c0d2:	f240 5224 	movw	r2, #1316	; 0x524
 800c0d6:	4931      	ldr	r1, [pc, #196]	; (800c19c <lwip_netconn_do_connected+0x118>)
 800c0d8:	482f      	ldr	r0, [pc, #188]	; (800c198 <lwip_netconn_do_connected+0x114>)
 800c0da:	f00b fea9 	bl	8017e30 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d008      	beq.n	800c0f8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	79fa      	ldrb	r2, [r7, #7]
 800c0ec:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	330c      	adds	r3, #12
 800c0f6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c100:	2b10      	cmp	r3, #16
 800c102:	d106      	bne.n	800c112 <lwip_netconn_do_connected+0x8e>
 800c104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800c10c:	69b8      	ldr	r0, [r7, #24]
 800c10e:	f7ff fb9b 	bl	800b848 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	7f1b      	ldrb	r3, [r3, #28]
 800c116:	f003 0304 	and.w	r3, r3, #4
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	bf0c      	ite	eq
 800c11e:	2301      	moveq	r3, #1
 800c120:	2300      	movne	r3, #0
 800c122:	b2db      	uxtb	r3, r3
 800c124:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	7f1b      	ldrb	r3, [r3, #28]
 800c12a:	f023 0304 	bic.w	r3, r3, #4
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <lwip_netconn_do_connected+0xbc>
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10c      	bne.n	800c15a <lwip_netconn_do_connected+0xd6>
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <lwip_netconn_do_connected+0xc8>
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <lwip_netconn_do_connected+0xd6>
 800c14c:	4b10      	ldr	r3, [pc, #64]	; (800c190 <lwip_netconn_do_connected+0x10c>)
 800c14e:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800c152:	4913      	ldr	r1, [pc, #76]	; (800c1a0 <lwip_netconn_do_connected+0x11c>)
 800c154:	4810      	ldr	r0, [pc, #64]	; (800c198 <lwip_netconn_do_connected+0x114>)
 800c156:	f00b fe6b 	bl	8017e30 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	2200      	movs	r2, #0
 800c15e:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	2200      	movs	r2, #0
 800c164:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <lwip_netconn_do_connected+0xf6>
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c172:	2200      	movs	r2, #0
 800c174:	2102      	movs	r1, #2
 800c176:	69b8      	ldr	r0, [r7, #24]
 800c178:	4798      	blx	r3

  if (was_blocking) {
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800c180:	69f8      	ldr	r0, [r7, #28]
 800c182:	f00b fbab 	bl	80178dc <sys_sem_signal>
  }
  return ERR_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3720      	adds	r7, #32
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	0801b28c 	.word	0x0801b28c
 800c194:	0801b5f0 	.word	0x0801b5f0
 800c198:	0801b2d0 	.word	0x0801b2d0
 800c19c:	0801b610 	.word	0x0801b610
 800c1a0:	0801b650 	.word	0x0801b650

0800c1a4 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d102      	bne.n	800c1c0 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800c1ba:	23f1      	movs	r3, #241	; 0xf1
 800c1bc:	75fb      	strb	r3, [r7, #23]
 800c1be:	e08b      	b.n	800c2d8 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1ca:	2b10      	cmp	r3, #16
 800c1cc:	d179      	bne.n	800c2c2 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d102      	bne.n	800c1de <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800c1d8:	23f7      	movs	r3, #247	; 0xf7
 800c1da:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800c1dc:	e07b      	b.n	800c2d6 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800c1e8:	23f6      	movs	r3, #246	; 0xf6
 800c1ea:	75fb      	strb	r3, [r7, #23]
        break;
 800c1ec:	e073      	b.n	800c2d6 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fb28 	bl	800b848 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6858      	ldr	r0, [r3, #4]
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6899      	ldr	r1, [r3, #8]
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	899a      	ldrh	r2, [r3, #12]
 800c206:	4b38      	ldr	r3, [pc, #224]	; (800c2e8 <lwip_netconn_do_connect+0x144>)
 800c208:	f003 fa24 	bl	800f654 <tcp_connect>
 800c20c:	4603      	mov	r3, r0
 800c20e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800c210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d15e      	bne.n	800c2d6 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	7f1b      	ldrb	r3, [r3, #28]
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	bf14      	ite	ne
 800c226:	2301      	movne	r3, #1
 800c228:	2300      	moveq	r3, #0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2203      	movs	r2, #3
 800c234:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800c236:	7bfb      	ldrb	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d009      	beq.n	800c250 <lwip_netconn_do_connect+0xac>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	7f1a      	ldrb	r2, [r3, #28]
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f042 0204 	orr.w	r2, r2, #4
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	771a      	strb	r2, [r3, #28]
 800c24e:	e008      	b.n	800c262 <lwip_netconn_do_connect+0xbe>
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	7f1a      	ldrb	r2, [r3, #28]
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 0204 	bic.w	r2, r2, #4
 800c25e:	b2d2      	uxtb	r2, r2
 800c260:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800c268:	23fb      	movs	r3, #251	; 0xfb
 800c26a:	75fb      	strb	r3, [r7, #23]
        break;
 800c26c:	e033      	b.n	800c2d6 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	785b      	ldrb	r3, [r3, #1]
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	d006      	beq.n	800c28e <lwip_netconn_do_connect+0xea>
 800c280:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <lwip_netconn_do_connect+0x148>)
 800c282:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800c286:	491a      	ldr	r1, [pc, #104]	; (800c2f0 <lwip_netconn_do_connect+0x14c>)
 800c288:	481a      	ldr	r0, [pc, #104]	; (800c2f4 <lwip_netconn_do_connect+0x150>)
 800c28a:	f00b fdd1 	bl	8017e30 <iprintf>
              UNLOCK_TCPIP_CORE();
 800c28e:	481a      	ldr	r0, [pc, #104]	; (800c2f8 <lwip_netconn_do_connect+0x154>)
 800c290:	f00b fb8d 	bl	80179ae <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f00b faec 	bl	801787a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c2a2:	4815      	ldr	r0, [pc, #84]	; (800c2f8 <lwip_netconn_do_connect+0x154>)
 800c2a4:	f00b fb74 	bl	8017990 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d116      	bne.n	800c2e0 <lwip_netconn_do_connect+0x13c>
 800c2b2:	4b0e      	ldr	r3, [pc, #56]	; (800c2ec <lwip_netconn_do_connect+0x148>)
 800c2b4:	f240 5274 	movw	r2, #1396	; 0x574
 800c2b8:	490d      	ldr	r1, [pc, #52]	; (800c2f0 <lwip_netconn_do_connect+0x14c>)
 800c2ba:	480e      	ldr	r0, [pc, #56]	; (800c2f4 <lwip_netconn_do_connect+0x150>)
 800c2bc:	f00b fdb8 	bl	8017e30 <iprintf>
              return;
 800c2c0:	e00e      	b.n	800c2e0 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <lwip_netconn_do_connect+0x148>)
 800c2c4:	f240 527d 	movw	r2, #1405	; 0x57d
 800c2c8:	490c      	ldr	r1, [pc, #48]	; (800c2fc <lwip_netconn_do_connect+0x158>)
 800c2ca:	480a      	ldr	r0, [pc, #40]	; (800c2f4 <lwip_netconn_do_connect+0x150>)
 800c2cc:	f00b fdb0 	bl	8017e30 <iprintf>
 800c2d0:	23fa      	movs	r3, #250	; 0xfa
 800c2d2:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c2d4:	e000      	b.n	800c2d8 <lwip_netconn_do_connect+0x134>
        break;
 800c2d6:	bf00      	nop
    }
  }
  msg->err = err;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	7dfa      	ldrb	r2, [r7, #23]
 800c2dc:	711a      	strb	r2, [r3, #4]
 800c2de:	e000      	b.n	800c2e2 <lwip_netconn_do_connect+0x13e>
              return;
 800c2e0:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}
 800c2e8:	0800c085 	.word	0x0800c085
 800c2ec:	0801b28c 	.word	0x0801b28c
 800c2f0:	0801b5e8 	.word	0x0801b5e8
 800c2f4:	0801b2d0 	.word	0x0801b2d0
 800c2f8:	20009b20 	.word	0x20009b20
 800c2fc:	0801b670 	.word	0x0801b670

0800c300 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2200      	movs	r2, #0
 800c310:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d022      	beq.n	800c362 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c326:	2b10      	cmp	r3, #16
 800c328:	d11b      	bne.n	800c362 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c336:	d202      	bcs.n	800c33e <lwip_netconn_do_recv+0x3e>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	e001      	b.n	800c342 <lwip_netconn_do_recv+0x42>
 800c33e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c342:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	89fa      	ldrh	r2, [r7, #14]
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f003 f8ea 	bl	800f528 <tcp_recved>
        remaining -= recved;
 800c354:	89fb      	ldrh	r3, [r7, #14]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1e6      	bne.n	800c330 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c362:	bf00      	nop
 800c364:	3718      	adds	r7, #24
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
	...

0800c36c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d106      	bne.n	800c390 <lwip_netconn_do_writemore+0x24>
 800c382:	4b96      	ldr	r3, [pc, #600]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c384:	f240 6273 	movw	r2, #1651	; 0x673
 800c388:	4995      	ldr	r1, [pc, #596]	; (800c5e0 <lwip_netconn_do_writemore+0x274>)
 800c38a:	4896      	ldr	r0, [pc, #600]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c38c:	f00b fd50 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d006      	beq.n	800c3a6 <lwip_netconn_do_writemore+0x3a>
 800c398:	4b90      	ldr	r3, [pc, #576]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c39a:	f240 6274 	movw	r2, #1652	; 0x674
 800c39e:	4992      	ldr	r1, [pc, #584]	; (800c5e8 <lwip_netconn_do_writemore+0x27c>)
 800c3a0:	4890      	ldr	r0, [pc, #576]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c3a2:	f00b fd45 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <lwip_netconn_do_writemore+0x50>
 800c3ae:	4b8b      	ldr	r3, [pc, #556]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c3b0:	f240 6275 	movw	r2, #1653	; 0x675
 800c3b4:	498d      	ldr	r1, [pc, #564]	; (800c5ec <lwip_netconn_do_writemore+0x280>)
 800c3b6:	488b      	ldr	r0, [pc, #556]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c3b8:	f00b fd3a 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d106      	bne.n	800c3d2 <lwip_netconn_do_writemore+0x66>
 800c3c4:	4b85      	ldr	r3, [pc, #532]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c3c6:	f240 6276 	movw	r2, #1654	; 0x676
 800c3ca:	4989      	ldr	r1, [pc, #548]	; (800c5f0 <lwip_netconn_do_writemore+0x284>)
 800c3cc:	4885      	ldr	r0, [pc, #532]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c3ce:	f00b fd2f 	bl	8017e30 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6a1b      	ldr	r3, [r3, #32]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d306      	bcc.n	800c3f0 <lwip_netconn_do_writemore+0x84>
 800c3e2:	4b7e      	ldr	r3, [pc, #504]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c3e4:	f240 6277 	movw	r2, #1655	; 0x677
 800c3e8:	4982      	ldr	r1, [pc, #520]	; (800c5f4 <lwip_netconn_do_writemore+0x288>)
 800c3ea:	487e      	ldr	r0, [pc, #504]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c3ec:	f00b fd20 	bl	8017e30 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a1b      	ldr	r3, [r3, #32]
 800c3f4:	899b      	ldrh	r3, [r3, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <lwip_netconn_do_writemore+0x9c>
 800c3fa:	4b78      	ldr	r3, [pc, #480]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c3fc:	f240 6279 	movw	r2, #1657	; 0x679
 800c400:	497d      	ldr	r1, [pc, #500]	; (800c5f8 <lwip_netconn_do_writemore+0x28c>)
 800c402:	4878      	ldr	r0, [pc, #480]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c404:	f00b fd14 	bl	8017e30 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	7f1b      	ldrb	r3, [r3, #28]
 800c40e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7f1b      	ldrb	r3, [r3, #28]
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d104      	bne.n	800c426 <lwip_netconn_do_writemore+0xba>
 800c41c:	7ebb      	ldrb	r3, [r7, #26]
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <lwip_netconn_do_writemore+0xbe>
 800c426:	2301      	movs	r3, #1
 800c428:	e000      	b.n	800c42c <lwip_netconn_do_writemore+0xc0>
 800c42a:	2300      	movs	r3, #0
 800c42c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	4413      	add	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a1b      	ldr	r3, [r3, #32]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c458:	d307      	bcc.n	800c46a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c45a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c45e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c460:	7ebb      	ldrb	r3, [r7, #26]
 800c462:	f043 0302 	orr.w	r3, r3, #2
 800c466:	76bb      	strb	r3, [r7, #26]
 800c468:	e001      	b.n	800c46e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c476:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c478:	89fa      	ldrh	r2, [r7, #14]
 800c47a:	8bbb      	ldrh	r3, [r7, #28]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d216      	bcs.n	800c4ae <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c480:	89fb      	ldrh	r3, [r7, #14]
 800c482:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c484:	7e3b      	ldrb	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00d      	beq.n	800c4a6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c48a:	8bbb      	ldrh	r3, [r7, #28]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d10e      	bne.n	800c4ae <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a1b      	ldr	r3, [r3, #32]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <lwip_netconn_do_writemore+0x134>
 800c49a:	f06f 0306 	mvn.w	r3, #6
 800c49e:	e000      	b.n	800c4a2 <lwip_netconn_do_writemore+0x136>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c4a4:	e07d      	b.n	800c5a2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c4a6:	7ebb      	ldrb	r3, [r7, #26]
 800c4a8:	f043 0302 	orr.w	r3, r3, #2
 800c4ac:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	691a      	ldr	r2, [r3, #16]
 800c4b4:	8bbb      	ldrh	r3, [r7, #28]
 800c4b6:	441a      	add	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d906      	bls.n	800c4d2 <lwip_netconn_do_writemore+0x166>
 800c4c4:	4b45      	ldr	r3, [pc, #276]	; (800c5dc <lwip_netconn_do_writemore+0x270>)
 800c4c6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c4ca:	494c      	ldr	r1, [pc, #304]	; (800c5fc <lwip_netconn_do_writemore+0x290>)
 800c4cc:	4845      	ldr	r0, [pc, #276]	; (800c5e4 <lwip_netconn_do_writemore+0x278>)
 800c4ce:	f00b fcaf 	bl	8017e30 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c4d2:	8bbb      	ldrh	r3, [r7, #28]
 800c4d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d103      	bne.n	800c4e4 <lwip_netconn_do_writemore+0x178>
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e2:	d209      	bcs.n	800c4f8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c4e8:	8bba      	ldrh	r2, [r7, #28]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d10b      	bne.n	800c506 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	899b      	ldrh	r3, [r3, #12]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d906      	bls.n	800c506 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c4fc:	7ebb      	ldrb	r3, [r7, #26]
 800c4fe:	f043 0302 	orr.w	r3, r3, #2
 800c502:	76bb      	strb	r3, [r7, #26]
 800c504:	e001      	b.n	800c50a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6858      	ldr	r0, [r3, #4]
 800c50e:	7ebb      	ldrb	r3, [r7, #26]
 800c510:	8bba      	ldrh	r2, [r7, #28]
 800c512:	6979      	ldr	r1, [r7, #20]
 800c514:	f006 ff28 	bl	8013368 <tcp_write>
 800c518:	4603      	mov	r3, r0
 800c51a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c51c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d12c      	bne.n	800c57e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a1b      	ldr	r3, [r3, #32]
 800c528:	6999      	ldr	r1, [r3, #24]
 800c52a:	8bba      	ldrh	r2, [r7, #28]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	440a      	add	r2, r1
 800c532:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	6919      	ldr	r1, [r3, #16]
 800c53a:	8bba      	ldrh	r2, [r7, #28]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	440a      	add	r2, r1
 800c542:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	691a      	ldr	r2, [r3, #16]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d113      	bne.n	800c57e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a1b      	ldr	r3, [r3, #32]
 800c55a:	899a      	ldrh	r2, [r3, #12]
 800c55c:	3a01      	subs	r2, #1
 800c55e:	b292      	uxth	r2, r2
 800c560:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	899b      	ldrh	r3, [r3, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d008      	beq.n	800c57e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	689a      	ldr	r2, [r3, #8]
 800c572:	3208      	adds	r2, #8
 800c574:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	2200      	movs	r2, #0
 800c57c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c57e:	7e7b      	ldrb	r3, [r7, #25]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <lwip_netconn_do_writemore+0x222>
 800c584:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f43f af50 	beq.w	800c42e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c58e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d004      	beq.n	800c5a0 <lwip_netconn_do_writemore+0x234>
 800c596:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c59e:	d146      	bne.n	800c62e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c5a0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c5a2:	7e3b      	ldrb	r3, [r7, #24]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d02b      	beq.n	800c600 <lwip_netconn_do_writemore+0x294>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	699a      	ldr	r2, [r3, #24]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d223      	bcs.n	800c600 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <lwip_netconn_do_writemore+0x260>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2103      	movs	r1, #3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	7f1b      	ldrb	r3, [r3, #28]
 800c5d0:	f043 0310 	orr.w	r3, r3, #16
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	771a      	strb	r2, [r3, #28]
 800c5da:	e028      	b.n	800c62e <lwip_netconn_do_writemore+0x2c2>
 800c5dc:	0801b28c 	.word	0x0801b28c
 800c5e0:	0801b380 	.word	0x0801b380
 800c5e4:	0801b2d0 	.word	0x0801b2d0
 800c5e8:	0801b688 	.word	0x0801b688
 800c5ec:	0801b390 	.word	0x0801b390
 800c5f0:	0801b6a8 	.word	0x0801b6a8
 800c5f4:	0801b6c0 	.word	0x0801b6c0
 800c5f8:	0801b700 	.word	0x0801b700
 800c5fc:	0801b728 	.word	0x0801b728
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c608:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c60c:	d305      	bcc.n	800c61a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c616:	2b04      	cmp	r3, #4
 800c618:	d909      	bls.n	800c62e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <lwip_netconn_do_writemore+0x2c2>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c626:	2200      	movs	r2, #0
 800c628:	2103      	movs	r1, #3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c62e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d11d      	bne.n	800c672 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	699a      	ldr	r2, [r3, #24]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	429a      	cmp	r2, r3
 800c644:	d002      	beq.n	800c64c <lwip_netconn_do_writemore+0x2e0>
 800c646:	7e3b      	ldrb	r3, [r7, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c64c:	2301      	movs	r3, #1
 800c64e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	4618      	mov	r0, r3
 800c656:	f007 fc71 	bl	8013f3c <tcp_output>
 800c65a:	4603      	mov	r3, r0
 800c65c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c65e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c662:	f113 0f04 	cmn.w	r3, #4
 800c666:	d12c      	bne.n	800c6c2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c668:	7b3b      	ldrb	r3, [r7, #12]
 800c66a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c66c:	2301      	movs	r3, #1
 800c66e:	76fb      	strb	r3, [r7, #27]
 800c670:	e027      	b.n	800c6c2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c672:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c67a:	d120      	bne.n	800c6be <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4618      	mov	r0, r3
 800c682:	f007 fc5b 	bl	8013f3c <tcp_output>
 800c686:	4603      	mov	r3, r0
 800c688:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c68a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c68e:	f113 0f04 	cmn.w	r3, #4
 800c692:	d104      	bne.n	800c69e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c694:	7b7b      	ldrb	r3, [r7, #13]
 800c696:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c698:	2301      	movs	r3, #1
 800c69a:	76fb      	strb	r3, [r7, #27]
 800c69c:	e011      	b.n	800c6c2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c69e:	7e3b      	ldrb	r3, [r7, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00e      	beq.n	800c6c2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a1b      	ldr	r3, [r3, #32]
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <lwip_netconn_do_writemore+0x348>
 800c6ae:	f06f 0306 	mvn.w	r3, #6
 800c6b2:	e000      	b.n	800c6b6 <lwip_netconn_do_writemore+0x34a>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	76fb      	strb	r3, [r7, #27]
 800c6bc:	e001      	b.n	800c6c2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c6c2:	7efb      	ldrb	r3, [r7, #27]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d015      	beq.n	800c6f4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a1b      	ldr	r3, [r3, #32]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	330c      	adds	r3, #12
 800c6d0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	7ffa      	ldrb	r2, [r7, #31]
 800c6d8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c6e6:	78fb      	ldrb	r3, [r7, #3]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c6ec:	68b8      	ldr	r0, [r7, #8]
 800c6ee:	f00b f8f5 	bl	80178dc <sys_sem_signal>
 800c6f2:	e002      	b.n	800c6fa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c6f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6f8:	e000      	b.n	800c6fc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe fdf8 	bl	800b30a <netconn_err>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d163      	bne.n	800c7ee <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c730:	2b10      	cmp	r3, #16
 800c732:	d15c      	bne.n	800c7ee <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	785b      	ldrb	r3, [r3, #1]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c73e:	23fb      	movs	r3, #251	; 0xfb
 800c740:	73fb      	strb	r3, [r7, #15]
 800c742:	e054      	b.n	800c7ee <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d04d      	beq.n	800c7ea <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2201      	movs	r2, #1
 800c754:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6a1b      	ldr	r3, [r3, #32]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d006      	beq.n	800c76e <lwip_netconn_do_write+0x6a>
 800c760:	4b27      	ldr	r3, [pc, #156]	; (800c800 <lwip_netconn_do_write+0xfc>)
 800c762:	f240 7223 	movw	r2, #1827	; 0x723
 800c766:	4927      	ldr	r1, [pc, #156]	; (800c804 <lwip_netconn_do_write+0x100>)
 800c768:	4827      	ldr	r0, [pc, #156]	; (800c808 <lwip_netconn_do_write+0x104>)
 800c76a:	f00b fb61 	bl	8017e30 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <lwip_netconn_do_write+0x80>
 800c776:	4b22      	ldr	r3, [pc, #136]	; (800c800 <lwip_netconn_do_write+0xfc>)
 800c778:	f240 7224 	movw	r2, #1828	; 0x724
 800c77c:	4923      	ldr	r1, [pc, #140]	; (800c80c <lwip_netconn_do_write+0x108>)
 800c77e:	4822      	ldr	r0, [pc, #136]	; (800c808 <lwip_netconn_do_write+0x104>)
 800c780:	f00b fb56 	bl	8017e30 <iprintf>
        msg->conn->current_msg = msg;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff fdea 	bl	800c36c <lwip_netconn_do_writemore>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d02b      	beq.n	800c7f6 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	785b      	ldrb	r3, [r3, #1]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d006      	beq.n	800c7b6 <lwip_netconn_do_write+0xb2>
 800c7a8:	4b15      	ldr	r3, [pc, #84]	; (800c800 <lwip_netconn_do_write+0xfc>)
 800c7aa:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c7ae:	4918      	ldr	r1, [pc, #96]	; (800c810 <lwip_netconn_do_write+0x10c>)
 800c7b0:	4815      	ldr	r0, [pc, #84]	; (800c808 <lwip_netconn_do_write+0x104>)
 800c7b2:	f00b fb3d 	bl	8017e30 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c7b6:	4817      	ldr	r0, [pc, #92]	; (800c814 <lwip_netconn_do_write+0x110>)
 800c7b8:	f00b f8f9 	bl	80179ae <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	330c      	adds	r3, #12
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f00b f858 	bl	801787a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c7ca:	4812      	ldr	r0, [pc, #72]	; (800c814 <lwip_netconn_do_write+0x110>)
 800c7cc:	f00b f8e0 	bl	8017990 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	785b      	ldrb	r3, [r3, #1]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d10d      	bne.n	800c7f6 <lwip_netconn_do_write+0xf2>
 800c7da:	4b09      	ldr	r3, [pc, #36]	; (800c800 <lwip_netconn_do_write+0xfc>)
 800c7dc:	f240 722c 	movw	r2, #1836	; 0x72c
 800c7e0:	490b      	ldr	r1, [pc, #44]	; (800c810 <lwip_netconn_do_write+0x10c>)
 800c7e2:	4809      	ldr	r0, [pc, #36]	; (800c808 <lwip_netconn_do_write+0x104>)
 800c7e4:	f00b fb24 	bl	8017e30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c7e8:	e005      	b.n	800c7f6 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800c7ea:	23f5      	movs	r3, #245	; 0xf5
 800c7ec:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	7bfa      	ldrb	r2, [r7, #15]
 800c7f2:	711a      	strb	r2, [r3, #4]
 800c7f4:	e000      	b.n	800c7f8 <lwip_netconn_do_write+0xf4>
        return;
 800c7f6:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	0801b28c 	.word	0x0801b28c
 800c804:	0801b5cc 	.word	0x0801b5cc
 800c808:	0801b2d0 	.word	0x0801b2d0
 800c80c:	0801b754 	.word	0x0801b754
 800c810:	0801b5e8 	.word	0x0801b5e8
 800c814:	20009b20 	.word	0x20009b20

0800c818 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	785b      	ldrb	r3, [r3, #1]
 800c82a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d069      	beq.n	800c90a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c840:	2b10      	cmp	r3, #16
 800c842:	d162      	bne.n	800c90a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d002      	beq.n	800c852 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c84c:	7afb      	ldrb	r3, [r7, #11]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d05b      	beq.n	800c90a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c852:	7afb      	ldrb	r3, [r7, #11]
 800c854:	2b03      	cmp	r3, #3
 800c856:	d103      	bne.n	800c860 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	22f5      	movs	r2, #245	; 0xf5
 800c85c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c85e:	e059      	b.n	800c914 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c860:	7afb      	ldrb	r3, [r7, #11]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d103      	bne.n	800c86e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	22fb      	movs	r2, #251	; 0xfb
 800c86a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c86c:	e052      	b.n	800c914 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	7a1b      	ldrb	r3, [r3, #8]
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	2b00      	cmp	r3, #0
 800c878:	d004      	beq.n	800c884 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff f916 	bl	800bab0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d006      	beq.n	800c89c <lwip_netconn_do_close+0x84>
 800c88e:	4b23      	ldr	r3, [pc, #140]	; (800c91c <lwip_netconn_do_close+0x104>)
 800c890:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c894:	4922      	ldr	r1, [pc, #136]	; (800c920 <lwip_netconn_do_close+0x108>)
 800c896:	4823      	ldr	r0, [pc, #140]	; (800c924 <lwip_netconn_do_close+0x10c>)
 800c898:	f00b faca 	bl	8017e30 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2204      	movs	r2, #4
 800c8a2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff f97a 	bl	800bbac <lwip_netconn_do_close_internal>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d029      	beq.n	800c912 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	785b      	ldrb	r3, [r3, #1]
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d006      	beq.n	800c8d6 <lwip_netconn_do_close+0xbe>
 800c8c8:	4b14      	ldr	r3, [pc, #80]	; (800c91c <lwip_netconn_do_close+0x104>)
 800c8ca:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c8ce:	4916      	ldr	r1, [pc, #88]	; (800c928 <lwip_netconn_do_close+0x110>)
 800c8d0:	4814      	ldr	r0, [pc, #80]	; (800c924 <lwip_netconn_do_close+0x10c>)
 800c8d2:	f00b faad 	bl	8017e30 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c8d6:	4815      	ldr	r0, [pc, #84]	; (800c92c <lwip_netconn_do_close+0x114>)
 800c8d8:	f00b f869 	bl	80179ae <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	330c      	adds	r3, #12
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f00a ffc8 	bl	801787a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c8ea:	4810      	ldr	r0, [pc, #64]	; (800c92c <lwip_netconn_do_close+0x114>)
 800c8ec:	f00b f850 	bl	8017990 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	785b      	ldrb	r3, [r3, #1]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00b      	beq.n	800c912 <lwip_netconn_do_close+0xfa>
 800c8fa:	4b08      	ldr	r3, [pc, #32]	; (800c91c <lwip_netconn_do_close+0x104>)
 800c8fc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c900:	4909      	ldr	r1, [pc, #36]	; (800c928 <lwip_netconn_do_close+0x110>)
 800c902:	4808      	ldr	r0, [pc, #32]	; (800c924 <lwip_netconn_do_close+0x10c>)
 800c904:	f00b fa94 	bl	8017e30 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c908:	e003      	b.n	800c912 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	22f5      	movs	r2, #245	; 0xf5
 800c90e:	711a      	strb	r2, [r3, #4]
 800c910:	e000      	b.n	800c914 <lwip_netconn_do_close+0xfc>
      return;
 800c912:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	0801b28c 	.word	0x0801b28c
 800c920:	0801b5cc 	.word	0x0801b5cc
 800c924:	0801b2d0 	.word	0x0801b2d0
 800c928:	0801b5e8 	.word	0x0801b5e8
 800c92c:	20009b20 	.word	0x20009b20

0800c930 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d013      	beq.n	800c966 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f001 fefe 	bl	800e74c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	605a      	str	r2, [r3, #4]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	2005      	movs	r0, #5
 800c962:	f001 f853 	bl	800da0c <memp_free>
  }
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
	...

0800c970 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d108      	bne.n	800c990 <netbuf_next+0x20>
 800c97e:	4b11      	ldr	r3, [pc, #68]	; (800c9c4 <netbuf_next+0x54>)
 800c980:	22e0      	movs	r2, #224	; 0xe0
 800c982:	4911      	ldr	r1, [pc, #68]	; (800c9c8 <netbuf_next+0x58>)
 800c984:	4811      	ldr	r0, [pc, #68]	; (800c9cc <netbuf_next+0x5c>)
 800c986:	f00b fa53 	bl	8017e30 <iprintf>
 800c98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c98e:	e014      	b.n	800c9ba <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <netbuf_next+0x30>
    return -1;
 800c99a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c99e:	e00c      	b.n	800c9ba <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <netbuf_next+0x48>
    return 1;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e000      	b.n	800c9ba <netbuf_next+0x4a>
  }
  return 0;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	0801b780 	.word	0x0801b780
 800c9c8:	0801b8e0 	.word	0x0801b8e0
 800c9cc:	0801b7d0 	.word	0x0801b7d0

0800c9d0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c9da:	f008 fb89 	bl	80150f0 <sys_timeouts_sleeptime>
 800c9de:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e6:	d10b      	bne.n	800ca00 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c9e8:	4813      	ldr	r0, [pc, #76]	; (800ca38 <tcpip_timeouts_mbox_fetch+0x68>)
 800c9ea:	f00a ffe0 	bl	80179ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f00a feb6 	bl	8017764 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c9f8:	480f      	ldr	r0, [pc, #60]	; (800ca38 <tcpip_timeouts_mbox_fetch+0x68>)
 800c9fa:	f00a ffc9 	bl	8017990 <sys_mutex_lock>
    return;
 800c9fe:	e018      	b.n	800ca32 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ca06:	f008 fb39 	bl	801507c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca0a:	e7e6      	b.n	800c9da <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ca0c:	480a      	ldr	r0, [pc, #40]	; (800ca38 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca0e:	f00a ffce 	bl	80179ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f00a fea4 	bl	8017764 <sys_arch_mbox_fetch>
 800ca1c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ca1e:	4806      	ldr	r0, [pc, #24]	; (800ca38 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca20:	f00a ffb6 	bl	8017990 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca2a:	d102      	bne.n	800ca32 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ca2c:	f008 fb26 	bl	801507c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca30:	e7d3      	b.n	800c9da <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ca32:	3710      	adds	r7, #16
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20009b20 	.word	0x20009b20

0800ca3c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ca44:	4810      	ldr	r0, [pc, #64]	; (800ca88 <tcpip_thread+0x4c>)
 800ca46:	f00a ffa3 	bl	8017990 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ca4a:	4b10      	ldr	r3, [pc, #64]	; (800ca8c <tcpip_thread+0x50>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d005      	beq.n	800ca5e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ca52:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <tcpip_thread+0x50>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a0e      	ldr	r2, [pc, #56]	; (800ca90 <tcpip_thread+0x54>)
 800ca58:	6812      	ldr	r2, [r2, #0]
 800ca5a:	4610      	mov	r0, r2
 800ca5c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ca5e:	f107 030c 	add.w	r3, r7, #12
 800ca62:	4619      	mov	r1, r3
 800ca64:	480b      	ldr	r0, [pc, #44]	; (800ca94 <tcpip_thread+0x58>)
 800ca66:	f7ff ffb3 	bl	800c9d0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d106      	bne.n	800ca7e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ca70:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <tcpip_thread+0x5c>)
 800ca72:	2291      	movs	r2, #145	; 0x91
 800ca74:	4909      	ldr	r1, [pc, #36]	; (800ca9c <tcpip_thread+0x60>)
 800ca76:	480a      	ldr	r0, [pc, #40]	; (800caa0 <tcpip_thread+0x64>)
 800ca78:	f00b f9da 	bl	8017e30 <iprintf>
      continue;
 800ca7c:	e003      	b.n	800ca86 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 f80f 	bl	800caa4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ca86:	e7ea      	b.n	800ca5e <tcpip_thread+0x22>
 800ca88:	20009b20 	.word	0x20009b20
 800ca8c:	20009b14 	.word	0x20009b14
 800ca90:	20009b18 	.word	0x20009b18
 800ca94:	20009b1c 	.word	0x20009b1c
 800ca98:	0801b918 	.word	0x0801b918
 800ca9c:	0801b948 	.word	0x0801b948
 800caa0:	0801b968 	.word	0x0801b968

0800caa4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d026      	beq.n	800cb02 <tcpip_thread_handle_msg+0x5e>
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	dc2b      	bgt.n	800cb10 <tcpip_thread_handle_msg+0x6c>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <tcpip_thread_handle_msg+0x1e>
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d015      	beq.n	800caec <tcpip_thread_handle_msg+0x48>
 800cac0:	e026      	b.n	800cb10 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6850      	ldr	r0, [r2, #4]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	6892      	ldr	r2, [r2, #8]
 800cace:	4611      	mov	r1, r2
 800cad0:	4798      	blx	r3
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d004      	beq.n	800cae2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4618      	mov	r0, r3
 800cade:	f001 fe35 	bl	800e74c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	2008      	movs	r0, #8
 800cae6:	f000 ff91 	bl	800da0c <memp_free>
      break;
 800caea:	e018      	b.n	800cb1e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6892      	ldr	r2, [r2, #8]
 800caf4:	4610      	mov	r0, r2
 800caf6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800caf8:	6879      	ldr	r1, [r7, #4]
 800cafa:	2007      	movs	r0, #7
 800cafc:	f000 ff86 	bl	800da0c <memp_free>
      break;
 800cb00:	e00d      	b.n	800cb1e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	6892      	ldr	r2, [r2, #8]
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	4798      	blx	r3
      break;
 800cb0e:	e006      	b.n	800cb1e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <tcpip_thread_handle_msg+0x84>)
 800cb12:	22cf      	movs	r2, #207	; 0xcf
 800cb14:	4905      	ldr	r1, [pc, #20]	; (800cb2c <tcpip_thread_handle_msg+0x88>)
 800cb16:	4806      	ldr	r0, [pc, #24]	; (800cb30 <tcpip_thread_handle_msg+0x8c>)
 800cb18:	f00b f98a 	bl	8017e30 <iprintf>
      break;
 800cb1c:	bf00      	nop
  }
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	0801b918 	.word	0x0801b918
 800cb2c:	0801b948 	.word	0x0801b948
 800cb30:	0801b968 	.word	0x0801b968

0800cb34 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cb40:	481a      	ldr	r0, [pc, #104]	; (800cbac <tcpip_inpkt+0x78>)
 800cb42:	f00a fe57 	bl	80177f4 <sys_mbox_valid>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d105      	bne.n	800cb58 <tcpip_inpkt+0x24>
 800cb4c:	4b18      	ldr	r3, [pc, #96]	; (800cbb0 <tcpip_inpkt+0x7c>)
 800cb4e:	22fc      	movs	r2, #252	; 0xfc
 800cb50:	4918      	ldr	r1, [pc, #96]	; (800cbb4 <tcpip_inpkt+0x80>)
 800cb52:	4819      	ldr	r0, [pc, #100]	; (800cbb8 <tcpip_inpkt+0x84>)
 800cb54:	f00b f96c 	bl	8017e30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cb58:	2008      	movs	r0, #8
 800cb5a:	f000 fee1 	bl	800d920 <memp_malloc>
 800cb5e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb6a:	e01a      	b.n	800cba2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	68ba      	ldr	r2, [r7, #8]
 800cb7c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cb84:	6979      	ldr	r1, [r7, #20]
 800cb86:	4809      	ldr	r0, [pc, #36]	; (800cbac <tcpip_inpkt+0x78>)
 800cb88:	f00a fdd2 	bl	8017730 <sys_mbox_trypost>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb92:	6979      	ldr	r1, [r7, #20]
 800cb94:	2008      	movs	r0, #8
 800cb96:	f000 ff39 	bl	800da0c <memp_free>
    return ERR_MEM;
 800cb9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb9e:	e000      	b.n	800cba2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cba0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20009b1c 	.word	0x20009b1c
 800cbb0:	0801b918 	.word	0x0801b918
 800cbb4:	0801b990 	.word	0x0801b990
 800cbb8:	0801b968 	.word	0x0801b968

0800cbbc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cbcc:	f003 0318 	and.w	r3, r3, #24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d006      	beq.n	800cbe2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cbd4:	4a08      	ldr	r2, [pc, #32]	; (800cbf8 <tcpip_input+0x3c>)
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ffab 	bl	800cb34 <tcpip_inpkt>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	e005      	b.n	800cbee <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cbe2:	4a06      	ldr	r2, [pc, #24]	; (800cbfc <tcpip_input+0x40>)
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff ffa4 	bl	800cb34 <tcpip_inpkt>
 800cbec:	4603      	mov	r3, r0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	0801752d 	.word	0x0801752d
 800cbfc:	08016449 	.word	0x08016449

0800cc00 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cc0a:	4819      	ldr	r0, [pc, #100]	; (800cc70 <tcpip_try_callback+0x70>)
 800cc0c:	f00a fdf2 	bl	80177f4 <sys_mbox_valid>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d106      	bne.n	800cc24 <tcpip_try_callback+0x24>
 800cc16:	4b17      	ldr	r3, [pc, #92]	; (800cc74 <tcpip_try_callback+0x74>)
 800cc18:	f240 125d 	movw	r2, #349	; 0x15d
 800cc1c:	4916      	ldr	r1, [pc, #88]	; (800cc78 <tcpip_try_callback+0x78>)
 800cc1e:	4817      	ldr	r0, [pc, #92]	; (800cc7c <tcpip_try_callback+0x7c>)
 800cc20:	f00b f906 	bl	8017e30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cc24:	2007      	movs	r0, #7
 800cc26:	f000 fe7b 	bl	800d920 <memp_malloc>
 800cc2a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cc32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc36:	e017      	b.n	800cc68 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cc4a:	68f9      	ldr	r1, [r7, #12]
 800cc4c:	4808      	ldr	r0, [pc, #32]	; (800cc70 <tcpip_try_callback+0x70>)
 800cc4e:	f00a fd6f 	bl	8017730 <sys_mbox_trypost>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d006      	beq.n	800cc66 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	2007      	movs	r0, #7
 800cc5c:	f000 fed6 	bl	800da0c <memp_free>
    return ERR_MEM;
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc64:	e000      	b.n	800cc68 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cc66:	2300      	movs	r3, #0
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20009b1c 	.word	0x20009b1c
 800cc74:	0801b918 	.word	0x0801b918
 800cc78:	0801b990 	.word	0x0801b990
 800cc7c:	0801b968 	.word	0x0801b968

0800cc80 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cc8c:	4806      	ldr	r0, [pc, #24]	; (800cca8 <tcpip_send_msg_wait_sem+0x28>)
 800cc8e:	f00a fe7f 	bl	8017990 <sys_mutex_lock>
  fn(apimsg);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	68b8      	ldr	r0, [r7, #8]
 800cc96:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cc98:	4803      	ldr	r0, [pc, #12]	; (800cca8 <tcpip_send_msg_wait_sem+0x28>)
 800cc9a:	f00a fe88 	bl	80179ae <sys_mutex_unlock>
  return ERR_OK;
 800cc9e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20009b20 	.word	0x20009b20

0800ccac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af02      	add	r7, sp, #8
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ccb6:	f000 f98b 	bl	800cfd0 <lwip_init>

  tcpip_init_done = initfunc;
 800ccba:	4a17      	ldr	r2, [pc, #92]	; (800cd18 <tcpip_init+0x6c>)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ccc0:	4a16      	ldr	r2, [pc, #88]	; (800cd1c <tcpip_init+0x70>)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ccc6:	2106      	movs	r1, #6
 800ccc8:	4815      	ldr	r0, [pc, #84]	; (800cd20 <tcpip_init+0x74>)
 800ccca:	f00a fd05 	bl	80176d8 <sys_mbox_new>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d006      	beq.n	800cce2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ccd4:	4b13      	ldr	r3, [pc, #76]	; (800cd24 <tcpip_init+0x78>)
 800ccd6:	f240 2261 	movw	r2, #609	; 0x261
 800ccda:	4913      	ldr	r1, [pc, #76]	; (800cd28 <tcpip_init+0x7c>)
 800ccdc:	4813      	ldr	r0, [pc, #76]	; (800cd2c <tcpip_init+0x80>)
 800ccde:	f00b f8a7 	bl	8017e30 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cce2:	4813      	ldr	r0, [pc, #76]	; (800cd30 <tcpip_init+0x84>)
 800cce4:	f00a fe3e 	bl	8017964 <sys_mutex_new>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d006      	beq.n	800ccfc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <tcpip_init+0x78>)
 800ccf0:	f240 2265 	movw	r2, #613	; 0x265
 800ccf4:	490f      	ldr	r1, [pc, #60]	; (800cd34 <tcpip_init+0x88>)
 800ccf6:	480d      	ldr	r0, [pc, #52]	; (800cd2c <tcpip_init+0x80>)
 800ccf8:	f00b f89a 	bl	8017e30 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ccfc:	2318      	movs	r3, #24
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd04:	2200      	movs	r2, #0
 800cd06:	490c      	ldr	r1, [pc, #48]	; (800cd38 <tcpip_init+0x8c>)
 800cd08:	480c      	ldr	r0, [pc, #48]	; (800cd3c <tcpip_init+0x90>)
 800cd0a:	f00a fe5d 	bl	80179c8 <sys_thread_new>
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20009b14 	.word	0x20009b14
 800cd1c:	20009b18 	.word	0x20009b18
 800cd20:	20009b1c 	.word	0x20009b1c
 800cd24:	0801b918 	.word	0x0801b918
 800cd28:	0801b9a0 	.word	0x0801b9a0
 800cd2c:	0801b968 	.word	0x0801b968
 800cd30:	20009b20 	.word	0x20009b20
 800cd34:	0801b9c4 	.word	0x0801b9c4
 800cd38:	0800ca3d 	.word	0x0800ca3d
 800cd3c:	0801b9e8 	.word	0x0801b9e8

0800cd40 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd4a:	88fb      	ldrh	r3, [r7, #6]
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	b21a      	sxth	r2, r3
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	0a1b      	lsrs	r3, r3, #8
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	b21b      	sxth	r3, r3
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	b21b      	sxth	r3, r3
 800cd5c:	b29b      	uxth	r3, r3
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	061a      	lsls	r2, r3, #24
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	021b      	lsls	r3, r3, #8
 800cd7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	0a1b      	lsrs	r3, r3, #8
 800cd84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	0e1b      	lsrs	r3, r3, #24
 800cd8e:	4313      	orrs	r3, r2
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b089      	sub	sp, #36	; 0x24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00d      	beq.n	800cddc <lwip_standard_chksum+0x40>
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	dd0a      	ble.n	800cddc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	1c53      	adds	r3, r2, #1
 800cdca:	61fb      	str	r3, [r7, #28]
 800cdcc:	f107 030e 	add.w	r3, r7, #14
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	7812      	ldrb	r2, [r2, #0]
 800cdd4:	701a      	strb	r2, [r3, #0]
    len--;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cde0:	e00a      	b.n	800cdf8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	1c9a      	adds	r2, r3, #2
 800cde6:	61ba      	str	r2, [r7, #24]
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	4413      	add	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	3b02      	subs	r3, #2
 800cdf6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	dcf1      	bgt.n	800cde2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dd04      	ble.n	800ce0e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ce04:	f107 030e 	add.w	r3, r7, #14
 800ce08:	69ba      	ldr	r2, [r7, #24]
 800ce0a:	7812      	ldrb	r2, [r2, #0]
 800ce0c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ce0e:	89fb      	ldrh	r3, [r7, #14]
 800ce10:	461a      	mov	r2, r3
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	4413      	add	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	0c1a      	lsrs	r2, r3, #16
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4413      	add	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	0c1a      	lsrs	r2, r3, #16
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d007      	beq.n	800ce46 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	0a1b      	lsrs	r3, r3, #8
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	b29b      	uxth	r3, r3
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3724      	adds	r7, #36	; 0x24
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b086      	sub	sp, #24
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	607b      	str	r3, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	72fb      	strb	r3, [r7, #11]
 800ce64:	4613      	mov	r3, r2
 800ce66:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	e02b      	b.n	800ceca <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	895b      	ldrh	r3, [r3, #10]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7ff ff8d 	bl	800cd9c <lwip_standard_chksum>
 800ce82:	4603      	mov	r3, r0
 800ce84:	461a      	mov	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	4413      	add	r3, r2
 800ce8a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	0c1a      	lsrs	r2, r3, #16
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4413      	add	r3, r2
 800ce96:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	895b      	ldrh	r3, [r3, #10]
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00e      	beq.n	800cec4 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bf0c      	ite	eq
 800ceac:	2301      	moveq	r3, #1
 800ceae:	2300      	movne	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	021b      	lsls	r3, r3, #8
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	0a1b      	lsrs	r3, r3, #8
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	4313      	orrs	r3, r2
 800cec2:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1d0      	bne.n	800ce72 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d007      	beq.n	800cee6 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	021b      	lsls	r3, r3, #8
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	0a1b      	lsrs	r3, r3, #8
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	4313      	orrs	r3, r2
 800cee4:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff ff28 	bl	800cd40 <lwip_htons>
 800cef0:	4603      	mov	r3, r0
 800cef2:	461a      	mov	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4413      	add	r3, r2
 800cef8:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800cefa:	893b      	ldrh	r3, [r7, #8]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7ff ff1f 	bl	800cd40 <lwip_htons>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4413      	add	r3, r2
 800cf0a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	0c1a      	lsrs	r2, r3, #16
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	4413      	add	r3, r2
 800cf16:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	0c1a      	lsrs	r2, r3, #16
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	4413      	add	r3, r2
 800cf22:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	43db      	mvns	r3, r3
 800cf2a:	b29b      	uxth	r3, r3
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3718      	adds	r7, #24
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	607b      	str	r3, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	72fb      	strb	r3, [r7, #11]
 800cf42:	4613      	mov	r3, r2
 800cf44:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	0c1b      	lsrs	r3, r3, #16
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	4413      	add	r3, r2
 800cf5a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	4413      	add	r3, r2
 800cf6a:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	0c1b      	lsrs	r3, r3, #16
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	4413      	add	r3, r2
 800cf74:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	0c1a      	lsrs	r2, r3, #16
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	4413      	add	r3, r2
 800cf80:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	0c1a      	lsrs	r2, r3, #16
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	4413      	add	r3, r2
 800cf8c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800cf8e:	893a      	ldrh	r2, [r7, #8]
 800cf90:	7af9      	ldrb	r1, [r7, #11]
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff ff5e 	bl	800ce56 <inet_cksum_pseudo_base>
 800cf9a:	4603      	mov	r3, r0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af02      	add	r7, sp, #8
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	607b      	str	r3, [r7, #4]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	72fb      	strb	r3, [r7, #11]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800cfb6:	893a      	ldrh	r2, [r7, #8]
 800cfb8:	7af9      	ldrb	r1, [r7, #11]
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff ffb7 	bl	800cf34 <inet_chksum_pseudo>
 800cfc6:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cfda:	f00a fcb7 	bl	801794c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cfde:	f000 f8d3 	bl	800d188 <mem_init>
  memp_init();
 800cfe2:	f000 fc2f 	bl	800d844 <memp_init>
  pbuf_init();
  netif_init();
 800cfe6:	f000 fd3b 	bl	800da60 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cfea:	f001 fe49 	bl	800ec80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cfee:	f007 fffd 	bl	8014fec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
	...

0800cffc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d006:	4b05      	ldr	r3, [pc, #20]	; (800d01c <ptr_to_mem+0x20>)
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	88fb      	ldrh	r3, [r7, #6]
 800d00c:	4413      	add	r3, r2
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	2000eb50 	.word	0x2000eb50

0800d020 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d028:	4b05      	ldr	r3, [pc, #20]	; (800d040 <mem_to_ptr+0x20>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	b29b      	uxth	r3, r3
}
 800d032:	4618      	mov	r0, r3
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	2000eb50 	.word	0x2000eb50

0800d044 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d044:	b590      	push	{r4, r7, lr}
 800d046:	b085      	sub	sp, #20
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d04c:	4b45      	ldr	r3, [pc, #276]	; (800d164 <plug_holes+0x120>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	429a      	cmp	r2, r3
 800d054:	d206      	bcs.n	800d064 <plug_holes+0x20>
 800d056:	4b44      	ldr	r3, [pc, #272]	; (800d168 <plug_holes+0x124>)
 800d058:	f240 12df 	movw	r2, #479	; 0x1df
 800d05c:	4943      	ldr	r1, [pc, #268]	; (800d16c <plug_holes+0x128>)
 800d05e:	4844      	ldr	r0, [pc, #272]	; (800d170 <plug_holes+0x12c>)
 800d060:	f00a fee6 	bl	8017e30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d064:	4b43      	ldr	r3, [pc, #268]	; (800d174 <plug_holes+0x130>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d306      	bcc.n	800d07c <plug_holes+0x38>
 800d06e:	4b3e      	ldr	r3, [pc, #248]	; (800d168 <plug_holes+0x124>)
 800d070:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d074:	4940      	ldr	r1, [pc, #256]	; (800d178 <plug_holes+0x134>)
 800d076:	483e      	ldr	r0, [pc, #248]	; (800d170 <plug_holes+0x12c>)
 800d078:	f00a feda 	bl	8017e30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	791b      	ldrb	r3, [r3, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <plug_holes+0x4e>
 800d084:	4b38      	ldr	r3, [pc, #224]	; (800d168 <plug_holes+0x124>)
 800d086:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d08a:	493c      	ldr	r1, [pc, #240]	; (800d17c <plug_holes+0x138>)
 800d08c:	4838      	ldr	r0, [pc, #224]	; (800d170 <plug_holes+0x12c>)
 800d08e:	f00a fecf 	bl	8017e30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d09a:	d906      	bls.n	800d0aa <plug_holes+0x66>
 800d09c:	4b32      	ldr	r3, [pc, #200]	; (800d168 <plug_holes+0x124>)
 800d09e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d0a2:	4937      	ldr	r1, [pc, #220]	; (800d180 <plug_holes+0x13c>)
 800d0a4:	4832      	ldr	r0, [pc, #200]	; (800d170 <plug_holes+0x12c>)
 800d0a6:	f00a fec3 	bl	8017e30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff ffa4 	bl	800cffc <ptr_to_mem>
 800d0b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d024      	beq.n	800d108 <plug_holes+0xc4>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	791b      	ldrb	r3, [r3, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d120      	bne.n	800d108 <plug_holes+0xc4>
 800d0c6:	4b2b      	ldr	r3, [pc, #172]	; (800d174 <plug_holes+0x130>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d01b      	beq.n	800d108 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d0d0:	4b2c      	ldr	r3, [pc, #176]	; (800d184 <plug_holes+0x140>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d102      	bne.n	800d0e0 <plug_holes+0x9c>
      lfree = mem;
 800d0da:	4a2a      	ldr	r2, [pc, #168]	; (800d184 <plug_holes+0x140>)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	881a      	ldrh	r2, [r3, #0]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d0f0:	d00a      	beq.n	800d108 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff ff80 	bl	800cffc <ptr_to_mem>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7ff ff8e 	bl	800d020 <mem_to_ptr>
 800d104:	4603      	mov	r3, r0
 800d106:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	885b      	ldrh	r3, [r3, #2]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff ff75 	bl	800cffc <ptr_to_mem>
 800d112:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d114:	68ba      	ldr	r2, [r7, #8]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d01f      	beq.n	800d15c <plug_holes+0x118>
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	791b      	ldrb	r3, [r3, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d11b      	bne.n	800d15c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d124:	4b17      	ldr	r3, [pc, #92]	; (800d184 <plug_holes+0x140>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d102      	bne.n	800d134 <plug_holes+0xf0>
      lfree = pmem;
 800d12e:	4a15      	ldr	r2, [pc, #84]	; (800d184 <plug_holes+0x140>)
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	881a      	ldrh	r2, [r3, #0]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d144:	d00a      	beq.n	800d15c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff ff56 	bl	800cffc <ptr_to_mem>
 800d150:	4604      	mov	r4, r0
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f7ff ff64 	bl	800d020 <mem_to_ptr>
 800d158:	4603      	mov	r3, r0
 800d15a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d15c:	bf00      	nop
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	bd90      	pop	{r4, r7, pc}
 800d164:	2000eb50 	.word	0x2000eb50
 800d168:	0801b9f8 	.word	0x0801b9f8
 800d16c:	0801ba28 	.word	0x0801ba28
 800d170:	0801ba40 	.word	0x0801ba40
 800d174:	2000eb54 	.word	0x2000eb54
 800d178:	0801ba68 	.word	0x0801ba68
 800d17c:	0801ba84 	.word	0x0801ba84
 800d180:	0801baa0 	.word	0x0801baa0
 800d184:	2000eb5c 	.word	0x2000eb5c

0800d188 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d18e:	4b1f      	ldr	r3, [pc, #124]	; (800d20c <mem_init+0x84>)
 800d190:	3303      	adds	r3, #3
 800d192:	f023 0303 	bic.w	r3, r3, #3
 800d196:	461a      	mov	r2, r3
 800d198:	4b1d      	ldr	r3, [pc, #116]	; (800d210 <mem_init+0x88>)
 800d19a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d19c:	4b1c      	ldr	r3, [pc, #112]	; (800d210 <mem_init+0x88>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d1a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d1b6:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800d1ba:	f7ff ff1f 	bl	800cffc <ptr_to_mem>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4a14      	ldr	r2, [pc, #80]	; (800d214 <mem_init+0x8c>)
 800d1c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d1c4:	4b13      	ldr	r3, [pc, #76]	; (800d214 <mem_init+0x8c>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <mem_init+0x8c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d1d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d1d6:	4b0f      	ldr	r3, [pc, #60]	; (800d214 <mem_init+0x8c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800d1de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d1e0:	4b0b      	ldr	r3, [pc, #44]	; (800d210 <mem_init+0x88>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a0c      	ldr	r2, [pc, #48]	; (800d218 <mem_init+0x90>)
 800d1e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d1e8:	480c      	ldr	r0, [pc, #48]	; (800d21c <mem_init+0x94>)
 800d1ea:	f00a fbbb 	bl	8017964 <sys_mutex_new>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d006      	beq.n	800d202 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <mem_init+0x98>)
 800d1f6:	f240 221f 	movw	r2, #543	; 0x21f
 800d1fa:	490a      	ldr	r1, [pc, #40]	; (800d224 <mem_init+0x9c>)
 800d1fc:	480a      	ldr	r0, [pc, #40]	; (800d228 <mem_init+0xa0>)
 800d1fe:	f00a fe17 	bl	8017e30 <iprintf>
  }
}
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	20009b3c 	.word	0x20009b3c
 800d210:	2000eb50 	.word	0x2000eb50
 800d214:	2000eb54 	.word	0x2000eb54
 800d218:	2000eb5c 	.word	0x2000eb5c
 800d21c:	2000eb58 	.word	0x2000eb58
 800d220:	0801b9f8 	.word	0x0801b9f8
 800d224:	0801bacc 	.word	0x0801bacc
 800d228:	0801ba40 	.word	0x0801ba40

0800d22c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7ff fef3 	bl	800d020 <mem_to_ptr>
 800d23a:	4603      	mov	r3, r0
 800d23c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff feda 	bl	800cffc <ptr_to_mem>
 800d248:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	885b      	ldrh	r3, [r3, #2]
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff fed4 	bl	800cffc <ptr_to_mem>
 800d254:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d25e:	d818      	bhi.n	800d292 <mem_link_valid+0x66>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	885b      	ldrh	r3, [r3, #2]
 800d264:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d268:	d813      	bhi.n	800d292 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d26e:	8afa      	ldrh	r2, [r7, #22]
 800d270:	429a      	cmp	r2, r3
 800d272:	d004      	beq.n	800d27e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	8afa      	ldrh	r2, [r7, #22]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d109      	bne.n	800d292 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d27e:	4b08      	ldr	r3, [pc, #32]	; (800d2a0 <mem_link_valid+0x74>)
 800d280:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	429a      	cmp	r2, r3
 800d286:	d006      	beq.n	800d296 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	885b      	ldrh	r3, [r3, #2]
 800d28c:	8afa      	ldrh	r2, [r7, #22]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d001      	beq.n	800d296 <mem_link_valid+0x6a>
    return 0;
 800d292:	2300      	movs	r3, #0
 800d294:	e000      	b.n	800d298 <mem_link_valid+0x6c>
  }
  return 1;
 800d296:	2301      	movs	r3, #1
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	2000eb54 	.word	0x2000eb54

0800d2a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b088      	sub	sp, #32
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d070      	beq.n	800d394 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00d      	beq.n	800d2d8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d2bc:	4b37      	ldr	r3, [pc, #220]	; (800d39c <mem_free+0xf8>)
 800d2be:	f240 2273 	movw	r2, #627	; 0x273
 800d2c2:	4937      	ldr	r1, [pc, #220]	; (800d3a0 <mem_free+0xfc>)
 800d2c4:	4837      	ldr	r0, [pc, #220]	; (800d3a4 <mem_free+0x100>)
 800d2c6:	f00a fdb3 	bl	8017e30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2ca:	f00a fb9d 	bl	8017a08 <sys_arch_protect>
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f00a fba7 	bl	8017a24 <sys_arch_unprotect>
    return;
 800d2d6:	e05e      	b.n	800d396 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	3b08      	subs	r3, #8
 800d2dc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d2de:	4b32      	ldr	r3, [pc, #200]	; (800d3a8 <mem_free+0x104>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d306      	bcc.n	800d2f6 <mem_free+0x52>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f103 020c 	add.w	r2, r3, #12
 800d2ee:	4b2f      	ldr	r3, [pc, #188]	; (800d3ac <mem_free+0x108>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d90d      	bls.n	800d312 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d2f6:	4b29      	ldr	r3, [pc, #164]	; (800d39c <mem_free+0xf8>)
 800d2f8:	f240 227f 	movw	r2, #639	; 0x27f
 800d2fc:	492c      	ldr	r1, [pc, #176]	; (800d3b0 <mem_free+0x10c>)
 800d2fe:	4829      	ldr	r0, [pc, #164]	; (800d3a4 <mem_free+0x100>)
 800d300:	f00a fd96 	bl	8017e30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d304:	f00a fb80 	bl	8017a08 <sys_arch_protect>
 800d308:	6138      	str	r0, [r7, #16]
 800d30a:	6938      	ldr	r0, [r7, #16]
 800d30c:	f00a fb8a 	bl	8017a24 <sys_arch_unprotect>
    return;
 800d310:	e041      	b.n	800d396 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d312:	4828      	ldr	r0, [pc, #160]	; (800d3b4 <mem_free+0x110>)
 800d314:	f00a fb3c 	bl	8017990 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	791b      	ldrb	r3, [r3, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d110      	bne.n	800d342 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d320:	4b1e      	ldr	r3, [pc, #120]	; (800d39c <mem_free+0xf8>)
 800d322:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d326:	4924      	ldr	r1, [pc, #144]	; (800d3b8 <mem_free+0x114>)
 800d328:	481e      	ldr	r0, [pc, #120]	; (800d3a4 <mem_free+0x100>)
 800d32a:	f00a fd81 	bl	8017e30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d32e:	4821      	ldr	r0, [pc, #132]	; (800d3b4 <mem_free+0x110>)
 800d330:	f00a fb3d 	bl	80179ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d334:	f00a fb68 	bl	8017a08 <sys_arch_protect>
 800d338:	6178      	str	r0, [r7, #20]
 800d33a:	6978      	ldr	r0, [r7, #20]
 800d33c:	f00a fb72 	bl	8017a24 <sys_arch_unprotect>
    return;
 800d340:	e029      	b.n	800d396 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d342:	69f8      	ldr	r0, [r7, #28]
 800d344:	f7ff ff72 	bl	800d22c <mem_link_valid>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d110      	bne.n	800d370 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d34e:	4b13      	ldr	r3, [pc, #76]	; (800d39c <mem_free+0xf8>)
 800d350:	f240 2295 	movw	r2, #661	; 0x295
 800d354:	4919      	ldr	r1, [pc, #100]	; (800d3bc <mem_free+0x118>)
 800d356:	4813      	ldr	r0, [pc, #76]	; (800d3a4 <mem_free+0x100>)
 800d358:	f00a fd6a 	bl	8017e30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d35c:	4815      	ldr	r0, [pc, #84]	; (800d3b4 <mem_free+0x110>)
 800d35e:	f00a fb26 	bl	80179ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d362:	f00a fb51 	bl	8017a08 <sys_arch_protect>
 800d366:	61b8      	str	r0, [r7, #24]
 800d368:	69b8      	ldr	r0, [r7, #24]
 800d36a:	f00a fb5b 	bl	8017a24 <sys_arch_unprotect>
    return;
 800d36e:	e012      	b.n	800d396 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	2200      	movs	r2, #0
 800d374:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d376:	4b12      	ldr	r3, [pc, #72]	; (800d3c0 <mem_free+0x11c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d202      	bcs.n	800d386 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d380:	4a0f      	ldr	r2, [pc, #60]	; (800d3c0 <mem_free+0x11c>)
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d386:	69f8      	ldr	r0, [r7, #28]
 800d388:	f7ff fe5c 	bl	800d044 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d38c:	4809      	ldr	r0, [pc, #36]	; (800d3b4 <mem_free+0x110>)
 800d38e:	f00a fb0e 	bl	80179ae <sys_mutex_unlock>
 800d392:	e000      	b.n	800d396 <mem_free+0xf2>
    return;
 800d394:	bf00      	nop
}
 800d396:	3720      	adds	r7, #32
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	0801b9f8 	.word	0x0801b9f8
 800d3a0:	0801bae8 	.word	0x0801bae8
 800d3a4:	0801ba40 	.word	0x0801ba40
 800d3a8:	2000eb50 	.word	0x2000eb50
 800d3ac:	2000eb54 	.word	0x2000eb54
 800d3b0:	0801bb0c 	.word	0x0801bb0c
 800d3b4:	2000eb58 	.word	0x2000eb58
 800d3b8:	0801bb28 	.word	0x0801bb28
 800d3bc:	0801bb50 	.word	0x0801bb50
 800d3c0:	2000eb5c 	.word	0x2000eb5c

0800d3c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d3d0:	887b      	ldrh	r3, [r7, #2]
 800d3d2:	3303      	adds	r3, #3
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d3dc:	8bfb      	ldrh	r3, [r7, #30]
 800d3de:	2b0b      	cmp	r3, #11
 800d3e0:	d801      	bhi.n	800d3e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d3e6:	8bfb      	ldrh	r3, [r7, #30]
 800d3e8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d3ec:	d803      	bhi.n	800d3f6 <mem_trim+0x32>
 800d3ee:	8bfa      	ldrh	r2, [r7, #30]
 800d3f0:	887b      	ldrh	r3, [r7, #2]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d201      	bcs.n	800d3fa <mem_trim+0x36>
    return NULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e0d8      	b.n	800d5ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d3fa:	4b6e      	ldr	r3, [pc, #440]	; (800d5b4 <mem_trim+0x1f0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d304      	bcc.n	800d40e <mem_trim+0x4a>
 800d404:	4b6c      	ldr	r3, [pc, #432]	; (800d5b8 <mem_trim+0x1f4>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d306      	bcc.n	800d41c <mem_trim+0x58>
 800d40e:	4b6b      	ldr	r3, [pc, #428]	; (800d5bc <mem_trim+0x1f8>)
 800d410:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d414:	496a      	ldr	r1, [pc, #424]	; (800d5c0 <mem_trim+0x1fc>)
 800d416:	486b      	ldr	r0, [pc, #428]	; (800d5c4 <mem_trim+0x200>)
 800d418:	f00a fd0a 	bl	8017e30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d41c:	4b65      	ldr	r3, [pc, #404]	; (800d5b4 <mem_trim+0x1f0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	429a      	cmp	r2, r3
 800d424:	d304      	bcc.n	800d430 <mem_trim+0x6c>
 800d426:	4b64      	ldr	r3, [pc, #400]	; (800d5b8 <mem_trim+0x1f4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d307      	bcc.n	800d440 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d430:	f00a faea 	bl	8017a08 <sys_arch_protect>
 800d434:	60b8      	str	r0, [r7, #8]
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f00a faf4 	bl	8017a24 <sys_arch_unprotect>
    return rmem;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	e0b5      	b.n	800d5ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3b08      	subs	r3, #8
 800d444:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d446:	69b8      	ldr	r0, [r7, #24]
 800d448:	f7ff fdea 	bl	800d020 <mem_to_ptr>
 800d44c:	4603      	mov	r3, r0
 800d44e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	881a      	ldrh	r2, [r3, #0]
 800d454:	8afb      	ldrh	r3, [r7, #22]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b08      	subs	r3, #8
 800d45c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d45e:	8bfa      	ldrh	r2, [r7, #30]
 800d460:	8abb      	ldrh	r3, [r7, #20]
 800d462:	429a      	cmp	r2, r3
 800d464:	d906      	bls.n	800d474 <mem_trim+0xb0>
 800d466:	4b55      	ldr	r3, [pc, #340]	; (800d5bc <mem_trim+0x1f8>)
 800d468:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d46c:	4956      	ldr	r1, [pc, #344]	; (800d5c8 <mem_trim+0x204>)
 800d46e:	4855      	ldr	r0, [pc, #340]	; (800d5c4 <mem_trim+0x200>)
 800d470:	f00a fcde 	bl	8017e30 <iprintf>
  if (newsize > size) {
 800d474:	8bfa      	ldrh	r2, [r7, #30]
 800d476:	8abb      	ldrh	r3, [r7, #20]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d901      	bls.n	800d480 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d47c:	2300      	movs	r3, #0
 800d47e:	e095      	b.n	800d5ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d480:	8bfa      	ldrh	r2, [r7, #30]
 800d482:	8abb      	ldrh	r3, [r7, #20]
 800d484:	429a      	cmp	r2, r3
 800d486:	d101      	bne.n	800d48c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	e08f      	b.n	800d5ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d48c:	484f      	ldr	r0, [pc, #316]	; (800d5cc <mem_trim+0x208>)
 800d48e:	f00a fa7f 	bl	8017990 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fdb0 	bl	800cffc <ptr_to_mem>
 800d49c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	791b      	ldrb	r3, [r3, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d13f      	bne.n	800d526 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d4ae:	d106      	bne.n	800d4be <mem_trim+0xfa>
 800d4b0:	4b42      	ldr	r3, [pc, #264]	; (800d5bc <mem_trim+0x1f8>)
 800d4b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d4b6:	4946      	ldr	r1, [pc, #280]	; (800d5d0 <mem_trim+0x20c>)
 800d4b8:	4842      	ldr	r0, [pc, #264]	; (800d5c4 <mem_trim+0x200>)
 800d4ba:	f00a fcb9 	bl	8017e30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	881b      	ldrh	r3, [r3, #0]
 800d4c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d4c4:	8afa      	ldrh	r2, [r7, #22]
 800d4c6:	8bfb      	ldrh	r3, [r7, #30]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	3308      	adds	r3, #8
 800d4ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d4d0:	4b40      	ldr	r3, [pc, #256]	; (800d5d4 <mem_trim+0x210>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d106      	bne.n	800d4e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d4da:	89fb      	ldrh	r3, [r7, #14]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff fd8d 	bl	800cffc <ptr_to_mem>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	4a3b      	ldr	r2, [pc, #236]	; (800d5d4 <mem_trim+0x210>)
 800d4e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fd86 	bl	800cffc <ptr_to_mem>
 800d4f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	89ba      	ldrh	r2, [r7, #12]
 800d4fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	8afa      	ldrh	r2, [r7, #22]
 800d502:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	89fa      	ldrh	r2, [r7, #14]
 800d508:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d512:	d047      	beq.n	800d5a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	4618      	mov	r0, r3
 800d51a:	f7ff fd6f 	bl	800cffc <ptr_to_mem>
 800d51e:	4602      	mov	r2, r0
 800d520:	89fb      	ldrh	r3, [r7, #14]
 800d522:	8053      	strh	r3, [r2, #2]
 800d524:	e03e      	b.n	800d5a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d526:	8bfb      	ldrh	r3, [r7, #30]
 800d528:	f103 0214 	add.w	r2, r3, #20
 800d52c:	8abb      	ldrh	r3, [r7, #20]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d838      	bhi.n	800d5a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d532:	8afa      	ldrh	r2, [r7, #22]
 800d534:	8bfb      	ldrh	r3, [r7, #30]
 800d536:	4413      	add	r3, r2
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3308      	adds	r3, #8
 800d53c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d546:	d106      	bne.n	800d556 <mem_trim+0x192>
 800d548:	4b1c      	ldr	r3, [pc, #112]	; (800d5bc <mem_trim+0x1f8>)
 800d54a:	f240 3216 	movw	r2, #790	; 0x316
 800d54e:	4920      	ldr	r1, [pc, #128]	; (800d5d0 <mem_trim+0x20c>)
 800d550:	481c      	ldr	r0, [pc, #112]	; (800d5c4 <mem_trim+0x200>)
 800d552:	f00a fc6d 	bl	8017e30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d556:	89fb      	ldrh	r3, [r7, #14]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fd4f 	bl	800cffc <ptr_to_mem>
 800d55e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d560:	4b1c      	ldr	r3, [pc, #112]	; (800d5d4 <mem_trim+0x210>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	429a      	cmp	r2, r3
 800d568:	d202      	bcs.n	800d570 <mem_trim+0x1ac>
      lfree = mem2;
 800d56a:	4a1a      	ldr	r2, [pc, #104]	; (800d5d4 <mem_trim+0x210>)
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	2200      	movs	r2, #0
 800d574:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	881a      	ldrh	r2, [r3, #0]
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	8afa      	ldrh	r2, [r7, #22]
 800d582:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	89fa      	ldrh	r2, [r7, #14]
 800d588:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d592:	d007      	beq.n	800d5a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fd2f 	bl	800cffc <ptr_to_mem>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	89fb      	ldrh	r3, [r7, #14]
 800d5a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d5a4:	4809      	ldr	r0, [pc, #36]	; (800d5cc <mem_trim+0x208>)
 800d5a6:	f00a fa02 	bl	80179ae <sys_mutex_unlock>
  return rmem;
 800d5aa:	687b      	ldr	r3, [r7, #4]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3720      	adds	r7, #32
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	2000eb50 	.word	0x2000eb50
 800d5b8:	2000eb54 	.word	0x2000eb54
 800d5bc:	0801b9f8 	.word	0x0801b9f8
 800d5c0:	0801bb84 	.word	0x0801bb84
 800d5c4:	0801ba40 	.word	0x0801ba40
 800d5c8:	0801bb9c 	.word	0x0801bb9c
 800d5cc:	2000eb58 	.word	0x2000eb58
 800d5d0:	0801bbbc 	.word	0x0801bbbc
 800d5d4:	2000eb5c 	.word	0x2000eb5c

0800d5d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b088      	sub	sp, #32
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d101      	bne.n	800d5ec <mem_malloc+0x14>
    return NULL;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e0e2      	b.n	800d7b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d5ec:	88fb      	ldrh	r3, [r7, #6]
 800d5ee:	3303      	adds	r3, #3
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d5f8:	8bbb      	ldrh	r3, [r7, #28]
 800d5fa:	2b0b      	cmp	r3, #11
 800d5fc:	d801      	bhi.n	800d602 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d5fe:	230c      	movs	r3, #12
 800d600:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d602:	8bbb      	ldrh	r3, [r7, #28]
 800d604:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d608:	d803      	bhi.n	800d612 <mem_malloc+0x3a>
 800d60a:	8bba      	ldrh	r2, [r7, #28]
 800d60c:	88fb      	ldrh	r3, [r7, #6]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d201      	bcs.n	800d616 <mem_malloc+0x3e>
    return NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	e0cd      	b.n	800d7b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d616:	4869      	ldr	r0, [pc, #420]	; (800d7bc <mem_malloc+0x1e4>)
 800d618:	f00a f9ba 	bl	8017990 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d61c:	4b68      	ldr	r3, [pc, #416]	; (800d7c0 <mem_malloc+0x1e8>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f7ff fcfd 	bl	800d020 <mem_to_ptr>
 800d626:	4603      	mov	r3, r0
 800d628:	83fb      	strh	r3, [r7, #30]
 800d62a:	e0b7      	b.n	800d79c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d62c:	8bfb      	ldrh	r3, [r7, #30]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fce4 	bl	800cffc <ptr_to_mem>
 800d634:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	791b      	ldrb	r3, [r3, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f040 80a7 	bne.w	800d78e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	8bfb      	ldrh	r3, [r7, #30]
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	f1a3 0208 	sub.w	r2, r3, #8
 800d64e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d650:	429a      	cmp	r2, r3
 800d652:	f0c0 809c 	bcc.w	800d78e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	461a      	mov	r2, r3
 800d65c:	8bfb      	ldrh	r3, [r7, #30]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	f1a3 0208 	sub.w	r2, r3, #8
 800d664:	8bbb      	ldrh	r3, [r7, #28]
 800d666:	3314      	adds	r3, #20
 800d668:	429a      	cmp	r2, r3
 800d66a:	d333      	bcc.n	800d6d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d66c:	8bfa      	ldrh	r2, [r7, #30]
 800d66e:	8bbb      	ldrh	r3, [r7, #28]
 800d670:	4413      	add	r3, r2
 800d672:	b29b      	uxth	r3, r3
 800d674:	3308      	adds	r3, #8
 800d676:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d678:	8a7b      	ldrh	r3, [r7, #18]
 800d67a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d67e:	d106      	bne.n	800d68e <mem_malloc+0xb6>
 800d680:	4b50      	ldr	r3, [pc, #320]	; (800d7c4 <mem_malloc+0x1ec>)
 800d682:	f240 3287 	movw	r2, #903	; 0x387
 800d686:	4950      	ldr	r1, [pc, #320]	; (800d7c8 <mem_malloc+0x1f0>)
 800d688:	4850      	ldr	r0, [pc, #320]	; (800d7cc <mem_malloc+0x1f4>)
 800d68a:	f00a fbd1 	bl	8017e30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d68e:	8a7b      	ldrh	r3, [r7, #18]
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fcb3 	bl	800cffc <ptr_to_mem>
 800d696:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2200      	movs	r2, #0
 800d69c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	881a      	ldrh	r2, [r3, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	8bfa      	ldrh	r2, [r7, #30]
 800d6aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	8a7a      	ldrh	r2, [r7, #18]
 800d6b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	881b      	ldrh	r3, [r3, #0]
 800d6bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d6c0:	d00b      	beq.n	800d6da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff fc98 	bl	800cffc <ptr_to_mem>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	8a7b      	ldrh	r3, [r7, #18]
 800d6d0:	8053      	strh	r3, [r2, #2]
 800d6d2:	e002      	b.n	800d6da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d6da:	4b39      	ldr	r3, [pc, #228]	; (800d7c0 <mem_malloc+0x1e8>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d127      	bne.n	800d734 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d6e4:	4b36      	ldr	r3, [pc, #216]	; (800d7c0 <mem_malloc+0x1e8>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d6ea:	e005      	b.n	800d6f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7ff fc83 	bl	800cffc <ptr_to_mem>
 800d6f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	791b      	ldrb	r3, [r3, #4]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d004      	beq.n	800d70a <mem_malloc+0x132>
 800d700:	4b33      	ldr	r3, [pc, #204]	; (800d7d0 <mem_malloc+0x1f8>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	69ba      	ldr	r2, [r7, #24]
 800d706:	429a      	cmp	r2, r3
 800d708:	d1f0      	bne.n	800d6ec <mem_malloc+0x114>
          }
          lfree = cur;
 800d70a:	4a2d      	ldr	r2, [pc, #180]	; (800d7c0 <mem_malloc+0x1e8>)
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d710:	4b2b      	ldr	r3, [pc, #172]	; (800d7c0 <mem_malloc+0x1e8>)
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	4b2e      	ldr	r3, [pc, #184]	; (800d7d0 <mem_malloc+0x1f8>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d00b      	beq.n	800d734 <mem_malloc+0x15c>
 800d71c:	4b28      	ldr	r3, [pc, #160]	; (800d7c0 <mem_malloc+0x1e8>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	791b      	ldrb	r3, [r3, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d006      	beq.n	800d734 <mem_malloc+0x15c>
 800d726:	4b27      	ldr	r3, [pc, #156]	; (800d7c4 <mem_malloc+0x1ec>)
 800d728:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d72c:	4929      	ldr	r1, [pc, #164]	; (800d7d4 <mem_malloc+0x1fc>)
 800d72e:	4827      	ldr	r0, [pc, #156]	; (800d7cc <mem_malloc+0x1f4>)
 800d730:	f00a fb7e 	bl	8017e30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d734:	4821      	ldr	r0, [pc, #132]	; (800d7bc <mem_malloc+0x1e4>)
 800d736:	f00a f93a 	bl	80179ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d73a:	8bba      	ldrh	r2, [r7, #28]
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	4413      	add	r3, r2
 800d740:	3308      	adds	r3, #8
 800d742:	4a23      	ldr	r2, [pc, #140]	; (800d7d0 <mem_malloc+0x1f8>)
 800d744:	6812      	ldr	r2, [r2, #0]
 800d746:	4293      	cmp	r3, r2
 800d748:	d906      	bls.n	800d758 <mem_malloc+0x180>
 800d74a:	4b1e      	ldr	r3, [pc, #120]	; (800d7c4 <mem_malloc+0x1ec>)
 800d74c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d750:	4921      	ldr	r1, [pc, #132]	; (800d7d8 <mem_malloc+0x200>)
 800d752:	481e      	ldr	r0, [pc, #120]	; (800d7cc <mem_malloc+0x1f4>)
 800d754:	f00a fb6c 	bl	8017e30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f003 0303 	and.w	r3, r3, #3
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d006      	beq.n	800d770 <mem_malloc+0x198>
 800d762:	4b18      	ldr	r3, [pc, #96]	; (800d7c4 <mem_malloc+0x1ec>)
 800d764:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d768:	491c      	ldr	r1, [pc, #112]	; (800d7dc <mem_malloc+0x204>)
 800d76a:	4818      	ldr	r0, [pc, #96]	; (800d7cc <mem_malloc+0x1f4>)
 800d76c:	f00a fb60 	bl	8017e30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f003 0303 	and.w	r3, r3, #3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d006      	beq.n	800d788 <mem_malloc+0x1b0>
 800d77a:	4b12      	ldr	r3, [pc, #72]	; (800d7c4 <mem_malloc+0x1ec>)
 800d77c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d780:	4917      	ldr	r1, [pc, #92]	; (800d7e0 <mem_malloc+0x208>)
 800d782:	4812      	ldr	r0, [pc, #72]	; (800d7cc <mem_malloc+0x1f4>)
 800d784:	f00a fb54 	bl	8017e30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	3308      	adds	r3, #8
 800d78c:	e011      	b.n	800d7b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d78e:	8bfb      	ldrh	r3, [r7, #30]
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fc33 	bl	800cffc <ptr_to_mem>
 800d796:	4603      	mov	r3, r0
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d79c:	8bfa      	ldrh	r2, [r7, #30]
 800d79e:	8bbb      	ldrh	r3, [r7, #28]
 800d7a0:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	f4ff af41 	bcc.w	800d62c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d7aa:	4804      	ldr	r0, [pc, #16]	; (800d7bc <mem_malloc+0x1e4>)
 800d7ac:	f00a f8ff 	bl	80179ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	2000eb58 	.word	0x2000eb58
 800d7c0:	2000eb5c 	.word	0x2000eb5c
 800d7c4:	0801b9f8 	.word	0x0801b9f8
 800d7c8:	0801bbbc 	.word	0x0801bbbc
 800d7cc:	0801ba40 	.word	0x0801ba40
 800d7d0:	2000eb54 	.word	0x2000eb54
 800d7d4:	0801bbd0 	.word	0x0801bbd0
 800d7d8:	0801bbec 	.word	0x0801bbec
 800d7dc:	0801bc1c 	.word	0x0801bc1c
 800d7e0:	0801bc4c 	.word	0x0801bc4c

0800d7e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	3303      	adds	r3, #3
 800d7fa:	f023 0303 	bic.w	r3, r3, #3
 800d7fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	e011      	b.n	800d82a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	461a      	mov	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	4413      	add	r3, r2
 800d822:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3301      	adds	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	885b      	ldrh	r3, [r3, #2]
 800d82e:	461a      	mov	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	4293      	cmp	r3, r2
 800d834:	dbe7      	blt.n	800d806 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d836:	bf00      	nop
 800d838:	bf00      	nop
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d84a:	2300      	movs	r3, #0
 800d84c:	80fb      	strh	r3, [r7, #6]
 800d84e:	e009      	b.n	800d864 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d850:	88fb      	ldrh	r3, [r7, #6]
 800d852:	4a08      	ldr	r2, [pc, #32]	; (800d874 <memp_init+0x30>)
 800d854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff ffc3 	bl	800d7e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d85e:	88fb      	ldrh	r3, [r7, #6]
 800d860:	3301      	adds	r3, #1
 800d862:	80fb      	strh	r3, [r7, #6]
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	2b0b      	cmp	r3, #11
 800d868:	d9f2      	bls.n	800d850 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d86a:	bf00      	nop
 800d86c:	bf00      	nop
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	0801e1bc 	.word	0x0801e1bc

0800d878 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d880:	f00a f8c2 	bl	8017a08 <sys_arch_protect>
 800d884:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d015      	beq.n	800d8c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	6812      	ldr	r2, [r2, #0]
 800d89c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f003 0303 	and.w	r3, r3, #3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d006      	beq.n	800d8b6 <do_memp_malloc_pool+0x3e>
 800d8a8:	4b09      	ldr	r3, [pc, #36]	; (800d8d0 <do_memp_malloc_pool+0x58>)
 800d8aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d8ae:	4909      	ldr	r1, [pc, #36]	; (800d8d4 <do_memp_malloc_pool+0x5c>)
 800d8b0:	4809      	ldr	r0, [pc, #36]	; (800d8d8 <do_memp_malloc_pool+0x60>)
 800d8b2:	f00a fabd 	bl	8017e30 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f00a f8b4 	bl	8017a24 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	e003      	b.n	800d8c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f00a f8af 	bl	8017a24 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	0801bc70 	.word	0x0801bc70
 800d8d4:	0801bca0 	.word	0x0801bca0
 800d8d8:	0801bcc4 	.word	0x0801bcc4

0800d8dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d106      	bne.n	800d8f8 <memp_malloc_pool+0x1c>
 800d8ea:	4b0a      	ldr	r3, [pc, #40]	; (800d914 <memp_malloc_pool+0x38>)
 800d8ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d8f0:	4909      	ldr	r1, [pc, #36]	; (800d918 <memp_malloc_pool+0x3c>)
 800d8f2:	480a      	ldr	r0, [pc, #40]	; (800d91c <memp_malloc_pool+0x40>)
 800d8f4:	f00a fa9c 	bl	8017e30 <iprintf>
  if (desc == NULL) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <memp_malloc_pool+0x26>
    return NULL;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e003      	b.n	800d90a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff ffb8 	bl	800d878 <do_memp_malloc_pool>
 800d908:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801bc70 	.word	0x0801bc70
 800d918:	0801bcec 	.word	0x0801bcec
 800d91c:	0801bcc4 	.word	0x0801bcc4

0800d920 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d92a:	79fb      	ldrb	r3, [r7, #7]
 800d92c:	2b0b      	cmp	r3, #11
 800d92e:	d908      	bls.n	800d942 <memp_malloc+0x22>
 800d930:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <memp_malloc+0x3c>)
 800d932:	f240 1257 	movw	r2, #343	; 0x157
 800d936:	490a      	ldr	r1, [pc, #40]	; (800d960 <memp_malloc+0x40>)
 800d938:	480a      	ldr	r0, [pc, #40]	; (800d964 <memp_malloc+0x44>)
 800d93a:	f00a fa79 	bl	8017e30 <iprintf>
 800d93e:	2300      	movs	r3, #0
 800d940:	e008      	b.n	800d954 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	4a08      	ldr	r2, [pc, #32]	; (800d968 <memp_malloc+0x48>)
 800d946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff ff94 	bl	800d878 <do_memp_malloc_pool>
 800d950:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d952:	68fb      	ldr	r3, [r7, #12]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	0801bc70 	.word	0x0801bc70
 800d960:	0801bd00 	.word	0x0801bd00
 800d964:	0801bcc4 	.word	0x0801bcc4
 800d968:	0801e1bc 	.word	0x0801e1bc

0800d96c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f003 0303 	and.w	r3, r3, #3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d006      	beq.n	800d98e <do_memp_free_pool+0x22>
 800d980:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <do_memp_free_pool+0x4c>)
 800d982:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d986:	490d      	ldr	r1, [pc, #52]	; (800d9bc <do_memp_free_pool+0x50>)
 800d988:	480d      	ldr	r0, [pc, #52]	; (800d9c0 <do_memp_free_pool+0x54>)
 800d98a:	f00a fa51 	bl	8017e30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d992:	f00a f839 	bl	8017a08 <sys_arch_protect>
 800d996:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d9aa:	68b8      	ldr	r0, [r7, #8]
 800d9ac:	f00a f83a 	bl	8017a24 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d9b0:	bf00      	nop
 800d9b2:	3710      	adds	r7, #16
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	0801bc70 	.word	0x0801bc70
 800d9bc:	0801bd20 	.word	0x0801bd20
 800d9c0:	0801bcc4 	.word	0x0801bcc4

0800d9c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d106      	bne.n	800d9e2 <memp_free_pool+0x1e>
 800d9d4:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <memp_free_pool+0x3c>)
 800d9d6:	f240 1295 	movw	r2, #405	; 0x195
 800d9da:	490a      	ldr	r1, [pc, #40]	; (800da04 <memp_free_pool+0x40>)
 800d9dc:	480a      	ldr	r0, [pc, #40]	; (800da08 <memp_free_pool+0x44>)
 800d9de:	f00a fa27 	bl	8017e30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <memp_free_pool+0x34>
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d004      	beq.n	800d9f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff ffbb 	bl	800d96c <do_memp_free_pool>
 800d9f6:	e000      	b.n	800d9fa <memp_free_pool+0x36>
    return;
 800d9f8:	bf00      	nop
}
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	0801bc70 	.word	0x0801bc70
 800da04:	0801bcec 	.word	0x0801bcec
 800da08:	0801bcc4 	.word	0x0801bcc4

0800da0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	4603      	mov	r3, r0
 800da14:	6039      	str	r1, [r7, #0]
 800da16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	2b0b      	cmp	r3, #11
 800da1c:	d907      	bls.n	800da2e <memp_free+0x22>
 800da1e:	4b0c      	ldr	r3, [pc, #48]	; (800da50 <memp_free+0x44>)
 800da20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800da24:	490b      	ldr	r1, [pc, #44]	; (800da54 <memp_free+0x48>)
 800da26:	480c      	ldr	r0, [pc, #48]	; (800da58 <memp_free+0x4c>)
 800da28:	f00a fa02 	bl	8017e30 <iprintf>
 800da2c:	e00c      	b.n	800da48 <memp_free+0x3c>

  if (mem == NULL) {
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d008      	beq.n	800da46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	4a09      	ldr	r2, [pc, #36]	; (800da5c <memp_free+0x50>)
 800da38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da3c:	6839      	ldr	r1, [r7, #0]
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff ff94 	bl	800d96c <do_memp_free_pool>
 800da44:	e000      	b.n	800da48 <memp_free+0x3c>
    return;
 800da46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	0801bc70 	.word	0x0801bc70
 800da54:	0801bd40 	.word	0x0801bd40
 800da58:	0801bcc4 	.word	0x0801bcc4
 800da5c:	0801e1bc 	.word	0x0801e1bc

0800da60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800da60:	b480      	push	{r7}
 800da62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800da64:	bf00      	nop
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr
	...

0800da70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
 800da7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d108      	bne.n	800da96 <netif_add+0x26>
 800da84:	4b57      	ldr	r3, [pc, #348]	; (800dbe4 <netif_add+0x174>)
 800da86:	f240 1227 	movw	r2, #295	; 0x127
 800da8a:	4957      	ldr	r1, [pc, #348]	; (800dbe8 <netif_add+0x178>)
 800da8c:	4857      	ldr	r0, [pc, #348]	; (800dbec <netif_add+0x17c>)
 800da8e:	f00a f9cf 	bl	8017e30 <iprintf>
 800da92:	2300      	movs	r3, #0
 800da94:	e0a2      	b.n	800dbdc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d108      	bne.n	800daae <netif_add+0x3e>
 800da9c:	4b51      	ldr	r3, [pc, #324]	; (800dbe4 <netif_add+0x174>)
 800da9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800daa2:	4953      	ldr	r1, [pc, #332]	; (800dbf0 <netif_add+0x180>)
 800daa4:	4851      	ldr	r0, [pc, #324]	; (800dbec <netif_add+0x17c>)
 800daa6:	f00a f9c3 	bl	8017e30 <iprintf>
 800daaa:	2300      	movs	r3, #0
 800daac:	e096      	b.n	800dbdc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dab4:	4b4f      	ldr	r3, [pc, #316]	; (800dbf4 <netif_add+0x184>)
 800dab6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dabe:	4b4d      	ldr	r3, [pc, #308]	; (800dbf4 <netif_add+0x184>)
 800dac0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dac8:	4b4a      	ldr	r3, [pc, #296]	; (800dbf4 <netif_add+0x184>)
 800daca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	4a45      	ldr	r2, [pc, #276]	; (800dbf8 <netif_add+0x188>)
 800dae2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2200      	movs	r2, #0
 800daf6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a3a      	ldr	r2, [r7, #32]
 800dafc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dafe:	4b3f      	ldr	r3, [pc, #252]	; (800dbfc <netif_add+0x18c>)
 800db00:	781a      	ldrb	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db0c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 f90f 	bl	800dd38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	4798      	blx	r3
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <netif_add+0xba>
    return NULL;
 800db26:	2300      	movs	r3, #0
 800db28:	e058      	b.n	800dbdc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db30:	2bff      	cmp	r3, #255	; 0xff
 800db32:	d103      	bne.n	800db3c <netif_add+0xcc>
        netif->num = 0;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db40:	4b2f      	ldr	r3, [pc, #188]	; (800dc00 <netif_add+0x190>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	617b      	str	r3, [r7, #20]
 800db46:	e02b      	b.n	800dba0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d106      	bne.n	800db5e <netif_add+0xee>
 800db50:	4b24      	ldr	r3, [pc, #144]	; (800dbe4 <netif_add+0x174>)
 800db52:	f240 128b 	movw	r2, #395	; 0x18b
 800db56:	492b      	ldr	r1, [pc, #172]	; (800dc04 <netif_add+0x194>)
 800db58:	4824      	ldr	r0, [pc, #144]	; (800dbec <netif_add+0x17c>)
 800db5a:	f00a f969 	bl	8017e30 <iprintf>
        num_netifs++;
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	3301      	adds	r3, #1
 800db62:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2bff      	cmp	r3, #255	; 0xff
 800db68:	dd06      	ble.n	800db78 <netif_add+0x108>
 800db6a:	4b1e      	ldr	r3, [pc, #120]	; (800dbe4 <netif_add+0x174>)
 800db6c:	f240 128d 	movw	r2, #397	; 0x18d
 800db70:	4925      	ldr	r1, [pc, #148]	; (800dc08 <netif_add+0x198>)
 800db72:	481e      	ldr	r0, [pc, #120]	; (800dbec <netif_add+0x17c>)
 800db74:	f00a f95c 	bl	8017e30 <iprintf>
        if (netif2->num == netif->num) {
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db84:	429a      	cmp	r2, r3
 800db86:	d108      	bne.n	800db9a <netif_add+0x12a>
          netif->num++;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db8e:	3301      	adds	r3, #1
 800db90:	b2da      	uxtb	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800db98:	e005      	b.n	800dba6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	617b      	str	r3, [r7, #20]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1d0      	bne.n	800db48 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1be      	bne.n	800db2a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbb2:	2bfe      	cmp	r3, #254	; 0xfe
 800dbb4:	d103      	bne.n	800dbbe <netif_add+0x14e>
    netif_num = 0;
 800dbb6:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <netif_add+0x18c>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	701a      	strb	r2, [r3, #0]
 800dbbc:	e006      	b.n	800dbcc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <netif_add+0x18c>)
 800dbca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dbcc:	4b0c      	ldr	r3, [pc, #48]	; (800dc00 <netif_add+0x190>)
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800dbd4:	4a0a      	ldr	r2, [pc, #40]	; (800dc00 <netif_add+0x190>)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dbda:	68fb      	ldr	r3, [r7, #12]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	0801bd5c 	.word	0x0801bd5c
 800dbe8:	0801bdf0 	.word	0x0801bdf0
 800dbec:	0801bdac 	.word	0x0801bdac
 800dbf0:	0801be0c 	.word	0x0801be0c
 800dbf4:	0801e22c 	.word	0x0801e22c
 800dbf8:	0800e013 	.word	0x0800e013
 800dbfc:	20011bac 	.word	0x20011bac
 800dc00:	20011ba4 	.word	0x20011ba4
 800dc04:	0801be30 	.word	0x0801be30
 800dc08:	0801be44 	.word	0x0801be44

0800dc0c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f002 fe99 	bl	8010950 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d106      	bne.n	800dc48 <netif_do_set_ipaddr+0x20>
 800dc3a:	4b1d      	ldr	r3, [pc, #116]	; (800dcb0 <netif_do_set_ipaddr+0x88>)
 800dc3c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800dc40:	491c      	ldr	r1, [pc, #112]	; (800dcb4 <netif_do_set_ipaddr+0x8c>)
 800dc42:	481d      	ldr	r0, [pc, #116]	; (800dcb8 <netif_do_set_ipaddr+0x90>)
 800dc44:	f00a f8f4 	bl	8017e30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d106      	bne.n	800dc5c <netif_do_set_ipaddr+0x34>
 800dc4e:	4b18      	ldr	r3, [pc, #96]	; (800dcb0 <netif_do_set_ipaddr+0x88>)
 800dc50:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dc54:	4917      	ldr	r1, [pc, #92]	; (800dcb4 <netif_do_set_ipaddr+0x8c>)
 800dc56:	4818      	ldr	r0, [pc, #96]	; (800dcb8 <netif_do_set_ipaddr+0x90>)
 800dc58:	f00a f8ea 	bl	8017e30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	3304      	adds	r3, #4
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d01c      	beq.n	800dca4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	3304      	adds	r3, #4
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dc7a:	f107 0314 	add.w	r3, r7, #20
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff ffc3 	bl	800dc0c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <netif_do_set_ipaddr+0x6a>
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	e000      	b.n	800dc94 <netif_do_set_ipaddr+0x6c>
 800dc92:	2300      	movs	r3, #0
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dc98:	2101      	movs	r1, #1
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 f8d2 	bl	800de44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dca0:	2301      	movs	r3, #1
 800dca2:	e000      	b.n	800dca6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	0801bd5c 	.word	0x0801bd5c
 800dcb4:	0801be74 	.word	0x0801be74
 800dcb8:	0801bdac 	.word	0x0801bdac

0800dcbc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3308      	adds	r3, #8
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d00a      	beq.n	800dcec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d002      	beq.n	800dce2 <netif_do_set_netmask+0x26>
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	e000      	b.n	800dce4 <netif_do_set_netmask+0x28>
 800dce2:	2300      	movs	r3, #0
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dce8:	2301      	movs	r3, #1
 800dcea:	e000      	b.n	800dcee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3714      	adds	r7, #20
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr

0800dcfa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dcfa:	b480      	push	{r7}
 800dcfc:	b085      	sub	sp, #20
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	60f8      	str	r0, [r7, #12]
 800dd02:	60b9      	str	r1, [r7, #8]
 800dd04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	330c      	adds	r3, #12
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d00a      	beq.n	800dd2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <netif_do_set_gw+0x26>
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	e000      	b.n	800dd22 <netif_do_set_gw+0x28>
 800dd20:	2300      	movs	r3, #0
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dd26:	2301      	movs	r3, #1
 800dd28:	e000      	b.n	800dd2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3714      	adds	r7, #20
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d101      	bne.n	800dd58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dd54:	4b1c      	ldr	r3, [pc, #112]	; (800ddc8 <netif_set_addr+0x90>)
 800dd56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d101      	bne.n	800dd62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dd5e:	4b1a      	ldr	r3, [pc, #104]	; (800ddc8 <netif_set_addr+0x90>)
 800dd60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dd68:	4b17      	ldr	r3, [pc, #92]	; (800ddc8 <netif_set_addr+0x90>)
 800dd6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <netif_set_addr+0x42>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <netif_set_addr+0x46>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e000      	b.n	800dd80 <netif_set_addr+0x48>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d006      	beq.n	800dd96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dd88:	f107 0310 	add.w	r3, r7, #16
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	68b9      	ldr	r1, [r7, #8]
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f7ff ff49 	bl	800dc28 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dd96:	69fa      	ldr	r2, [r7, #28]
 800dd98:	6879      	ldr	r1, [r7, #4]
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7ff ff8e 	bl	800dcbc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dda0:	69ba      	ldr	r2, [r7, #24]
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f7ff ffa8 	bl	800dcfa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ddb0:	f107 0310 	add.w	r3, r7, #16
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff ff35 	bl	800dc28 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ddbe:	bf00      	nop
 800ddc0:	3720      	adds	r7, #32
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	0801e22c 	.word	0x0801e22c

0800ddcc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ddd4:	4a04      	ldr	r2, [pc, #16]	; (800dde8 <netif_set_default+0x1c>)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ddda:	bf00      	nop
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	20011ba8 	.word	0x20011ba8

0800ddec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d107      	bne.n	800de0a <netif_set_up+0x1e>
 800ddfa:	4b0f      	ldr	r3, [pc, #60]	; (800de38 <netif_set_up+0x4c>)
 800ddfc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800de00:	490e      	ldr	r1, [pc, #56]	; (800de3c <netif_set_up+0x50>)
 800de02:	480f      	ldr	r0, [pc, #60]	; (800de40 <netif_set_up+0x54>)
 800de04:	f00a f814 	bl	8017e30 <iprintf>
 800de08:	e013      	b.n	800de32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10c      	bne.n	800de32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de1e:	f043 0301 	orr.w	r3, r3, #1
 800de22:	b2da      	uxtb	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de2a:	2103      	movs	r1, #3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f809 	bl	800de44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	0801bd5c 	.word	0x0801bd5c
 800de3c:	0801bee4 	.word	0x0801bee4
 800de40:	0801bdac 	.word	0x0801bdac

0800de44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	460b      	mov	r3, r1
 800de4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d106      	bne.n	800de64 <netif_issue_reports+0x20>
 800de56:	4b18      	ldr	r3, [pc, #96]	; (800deb8 <netif_issue_reports+0x74>)
 800de58:	f240 326d 	movw	r2, #877	; 0x36d
 800de5c:	4917      	ldr	r1, [pc, #92]	; (800debc <netif_issue_reports+0x78>)
 800de5e:	4818      	ldr	r0, [pc, #96]	; (800dec0 <netif_issue_reports+0x7c>)
 800de60:	f009 ffe6 	bl	8017e30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d01e      	beq.n	800deb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d017      	beq.n	800deb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de80:	78fb      	ldrb	r3, [r7, #3]
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	2b00      	cmp	r3, #0
 800de88:	d013      	beq.n	800deb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	3304      	adds	r3, #4
 800de8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00e      	beq.n	800deb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de9a:	f003 0308 	and.w	r3, r3, #8
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d007      	beq.n	800deb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4619      	mov	r1, r3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f008 f893 	bl	8015fd4 <etharp_request>
 800deae:	e000      	b.n	800deb2 <netif_issue_reports+0x6e>
    return;
 800deb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	0801bd5c 	.word	0x0801bd5c
 800debc:	0801bf00 	.word	0x0801bf00
 800dec0:	0801bdac 	.word	0x0801bdac

0800dec4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d107      	bne.n	800dee2 <netif_set_down+0x1e>
 800ded2:	4b12      	ldr	r3, [pc, #72]	; (800df1c <netif_set_down+0x58>)
 800ded4:	f240 329b 	movw	r2, #923	; 0x39b
 800ded8:	4911      	ldr	r1, [pc, #68]	; (800df20 <netif_set_down+0x5c>)
 800deda:	4812      	ldr	r0, [pc, #72]	; (800df24 <netif_set_down+0x60>)
 800dedc:	f009 ffa8 	bl	8017e30 <iprintf>
 800dee0:	e019      	b.n	800df16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dee8:	f003 0301 	and.w	r3, r3, #1
 800deec:	2b00      	cmp	r3, #0
 800deee:	d012      	beq.n	800df16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800def6:	f023 0301 	bic.w	r3, r3, #1
 800defa:	b2da      	uxtb	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df08:	f003 0308 	and.w	r3, r3, #8
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f007 fc1d 	bl	8015750 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0801bd5c 	.word	0x0801bd5c
 800df20:	0801bf24 	.word	0x0801bf24
 800df24:	0801bdac 	.word	0x0801bdac

0800df28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d107      	bne.n	800df46 <netif_set_link_up+0x1e>
 800df36:	4b13      	ldr	r3, [pc, #76]	; (800df84 <netif_set_link_up+0x5c>)
 800df38:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800df3c:	4912      	ldr	r1, [pc, #72]	; (800df88 <netif_set_link_up+0x60>)
 800df3e:	4813      	ldr	r0, [pc, #76]	; (800df8c <netif_set_link_up+0x64>)
 800df40:	f009 ff76 	bl	8017e30 <iprintf>
 800df44:	e01b      	b.n	800df7e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d114      	bne.n	800df7e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df5a:	f043 0304 	orr.w	r3, r3, #4
 800df5e:	b2da      	uxtb	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800df66:	2103      	movs	r1, #3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7ff ff6b 	bl	800de44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d003      	beq.n	800df7e <netif_set_link_up+0x56>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}
 800df84:	0801bd5c 	.word	0x0801bd5c
 800df88:	0801bf44 	.word	0x0801bf44
 800df8c:	0801bdac 	.word	0x0801bdac

0800df90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d107      	bne.n	800dfae <netif_set_link_down+0x1e>
 800df9e:	4b11      	ldr	r3, [pc, #68]	; (800dfe4 <netif_set_link_down+0x54>)
 800dfa0:	f240 4206 	movw	r2, #1030	; 0x406
 800dfa4:	4910      	ldr	r1, [pc, #64]	; (800dfe8 <netif_set_link_down+0x58>)
 800dfa6:	4811      	ldr	r0, [pc, #68]	; (800dfec <netif_set_link_down+0x5c>)
 800dfa8:	f009 ff42 	bl	8017e30 <iprintf>
 800dfac:	e017      	b.n	800dfde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d010      	beq.n	800dfde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dfc2:	f023 0304 	bic.w	r3, r3, #4
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <netif_set_link_down+0x4e>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	69db      	ldr	r3, [r3, #28]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	0801bd5c 	.word	0x0801bd5c
 800dfe8:	0801bf68 	.word	0x0801bf68
 800dfec:	0801bdac 	.word	0x0801bdac

0800dff0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	61da      	str	r2, [r3, #28]
  }
}
 800e006:	bf00      	nop
 800e008:	370c      	adds	r7, #12
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr

0800e012 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e012:	b480      	push	{r7}
 800e014:	b085      	sub	sp, #20
 800e016:	af00      	add	r7, sp, #0
 800e018:	60f8      	str	r0, [r7, #12]
 800e01a:	60b9      	str	r1, [r7, #8]
 800e01c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e01e:	f06f 030b 	mvn.w	r3, #11
}
 800e022:	4618      	mov	r0, r3
 800e024:	3714      	adds	r7, #20
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
	...

0800e030 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d013      	beq.n	800e068 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e040:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <netif_get_by_index+0x48>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	e00c      	b.n	800e062 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e04e:	3301      	adds	r3, #1
 800e050:	b2db      	uxtb	r3, r3
 800e052:	79fa      	ldrb	r2, [r7, #7]
 800e054:	429a      	cmp	r2, r3
 800e056:	d101      	bne.n	800e05c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	e006      	b.n	800e06a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1ef      	bne.n	800e048 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	20011ba4 	.word	0x20011ba4

0800e07c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e082:	f009 fcc1 	bl	8017a08 <sys_arch_protect>
 800e086:	6038      	str	r0, [r7, #0]
 800e088:	4b0d      	ldr	r3, [pc, #52]	; (800e0c0 <pbuf_free_ooseq+0x44>)
 800e08a:	2200      	movs	r2, #0
 800e08c:	701a      	strb	r2, [r3, #0]
 800e08e:	6838      	ldr	r0, [r7, #0]
 800e090:	f009 fcc8 	bl	8017a24 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e094:	4b0b      	ldr	r3, [pc, #44]	; (800e0c4 <pbuf_free_ooseq+0x48>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	607b      	str	r3, [r7, #4]
 800e09a:	e00a      	b.n	800e0b2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d003      	beq.n	800e0ac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f002 fc91 	bl	80109cc <tcp_free_ooseq>
      return;
 800e0aa:	e005      	b.n	800e0b8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	607b      	str	r3, [r7, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f1      	bne.n	800e09c <pbuf_free_ooseq+0x20>
    }
  }
}
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	20011bad 	.word	0x20011bad
 800e0c4:	20011bbc 	.word	0x20011bbc

0800e0c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e0d0:	f7ff ffd4 	bl	800e07c <pbuf_free_ooseq>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e0e2:	f009 fc91 	bl	8017a08 <sys_arch_protect>
 800e0e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e0e8:	4b0f      	ldr	r3, [pc, #60]	; (800e128 <pbuf_pool_is_empty+0x4c>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e0ee:	4b0e      	ldr	r3, [pc, #56]	; (800e128 <pbuf_pool_is_empty+0x4c>)
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f009 fc95 	bl	8017a24 <sys_arch_unprotect>

  if (!queued) {
 800e0fa:	78fb      	ldrb	r3, [r7, #3]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10f      	bne.n	800e120 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e100:	2100      	movs	r1, #0
 800e102:	480a      	ldr	r0, [pc, #40]	; (800e12c <pbuf_pool_is_empty+0x50>)
 800e104:	f7fe fd7c 	bl	800cc00 <tcpip_try_callback>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d008      	beq.n	800e120 <pbuf_pool_is_empty+0x44>
 800e10e:	f009 fc7b 	bl	8017a08 <sys_arch_protect>
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	4b04      	ldr	r3, [pc, #16]	; (800e128 <pbuf_pool_is_empty+0x4c>)
 800e116:	2200      	movs	r2, #0
 800e118:	701a      	strb	r2, [r3, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f009 fc82 	bl	8017a24 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e120:	bf00      	nop
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}
 800e128:	20011bad 	.word	0x20011bad
 800e12c:	0800e0c9 	.word	0x0800e0c9

0800e130 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e130:	b480      	push	{r7}
 800e132:	b085      	sub	sp, #20
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4611      	mov	r1, r2
 800e13c:	461a      	mov	r2, r3
 800e13e:	460b      	mov	r3, r1
 800e140:	80fb      	strh	r3, [r7, #6]
 800e142:	4613      	mov	r3, r2
 800e144:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	88fa      	ldrh	r2, [r7, #6]
 800e156:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	88ba      	ldrh	r2, [r7, #4]
 800e15c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e15e:	8b3b      	ldrh	r3, [r7, #24]
 800e160:	b2da      	uxtb	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	7f3a      	ldrb	r2, [r7, #28]
 800e16a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2201      	movs	r2, #1
 800e170:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	73da      	strb	r2, [r3, #15]
}
 800e178:	bf00      	nop
 800e17a:	3714      	adds	r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr

0800e184 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08c      	sub	sp, #48	; 0x30
 800e188:	af02      	add	r7, sp, #8
 800e18a:	4603      	mov	r3, r0
 800e18c:	71fb      	strb	r3, [r7, #7]
 800e18e:	460b      	mov	r3, r1
 800e190:	80bb      	strh	r3, [r7, #4]
 800e192:	4613      	mov	r3, r2
 800e194:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e196:	79fb      	ldrb	r3, [r7, #7]
 800e198:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e19a:	887b      	ldrh	r3, [r7, #2]
 800e19c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e1a0:	d07f      	beq.n	800e2a2 <pbuf_alloc+0x11e>
 800e1a2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e1a6:	f300 80c8 	bgt.w	800e33a <pbuf_alloc+0x1b6>
 800e1aa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e1ae:	d010      	beq.n	800e1d2 <pbuf_alloc+0x4e>
 800e1b0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e1b4:	f300 80c1 	bgt.w	800e33a <pbuf_alloc+0x1b6>
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d002      	beq.n	800e1c2 <pbuf_alloc+0x3e>
 800e1bc:	2b41      	cmp	r3, #65	; 0x41
 800e1be:	f040 80bc 	bne.w	800e33a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e1c2:	887a      	ldrh	r2, [r7, #2]
 800e1c4:	88bb      	ldrh	r3, [r7, #4]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	f000 f8d1 	bl	800e370 <pbuf_alloc_reference>
 800e1ce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e1d0:	e0bd      	b.n	800e34e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e1da:	88bb      	ldrh	r3, [r7, #4]
 800e1dc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e1de:	200b      	movs	r0, #11
 800e1e0:	f7ff fb9e 	bl	800d920 <memp_malloc>
 800e1e4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d109      	bne.n	800e200 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e1ec:	f7ff ff76 	bl	800e0dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <pbuf_alloc+0x78>
            pbuf_free(p);
 800e1f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f8:	f000 faa8 	bl	800e74c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	e0a7      	b.n	800e350 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e202:	3303      	adds	r3, #3
 800e204:	b29b      	uxth	r3, r3
 800e206:	f023 0303 	bic.w	r3, r3, #3
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e210:	b29b      	uxth	r3, r3
 800e212:	8b7a      	ldrh	r2, [r7, #26]
 800e214:	4293      	cmp	r3, r2
 800e216:	bf28      	it	cs
 800e218:	4613      	movcs	r3, r2
 800e21a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e21c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e21e:	3310      	adds	r3, #16
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	4413      	add	r3, r2
 800e224:	3303      	adds	r3, #3
 800e226:	f023 0303 	bic.w	r3, r3, #3
 800e22a:	4618      	mov	r0, r3
 800e22c:	89f9      	ldrh	r1, [r7, #14]
 800e22e:	8b7a      	ldrh	r2, [r7, #26]
 800e230:	2300      	movs	r3, #0
 800e232:	9301      	str	r3, [sp, #4]
 800e234:	887b      	ldrh	r3, [r7, #2]
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	460b      	mov	r3, r1
 800e23a:	4601      	mov	r1, r0
 800e23c:	6938      	ldr	r0, [r7, #16]
 800e23e:	f7ff ff77 	bl	800e130 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	f003 0303 	and.w	r3, r3, #3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d006      	beq.n	800e25c <pbuf_alloc+0xd8>
 800e24e:	4b42      	ldr	r3, [pc, #264]	; (800e358 <pbuf_alloc+0x1d4>)
 800e250:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e254:	4941      	ldr	r1, [pc, #260]	; (800e35c <pbuf_alloc+0x1d8>)
 800e256:	4842      	ldr	r0, [pc, #264]	; (800e360 <pbuf_alloc+0x1dc>)
 800e258:	f009 fdea 	bl	8017e30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e25e:	3303      	adds	r3, #3
 800e260:	f023 0303 	bic.w	r3, r3, #3
 800e264:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e268:	d106      	bne.n	800e278 <pbuf_alloc+0xf4>
 800e26a:	4b3b      	ldr	r3, [pc, #236]	; (800e358 <pbuf_alloc+0x1d4>)
 800e26c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e270:	493c      	ldr	r1, [pc, #240]	; (800e364 <pbuf_alloc+0x1e0>)
 800e272:	483b      	ldr	r0, [pc, #236]	; (800e360 <pbuf_alloc+0x1dc>)
 800e274:	f009 fddc 	bl	8017e30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d102      	bne.n	800e284 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	627b      	str	r3, [r7, #36]	; 0x24
 800e282:	e002      	b.n	800e28a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e284:	69fb      	ldr	r3, [r7, #28]
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e28e:	8b7a      	ldrh	r2, [r7, #26]
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e29a:	8b7b      	ldrh	r3, [r7, #26]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d19e      	bne.n	800e1de <pbuf_alloc+0x5a>
      break;
 800e2a0:	e055      	b.n	800e34e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e2a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2a4:	3303      	adds	r3, #3
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	f023 0303 	bic.w	r3, r3, #3
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	88bb      	ldrh	r3, [r7, #4]
 800e2b0:	3303      	adds	r3, #3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	f023 0303 	bic.w	r3, r3, #3
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	4413      	add	r3, r2
 800e2bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e2be:	8b3b      	ldrh	r3, [r7, #24]
 800e2c0:	3310      	adds	r3, #16
 800e2c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2c4:	8b3a      	ldrh	r2, [r7, #24]
 800e2c6:	88bb      	ldrh	r3, [r7, #4]
 800e2c8:	3303      	adds	r3, #3
 800e2ca:	f023 0303 	bic.w	r3, r3, #3
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d306      	bcc.n	800e2e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e2d2:	8afa      	ldrh	r2, [r7, #22]
 800e2d4:	88bb      	ldrh	r3, [r7, #4]
 800e2d6:	3303      	adds	r3, #3
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d201      	bcs.n	800e2e4 <pbuf_alloc+0x160>
        return NULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e035      	b.n	800e350 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e2e4:	8afb      	ldrh	r3, [r7, #22]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff f976 	bl	800d5d8 <mem_malloc>
 800e2ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d101      	bne.n	800e2f8 <pbuf_alloc+0x174>
        return NULL;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e02b      	b.n	800e350 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e2f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2fa:	3310      	adds	r3, #16
 800e2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2fe:	4413      	add	r3, r2
 800e300:	3303      	adds	r3, #3
 800e302:	f023 0303 	bic.w	r3, r3, #3
 800e306:	4618      	mov	r0, r3
 800e308:	88b9      	ldrh	r1, [r7, #4]
 800e30a:	88ba      	ldrh	r2, [r7, #4]
 800e30c:	2300      	movs	r3, #0
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	887b      	ldrh	r3, [r7, #2]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	460b      	mov	r3, r1
 800e316:	4601      	mov	r1, r0
 800e318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e31a:	f7ff ff09 	bl	800e130 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	f003 0303 	and.w	r3, r3, #3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d010      	beq.n	800e34c <pbuf_alloc+0x1c8>
 800e32a:	4b0b      	ldr	r3, [pc, #44]	; (800e358 <pbuf_alloc+0x1d4>)
 800e32c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e330:	490d      	ldr	r1, [pc, #52]	; (800e368 <pbuf_alloc+0x1e4>)
 800e332:	480b      	ldr	r0, [pc, #44]	; (800e360 <pbuf_alloc+0x1dc>)
 800e334:	f009 fd7c 	bl	8017e30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e338:	e008      	b.n	800e34c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e33a:	4b07      	ldr	r3, [pc, #28]	; (800e358 <pbuf_alloc+0x1d4>)
 800e33c:	f240 1227 	movw	r2, #295	; 0x127
 800e340:	490a      	ldr	r1, [pc, #40]	; (800e36c <pbuf_alloc+0x1e8>)
 800e342:	4807      	ldr	r0, [pc, #28]	; (800e360 <pbuf_alloc+0x1dc>)
 800e344:	f009 fd74 	bl	8017e30 <iprintf>
      return NULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	e001      	b.n	800e350 <pbuf_alloc+0x1cc>
      break;
 800e34c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e350:	4618      	mov	r0, r3
 800e352:	3728      	adds	r7, #40	; 0x28
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	0801bf8c 	.word	0x0801bf8c
 800e35c:	0801bfbc 	.word	0x0801bfbc
 800e360:	0801bfec 	.word	0x0801bfec
 800e364:	0801c014 	.word	0x0801c014
 800e368:	0801c048 	.word	0x0801c048
 800e36c:	0801c074 	.word	0x0801c074

0800e370 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af02      	add	r7, sp, #8
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	460b      	mov	r3, r1
 800e37a:	807b      	strh	r3, [r7, #2]
 800e37c:	4613      	mov	r3, r2
 800e37e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e380:	883b      	ldrh	r3, [r7, #0]
 800e382:	2b41      	cmp	r3, #65	; 0x41
 800e384:	d009      	beq.n	800e39a <pbuf_alloc_reference+0x2a>
 800e386:	883b      	ldrh	r3, [r7, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d006      	beq.n	800e39a <pbuf_alloc_reference+0x2a>
 800e38c:	4b0f      	ldr	r3, [pc, #60]	; (800e3cc <pbuf_alloc_reference+0x5c>)
 800e38e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e392:	490f      	ldr	r1, [pc, #60]	; (800e3d0 <pbuf_alloc_reference+0x60>)
 800e394:	480f      	ldr	r0, [pc, #60]	; (800e3d4 <pbuf_alloc_reference+0x64>)
 800e396:	f009 fd4b 	bl	8017e30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e39a:	200a      	movs	r0, #10
 800e39c:	f7ff fac0 	bl	800d920 <memp_malloc>
 800e3a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d101      	bne.n	800e3ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e00b      	b.n	800e3c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e3ac:	8879      	ldrh	r1, [r7, #2]
 800e3ae:	887a      	ldrh	r2, [r7, #2]
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	9301      	str	r3, [sp, #4]
 800e3b4:	883b      	ldrh	r3, [r7, #0]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	6879      	ldr	r1, [r7, #4]
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	f7ff feb7 	bl	800e130 <pbuf_init_alloced_pbuf>
  return p;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	0801bf8c 	.word	0x0801bf8c
 800e3d0:	0801c090 	.word	0x0801c090
 800e3d4:	0801bfec 	.word	0x0801bfec

0800e3d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af02      	add	r7, sp, #8
 800e3de:	607b      	str	r3, [r7, #4]
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	73fb      	strb	r3, [r7, #15]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	81bb      	strh	r3, [r7, #12]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e3f0:	8a7b      	ldrh	r3, [r7, #18]
 800e3f2:	3303      	adds	r3, #3
 800e3f4:	f023 0203 	bic.w	r2, r3, #3
 800e3f8:	89bb      	ldrh	r3, [r7, #12]
 800e3fa:	441a      	add	r2, r3
 800e3fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d901      	bls.n	800e406 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	e018      	b.n	800e438 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e40c:	8a7b      	ldrh	r3, [r7, #18]
 800e40e:	3303      	adds	r3, #3
 800e410:	f023 0303 	bic.w	r3, r3, #3
 800e414:	6a3a      	ldr	r2, [r7, #32]
 800e416:	4413      	add	r3, r2
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	e001      	b.n	800e420 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	89b9      	ldrh	r1, [r7, #12]
 800e424:	89ba      	ldrh	r2, [r7, #12]
 800e426:	2302      	movs	r3, #2
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	897b      	ldrh	r3, [r7, #10]
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	460b      	mov	r3, r1
 800e430:	6979      	ldr	r1, [r7, #20]
 800e432:	f7ff fe7d 	bl	800e130 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e436:	687b      	ldr	r3, [r7, #4]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d106      	bne.n	800e460 <pbuf_realloc+0x20>
 800e452:	4b3a      	ldr	r3, [pc, #232]	; (800e53c <pbuf_realloc+0xfc>)
 800e454:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e458:	4939      	ldr	r1, [pc, #228]	; (800e540 <pbuf_realloc+0x100>)
 800e45a:	483a      	ldr	r0, [pc, #232]	; (800e544 <pbuf_realloc+0x104>)
 800e45c:	f009 fce8 	bl	8017e30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	891b      	ldrh	r3, [r3, #8]
 800e464:	887a      	ldrh	r2, [r7, #2]
 800e466:	429a      	cmp	r2, r3
 800e468:	d263      	bcs.n	800e532 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	891a      	ldrh	r2, [r3, #8]
 800e46e:	887b      	ldrh	r3, [r7, #2]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e474:	887b      	ldrh	r3, [r7, #2]
 800e476:	817b      	strh	r3, [r7, #10]
  q = p;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e47c:	e018      	b.n	800e4b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	895b      	ldrh	r3, [r3, #10]
 800e482:	897a      	ldrh	r2, [r7, #10]
 800e484:	1ad3      	subs	r3, r2, r3
 800e486:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	891a      	ldrh	r2, [r3, #8]
 800e48c:	893b      	ldrh	r3, [r7, #8]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	b29a      	uxth	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <pbuf_realloc+0x70>
 800e4a2:	4b26      	ldr	r3, [pc, #152]	; (800e53c <pbuf_realloc+0xfc>)
 800e4a4:	f240 12af 	movw	r2, #431	; 0x1af
 800e4a8:	4927      	ldr	r1, [pc, #156]	; (800e548 <pbuf_realloc+0x108>)
 800e4aa:	4826      	ldr	r0, [pc, #152]	; (800e544 <pbuf_realloc+0x104>)
 800e4ac:	f009 fcc0 	bl	8017e30 <iprintf>
  while (rem_len > q->len) {
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	895b      	ldrh	r3, [r3, #10]
 800e4b4:	897a      	ldrh	r2, [r7, #10]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d8e1      	bhi.n	800e47e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	7b1b      	ldrb	r3, [r3, #12]
 800e4be:	f003 030f 	and.w	r3, r3, #15
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d121      	bne.n	800e50a <pbuf_realloc+0xca>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	895b      	ldrh	r3, [r3, #10]
 800e4ca:	897a      	ldrh	r2, [r7, #10]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d01c      	beq.n	800e50a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	7b5b      	ldrb	r3, [r3, #13]
 800e4d4:	f003 0302 	and.w	r3, r3, #2
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d116      	bne.n	800e50a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	685a      	ldr	r2, [r3, #4]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	897b      	ldrh	r3, [r7, #10]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7fe ff68 	bl	800d3c4 <mem_trim>
 800e4f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d106      	bne.n	800e50a <pbuf_realloc+0xca>
 800e4fc:	4b0f      	ldr	r3, [pc, #60]	; (800e53c <pbuf_realloc+0xfc>)
 800e4fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e502:	4912      	ldr	r1, [pc, #72]	; (800e54c <pbuf_realloc+0x10c>)
 800e504:	480f      	ldr	r0, [pc, #60]	; (800e544 <pbuf_realloc+0x104>)
 800e506:	f009 fc93 	bl	8017e30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	897a      	ldrh	r2, [r7, #10]
 800e50e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	895a      	ldrh	r2, [r3, #10]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4618      	mov	r0, r3
 800e526:	f000 f911 	bl	800e74c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2200      	movs	r2, #0
 800e52e:	601a      	str	r2, [r3, #0]
 800e530:	e000      	b.n	800e534 <pbuf_realloc+0xf4>
    return;
 800e532:	bf00      	nop

}
 800e534:	3710      	adds	r7, #16
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	0801bf8c 	.word	0x0801bf8c
 800e540:	0801c0a4 	.word	0x0801c0a4
 800e544:	0801bfec 	.word	0x0801bfec
 800e548:	0801c0bc 	.word	0x0801c0bc
 800e54c:	0801c0d4 	.word	0x0801c0d4

0800e550 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	4613      	mov	r3, r2
 800e55c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d106      	bne.n	800e572 <pbuf_add_header_impl+0x22>
 800e564:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <pbuf_add_header_impl+0xc4>)
 800e566:	f240 12df 	movw	r2, #479	; 0x1df
 800e56a:	492b      	ldr	r1, [pc, #172]	; (800e618 <pbuf_add_header_impl+0xc8>)
 800e56c:	482b      	ldr	r0, [pc, #172]	; (800e61c <pbuf_add_header_impl+0xcc>)
 800e56e:	f009 fc5f 	bl	8017e30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d003      	beq.n	800e580 <pbuf_add_header_impl+0x30>
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e57e:	d301      	bcc.n	800e584 <pbuf_add_header_impl+0x34>
    return 1;
 800e580:	2301      	movs	r3, #1
 800e582:	e043      	b.n	800e60c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <pbuf_add_header_impl+0x3e>
    return 0;
 800e58a:	2300      	movs	r3, #0
 800e58c:	e03e      	b.n	800e60c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	891a      	ldrh	r2, [r3, #8]
 800e596:	8a7b      	ldrh	r3, [r7, #18]
 800e598:	4413      	add	r3, r2
 800e59a:	b29b      	uxth	r3, r3
 800e59c:	8a7a      	ldrh	r2, [r7, #18]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d901      	bls.n	800e5a6 <pbuf_add_header_impl+0x56>
    return 1;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e032      	b.n	800e60c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	7b1b      	ldrb	r3, [r3, #12]
 800e5aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e5ac:	8a3b      	ldrh	r3, [r7, #16]
 800e5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00c      	beq.n	800e5d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	425b      	negs	r3, r3
 800e5be:	4413      	add	r3, r2
 800e5c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3310      	adds	r3, #16
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d20d      	bcs.n	800e5e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e01d      	b.n	800e60c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e5d0:	79fb      	ldrb	r3, [r7, #7]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d006      	beq.n	800e5e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	425b      	negs	r3, r3
 800e5de:	4413      	add	r3, r2
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	e001      	b.n	800e5e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	e011      	b.n	800e60c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	895a      	ldrh	r2, [r3, #10]
 800e5f2:	8a7b      	ldrh	r3, [r7, #18]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	891a      	ldrh	r2, [r3, #8]
 800e600:	8a7b      	ldrh	r3, [r7, #18]
 800e602:	4413      	add	r3, r2
 800e604:	b29a      	uxth	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	811a      	strh	r2, [r3, #8]


  return 0;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	0801bf8c 	.word	0x0801bf8c
 800e618:	0801c0f0 	.word	0x0801c0f0
 800e61c:	0801bfec 	.word	0x0801bfec

0800e620 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e62a:	2200      	movs	r2, #0
 800e62c:	6839      	ldr	r1, [r7, #0]
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff ff8e 	bl	800e550 <pbuf_add_header_impl>
 800e634:	4603      	mov	r3, r0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d106      	bne.n	800e65e <pbuf_remove_header+0x1e>
 800e650:	4b20      	ldr	r3, [pc, #128]	; (800e6d4 <pbuf_remove_header+0x94>)
 800e652:	f240 224b 	movw	r2, #587	; 0x24b
 800e656:	4920      	ldr	r1, [pc, #128]	; (800e6d8 <pbuf_remove_header+0x98>)
 800e658:	4820      	ldr	r0, [pc, #128]	; (800e6dc <pbuf_remove_header+0x9c>)
 800e65a:	f009 fbe9 	bl	8017e30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d003      	beq.n	800e66c <pbuf_remove_header+0x2c>
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66a:	d301      	bcc.n	800e670 <pbuf_remove_header+0x30>
    return 1;
 800e66c:	2301      	movs	r3, #1
 800e66e:	e02c      	b.n	800e6ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d101      	bne.n	800e67a <pbuf_remove_header+0x3a>
    return 0;
 800e676:	2300      	movs	r3, #0
 800e678:	e027      	b.n	800e6ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	895b      	ldrh	r3, [r3, #10]
 800e682:	89fa      	ldrh	r2, [r7, #14]
 800e684:	429a      	cmp	r2, r3
 800e686:	d908      	bls.n	800e69a <pbuf_remove_header+0x5a>
 800e688:	4b12      	ldr	r3, [pc, #72]	; (800e6d4 <pbuf_remove_header+0x94>)
 800e68a:	f240 2255 	movw	r2, #597	; 0x255
 800e68e:	4914      	ldr	r1, [pc, #80]	; (800e6e0 <pbuf_remove_header+0xa0>)
 800e690:	4812      	ldr	r0, [pc, #72]	; (800e6dc <pbuf_remove_header+0x9c>)
 800e692:	f009 fbcd 	bl	8017e30 <iprintf>
 800e696:	2301      	movs	r3, #1
 800e698:	e017      	b.n	800e6ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	685a      	ldr	r2, [r3, #4]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	441a      	add	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	895a      	ldrh	r2, [r3, #10]
 800e6b0:	89fb      	ldrh	r3, [r7, #14]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	891a      	ldrh	r2, [r3, #8]
 800e6be:	89fb      	ldrh	r3, [r7, #14]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3710      	adds	r7, #16
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	0801bf8c 	.word	0x0801bf8c
 800e6d8:	0801c0f0 	.word	0x0801c0f0
 800e6dc:	0801bfec 	.word	0x0801bfec
 800e6e0:	0801c0fc 	.word	0x0801c0fc

0800e6e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	807b      	strh	r3, [r7, #2]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e6f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	da08      	bge.n	800e70e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e6fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e700:	425b      	negs	r3, r3
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff ff9b 	bl	800e640 <pbuf_remove_header>
 800e70a:	4603      	mov	r3, r0
 800e70c:	e007      	b.n	800e71e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e70e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e712:	787a      	ldrb	r2, [r7, #1]
 800e714:	4619      	mov	r1, r3
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7ff ff1a 	bl	800e550 <pbuf_add_header_impl>
 800e71c:	4603      	mov	r3, r0
  }
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}

0800e726 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e726:	b580      	push	{r7, lr}
 800e728:	b082      	sub	sp, #8
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	460b      	mov	r3, r1
 800e730:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e732:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e736:	2201      	movs	r2, #1
 800e738:	4619      	mov	r1, r3
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7ff ffd2 	bl	800e6e4 <pbuf_header_impl>
 800e740:	4603      	mov	r3, r0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10b      	bne.n	800e772 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d106      	bne.n	800e76e <pbuf_free+0x22>
 800e760:	4b3b      	ldr	r3, [pc, #236]	; (800e850 <pbuf_free+0x104>)
 800e762:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e766:	493b      	ldr	r1, [pc, #236]	; (800e854 <pbuf_free+0x108>)
 800e768:	483b      	ldr	r0, [pc, #236]	; (800e858 <pbuf_free+0x10c>)
 800e76a:	f009 fb61 	bl	8017e30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	e069      	b.n	800e846 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e776:	e062      	b.n	800e83e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e778:	f009 f946 	bl	8017a08 <sys_arch_protect>
 800e77c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	7b9b      	ldrb	r3, [r3, #14]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d106      	bne.n	800e794 <pbuf_free+0x48>
 800e786:	4b32      	ldr	r3, [pc, #200]	; (800e850 <pbuf_free+0x104>)
 800e788:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e78c:	4933      	ldr	r1, [pc, #204]	; (800e85c <pbuf_free+0x110>)
 800e78e:	4832      	ldr	r0, [pc, #200]	; (800e858 <pbuf_free+0x10c>)
 800e790:	f009 fb4e 	bl	8017e30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7b9b      	ldrb	r3, [r3, #14]
 800e798:	3b01      	subs	r3, #1
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	739a      	strb	r2, [r3, #14]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7b9b      	ldrb	r3, [r3, #14]
 800e7a4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e7a6:	69b8      	ldr	r0, [r7, #24]
 800e7a8:	f009 f93c 	bl	8017a24 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d143      	bne.n	800e83a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	7b1b      	ldrb	r3, [r3, #12]
 800e7bc:	f003 030f 	and.w	r3, r3, #15
 800e7c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7b5b      	ldrb	r3, [r3, #13]
 800e7c6:	f003 0302 	and.w	r3, r3, #2
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d011      	beq.n	800e7f2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d106      	bne.n	800e7e8 <pbuf_free+0x9c>
 800e7da:	4b1d      	ldr	r3, [pc, #116]	; (800e850 <pbuf_free+0x104>)
 800e7dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e7e0:	491f      	ldr	r1, [pc, #124]	; (800e860 <pbuf_free+0x114>)
 800e7e2:	481d      	ldr	r0, [pc, #116]	; (800e858 <pbuf_free+0x10c>)
 800e7e4:	f009 fb24 	bl	8017e30 <iprintf>
        pc->custom_free_function(p);
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	4798      	blx	r3
 800e7f0:	e01d      	b.n	800e82e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d104      	bne.n	800e802 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	200b      	movs	r0, #11
 800e7fc:	f7ff f906 	bl	800da0c <memp_free>
 800e800:	e015      	b.n	800e82e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d104      	bne.n	800e812 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	200a      	movs	r0, #10
 800e80c:	f7ff f8fe 	bl	800da0c <memp_free>
 800e810:	e00d      	b.n	800e82e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d103      	bne.n	800e820 <pbuf_free+0xd4>
          mem_free(p);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7fe fd43 	bl	800d2a4 <mem_free>
 800e81e:	e006      	b.n	800e82e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e820:	4b0b      	ldr	r3, [pc, #44]	; (800e850 <pbuf_free+0x104>)
 800e822:	f240 320f 	movw	r2, #783	; 0x30f
 800e826:	490f      	ldr	r1, [pc, #60]	; (800e864 <pbuf_free+0x118>)
 800e828:	480b      	ldr	r0, [pc, #44]	; (800e858 <pbuf_free+0x10c>)
 800e82a:	f009 fb01 	bl	8017e30 <iprintf>
        }
      }
      count++;
 800e82e:	7ffb      	ldrb	r3, [r7, #31]
 800e830:	3301      	adds	r3, #1
 800e832:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	607b      	str	r3, [r7, #4]
 800e838:	e001      	b.n	800e83e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e83a:	2300      	movs	r3, #0
 800e83c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d199      	bne.n	800e778 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e844:	7ffb      	ldrb	r3, [r7, #31]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3720      	adds	r7, #32
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	0801bf8c 	.word	0x0801bf8c
 800e854:	0801c0f0 	.word	0x0801c0f0
 800e858:	0801bfec 	.word	0x0801bfec
 800e85c:	0801c11c 	.word	0x0801c11c
 800e860:	0801c134 	.word	0x0801c134
 800e864:	0801c158 	.word	0x0801c158

0800e868 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e874:	e005      	b.n	800e882 <pbuf_clen+0x1a>
    ++len;
 800e876:	89fb      	ldrh	r3, [r7, #14]
 800e878:	3301      	adds	r3, #1
 800e87a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1f6      	bne.n	800e876 <pbuf_clen+0xe>
  }
  return len;
 800e888:	89fb      	ldrh	r3, [r7, #14]
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
	...

0800e898 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d016      	beq.n	800e8d4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e8a6:	f009 f8af 	bl	8017a08 <sys_arch_protect>
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7b9b      	ldrb	r3, [r3, #14]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	b2da      	uxtb	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	739a      	strb	r2, [r3, #14]
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f009 f8b3 	bl	8017a24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	7b9b      	ldrb	r3, [r3, #14]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <pbuf_ref+0x3c>
 800e8c6:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <pbuf_ref+0x44>)
 800e8c8:	f240 3242 	movw	r2, #834	; 0x342
 800e8cc:	4904      	ldr	r1, [pc, #16]	; (800e8e0 <pbuf_ref+0x48>)
 800e8ce:	4805      	ldr	r0, [pc, #20]	; (800e8e4 <pbuf_ref+0x4c>)
 800e8d0:	f009 faae 	bl	8017e30 <iprintf>
  }
}
 800e8d4:	bf00      	nop
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	0801bf8c 	.word	0x0801bf8c
 800e8e0:	0801c16c 	.word	0x0801c16c
 800e8e4:	0801bfec 	.word	0x0801bfec

0800e8e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <pbuf_cat+0x16>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d107      	bne.n	800e90e <pbuf_cat+0x26>
 800e8fe:	4b20      	ldr	r3, [pc, #128]	; (800e980 <pbuf_cat+0x98>)
 800e900:	f240 3259 	movw	r2, #857	; 0x359
 800e904:	491f      	ldr	r1, [pc, #124]	; (800e984 <pbuf_cat+0x9c>)
 800e906:	4820      	ldr	r0, [pc, #128]	; (800e988 <pbuf_cat+0xa0>)
 800e908:	f009 fa92 	bl	8017e30 <iprintf>
 800e90c:	e034      	b.n	800e978 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	e00a      	b.n	800e92a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	891a      	ldrh	r2, [r3, #8]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	891b      	ldrh	r3, [r3, #8]
 800e91c:	4413      	add	r3, r2
 800e91e:	b29a      	uxth	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60fb      	str	r3, [r7, #12]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1f0      	bne.n	800e914 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	891a      	ldrh	r2, [r3, #8]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	895b      	ldrh	r3, [r3, #10]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d006      	beq.n	800e94c <pbuf_cat+0x64>
 800e93e:	4b10      	ldr	r3, [pc, #64]	; (800e980 <pbuf_cat+0x98>)
 800e940:	f240 3262 	movw	r2, #866	; 0x362
 800e944:	4911      	ldr	r1, [pc, #68]	; (800e98c <pbuf_cat+0xa4>)
 800e946:	4810      	ldr	r0, [pc, #64]	; (800e988 <pbuf_cat+0xa0>)
 800e948:	f009 fa72 	bl	8017e30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d006      	beq.n	800e962 <pbuf_cat+0x7a>
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <pbuf_cat+0x98>)
 800e956:	f240 3263 	movw	r2, #867	; 0x363
 800e95a:	490d      	ldr	r1, [pc, #52]	; (800e990 <pbuf_cat+0xa8>)
 800e95c:	480a      	ldr	r0, [pc, #40]	; (800e988 <pbuf_cat+0xa0>)
 800e95e:	f009 fa67 	bl	8017e30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	891a      	ldrh	r2, [r3, #8]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	891b      	ldrh	r3, [r3, #8]
 800e96a:	4413      	add	r3, r2
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	0801bf8c 	.word	0x0801bf8c
 800e984:	0801c180 	.word	0x0801c180
 800e988:	0801bfec 	.word	0x0801bfec
 800e98c:	0801c1b8 	.word	0x0801c1b8
 800e990:	0801c1e8 	.word	0x0801c1e8

0800e994 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	617b      	str	r3, [r7, #20]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d008      	beq.n	800e9be <pbuf_copy+0x2a>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d005      	beq.n	800e9be <pbuf_copy+0x2a>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	891a      	ldrh	r2, [r3, #8]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	891b      	ldrh	r3, [r3, #8]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d209      	bcs.n	800e9d2 <pbuf_copy+0x3e>
 800e9be:	4b57      	ldr	r3, [pc, #348]	; (800eb1c <pbuf_copy+0x188>)
 800e9c0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e9c4:	4956      	ldr	r1, [pc, #344]	; (800eb20 <pbuf_copy+0x18c>)
 800e9c6:	4857      	ldr	r0, [pc, #348]	; (800eb24 <pbuf_copy+0x190>)
 800e9c8:	f009 fa32 	bl	8017e30 <iprintf>
 800e9cc:	f06f 030f 	mvn.w	r3, #15
 800e9d0:	e09f      	b.n	800eb12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	895b      	ldrh	r3, [r3, #10]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	1ad2      	subs	r2, r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	895b      	ldrh	r3, [r3, #10]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	1acb      	subs	r3, r1, r3
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d306      	bcc.n	800e9f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	895b      	ldrh	r3, [r3, #10]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	1ad3      	subs	r3, r2, r3
 800e9f4:	60fb      	str	r3, [r7, #12]
 800e9f6:	e005      	b.n	800ea04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	895b      	ldrh	r3, [r3, #10]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	18d0      	adds	r0, r2, r3
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	685a      	ldr	r2, [r3, #4]
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	4413      	add	r3, r2
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	4619      	mov	r1, r3
 800ea18:	f009 f945 	bl	8017ca6 <memcpy>
    offset_to += len;
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	4413      	add	r3, r2
 800ea22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ea24:	693a      	ldr	r2, [r7, #16]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	4413      	add	r3, r2
 800ea2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	895b      	ldrh	r3, [r3, #10]
 800ea30:	461a      	mov	r2, r3
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d906      	bls.n	800ea46 <pbuf_copy+0xb2>
 800ea38:	4b38      	ldr	r3, [pc, #224]	; (800eb1c <pbuf_copy+0x188>)
 800ea3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ea3e:	493a      	ldr	r1, [pc, #232]	; (800eb28 <pbuf_copy+0x194>)
 800ea40:	4838      	ldr	r0, [pc, #224]	; (800eb24 <pbuf_copy+0x190>)
 800ea42:	f009 f9f5 	bl	8017e30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	895b      	ldrh	r3, [r3, #10]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d906      	bls.n	800ea60 <pbuf_copy+0xcc>
 800ea52:	4b32      	ldr	r3, [pc, #200]	; (800eb1c <pbuf_copy+0x188>)
 800ea54:	f240 32da 	movw	r2, #986	; 0x3da
 800ea58:	4934      	ldr	r1, [pc, #208]	; (800eb2c <pbuf_copy+0x198>)
 800ea5a:	4832      	ldr	r0, [pc, #200]	; (800eb24 <pbuf_copy+0x190>)
 800ea5c:	f009 f9e8 	bl	8017e30 <iprintf>
    if (offset_from >= p_from->len) {
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	895b      	ldrh	r3, [r3, #10]
 800ea64:	461a      	mov	r2, r3
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d304      	bcc.n	800ea76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	895b      	ldrh	r3, [r3, #10]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d114      	bne.n	800eaac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ea82:	2300      	movs	r3, #0
 800ea84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10c      	bne.n	800eaac <pbuf_copy+0x118>
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d009      	beq.n	800eaac <pbuf_copy+0x118>
 800ea98:	4b20      	ldr	r3, [pc, #128]	; (800eb1c <pbuf_copy+0x188>)
 800ea9a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ea9e:	4924      	ldr	r1, [pc, #144]	; (800eb30 <pbuf_copy+0x19c>)
 800eaa0:	4820      	ldr	r0, [pc, #128]	; (800eb24 <pbuf_copy+0x190>)
 800eaa2:	f009 f9c5 	bl	8017e30 <iprintf>
 800eaa6:	f06f 030f 	mvn.w	r3, #15
 800eaaa:	e032      	b.n	800eb12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d013      	beq.n	800eada <pbuf_copy+0x146>
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	895a      	ldrh	r2, [r3, #10]
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	891b      	ldrh	r3, [r3, #8]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d10d      	bne.n	800eada <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d009      	beq.n	800eada <pbuf_copy+0x146>
 800eac6:	4b15      	ldr	r3, [pc, #84]	; (800eb1c <pbuf_copy+0x188>)
 800eac8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800eacc:	4919      	ldr	r1, [pc, #100]	; (800eb34 <pbuf_copy+0x1a0>)
 800eace:	4815      	ldr	r0, [pc, #84]	; (800eb24 <pbuf_copy+0x190>)
 800ead0:	f009 f9ae 	bl	8017e30 <iprintf>
 800ead4:	f06f 0305 	mvn.w	r3, #5
 800ead8:	e01b      	b.n	800eb12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d013      	beq.n	800eb08 <pbuf_copy+0x174>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	895a      	ldrh	r2, [r3, #10]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	891b      	ldrh	r3, [r3, #8]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d10d      	bne.n	800eb08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d009      	beq.n	800eb08 <pbuf_copy+0x174>
 800eaf4:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <pbuf_copy+0x188>)
 800eaf6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800eafa:	490e      	ldr	r1, [pc, #56]	; (800eb34 <pbuf_copy+0x1a0>)
 800eafc:	4809      	ldr	r0, [pc, #36]	; (800eb24 <pbuf_copy+0x190>)
 800eafe:	f009 f997 	bl	8017e30 <iprintf>
 800eb02:	f06f 0305 	mvn.w	r3, #5
 800eb06:	e004      	b.n	800eb12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f47f af61 	bne.w	800e9d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800eb10:	2300      	movs	r3, #0
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	0801bf8c 	.word	0x0801bf8c
 800eb20:	0801c234 	.word	0x0801c234
 800eb24:	0801bfec 	.word	0x0801bfec
 800eb28:	0801c264 	.word	0x0801c264
 800eb2c:	0801c27c 	.word	0x0801c27c
 800eb30:	0801c298 	.word	0x0801c298
 800eb34:	0801c2a8 	.word	0x0801c2a8

0800eb38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	4611      	mov	r1, r2
 800eb44:	461a      	mov	r2, r3
 800eb46:	460b      	mov	r3, r1
 800eb48:	80fb      	strh	r3, [r7, #6]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d108      	bne.n	800eb6e <pbuf_copy_partial+0x36>
 800eb5c:	4b2b      	ldr	r3, [pc, #172]	; (800ec0c <pbuf_copy_partial+0xd4>)
 800eb5e:	f240 420a 	movw	r2, #1034	; 0x40a
 800eb62:	492b      	ldr	r1, [pc, #172]	; (800ec10 <pbuf_copy_partial+0xd8>)
 800eb64:	482b      	ldr	r0, [pc, #172]	; (800ec14 <pbuf_copy_partial+0xdc>)
 800eb66:	f009 f963 	bl	8017e30 <iprintf>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e04a      	b.n	800ec04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d108      	bne.n	800eb86 <pbuf_copy_partial+0x4e>
 800eb74:	4b25      	ldr	r3, [pc, #148]	; (800ec0c <pbuf_copy_partial+0xd4>)
 800eb76:	f240 420b 	movw	r2, #1035	; 0x40b
 800eb7a:	4927      	ldr	r1, [pc, #156]	; (800ec18 <pbuf_copy_partial+0xe0>)
 800eb7c:	4825      	ldr	r0, [pc, #148]	; (800ec14 <pbuf_copy_partial+0xdc>)
 800eb7e:	f009 f957 	bl	8017e30 <iprintf>
 800eb82:	2300      	movs	r3, #0
 800eb84:	e03e      	b.n	800ec04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	e034      	b.n	800ebf6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800eb8c:	88bb      	ldrh	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d00a      	beq.n	800eba8 <pbuf_copy_partial+0x70>
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	895b      	ldrh	r3, [r3, #10]
 800eb96:	88ba      	ldrh	r2, [r7, #4]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d305      	bcc.n	800eba8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	895b      	ldrh	r3, [r3, #10]
 800eba0:	88ba      	ldrh	r2, [r7, #4]
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	80bb      	strh	r3, [r7, #4]
 800eba6:	e023      	b.n	800ebf0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	895a      	ldrh	r2, [r3, #10]
 800ebac:	88bb      	ldrh	r3, [r7, #4]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ebb2:	8b3a      	ldrh	r2, [r7, #24]
 800ebb4:	88fb      	ldrh	r3, [r7, #6]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d901      	bls.n	800ebbe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ebba:	88fb      	ldrh	r3, [r7, #6]
 800ebbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ebbe:	8b7b      	ldrh	r3, [r7, #26]
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	18d0      	adds	r0, r2, r3
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	88bb      	ldrh	r3, [r7, #4]
 800ebca:	4413      	add	r3, r2
 800ebcc:	8b3a      	ldrh	r2, [r7, #24]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	f009 f869 	bl	8017ca6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ebd4:	8afa      	ldrh	r2, [r7, #22]
 800ebd6:	8b3b      	ldrh	r3, [r7, #24]
 800ebd8:	4413      	add	r3, r2
 800ebda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ebdc:	8b7a      	ldrh	r2, [r7, #26]
 800ebde:	8b3b      	ldrh	r3, [r7, #24]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ebe4:	88fa      	ldrh	r2, [r7, #6]
 800ebe6:	8b3b      	ldrh	r3, [r7, #24]
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	61fb      	str	r3, [r7, #28]
 800ebf6:	88fb      	ldrh	r3, [r7, #6]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <pbuf_copy_partial+0xca>
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1c4      	bne.n	800eb8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ec02:	8afb      	ldrh	r3, [r7, #22]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3720      	adds	r7, #32
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	0801bf8c 	.word	0x0801bf8c
 800ec10:	0801c2d4 	.word	0x0801c2d4
 800ec14:	0801bfec 	.word	0x0801bfec
 800ec18:	0801c2f4 	.word	0x0801c2f4

0800ec1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	603a      	str	r2, [r7, #0]
 800ec26:	71fb      	strb	r3, [r7, #7]
 800ec28:	460b      	mov	r3, r1
 800ec2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	8919      	ldrh	r1, [r3, #8]
 800ec30:	88ba      	ldrh	r2, [r7, #4]
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7ff faa5 	bl	800e184 <pbuf_alloc>
 800ec3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <pbuf_clone+0x2a>
    return NULL;
 800ec42:	2300      	movs	r3, #0
 800ec44:	e011      	b.n	800ec6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f7ff fea3 	bl	800e994 <pbuf_copy>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ec52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d006      	beq.n	800ec68 <pbuf_clone+0x4c>
 800ec5a:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <pbuf_clone+0x58>)
 800ec5c:	f240 5224 	movw	r2, #1316	; 0x524
 800ec60:	4905      	ldr	r1, [pc, #20]	; (800ec78 <pbuf_clone+0x5c>)
 800ec62:	4806      	ldr	r0, [pc, #24]	; (800ec7c <pbuf_clone+0x60>)
 800ec64:	f009 f8e4 	bl	8017e30 <iprintf>
  return q;
 800ec68:	68fb      	ldr	r3, [r7, #12]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	0801bf8c 	.word	0x0801bf8c
 800ec78:	0801c400 	.word	0x0801c400
 800ec7c:	0801bfec 	.word	0x0801bfec

0800ec80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ec84:	f009 f8ec 	bl	8017e60 <rand>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <tcp_init+0x20>)
 800ec9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ec9c:	bf00      	nop
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	20000024 	.word	0x20000024

0800eca4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	7d1b      	ldrb	r3, [r3, #20]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d105      	bne.n	800ecc0 <tcp_free+0x1c>
 800ecb4:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <tcp_free+0x2c>)
 800ecb6:	22d4      	movs	r2, #212	; 0xd4
 800ecb8:	4906      	ldr	r1, [pc, #24]	; (800ecd4 <tcp_free+0x30>)
 800ecba:	4807      	ldr	r0, [pc, #28]	; (800ecd8 <tcp_free+0x34>)
 800ecbc:	f009 f8b8 	bl	8017e30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	f7fe fea2 	bl	800da0c <memp_free>
}
 800ecc8:	bf00      	nop
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	0801c48c 	.word	0x0801c48c
 800ecd4:	0801c4bc 	.word	0x0801c4bc
 800ecd8:	0801c4d0 	.word	0x0801c4d0

0800ecdc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	7d1b      	ldrb	r3, [r3, #20]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d105      	bne.n	800ecf8 <tcp_free_listen+0x1c>
 800ecec:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <tcp_free_listen+0x2c>)
 800ecee:	22df      	movs	r2, #223	; 0xdf
 800ecf0:	4906      	ldr	r1, [pc, #24]	; (800ed0c <tcp_free_listen+0x30>)
 800ecf2:	4807      	ldr	r0, [pc, #28]	; (800ed10 <tcp_free_listen+0x34>)
 800ecf4:	f009 f89c 	bl	8017e30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ecf8:	6879      	ldr	r1, [r7, #4]
 800ecfa:	2001      	movs	r0, #1
 800ecfc:	f7fe fe86 	bl	800da0c <memp_free>
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	0801c48c 	.word	0x0801c48c
 800ed0c:	0801c4f8 	.word	0x0801c4f8
 800ed10:	0801c4d0 	.word	0x0801c4d0

0800ed14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ed18:	f001 f8f4 	bl	800ff04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ed1c:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <tcp_tmr+0x28>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	3301      	adds	r3, #1
 800ed22:	b2da      	uxtb	r2, r3
 800ed24:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <tcp_tmr+0x28>)
 800ed26:	701a      	strb	r2, [r3, #0]
 800ed28:	4b04      	ldr	r3, [pc, #16]	; (800ed3c <tcp_tmr+0x28>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	f003 0301 	and.w	r3, r3, #1
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ed34:	f000 fda6 	bl	800f884 <tcp_slowtmr>
  }
}
 800ed38:	bf00      	nop
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20011bc5 	.word	0x20011bc5

0800ed40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d105      	bne.n	800ed5c <tcp_remove_listener+0x1c>
 800ed50:	4b0d      	ldr	r3, [pc, #52]	; (800ed88 <tcp_remove_listener+0x48>)
 800ed52:	22ff      	movs	r2, #255	; 0xff
 800ed54:	490d      	ldr	r1, [pc, #52]	; (800ed8c <tcp_remove_listener+0x4c>)
 800ed56:	480e      	ldr	r0, [pc, #56]	; (800ed90 <tcp_remove_listener+0x50>)
 800ed58:	f009 f86a 	bl	8017e30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	60fb      	str	r3, [r7, #12]
 800ed60:	e00a      	b.n	800ed78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d102      	bne.n	800ed72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	60fb      	str	r3, [r7, #12]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d1f1      	bne.n	800ed62 <tcp_remove_listener+0x22>
    }
  }
}
 800ed7e:	bf00      	nop
 800ed80:	bf00      	nop
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	0801c48c 	.word	0x0801c48c
 800ed8c:	0801c514 	.word	0x0801c514
 800ed90:	0801c4d0 	.word	0x0801c4d0

0800ed94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <tcp_listen_closed+0x1c>
 800eda2:	4b14      	ldr	r3, [pc, #80]	; (800edf4 <tcp_listen_closed+0x60>)
 800eda4:	f240 1211 	movw	r2, #273	; 0x111
 800eda8:	4913      	ldr	r1, [pc, #76]	; (800edf8 <tcp_listen_closed+0x64>)
 800edaa:	4814      	ldr	r0, [pc, #80]	; (800edfc <tcp_listen_closed+0x68>)
 800edac:	f009 f840 	bl	8017e30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	7d1b      	ldrb	r3, [r3, #20]
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d006      	beq.n	800edc6 <tcp_listen_closed+0x32>
 800edb8:	4b0e      	ldr	r3, [pc, #56]	; (800edf4 <tcp_listen_closed+0x60>)
 800edba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800edbe:	4910      	ldr	r1, [pc, #64]	; (800ee00 <tcp_listen_closed+0x6c>)
 800edc0:	480e      	ldr	r0, [pc, #56]	; (800edfc <tcp_listen_closed+0x68>)
 800edc2:	f009 f835 	bl	8017e30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800edc6:	2301      	movs	r3, #1
 800edc8:	60fb      	str	r3, [r7, #12]
 800edca:	e00b      	b.n	800ede4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800edcc:	4a0d      	ldr	r2, [pc, #52]	; (800ee04 <tcp_listen_closed+0x70>)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff ffb1 	bl	800ed40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	3301      	adds	r3, #1
 800ede2:	60fb      	str	r3, [r7, #12]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	d9f0      	bls.n	800edcc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800edea:	bf00      	nop
 800edec:	bf00      	nop
 800edee:	3710      	adds	r7, #16
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	0801c48c 	.word	0x0801c48c
 800edf8:	0801c53c 	.word	0x0801c53c
 800edfc:	0801c4d0 	.word	0x0801c4d0
 800ee00:	0801c548 	.word	0x0801c548
 800ee04:	0801e204 	.word	0x0801e204

0800ee08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ee08:	b5b0      	push	{r4, r5, r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af04      	add	r7, sp, #16
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	460b      	mov	r3, r1
 800ee12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <tcp_close_shutdown+0x20>
 800ee1a:	4b63      	ldr	r3, [pc, #396]	; (800efa8 <tcp_close_shutdown+0x1a0>)
 800ee1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ee20:	4962      	ldr	r1, [pc, #392]	; (800efac <tcp_close_shutdown+0x1a4>)
 800ee22:	4863      	ldr	r0, [pc, #396]	; (800efb0 <tcp_close_shutdown+0x1a8>)
 800ee24:	f009 f804 	bl	8017e30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ee28:	78fb      	ldrb	r3, [r7, #3]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d066      	beq.n	800eefc <tcp_close_shutdown+0xf4>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7d1b      	ldrb	r3, [r3, #20]
 800ee32:	2b04      	cmp	r3, #4
 800ee34:	d003      	beq.n	800ee3e <tcp_close_shutdown+0x36>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	7d1b      	ldrb	r3, [r3, #20]
 800ee3a:	2b07      	cmp	r3, #7
 800ee3c:	d15e      	bne.n	800eefc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d104      	bne.n	800ee50 <tcp_close_shutdown+0x48>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee4e:	d055      	beq.n	800eefc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	8b5b      	ldrh	r3, [r3, #26]
 800ee54:	f003 0310 	and.w	r3, r3, #16
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d106      	bne.n	800ee6a <tcp_close_shutdown+0x62>
 800ee5c:	4b52      	ldr	r3, [pc, #328]	; (800efa8 <tcp_close_shutdown+0x1a0>)
 800ee5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ee62:	4954      	ldr	r1, [pc, #336]	; (800efb4 <tcp_close_shutdown+0x1ac>)
 800ee64:	4852      	ldr	r0, [pc, #328]	; (800efb0 <tcp_close_shutdown+0x1a8>)
 800ee66:	f008 ffe3 	bl	8017e30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ee72:	687d      	ldr	r5, [r7, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3304      	adds	r3, #4
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	8ad2      	ldrh	r2, [r2, #22]
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	8b09      	ldrh	r1, [r1, #24]
 800ee80:	9102      	str	r1, [sp, #8]
 800ee82:	9201      	str	r2, [sp, #4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	462b      	mov	r3, r5
 800ee88:	4622      	mov	r2, r4
 800ee8a:	4601      	mov	r1, r0
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f005 fe2b 	bl	8014ae8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f001 fbe6 	bl	8010664 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ee98:	4b47      	ldr	r3, [pc, #284]	; (800efb8 <tcp_close_shutdown+0x1b0>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d105      	bne.n	800eeae <tcp_close_shutdown+0xa6>
 800eea2:	4b45      	ldr	r3, [pc, #276]	; (800efb8 <tcp_close_shutdown+0x1b0>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	4a43      	ldr	r2, [pc, #268]	; (800efb8 <tcp_close_shutdown+0x1b0>)
 800eeaa:	6013      	str	r3, [r2, #0]
 800eeac:	e013      	b.n	800eed6 <tcp_close_shutdown+0xce>
 800eeae:	4b42      	ldr	r3, [pc, #264]	; (800efb8 <tcp_close_shutdown+0x1b0>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	60fb      	str	r3, [r7, #12]
 800eeb4:	e00c      	b.n	800eed0 <tcp_close_shutdown+0xc8>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d104      	bne.n	800eeca <tcp_close_shutdown+0xc2>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68da      	ldr	r2, [r3, #12]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	60da      	str	r2, [r3, #12]
 800eec8:	e005      	b.n	800eed6 <tcp_close_shutdown+0xce>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	60fb      	str	r3, [r7, #12]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1ef      	bne.n	800eeb6 <tcp_close_shutdown+0xae>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2200      	movs	r2, #0
 800eeda:	60da      	str	r2, [r3, #12]
 800eedc:	4b37      	ldr	r3, [pc, #220]	; (800efbc <tcp_close_shutdown+0x1b4>)
 800eede:	2201      	movs	r2, #1
 800eee0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800eee2:	4b37      	ldr	r3, [pc, #220]	; (800efc0 <tcp_close_shutdown+0x1b8>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d102      	bne.n	800eef2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800eeec:	f004 f87e 	bl	8012fec <tcp_trigger_input_pcb_close>
 800eef0:	e002      	b.n	800eef8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f7ff fed6 	bl	800eca4 <tcp_free>
      }
      return ERR_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	e050      	b.n	800ef9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	7d1b      	ldrb	r3, [r3, #20]
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d03b      	beq.n	800ef7c <tcp_close_shutdown+0x174>
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	dc44      	bgt.n	800ef92 <tcp_close_shutdown+0x18a>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d002      	beq.n	800ef12 <tcp_close_shutdown+0x10a>
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d02a      	beq.n	800ef66 <tcp_close_shutdown+0x15e>
 800ef10:	e03f      	b.n	800ef92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	8adb      	ldrh	r3, [r3, #22]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d021      	beq.n	800ef5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef1a:	4b2a      	ldr	r3, [pc, #168]	; (800efc4 <tcp_close_shutdown+0x1bc>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d105      	bne.n	800ef30 <tcp_close_shutdown+0x128>
 800ef24:	4b27      	ldr	r3, [pc, #156]	; (800efc4 <tcp_close_shutdown+0x1bc>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	4a26      	ldr	r2, [pc, #152]	; (800efc4 <tcp_close_shutdown+0x1bc>)
 800ef2c:	6013      	str	r3, [r2, #0]
 800ef2e:	e013      	b.n	800ef58 <tcp_close_shutdown+0x150>
 800ef30:	4b24      	ldr	r3, [pc, #144]	; (800efc4 <tcp_close_shutdown+0x1bc>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60bb      	str	r3, [r7, #8]
 800ef36:	e00c      	b.n	800ef52 <tcp_close_shutdown+0x14a>
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d104      	bne.n	800ef4c <tcp_close_shutdown+0x144>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68da      	ldr	r2, [r3, #12]
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	60da      	str	r2, [r3, #12]
 800ef4a:	e005      	b.n	800ef58 <tcp_close_shutdown+0x150>
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	60bb      	str	r3, [r7, #8]
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1ef      	bne.n	800ef38 <tcp_close_shutdown+0x130>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff fea0 	bl	800eca4 <tcp_free>
      break;
 800ef64:	e01a      	b.n	800ef9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff ff14 	bl	800ed94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	4816      	ldr	r0, [pc, #88]	; (800efc8 <tcp_close_shutdown+0x1c0>)
 800ef70:	f001 fbc8 	bl	8010704 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7ff feb1 	bl	800ecdc <tcp_free_listen>
      break;
 800ef7a:	e00f      	b.n	800ef9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	480e      	ldr	r0, [pc, #56]	; (800efb8 <tcp_close_shutdown+0x1b0>)
 800ef80:	f001 fbc0 	bl	8010704 <tcp_pcb_remove>
 800ef84:	4b0d      	ldr	r3, [pc, #52]	; (800efbc <tcp_close_shutdown+0x1b4>)
 800ef86:	2201      	movs	r2, #1
 800ef88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7ff fe8a 	bl	800eca4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ef90:	e004      	b.n	800ef9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 f81a 	bl	800efcc <tcp_close_shutdown_fin>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	e000      	b.n	800ef9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bdb0      	pop	{r4, r5, r7, pc}
 800efa6:	bf00      	nop
 800efa8:	0801c48c 	.word	0x0801c48c
 800efac:	0801c560 	.word	0x0801c560
 800efb0:	0801c4d0 	.word	0x0801c4d0
 800efb4:	0801c580 	.word	0x0801c580
 800efb8:	20011bbc 	.word	0x20011bbc
 800efbc:	20011bc4 	.word	0x20011bc4
 800efc0:	20011bfc 	.word	0x20011bfc
 800efc4:	20011bb4 	.word	0x20011bb4
 800efc8:	20011bb8 	.word	0x20011bb8

0800efcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <tcp_close_shutdown_fin+0x1c>
 800efda:	4b2e      	ldr	r3, [pc, #184]	; (800f094 <tcp_close_shutdown_fin+0xc8>)
 800efdc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800efe0:	492d      	ldr	r1, [pc, #180]	; (800f098 <tcp_close_shutdown_fin+0xcc>)
 800efe2:	482e      	ldr	r0, [pc, #184]	; (800f09c <tcp_close_shutdown_fin+0xd0>)
 800efe4:	f008 ff24 	bl	8017e30 <iprintf>

  switch (pcb->state) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	7d1b      	ldrb	r3, [r3, #20]
 800efec:	2b07      	cmp	r3, #7
 800efee:	d020      	beq.n	800f032 <tcp_close_shutdown_fin+0x66>
 800eff0:	2b07      	cmp	r3, #7
 800eff2:	dc2b      	bgt.n	800f04c <tcp_close_shutdown_fin+0x80>
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	d002      	beq.n	800effe <tcp_close_shutdown_fin+0x32>
 800eff8:	2b04      	cmp	r3, #4
 800effa:	d00d      	beq.n	800f018 <tcp_close_shutdown_fin+0x4c>
 800effc:	e026      	b.n	800f04c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f004 fe5e 	bl	8013cc0 <tcp_send_fin>
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d11f      	bne.n	800f050 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2205      	movs	r2, #5
 800f014:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f016:	e01b      	b.n	800f050 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f004 fe51 	bl	8013cc0 <tcp_send_fin>
 800f01e:	4603      	mov	r3, r0
 800f020:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d114      	bne.n	800f054 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2205      	movs	r2, #5
 800f02e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f030:	e010      	b.n	800f054 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f004 fe44 	bl	8013cc0 <tcp_send_fin>
 800f038:	4603      	mov	r3, r0
 800f03a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d109      	bne.n	800f058 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2209      	movs	r2, #9
 800f048:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f04a:	e005      	b.n	800f058 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	e01c      	b.n	800f08a <tcp_close_shutdown_fin+0xbe>
      break;
 800f050:	bf00      	nop
 800f052:	e002      	b.n	800f05a <tcp_close_shutdown_fin+0x8e>
      break;
 800f054:	bf00      	nop
 800f056:	e000      	b.n	800f05a <tcp_close_shutdown_fin+0x8e>
      break;
 800f058:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d103      	bne.n	800f06a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f004 ff6a 	bl	8013f3c <tcp_output>
 800f068:	e00d      	b.n	800f086 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f06e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f072:	d108      	bne.n	800f086 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	8b5b      	ldrh	r3, [r3, #26]
 800f078:	f043 0308 	orr.w	r3, r3, #8
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f082:	2300      	movs	r3, #0
 800f084:	e001      	b.n	800f08a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f086:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	0801c48c 	.word	0x0801c48c
 800f098:	0801c53c 	.word	0x0801c53c
 800f09c:	0801c4d0 	.word	0x0801c4d0

0800f0a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d109      	bne.n	800f0c2 <tcp_close+0x22>
 800f0ae:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <tcp_close+0x4c>)
 800f0b0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f0b4:	490e      	ldr	r1, [pc, #56]	; (800f0f0 <tcp_close+0x50>)
 800f0b6:	480f      	ldr	r0, [pc, #60]	; (800f0f4 <tcp_close+0x54>)
 800f0b8:	f008 feba 	bl	8017e30 <iprintf>
 800f0bc:	f06f 030f 	mvn.w	r3, #15
 800f0c0:	e00f      	b.n	800f0e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d006      	beq.n	800f0d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f043 0310 	orr.w	r3, r3, #16
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f0d8:	2101      	movs	r1, #1
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f7ff fe94 	bl	800ee08 <tcp_close_shutdown>
 800f0e0:	4603      	mov	r3, r0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0801c48c 	.word	0x0801c48c
 800f0f0:	0801c59c 	.word	0x0801c59c
 800f0f4:	0801c4d0 	.word	0x0801c4d0

0800f0f8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d109      	bne.n	800f11e <tcp_shutdown+0x26>
 800f10a:	4b26      	ldr	r3, [pc, #152]	; (800f1a4 <tcp_shutdown+0xac>)
 800f10c:	f240 2207 	movw	r2, #519	; 0x207
 800f110:	4925      	ldr	r1, [pc, #148]	; (800f1a8 <tcp_shutdown+0xb0>)
 800f112:	4826      	ldr	r0, [pc, #152]	; (800f1ac <tcp_shutdown+0xb4>)
 800f114:	f008 fe8c 	bl	8017e30 <iprintf>
 800f118:	f06f 030f 	mvn.w	r3, #15
 800f11c:	e03d      	b.n	800f19a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	7d1b      	ldrb	r3, [r3, #20]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d102      	bne.n	800f12c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f126:	f06f 030a 	mvn.w	r3, #10
 800f12a:	e036      	b.n	800f19a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d01b      	beq.n	800f16a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	8b5b      	ldrh	r3, [r3, #26]
 800f136:	f043 0310 	orr.w	r3, r3, #16
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d005      	beq.n	800f152 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f146:	2101      	movs	r1, #1
 800f148:	68f8      	ldr	r0, [r7, #12]
 800f14a:	f7ff fe5d 	bl	800ee08 <tcp_close_shutdown>
 800f14e:	4603      	mov	r3, r0
 800f150:	e023      	b.n	800f19a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f156:	2b00      	cmp	r3, #0
 800f158:	d007      	beq.n	800f16a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff faf4 	bl	800e74c <pbuf_free>
      pcb->refused_data = NULL;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2200      	movs	r2, #0
 800f168:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d013      	beq.n	800f198 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	7d1b      	ldrb	r3, [r3, #20]
 800f174:	2b04      	cmp	r3, #4
 800f176:	dc02      	bgt.n	800f17e <tcp_shutdown+0x86>
 800f178:	2b03      	cmp	r3, #3
 800f17a:	da02      	bge.n	800f182 <tcp_shutdown+0x8a>
 800f17c:	e009      	b.n	800f192 <tcp_shutdown+0x9a>
 800f17e:	2b07      	cmp	r3, #7
 800f180:	d107      	bne.n	800f192 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	b2db      	uxtb	r3, r3
 800f186:	4619      	mov	r1, r3
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f7ff fe3d 	bl	800ee08 <tcp_close_shutdown>
 800f18e:	4603      	mov	r3, r0
 800f190:	e003      	b.n	800f19a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f192:	f06f 030a 	mvn.w	r3, #10
 800f196:	e000      	b.n	800f19a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	0801c48c 	.word	0x0801c48c
 800f1a8:	0801c5b4 	.word	0x0801c5b4
 800f1ac:	0801c4d0 	.word	0x0801c4d0

0800f1b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08e      	sub	sp, #56	; 0x38
 800f1b4:	af04      	add	r7, sp, #16
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d107      	bne.n	800f1d0 <tcp_abandon+0x20>
 800f1c0:	4b52      	ldr	r3, [pc, #328]	; (800f30c <tcp_abandon+0x15c>)
 800f1c2:	f240 223d 	movw	r2, #573	; 0x23d
 800f1c6:	4952      	ldr	r1, [pc, #328]	; (800f310 <tcp_abandon+0x160>)
 800f1c8:	4852      	ldr	r0, [pc, #328]	; (800f314 <tcp_abandon+0x164>)
 800f1ca:	f008 fe31 	bl	8017e30 <iprintf>
 800f1ce:	e099      	b.n	800f304 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	7d1b      	ldrb	r3, [r3, #20]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d106      	bne.n	800f1e6 <tcp_abandon+0x36>
 800f1d8:	4b4c      	ldr	r3, [pc, #304]	; (800f30c <tcp_abandon+0x15c>)
 800f1da:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f1de:	494e      	ldr	r1, [pc, #312]	; (800f318 <tcp_abandon+0x168>)
 800f1e0:	484c      	ldr	r0, [pc, #304]	; (800f314 <tcp_abandon+0x164>)
 800f1e2:	f008 fe25 	bl	8017e30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ea:	2b0a      	cmp	r3, #10
 800f1ec:	d107      	bne.n	800f1fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	484a      	ldr	r0, [pc, #296]	; (800f31c <tcp_abandon+0x16c>)
 800f1f2:	f001 fa87 	bl	8010704 <tcp_pcb_remove>
    tcp_free(pcb);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff fd54 	bl	800eca4 <tcp_free>
 800f1fc:	e082      	b.n	800f304 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f202:	2300      	movs	r3, #0
 800f204:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f20a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f218:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	7d1b      	ldrb	r3, [r3, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d126      	bne.n	800f276 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8adb      	ldrh	r3, [r3, #22]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d02e      	beq.n	800f28e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f230:	4b3b      	ldr	r3, [pc, #236]	; (800f320 <tcp_abandon+0x170>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	429a      	cmp	r2, r3
 800f238:	d105      	bne.n	800f246 <tcp_abandon+0x96>
 800f23a:	4b39      	ldr	r3, [pc, #228]	; (800f320 <tcp_abandon+0x170>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	4a37      	ldr	r2, [pc, #220]	; (800f320 <tcp_abandon+0x170>)
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	e013      	b.n	800f26e <tcp_abandon+0xbe>
 800f246:	4b36      	ldr	r3, [pc, #216]	; (800f320 <tcp_abandon+0x170>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	e00c      	b.n	800f268 <tcp_abandon+0xb8>
 800f24e:	69fb      	ldr	r3, [r7, #28]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	d104      	bne.n	800f262 <tcp_abandon+0xb2>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68da      	ldr	r2, [r3, #12]
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	60da      	str	r2, [r3, #12]
 800f260:	e005      	b.n	800f26e <tcp_abandon+0xbe>
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	61fb      	str	r3, [r7, #28]
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d1ef      	bne.n	800f24e <tcp_abandon+0x9e>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	60da      	str	r2, [r3, #12]
 800f274:	e00b      	b.n	800f28e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8adb      	ldrh	r3, [r3, #22]
 800f27e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f280:	6879      	ldr	r1, [r7, #4]
 800f282:	4828      	ldr	r0, [pc, #160]	; (800f324 <tcp_abandon+0x174>)
 800f284:	f001 fa3e 	bl	8010704 <tcp_pcb_remove>
 800f288:	4b27      	ldr	r3, [pc, #156]	; (800f328 <tcp_abandon+0x178>)
 800f28a:	2201      	movs	r2, #1
 800f28c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f292:	2b00      	cmp	r3, #0
 800f294:	d004      	beq.n	800f2a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f29a:	4618      	mov	r0, r3
 800f29c:	f000 ff12 	bl	80100c4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d004      	beq.n	800f2b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 ff09 	bl	80100c4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d004      	beq.n	800f2c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 ff00 	bl	80100c4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	3304      	adds	r3, #4
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	8b12      	ldrh	r2, [r2, #24]
 800f2d4:	9202      	str	r2, [sp, #8]
 800f2d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2d8:	9201      	str	r2, [sp, #4]
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	69b9      	ldr	r1, [r7, #24]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f005 fc00 	bl	8014ae8 <tcp_rst>
    }
    last_state = pcb->state;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7d1b      	ldrb	r3, [r3, #20]
 800f2ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fcd8 	bl	800eca4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d004      	beq.n	800f304 <tcp_abandon+0x154>
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f06f 010c 	mvn.w	r1, #12
 800f300:	68f8      	ldr	r0, [r7, #12]
 800f302:	4798      	blx	r3
  }
}
 800f304:	3728      	adds	r7, #40	; 0x28
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0801c48c 	.word	0x0801c48c
 800f310:	0801c5d0 	.word	0x0801c5d0
 800f314:	0801c4d0 	.word	0x0801c4d0
 800f318:	0801c5ec 	.word	0x0801c5ec
 800f31c:	20011bc0 	.word	0x20011bc0
 800f320:	20011bb4 	.word	0x20011bb4
 800f324:	20011bbc 	.word	0x20011bbc
 800f328:	20011bc4 	.word	0x20011bc4

0800f32c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f334:	2101      	movs	r1, #1
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f7ff ff3a 	bl	800f1b0 <tcp_abandon>
}
 800f33c:	bf00      	nop
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b088      	sub	sp, #32
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	4613      	mov	r3, r2
 800f350:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f352:	2304      	movs	r3, #4
 800f354:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f35c:	4b3e      	ldr	r3, [pc, #248]	; (800f458 <tcp_bind+0x114>)
 800f35e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d109      	bne.n	800f37a <tcp_bind+0x36>
 800f366:	4b3d      	ldr	r3, [pc, #244]	; (800f45c <tcp_bind+0x118>)
 800f368:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f36c:	493c      	ldr	r1, [pc, #240]	; (800f460 <tcp_bind+0x11c>)
 800f36e:	483d      	ldr	r0, [pc, #244]	; (800f464 <tcp_bind+0x120>)
 800f370:	f008 fd5e 	bl	8017e30 <iprintf>
 800f374:	f06f 030f 	mvn.w	r3, #15
 800f378:	e06a      	b.n	800f450 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	7d1b      	ldrb	r3, [r3, #20]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d009      	beq.n	800f396 <tcp_bind+0x52>
 800f382:	4b36      	ldr	r3, [pc, #216]	; (800f45c <tcp_bind+0x118>)
 800f384:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f388:	4937      	ldr	r1, [pc, #220]	; (800f468 <tcp_bind+0x124>)
 800f38a:	4836      	ldr	r0, [pc, #216]	; (800f464 <tcp_bind+0x120>)
 800f38c:	f008 fd50 	bl	8017e30 <iprintf>
 800f390:	f06f 0305 	mvn.w	r3, #5
 800f394:	e05c      	b.n	800f450 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f396:	88fb      	ldrh	r3, [r7, #6]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d109      	bne.n	800f3b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f39c:	f000 f914 	bl	800f5c8 <tcp_new_port>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f3a4:	88fb      	ldrh	r3, [r7, #6]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d135      	bne.n	800f416 <tcp_bind+0xd2>
      return ERR_BUF;
 800f3aa:	f06f 0301 	mvn.w	r3, #1
 800f3ae:	e04f      	b.n	800f450 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	61fb      	str	r3, [r7, #28]
 800f3b4:	e02b      	b.n	800f40e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f3b6:	4a2d      	ldr	r2, [pc, #180]	; (800f46c <tcp_bind+0x128>)
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	61bb      	str	r3, [r7, #24]
 800f3c2:	e01e      	b.n	800f402 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	8adb      	ldrh	r3, [r3, #22]
 800f3c8:	88fa      	ldrh	r2, [r7, #6]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d116      	bne.n	800f3fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f3ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d010      	beq.n	800f3f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d00c      	beq.n	800f3f6 <tcp_bind+0xb2>
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d009      	beq.n	800f3f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d005      	beq.n	800f3f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d102      	bne.n	800f3fc <tcp_bind+0xb8>
              return ERR_USE;
 800f3f6:	f06f 0307 	mvn.w	r3, #7
 800f3fa:	e029      	b.n	800f450 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f3fc:	69bb      	ldr	r3, [r7, #24]
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	61bb      	str	r3, [r7, #24]
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d1dd      	bne.n	800f3c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	3301      	adds	r3, #1
 800f40c:	61fb      	str	r3, [r7, #28]
 800f40e:	69fa      	ldr	r2, [r7, #28]
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	429a      	cmp	r2, r3
 800f414:	dbcf      	blt.n	800f3b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00c      	beq.n	800f436 <tcp_bind+0xf2>
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d008      	beq.n	800f436 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <tcp_bind+0xec>
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	e000      	b.n	800f432 <tcp_bind+0xee>
 800f430:	2300      	movs	r3, #0
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	88fa      	ldrh	r2, [r7, #6]
 800f43a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f43c:	4b0c      	ldr	r3, [pc, #48]	; (800f470 <tcp_bind+0x12c>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	60da      	str	r2, [r3, #12]
 800f444:	4a0a      	ldr	r2, [pc, #40]	; (800f470 <tcp_bind+0x12c>)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6013      	str	r3, [r2, #0]
 800f44a:	f005 fd0f 	bl	8014e6c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f44e:	2300      	movs	r3, #0
}
 800f450:	4618      	mov	r0, r3
 800f452:	3720      	adds	r7, #32
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	0801e22c 	.word	0x0801e22c
 800f45c:	0801c48c 	.word	0x0801c48c
 800f460:	0801c620 	.word	0x0801c620
 800f464:	0801c4d0 	.word	0x0801c4d0
 800f468:	0801c638 	.word	0x0801c638
 800f46c:	0801e204 	.word	0x0801e204
 800f470:	20011bb4 	.word	0x20011bb4

0800f474 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d106      	bne.n	800f490 <tcp_update_rcv_ann_wnd+0x1c>
 800f482:	4b25      	ldr	r3, [pc, #148]	; (800f518 <tcp_update_rcv_ann_wnd+0xa4>)
 800f484:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f488:	4924      	ldr	r1, [pc, #144]	; (800f51c <tcp_update_rcv_ann_wnd+0xa8>)
 800f48a:	4825      	ldr	r0, [pc, #148]	; (800f520 <tcp_update_rcv_ann_wnd+0xac>)
 800f48c:	f008 fcd0 	bl	8017e30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f498:	4413      	add	r3, r2
 800f49a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f4a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f4a8:	bf28      	it	cs
 800f4aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f4ae:	b292      	uxth	r2, r2
 800f4b0:	4413      	add	r3, r2
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	db08      	blt.n	800f4cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	e020      	b.n	800f50e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	dd03      	ble.n	800f4e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f4e0:	e014      	b.n	800f50c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4f4:	d306      	bcc.n	800f504 <tcp_update_rcv_ann_wnd+0x90>
 800f4f6:	4b08      	ldr	r3, [pc, #32]	; (800f518 <tcp_update_rcv_ann_wnd+0xa4>)
 800f4f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f4fc:	4909      	ldr	r1, [pc, #36]	; (800f524 <tcp_update_rcv_ann_wnd+0xb0>)
 800f4fe:	4808      	ldr	r0, [pc, #32]	; (800f520 <tcp_update_rcv_ann_wnd+0xac>)
 800f500:	f008 fc96 	bl	8017e30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	b29a      	uxth	r2, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f50c:	2300      	movs	r3, #0
  }
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	0801c48c 	.word	0x0801c48c
 800f51c:	0801c6e8 	.word	0x0801c6e8
 800f520:	0801c4d0 	.word	0x0801c4d0
 800f524:	0801c70c 	.word	0x0801c70c

0800f528 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d107      	bne.n	800f54a <tcp_recved+0x22>
 800f53a:	4b1f      	ldr	r3, [pc, #124]	; (800f5b8 <tcp_recved+0x90>)
 800f53c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f540:	491e      	ldr	r1, [pc, #120]	; (800f5bc <tcp_recved+0x94>)
 800f542:	481f      	ldr	r0, [pc, #124]	; (800f5c0 <tcp_recved+0x98>)
 800f544:	f008 fc74 	bl	8017e30 <iprintf>
 800f548:	e032      	b.n	800f5b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	7d1b      	ldrb	r3, [r3, #20]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d106      	bne.n	800f560 <tcp_recved+0x38>
 800f552:	4b19      	ldr	r3, [pc, #100]	; (800f5b8 <tcp_recved+0x90>)
 800f554:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f558:	491a      	ldr	r1, [pc, #104]	; (800f5c4 <tcp_recved+0x9c>)
 800f55a:	4819      	ldr	r0, [pc, #100]	; (800f5c0 <tcp_recved+0x98>)
 800f55c:	f008 fc68 	bl	8017e30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f564:	887b      	ldrh	r3, [r7, #2]
 800f566:	4413      	add	r3, r2
 800f568:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f56a:	89fb      	ldrh	r3, [r7, #14]
 800f56c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f570:	d804      	bhi.n	800f57c <tcp_recved+0x54>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f576:	89fa      	ldrh	r2, [r7, #14]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d204      	bcs.n	800f586 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f582:	851a      	strh	r2, [r3, #40]	; 0x28
 800f584:	e002      	b.n	800f58c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	89fa      	ldrh	r2, [r7, #14]
 800f58a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ff71 	bl	800f474 <tcp_update_rcv_ann_wnd>
 800f592:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f59a:	d309      	bcc.n	800f5b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	8b5b      	ldrh	r3, [r3, #26]
 800f5a0:	f043 0302 	orr.w	r3, r3, #2
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f004 fcc6 	bl	8013f3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	0801c48c 	.word	0x0801c48c
 800f5bc:	0801c728 	.word	0x0801c728
 800f5c0:	0801c4d0 	.word	0x0801c4d0
 800f5c4:	0801c740 	.word	0x0801c740

0800f5c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f5d2:	4b1e      	ldr	r3, [pc, #120]	; (800f64c <tcp_new_port+0x84>)
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	4b1c      	ldr	r3, [pc, #112]	; (800f64c <tcp_new_port+0x84>)
 800f5dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f5de:	4b1b      	ldr	r3, [pc, #108]	; (800f64c <tcp_new_port+0x84>)
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d103      	bne.n	800f5f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f5ea:	4b18      	ldr	r3, [pc, #96]	; (800f64c <tcp_new_port+0x84>)
 800f5ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f5f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	71fb      	strb	r3, [r7, #7]
 800f5f6:	e01e      	b.n	800f636 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	4a15      	ldr	r2, [pc, #84]	; (800f650 <tcp_new_port+0x88>)
 800f5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	603b      	str	r3, [r7, #0]
 800f604:	e011      	b.n	800f62a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	8ada      	ldrh	r2, [r3, #22]
 800f60a:	4b10      	ldr	r3, [pc, #64]	; (800f64c <tcp_new_port+0x84>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d108      	bne.n	800f624 <tcp_new_port+0x5c>
        n++;
 800f612:	88bb      	ldrh	r3, [r7, #4]
 800f614:	3301      	adds	r3, #1
 800f616:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f618:	88bb      	ldrh	r3, [r7, #4]
 800f61a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f61e:	d3d8      	bcc.n	800f5d2 <tcp_new_port+0xa>
          return 0;
 800f620:	2300      	movs	r3, #0
 800f622:	e00d      	b.n	800f640 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	603b      	str	r3, [r7, #0]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1ea      	bne.n	800f606 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	3301      	adds	r3, #1
 800f634:	71fb      	strb	r3, [r7, #7]
 800f636:	79fb      	ldrb	r3, [r7, #7]
 800f638:	2b03      	cmp	r3, #3
 800f63a:	d9dd      	bls.n	800f5f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f63c:	4b03      	ldr	r3, [pc, #12]	; (800f64c <tcp_new_port+0x84>)
 800f63e:	881b      	ldrh	r3, [r3, #0]
}
 800f640:	4618      	mov	r0, r3
 800f642:	370c      	adds	r7, #12
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr
 800f64c:	20000024 	.word	0x20000024
 800f650:	0801e204 	.word	0x0801e204

0800f654 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08a      	sub	sp, #40	; 0x28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	603b      	str	r3, [r7, #0]
 800f660:	4613      	mov	r3, r2
 800f662:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f664:	2300      	movs	r3, #0
 800f666:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d109      	bne.n	800f682 <tcp_connect+0x2e>
 800f66e:	4b7d      	ldr	r3, [pc, #500]	; (800f864 <tcp_connect+0x210>)
 800f670:	f240 4235 	movw	r2, #1077	; 0x435
 800f674:	497c      	ldr	r1, [pc, #496]	; (800f868 <tcp_connect+0x214>)
 800f676:	487d      	ldr	r0, [pc, #500]	; (800f86c <tcp_connect+0x218>)
 800f678:	f008 fbda 	bl	8017e30 <iprintf>
 800f67c:	f06f 030f 	mvn.w	r3, #15
 800f680:	e0ec      	b.n	800f85c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d109      	bne.n	800f69c <tcp_connect+0x48>
 800f688:	4b76      	ldr	r3, [pc, #472]	; (800f864 <tcp_connect+0x210>)
 800f68a:	f240 4236 	movw	r2, #1078	; 0x436
 800f68e:	4978      	ldr	r1, [pc, #480]	; (800f870 <tcp_connect+0x21c>)
 800f690:	4876      	ldr	r0, [pc, #472]	; (800f86c <tcp_connect+0x218>)
 800f692:	f008 fbcd 	bl	8017e30 <iprintf>
 800f696:	f06f 030f 	mvn.w	r3, #15
 800f69a:	e0df      	b.n	800f85c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	7d1b      	ldrb	r3, [r3, #20]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d009      	beq.n	800f6b8 <tcp_connect+0x64>
 800f6a4:	4b6f      	ldr	r3, [pc, #444]	; (800f864 <tcp_connect+0x210>)
 800f6a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f6aa:	4972      	ldr	r1, [pc, #456]	; (800f874 <tcp_connect+0x220>)
 800f6ac:	486f      	ldr	r0, [pc, #444]	; (800f86c <tcp_connect+0x218>)
 800f6ae:	f008 fbbf 	bl	8017e30 <iprintf>
 800f6b2:	f06f 0309 	mvn.w	r3, #9
 800f6b6:	e0d1      	b.n	800f85c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d002      	beq.n	800f6c4 <tcp_connect+0x70>
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	e000      	b.n	800f6c6 <tcp_connect+0x72>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	68fa      	ldr	r2, [r7, #12]
 800f6c8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	88fa      	ldrh	r2, [r7, #6]
 800f6ce:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	7a1b      	ldrb	r3, [r3, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d006      	beq.n	800f6e6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	7a1b      	ldrb	r3, [r3, #8]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fe fca7 	bl	800e030 <netif_get_by_index>
 800f6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6e4:	e005      	b.n	800f6f2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f006 fe12 	bl	8016314 <ip4_route>
 800f6f0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f6f8:	f06f 0303 	mvn.w	r3, #3
 800f6fc:	e0ae      	b.n	800f85c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d003      	beq.n	800f70c <tcp_connect+0xb8>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d111      	bne.n	800f730 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d002      	beq.n	800f718 <tcp_connect+0xc4>
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	3304      	adds	r3, #4
 800f716:	e000      	b.n	800f71a <tcp_connect+0xc6>
 800f718:	2300      	movs	r3, #0
 800f71a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d102      	bne.n	800f728 <tcp_connect+0xd4>
      return ERR_RTE;
 800f722:	f06f 0303 	mvn.w	r3, #3
 800f726:	e099      	b.n	800f85c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	8adb      	ldrh	r3, [r3, #22]
 800f734:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	8adb      	ldrh	r3, [r3, #22]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10c      	bne.n	800f758 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f73e:	f7ff ff43 	bl	800f5c8 <tcp_new_port>
 800f742:	4603      	mov	r3, r0
 800f744:	461a      	mov	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	8adb      	ldrh	r3, [r3, #22]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d102      	bne.n	800f758 <tcp_connect+0x104>
      return ERR_BUF;
 800f752:	f06f 0301 	mvn.w	r3, #1
 800f756:	e081      	b.n	800f85c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f001 f867 	bl	801082c <tcp_next_iss>
 800f75e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	697a      	ldr	r2, [r7, #20]
 800f76a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	1e5a      	subs	r2, r3, #1
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	1e5a      	subs	r2, r3, #1
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	1e5a      	subs	r2, r3, #1
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f78a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f7a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7ac:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	3304      	adds	r3, #4
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7ba:	f001 f85d 	bl	8010878 <tcp_eff_send_mss_netif>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	683a      	ldr	r2, [r7, #0]
 800f7d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f7d6:	2102      	movs	r1, #2
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f004 fac1 	bl	8013d60 <tcp_enqueue_flags>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d136      	bne.n	800f858 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	2202      	movs	r2, #2
 800f7ee:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f7f0:	8b7b      	ldrh	r3, [r7, #26]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d021      	beq.n	800f83a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f7f6:	4b20      	ldr	r3, [pc, #128]	; (800f878 <tcp_connect+0x224>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d105      	bne.n	800f80c <tcp_connect+0x1b8>
 800f800:	4b1d      	ldr	r3, [pc, #116]	; (800f878 <tcp_connect+0x224>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	4a1c      	ldr	r2, [pc, #112]	; (800f878 <tcp_connect+0x224>)
 800f808:	6013      	str	r3, [r2, #0]
 800f80a:	e013      	b.n	800f834 <tcp_connect+0x1e0>
 800f80c:	4b1a      	ldr	r3, [pc, #104]	; (800f878 <tcp_connect+0x224>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	623b      	str	r3, [r7, #32]
 800f812:	e00c      	b.n	800f82e <tcp_connect+0x1da>
 800f814:	6a3b      	ldr	r3, [r7, #32]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d104      	bne.n	800f828 <tcp_connect+0x1d4>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	68da      	ldr	r2, [r3, #12]
 800f822:	6a3b      	ldr	r3, [r7, #32]
 800f824:	60da      	str	r2, [r3, #12]
 800f826:	e005      	b.n	800f834 <tcp_connect+0x1e0>
 800f828:	6a3b      	ldr	r3, [r7, #32]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	623b      	str	r3, [r7, #32]
 800f82e:	6a3b      	ldr	r3, [r7, #32]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1ef      	bne.n	800f814 <tcp_connect+0x1c0>
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2200      	movs	r2, #0
 800f838:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f83a:	4b10      	ldr	r3, [pc, #64]	; (800f87c <tcp_connect+0x228>)
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	60da      	str	r2, [r3, #12]
 800f842:	4a0e      	ldr	r2, [pc, #56]	; (800f87c <tcp_connect+0x228>)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6013      	str	r3, [r2, #0]
 800f848:	f005 fb10 	bl	8014e6c <tcp_timer_needed>
 800f84c:	4b0c      	ldr	r3, [pc, #48]	; (800f880 <tcp_connect+0x22c>)
 800f84e:	2201      	movs	r2, #1
 800f850:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f004 fb72 	bl	8013f3c <tcp_output>
  }
  return ret;
 800f858:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3728      	adds	r7, #40	; 0x28
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	0801c48c 	.word	0x0801c48c
 800f868:	0801c768 	.word	0x0801c768
 800f86c:	0801c4d0 	.word	0x0801c4d0
 800f870:	0801c784 	.word	0x0801c784
 800f874:	0801c7a0 	.word	0x0801c7a0
 800f878:	20011bb4 	.word	0x20011bb4
 800f87c:	20011bbc 	.word	0x20011bbc
 800f880:	20011bc4 	.word	0x20011bc4

0800f884 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f884:	b5b0      	push	{r4, r5, r7, lr}
 800f886:	b090      	sub	sp, #64	; 0x40
 800f888:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f88a:	2300      	movs	r3, #0
 800f88c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f890:	4b94      	ldr	r3, [pc, #592]	; (800fae4 <tcp_slowtmr+0x260>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3301      	adds	r3, #1
 800f896:	4a93      	ldr	r2, [pc, #588]	; (800fae4 <tcp_slowtmr+0x260>)
 800f898:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f89a:	4b93      	ldr	r3, [pc, #588]	; (800fae8 <tcp_slowtmr+0x264>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	b2da      	uxtb	r2, r3
 800f8a2:	4b91      	ldr	r3, [pc, #580]	; (800fae8 <tcp_slowtmr+0x264>)
 800f8a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f8aa:	4b90      	ldr	r3, [pc, #576]	; (800faec <tcp_slowtmr+0x268>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f8b0:	e29d      	b.n	800fdee <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b4:	7d1b      	ldrb	r3, [r3, #20]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <tcp_slowtmr+0x44>
 800f8ba:	4b8d      	ldr	r3, [pc, #564]	; (800faf0 <tcp_slowtmr+0x26c>)
 800f8bc:	f240 42be 	movw	r2, #1214	; 0x4be
 800f8c0:	498c      	ldr	r1, [pc, #560]	; (800faf4 <tcp_slowtmr+0x270>)
 800f8c2:	488d      	ldr	r0, [pc, #564]	; (800faf8 <tcp_slowtmr+0x274>)
 800f8c4:	f008 fab4 	bl	8017e30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	7d1b      	ldrb	r3, [r3, #20]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d106      	bne.n	800f8de <tcp_slowtmr+0x5a>
 800f8d0:	4b87      	ldr	r3, [pc, #540]	; (800faf0 <tcp_slowtmr+0x26c>)
 800f8d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f8d6:	4989      	ldr	r1, [pc, #548]	; (800fafc <tcp_slowtmr+0x278>)
 800f8d8:	4887      	ldr	r0, [pc, #540]	; (800faf8 <tcp_slowtmr+0x274>)
 800f8da:	f008 faa9 	bl	8017e30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e0:	7d1b      	ldrb	r3, [r3, #20]
 800f8e2:	2b0a      	cmp	r3, #10
 800f8e4:	d106      	bne.n	800f8f4 <tcp_slowtmr+0x70>
 800f8e6:	4b82      	ldr	r3, [pc, #520]	; (800faf0 <tcp_slowtmr+0x26c>)
 800f8e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f8ec:	4984      	ldr	r1, [pc, #528]	; (800fb00 <tcp_slowtmr+0x27c>)
 800f8ee:	4882      	ldr	r0, [pc, #520]	; (800faf8 <tcp_slowtmr+0x274>)
 800f8f0:	f008 fa9e 	bl	8017e30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	7f9a      	ldrb	r2, [r3, #30]
 800f8f8:	4b7b      	ldr	r3, [pc, #492]	; (800fae8 <tcp_slowtmr+0x264>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d105      	bne.n	800f90c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	68db      	ldr	r3, [r3, #12]
 800f908:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f90a:	e270      	b.n	800fdee <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f90c:	4b76      	ldr	r3, [pc, #472]	; (800fae8 <tcp_slowtmr+0x264>)
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f912:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f914:	2300      	movs	r3, #0
 800f916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f91a:	2300      	movs	r3, #0
 800f91c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	7d1b      	ldrb	r3, [r3, #20]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d10a      	bne.n	800f93e <tcp_slowtmr+0xba>
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f92e:	2b05      	cmp	r3, #5
 800f930:	d905      	bls.n	800f93e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f936:	3301      	adds	r3, #1
 800f938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f93c:	e11e      	b.n	800fb7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f940:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f944:	2b0b      	cmp	r3, #11
 800f946:	d905      	bls.n	800f954 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f94c:	3301      	adds	r3, #1
 800f94e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f952:	e113      	b.n	800fb7c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f956:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d075      	beq.n	800fa4a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f962:	2b00      	cmp	r3, #0
 800f964:	d006      	beq.n	800f974 <tcp_slowtmr+0xf0>
 800f966:	4b62      	ldr	r3, [pc, #392]	; (800faf0 <tcp_slowtmr+0x26c>)
 800f968:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f96c:	4965      	ldr	r1, [pc, #404]	; (800fb04 <tcp_slowtmr+0x280>)
 800f96e:	4862      	ldr	r0, [pc, #392]	; (800faf8 <tcp_slowtmr+0x274>)
 800f970:	f008 fa5e 	bl	8017e30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d106      	bne.n	800f98a <tcp_slowtmr+0x106>
 800f97c:	4b5c      	ldr	r3, [pc, #368]	; (800faf0 <tcp_slowtmr+0x26c>)
 800f97e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f982:	4961      	ldr	r1, [pc, #388]	; (800fb08 <tcp_slowtmr+0x284>)
 800f984:	485c      	ldr	r0, [pc, #368]	; (800faf8 <tcp_slowtmr+0x274>)
 800f986:	f008 fa53 	bl	8017e30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f990:	2b0b      	cmp	r3, #11
 800f992:	d905      	bls.n	800f9a0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f998:	3301      	adds	r3, #1
 800f99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f99e:	e0ed      	b.n	800fb7c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	4a58      	ldr	r2, [pc, #352]	; (800fb0c <tcp_slowtmr+0x288>)
 800f9aa:	5cd3      	ldrb	r3, [r2, r3]
 800f9ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9b4:	7c7a      	ldrb	r2, [r7, #17]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d907      	bls.n	800f9ca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f9d0:	7c7a      	ldrb	r2, [r7, #17]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	f200 80d2 	bhi.w	800fb7c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f9d8:	2301      	movs	r3, #1
 800f9da:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d108      	bne.n	800f9f8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f9e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9e8:	f005 f972 	bl	8014cd0 <tcp_zero_window_probe>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d014      	beq.n	800fa1c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	623b      	str	r3, [r7, #32]
 800f9f6:	e011      	b.n	800fa1c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa02:	f004 f815 	bl	8013a30 <tcp_split_unsent_seg>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d107      	bne.n	800fa1c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fa0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa0e:	f004 fa95 	bl	8013f3c <tcp_output>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f000 80ac 	beq.w	800fb7c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa32:	2b06      	cmp	r3, #6
 800fa34:	f200 80a2 	bhi.w	800fb7c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa3e:	3301      	adds	r3, #1
 800fa40:	b2da      	uxtb	r2, r3
 800fa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa44:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fa48:	e098      	b.n	800fb7c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	db0f      	blt.n	800fa74 <tcp_slowtmr+0x1f0>
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d008      	beq.n	800fa74 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	b21a      	sxth	r2, r3
 800fa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa72:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fa80:	429a      	cmp	r2, r3
 800fa82:	db7b      	blt.n	800fb7c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fa84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa86:	f004 fd5d 	bl	8014544 <tcp_rexmit_rto_prepare>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d007      	beq.n	800faa0 <tcp_slowtmr+0x21c>
 800fa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d171      	bne.n	800fb7c <tcp_slowtmr+0x2f8>
 800fa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d06d      	beq.n	800fb7c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa2:	7d1b      	ldrb	r3, [r3, #20]
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	d03a      	beq.n	800fb1e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faae:	2b0c      	cmp	r3, #12
 800fab0:	bf28      	it	cs
 800fab2:	230c      	movcs	r3, #12
 800fab4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fabc:	10db      	asrs	r3, r3, #3
 800fabe:	b21b      	sxth	r3, r3
 800fac0:	461a      	mov	r2, r3
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fac8:	4413      	add	r3, r2
 800faca:	7efa      	ldrb	r2, [r7, #27]
 800facc:	4910      	ldr	r1, [pc, #64]	; (800fb10 <tcp_slowtmr+0x28c>)
 800face:	5c8a      	ldrb	r2, [r1, r2]
 800fad0:	4093      	lsls	r3, r2
 800fad2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fada:	4293      	cmp	r3, r2
 800fadc:	dc1a      	bgt.n	800fb14 <tcp_slowtmr+0x290>
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	b21a      	sxth	r2, r3
 800fae2:	e019      	b.n	800fb18 <tcp_slowtmr+0x294>
 800fae4:	20011bb0 	.word	0x20011bb0
 800fae8:	20011bc6 	.word	0x20011bc6
 800faec:	20011bbc 	.word	0x20011bbc
 800faf0:	0801c48c 	.word	0x0801c48c
 800faf4:	0801c7d0 	.word	0x0801c7d0
 800faf8:	0801c4d0 	.word	0x0801c4d0
 800fafc:	0801c7fc 	.word	0x0801c7fc
 800fb00:	0801c828 	.word	0x0801c828
 800fb04:	0801c858 	.word	0x0801c858
 800fb08:	0801c88c 	.word	0x0801c88c
 800fb0c:	0801e1fc 	.word	0x0801e1fc
 800fb10:	0801e1ec 	.word	0x0801e1ec
 800fb14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb20:	2200      	movs	r2, #0
 800fb22:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb30:	4293      	cmp	r3, r2
 800fb32:	bf28      	it	cs
 800fb34:	4613      	movcs	r3, r2
 800fb36:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fb38:	8a7b      	ldrh	r3, [r7, #18]
 800fb3a:	085b      	lsrs	r3, r3, #1
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d206      	bcs.n	800fb64 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb60:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	2200      	movs	r2, #0
 800fb72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fb76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb78:	f004 fd54 	bl	8014624 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b06      	cmp	r3, #6
 800fb82:	d111      	bne.n	800fba8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	8b5b      	ldrh	r3, [r3, #26]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d00b      	beq.n	800fba8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fb90:	4b9c      	ldr	r3, [pc, #624]	; (800fe04 <tcp_slowtmr+0x580>)
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	6a1b      	ldr	r3, [r3, #32]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	2b28      	cmp	r3, #40	; 0x28
 800fb9c:	d904      	bls.n	800fba8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fba2:	3301      	adds	r3, #1
 800fba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	7a5b      	ldrb	r3, [r3, #9]
 800fbac:	f003 0308 	and.w	r3, r3, #8
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d04a      	beq.n	800fc4a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fbb8:	2b04      	cmp	r3, #4
 800fbba:	d003      	beq.n	800fbc4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fbc0:	2b07      	cmp	r3, #7
 800fbc2:	d142      	bne.n	800fc4a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbc4:	4b8f      	ldr	r3, [pc, #572]	; (800fe04 <tcp_slowtmr+0x580>)
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fbd4:	4b8c      	ldr	r3, [pc, #560]	; (800fe08 <tcp_slowtmr+0x584>)
 800fbd6:	440b      	add	r3, r1
 800fbd8:	498c      	ldr	r1, [pc, #560]	; (800fe0c <tcp_slowtmr+0x588>)
 800fbda:	fba1 1303 	umull	r1, r3, r1, r3
 800fbde:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d90a      	bls.n	800fbfa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe8:	3301      	adds	r3, #1
 800fbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fbee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fbf8:	e027      	b.n	800fc4a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fbfa:	4b82      	ldr	r3, [pc, #520]	; (800fe04 <tcp_slowtmr+0x580>)
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc06:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc10:	4618      	mov	r0, r3
 800fc12:	4b7f      	ldr	r3, [pc, #508]	; (800fe10 <tcp_slowtmr+0x58c>)
 800fc14:	fb00 f303 	mul.w	r3, r0, r3
 800fc18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fc1a:	497c      	ldr	r1, [pc, #496]	; (800fe0c <tcp_slowtmr+0x588>)
 800fc1c:	fba1 1303 	umull	r1, r3, r1, r3
 800fc20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d911      	bls.n	800fc4a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fc26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc28:	f005 f812 	bl	8014c50 <tcp_keepalive>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fc32:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d107      	bne.n	800fc4a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fc40:	3301      	adds	r3, #1
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc46:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d011      	beq.n	800fc76 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fc52:	4b6c      	ldr	r3, [pc, #432]	; (800fe04 <tcp_slowtmr+0x580>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	1ad2      	subs	r2, r2, r3
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fc62:	4619      	mov	r1, r3
 800fc64:	460b      	mov	r3, r1
 800fc66:	005b      	lsls	r3, r3, #1
 800fc68:	440b      	add	r3, r1
 800fc6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d302      	bcc.n	800fc76 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fc70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc72:	f000 feab 	bl	80109cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	7d1b      	ldrb	r3, [r3, #20]
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	d10b      	bne.n	800fc96 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc7e:	4b61      	ldr	r3, [pc, #388]	; (800fe04 <tcp_slowtmr+0x580>)
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	2b28      	cmp	r3, #40	; 0x28
 800fc8a:	d904      	bls.n	800fc96 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc90:	3301      	adds	r3, #1
 800fc92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc98:	7d1b      	ldrb	r3, [r3, #20]
 800fc9a:	2b09      	cmp	r3, #9
 800fc9c:	d10b      	bne.n	800fcb6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fc9e:	4b59      	ldr	r3, [pc, #356]	; (800fe04 <tcp_slowtmr+0x580>)
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	2bf0      	cmp	r3, #240	; 0xf0
 800fcaa:	d904      	bls.n	800fcb6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fcac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d060      	beq.n	800fd80 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fcc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcc8:	f000 fccc 	bl	8010664 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d010      	beq.n	800fcf4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fcd2:	4b50      	ldr	r3, [pc, #320]	; (800fe14 <tcp_slowtmr+0x590>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d106      	bne.n	800fcea <tcp_slowtmr+0x466>
 800fcdc:	4b4e      	ldr	r3, [pc, #312]	; (800fe18 <tcp_slowtmr+0x594>)
 800fcde:	f240 526d 	movw	r2, #1389	; 0x56d
 800fce2:	494e      	ldr	r1, [pc, #312]	; (800fe1c <tcp_slowtmr+0x598>)
 800fce4:	484e      	ldr	r0, [pc, #312]	; (800fe20 <tcp_slowtmr+0x59c>)
 800fce6:	f008 f8a3 	bl	8017e30 <iprintf>
        prev->next = pcb->next;
 800fcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcec:	68da      	ldr	r2, [r3, #12]
 800fcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf0:	60da      	str	r2, [r3, #12]
 800fcf2:	e00f      	b.n	800fd14 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fcf4:	4b47      	ldr	r3, [pc, #284]	; (800fe14 <tcp_slowtmr+0x590>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d006      	beq.n	800fd0c <tcp_slowtmr+0x488>
 800fcfe:	4b46      	ldr	r3, [pc, #280]	; (800fe18 <tcp_slowtmr+0x594>)
 800fd00:	f240 5271 	movw	r2, #1393	; 0x571
 800fd04:	4947      	ldr	r1, [pc, #284]	; (800fe24 <tcp_slowtmr+0x5a0>)
 800fd06:	4846      	ldr	r0, [pc, #280]	; (800fe20 <tcp_slowtmr+0x59c>)
 800fd08:	f008 f892 	bl	8017e30 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	68db      	ldr	r3, [r3, #12]
 800fd10:	4a40      	ldr	r2, [pc, #256]	; (800fe14 <tcp_slowtmr+0x590>)
 800fd12:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fd14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d013      	beq.n	800fd44 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd22:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fd24:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd28:	3304      	adds	r3, #4
 800fd2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd2c:	8ad2      	ldrh	r2, [r2, #22]
 800fd2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd30:	8b09      	ldrh	r1, [r1, #24]
 800fd32:	9102      	str	r1, [sp, #8]
 800fd34:	9201      	str	r2, [sp, #4]
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	462b      	mov	r3, r5
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd40:	f004 fed2 	bl	8014ae8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	7d1b      	ldrb	r3, [r3, #20]
 800fd4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fd5a:	6838      	ldr	r0, [r7, #0]
 800fd5c:	f7fe ffa2 	bl	800eca4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fd60:	4b31      	ldr	r3, [pc, #196]	; (800fe28 <tcp_slowtmr+0x5a4>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d004      	beq.n	800fd76 <tcp_slowtmr+0x4f2>
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f06f 010c 	mvn.w	r1, #12
 800fd72:	68b8      	ldr	r0, [r7, #8]
 800fd74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fd76:	4b2c      	ldr	r3, [pc, #176]	; (800fe28 <tcp_slowtmr+0x5a4>)
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d037      	beq.n	800fdee <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fd7e:	e592      	b.n	800f8a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	7f1b      	ldrb	r3, [r3, #28]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	b2da      	uxtb	r2, r3
 800fd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	7f1a      	ldrb	r2, [r3, #28]
 800fd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9c:	7f5b      	ldrb	r3, [r3, #29]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d325      	bcc.n	800fdee <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	2200      	movs	r2, #0
 800fda6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fda8:	4b1f      	ldr	r3, [pc, #124]	; (800fe28 <tcp_slowtmr+0x5a4>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00b      	beq.n	800fdd0 <tcp_slowtmr+0x54c>
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdc0:	6912      	ldr	r2, [r2, #16]
 800fdc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4798      	blx	r3
 800fdc8:	4603      	mov	r3, r0
 800fdca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fdce:	e002      	b.n	800fdd6 <tcp_slowtmr+0x552>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fdd6:	4b14      	ldr	r3, [pc, #80]	; (800fe28 <tcp_slowtmr+0x5a4>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d000      	beq.n	800fde0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fdde:	e562      	b.n	800f8a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fde0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d102      	bne.n	800fdee <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdea:	f004 f8a7 	bl	8013f3c <tcp_output>
  while (pcb != NULL) {
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	f47f ad5e 	bne.w	800f8b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fdfa:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <tcp_slowtmr+0x5a8>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fe00:	e069      	b.n	800fed6 <tcp_slowtmr+0x652>
 800fe02:	bf00      	nop
 800fe04:	20011bb0 	.word	0x20011bb0
 800fe08:	000a4cb8 	.word	0x000a4cb8
 800fe0c:	10624dd3 	.word	0x10624dd3
 800fe10:	000124f8 	.word	0x000124f8
 800fe14:	20011bbc 	.word	0x20011bbc
 800fe18:	0801c48c 	.word	0x0801c48c
 800fe1c:	0801c8c4 	.word	0x0801c8c4
 800fe20:	0801c4d0 	.word	0x0801c4d0
 800fe24:	0801c8f0 	.word	0x0801c8f0
 800fe28:	20011bc4 	.word	0x20011bc4
 800fe2c:	20011bc0 	.word	0x20011bc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fe30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe32:	7d1b      	ldrb	r3, [r3, #20]
 800fe34:	2b0a      	cmp	r3, #10
 800fe36:	d006      	beq.n	800fe46 <tcp_slowtmr+0x5c2>
 800fe38:	4b2b      	ldr	r3, [pc, #172]	; (800fee8 <tcp_slowtmr+0x664>)
 800fe3a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fe3e:	492b      	ldr	r1, [pc, #172]	; (800feec <tcp_slowtmr+0x668>)
 800fe40:	482b      	ldr	r0, [pc, #172]	; (800fef0 <tcp_slowtmr+0x66c>)
 800fe42:	f007 fff5 	bl	8017e30 <iprintf>
    pcb_remove = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fe4c:	4b29      	ldr	r3, [pc, #164]	; (800fef4 <tcp_slowtmr+0x670>)
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe52:	6a1b      	ldr	r3, [r3, #32]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	2bf0      	cmp	r3, #240	; 0xf0
 800fe58:	d904      	bls.n	800fe64 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fe5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe5e:	3301      	adds	r3, #1
 800fe60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d02f      	beq.n	800fecc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fe6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe6e:	f000 fbf9 	bl	8010664 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d010      	beq.n	800fe9a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fe78:	4b1f      	ldr	r3, [pc, #124]	; (800fef8 <tcp_slowtmr+0x674>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d106      	bne.n	800fe90 <tcp_slowtmr+0x60c>
 800fe82:	4b19      	ldr	r3, [pc, #100]	; (800fee8 <tcp_slowtmr+0x664>)
 800fe84:	f240 52af 	movw	r2, #1455	; 0x5af
 800fe88:	491c      	ldr	r1, [pc, #112]	; (800fefc <tcp_slowtmr+0x678>)
 800fe8a:	4819      	ldr	r0, [pc, #100]	; (800fef0 <tcp_slowtmr+0x66c>)
 800fe8c:	f007 ffd0 	bl	8017e30 <iprintf>
        prev->next = pcb->next;
 800fe90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe92:	68da      	ldr	r2, [r3, #12]
 800fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe96:	60da      	str	r2, [r3, #12]
 800fe98:	e00f      	b.n	800feba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fe9a:	4b17      	ldr	r3, [pc, #92]	; (800fef8 <tcp_slowtmr+0x674>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d006      	beq.n	800feb2 <tcp_slowtmr+0x62e>
 800fea4:	4b10      	ldr	r3, [pc, #64]	; (800fee8 <tcp_slowtmr+0x664>)
 800fea6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800feaa:	4915      	ldr	r1, [pc, #84]	; (800ff00 <tcp_slowtmr+0x67c>)
 800feac:	4810      	ldr	r0, [pc, #64]	; (800fef0 <tcp_slowtmr+0x66c>)
 800feae:	f007 ffbf 	bl	8017e30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800feb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	4a10      	ldr	r2, [pc, #64]	; (800fef8 <tcp_slowtmr+0x674>)
 800feb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800feba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800febc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fec4:	69f8      	ldr	r0, [r7, #28]
 800fec6:	f7fe feed 	bl	800eca4 <tcp_free>
 800feca:	e004      	b.n	800fed6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1a9      	bne.n	800fe30 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fedc:	bf00      	nop
 800fede:	bf00      	nop
 800fee0:	3730      	adds	r7, #48	; 0x30
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bdb0      	pop	{r4, r5, r7, pc}
 800fee6:	bf00      	nop
 800fee8:	0801c48c 	.word	0x0801c48c
 800feec:	0801c91c 	.word	0x0801c91c
 800fef0:	0801c4d0 	.word	0x0801c4d0
 800fef4:	20011bb0 	.word	0x20011bb0
 800fef8:	20011bc0 	.word	0x20011bc0
 800fefc:	0801c94c 	.word	0x0801c94c
 800ff00:	0801c974 	.word	0x0801c974

0800ff04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ff0a:	4b2d      	ldr	r3, [pc, #180]	; (800ffc0 <tcp_fasttmr+0xbc>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	4b2b      	ldr	r3, [pc, #172]	; (800ffc0 <tcp_fasttmr+0xbc>)
 800ff14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ff16:	4b2b      	ldr	r3, [pc, #172]	; (800ffc4 <tcp_fasttmr+0xc0>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ff1c:	e048      	b.n	800ffb0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7f9a      	ldrb	r2, [r3, #30]
 800ff22:	4b27      	ldr	r3, [pc, #156]	; (800ffc0 <tcp_fasttmr+0xbc>)
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d03f      	beq.n	800ffaa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ff2a:	4b25      	ldr	r3, [pc, #148]	; (800ffc0 <tcp_fasttmr+0xbc>)
 800ff2c:	781a      	ldrb	r2, [r3, #0]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	8b5b      	ldrh	r3, [r3, #26]
 800ff36:	f003 0301 	and.w	r3, r3, #1
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d010      	beq.n	800ff60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	8b5b      	ldrh	r3, [r3, #26]
 800ff42:	f043 0302 	orr.w	r3, r3, #2
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f003 fff5 	bl	8013f3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8b5b      	ldrh	r3, [r3, #26]
 800ff56:	f023 0303 	bic.w	r3, r3, #3
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8b5b      	ldrh	r3, [r3, #26]
 800ff64:	f003 0308 	and.w	r3, r3, #8
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d009      	beq.n	800ff80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8b5b      	ldrh	r3, [r3, #26]
 800ff70:	f023 0308 	bic.w	r3, r3, #8
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff f826 	bl	800efcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00a      	beq.n	800ffa4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ff8e:	4b0e      	ldr	r3, [pc, #56]	; (800ffc8 <tcp_fasttmr+0xc4>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f819 	bl	800ffcc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ff9a:	4b0b      	ldr	r3, [pc, #44]	; (800ffc8 <tcp_fasttmr+0xc4>)
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d000      	beq.n	800ffa4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ffa2:	e7b8      	b.n	800ff16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	607b      	str	r3, [r7, #4]
 800ffa8:	e002      	b.n	800ffb0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1b3      	bne.n	800ff1e <tcp_fasttmr+0x1a>
    }
  }
}
 800ffb6:	bf00      	nop
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	20011bc6 	.word	0x20011bc6
 800ffc4:	20011bbc 	.word	0x20011bbc
 800ffc8:	20011bc4 	.word	0x20011bc4

0800ffcc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d109      	bne.n	800ffee <tcp_process_refused_data+0x22>
 800ffda:	4b37      	ldr	r3, [pc, #220]	; (80100b8 <tcp_process_refused_data+0xec>)
 800ffdc:	f240 6209 	movw	r2, #1545	; 0x609
 800ffe0:	4936      	ldr	r1, [pc, #216]	; (80100bc <tcp_process_refused_data+0xf0>)
 800ffe2:	4837      	ldr	r0, [pc, #220]	; (80100c0 <tcp_process_refused_data+0xf4>)
 800ffe4:	f007 ff24 	bl	8017e30 <iprintf>
 800ffe8:	f06f 030f 	mvn.w	r3, #15
 800ffec:	e060      	b.n	80100b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fff2:	7b5b      	ldrb	r3, [r3, #13]
 800fff4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fffa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010008:	2b00      	cmp	r3, #0
 801000a:	d00b      	beq.n	8010024 <tcp_process_refused_data+0x58>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6918      	ldr	r0, [r3, #16]
 8010016:	2300      	movs	r3, #0
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	6879      	ldr	r1, [r7, #4]
 801001c:	47a0      	blx	r4
 801001e:	4603      	mov	r3, r0
 8010020:	73fb      	strb	r3, [r7, #15]
 8010022:	e007      	b.n	8010034 <tcp_process_refused_data+0x68>
 8010024:	2300      	movs	r3, #0
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	6879      	ldr	r1, [r7, #4]
 801002a:	2000      	movs	r0, #0
 801002c:	f000 f8a4 	bl	8010178 <tcp_recv_null>
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d12a      	bne.n	8010092 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801003c:	7bbb      	ldrb	r3, [r7, #14]
 801003e:	f003 0320 	and.w	r3, r3, #32
 8010042:	2b00      	cmp	r3, #0
 8010044:	d033      	beq.n	80100ae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801004a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801004e:	d005      	beq.n	801005c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010054:	3301      	adds	r3, #1
 8010056:	b29a      	uxth	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00b      	beq.n	801007e <tcp_process_refused_data+0xb2>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6918      	ldr	r0, [r3, #16]
 8010070:	2300      	movs	r3, #0
 8010072:	2200      	movs	r2, #0
 8010074:	6879      	ldr	r1, [r7, #4]
 8010076:	47a0      	blx	r4
 8010078:	4603      	mov	r3, r0
 801007a:	73fb      	strb	r3, [r7, #15]
 801007c:	e001      	b.n	8010082 <tcp_process_refused_data+0xb6>
 801007e:	2300      	movs	r3, #0
 8010080:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010086:	f113 0f0d 	cmn.w	r3, #13
 801008a:	d110      	bne.n	80100ae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801008c:	f06f 030c 	mvn.w	r3, #12
 8010090:	e00e      	b.n	80100b0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010096:	f113 0f0d 	cmn.w	r3, #13
 801009a:	d102      	bne.n	80100a2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801009c:	f06f 030c 	mvn.w	r3, #12
 80100a0:	e006      	b.n	80100b0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	68ba      	ldr	r2, [r7, #8]
 80100a6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80100a8:	f06f 0304 	mvn.w	r3, #4
 80100ac:	e000      	b.n	80100b0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80100ae:	2300      	movs	r3, #0
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd90      	pop	{r4, r7, pc}
 80100b8:	0801c48c 	.word	0x0801c48c
 80100bc:	0801c99c 	.word	0x0801c99c
 80100c0:	0801c4d0 	.word	0x0801c4d0

080100c4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80100cc:	e007      	b.n	80100de <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f80a 	bl	80100ee <tcp_seg_free>
    seg = next;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d1f4      	bne.n	80100ce <tcp_segs_free+0xa>
  }
}
 80100e4:	bf00      	nop
 80100e6:	bf00      	nop
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b082      	sub	sp, #8
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00c      	beq.n	8010116 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d004      	beq.n	801010e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	4618      	mov	r0, r3
 801010a:	f7fe fb1f 	bl	800e74c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801010e:	6879      	ldr	r1, [r7, #4]
 8010110:	2002      	movs	r0, #2
 8010112:	f7fd fc7b 	bl	800da0c <memp_free>
  }
}
 8010116:	bf00      	nop
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
	...

08010120 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d106      	bne.n	801013c <tcp_seg_copy+0x1c>
 801012e:	4b0f      	ldr	r3, [pc, #60]	; (801016c <tcp_seg_copy+0x4c>)
 8010130:	f240 6282 	movw	r2, #1666	; 0x682
 8010134:	490e      	ldr	r1, [pc, #56]	; (8010170 <tcp_seg_copy+0x50>)
 8010136:	480f      	ldr	r0, [pc, #60]	; (8010174 <tcp_seg_copy+0x54>)
 8010138:	f007 fe7a 	bl	8017e30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801013c:	2002      	movs	r0, #2
 801013e:	f7fd fbef 	bl	800d920 <memp_malloc>
 8010142:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <tcp_seg_copy+0x2e>
    return NULL;
 801014a:	2300      	movs	r3, #0
 801014c:	e00a      	b.n	8010164 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801014e:	2210      	movs	r2, #16
 8010150:	6879      	ldr	r1, [r7, #4]
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f007 fda7 	bl	8017ca6 <memcpy>
  pbuf_ref(cseg->p);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	4618      	mov	r0, r3
 801015e:	f7fe fb9b 	bl	800e898 <pbuf_ref>
  return cseg;
 8010162:	68fb      	ldr	r3, [r7, #12]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	0801c48c 	.word	0x0801c48c
 8010170:	0801c9e0 	.word	0x0801c9e0
 8010174:	0801c4d0 	.word	0x0801c4d0

08010178 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	607a      	str	r2, [r7, #4]
 8010184:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d109      	bne.n	80101a0 <tcp_recv_null+0x28>
 801018c:	4b12      	ldr	r3, [pc, #72]	; (80101d8 <tcp_recv_null+0x60>)
 801018e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010192:	4912      	ldr	r1, [pc, #72]	; (80101dc <tcp_recv_null+0x64>)
 8010194:	4812      	ldr	r0, [pc, #72]	; (80101e0 <tcp_recv_null+0x68>)
 8010196:	f007 fe4b 	bl	8017e30 <iprintf>
 801019a:	f06f 030f 	mvn.w	r3, #15
 801019e:	e016      	b.n	80101ce <tcp_recv_null+0x56>

  if (p != NULL) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d009      	beq.n	80101ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	891b      	ldrh	r3, [r3, #8]
 80101aa:	4619      	mov	r1, r3
 80101ac:	68b8      	ldr	r0, [r7, #8]
 80101ae:	f7ff f9bb 	bl	800f528 <tcp_recved>
    pbuf_free(p);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7fe faca 	bl	800e74c <pbuf_free>
 80101b8:	e008      	b.n	80101cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80101ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d104      	bne.n	80101cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80101c2:	68b8      	ldr	r0, [r7, #8]
 80101c4:	f7fe ff6c 	bl	800f0a0 <tcp_close>
 80101c8:	4603      	mov	r3, r0
 80101ca:	e000      	b.n	80101ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80101cc:	2300      	movs	r3, #0
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	0801c48c 	.word	0x0801c48c
 80101dc:	0801c9fc 	.word	0x0801c9fc
 80101e0:	0801c4d0 	.word	0x0801c4d0

080101e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4603      	mov	r3, r0
 80101ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80101ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	db01      	blt.n	80101fa <tcp_kill_prio+0x16>
 80101f6:	79fb      	ldrb	r3, [r7, #7]
 80101f8:	e000      	b.n	80101fc <tcp_kill_prio+0x18>
 80101fa:	237f      	movs	r3, #127	; 0x7f
 80101fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80101fe:	7afb      	ldrb	r3, [r7, #11]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d034      	beq.n	801026e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010204:	7afb      	ldrb	r3, [r7, #11]
 8010206:	3b01      	subs	r3, #1
 8010208:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801020a:	2300      	movs	r3, #0
 801020c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801020e:	2300      	movs	r3, #0
 8010210:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010212:	4b19      	ldr	r3, [pc, #100]	; (8010278 <tcp_kill_prio+0x94>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	617b      	str	r3, [r7, #20]
 8010218:	e01f      	b.n	801025a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	7d5b      	ldrb	r3, [r3, #21]
 801021e:	7afa      	ldrb	r2, [r7, #11]
 8010220:	429a      	cmp	r2, r3
 8010222:	d80c      	bhi.n	801023e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010228:	7afa      	ldrb	r2, [r7, #11]
 801022a:	429a      	cmp	r2, r3
 801022c:	d112      	bne.n	8010254 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801022e:	4b13      	ldr	r3, [pc, #76]	; (801027c <tcp_kill_prio+0x98>)
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	6a1b      	ldr	r3, [r3, #32]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	429a      	cmp	r2, r3
 801023c:	d80a      	bhi.n	8010254 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801023e:	4b0f      	ldr	r3, [pc, #60]	; (801027c <tcp_kill_prio+0x98>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	6a1b      	ldr	r3, [r3, #32]
 8010246:	1ad3      	subs	r3, r2, r3
 8010248:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	7d5b      	ldrb	r3, [r3, #21]
 8010252:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	617b      	str	r3, [r7, #20]
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1dc      	bne.n	801021a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d004      	beq.n	8010270 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010266:	6938      	ldr	r0, [r7, #16]
 8010268:	f7ff f860 	bl	800f32c <tcp_abort>
 801026c:	e000      	b.n	8010270 <tcp_kill_prio+0x8c>
    return;
 801026e:	bf00      	nop
  }
}
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	20011bbc 	.word	0x20011bbc
 801027c:	20011bb0 	.word	0x20011bb0

08010280 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0
 8010286:	4603      	mov	r3, r0
 8010288:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801028a:	79fb      	ldrb	r3, [r7, #7]
 801028c:	2b08      	cmp	r3, #8
 801028e:	d009      	beq.n	80102a4 <tcp_kill_state+0x24>
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2b09      	cmp	r3, #9
 8010294:	d006      	beq.n	80102a4 <tcp_kill_state+0x24>
 8010296:	4b1a      	ldr	r3, [pc, #104]	; (8010300 <tcp_kill_state+0x80>)
 8010298:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801029c:	4919      	ldr	r1, [pc, #100]	; (8010304 <tcp_kill_state+0x84>)
 801029e:	481a      	ldr	r0, [pc, #104]	; (8010308 <tcp_kill_state+0x88>)
 80102a0:	f007 fdc6 	bl	8017e30 <iprintf>

  inactivity = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102a8:	2300      	movs	r3, #0
 80102aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ac:	4b17      	ldr	r3, [pc, #92]	; (801030c <tcp_kill_state+0x8c>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	617b      	str	r3, [r7, #20]
 80102b2:	e017      	b.n	80102e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	7d1b      	ldrb	r3, [r3, #20]
 80102b8:	79fa      	ldrb	r2, [r7, #7]
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d10f      	bne.n	80102de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80102be:	4b14      	ldr	r3, [pc, #80]	; (8010310 <tcp_kill_state+0x90>)
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	68fa      	ldr	r2, [r7, #12]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d807      	bhi.n	80102de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80102ce:	4b10      	ldr	r3, [pc, #64]	; (8010310 <tcp_kill_state+0x90>)
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	6a1b      	ldr	r3, [r3, #32]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	617b      	str	r3, [r7, #20]
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d1e4      	bne.n	80102b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d003      	beq.n	80102f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80102f0:	2100      	movs	r1, #0
 80102f2:	6938      	ldr	r0, [r7, #16]
 80102f4:	f7fe ff5c 	bl	800f1b0 <tcp_abandon>
  }
}
 80102f8:	bf00      	nop
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	0801c48c 	.word	0x0801c48c
 8010304:	0801ca18 	.word	0x0801ca18
 8010308:	0801c4d0 	.word	0x0801c4d0
 801030c:	20011bbc 	.word	0x20011bbc
 8010310:	20011bb0 	.word	0x20011bb0

08010314 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801031e:	2300      	movs	r3, #0
 8010320:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010322:	4b12      	ldr	r3, [pc, #72]	; (801036c <tcp_kill_timewait+0x58>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	60fb      	str	r3, [r7, #12]
 8010328:	e012      	b.n	8010350 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801032a:	4b11      	ldr	r3, [pc, #68]	; (8010370 <tcp_kill_timewait+0x5c>)
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	6a1b      	ldr	r3, [r3, #32]
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	429a      	cmp	r2, r3
 8010338:	d807      	bhi.n	801034a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801033a:	4b0d      	ldr	r3, [pc, #52]	; (8010370 <tcp_kill_timewait+0x5c>)
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6a1b      	ldr	r3, [r3, #32]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	68db      	ldr	r3, [r3, #12]
 801034e:	60fb      	str	r3, [r7, #12]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1e9      	bne.n	801032a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d002      	beq.n	8010362 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801035c:	68b8      	ldr	r0, [r7, #8]
 801035e:	f7fe ffe5 	bl	800f32c <tcp_abort>
  }
}
 8010362:	bf00      	nop
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	20011bc0 	.word	0x20011bc0
 8010370:	20011bb0 	.word	0x20011bb0

08010374 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b082      	sub	sp, #8
 8010378:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801037a:	4b10      	ldr	r3, [pc, #64]	; (80103bc <tcp_handle_closepend+0x48>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010380:	e014      	b.n	80103ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68db      	ldr	r3, [r3, #12]
 8010386:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	8b5b      	ldrh	r3, [r3, #26]
 801038c:	f003 0308 	and.w	r3, r3, #8
 8010390:	2b00      	cmp	r3, #0
 8010392:	d009      	beq.n	80103a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	8b5b      	ldrh	r3, [r3, #26]
 8010398:	f023 0308 	bic.w	r3, r3, #8
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7fe fe12 	bl	800efcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1e7      	bne.n	8010382 <tcp_handle_closepend+0xe>
  }
}
 80103b2:	bf00      	nop
 80103b4:	bf00      	nop
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20011bbc 	.word	0x20011bbc

080103c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103ca:	2000      	movs	r0, #0
 80103cc:	f7fd faa8 	bl	800d920 <memp_malloc>
 80103d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d126      	bne.n	8010426 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80103d8:	f7ff ffcc 	bl	8010374 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80103dc:	f7ff ff9a 	bl	8010314 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103e0:	2000      	movs	r0, #0
 80103e2:	f7fd fa9d 	bl	800d920 <memp_malloc>
 80103e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d11b      	bne.n	8010426 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80103ee:	2009      	movs	r0, #9
 80103f0:	f7ff ff46 	bl	8010280 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80103f4:	2000      	movs	r0, #0
 80103f6:	f7fd fa93 	bl	800d920 <memp_malloc>
 80103fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d111      	bne.n	8010426 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010402:	2008      	movs	r0, #8
 8010404:	f7ff ff3c 	bl	8010280 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010408:	2000      	movs	r0, #0
 801040a:	f7fd fa89 	bl	800d920 <memp_malloc>
 801040e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d107      	bne.n	8010426 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fee3 	bl	80101e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801041e:	2000      	movs	r0, #0
 8010420:	f7fd fa7e 	bl	800d920 <memp_malloc>
 8010424:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d03f      	beq.n	80104ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801042c:	229c      	movs	r2, #156	; 0x9c
 801042e:	2100      	movs	r1, #0
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f007 fc60 	bl	8017cf6 <memset>
    pcb->prio = prio;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	79fa      	ldrb	r2, [r7, #7]
 801043a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010442:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801044c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	22ff      	movs	r2, #255	; 0xff
 801045a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010462:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2206      	movs	r2, #6
 8010468:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	2206      	movs	r2, #6
 8010470:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010478:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2201      	movs	r2, #1
 801047e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010482:	4b0d      	ldr	r3, [pc, #52]	; (80104b8 <tcp_alloc+0xf8>)
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801048a:	4b0c      	ldr	r3, [pc, #48]	; (80104bc <tcp_alloc+0xfc>)
 801048c:	781a      	ldrb	r2, [r3, #0]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010498:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	4a08      	ldr	r2, [pc, #32]	; (80104c0 <tcp_alloc+0x100>)
 80104a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	4a07      	ldr	r2, [pc, #28]	; (80104c4 <tcp_alloc+0x104>)
 80104a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80104ac:	68fb      	ldr	r3, [r7, #12]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20011bb0 	.word	0x20011bb0
 80104bc:	20011bc6 	.word	0x20011bc6
 80104c0:	08010179 	.word	0x08010179
 80104c4:	006ddd00 	.word	0x006ddd00

080104c8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80104d2:	2040      	movs	r0, #64	; 0x40
 80104d4:	f7ff ff74 	bl	80103c0 <tcp_alloc>
 80104d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80104da:	68fb      	ldr	r3, [r7, #12]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d002      	beq.n	80104fa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	611a      	str	r2, [r3, #16]
  }
}
 80104fa:	bf00      	nop
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr
	...

08010508 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00e      	beq.n	8010536 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	7d1b      	ldrb	r3, [r3, #20]
 801051c:	2b01      	cmp	r3, #1
 801051e:	d106      	bne.n	801052e <tcp_recv+0x26>
 8010520:	4b07      	ldr	r3, [pc, #28]	; (8010540 <tcp_recv+0x38>)
 8010522:	f240 72df 	movw	r2, #2015	; 0x7df
 8010526:	4907      	ldr	r1, [pc, #28]	; (8010544 <tcp_recv+0x3c>)
 8010528:	4807      	ldr	r0, [pc, #28]	; (8010548 <tcp_recv+0x40>)
 801052a:	f007 fc81 	bl	8017e30 <iprintf>
    pcb->recv = recv;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010536:	bf00      	nop
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
 801053e:	bf00      	nop
 8010540:	0801c48c 	.word	0x0801c48c
 8010544:	0801ca28 	.word	0x0801ca28
 8010548:	0801c4d0 	.word	0x0801c4d0

0801054c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00e      	beq.n	801057a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	7d1b      	ldrb	r3, [r3, #20]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d106      	bne.n	8010572 <tcp_sent+0x26>
 8010564:	4b07      	ldr	r3, [pc, #28]	; (8010584 <tcp_sent+0x38>)
 8010566:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801056a:	4907      	ldr	r1, [pc, #28]	; (8010588 <tcp_sent+0x3c>)
 801056c:	4807      	ldr	r0, [pc, #28]	; (801058c <tcp_sent+0x40>)
 801056e:	f007 fc5f 	bl	8017e30 <iprintf>
    pcb->sent = sent;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	683a      	ldr	r2, [r7, #0]
 8010576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801057a:	bf00      	nop
 801057c:	3708      	adds	r7, #8
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
 8010582:	bf00      	nop
 8010584:	0801c48c 	.word	0x0801c48c
 8010588:	0801ca50 	.word	0x0801ca50
 801058c:	0801c4d0 	.word	0x0801c4d0

08010590 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00e      	beq.n	80105be <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d106      	bne.n	80105b6 <tcp_err+0x26>
 80105a8:	4b07      	ldr	r3, [pc, #28]	; (80105c8 <tcp_err+0x38>)
 80105aa:	f640 020d 	movw	r2, #2061	; 0x80d
 80105ae:	4907      	ldr	r1, [pc, #28]	; (80105cc <tcp_err+0x3c>)
 80105b0:	4807      	ldr	r0, [pc, #28]	; (80105d0 <tcp_err+0x40>)
 80105b2:	f007 fc3d 	bl	8017e30 <iprintf>
    pcb->errf = err;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80105be:	bf00      	nop
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	0801c48c 	.word	0x0801c48c
 80105cc:	0801ca78 	.word	0x0801ca78
 80105d0:	0801c4d0 	.word	0x0801c4d0

080105d4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d008      	beq.n	80105f6 <tcp_accept+0x22>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	7d1b      	ldrb	r3, [r3, #20]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d104      	bne.n	80105f6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	619a      	str	r2, [r3, #24]
  }
}
 80105f6:	bf00      	nop
 80105f8:	3714      	adds	r7, #20
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
	...

08010604 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	4613      	mov	r3, r2
 8010610:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d107      	bne.n	8010628 <tcp_poll+0x24>
 8010618:	4b0e      	ldr	r3, [pc, #56]	; (8010654 <tcp_poll+0x50>)
 801061a:	f640 023d 	movw	r2, #2109	; 0x83d
 801061e:	490e      	ldr	r1, [pc, #56]	; (8010658 <tcp_poll+0x54>)
 8010620:	480e      	ldr	r0, [pc, #56]	; (801065c <tcp_poll+0x58>)
 8010622:	f007 fc05 	bl	8017e30 <iprintf>
 8010626:	e011      	b.n	801064c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	7d1b      	ldrb	r3, [r3, #20]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d106      	bne.n	801063e <tcp_poll+0x3a>
 8010630:	4b08      	ldr	r3, [pc, #32]	; (8010654 <tcp_poll+0x50>)
 8010632:	f640 023e 	movw	r2, #2110	; 0x83e
 8010636:	490a      	ldr	r1, [pc, #40]	; (8010660 <tcp_poll+0x5c>)
 8010638:	4808      	ldr	r0, [pc, #32]	; (801065c <tcp_poll+0x58>)
 801063a:	f007 fbf9 	bl	8017e30 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	79fa      	ldrb	r2, [r7, #7]
 801064a:	775a      	strb	r2, [r3, #29]
}
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	0801c48c 	.word	0x0801c48c
 8010658:	0801caa0 	.word	0x0801caa0
 801065c:	0801c4d0 	.word	0x0801c4d0
 8010660:	0801cab8 	.word	0x0801cab8

08010664 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d107      	bne.n	8010682 <tcp_pcb_purge+0x1e>
 8010672:	4b21      	ldr	r3, [pc, #132]	; (80106f8 <tcp_pcb_purge+0x94>)
 8010674:	f640 0251 	movw	r2, #2129	; 0x851
 8010678:	4920      	ldr	r1, [pc, #128]	; (80106fc <tcp_pcb_purge+0x98>)
 801067a:	4821      	ldr	r0, [pc, #132]	; (8010700 <tcp_pcb_purge+0x9c>)
 801067c:	f007 fbd8 	bl	8017e30 <iprintf>
 8010680:	e037      	b.n	80106f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	7d1b      	ldrb	r3, [r3, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d033      	beq.n	80106f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801068e:	2b0a      	cmp	r3, #10
 8010690:	d02f      	beq.n	80106f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010696:	2b01      	cmp	r3, #1
 8010698:	d02b      	beq.n	80106f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d007      	beq.n	80106b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fe f850 	bl	800e74c <pbuf_free>
      pcb->refused_data = NULL;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 f986 	bl	80109cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7ff fcf9 	bl	80100c4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7ff fcf4 	bl	80100c4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	0801c48c 	.word	0x0801c48c
 80106fc:	0801cad8 	.word	0x0801cad8
 8010700:	0801c4d0 	.word	0x0801c4d0

08010704 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d106      	bne.n	8010722 <tcp_pcb_remove+0x1e>
 8010714:	4b3e      	ldr	r3, [pc, #248]	; (8010810 <tcp_pcb_remove+0x10c>)
 8010716:	f640 0283 	movw	r2, #2179	; 0x883
 801071a:	493e      	ldr	r1, [pc, #248]	; (8010814 <tcp_pcb_remove+0x110>)
 801071c:	483e      	ldr	r0, [pc, #248]	; (8010818 <tcp_pcb_remove+0x114>)
 801071e:	f007 fb87 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d106      	bne.n	8010736 <tcp_pcb_remove+0x32>
 8010728:	4b39      	ldr	r3, [pc, #228]	; (8010810 <tcp_pcb_remove+0x10c>)
 801072a:	f640 0284 	movw	r2, #2180	; 0x884
 801072e:	493b      	ldr	r1, [pc, #236]	; (801081c <tcp_pcb_remove+0x118>)
 8010730:	4839      	ldr	r0, [pc, #228]	; (8010818 <tcp_pcb_remove+0x114>)
 8010732:	f007 fb7d 	bl	8017e30 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	d105      	bne.n	801074c <tcp_pcb_remove+0x48>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	68da      	ldr	r2, [r3, #12]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	e013      	b.n	8010774 <tcp_pcb_remove+0x70>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	60fb      	str	r3, [r7, #12]
 8010752:	e00c      	b.n	801076e <tcp_pcb_remove+0x6a>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	683a      	ldr	r2, [r7, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	d104      	bne.n	8010768 <tcp_pcb_remove+0x64>
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	68da      	ldr	r2, [r3, #12]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	60da      	str	r2, [r3, #12]
 8010766:	e005      	b.n	8010774 <tcp_pcb_remove+0x70>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	60fb      	str	r3, [r7, #12]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1ef      	bne.n	8010754 <tcp_pcb_remove+0x50>
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	2200      	movs	r2, #0
 8010778:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801077a:	6838      	ldr	r0, [r7, #0]
 801077c:	f7ff ff72 	bl	8010664 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	7d1b      	ldrb	r3, [r3, #20]
 8010784:	2b0a      	cmp	r3, #10
 8010786:	d013      	beq.n	80107b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801078c:	2b01      	cmp	r3, #1
 801078e:	d00f      	beq.n	80107b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	8b5b      	ldrh	r3, [r3, #26]
 8010794:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010798:	2b00      	cmp	r3, #0
 801079a:	d009      	beq.n	80107b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	8b5b      	ldrh	r3, [r3, #26]
 80107a0:	f043 0302 	orr.w	r3, r3, #2
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80107aa:	6838      	ldr	r0, [r7, #0]
 80107ac:	f003 fbc6 	bl	8013f3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	7d1b      	ldrb	r3, [r3, #20]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d020      	beq.n	80107fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d006      	beq.n	80107ce <tcp_pcb_remove+0xca>
 80107c0:	4b13      	ldr	r3, [pc, #76]	; (8010810 <tcp_pcb_remove+0x10c>)
 80107c2:	f640 0293 	movw	r2, #2195	; 0x893
 80107c6:	4916      	ldr	r1, [pc, #88]	; (8010820 <tcp_pcb_remove+0x11c>)
 80107c8:	4813      	ldr	r0, [pc, #76]	; (8010818 <tcp_pcb_remove+0x114>)
 80107ca:	f007 fb31 	bl	8017e30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d006      	beq.n	80107e4 <tcp_pcb_remove+0xe0>
 80107d6:	4b0e      	ldr	r3, [pc, #56]	; (8010810 <tcp_pcb_remove+0x10c>)
 80107d8:	f640 0294 	movw	r2, #2196	; 0x894
 80107dc:	4911      	ldr	r1, [pc, #68]	; (8010824 <tcp_pcb_remove+0x120>)
 80107de:	480e      	ldr	r0, [pc, #56]	; (8010818 <tcp_pcb_remove+0x114>)
 80107e0:	f007 fb26 	bl	8017e30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d006      	beq.n	80107fa <tcp_pcb_remove+0xf6>
 80107ec:	4b08      	ldr	r3, [pc, #32]	; (8010810 <tcp_pcb_remove+0x10c>)
 80107ee:	f640 0296 	movw	r2, #2198	; 0x896
 80107f2:	490d      	ldr	r1, [pc, #52]	; (8010828 <tcp_pcb_remove+0x124>)
 80107f4:	4808      	ldr	r0, [pc, #32]	; (8010818 <tcp_pcb_remove+0x114>)
 80107f6:	f007 fb1b 	bl	8017e30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	2200      	movs	r2, #0
 80107fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	2200      	movs	r2, #0
 8010804:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010806:	bf00      	nop
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	0801c48c 	.word	0x0801c48c
 8010814:	0801caf4 	.word	0x0801caf4
 8010818:	0801c4d0 	.word	0x0801c4d0
 801081c:	0801cb10 	.word	0x0801cb10
 8010820:	0801cb30 	.word	0x0801cb30
 8010824:	0801cb48 	.word	0x0801cb48
 8010828:	0801cb64 	.word	0x0801cb64

0801082c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d106      	bne.n	8010848 <tcp_next_iss+0x1c>
 801083a:	4b0a      	ldr	r3, [pc, #40]	; (8010864 <tcp_next_iss+0x38>)
 801083c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010840:	4909      	ldr	r1, [pc, #36]	; (8010868 <tcp_next_iss+0x3c>)
 8010842:	480a      	ldr	r0, [pc, #40]	; (801086c <tcp_next_iss+0x40>)
 8010844:	f007 faf4 	bl	8017e30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010848:	4b09      	ldr	r3, [pc, #36]	; (8010870 <tcp_next_iss+0x44>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	4b09      	ldr	r3, [pc, #36]	; (8010874 <tcp_next_iss+0x48>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4413      	add	r3, r2
 8010852:	4a07      	ldr	r2, [pc, #28]	; (8010870 <tcp_next_iss+0x44>)
 8010854:	6013      	str	r3, [r2, #0]
  return iss;
 8010856:	4b06      	ldr	r3, [pc, #24]	; (8010870 <tcp_next_iss+0x44>)
 8010858:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801085a:	4618      	mov	r0, r3
 801085c:	3708      	adds	r7, #8
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	0801c48c 	.word	0x0801c48c
 8010868:	0801cb7c 	.word	0x0801cb7c
 801086c:	0801c4d0 	.word	0x0801c4d0
 8010870:	20000028 	.word	0x20000028
 8010874:	20011bb0 	.word	0x20011bb0

08010878 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d106      	bne.n	801089a <tcp_eff_send_mss_netif+0x22>
 801088c:	4b14      	ldr	r3, [pc, #80]	; (80108e0 <tcp_eff_send_mss_netif+0x68>)
 801088e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010892:	4914      	ldr	r1, [pc, #80]	; (80108e4 <tcp_eff_send_mss_netif+0x6c>)
 8010894:	4814      	ldr	r0, [pc, #80]	; (80108e8 <tcp_eff_send_mss_netif+0x70>)
 8010896:	f007 facb 	bl	8017e30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80108a0:	89fb      	ldrh	r3, [r7, #14]
 80108a2:	e019      	b.n	80108d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80108a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80108aa:	8afb      	ldrh	r3, [r7, #22]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d012      	beq.n	80108d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80108b0:	2328      	movs	r3, #40	; 0x28
 80108b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80108b4:	8afa      	ldrh	r2, [r7, #22]
 80108b6:	8abb      	ldrh	r3, [r7, #20]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d904      	bls.n	80108c6 <tcp_eff_send_mss_netif+0x4e>
 80108bc:	8afa      	ldrh	r2, [r7, #22]
 80108be:	8abb      	ldrh	r3, [r7, #20]
 80108c0:	1ad3      	subs	r3, r2, r3
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	e000      	b.n	80108c8 <tcp_eff_send_mss_netif+0x50>
 80108c6:	2300      	movs	r3, #0
 80108c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80108ca:	8a7a      	ldrh	r2, [r7, #18]
 80108cc:	89fb      	ldrh	r3, [r7, #14]
 80108ce:	4293      	cmp	r3, r2
 80108d0:	bf28      	it	cs
 80108d2:	4613      	movcs	r3, r2
 80108d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80108d6:	89fb      	ldrh	r3, [r7, #14]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	0801c48c 	.word	0x0801c48c
 80108e4:	0801cb98 	.word	0x0801cb98
 80108e8:	0801c4d0 	.word	0x0801c4d0

080108ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d119      	bne.n	8010934 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010900:	4b10      	ldr	r3, [pc, #64]	; (8010944 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010902:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010906:	4910      	ldr	r1, [pc, #64]	; (8010948 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010908:	4810      	ldr	r0, [pc, #64]	; (801094c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801090a:	f007 fa91 	bl	8017e30 <iprintf>

  while (pcb != NULL) {
 801090e:	e011      	b.n	8010934 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	d108      	bne.n	801092e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f7fe fd02 	bl	800f32c <tcp_abort>
      pcb = next;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	e002      	b.n	8010934 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1ea      	bne.n	8010910 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801093a:	bf00      	nop
 801093c:	bf00      	nop
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	0801c48c 	.word	0x0801c48c
 8010948:	0801cbc0 	.word	0x0801cbc0
 801094c:	0801c4d0 	.word	0x0801c4d0

08010950 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d02a      	beq.n	80109b6 <tcp_netif_ip_addr_changed+0x66>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d026      	beq.n	80109b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010968:	4b15      	ldr	r3, [pc, #84]	; (80109c0 <tcp_netif_ip_addr_changed+0x70>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f7ff ffbc 	bl	80108ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010974:	4b13      	ldr	r3, [pc, #76]	; (80109c4 <tcp_netif_ip_addr_changed+0x74>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4619      	mov	r1, r3
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7ff ffb6 	bl	80108ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d017      	beq.n	80109b6 <tcp_netif_ip_addr_changed+0x66>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d013      	beq.n	80109b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801098e:	4b0e      	ldr	r3, [pc, #56]	; (80109c8 <tcp_netif_ip_addr_changed+0x78>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	60fb      	str	r3, [r7, #12]
 8010994:	e00c      	b.n	80109b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d103      	bne.n	80109aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	60fb      	str	r3, [r7, #12]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1ef      	bne.n	8010996 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80109b6:	bf00      	nop
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20011bbc 	.word	0x20011bbc
 80109c4:	20011bb4 	.word	0x20011bb4
 80109c8:	20011bb8 	.word	0x20011bb8

080109cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d007      	beq.n	80109ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7ff fb6f 	bl	80100c4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80109ec:	bf00      	nop
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80109f4:	b590      	push	{r4, r7, lr}
 80109f6:	b08d      	sub	sp, #52	; 0x34
 80109f8:	af04      	add	r7, sp, #16
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d105      	bne.n	8010a10 <tcp_input+0x1c>
 8010a04:	4b9b      	ldr	r3, [pc, #620]	; (8010c74 <tcp_input+0x280>)
 8010a06:	2283      	movs	r2, #131	; 0x83
 8010a08:	499b      	ldr	r1, [pc, #620]	; (8010c78 <tcp_input+0x284>)
 8010a0a:	489c      	ldr	r0, [pc, #624]	; (8010c7c <tcp_input+0x288>)
 8010a0c:	f007 fa10 	bl	8017e30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	4a9a      	ldr	r2, [pc, #616]	; (8010c80 <tcp_input+0x28c>)
 8010a16:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	895b      	ldrh	r3, [r3, #10]
 8010a1c:	2b13      	cmp	r3, #19
 8010a1e:	f240 83d1 	bls.w	80111c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a22:	4b98      	ldr	r3, [pc, #608]	; (8010c84 <tcp_input+0x290>)
 8010a24:	695b      	ldr	r3, [r3, #20]
 8010a26:	4a97      	ldr	r2, [pc, #604]	; (8010c84 <tcp_input+0x290>)
 8010a28:	6812      	ldr	r2, [r2, #0]
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f005 fefd 	bl	801682c <ip4_addr_isbroadcast_u32>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f040 83c7 	bne.w	80111c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010a3a:	4b92      	ldr	r3, [pc, #584]	; (8010c84 <tcp_input+0x290>)
 8010a3c:	695b      	ldr	r3, [r3, #20]
 8010a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010a42:	2be0      	cmp	r3, #224	; 0xe0
 8010a44:	f000 83c0 	beq.w	80111c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010a48:	4b8d      	ldr	r3, [pc, #564]	; (8010c80 <tcp_input+0x28c>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fc f975 	bl	800cd40 <lwip_htons>
 8010a56:	4603      	mov	r3, r0
 8010a58:	0b1b      	lsrs	r3, r3, #12
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010a62:	7cbb      	ldrb	r3, [r7, #18]
 8010a64:	2b13      	cmp	r3, #19
 8010a66:	f240 83b1 	bls.w	80111cc <tcp_input+0x7d8>
 8010a6a:	7cbb      	ldrb	r3, [r7, #18]
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	891b      	ldrh	r3, [r3, #8]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	f200 83aa 	bhi.w	80111cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010a78:	7cbb      	ldrb	r3, [r7, #18]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	3b14      	subs	r3, #20
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	4b81      	ldr	r3, [pc, #516]	; (8010c88 <tcp_input+0x294>)
 8010a82:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010a84:	4b81      	ldr	r3, [pc, #516]	; (8010c8c <tcp_input+0x298>)
 8010a86:	2200      	movs	r2, #0
 8010a88:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	895a      	ldrh	r2, [r3, #10]
 8010a8e:	7cbb      	ldrb	r3, [r7, #18]
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d309      	bcc.n	8010aaa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010a96:	4b7c      	ldr	r3, [pc, #496]	; (8010c88 <tcp_input+0x294>)
 8010a98:	881a      	ldrh	r2, [r3, #0]
 8010a9a:	4b7d      	ldr	r3, [pc, #500]	; (8010c90 <tcp_input+0x29c>)
 8010a9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010a9e:	7cbb      	ldrb	r3, [r7, #18]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7fd fdcc 	bl	800e640 <pbuf_remove_header>
 8010aa8:	e04e      	b.n	8010b48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d105      	bne.n	8010abe <tcp_input+0xca>
 8010ab2:	4b70      	ldr	r3, [pc, #448]	; (8010c74 <tcp_input+0x280>)
 8010ab4:	22c2      	movs	r2, #194	; 0xc2
 8010ab6:	4977      	ldr	r1, [pc, #476]	; (8010c94 <tcp_input+0x2a0>)
 8010ab8:	4870      	ldr	r0, [pc, #448]	; (8010c7c <tcp_input+0x288>)
 8010aba:	f007 f9b9 	bl	8017e30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010abe:	2114      	movs	r1, #20
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7fd fdbd 	bl	800e640 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	895a      	ldrh	r2, [r3, #10]
 8010aca:	4b71      	ldr	r3, [pc, #452]	; (8010c90 <tcp_input+0x29c>)
 8010acc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010ace:	4b6e      	ldr	r3, [pc, #440]	; (8010c88 <tcp_input+0x294>)
 8010ad0:	881a      	ldrh	r2, [r3, #0]
 8010ad2:	4b6f      	ldr	r3, [pc, #444]	; (8010c90 <tcp_input+0x29c>)
 8010ad4:	881b      	ldrh	r3, [r3, #0]
 8010ad6:	1ad3      	subs	r3, r2, r3
 8010ad8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010ada:	4b6d      	ldr	r3, [pc, #436]	; (8010c90 <tcp_input+0x29c>)
 8010adc:	881b      	ldrh	r3, [r3, #0]
 8010ade:	4619      	mov	r1, r3
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7fd fdad 	bl	800e640 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	895b      	ldrh	r3, [r3, #10]
 8010aec:	8a3a      	ldrh	r2, [r7, #16]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	f200 836e 	bhi.w	80111d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	4a64      	ldr	r2, [pc, #400]	; (8010c8c <tcp_input+0x298>)
 8010afc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	8a3a      	ldrh	r2, [r7, #16]
 8010b04:	4611      	mov	r1, r2
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7fd fd9a 	bl	800e640 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	891a      	ldrh	r2, [r3, #8]
 8010b10:	8a3b      	ldrh	r3, [r7, #16]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	895b      	ldrh	r3, [r3, #10]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d005      	beq.n	8010b2e <tcp_input+0x13a>
 8010b22:	4b54      	ldr	r3, [pc, #336]	; (8010c74 <tcp_input+0x280>)
 8010b24:	22df      	movs	r2, #223	; 0xdf
 8010b26:	495c      	ldr	r1, [pc, #368]	; (8010c98 <tcp_input+0x2a4>)
 8010b28:	4854      	ldr	r0, [pc, #336]	; (8010c7c <tcp_input+0x288>)
 8010b2a:	f007 f981 	bl	8017e30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	891a      	ldrh	r2, [r3, #8]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d005      	beq.n	8010b48 <tcp_input+0x154>
 8010b3c:	4b4d      	ldr	r3, [pc, #308]	; (8010c74 <tcp_input+0x280>)
 8010b3e:	22e0      	movs	r2, #224	; 0xe0
 8010b40:	4956      	ldr	r1, [pc, #344]	; (8010c9c <tcp_input+0x2a8>)
 8010b42:	484e      	ldr	r0, [pc, #312]	; (8010c7c <tcp_input+0x288>)
 8010b44:	f007 f974 	bl	8017e30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010b48:	4b4d      	ldr	r3, [pc, #308]	; (8010c80 <tcp_input+0x28c>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	881b      	ldrh	r3, [r3, #0]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	4a4b      	ldr	r2, [pc, #300]	; (8010c80 <tcp_input+0x28c>)
 8010b52:	6814      	ldr	r4, [r2, #0]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fc f8f3 	bl	800cd40 <lwip_htons>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010b5e:	4b48      	ldr	r3, [pc, #288]	; (8010c80 <tcp_input+0x28c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	885b      	ldrh	r3, [r3, #2]
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	4a46      	ldr	r2, [pc, #280]	; (8010c80 <tcp_input+0x28c>)
 8010b68:	6814      	ldr	r4, [r2, #0]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fc f8e8 	bl	800cd40 <lwip_htons>
 8010b70:	4603      	mov	r3, r0
 8010b72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010b74:	4b42      	ldr	r3, [pc, #264]	; (8010c80 <tcp_input+0x28c>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	4a41      	ldr	r2, [pc, #260]	; (8010c80 <tcp_input+0x28c>)
 8010b7c:	6814      	ldr	r4, [r2, #0]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fc f8f3 	bl	800cd6a <lwip_htonl>
 8010b84:	4603      	mov	r3, r0
 8010b86:	6063      	str	r3, [r4, #4]
 8010b88:	6863      	ldr	r3, [r4, #4]
 8010b8a:	4a45      	ldr	r2, [pc, #276]	; (8010ca0 <tcp_input+0x2ac>)
 8010b8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010b8e:	4b3c      	ldr	r3, [pc, #240]	; (8010c80 <tcp_input+0x28c>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	4a3a      	ldr	r2, [pc, #232]	; (8010c80 <tcp_input+0x28c>)
 8010b96:	6814      	ldr	r4, [r2, #0]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7fc f8e6 	bl	800cd6a <lwip_htonl>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	60a3      	str	r3, [r4, #8]
 8010ba2:	68a3      	ldr	r3, [r4, #8]
 8010ba4:	4a3f      	ldr	r2, [pc, #252]	; (8010ca4 <tcp_input+0x2b0>)
 8010ba6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010ba8:	4b35      	ldr	r3, [pc, #212]	; (8010c80 <tcp_input+0x28c>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	89db      	ldrh	r3, [r3, #14]
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4a33      	ldr	r2, [pc, #204]	; (8010c80 <tcp_input+0x28c>)
 8010bb2:	6814      	ldr	r4, [r2, #0]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fc f8c3 	bl	800cd40 <lwip_htons>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010bbe:	4b30      	ldr	r3, [pc, #192]	; (8010c80 <tcp_input+0x28c>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	899b      	ldrh	r3, [r3, #12]
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fc f8ba 	bl	800cd40 <lwip_htons>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	4b34      	ldr	r3, [pc, #208]	; (8010ca8 <tcp_input+0x2b4>)
 8010bd8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	891a      	ldrh	r2, [r3, #8]
 8010bde:	4b33      	ldr	r3, [pc, #204]	; (8010cac <tcp_input+0x2b8>)
 8010be0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010be2:	4b31      	ldr	r3, [pc, #196]	; (8010ca8 <tcp_input+0x2b4>)
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	f003 0303 	and.w	r3, r3, #3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00c      	beq.n	8010c08 <tcp_input+0x214>
    tcplen++;
 8010bee:	4b2f      	ldr	r3, [pc, #188]	; (8010cac <tcp_input+0x2b8>)
 8010bf0:	881b      	ldrh	r3, [r3, #0]
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	4b2d      	ldr	r3, [pc, #180]	; (8010cac <tcp_input+0x2b8>)
 8010bf8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	891a      	ldrh	r2, [r3, #8]
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <tcp_input+0x2b8>)
 8010c00:	881b      	ldrh	r3, [r3, #0]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	f200 82e6 	bhi.w	80111d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c0c:	4b28      	ldr	r3, [pc, #160]	; (8010cb0 <tcp_input+0x2bc>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	61fb      	str	r3, [r7, #28]
 8010c12:	e09d      	b.n	8010d50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	7d1b      	ldrb	r3, [r3, #20]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d105      	bne.n	8010c28 <tcp_input+0x234>
 8010c1c:	4b15      	ldr	r3, [pc, #84]	; (8010c74 <tcp_input+0x280>)
 8010c1e:	22fb      	movs	r2, #251	; 0xfb
 8010c20:	4924      	ldr	r1, [pc, #144]	; (8010cb4 <tcp_input+0x2c0>)
 8010c22:	4816      	ldr	r0, [pc, #88]	; (8010c7c <tcp_input+0x288>)
 8010c24:	f007 f904 	bl	8017e30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	7d1b      	ldrb	r3, [r3, #20]
 8010c2c:	2b0a      	cmp	r3, #10
 8010c2e:	d105      	bne.n	8010c3c <tcp_input+0x248>
 8010c30:	4b10      	ldr	r3, [pc, #64]	; (8010c74 <tcp_input+0x280>)
 8010c32:	22fc      	movs	r2, #252	; 0xfc
 8010c34:	4920      	ldr	r1, [pc, #128]	; (8010cb8 <tcp_input+0x2c4>)
 8010c36:	4811      	ldr	r0, [pc, #68]	; (8010c7c <tcp_input+0x288>)
 8010c38:	f007 f8fa 	bl	8017e30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	7d1b      	ldrb	r3, [r3, #20]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d105      	bne.n	8010c50 <tcp_input+0x25c>
 8010c44:	4b0b      	ldr	r3, [pc, #44]	; (8010c74 <tcp_input+0x280>)
 8010c46:	22fd      	movs	r2, #253	; 0xfd
 8010c48:	491c      	ldr	r1, [pc, #112]	; (8010cbc <tcp_input+0x2c8>)
 8010c4a:	480c      	ldr	r0, [pc, #48]	; (8010c7c <tcp_input+0x288>)
 8010c4c:	f007 f8f0 	bl	8017e30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	7a1b      	ldrb	r3, [r3, #8]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d033      	beq.n	8010cc0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	7a1a      	ldrb	r2, [r3, #8]
 8010c5c:	4b09      	ldr	r3, [pc, #36]	; (8010c84 <tcp_input+0x290>)
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c64:	3301      	adds	r3, #1
 8010c66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d029      	beq.n	8010cc0 <tcp_input+0x2cc>
      prev = pcb;
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	61bb      	str	r3, [r7, #24]
      continue;
 8010c70:	e06b      	b.n	8010d4a <tcp_input+0x356>
 8010c72:	bf00      	nop
 8010c74:	0801cbf4 	.word	0x0801cbf4
 8010c78:	0801cc28 	.word	0x0801cc28
 8010c7c:	0801cc40 	.word	0x0801cc40
 8010c80:	20011bd8 	.word	0x20011bd8
 8010c84:	20009b24 	.word	0x20009b24
 8010c88:	20011bdc 	.word	0x20011bdc
 8010c8c:	20011be0 	.word	0x20011be0
 8010c90:	20011bde 	.word	0x20011bde
 8010c94:	0801cc68 	.word	0x0801cc68
 8010c98:	0801cc78 	.word	0x0801cc78
 8010c9c:	0801cc84 	.word	0x0801cc84
 8010ca0:	20011be8 	.word	0x20011be8
 8010ca4:	20011bec 	.word	0x20011bec
 8010ca8:	20011bf4 	.word	0x20011bf4
 8010cac:	20011bf2 	.word	0x20011bf2
 8010cb0:	20011bbc 	.word	0x20011bbc
 8010cb4:	0801cca4 	.word	0x0801cca4
 8010cb8:	0801cccc 	.word	0x0801cccc
 8010cbc:	0801ccf8 	.word	0x0801ccf8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	8b1a      	ldrh	r2, [r3, #24]
 8010cc4:	4b72      	ldr	r3, [pc, #456]	; (8010e90 <tcp_input+0x49c>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d13a      	bne.n	8010d46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	8ada      	ldrh	r2, [r3, #22]
 8010cd4:	4b6e      	ldr	r3, [pc, #440]	; (8010e90 <tcp_input+0x49c>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	885b      	ldrh	r3, [r3, #2]
 8010cda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d132      	bne.n	8010d46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	685a      	ldr	r2, [r3, #4]
 8010ce4:	4b6b      	ldr	r3, [pc, #428]	; (8010e94 <tcp_input+0x4a0>)
 8010ce6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d12c      	bne.n	8010d46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	4b68      	ldr	r3, [pc, #416]	; (8010e94 <tcp_input+0x4a0>)
 8010cf2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d126      	bne.n	8010d46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	69fa      	ldr	r2, [r7, #28]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d106      	bne.n	8010d10 <tcp_input+0x31c>
 8010d02:	4b65      	ldr	r3, [pc, #404]	; (8010e98 <tcp_input+0x4a4>)
 8010d04:	f240 120d 	movw	r2, #269	; 0x10d
 8010d08:	4964      	ldr	r1, [pc, #400]	; (8010e9c <tcp_input+0x4a8>)
 8010d0a:	4865      	ldr	r0, [pc, #404]	; (8010ea0 <tcp_input+0x4ac>)
 8010d0c:	f007 f890 	bl	8017e30 <iprintf>
      if (prev != NULL) {
 8010d10:	69bb      	ldr	r3, [r7, #24]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00a      	beq.n	8010d2c <tcp_input+0x338>
        prev->next = pcb->next;
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	68da      	ldr	r2, [r3, #12]
 8010d1a:	69bb      	ldr	r3, [r7, #24]
 8010d1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010d1e:	4b61      	ldr	r3, [pc, #388]	; (8010ea4 <tcp_input+0x4b0>)
 8010d20:	681a      	ldr	r2, [r3, #0]
 8010d22:	69fb      	ldr	r3, [r7, #28]
 8010d24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010d26:	4a5f      	ldr	r2, [pc, #380]	; (8010ea4 <tcp_input+0x4b0>)
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	69fa      	ldr	r2, [r7, #28]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d111      	bne.n	8010d5a <tcp_input+0x366>
 8010d36:	4b58      	ldr	r3, [pc, #352]	; (8010e98 <tcp_input+0x4a4>)
 8010d38:	f240 1215 	movw	r2, #277	; 0x115
 8010d3c:	495a      	ldr	r1, [pc, #360]	; (8010ea8 <tcp_input+0x4b4>)
 8010d3e:	4858      	ldr	r0, [pc, #352]	; (8010ea0 <tcp_input+0x4ac>)
 8010d40:	f007 f876 	bl	8017e30 <iprintf>
      break;
 8010d44:	e009      	b.n	8010d5a <tcp_input+0x366>
    }
    prev = pcb;
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	61fb      	str	r3, [r7, #28]
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f47f af5e 	bne.w	8010c14 <tcp_input+0x220>
 8010d58:	e000      	b.n	8010d5c <tcp_input+0x368>
      break;
 8010d5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f040 80aa 	bne.w	8010eb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d64:	4b51      	ldr	r3, [pc, #324]	; (8010eac <tcp_input+0x4b8>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	61fb      	str	r3, [r7, #28]
 8010d6a:	e03f      	b.n	8010dec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	7d1b      	ldrb	r3, [r3, #20]
 8010d70:	2b0a      	cmp	r3, #10
 8010d72:	d006      	beq.n	8010d82 <tcp_input+0x38e>
 8010d74:	4b48      	ldr	r3, [pc, #288]	; (8010e98 <tcp_input+0x4a4>)
 8010d76:	f240 121f 	movw	r2, #287	; 0x11f
 8010d7a:	494d      	ldr	r1, [pc, #308]	; (8010eb0 <tcp_input+0x4bc>)
 8010d7c:	4848      	ldr	r0, [pc, #288]	; (8010ea0 <tcp_input+0x4ac>)
 8010d7e:	f007 f857 	bl	8017e30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	7a1b      	ldrb	r3, [r3, #8]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	7a1a      	ldrb	r2, [r3, #8]
 8010d8e:	4b41      	ldr	r3, [pc, #260]	; (8010e94 <tcp_input+0x4a0>)
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d96:	3301      	adds	r3, #1
 8010d98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d122      	bne.n	8010de4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	8b1a      	ldrh	r2, [r3, #24]
 8010da2:	4b3b      	ldr	r3, [pc, #236]	; (8010e90 <tcp_input+0x49c>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d11b      	bne.n	8010de6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	8ada      	ldrh	r2, [r3, #22]
 8010db2:	4b37      	ldr	r3, [pc, #220]	; (8010e90 <tcp_input+0x49c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	885b      	ldrh	r3, [r3, #2]
 8010db8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d113      	bne.n	8010de6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	685a      	ldr	r2, [r3, #4]
 8010dc2:	4b34      	ldr	r3, [pc, #208]	; (8010e94 <tcp_input+0x4a0>)
 8010dc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d10d      	bne.n	8010de6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	4b31      	ldr	r3, [pc, #196]	; (8010e94 <tcp_input+0x4a0>)
 8010dd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d107      	bne.n	8010de6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010dd6:	69f8      	ldr	r0, [r7, #28]
 8010dd8:	f000 fb56 	bl	8011488 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f7fd fcb5 	bl	800e74c <pbuf_free>
        return;
 8010de2:	e1fd      	b.n	80111e0 <tcp_input+0x7ec>
        continue;
 8010de4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	61fb      	str	r3, [r7, #28]
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1bc      	bne.n	8010d6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010df2:	2300      	movs	r3, #0
 8010df4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010df6:	4b2f      	ldr	r3, [pc, #188]	; (8010eb4 <tcp_input+0x4c0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	617b      	str	r3, [r7, #20]
 8010dfc:	e02a      	b.n	8010e54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	7a1b      	ldrb	r3, [r3, #8]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d00c      	beq.n	8010e20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	7a1a      	ldrb	r2, [r3, #8]
 8010e0a:	4b22      	ldr	r3, [pc, #136]	; (8010e94 <tcp_input+0x4a0>)
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e12:	3301      	adds	r3, #1
 8010e14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d002      	beq.n	8010e20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	61bb      	str	r3, [r7, #24]
        continue;
 8010e1e:	e016      	b.n	8010e4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	8ada      	ldrh	r2, [r3, #22]
 8010e24:	4b1a      	ldr	r3, [pc, #104]	; (8010e90 <tcp_input+0x49c>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	885b      	ldrh	r3, [r3, #2]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d10c      	bne.n	8010e4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	4b17      	ldr	r3, [pc, #92]	; (8010e94 <tcp_input+0x4a0>)
 8010e36:	695b      	ldr	r3, [r3, #20]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d00f      	beq.n	8010e5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00d      	beq.n	8010e5e <tcp_input+0x46a>
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d009      	beq.n	8010e5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	68db      	ldr	r3, [r3, #12]
 8010e52:	617b      	str	r3, [r7, #20]
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d1d1      	bne.n	8010dfe <tcp_input+0x40a>
 8010e5a:	e000      	b.n	8010e5e <tcp_input+0x46a>
            break;
 8010e5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d029      	beq.n	8010eb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00a      	beq.n	8010e80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	68da      	ldr	r2, [r3, #12]
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010e72:	4b10      	ldr	r3, [pc, #64]	; (8010eb4 <tcp_input+0x4c0>)
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010e7a:	4a0e      	ldr	r2, [pc, #56]	; (8010eb4 <tcp_input+0x4c0>)
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010e80:	6978      	ldr	r0, [r7, #20]
 8010e82:	f000 fa03 	bl	801128c <tcp_listen_input>
      }
      pbuf_free(p);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f7fd fc60 	bl	800e74c <pbuf_free>
      return;
 8010e8c:	e1a8      	b.n	80111e0 <tcp_input+0x7ec>
 8010e8e:	bf00      	nop
 8010e90:	20011bd8 	.word	0x20011bd8
 8010e94:	20009b24 	.word	0x20009b24
 8010e98:	0801cbf4 	.word	0x0801cbf4
 8010e9c:	0801cd20 	.word	0x0801cd20
 8010ea0:	0801cc40 	.word	0x0801cc40
 8010ea4:	20011bbc 	.word	0x20011bbc
 8010ea8:	0801cd4c 	.word	0x0801cd4c
 8010eac:	20011bc0 	.word	0x20011bc0
 8010eb0:	0801cd78 	.word	0x0801cd78
 8010eb4:	20011bb8 	.word	0x20011bb8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 8158 	beq.w	8011170 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010ec0:	4b95      	ldr	r3, [pc, #596]	; (8011118 <tcp_input+0x724>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	891a      	ldrh	r2, [r3, #8]
 8010eca:	4b93      	ldr	r3, [pc, #588]	; (8011118 <tcp_input+0x724>)
 8010ecc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010ece:	4a92      	ldr	r2, [pc, #584]	; (8011118 <tcp_input+0x724>)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010ed4:	4b91      	ldr	r3, [pc, #580]	; (801111c <tcp_input+0x728>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	4a8f      	ldr	r2, [pc, #572]	; (8011118 <tcp_input+0x724>)
 8010eda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010edc:	4b90      	ldr	r3, [pc, #576]	; (8011120 <tcp_input+0x72c>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010ee2:	4b90      	ldr	r3, [pc, #576]	; (8011124 <tcp_input+0x730>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010ee8:	4b8f      	ldr	r3, [pc, #572]	; (8011128 <tcp_input+0x734>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010eee:	4b8f      	ldr	r3, [pc, #572]	; (801112c <tcp_input+0x738>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f003 0308 	and.w	r3, r3, #8
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d006      	beq.n	8010f08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	7b5b      	ldrb	r3, [r3, #13]
 8010efe:	f043 0301 	orr.w	r3, r3, #1
 8010f02:	b2da      	uxtb	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d017      	beq.n	8010f40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f10:	69f8      	ldr	r0, [r7, #28]
 8010f12:	f7ff f85b 	bl	800ffcc <tcp_process_refused_data>
 8010f16:	4603      	mov	r3, r0
 8010f18:	f113 0f0d 	cmn.w	r3, #13
 8010f1c:	d007      	beq.n	8010f2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00c      	beq.n	8010f40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010f26:	4b82      	ldr	r3, [pc, #520]	; (8011130 <tcp_input+0x73c>)
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d008      	beq.n	8010f40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f040 80e3 	bne.w	80110fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010f38:	69f8      	ldr	r0, [r7, #28]
 8010f3a:	f003 fe27 	bl	8014b8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010f3e:	e0de      	b.n	80110fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010f40:	4a7c      	ldr	r2, [pc, #496]	; (8011134 <tcp_input+0x740>)
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010f46:	69f8      	ldr	r0, [r7, #28]
 8010f48:	f000 fb18 	bl	801157c <tcp_process>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010f50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010f54:	f113 0f0d 	cmn.w	r3, #13
 8010f58:	f000 80d3 	beq.w	8011102 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010f5c:	4b71      	ldr	r3, [pc, #452]	; (8011124 <tcp_input+0x730>)
 8010f5e:	781b      	ldrb	r3, [r3, #0]
 8010f60:	f003 0308 	and.w	r3, r3, #8
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d015      	beq.n	8010f94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d008      	beq.n	8010f84 <tcp_input+0x590>
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f78:	69fa      	ldr	r2, [r7, #28]
 8010f7a:	6912      	ldr	r2, [r2, #16]
 8010f7c:	f06f 010d 	mvn.w	r1, #13
 8010f80:	4610      	mov	r0, r2
 8010f82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010f84:	69f9      	ldr	r1, [r7, #28]
 8010f86:	486c      	ldr	r0, [pc, #432]	; (8011138 <tcp_input+0x744>)
 8010f88:	f7ff fbbc 	bl	8010704 <tcp_pcb_remove>
        tcp_free(pcb);
 8010f8c:	69f8      	ldr	r0, [r7, #28]
 8010f8e:	f7fd fe89 	bl	800eca4 <tcp_free>
 8010f92:	e0da      	b.n	801114a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010f98:	4b63      	ldr	r3, [pc, #396]	; (8011128 <tcp_input+0x734>)
 8010f9a:	881b      	ldrh	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d01d      	beq.n	8010fdc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010fa0:	4b61      	ldr	r3, [pc, #388]	; (8011128 <tcp_input+0x734>)
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00a      	beq.n	8010fc6 <tcp_input+0x5d2>
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fb6:	69fa      	ldr	r2, [r7, #28]
 8010fb8:	6910      	ldr	r0, [r2, #16]
 8010fba:	89fa      	ldrh	r2, [r7, #14]
 8010fbc:	69f9      	ldr	r1, [r7, #28]
 8010fbe:	4798      	blx	r3
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	74fb      	strb	r3, [r7, #19]
 8010fc4:	e001      	b.n	8010fca <tcp_input+0x5d6>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010fca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010fce:	f113 0f0d 	cmn.w	r3, #13
 8010fd2:	f000 8098 	beq.w	8011106 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010fd6:	4b54      	ldr	r3, [pc, #336]	; (8011128 <tcp_input+0x734>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010fdc:	69f8      	ldr	r0, [r7, #28]
 8010fde:	f000 f915 	bl	801120c <tcp_input_delayed_close>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f040 8090 	bne.w	801110a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010fea:	4b4d      	ldr	r3, [pc, #308]	; (8011120 <tcp_input+0x72c>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d041      	beq.n	8011076 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d006      	beq.n	8011008 <tcp_input+0x614>
 8010ffa:	4b50      	ldr	r3, [pc, #320]	; (801113c <tcp_input+0x748>)
 8010ffc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011000:	494f      	ldr	r1, [pc, #316]	; (8011140 <tcp_input+0x74c>)
 8011002:	4850      	ldr	r0, [pc, #320]	; (8011144 <tcp_input+0x750>)
 8011004:	f006 ff14 	bl	8017e30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	8b5b      	ldrh	r3, [r3, #26]
 801100c:	f003 0310 	and.w	r3, r3, #16
 8011010:	2b00      	cmp	r3, #0
 8011012:	d008      	beq.n	8011026 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011014:	4b42      	ldr	r3, [pc, #264]	; (8011120 <tcp_input+0x72c>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f7fd fb97 	bl	800e74c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801101e:	69f8      	ldr	r0, [r7, #28]
 8011020:	f7fe f984 	bl	800f32c <tcp_abort>
            goto aborted;
 8011024:	e091      	b.n	801114a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801102c:	2b00      	cmp	r3, #0
 801102e:	d00c      	beq.n	801104a <tcp_input+0x656>
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	6918      	ldr	r0, [r3, #16]
 801103a:	4b39      	ldr	r3, [pc, #228]	; (8011120 <tcp_input+0x72c>)
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	2300      	movs	r3, #0
 8011040:	69f9      	ldr	r1, [r7, #28]
 8011042:	47a0      	blx	r4
 8011044:	4603      	mov	r3, r0
 8011046:	74fb      	strb	r3, [r7, #19]
 8011048:	e008      	b.n	801105c <tcp_input+0x668>
 801104a:	4b35      	ldr	r3, [pc, #212]	; (8011120 <tcp_input+0x72c>)
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	2300      	movs	r3, #0
 8011050:	69f9      	ldr	r1, [r7, #28]
 8011052:	2000      	movs	r0, #0
 8011054:	f7ff f890 	bl	8010178 <tcp_recv_null>
 8011058:	4603      	mov	r3, r0
 801105a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801105c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011060:	f113 0f0d 	cmn.w	r3, #13
 8011064:	d053      	beq.n	801110e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011066:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d003      	beq.n	8011076 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801106e:	4b2c      	ldr	r3, [pc, #176]	; (8011120 <tcp_input+0x72c>)
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011076:	4b2b      	ldr	r3, [pc, #172]	; (8011124 <tcp_input+0x730>)
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	f003 0320 	and.w	r3, r3, #32
 801107e:	2b00      	cmp	r3, #0
 8011080:	d030      	beq.n	80110e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011086:	2b00      	cmp	r3, #0
 8011088:	d009      	beq.n	801109e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801108e:	7b5a      	ldrb	r2, [r3, #13]
 8011090:	69fb      	ldr	r3, [r7, #28]
 8011092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011094:	f042 0220 	orr.w	r2, r2, #32
 8011098:	b2d2      	uxtb	r2, r2
 801109a:	735a      	strb	r2, [r3, #13]
 801109c:	e022      	b.n	80110e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110a6:	d005      	beq.n	80110b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ac:	3301      	adds	r3, #1
 80110ae:	b29a      	uxth	r2, r3
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00b      	beq.n	80110d6 <tcp_input+0x6e2>
 80110be:	69fb      	ldr	r3, [r7, #28]
 80110c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	6918      	ldr	r0, [r3, #16]
 80110c8:	2300      	movs	r3, #0
 80110ca:	2200      	movs	r2, #0
 80110cc:	69f9      	ldr	r1, [r7, #28]
 80110ce:	47a0      	blx	r4
 80110d0:	4603      	mov	r3, r0
 80110d2:	74fb      	strb	r3, [r7, #19]
 80110d4:	e001      	b.n	80110da <tcp_input+0x6e6>
 80110d6:	2300      	movs	r3, #0
 80110d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80110da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110de:	f113 0f0d 	cmn.w	r3, #13
 80110e2:	d016      	beq.n	8011112 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80110e4:	4b13      	ldr	r3, [pc, #76]	; (8011134 <tcp_input+0x740>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80110ea:	69f8      	ldr	r0, [r7, #28]
 80110ec:	f000 f88e 	bl	801120c <tcp_input_delayed_close>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d128      	bne.n	8011148 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80110f6:	69f8      	ldr	r0, [r7, #28]
 80110f8:	f002 ff20 	bl	8013f3c <tcp_output>
 80110fc:	e025      	b.n	801114a <tcp_input+0x756>
        goto aborted;
 80110fe:	bf00      	nop
 8011100:	e023      	b.n	801114a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011102:	bf00      	nop
 8011104:	e021      	b.n	801114a <tcp_input+0x756>
              goto aborted;
 8011106:	bf00      	nop
 8011108:	e01f      	b.n	801114a <tcp_input+0x756>
          goto aborted;
 801110a:	bf00      	nop
 801110c:	e01d      	b.n	801114a <tcp_input+0x756>
            goto aborted;
 801110e:	bf00      	nop
 8011110:	e01b      	b.n	801114a <tcp_input+0x756>
              goto aborted;
 8011112:	bf00      	nop
 8011114:	e019      	b.n	801114a <tcp_input+0x756>
 8011116:	bf00      	nop
 8011118:	20011bc8 	.word	0x20011bc8
 801111c:	20011bd8 	.word	0x20011bd8
 8011120:	20011bf8 	.word	0x20011bf8
 8011124:	20011bf5 	.word	0x20011bf5
 8011128:	20011bf0 	.word	0x20011bf0
 801112c:	20011bf4 	.word	0x20011bf4
 8011130:	20011bf2 	.word	0x20011bf2
 8011134:	20011bfc 	.word	0x20011bfc
 8011138:	20011bbc 	.word	0x20011bbc
 801113c:	0801cbf4 	.word	0x0801cbf4
 8011140:	0801cda8 	.word	0x0801cda8
 8011144:	0801cc40 	.word	0x0801cc40
          goto aborted;
 8011148:	bf00      	nop
    tcp_input_pcb = NULL;
 801114a:	4b27      	ldr	r3, [pc, #156]	; (80111e8 <tcp_input+0x7f4>)
 801114c:	2200      	movs	r2, #0
 801114e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011150:	4b26      	ldr	r3, [pc, #152]	; (80111ec <tcp_input+0x7f8>)
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011156:	4b26      	ldr	r3, [pc, #152]	; (80111f0 <tcp_input+0x7fc>)
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d03f      	beq.n	80111de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <tcp_input+0x7fc>)
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	f7fd faf2 	bl	800e74c <pbuf_free>
      inseg.p = NULL;
 8011168:	4b21      	ldr	r3, [pc, #132]	; (80111f0 <tcp_input+0x7fc>)
 801116a:	2200      	movs	r2, #0
 801116c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801116e:	e036      	b.n	80111de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011170:	4b20      	ldr	r3, [pc, #128]	; (80111f4 <tcp_input+0x800>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7fb fde1 	bl	800cd40 <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	f003 0304 	and.w	r3, r3, #4
 8011186:	2b00      	cmp	r3, #0
 8011188:	d118      	bne.n	80111bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801118a:	4b1b      	ldr	r3, [pc, #108]	; (80111f8 <tcp_input+0x804>)
 801118c:	6819      	ldr	r1, [r3, #0]
 801118e:	4b1b      	ldr	r3, [pc, #108]	; (80111fc <tcp_input+0x808>)
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	461a      	mov	r2, r3
 8011194:	4b1a      	ldr	r3, [pc, #104]	; (8011200 <tcp_input+0x80c>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801119a:	4b16      	ldr	r3, [pc, #88]	; (80111f4 <tcp_input+0x800>)
 801119c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801119e:	885b      	ldrh	r3, [r3, #2]
 80111a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80111a2:	4a14      	ldr	r2, [pc, #80]	; (80111f4 <tcp_input+0x800>)
 80111a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80111a6:	8812      	ldrh	r2, [r2, #0]
 80111a8:	b292      	uxth	r2, r2
 80111aa:	9202      	str	r2, [sp, #8]
 80111ac:	9301      	str	r3, [sp, #4]
 80111ae:	4b15      	ldr	r3, [pc, #84]	; (8011204 <tcp_input+0x810>)
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	4b15      	ldr	r3, [pc, #84]	; (8011208 <tcp_input+0x814>)
 80111b4:	4602      	mov	r2, r0
 80111b6:	2000      	movs	r0, #0
 80111b8:	f003 fc96 	bl	8014ae8 <tcp_rst>
    pbuf_free(p);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7fd fac5 	bl	800e74c <pbuf_free>
  return;
 80111c2:	e00c      	b.n	80111de <tcp_input+0x7ea>
    goto dropped;
 80111c4:	bf00      	nop
 80111c6:	e006      	b.n	80111d6 <tcp_input+0x7e2>
    goto dropped;
 80111c8:	bf00      	nop
 80111ca:	e004      	b.n	80111d6 <tcp_input+0x7e2>
    goto dropped;
 80111cc:	bf00      	nop
 80111ce:	e002      	b.n	80111d6 <tcp_input+0x7e2>
      goto dropped;
 80111d0:	bf00      	nop
 80111d2:	e000      	b.n	80111d6 <tcp_input+0x7e2>
      goto dropped;
 80111d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7fd fab8 	bl	800e74c <pbuf_free>
 80111dc:	e000      	b.n	80111e0 <tcp_input+0x7ec>
  return;
 80111de:	bf00      	nop
}
 80111e0:	3724      	adds	r7, #36	; 0x24
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd90      	pop	{r4, r7, pc}
 80111e6:	bf00      	nop
 80111e8:	20011bfc 	.word	0x20011bfc
 80111ec:	20011bf8 	.word	0x20011bf8
 80111f0:	20011bc8 	.word	0x20011bc8
 80111f4:	20011bd8 	.word	0x20011bd8
 80111f8:	20011bec 	.word	0x20011bec
 80111fc:	20011bf2 	.word	0x20011bf2
 8011200:	20011be8 	.word	0x20011be8
 8011204:	20009b34 	.word	0x20009b34
 8011208:	20009b38 	.word	0x20009b38

0801120c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <tcp_input_delayed_close+0x1c>
 801121a:	4b17      	ldr	r3, [pc, #92]	; (8011278 <tcp_input_delayed_close+0x6c>)
 801121c:	f240 225a 	movw	r2, #602	; 0x25a
 8011220:	4916      	ldr	r1, [pc, #88]	; (801127c <tcp_input_delayed_close+0x70>)
 8011222:	4817      	ldr	r0, [pc, #92]	; (8011280 <tcp_input_delayed_close+0x74>)
 8011224:	f006 fe04 	bl	8017e30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011228:	4b16      	ldr	r3, [pc, #88]	; (8011284 <tcp_input_delayed_close+0x78>)
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	f003 0310 	and.w	r3, r3, #16
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01c      	beq.n	801126e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8b5b      	ldrh	r3, [r3, #26]
 8011238:	f003 0310 	and.w	r3, r3, #16
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10d      	bne.n	801125c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011246:	2b00      	cmp	r3, #0
 8011248:	d008      	beq.n	801125c <tcp_input_delayed_close+0x50>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	6912      	ldr	r2, [r2, #16]
 8011254:	f06f 010e 	mvn.w	r1, #14
 8011258:	4610      	mov	r0, r2
 801125a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	480a      	ldr	r0, [pc, #40]	; (8011288 <tcp_input_delayed_close+0x7c>)
 8011260:	f7ff fa50 	bl	8010704 <tcp_pcb_remove>
    tcp_free(pcb);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f7fd fd1d 	bl	800eca4 <tcp_free>
    return 1;
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801126e:	2300      	movs	r3, #0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	0801cbf4 	.word	0x0801cbf4
 801127c:	0801cdc4 	.word	0x0801cdc4
 8011280:	0801cc40 	.word	0x0801cc40
 8011284:	20011bf5 	.word	0x20011bf5
 8011288:	20011bbc 	.word	0x20011bbc

0801128c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801128c:	b590      	push	{r4, r7, lr}
 801128e:	b08b      	sub	sp, #44	; 0x2c
 8011290:	af04      	add	r7, sp, #16
 8011292:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011294:	4b6f      	ldr	r3, [pc, #444]	; (8011454 <tcp_listen_input+0x1c8>)
 8011296:	781b      	ldrb	r3, [r3, #0]
 8011298:	f003 0304 	and.w	r3, r3, #4
 801129c:	2b00      	cmp	r3, #0
 801129e:	f040 80d2 	bne.w	8011446 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d106      	bne.n	80112b6 <tcp_listen_input+0x2a>
 80112a8:	4b6b      	ldr	r3, [pc, #428]	; (8011458 <tcp_listen_input+0x1cc>)
 80112aa:	f240 2281 	movw	r2, #641	; 0x281
 80112ae:	496b      	ldr	r1, [pc, #428]	; (801145c <tcp_listen_input+0x1d0>)
 80112b0:	486b      	ldr	r0, [pc, #428]	; (8011460 <tcp_listen_input+0x1d4>)
 80112b2:	f006 fdbd 	bl	8017e30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80112b6:	4b67      	ldr	r3, [pc, #412]	; (8011454 <tcp_listen_input+0x1c8>)
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	f003 0310 	and.w	r3, r3, #16
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d019      	beq.n	80112f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112c2:	4b68      	ldr	r3, [pc, #416]	; (8011464 <tcp_listen_input+0x1d8>)
 80112c4:	6819      	ldr	r1, [r3, #0]
 80112c6:	4b68      	ldr	r3, [pc, #416]	; (8011468 <tcp_listen_input+0x1dc>)
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	4b67      	ldr	r3, [pc, #412]	; (801146c <tcp_listen_input+0x1e0>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112d2:	4b67      	ldr	r3, [pc, #412]	; (8011470 <tcp_listen_input+0x1e4>)
 80112d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112d6:	885b      	ldrh	r3, [r3, #2]
 80112d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112da:	4a65      	ldr	r2, [pc, #404]	; (8011470 <tcp_listen_input+0x1e4>)
 80112dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112de:	8812      	ldrh	r2, [r2, #0]
 80112e0:	b292      	uxth	r2, r2
 80112e2:	9202      	str	r2, [sp, #8]
 80112e4:	9301      	str	r3, [sp, #4]
 80112e6:	4b63      	ldr	r3, [pc, #396]	; (8011474 <tcp_listen_input+0x1e8>)
 80112e8:	9300      	str	r3, [sp, #0]
 80112ea:	4b63      	ldr	r3, [pc, #396]	; (8011478 <tcp_listen_input+0x1ec>)
 80112ec:	4602      	mov	r2, r0
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f003 fbfa 	bl	8014ae8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80112f4:	e0a9      	b.n	801144a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80112f6:	4b57      	ldr	r3, [pc, #348]	; (8011454 <tcp_listen_input+0x1c8>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	f003 0302 	and.w	r3, r3, #2
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f000 80a3 	beq.w	801144a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	7d5b      	ldrb	r3, [r3, #21]
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff f859 	bl	80103c0 <tcp_alloc>
 801130e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d111      	bne.n	801133a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	699b      	ldr	r3, [r3, #24]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00a      	beq.n	8011334 <tcp_listen_input+0xa8>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	699b      	ldr	r3, [r3, #24]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	6910      	ldr	r0, [r2, #16]
 8011326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801132a:	2100      	movs	r1, #0
 801132c:	4798      	blx	r3
 801132e:	4603      	mov	r3, r0
 8011330:	73bb      	strb	r3, [r7, #14]
      return;
 8011332:	e08b      	b.n	801144c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011334:	23f0      	movs	r3, #240	; 0xf0
 8011336:	73bb      	strb	r3, [r7, #14]
      return;
 8011338:	e088      	b.n	801144c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801133a:	4b50      	ldr	r3, [pc, #320]	; (801147c <tcp_listen_input+0x1f0>)
 801133c:	695a      	ldr	r2, [r3, #20]
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011342:	4b4e      	ldr	r3, [pc, #312]	; (801147c <tcp_listen_input+0x1f0>)
 8011344:	691a      	ldr	r2, [r3, #16]
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8ada      	ldrh	r2, [r3, #22]
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011352:	4b47      	ldr	r3, [pc, #284]	; (8011470 <tcp_listen_input+0x1e4>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	b29a      	uxth	r2, r3
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2203      	movs	r2, #3
 8011362:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011364:	4b41      	ldr	r3, [pc, #260]	; (801146c <tcp_listen_input+0x1e0>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	1c5a      	adds	r2, r3, #1
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011372:	697b      	ldr	r3, [r7, #20]
 8011374:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011376:	6978      	ldr	r0, [r7, #20]
 8011378:	f7ff fa58 	bl	801082c <tcp_next_iss>
 801137c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	693a      	ldr	r2, [r7, #16]
 8011382:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	693a      	ldr	r2, [r7, #16]
 8011388:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	693a      	ldr	r2, [r7, #16]
 801138e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	693a      	ldr	r2, [r7, #16]
 8011394:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011396:	4b35      	ldr	r3, [pc, #212]	; (801146c <tcp_listen_input+0x1e0>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	1e5a      	subs	r2, r3, #1
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	691a      	ldr	r2, [r3, #16]
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	7a5b      	ldrb	r3, [r3, #9]
 80113b2:	f003 030c 	and.w	r3, r3, #12
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	7a1a      	ldrb	r2, [r3, #8]
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80113c4:	4b2e      	ldr	r3, [pc, #184]	; (8011480 <tcp_listen_input+0x1f4>)
 80113c6:	681a      	ldr	r2, [r3, #0]
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	60da      	str	r2, [r3, #12]
 80113cc:	4a2c      	ldr	r2, [pc, #176]	; (8011480 <tcp_listen_input+0x1f4>)
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	6013      	str	r3, [r2, #0]
 80113d2:	f003 fd4b 	bl	8014e6c <tcp_timer_needed>
 80113d6:	4b2b      	ldr	r3, [pc, #172]	; (8011484 <tcp_listen_input+0x1f8>)
 80113d8:	2201      	movs	r2, #1
 80113da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80113dc:	6978      	ldr	r0, [r7, #20]
 80113de:	f001 fd8f 	bl	8012f00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80113e2:	4b23      	ldr	r3, [pc, #140]	; (8011470 <tcp_listen_input+0x1e4>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	89db      	ldrh	r3, [r3, #14]
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	3304      	adds	r3, #4
 8011404:	4618      	mov	r0, r3
 8011406:	f004 ff85 	bl	8016314 <ip4_route>
 801140a:	4601      	mov	r1, r0
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	3304      	adds	r3, #4
 8011410:	461a      	mov	r2, r3
 8011412:	4620      	mov	r0, r4
 8011414:	f7ff fa30 	bl	8010878 <tcp_eff_send_mss_netif>
 8011418:	4603      	mov	r3, r0
 801141a:	461a      	mov	r2, r3
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011420:	2112      	movs	r1, #18
 8011422:	6978      	ldr	r0, [r7, #20]
 8011424:	f002 fc9c 	bl	8013d60 <tcp_enqueue_flags>
 8011428:	4603      	mov	r3, r0
 801142a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011434:	2100      	movs	r1, #0
 8011436:	6978      	ldr	r0, [r7, #20]
 8011438:	f7fd feba 	bl	800f1b0 <tcp_abandon>
      return;
 801143c:	e006      	b.n	801144c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801143e:	6978      	ldr	r0, [r7, #20]
 8011440:	f002 fd7c 	bl	8013f3c <tcp_output>
  return;
 8011444:	e001      	b.n	801144a <tcp_listen_input+0x1be>
    return;
 8011446:	bf00      	nop
 8011448:	e000      	b.n	801144c <tcp_listen_input+0x1c0>
  return;
 801144a:	bf00      	nop
}
 801144c:	371c      	adds	r7, #28
 801144e:	46bd      	mov	sp, r7
 8011450:	bd90      	pop	{r4, r7, pc}
 8011452:	bf00      	nop
 8011454:	20011bf4 	.word	0x20011bf4
 8011458:	0801cbf4 	.word	0x0801cbf4
 801145c:	0801cdec 	.word	0x0801cdec
 8011460:	0801cc40 	.word	0x0801cc40
 8011464:	20011bec 	.word	0x20011bec
 8011468:	20011bf2 	.word	0x20011bf2
 801146c:	20011be8 	.word	0x20011be8
 8011470:	20011bd8 	.word	0x20011bd8
 8011474:	20009b34 	.word	0x20009b34
 8011478:	20009b38 	.word	0x20009b38
 801147c:	20009b24 	.word	0x20009b24
 8011480:	20011bbc 	.word	0x20011bbc
 8011484:	20011bc4 	.word	0x20011bc4

08011488 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af04      	add	r7, sp, #16
 801148e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011490:	4b2f      	ldr	r3, [pc, #188]	; (8011550 <tcp_timewait_input+0xc8>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f003 0304 	and.w	r3, r3, #4
 8011498:	2b00      	cmp	r3, #0
 801149a:	d153      	bne.n	8011544 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d106      	bne.n	80114b0 <tcp_timewait_input+0x28>
 80114a2:	4b2c      	ldr	r3, [pc, #176]	; (8011554 <tcp_timewait_input+0xcc>)
 80114a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80114a8:	492b      	ldr	r1, [pc, #172]	; (8011558 <tcp_timewait_input+0xd0>)
 80114aa:	482c      	ldr	r0, [pc, #176]	; (801155c <tcp_timewait_input+0xd4>)
 80114ac:	f006 fcc0 	bl	8017e30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80114b0:	4b27      	ldr	r3, [pc, #156]	; (8011550 <tcp_timewait_input+0xc8>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	f003 0302 	and.w	r3, r3, #2
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d02a      	beq.n	8011512 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80114bc:	4b28      	ldr	r3, [pc, #160]	; (8011560 <tcp_timewait_input+0xd8>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	db2d      	blt.n	8011526 <tcp_timewait_input+0x9e>
 80114ca:	4b25      	ldr	r3, [pc, #148]	; (8011560 <tcp_timewait_input+0xd8>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d2:	6879      	ldr	r1, [r7, #4]
 80114d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114d6:	440b      	add	r3, r1
 80114d8:	1ad3      	subs	r3, r2, r3
 80114da:	2b00      	cmp	r3, #0
 80114dc:	dc23      	bgt.n	8011526 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114de:	4b21      	ldr	r3, [pc, #132]	; (8011564 <tcp_timewait_input+0xdc>)
 80114e0:	6819      	ldr	r1, [r3, #0]
 80114e2:	4b21      	ldr	r3, [pc, #132]	; (8011568 <tcp_timewait_input+0xe0>)
 80114e4:	881b      	ldrh	r3, [r3, #0]
 80114e6:	461a      	mov	r2, r3
 80114e8:	4b1d      	ldr	r3, [pc, #116]	; (8011560 <tcp_timewait_input+0xd8>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114ee:	4b1f      	ldr	r3, [pc, #124]	; (801156c <tcp_timewait_input+0xe4>)
 80114f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114f2:	885b      	ldrh	r3, [r3, #2]
 80114f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80114f6:	4a1d      	ldr	r2, [pc, #116]	; (801156c <tcp_timewait_input+0xe4>)
 80114f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80114fa:	8812      	ldrh	r2, [r2, #0]
 80114fc:	b292      	uxth	r2, r2
 80114fe:	9202      	str	r2, [sp, #8]
 8011500:	9301      	str	r3, [sp, #4]
 8011502:	4b1b      	ldr	r3, [pc, #108]	; (8011570 <tcp_timewait_input+0xe8>)
 8011504:	9300      	str	r3, [sp, #0]
 8011506:	4b1b      	ldr	r3, [pc, #108]	; (8011574 <tcp_timewait_input+0xec>)
 8011508:	4602      	mov	r2, r0
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f003 faec 	bl	8014ae8 <tcp_rst>
      return;
 8011510:	e01b      	b.n	801154a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011512:	4b0f      	ldr	r3, [pc, #60]	; (8011550 <tcp_timewait_input+0xc8>)
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	f003 0301 	and.w	r3, r3, #1
 801151a:	2b00      	cmp	r3, #0
 801151c:	d003      	beq.n	8011526 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801151e:	4b16      	ldr	r3, [pc, #88]	; (8011578 <tcp_timewait_input+0xf0>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011526:	4b10      	ldr	r3, [pc, #64]	; (8011568 <tcp_timewait_input+0xe0>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00c      	beq.n	8011548 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8b5b      	ldrh	r3, [r3, #26]
 8011532:	f043 0302 	orr.w	r3, r3, #2
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f002 fcfd 	bl	8013f3c <tcp_output>
  }
  return;
 8011542:	e001      	b.n	8011548 <tcp_timewait_input+0xc0>
    return;
 8011544:	bf00      	nop
 8011546:	e000      	b.n	801154a <tcp_timewait_input+0xc2>
  return;
 8011548:	bf00      	nop
}
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	20011bf4 	.word	0x20011bf4
 8011554:	0801cbf4 	.word	0x0801cbf4
 8011558:	0801ce0c 	.word	0x0801ce0c
 801155c:	0801cc40 	.word	0x0801cc40
 8011560:	20011be8 	.word	0x20011be8
 8011564:	20011bec 	.word	0x20011bec
 8011568:	20011bf2 	.word	0x20011bf2
 801156c:	20011bd8 	.word	0x20011bd8
 8011570:	20009b34 	.word	0x20009b34
 8011574:	20009b38 	.word	0x20009b38
 8011578:	20011bb0 	.word	0x20011bb0

0801157c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801157c:	b590      	push	{r4, r7, lr}
 801157e:	b08d      	sub	sp, #52	; 0x34
 8011580:	af04      	add	r7, sp, #16
 8011582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011584:	2300      	movs	r3, #0
 8011586:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011588:	2300      	movs	r3, #0
 801158a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d106      	bne.n	80115a0 <tcp_process+0x24>
 8011592:	4b9d      	ldr	r3, [pc, #628]	; (8011808 <tcp_process+0x28c>)
 8011594:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011598:	499c      	ldr	r1, [pc, #624]	; (801180c <tcp_process+0x290>)
 801159a:	489d      	ldr	r0, [pc, #628]	; (8011810 <tcp_process+0x294>)
 801159c:	f006 fc48 	bl	8017e30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80115a0:	4b9c      	ldr	r3, [pc, #624]	; (8011814 <tcp_process+0x298>)
 80115a2:	781b      	ldrb	r3, [r3, #0]
 80115a4:	f003 0304 	and.w	r3, r3, #4
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d04e      	beq.n	801164a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	7d1b      	ldrb	r3, [r3, #20]
 80115b0:	2b02      	cmp	r3, #2
 80115b2:	d108      	bne.n	80115c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115b8:	4b97      	ldr	r3, [pc, #604]	; (8011818 <tcp_process+0x29c>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d123      	bne.n	8011608 <tcp_process+0x8c>
        acceptable = 1;
 80115c0:	2301      	movs	r3, #1
 80115c2:	76fb      	strb	r3, [r7, #27]
 80115c4:	e020      	b.n	8011608 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115ca:	4b94      	ldr	r3, [pc, #592]	; (801181c <tcp_process+0x2a0>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d102      	bne.n	80115d8 <tcp_process+0x5c>
        acceptable = 1;
 80115d2:	2301      	movs	r3, #1
 80115d4:	76fb      	strb	r3, [r7, #27]
 80115d6:	e017      	b.n	8011608 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115d8:	4b90      	ldr	r3, [pc, #576]	; (801181c <tcp_process+0x2a0>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	db10      	blt.n	8011608 <tcp_process+0x8c>
 80115e6:	4b8d      	ldr	r3, [pc, #564]	; (801181c <tcp_process+0x2a0>)
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ee:	6879      	ldr	r1, [r7, #4]
 80115f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115f2:	440b      	add	r3, r1
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	dc06      	bgt.n	8011608 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	8b5b      	ldrh	r3, [r3, #26]
 80115fe:	f043 0302 	orr.w	r3, r3, #2
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011608:	7efb      	ldrb	r3, [r7, #27]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d01b      	beq.n	8011646 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	7d1b      	ldrb	r3, [r3, #20]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d106      	bne.n	8011624 <tcp_process+0xa8>
 8011616:	4b7c      	ldr	r3, [pc, #496]	; (8011808 <tcp_process+0x28c>)
 8011618:	f44f 724e 	mov.w	r2, #824	; 0x338
 801161c:	4980      	ldr	r1, [pc, #512]	; (8011820 <tcp_process+0x2a4>)
 801161e:	487c      	ldr	r0, [pc, #496]	; (8011810 <tcp_process+0x294>)
 8011620:	f006 fc06 	bl	8017e30 <iprintf>
      recv_flags |= TF_RESET;
 8011624:	4b7f      	ldr	r3, [pc, #508]	; (8011824 <tcp_process+0x2a8>)
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	f043 0308 	orr.w	r3, r3, #8
 801162c:	b2da      	uxtb	r2, r3
 801162e:	4b7d      	ldr	r3, [pc, #500]	; (8011824 <tcp_process+0x2a8>)
 8011630:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8b5b      	ldrh	r3, [r3, #26]
 8011636:	f023 0301 	bic.w	r3, r3, #1
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011640:	f06f 030d 	mvn.w	r3, #13
 8011644:	e37a      	b.n	8011d3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011646:	2300      	movs	r3, #0
 8011648:	e378      	b.n	8011d3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801164a:	4b72      	ldr	r3, [pc, #456]	; (8011814 <tcp_process+0x298>)
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	f003 0302 	and.w	r3, r3, #2
 8011652:	2b00      	cmp	r3, #0
 8011654:	d010      	beq.n	8011678 <tcp_process+0xfc>
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	7d1b      	ldrb	r3, [r3, #20]
 801165a:	2b02      	cmp	r3, #2
 801165c:	d00c      	beq.n	8011678 <tcp_process+0xfc>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	7d1b      	ldrb	r3, [r3, #20]
 8011662:	2b03      	cmp	r3, #3
 8011664:	d008      	beq.n	8011678 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	8b5b      	ldrh	r3, [r3, #26]
 801166a:	f043 0302 	orr.w	r3, r3, #2
 801166e:	b29a      	uxth	r2, r3
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	e361      	b.n	8011d3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	8b5b      	ldrh	r3, [r3, #26]
 801167c:	f003 0310 	and.w	r3, r3, #16
 8011680:	2b00      	cmp	r3, #0
 8011682:	d103      	bne.n	801168c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011684:	4b68      	ldr	r3, [pc, #416]	; (8011828 <tcp_process+0x2ac>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f001 fc2f 	bl	8012f00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	7d1b      	ldrb	r3, [r3, #20]
 80116a6:	3b02      	subs	r3, #2
 80116a8:	2b07      	cmp	r3, #7
 80116aa:	f200 8337 	bhi.w	8011d1c <tcp_process+0x7a0>
 80116ae:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <tcp_process+0x138>)
 80116b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b4:	080116d5 	.word	0x080116d5
 80116b8:	08011905 	.word	0x08011905
 80116bc:	08011a7d 	.word	0x08011a7d
 80116c0:	08011aa7 	.word	0x08011aa7
 80116c4:	08011bcb 	.word	0x08011bcb
 80116c8:	08011a7d 	.word	0x08011a7d
 80116cc:	08011c57 	.word	0x08011c57
 80116d0:	08011ce7 	.word	0x08011ce7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80116d4:	4b4f      	ldr	r3, [pc, #316]	; (8011814 <tcp_process+0x298>)
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	f003 0310 	and.w	r3, r3, #16
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 80e4 	beq.w	80118aa <tcp_process+0x32e>
 80116e2:	4b4c      	ldr	r3, [pc, #304]	; (8011814 <tcp_process+0x298>)
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 80dd 	beq.w	80118aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116f4:	1c5a      	adds	r2, r3, #1
 80116f6:	4b48      	ldr	r3, [pc, #288]	; (8011818 <tcp_process+0x29c>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	f040 80d5 	bne.w	80118aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011700:	4b46      	ldr	r3, [pc, #280]	; (801181c <tcp_process+0x2a0>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	1c5a      	adds	r2, r3, #1
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011712:	4b41      	ldr	r3, [pc, #260]	; (8011818 <tcp_process+0x29c>)
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801171a:	4b44      	ldr	r3, [pc, #272]	; (801182c <tcp_process+0x2b0>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	89db      	ldrh	r3, [r3, #14]
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011734:	4b39      	ldr	r3, [pc, #228]	; (801181c <tcp_process+0x2a0>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	1e5a      	subs	r2, r3, #1
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2204      	movs	r2, #4
 8011742:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	3304      	adds	r3, #4
 801174c:	4618      	mov	r0, r3
 801174e:	f004 fde1 	bl	8016314 <ip4_route>
 8011752:	4601      	mov	r1, r0
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	3304      	adds	r3, #4
 8011758:	461a      	mov	r2, r3
 801175a:	4620      	mov	r0, r4
 801175c:	f7ff f88c 	bl	8010878 <tcp_eff_send_mss_netif>
 8011760:	4603      	mov	r3, r0
 8011762:	461a      	mov	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801176c:	009a      	lsls	r2, r3, #2
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	f241 111c 	movw	r1, #4380	; 0x111c
 8011778:	428b      	cmp	r3, r1
 801177a:	bf38      	it	cc
 801177c:	460b      	movcc	r3, r1
 801177e:	429a      	cmp	r2, r3
 8011780:	d204      	bcs.n	801178c <tcp_process+0x210>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011786:	009b      	lsls	r3, r3, #2
 8011788:	b29b      	uxth	r3, r3
 801178a:	e00d      	b.n	80117a8 <tcp_process+0x22c>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	f241 121c 	movw	r2, #4380	; 0x111c
 8011796:	4293      	cmp	r3, r2
 8011798:	d904      	bls.n	80117a4 <tcp_process+0x228>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	e001      	b.n	80117a8 <tcp_process+0x22c>
 80117a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <tcp_process+0x24a>
 80117b8:	4b13      	ldr	r3, [pc, #76]	; (8011808 <tcp_process+0x28c>)
 80117ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80117be:	491c      	ldr	r1, [pc, #112]	; (8011830 <tcp_process+0x2b4>)
 80117c0:	4813      	ldr	r0, [pc, #76]	; (8011810 <tcp_process+0x294>)
 80117c2:	f006 fb35 	bl	8017e30 <iprintf>
        --pcb->snd_queuelen;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117cc:	3b01      	subs	r3, #1
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d12a      	bne.n	8011838 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d106      	bne.n	80117fc <tcp_process+0x280>
 80117ee:	4b06      	ldr	r3, [pc, #24]	; (8011808 <tcp_process+0x28c>)
 80117f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80117f4:	490f      	ldr	r1, [pc, #60]	; (8011834 <tcp_process+0x2b8>)
 80117f6:	4806      	ldr	r0, [pc, #24]	; (8011810 <tcp_process+0x294>)
 80117f8:	f006 fb1a 	bl	8017e30 <iprintf>
          pcb->unsent = rseg->next;
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	66da      	str	r2, [r3, #108]	; 0x6c
 8011804:	e01c      	b.n	8011840 <tcp_process+0x2c4>
 8011806:	bf00      	nop
 8011808:	0801cbf4 	.word	0x0801cbf4
 801180c:	0801ce2c 	.word	0x0801ce2c
 8011810:	0801cc40 	.word	0x0801cc40
 8011814:	20011bf4 	.word	0x20011bf4
 8011818:	20011bec 	.word	0x20011bec
 801181c:	20011be8 	.word	0x20011be8
 8011820:	0801ce48 	.word	0x0801ce48
 8011824:	20011bf5 	.word	0x20011bf5
 8011828:	20011bb0 	.word	0x20011bb0
 801182c:	20011bd8 	.word	0x20011bd8
 8011830:	0801ce68 	.word	0x0801ce68
 8011834:	0801ce80 	.word	0x0801ce80
        } else {
          pcb->unacked = rseg->next;
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011840:	69f8      	ldr	r0, [r7, #28]
 8011842:	f7fe fc54 	bl	80100ee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801184a:	2b00      	cmp	r3, #0
 801184c:	d104      	bne.n	8011858 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011854:	861a      	strh	r2, [r3, #48]	; 0x30
 8011856:	e006      	b.n	8011866 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2200      	movs	r2, #0
 801185c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2200      	movs	r2, #0
 8011862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00a      	beq.n	8011886 <tcp_process+0x30a>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	6910      	ldr	r0, [r2, #16]
 801187a:	2200      	movs	r2, #0
 801187c:	6879      	ldr	r1, [r7, #4]
 801187e:	4798      	blx	r3
 8011880:	4603      	mov	r3, r0
 8011882:	76bb      	strb	r3, [r7, #26]
 8011884:	e001      	b.n	801188a <tcp_process+0x30e>
 8011886:	2300      	movs	r3, #0
 8011888:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801188a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801188e:	f113 0f0d 	cmn.w	r3, #13
 8011892:	d102      	bne.n	801189a <tcp_process+0x31e>
          return ERR_ABRT;
 8011894:	f06f 030c 	mvn.w	r3, #12
 8011898:	e250      	b.n	8011d3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	8b5b      	ldrh	r3, [r3, #26]
 801189e:	f043 0302 	orr.w	r3, r3, #2
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80118a8:	e23a      	b.n	8011d20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80118aa:	4b98      	ldr	r3, [pc, #608]	; (8011b0c <tcp_process+0x590>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	f003 0310 	and.w	r3, r3, #16
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f000 8234 	beq.w	8011d20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118b8:	4b95      	ldr	r3, [pc, #596]	; (8011b10 <tcp_process+0x594>)
 80118ba:	6819      	ldr	r1, [r3, #0]
 80118bc:	4b95      	ldr	r3, [pc, #596]	; (8011b14 <tcp_process+0x598>)
 80118be:	881b      	ldrh	r3, [r3, #0]
 80118c0:	461a      	mov	r2, r3
 80118c2:	4b95      	ldr	r3, [pc, #596]	; (8011b18 <tcp_process+0x59c>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118c8:	4b94      	ldr	r3, [pc, #592]	; (8011b1c <tcp_process+0x5a0>)
 80118ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118cc:	885b      	ldrh	r3, [r3, #2]
 80118ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80118d0:	4a92      	ldr	r2, [pc, #584]	; (8011b1c <tcp_process+0x5a0>)
 80118d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80118d4:	8812      	ldrh	r2, [r2, #0]
 80118d6:	b292      	uxth	r2, r2
 80118d8:	9202      	str	r2, [sp, #8]
 80118da:	9301      	str	r3, [sp, #4]
 80118dc:	4b90      	ldr	r3, [pc, #576]	; (8011b20 <tcp_process+0x5a4>)
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	4b90      	ldr	r3, [pc, #576]	; (8011b24 <tcp_process+0x5a8>)
 80118e2:	4602      	mov	r2, r0
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f003 f8ff 	bl	8014ae8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118f0:	2b05      	cmp	r3, #5
 80118f2:	f200 8215 	bhi.w	8011d20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f002 feb9 	bl	8014674 <tcp_rexmit_rto>
      break;
 8011902:	e20d      	b.n	8011d20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011904:	4b81      	ldr	r3, [pc, #516]	; (8011b0c <tcp_process+0x590>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	f003 0310 	and.w	r3, r3, #16
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 80a1 	beq.w	8011a54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011912:	4b7f      	ldr	r3, [pc, #508]	; (8011b10 <tcp_process+0x594>)
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	3b01      	subs	r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	db7e      	blt.n	8011a20 <tcp_process+0x4a4>
 8011922:	4b7b      	ldr	r3, [pc, #492]	; (8011b10 <tcp_process+0x594>)
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	dc77      	bgt.n	8011a20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2204      	movs	r2, #4
 8011934:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801193a:	2b00      	cmp	r3, #0
 801193c:	d102      	bne.n	8011944 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801193e:	23fa      	movs	r3, #250	; 0xfa
 8011940:	76bb      	strb	r3, [r7, #26]
 8011942:	e01d      	b.n	8011980 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011948:	699b      	ldr	r3, [r3, #24]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <tcp_process+0x3e0>
 801194e:	4b76      	ldr	r3, [pc, #472]	; (8011b28 <tcp_process+0x5ac>)
 8011950:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011954:	4975      	ldr	r1, [pc, #468]	; (8011b2c <tcp_process+0x5b0>)
 8011956:	4876      	ldr	r0, [pc, #472]	; (8011b30 <tcp_process+0x5b4>)
 8011958:	f006 fa6a 	bl	8017e30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00a      	beq.n	801197c <tcp_process+0x400>
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801196a:	699b      	ldr	r3, [r3, #24]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	6910      	ldr	r0, [r2, #16]
 8011970:	2200      	movs	r2, #0
 8011972:	6879      	ldr	r1, [r7, #4]
 8011974:	4798      	blx	r3
 8011976:	4603      	mov	r3, r0
 8011978:	76bb      	strb	r3, [r7, #26]
 801197a:	e001      	b.n	8011980 <tcp_process+0x404>
 801197c:	23f0      	movs	r3, #240	; 0xf0
 801197e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011980:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00a      	beq.n	801199e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011988:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801198c:	f113 0f0d 	cmn.w	r3, #13
 8011990:	d002      	beq.n	8011998 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7fd fcca 	bl	800f32c <tcp_abort>
            }
            return ERR_ABRT;
 8011998:	f06f 030c 	mvn.w	r3, #12
 801199c:	e1ce      	b.n	8011d3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 fae0 	bl	8011f64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80119a4:	4b63      	ldr	r3, [pc, #396]	; (8011b34 <tcp_process+0x5b8>)
 80119a6:	881b      	ldrh	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d005      	beq.n	80119b8 <tcp_process+0x43c>
            recv_acked--;
 80119ac:	4b61      	ldr	r3, [pc, #388]	; (8011b34 <tcp_process+0x5b8>)
 80119ae:	881b      	ldrh	r3, [r3, #0]
 80119b0:	3b01      	subs	r3, #1
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	4b5f      	ldr	r3, [pc, #380]	; (8011b34 <tcp_process+0x5b8>)
 80119b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119bc:	009a      	lsls	r2, r3, #2
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80119c8:	428b      	cmp	r3, r1
 80119ca:	bf38      	it	cc
 80119cc:	460b      	movcc	r3, r1
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d204      	bcs.n	80119dc <tcp_process+0x460>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	b29b      	uxth	r3, r3
 80119da:	e00d      	b.n	80119f8 <tcp_process+0x47c>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80119e6:	4293      	cmp	r3, r2
 80119e8:	d904      	bls.n	80119f4 <tcp_process+0x478>
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	e001      	b.n	80119f8 <tcp_process+0x47c>
 80119f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80119fe:	4b4e      	ldr	r3, [pc, #312]	; (8011b38 <tcp_process+0x5bc>)
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	f003 0320 	and.w	r3, r3, #32
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d037      	beq.n	8011a7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	8b5b      	ldrh	r3, [r3, #26]
 8011a0e:	f043 0302 	orr.w	r3, r3, #2
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2207      	movs	r2, #7
 8011a1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011a1e:	e02c      	b.n	8011a7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a20:	4b3b      	ldr	r3, [pc, #236]	; (8011b10 <tcp_process+0x594>)
 8011a22:	6819      	ldr	r1, [r3, #0]
 8011a24:	4b3b      	ldr	r3, [pc, #236]	; (8011b14 <tcp_process+0x598>)
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4b3b      	ldr	r3, [pc, #236]	; (8011b18 <tcp_process+0x59c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a30:	4b3a      	ldr	r3, [pc, #232]	; (8011b1c <tcp_process+0x5a0>)
 8011a32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a34:	885b      	ldrh	r3, [r3, #2]
 8011a36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a38:	4a38      	ldr	r2, [pc, #224]	; (8011b1c <tcp_process+0x5a0>)
 8011a3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a3c:	8812      	ldrh	r2, [r2, #0]
 8011a3e:	b292      	uxth	r2, r2
 8011a40:	9202      	str	r2, [sp, #8]
 8011a42:	9301      	str	r3, [sp, #4]
 8011a44:	4b36      	ldr	r3, [pc, #216]	; (8011b20 <tcp_process+0x5a4>)
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	4b36      	ldr	r3, [pc, #216]	; (8011b24 <tcp_process+0x5a8>)
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f003 f84b 	bl	8014ae8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011a52:	e167      	b.n	8011d24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011a54:	4b2d      	ldr	r3, [pc, #180]	; (8011b0c <tcp_process+0x590>)
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	f003 0302 	and.w	r3, r3, #2
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 8161 	beq.w	8011d24 <tcp_process+0x7a8>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a66:	1e5a      	subs	r2, r3, #1
 8011a68:	4b2b      	ldr	r3, [pc, #172]	; (8011b18 <tcp_process+0x59c>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	f040 8159 	bne.w	8011d24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f002 fe20 	bl	80146b8 <tcp_rexmit>
      break;
 8011a78:	e154      	b.n	8011d24 <tcp_process+0x7a8>
 8011a7a:	e153      	b.n	8011d24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fa71 	bl	8011f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011a82:	4b2d      	ldr	r3, [pc, #180]	; (8011b38 <tcp_process+0x5bc>)
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	f003 0320 	and.w	r3, r3, #32
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 814c 	beq.w	8011d28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	8b5b      	ldrh	r3, [r3, #26]
 8011a94:	f043 0302 	orr.w	r3, r3, #2
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2207      	movs	r2, #7
 8011aa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011aa4:	e140      	b.n	8011d28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fa5c 	bl	8011f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011aac:	4b22      	ldr	r3, [pc, #136]	; (8011b38 <tcp_process+0x5bc>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	f003 0320 	and.w	r3, r3, #32
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d071      	beq.n	8011b9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ab8:	4b14      	ldr	r3, [pc, #80]	; (8011b0c <tcp_process+0x590>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	f003 0310 	and.w	r3, r3, #16
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d060      	beq.n	8011b86 <tcp_process+0x60a>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ac8:	4b11      	ldr	r3, [pc, #68]	; (8011b10 <tcp_process+0x594>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d15a      	bne.n	8011b86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d156      	bne.n	8011b86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	f043 0302 	orr.w	r3, r3, #2
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7fe fdbc 	bl	8010664 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011aec:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <tcp_process+0x5c0>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d105      	bne.n	8011b02 <tcp_process+0x586>
 8011af6:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <tcp_process+0x5c0>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	4a0f      	ldr	r2, [pc, #60]	; (8011b3c <tcp_process+0x5c0>)
 8011afe:	6013      	str	r3, [r2, #0]
 8011b00:	e02e      	b.n	8011b60 <tcp_process+0x5e4>
 8011b02:	4b0e      	ldr	r3, [pc, #56]	; (8011b3c <tcp_process+0x5c0>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e027      	b.n	8011b5a <tcp_process+0x5de>
 8011b0a:	bf00      	nop
 8011b0c:	20011bf4 	.word	0x20011bf4
 8011b10:	20011bec 	.word	0x20011bec
 8011b14:	20011bf2 	.word	0x20011bf2
 8011b18:	20011be8 	.word	0x20011be8
 8011b1c:	20011bd8 	.word	0x20011bd8
 8011b20:	20009b34 	.word	0x20009b34
 8011b24:	20009b38 	.word	0x20009b38
 8011b28:	0801cbf4 	.word	0x0801cbf4
 8011b2c:	0801ce94 	.word	0x0801ce94
 8011b30:	0801cc40 	.word	0x0801cc40
 8011b34:	20011bf0 	.word	0x20011bf0
 8011b38:	20011bf5 	.word	0x20011bf5
 8011b3c:	20011bbc 	.word	0x20011bbc
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	687a      	ldr	r2, [r7, #4]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d104      	bne.n	8011b54 <tcp_process+0x5d8>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	68da      	ldr	r2, [r3, #12]
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	60da      	str	r2, [r3, #12]
 8011b52:	e005      	b.n	8011b60 <tcp_process+0x5e4>
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d1ef      	bne.n	8011b40 <tcp_process+0x5c4>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	60da      	str	r2, [r3, #12]
 8011b66:	4b77      	ldr	r3, [pc, #476]	; (8011d44 <tcp_process+0x7c8>)
 8011b68:	2201      	movs	r2, #1
 8011b6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	220a      	movs	r2, #10
 8011b70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011b72:	4b75      	ldr	r3, [pc, #468]	; (8011d48 <tcp_process+0x7cc>)
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	60da      	str	r2, [r3, #12]
 8011b7a:	4a73      	ldr	r2, [pc, #460]	; (8011d48 <tcp_process+0x7cc>)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6013      	str	r3, [r2, #0]
 8011b80:	f003 f974 	bl	8014e6c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011b84:	e0d2      	b.n	8011d2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	8b5b      	ldrh	r3, [r3, #26]
 8011b8a:	f043 0302 	orr.w	r3, r3, #2
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2208      	movs	r2, #8
 8011b98:	751a      	strb	r2, [r3, #20]
      break;
 8011b9a:	e0c7      	b.n	8011d2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b9c:	4b6b      	ldr	r3, [pc, #428]	; (8011d4c <tcp_process+0x7d0>)
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	f003 0310 	and.w	r3, r3, #16
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f000 80c1 	beq.w	8011d2c <tcp_process+0x7b0>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bae:	4b68      	ldr	r3, [pc, #416]	; (8011d50 <tcp_process+0x7d4>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	f040 80ba 	bne.w	8011d2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f040 80b5 	bne.w	8011d2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2206      	movs	r2, #6
 8011bc6:	751a      	strb	r2, [r3, #20]
      break;
 8011bc8:	e0b0      	b.n	8011d2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 f9ca 	bl	8011f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011bd0:	4b60      	ldr	r3, [pc, #384]	; (8011d54 <tcp_process+0x7d8>)
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	f003 0320 	and.w	r3, r3, #32
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f000 80a9 	beq.w	8011d30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	8b5b      	ldrh	r3, [r3, #26]
 8011be2:	f043 0302 	orr.w	r3, r3, #2
 8011be6:	b29a      	uxth	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f7fe fd39 	bl	8010664 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011bf2:	4b59      	ldr	r3, [pc, #356]	; (8011d58 <tcp_process+0x7dc>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d105      	bne.n	8011c08 <tcp_process+0x68c>
 8011bfc:	4b56      	ldr	r3, [pc, #344]	; (8011d58 <tcp_process+0x7dc>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	4a55      	ldr	r2, [pc, #340]	; (8011d58 <tcp_process+0x7dc>)
 8011c04:	6013      	str	r3, [r2, #0]
 8011c06:	e013      	b.n	8011c30 <tcp_process+0x6b4>
 8011c08:	4b53      	ldr	r3, [pc, #332]	; (8011d58 <tcp_process+0x7dc>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	613b      	str	r3, [r7, #16]
 8011c0e:	e00c      	b.n	8011c2a <tcp_process+0x6ae>
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d104      	bne.n	8011c24 <tcp_process+0x6a8>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	68da      	ldr	r2, [r3, #12]
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	60da      	str	r2, [r3, #12]
 8011c22:	e005      	b.n	8011c30 <tcp_process+0x6b4>
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	613b      	str	r3, [r7, #16]
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d1ef      	bne.n	8011c10 <tcp_process+0x694>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2200      	movs	r2, #0
 8011c34:	60da      	str	r2, [r3, #12]
 8011c36:	4b43      	ldr	r3, [pc, #268]	; (8011d44 <tcp_process+0x7c8>)
 8011c38:	2201      	movs	r2, #1
 8011c3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	220a      	movs	r2, #10
 8011c40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011c42:	4b41      	ldr	r3, [pc, #260]	; (8011d48 <tcp_process+0x7cc>)
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	60da      	str	r2, [r3, #12]
 8011c4a:	4a3f      	ldr	r2, [pc, #252]	; (8011d48 <tcp_process+0x7cc>)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	f003 f90c 	bl	8014e6c <tcp_timer_needed>
      }
      break;
 8011c54:	e06c      	b.n	8011d30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 f984 	bl	8011f64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011c5c:	4b3b      	ldr	r3, [pc, #236]	; (8011d4c <tcp_process+0x7d0>)
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	f003 0310 	and.w	r3, r3, #16
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d065      	beq.n	8011d34 <tcp_process+0x7b8>
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c6c:	4b38      	ldr	r3, [pc, #224]	; (8011d50 <tcp_process+0x7d4>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d15f      	bne.n	8011d34 <tcp_process+0x7b8>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d15b      	bne.n	8011d34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7fe fcf1 	bl	8010664 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011c82:	4b35      	ldr	r3, [pc, #212]	; (8011d58 <tcp_process+0x7dc>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d105      	bne.n	8011c98 <tcp_process+0x71c>
 8011c8c:	4b32      	ldr	r3, [pc, #200]	; (8011d58 <tcp_process+0x7dc>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	4a31      	ldr	r2, [pc, #196]	; (8011d58 <tcp_process+0x7dc>)
 8011c94:	6013      	str	r3, [r2, #0]
 8011c96:	e013      	b.n	8011cc0 <tcp_process+0x744>
 8011c98:	4b2f      	ldr	r3, [pc, #188]	; (8011d58 <tcp_process+0x7dc>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	60fb      	str	r3, [r7, #12]
 8011c9e:	e00c      	b.n	8011cba <tcp_process+0x73e>
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d104      	bne.n	8011cb4 <tcp_process+0x738>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68da      	ldr	r2, [r3, #12]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	60da      	str	r2, [r3, #12]
 8011cb2:	e005      	b.n	8011cc0 <tcp_process+0x744>
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	60fb      	str	r3, [r7, #12]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1ef      	bne.n	8011ca0 <tcp_process+0x724>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	60da      	str	r2, [r3, #12]
 8011cc6:	4b1f      	ldr	r3, [pc, #124]	; (8011d44 <tcp_process+0x7c8>)
 8011cc8:	2201      	movs	r2, #1
 8011cca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	220a      	movs	r2, #10
 8011cd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011cd2:	4b1d      	ldr	r3, [pc, #116]	; (8011d48 <tcp_process+0x7cc>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	60da      	str	r2, [r3, #12]
 8011cda:	4a1b      	ldr	r2, [pc, #108]	; (8011d48 <tcp_process+0x7cc>)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	f003 f8c4 	bl	8014e6c <tcp_timer_needed>
      }
      break;
 8011ce4:	e026      	b.n	8011d34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f000 f93c 	bl	8011f64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011cec:	4b17      	ldr	r3, [pc, #92]	; (8011d4c <tcp_process+0x7d0>)
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	f003 0310 	and.w	r3, r3, #16
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d01f      	beq.n	8011d38 <tcp_process+0x7bc>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011cfc:	4b14      	ldr	r3, [pc, #80]	; (8011d50 <tcp_process+0x7d4>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d119      	bne.n	8011d38 <tcp_process+0x7bc>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d115      	bne.n	8011d38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011d0c:	4b11      	ldr	r3, [pc, #68]	; (8011d54 <tcp_process+0x7d8>)
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	f043 0310 	orr.w	r3, r3, #16
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	4b0f      	ldr	r3, [pc, #60]	; (8011d54 <tcp_process+0x7d8>)
 8011d18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011d1a:	e00d      	b.n	8011d38 <tcp_process+0x7bc>
    default:
      break;
 8011d1c:	bf00      	nop
 8011d1e:	e00c      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d20:	bf00      	nop
 8011d22:	e00a      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d24:	bf00      	nop
 8011d26:	e008      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d28:	bf00      	nop
 8011d2a:	e006      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d2c:	bf00      	nop
 8011d2e:	e004      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d30:	bf00      	nop
 8011d32:	e002      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d34:	bf00      	nop
 8011d36:	e000      	b.n	8011d3a <tcp_process+0x7be>
      break;
 8011d38:	bf00      	nop
  }
  return ERR_OK;
 8011d3a:	2300      	movs	r3, #0
}
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3724      	adds	r7, #36	; 0x24
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd90      	pop	{r4, r7, pc}
 8011d44:	20011bc4 	.word	0x20011bc4
 8011d48:	20011bc0 	.word	0x20011bc0
 8011d4c:	20011bf4 	.word	0x20011bf4
 8011d50:	20011bec 	.word	0x20011bec
 8011d54:	20011bf5 	.word	0x20011bf5
 8011d58:	20011bbc 	.word	0x20011bbc

08011d5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011d5c:	b590      	push	{r4, r7, lr}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d106      	bne.n	8011d7a <tcp_oos_insert_segment+0x1e>
 8011d6c:	4b3b      	ldr	r3, [pc, #236]	; (8011e5c <tcp_oos_insert_segment+0x100>)
 8011d6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011d72:	493b      	ldr	r1, [pc, #236]	; (8011e60 <tcp_oos_insert_segment+0x104>)
 8011d74:	483b      	ldr	r0, [pc, #236]	; (8011e64 <tcp_oos_insert_segment+0x108>)
 8011d76:	f006 f85b 	bl	8017e30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	899b      	ldrh	r3, [r3, #12]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fa ffdc 	bl	800cd40 <lwip_htons>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	f003 0301 	and.w	r3, r3, #1
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d028      	beq.n	8011de6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011d94:	6838      	ldr	r0, [r7, #0]
 8011d96:	f7fe f995 	bl	80100c4 <tcp_segs_free>
    next = NULL;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	603b      	str	r3, [r7, #0]
 8011d9e:	e056      	b.n	8011e4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	899b      	ldrh	r3, [r3, #12]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7fa ffc9 	bl	800cd40 <lwip_htons>
 8011dae:	4603      	mov	r3, r0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	f003 0301 	and.w	r3, r3, #1
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00d      	beq.n	8011dd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	899b      	ldrh	r3, [r3, #12]
 8011dc0:	b29c      	uxth	r4, r3
 8011dc2:	2001      	movs	r0, #1
 8011dc4:	f7fa ffbc 	bl	800cd40 <lwip_htons>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	461a      	mov	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	4322      	orrs	r2, r4
 8011dd2:	b292      	uxth	r2, r2
 8011dd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	f7fe f984 	bl	80100ee <tcp_seg_free>
    while (next &&
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00e      	beq.n	8011e0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	891b      	ldrh	r3, [r3, #8]
 8011df0:	461a      	mov	r2, r3
 8011df2:	4b1d      	ldr	r3, [pc, #116]	; (8011e68 <tcp_oos_insert_segment+0x10c>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	441a      	add	r2, r3
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	6839      	ldr	r1, [r7, #0]
 8011e00:	8909      	ldrh	r1, [r1, #8]
 8011e02:	440b      	add	r3, r1
 8011e04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	daca      	bge.n	8011da0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d01e      	beq.n	8011e4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	891b      	ldrh	r3, [r3, #8]
 8011e14:	461a      	mov	r2, r3
 8011e16:	4b14      	ldr	r3, [pc, #80]	; (8011e68 <tcp_oos_insert_segment+0x10c>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	441a      	add	r2, r3
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	dd12      	ble.n	8011e4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	4b0d      	ldr	r3, [pc, #52]	; (8011e68 <tcp_oos_insert_segment+0x10c>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	685a      	ldr	r2, [r3, #4]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	891b      	ldrh	r3, [r3, #8]
 8011e46:	4619      	mov	r1, r3
 8011e48:	4610      	mov	r0, r2
 8011e4a:	f7fc faf9 	bl	800e440 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	683a      	ldr	r2, [r7, #0]
 8011e52:	601a      	str	r2, [r3, #0]
}
 8011e54:	bf00      	nop
 8011e56:	3714      	adds	r7, #20
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd90      	pop	{r4, r7, pc}
 8011e5c:	0801cbf4 	.word	0x0801cbf4
 8011e60:	0801ceb4 	.word	0x0801ceb4
 8011e64:	0801cc40 	.word	0x0801cc40
 8011e68:	20011be8 	.word	0x20011be8

08011e6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011e6c:	b5b0      	push	{r4, r5, r7, lr}
 8011e6e:	b086      	sub	sp, #24
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	607a      	str	r2, [r7, #4]
 8011e78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011e7a:	e03e      	b.n	8011efa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fc fcec 	bl	800e868 <pbuf_clen>
 8011e90:	4603      	mov	r3, r0
 8011e92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e9a:	8a7a      	ldrh	r2, [r7, #18]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d906      	bls.n	8011eae <tcp_free_acked_segments+0x42>
 8011ea0:	4b2a      	ldr	r3, [pc, #168]	; (8011f4c <tcp_free_acked_segments+0xe0>)
 8011ea2:	f240 4257 	movw	r2, #1111	; 0x457
 8011ea6:	492a      	ldr	r1, [pc, #168]	; (8011f50 <tcp_free_acked_segments+0xe4>)
 8011ea8:	482a      	ldr	r0, [pc, #168]	; (8011f54 <tcp_free_acked_segments+0xe8>)
 8011eaa:	f005 ffc1 	bl	8017e30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011eb4:	8a7b      	ldrh	r3, [r7, #18]
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	891a      	ldrh	r2, [r3, #8]
 8011ec4:	4b24      	ldr	r3, [pc, #144]	; (8011f58 <tcp_free_acked_segments+0xec>)
 8011ec6:	881b      	ldrh	r3, [r3, #0]
 8011ec8:	4413      	add	r3, r2
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	4b22      	ldr	r3, [pc, #136]	; (8011f58 <tcp_free_acked_segments+0xec>)
 8011ece:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ed0:	6978      	ldr	r0, [r7, #20]
 8011ed2:	f7fe f90c 	bl	80100ee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00c      	beq.n	8011efa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d109      	bne.n	8011efa <tcp_free_acked_segments+0x8e>
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d106      	bne.n	8011efa <tcp_free_acked_segments+0x8e>
 8011eec:	4b17      	ldr	r3, [pc, #92]	; (8011f4c <tcp_free_acked_segments+0xe0>)
 8011eee:	f240 4261 	movw	r2, #1121	; 0x461
 8011ef2:	491a      	ldr	r1, [pc, #104]	; (8011f5c <tcp_free_acked_segments+0xf0>)
 8011ef4:	4817      	ldr	r0, [pc, #92]	; (8011f54 <tcp_free_acked_segments+0xe8>)
 8011ef6:	f005 ff9b 	bl	8017e30 <iprintf>
  while (seg_list != NULL &&
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d020      	beq.n	8011f42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fa ff2f 	bl	800cd6a <lwip_htonl>
 8011f0c:	4604      	mov	r4, r0
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	891b      	ldrh	r3, [r3, #8]
 8011f12:	461d      	mov	r5, r3
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	899b      	ldrh	r3, [r3, #12]
 8011f1a:	b29b      	uxth	r3, r3
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7fa ff0f 	bl	800cd40 <lwip_htons>
 8011f22:	4603      	mov	r3, r0
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	f003 0303 	and.w	r3, r3, #3
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <tcp_free_acked_segments+0xc6>
 8011f2e:	2301      	movs	r3, #1
 8011f30:	e000      	b.n	8011f34 <tcp_free_acked_segments+0xc8>
 8011f32:	2300      	movs	r3, #0
 8011f34:	442b      	add	r3, r5
 8011f36:	18e2      	adds	r2, r4, r3
 8011f38:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <tcp_free_acked_segments+0xf4>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	dd9c      	ble.n	8011e7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011f42:	68bb      	ldr	r3, [r7, #8]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3718      	adds	r7, #24
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8011f4c:	0801cbf4 	.word	0x0801cbf4
 8011f50:	0801cedc 	.word	0x0801cedc
 8011f54:	0801cc40 	.word	0x0801cc40
 8011f58:	20011bf0 	.word	0x20011bf0
 8011f5c:	0801cf04 	.word	0x0801cf04
 8011f60:	20011bec 	.word	0x20011bec

08011f64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011f64:	b5b0      	push	{r4, r5, r7, lr}
 8011f66:	b094      	sub	sp, #80	; 0x50
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d106      	bne.n	8011f84 <tcp_receive+0x20>
 8011f76:	4b91      	ldr	r3, [pc, #580]	; (80121bc <tcp_receive+0x258>)
 8011f78:	f240 427b 	movw	r2, #1147	; 0x47b
 8011f7c:	4990      	ldr	r1, [pc, #576]	; (80121c0 <tcp_receive+0x25c>)
 8011f7e:	4891      	ldr	r0, [pc, #580]	; (80121c4 <tcp_receive+0x260>)
 8011f80:	f005 ff56 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	7d1b      	ldrb	r3, [r3, #20]
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d806      	bhi.n	8011f9a <tcp_receive+0x36>
 8011f8c:	4b8b      	ldr	r3, [pc, #556]	; (80121bc <tcp_receive+0x258>)
 8011f8e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011f92:	498d      	ldr	r1, [pc, #564]	; (80121c8 <tcp_receive+0x264>)
 8011f94:	488b      	ldr	r0, [pc, #556]	; (80121c4 <tcp_receive+0x260>)
 8011f96:	f005 ff4b 	bl	8017e30 <iprintf>

  if (flags & TCP_ACK) {
 8011f9a:	4b8c      	ldr	r3, [pc, #560]	; (80121cc <tcp_receive+0x268>)
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	f003 0310 	and.w	r3, r3, #16
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 8264 	beq.w	8012470 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fae:	461a      	mov	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fb4:	4413      	add	r3, r2
 8011fb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fbc:	4b84      	ldr	r3, [pc, #528]	; (80121d0 <tcp_receive+0x26c>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	db1b      	blt.n	8011ffe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011fca:	4b81      	ldr	r3, [pc, #516]	; (80121d0 <tcp_receive+0x26c>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d106      	bne.n	8011fe0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011fd6:	4b7f      	ldr	r3, [pc, #508]	; (80121d4 <tcp_receive+0x270>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	1ad3      	subs	r3, r2, r3
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	db0e      	blt.n	8011ffe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011fe4:	4b7b      	ldr	r3, [pc, #492]	; (80121d4 <tcp_receive+0x270>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d125      	bne.n	8012038 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011fec:	4b7a      	ldr	r3, [pc, #488]	; (80121d8 <tcp_receive+0x274>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	89db      	ldrh	r3, [r3, #14]
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d91c      	bls.n	8012038 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011ffe:	4b76      	ldr	r3, [pc, #472]	; (80121d8 <tcp_receive+0x274>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	89db      	ldrh	r3, [r3, #14]
 8012004:	b29a      	uxth	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012018:	429a      	cmp	r2, r3
 801201a:	d205      	bcs.n	8012028 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012028:	4b69      	ldr	r3, [pc, #420]	; (80121d0 <tcp_receive+0x26c>)
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012030:	4b68      	ldr	r3, [pc, #416]	; (80121d4 <tcp_receive+0x270>)
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012038:	4b66      	ldr	r3, [pc, #408]	; (80121d4 <tcp_receive+0x270>)
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	dc58      	bgt.n	80120f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012046:	4b65      	ldr	r3, [pc, #404]	; (80121dc <tcp_receive+0x278>)
 8012048:	881b      	ldrh	r3, [r3, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d14b      	bne.n	80120e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012058:	4413      	add	r3, r2
 801205a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801205c:	429a      	cmp	r2, r3
 801205e:	d142      	bne.n	80120e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012066:	2b00      	cmp	r3, #0
 8012068:	db3d      	blt.n	80120e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801206e:	4b59      	ldr	r3, [pc, #356]	; (80121d4 <tcp_receive+0x270>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	429a      	cmp	r2, r3
 8012074:	d137      	bne.n	80120e6 <tcp_receive+0x182>
              found_dupack = 1;
 8012076:	2301      	movs	r3, #1
 8012078:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012080:	2bff      	cmp	r3, #255	; 0xff
 8012082:	d007      	beq.n	8012094 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801208a:	3301      	adds	r3, #1
 801208c:	b2da      	uxtb	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801209a:	2b03      	cmp	r3, #3
 801209c:	d91b      	bls.n	80120d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a8:	4413      	add	r3, r2
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d30a      	bcc.n	80120cc <tcp_receive+0x168>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c0:	4413      	add	r3, r2
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80120ca:	e004      	b.n	80120d6 <tcp_receive+0x172>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80120dc:	2b02      	cmp	r3, #2
 80120de:	d902      	bls.n	80120e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f002 fb55 	bl	8014790 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80120e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f040 8161 	bne.w	80123b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80120f6:	e15b      	b.n	80123b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120f8:	4b36      	ldr	r3, [pc, #216]	; (80121d4 <tcp_receive+0x270>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012100:	1ad3      	subs	r3, r2, r3
 8012102:	3b01      	subs	r3, #1
 8012104:	2b00      	cmp	r3, #0
 8012106:	f2c0 814e 	blt.w	80123a6 <tcp_receive+0x442>
 801210a:	4b32      	ldr	r3, [pc, #200]	; (80121d4 <tcp_receive+0x270>)
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	f300 8146 	bgt.w	80123a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	8b5b      	ldrh	r3, [r3, #26]
 801211e:	f003 0304 	and.w	r3, r3, #4
 8012122:	2b00      	cmp	r3, #0
 8012124:	d010      	beq.n	8012148 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8b5b      	ldrh	r3, [r3, #26]
 801212a:	f023 0304 	bic.w	r3, r3, #4
 801212e:	b29a      	uxth	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	2200      	movs	r2, #0
 801214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012156:	10db      	asrs	r3, r3, #3
 8012158:	b21b      	sxth	r3, r3
 801215a:	b29a      	uxth	r2, r3
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012162:	b29b      	uxth	r3, r3
 8012164:	4413      	add	r3, r2
 8012166:	b29b      	uxth	r3, r3
 8012168:	b21a      	sxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012170:	4b18      	ldr	r3, [pc, #96]	; (80121d4 <tcp_receive+0x270>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	b29a      	uxth	r2, r3
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801217a:	b29b      	uxth	r3, r3
 801217c:	1ad3      	subs	r3, r2, r3
 801217e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012188:	4b12      	ldr	r3, [pc, #72]	; (80121d4 <tcp_receive+0x270>)
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	7d1b      	ldrb	r3, [r3, #20]
 8012194:	2b03      	cmp	r3, #3
 8012196:	f240 8097 	bls.w	80122c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d245      	bcs.n	8012236 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	8b5b      	ldrh	r3, [r3, #26]
 80121ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d014      	beq.n	80121e0 <tcp_receive+0x27c>
 80121b6:	2301      	movs	r3, #1
 80121b8:	e013      	b.n	80121e2 <tcp_receive+0x27e>
 80121ba:	bf00      	nop
 80121bc:	0801cbf4 	.word	0x0801cbf4
 80121c0:	0801cf24 	.word	0x0801cf24
 80121c4:	0801cc40 	.word	0x0801cc40
 80121c8:	0801cf40 	.word	0x0801cf40
 80121cc:	20011bf4 	.word	0x20011bf4
 80121d0:	20011be8 	.word	0x20011be8
 80121d4:	20011bec 	.word	0x20011bec
 80121d8:	20011bd8 	.word	0x20011bd8
 80121dc:	20011bf2 	.word	0x20011bf2
 80121e0:	2302      	movs	r3, #2
 80121e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80121e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121f0:	fb12 f303 	smulbb	r3, r2, r3
 80121f4:	b29b      	uxth	r3, r3
 80121f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80121f8:	4293      	cmp	r3, r2
 80121fa:	bf28      	it	cs
 80121fc:	4613      	movcs	r3, r2
 80121fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012208:	4413      	add	r3, r2
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012212:	429a      	cmp	r2, r3
 8012214:	d309      	bcc.n	801222a <tcp_receive+0x2c6>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801221c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801221e:	4413      	add	r3, r2
 8012220:	b29a      	uxth	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012228:	e04e      	b.n	80122c8 <tcp_receive+0x364>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012234:	e048      	b.n	80122c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801223c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801223e:	4413      	add	r3, r2
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012248:	429a      	cmp	r2, r3
 801224a:	d309      	bcc.n	8012260 <tcp_receive+0x2fc>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012252:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012254:	4413      	add	r3, r2
 8012256:	b29a      	uxth	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801225e:	e004      	b.n	801226a <tcp_receive+0x306>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012276:	429a      	cmp	r2, r3
 8012278:	d326      	bcc.n	80122c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012286:	1ad3      	subs	r3, r2, r3
 8012288:	b29a      	uxth	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801229a:	4413      	add	r3, r2
 801229c:	b29a      	uxth	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d30a      	bcc.n	80122be <tcp_receive+0x35a>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122b2:	4413      	add	r3, r2
 80122b4:	b29a      	uxth	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122bc:	e004      	b.n	80122c8 <tcp_receive+0x364>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122d0:	4a98      	ldr	r2, [pc, #608]	; (8012534 <tcp_receive+0x5d0>)
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f7ff fdca 	bl	8011e6c <tcp_free_acked_segments>
 80122d8:	4602      	mov	r2, r0
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122e6:	4a94      	ldr	r2, [pc, #592]	; (8012538 <tcp_receive+0x5d4>)
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff fdbf 	bl	8011e6c <tcp_free_acked_segments>
 80122ee:	4602      	mov	r2, r0
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d104      	bne.n	8012306 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012302:	861a      	strh	r2, [r3, #48]	; 0x30
 8012304:	e002      	b.n	801230c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2200      	movs	r2, #0
 8012310:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012316:	2b00      	cmp	r3, #0
 8012318:	d103      	bne.n	8012322 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012328:	4b84      	ldr	r3, [pc, #528]	; (801253c <tcp_receive+0x5d8>)
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	4413      	add	r3, r2
 801232e:	b29a      	uxth	r2, r3
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8b5b      	ldrh	r3, [r3, #26]
 801233a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801233e:	2b00      	cmp	r3, #0
 8012340:	d035      	beq.n	80123ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012346:	2b00      	cmp	r3, #0
 8012348:	d118      	bne.n	801237c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00c      	beq.n	801236c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	4618      	mov	r0, r3
 8012360:	f7fa fd03 	bl	800cd6a <lwip_htonl>
 8012364:	4603      	mov	r3, r0
 8012366:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012368:	2b00      	cmp	r3, #0
 801236a:	dc20      	bgt.n	80123ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	8b5b      	ldrh	r3, [r3, #26]
 8012370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012374:	b29a      	uxth	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801237a:	e018      	b.n	80123ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f7fa fcee 	bl	800cd6a <lwip_htonl>
 801238e:	4603      	mov	r3, r0
 8012390:	1ae3      	subs	r3, r4, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	dc0b      	bgt.n	80123ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	8b5b      	ldrh	r3, [r3, #26]
 801239a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801239e:	b29a      	uxth	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123a4:	e003      	b.n	80123ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f002 fbf0 	bl	8014b8c <tcp_send_empty_ack>
 80123ac:	e000      	b.n	80123b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d05b      	beq.n	8012470 <tcp_receive+0x50c>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123bc:	4b60      	ldr	r3, [pc, #384]	; (8012540 <tcp_receive+0x5dc>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	1ad3      	subs	r3, r2, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	da54      	bge.n	8012470 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80123c6:	4b5f      	ldr	r3, [pc, #380]	; (8012544 <tcp_receive+0x5e0>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80123da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123e4:	10db      	asrs	r3, r3, #3
 80123e6:	b21b      	sxth	r3, r3
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80123fe:	4413      	add	r3, r2
 8012400:	b29b      	uxth	r3, r3
 8012402:	b21a      	sxth	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012408:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801240c:	2b00      	cmp	r3, #0
 801240e:	da05      	bge.n	801241c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012414:	425b      	negs	r3, r3
 8012416:	b29b      	uxth	r3, r3
 8012418:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801241c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012426:	109b      	asrs	r3, r3, #2
 8012428:	b21b      	sxth	r3, r3
 801242a:	b29b      	uxth	r3, r3
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	b29b      	uxth	r3, r3
 8012430:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801243a:	b29a      	uxth	r2, r3
 801243c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012440:	4413      	add	r3, r2
 8012442:	b29b      	uxth	r3, r3
 8012444:	b21a      	sxth	r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012450:	10db      	asrs	r3, r3, #3
 8012452:	b21b      	sxth	r3, r3
 8012454:	b29a      	uxth	r2, r3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801245c:	b29b      	uxth	r3, r3
 801245e:	4413      	add	r3, r2
 8012460:	b29b      	uxth	r3, r3
 8012462:	b21a      	sxth	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2200      	movs	r2, #0
 801246e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012470:	4b35      	ldr	r3, [pc, #212]	; (8012548 <tcp_receive+0x5e4>)
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	f000 84e2 	beq.w	8012e3e <tcp_receive+0xeda>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	7d1b      	ldrb	r3, [r3, #20]
 801247e:	2b06      	cmp	r3, #6
 8012480:	f200 84dd 	bhi.w	8012e3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012488:	4b30      	ldr	r3, [pc, #192]	; (801254c <tcp_receive+0x5e8>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	3b01      	subs	r3, #1
 8012490:	2b00      	cmp	r3, #0
 8012492:	f2c0 808f 	blt.w	80125b4 <tcp_receive+0x650>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801249a:	4b2b      	ldr	r3, [pc, #172]	; (8012548 <tcp_receive+0x5e4>)
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	4619      	mov	r1, r3
 80124a0:	4b2a      	ldr	r3, [pc, #168]	; (801254c <tcp_receive+0x5e8>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	440b      	add	r3, r1
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	3301      	adds	r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f300 8082 	bgt.w	80125b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80124b0:	4b27      	ldr	r3, [pc, #156]	; (8012550 <tcp_receive+0x5ec>)
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124ba:	4b24      	ldr	r3, [pc, #144]	; (801254c <tcp_receive+0x5e8>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80124c2:	4b23      	ldr	r3, [pc, #140]	; (8012550 <tcp_receive+0x5ec>)
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_receive+0x574>
 80124ca:	4b22      	ldr	r3, [pc, #136]	; (8012554 <tcp_receive+0x5f0>)
 80124cc:	f240 5294 	movw	r2, #1428	; 0x594
 80124d0:	4921      	ldr	r1, [pc, #132]	; (8012558 <tcp_receive+0x5f4>)
 80124d2:	4822      	ldr	r0, [pc, #136]	; (801255c <tcp_receive+0x5f8>)
 80124d4:	f005 fcac 	bl	8017e30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80124de:	4293      	cmp	r3, r2
 80124e0:	d906      	bls.n	80124f0 <tcp_receive+0x58c>
 80124e2:	4b1c      	ldr	r3, [pc, #112]	; (8012554 <tcp_receive+0x5f0>)
 80124e4:	f240 5295 	movw	r2, #1429	; 0x595
 80124e8:	491d      	ldr	r1, [pc, #116]	; (8012560 <tcp_receive+0x5fc>)
 80124ea:	481c      	ldr	r0, [pc, #112]	; (801255c <tcp_receive+0x5f8>)
 80124ec:	f005 fca0 	bl	8017e30 <iprintf>
      off = (u16_t)off32;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80124f6:	4b16      	ldr	r3, [pc, #88]	; (8012550 <tcp_receive+0x5ec>)
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	891b      	ldrh	r3, [r3, #8]
 80124fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012500:	429a      	cmp	r2, r3
 8012502:	d906      	bls.n	8012512 <tcp_receive+0x5ae>
 8012504:	4b13      	ldr	r3, [pc, #76]	; (8012554 <tcp_receive+0x5f0>)
 8012506:	f240 5297 	movw	r2, #1431	; 0x597
 801250a:	4916      	ldr	r1, [pc, #88]	; (8012564 <tcp_receive+0x600>)
 801250c:	4813      	ldr	r0, [pc, #76]	; (801255c <tcp_receive+0x5f8>)
 801250e:	f005 fc8f 	bl	8017e30 <iprintf>
      inseg.len -= off;
 8012512:	4b0f      	ldr	r3, [pc, #60]	; (8012550 <tcp_receive+0x5ec>)
 8012514:	891a      	ldrh	r2, [r3, #8]
 8012516:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	b29a      	uxth	r2, r3
 801251e:	4b0c      	ldr	r3, [pc, #48]	; (8012550 <tcp_receive+0x5ec>)
 8012520:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012522:	4b0b      	ldr	r3, [pc, #44]	; (8012550 <tcp_receive+0x5ec>)
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	891a      	ldrh	r2, [r3, #8]
 8012528:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012530:	e02a      	b.n	8012588 <tcp_receive+0x624>
 8012532:	bf00      	nop
 8012534:	0801cf5c 	.word	0x0801cf5c
 8012538:	0801cf64 	.word	0x0801cf64
 801253c:	20011bf0 	.word	0x20011bf0
 8012540:	20011bec 	.word	0x20011bec
 8012544:	20011bb0 	.word	0x20011bb0
 8012548:	20011bf2 	.word	0x20011bf2
 801254c:	20011be8 	.word	0x20011be8
 8012550:	20011bc8 	.word	0x20011bc8
 8012554:	0801cbf4 	.word	0x0801cbf4
 8012558:	0801cf6c 	.word	0x0801cf6c
 801255c:	0801cc40 	.word	0x0801cc40
 8012560:	0801cf7c 	.word	0x0801cf7c
 8012564:	0801cf8c 	.word	0x0801cf8c
        off -= p->len;
 8012568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801256a:	895b      	ldrh	r3, [r3, #10]
 801256c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012578:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801257a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801257c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801257e:	2200      	movs	r2, #0
 8012580:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801258a:	895b      	ldrh	r3, [r3, #10]
 801258c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012590:	429a      	cmp	r2, r3
 8012592:	d8e9      	bhi.n	8012568 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012598:	4619      	mov	r1, r3
 801259a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801259c:	f7fc f850 	bl	800e640 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125a4:	4a91      	ldr	r2, [pc, #580]	; (80127ec <tcp_receive+0x888>)
 80125a6:	6013      	str	r3, [r2, #0]
 80125a8:	4b91      	ldr	r3, [pc, #580]	; (80127f0 <tcp_receive+0x88c>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	4a8f      	ldr	r2, [pc, #572]	; (80127ec <tcp_receive+0x888>)
 80125ae:	6812      	ldr	r2, [r2, #0]
 80125b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80125b2:	e00d      	b.n	80125d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80125b4:	4b8d      	ldr	r3, [pc, #564]	; (80127ec <tcp_receive+0x888>)
 80125b6:	681a      	ldr	r2, [r3, #0]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125bc:	1ad3      	subs	r3, r2, r3
 80125be:	2b00      	cmp	r3, #0
 80125c0:	da06      	bge.n	80125d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	8b5b      	ldrh	r3, [r3, #26]
 80125c6:	f043 0302 	orr.w	r3, r3, #2
 80125ca:	b29a      	uxth	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80125d0:	4b86      	ldr	r3, [pc, #536]	; (80127ec <tcp_receive+0x888>)
 80125d2:	681a      	ldr	r2, [r3, #0]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	f2c0 842a 	blt.w	8012e34 <tcp_receive+0xed0>
 80125e0:	4b82      	ldr	r3, [pc, #520]	; (80127ec <tcp_receive+0x888>)
 80125e2:	681a      	ldr	r2, [r3, #0]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e8:	6879      	ldr	r1, [r7, #4]
 80125ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125ec:	440b      	add	r3, r1
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	3301      	adds	r3, #1
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f300 841e 	bgt.w	8012e34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125fc:	4b7b      	ldr	r3, [pc, #492]	; (80127ec <tcp_receive+0x888>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	429a      	cmp	r2, r3
 8012602:	f040 829a 	bne.w	8012b3a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012606:	4b7a      	ldr	r3, [pc, #488]	; (80127f0 <tcp_receive+0x88c>)
 8012608:	891c      	ldrh	r4, [r3, #8]
 801260a:	4b79      	ldr	r3, [pc, #484]	; (80127f0 <tcp_receive+0x88c>)
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	899b      	ldrh	r3, [r3, #12]
 8012610:	b29b      	uxth	r3, r3
 8012612:	4618      	mov	r0, r3
 8012614:	f7fa fb94 	bl	800cd40 <lwip_htons>
 8012618:	4603      	mov	r3, r0
 801261a:	b2db      	uxtb	r3, r3
 801261c:	f003 0303 	and.w	r3, r3, #3
 8012620:	2b00      	cmp	r3, #0
 8012622:	d001      	beq.n	8012628 <tcp_receive+0x6c4>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <tcp_receive+0x6c6>
 8012628:	2300      	movs	r3, #0
 801262a:	4423      	add	r3, r4
 801262c:	b29a      	uxth	r2, r3
 801262e:	4b71      	ldr	r3, [pc, #452]	; (80127f4 <tcp_receive+0x890>)
 8012630:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012636:	4b6f      	ldr	r3, [pc, #444]	; (80127f4 <tcp_receive+0x890>)
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	429a      	cmp	r2, r3
 801263c:	d275      	bcs.n	801272a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801263e:	4b6c      	ldr	r3, [pc, #432]	; (80127f0 <tcp_receive+0x88c>)
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	899b      	ldrh	r3, [r3, #12]
 8012644:	b29b      	uxth	r3, r3
 8012646:	4618      	mov	r0, r3
 8012648:	f7fa fb7a 	bl	800cd40 <lwip_htons>
 801264c:	4603      	mov	r3, r0
 801264e:	b2db      	uxtb	r3, r3
 8012650:	f003 0301 	and.w	r3, r3, #1
 8012654:	2b00      	cmp	r3, #0
 8012656:	d01f      	beq.n	8012698 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012658:	4b65      	ldr	r3, [pc, #404]	; (80127f0 <tcp_receive+0x88c>)
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	899b      	ldrh	r3, [r3, #12]
 801265e:	b29b      	uxth	r3, r3
 8012660:	b21b      	sxth	r3, r3
 8012662:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012666:	b21c      	sxth	r4, r3
 8012668:	4b61      	ldr	r3, [pc, #388]	; (80127f0 <tcp_receive+0x88c>)
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	899b      	ldrh	r3, [r3, #12]
 801266e:	b29b      	uxth	r3, r3
 8012670:	4618      	mov	r0, r3
 8012672:	f7fa fb65 	bl	800cd40 <lwip_htons>
 8012676:	4603      	mov	r3, r0
 8012678:	b2db      	uxtb	r3, r3
 801267a:	b29b      	uxth	r3, r3
 801267c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012680:	b29b      	uxth	r3, r3
 8012682:	4618      	mov	r0, r3
 8012684:	f7fa fb5c 	bl	800cd40 <lwip_htons>
 8012688:	4603      	mov	r3, r0
 801268a:	b21b      	sxth	r3, r3
 801268c:	4323      	orrs	r3, r4
 801268e:	b21a      	sxth	r2, r3
 8012690:	4b57      	ldr	r3, [pc, #348]	; (80127f0 <tcp_receive+0x88c>)
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	b292      	uxth	r2, r2
 8012696:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801269c:	4b54      	ldr	r3, [pc, #336]	; (80127f0 <tcp_receive+0x88c>)
 801269e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80126a0:	4b53      	ldr	r3, [pc, #332]	; (80127f0 <tcp_receive+0x88c>)
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	899b      	ldrh	r3, [r3, #12]
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fa fb49 	bl	800cd40 <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	f003 0302 	and.w	r3, r3, #2
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d005      	beq.n	80126c6 <tcp_receive+0x762>
            inseg.len -= 1;
 80126ba:	4b4d      	ldr	r3, [pc, #308]	; (80127f0 <tcp_receive+0x88c>)
 80126bc:	891b      	ldrh	r3, [r3, #8]
 80126be:	3b01      	subs	r3, #1
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	4b4b      	ldr	r3, [pc, #300]	; (80127f0 <tcp_receive+0x88c>)
 80126c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80126c6:	4b4a      	ldr	r3, [pc, #296]	; (80127f0 <tcp_receive+0x88c>)
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	4a49      	ldr	r2, [pc, #292]	; (80127f0 <tcp_receive+0x88c>)
 80126cc:	8912      	ldrh	r2, [r2, #8]
 80126ce:	4611      	mov	r1, r2
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fb feb5 	bl	800e440 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80126d6:	4b46      	ldr	r3, [pc, #280]	; (80127f0 <tcp_receive+0x88c>)
 80126d8:	891c      	ldrh	r4, [r3, #8]
 80126da:	4b45      	ldr	r3, [pc, #276]	; (80127f0 <tcp_receive+0x88c>)
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	899b      	ldrh	r3, [r3, #12]
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fa fb2c 	bl	800cd40 <lwip_htons>
 80126e8:	4603      	mov	r3, r0
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	f003 0303 	and.w	r3, r3, #3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <tcp_receive+0x794>
 80126f4:	2301      	movs	r3, #1
 80126f6:	e000      	b.n	80126fa <tcp_receive+0x796>
 80126f8:	2300      	movs	r3, #0
 80126fa:	4423      	add	r3, r4
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	4b3d      	ldr	r3, [pc, #244]	; (80127f4 <tcp_receive+0x890>)
 8012700:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012702:	4b3c      	ldr	r3, [pc, #240]	; (80127f4 <tcp_receive+0x890>)
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	461a      	mov	r2, r3
 8012708:	4b38      	ldr	r3, [pc, #224]	; (80127ec <tcp_receive+0x888>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	441a      	add	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012712:	6879      	ldr	r1, [r7, #4]
 8012714:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012716:	440b      	add	r3, r1
 8012718:	429a      	cmp	r2, r3
 801271a:	d006      	beq.n	801272a <tcp_receive+0x7c6>
 801271c:	4b36      	ldr	r3, [pc, #216]	; (80127f8 <tcp_receive+0x894>)
 801271e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012722:	4936      	ldr	r1, [pc, #216]	; (80127fc <tcp_receive+0x898>)
 8012724:	4836      	ldr	r0, [pc, #216]	; (8012800 <tcp_receive+0x89c>)
 8012726:	f005 fb83 	bl	8017e30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 80e7 	beq.w	8012902 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012734:	4b2e      	ldr	r3, [pc, #184]	; (80127f0 <tcp_receive+0x88c>)
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	b29b      	uxth	r3, r3
 801273c:	4618      	mov	r0, r3
 801273e:	f7fa faff 	bl	800cd40 <lwip_htons>
 8012742:	4603      	mov	r3, r0
 8012744:	b2db      	uxtb	r3, r3
 8012746:	f003 0301 	and.w	r3, r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	d010      	beq.n	8012770 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801274e:	e00a      	b.n	8012766 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012754:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012760:	68f8      	ldr	r0, [r7, #12]
 8012762:	f7fd fcc4 	bl	80100ee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801276a:	2b00      	cmp	r3, #0
 801276c:	d1f0      	bne.n	8012750 <tcp_receive+0x7ec>
 801276e:	e0c8      	b.n	8012902 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012774:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012776:	e052      	b.n	801281e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	899b      	ldrh	r3, [r3, #12]
 801277e:	b29b      	uxth	r3, r3
 8012780:	4618      	mov	r0, r3
 8012782:	f7fa fadd 	bl	800cd40 <lwip_htons>
 8012786:	4603      	mov	r3, r0
 8012788:	b2db      	uxtb	r3, r3
 801278a:	f003 0301 	and.w	r3, r3, #1
 801278e:	2b00      	cmp	r3, #0
 8012790:	d03d      	beq.n	801280e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012792:	4b17      	ldr	r3, [pc, #92]	; (80127f0 <tcp_receive+0x88c>)
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	899b      	ldrh	r3, [r3, #12]
 8012798:	b29b      	uxth	r3, r3
 801279a:	4618      	mov	r0, r3
 801279c:	f7fa fad0 	bl	800cd40 <lwip_htons>
 80127a0:	4603      	mov	r3, r0
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d130      	bne.n	801280e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80127ac:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <tcp_receive+0x88c>)
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	899b      	ldrh	r3, [r3, #12]
 80127b2:	b29c      	uxth	r4, r3
 80127b4:	2001      	movs	r0, #1
 80127b6:	f7fa fac3 	bl	800cd40 <lwip_htons>
 80127ba:	4603      	mov	r3, r0
 80127bc:	461a      	mov	r2, r3
 80127be:	4b0c      	ldr	r3, [pc, #48]	; (80127f0 <tcp_receive+0x88c>)
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	4322      	orrs	r2, r4
 80127c4:	b292      	uxth	r2, r2
 80127c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80127c8:	4b09      	ldr	r3, [pc, #36]	; (80127f0 <tcp_receive+0x88c>)
 80127ca:	891c      	ldrh	r4, [r3, #8]
 80127cc:	4b08      	ldr	r3, [pc, #32]	; (80127f0 <tcp_receive+0x88c>)
 80127ce:	68db      	ldr	r3, [r3, #12]
 80127d0:	899b      	ldrh	r3, [r3, #12]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7fa fab3 	bl	800cd40 <lwip_htons>
 80127da:	4603      	mov	r3, r0
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	f003 0303 	and.w	r3, r3, #3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d00e      	beq.n	8012804 <tcp_receive+0x8a0>
 80127e6:	2301      	movs	r3, #1
 80127e8:	e00d      	b.n	8012806 <tcp_receive+0x8a2>
 80127ea:	bf00      	nop
 80127ec:	20011be8 	.word	0x20011be8
 80127f0:	20011bc8 	.word	0x20011bc8
 80127f4:	20011bf2 	.word	0x20011bf2
 80127f8:	0801cbf4 	.word	0x0801cbf4
 80127fc:	0801cf9c 	.word	0x0801cf9c
 8012800:	0801cc40 	.word	0x0801cc40
 8012804:	2300      	movs	r3, #0
 8012806:	4423      	add	r3, r4
 8012808:	b29a      	uxth	r2, r3
 801280a:	4b98      	ldr	r3, [pc, #608]	; (8012a6c <tcp_receive+0xb08>)
 801280c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801280e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012810:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012818:	6938      	ldr	r0, [r7, #16]
 801281a:	f7fd fc68 	bl	80100ee <tcp_seg_free>
            while (next &&
 801281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00e      	beq.n	8012842 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012824:	4b91      	ldr	r3, [pc, #580]	; (8012a6c <tcp_receive+0xb08>)
 8012826:	881b      	ldrh	r3, [r3, #0]
 8012828:	461a      	mov	r2, r3
 801282a:	4b91      	ldr	r3, [pc, #580]	; (8012a70 <tcp_receive+0xb0c>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	441a      	add	r2, r3
 8012830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012838:	8909      	ldrh	r1, [r1, #8]
 801283a:	440b      	add	r3, r1
 801283c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801283e:	2b00      	cmp	r3, #0
 8012840:	da9a      	bge.n	8012778 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012844:	2b00      	cmp	r3, #0
 8012846:	d059      	beq.n	80128fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012848:	4b88      	ldr	r3, [pc, #544]	; (8012a6c <tcp_receive+0xb08>)
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	461a      	mov	r2, r3
 801284e:	4b88      	ldr	r3, [pc, #544]	; (8012a70 <tcp_receive+0xb0c>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	441a      	add	r2, r3
 8012854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801285c:	2b00      	cmp	r3, #0
 801285e:	dd4d      	ble.n	80128fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012862:	68db      	ldr	r3, [r3, #12]
 8012864:	685b      	ldr	r3, [r3, #4]
 8012866:	b29a      	uxth	r2, r3
 8012868:	4b81      	ldr	r3, [pc, #516]	; (8012a70 <tcp_receive+0xb0c>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	b29b      	uxth	r3, r3
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	b29a      	uxth	r2, r3
 8012872:	4b80      	ldr	r3, [pc, #512]	; (8012a74 <tcp_receive+0xb10>)
 8012874:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012876:	4b7f      	ldr	r3, [pc, #508]	; (8012a74 <tcp_receive+0xb10>)
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	899b      	ldrh	r3, [r3, #12]
 801287c:	b29b      	uxth	r3, r3
 801287e:	4618      	mov	r0, r3
 8012880:	f7fa fa5e 	bl	800cd40 <lwip_htons>
 8012884:	4603      	mov	r3, r0
 8012886:	b2db      	uxtb	r3, r3
 8012888:	f003 0302 	and.w	r3, r3, #2
 801288c:	2b00      	cmp	r3, #0
 801288e:	d005      	beq.n	801289c <tcp_receive+0x938>
                inseg.len -= 1;
 8012890:	4b78      	ldr	r3, [pc, #480]	; (8012a74 <tcp_receive+0xb10>)
 8012892:	891b      	ldrh	r3, [r3, #8]
 8012894:	3b01      	subs	r3, #1
 8012896:	b29a      	uxth	r2, r3
 8012898:	4b76      	ldr	r3, [pc, #472]	; (8012a74 <tcp_receive+0xb10>)
 801289a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801289c:	4b75      	ldr	r3, [pc, #468]	; (8012a74 <tcp_receive+0xb10>)
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	4a74      	ldr	r2, [pc, #464]	; (8012a74 <tcp_receive+0xb10>)
 80128a2:	8912      	ldrh	r2, [r2, #8]
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fb fdca 	bl	800e440 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80128ac:	4b71      	ldr	r3, [pc, #452]	; (8012a74 <tcp_receive+0xb10>)
 80128ae:	891c      	ldrh	r4, [r3, #8]
 80128b0:	4b70      	ldr	r3, [pc, #448]	; (8012a74 <tcp_receive+0xb10>)
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	899b      	ldrh	r3, [r3, #12]
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7fa fa41 	bl	800cd40 <lwip_htons>
 80128be:	4603      	mov	r3, r0
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	f003 0303 	and.w	r3, r3, #3
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d001      	beq.n	80128ce <tcp_receive+0x96a>
 80128ca:	2301      	movs	r3, #1
 80128cc:	e000      	b.n	80128d0 <tcp_receive+0x96c>
 80128ce:	2300      	movs	r3, #0
 80128d0:	4423      	add	r3, r4
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	4b65      	ldr	r3, [pc, #404]	; (8012a6c <tcp_receive+0xb08>)
 80128d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80128d8:	4b64      	ldr	r3, [pc, #400]	; (8012a6c <tcp_receive+0xb08>)
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	461a      	mov	r2, r3
 80128de:	4b64      	ldr	r3, [pc, #400]	; (8012a70 <tcp_receive+0xb0c>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	441a      	add	r2, r3
 80128e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d006      	beq.n	80128fc <tcp_receive+0x998>
 80128ee:	4b62      	ldr	r3, [pc, #392]	; (8012a78 <tcp_receive+0xb14>)
 80128f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80128f4:	4961      	ldr	r1, [pc, #388]	; (8012a7c <tcp_receive+0xb18>)
 80128f6:	4862      	ldr	r0, [pc, #392]	; (8012a80 <tcp_receive+0xb1c>)
 80128f8:	f005 fa9a 	bl	8017e30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012900:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012902:	4b5a      	ldr	r3, [pc, #360]	; (8012a6c <tcp_receive+0xb08>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	4b59      	ldr	r3, [pc, #356]	; (8012a70 <tcp_receive+0xb0c>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	441a      	add	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012916:	4b55      	ldr	r3, [pc, #340]	; (8012a6c <tcp_receive+0xb08>)
 8012918:	881b      	ldrh	r3, [r3, #0]
 801291a:	429a      	cmp	r2, r3
 801291c:	d206      	bcs.n	801292c <tcp_receive+0x9c8>
 801291e:	4b56      	ldr	r3, [pc, #344]	; (8012a78 <tcp_receive+0xb14>)
 8012920:	f240 6207 	movw	r2, #1543	; 0x607
 8012924:	4957      	ldr	r1, [pc, #348]	; (8012a84 <tcp_receive+0xb20>)
 8012926:	4856      	ldr	r0, [pc, #344]	; (8012a80 <tcp_receive+0xb1c>)
 8012928:	f005 fa82 	bl	8017e30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012930:	4b4e      	ldr	r3, [pc, #312]	; (8012a6c <tcp_receive+0xb08>)
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	b29a      	uxth	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7fc fd99 	bl	800f474 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012942:	4b4c      	ldr	r3, [pc, #304]	; (8012a74 <tcp_receive+0xb10>)
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	891b      	ldrh	r3, [r3, #8]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d006      	beq.n	801295a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801294c:	4b49      	ldr	r3, [pc, #292]	; (8012a74 <tcp_receive+0xb10>)
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	4a4d      	ldr	r2, [pc, #308]	; (8012a88 <tcp_receive+0xb24>)
 8012952:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012954:	4b47      	ldr	r3, [pc, #284]	; (8012a74 <tcp_receive+0xb10>)
 8012956:	2200      	movs	r2, #0
 8012958:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801295a:	4b46      	ldr	r3, [pc, #280]	; (8012a74 <tcp_receive+0xb10>)
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	899b      	ldrh	r3, [r3, #12]
 8012960:	b29b      	uxth	r3, r3
 8012962:	4618      	mov	r0, r3
 8012964:	f7fa f9ec 	bl	800cd40 <lwip_htons>
 8012968:	4603      	mov	r3, r0
 801296a:	b2db      	uxtb	r3, r3
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	f000 80b8 	beq.w	8012ae6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012976:	4b45      	ldr	r3, [pc, #276]	; (8012a8c <tcp_receive+0xb28>)
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	f043 0320 	orr.w	r3, r3, #32
 801297e:	b2da      	uxtb	r2, r3
 8012980:	4b42      	ldr	r3, [pc, #264]	; (8012a8c <tcp_receive+0xb28>)
 8012982:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012984:	e0af      	b.n	8012ae6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801298a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	4a36      	ldr	r2, [pc, #216]	; (8012a70 <tcp_receive+0xb0c>)
 8012996:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	891b      	ldrh	r3, [r3, #8]
 801299c:	461c      	mov	r4, r3
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	899b      	ldrh	r3, [r3, #12]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fa f9ca 	bl	800cd40 <lwip_htons>
 80129ac:	4603      	mov	r3, r0
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	f003 0303 	and.w	r3, r3, #3
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <tcp_receive+0xa58>
 80129b8:	2301      	movs	r3, #1
 80129ba:	e000      	b.n	80129be <tcp_receive+0xa5a>
 80129bc:	2300      	movs	r3, #0
 80129be:	191a      	adds	r2, r3, r4
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c4:	441a      	add	r2, r3
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129ce:	461c      	mov	r4, r3
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	891b      	ldrh	r3, [r3, #8]
 80129d4:	461d      	mov	r5, r3
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	68db      	ldr	r3, [r3, #12]
 80129da:	899b      	ldrh	r3, [r3, #12]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fa f9ae 	bl	800cd40 <lwip_htons>
 80129e4:	4603      	mov	r3, r0
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	f003 0303 	and.w	r3, r3, #3
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <tcp_receive+0xa90>
 80129f0:	2301      	movs	r3, #1
 80129f2:	e000      	b.n	80129f6 <tcp_receive+0xa92>
 80129f4:	2300      	movs	r3, #0
 80129f6:	442b      	add	r3, r5
 80129f8:	429c      	cmp	r4, r3
 80129fa:	d206      	bcs.n	8012a0a <tcp_receive+0xaa6>
 80129fc:	4b1e      	ldr	r3, [pc, #120]	; (8012a78 <tcp_receive+0xb14>)
 80129fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8012a02:	4923      	ldr	r1, [pc, #140]	; (8012a90 <tcp_receive+0xb2c>)
 8012a04:	481e      	ldr	r0, [pc, #120]	; (8012a80 <tcp_receive+0xb1c>)
 8012a06:	f005 fa13 	bl	8017e30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	891b      	ldrh	r3, [r3, #8]
 8012a0e:	461c      	mov	r4, r3
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	899b      	ldrh	r3, [r3, #12]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fa f991 	bl	800cd40 <lwip_htons>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	b2db      	uxtb	r3, r3
 8012a22:	f003 0303 	and.w	r3, r3, #3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d001      	beq.n	8012a2e <tcp_receive+0xaca>
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	e000      	b.n	8012a30 <tcp_receive+0xacc>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	1919      	adds	r1, r3, r4
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a36:	b28b      	uxth	r3, r1
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7fc fd17 	bl	800f474 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	891b      	ldrh	r3, [r3, #8]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d028      	beq.n	8012aa2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012a50:	4b0d      	ldr	r3, [pc, #52]	; (8012a88 <tcp_receive+0xb24>)
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d01d      	beq.n	8012a94 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012a58:	4b0b      	ldr	r3, [pc, #44]	; (8012a88 <tcp_receive+0xb24>)
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	4619      	mov	r1, r3
 8012a62:	4610      	mov	r0, r2
 8012a64:	f7fb ff40 	bl	800e8e8 <pbuf_cat>
 8012a68:	e018      	b.n	8012a9c <tcp_receive+0xb38>
 8012a6a:	bf00      	nop
 8012a6c:	20011bf2 	.word	0x20011bf2
 8012a70:	20011be8 	.word	0x20011be8
 8012a74:	20011bc8 	.word	0x20011bc8
 8012a78:	0801cbf4 	.word	0x0801cbf4
 8012a7c:	0801cfd4 	.word	0x0801cfd4
 8012a80:	0801cc40 	.word	0x0801cc40
 8012a84:	0801d010 	.word	0x0801d010
 8012a88:	20011bf8 	.word	0x20011bf8
 8012a8c:	20011bf5 	.word	0x20011bf5
 8012a90:	0801d030 	.word	0x0801d030
            } else {
              recv_data = cseg->p;
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	4a70      	ldr	r2, [pc, #448]	; (8012c5c <tcp_receive+0xcf8>)
 8012a9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7fa f948 	bl	800cd40 <lwip_htons>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00d      	beq.n	8012ad8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012abc:	4b68      	ldr	r3, [pc, #416]	; (8012c60 <tcp_receive+0xcfc>)
 8012abe:	781b      	ldrb	r3, [r3, #0]
 8012ac0:	f043 0320 	orr.w	r3, r3, #32
 8012ac4:	b2da      	uxtb	r2, r3
 8012ac6:	4b66      	ldr	r3, [pc, #408]	; (8012c60 <tcp_receive+0xcfc>)
 8012ac8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	7d1b      	ldrb	r3, [r3, #20]
 8012ace:	2b04      	cmp	r3, #4
 8012ad0:	d102      	bne.n	8012ad8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2207      	movs	r2, #7
 8012ad6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012ae0:	68b8      	ldr	r0, [r7, #8]
 8012ae2:	f7fd fb04 	bl	80100ee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d008      	beq.n	8012b00 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	685a      	ldr	r2, [r3, #4]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012afa:	429a      	cmp	r2, r3
 8012afc:	f43f af43 	beq.w	8012986 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	8b5b      	ldrh	r3, [r3, #26]
 8012b04:	f003 0301 	and.w	r3, r3, #1
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00e      	beq.n	8012b2a <tcp_receive+0xbc6>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	8b5b      	ldrh	r3, [r3, #26]
 8012b10:	f023 0301 	bic.w	r3, r3, #1
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	835a      	strh	r2, [r3, #26]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	8b5b      	ldrh	r3, [r3, #26]
 8012b1e:	f043 0302 	orr.w	r3, r3, #2
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b28:	e188      	b.n	8012e3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	8b5b      	ldrh	r3, [r3, #26]
 8012b2e:	f043 0301 	orr.w	r3, r3, #1
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012b38:	e180      	b.n	8012e3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d106      	bne.n	8012b50 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012b42:	4848      	ldr	r0, [pc, #288]	; (8012c64 <tcp_receive+0xd00>)
 8012b44:	f7fd faec 	bl	8010120 <tcp_seg_copy>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	675a      	str	r2, [r3, #116]	; 0x74
 8012b4e:	e16d      	b.n	8012e2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012b50:	2300      	movs	r3, #0
 8012b52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b5a:	e157      	b.n	8012e0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	685a      	ldr	r2, [r3, #4]
 8012b62:	4b41      	ldr	r3, [pc, #260]	; (8012c68 <tcp_receive+0xd04>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d11d      	bne.n	8012ba6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012b6a:	4b3e      	ldr	r3, [pc, #248]	; (8012c64 <tcp_receive+0xd00>)
 8012b6c:	891a      	ldrh	r2, [r3, #8]
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	891b      	ldrh	r3, [r3, #8]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	f240 814f 	bls.w	8012e16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012b78:	483a      	ldr	r0, [pc, #232]	; (8012c64 <tcp_receive+0xd00>)
 8012b7a:	f7fd fad1 	bl	8010120 <tcp_seg_copy>
 8012b7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f000 8149 	beq.w	8012e1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8012b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d003      	beq.n	8012b96 <tcp_receive+0xc32>
                    prev->next = cseg;
 8012b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b90:	697a      	ldr	r2, [r7, #20]
 8012b92:	601a      	str	r2, [r3, #0]
 8012b94:	e002      	b.n	8012b9c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	697a      	ldr	r2, [r7, #20]
 8012b9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012b9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b9e:	6978      	ldr	r0, [r7, #20]
 8012ba0:	f7ff f8dc 	bl	8011d5c <tcp_oos_insert_segment>
                }
                break;
 8012ba4:	e139      	b.n	8012e1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d117      	bne.n	8012bdc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012bac:	4b2e      	ldr	r3, [pc, #184]	; (8012c68 <tcp_receive+0xd04>)
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	1ad3      	subs	r3, r2, r3
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	da57      	bge.n	8012c6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012bbc:	4829      	ldr	r0, [pc, #164]	; (8012c64 <tcp_receive+0xd00>)
 8012bbe:	f7fd faaf 	bl	8010120 <tcp_seg_copy>
 8012bc2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 8129 	beq.w	8012e1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	69ba      	ldr	r2, [r7, #24]
 8012bd0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012bd4:	69b8      	ldr	r0, [r7, #24]
 8012bd6:	f7ff f8c1 	bl	8011d5c <tcp_oos_insert_segment>
                  }
                  break;
 8012bda:	e120      	b.n	8012e1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012bdc:	4b22      	ldr	r3, [pc, #136]	; (8012c68 <tcp_receive+0xd04>)
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	1ad3      	subs	r3, r2, r3
 8012be8:	3b01      	subs	r3, #1
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	db3e      	blt.n	8012c6c <tcp_receive+0xd08>
 8012bee:	4b1e      	ldr	r3, [pc, #120]	; (8012c68 <tcp_receive+0xd04>)
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf4:	68db      	ldr	r3, [r3, #12]
 8012bf6:	685b      	ldr	r3, [r3, #4]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	dc35      	bgt.n	8012c6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c00:	4818      	ldr	r0, [pc, #96]	; (8012c64 <tcp_receive+0xd00>)
 8012c02:	f7fd fa8d 	bl	8010120 <tcp_seg_copy>
 8012c06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 8109 	beq.w	8012e22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c18:	8912      	ldrh	r2, [r2, #8]
 8012c1a:	441a      	add	r2, r3
 8012c1c:	4b12      	ldr	r3, [pc, #72]	; (8012c68 <tcp_receive+0xd04>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	dd12      	ble.n	8012c4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012c26:	4b10      	ldr	r3, [pc, #64]	; (8012c68 <tcp_receive+0xd04>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	b29a      	uxth	r2, r3
 8012c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c2e:	68db      	ldr	r3, [r3, #12]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	1ad3      	subs	r3, r2, r3
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c3e:	685a      	ldr	r2, [r3, #4]
 8012c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c42:	891b      	ldrh	r3, [r3, #8]
 8012c44:	4619      	mov	r1, r3
 8012c46:	4610      	mov	r0, r2
 8012c48:	f7fb fbfa 	bl	800e440 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c4e:	69fa      	ldr	r2, [r7, #28]
 8012c50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c54:	69f8      	ldr	r0, [r7, #28]
 8012c56:	f7ff f881 	bl	8011d5c <tcp_oos_insert_segment>
                  }
                  break;
 8012c5a:	e0e2      	b.n	8012e22 <tcp_receive+0xebe>
 8012c5c:	20011bf8 	.word	0x20011bf8
 8012c60:	20011bf5 	.word	0x20011bf5
 8012c64:	20011bc8 	.word	0x20011bc8
 8012c68:	20011be8 	.word	0x20011be8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	f040 80c6 	bne.w	8012e06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012c7a:	4b80      	ldr	r3, [pc, #512]	; (8012e7c <tcp_receive+0xf18>)
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c80:	68db      	ldr	r3, [r3, #12]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f340 80bd 	ble.w	8012e06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	899b      	ldrh	r3, [r3, #12]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	4618      	mov	r0, r3
 8012c96:	f7fa f853 	bl	800cd40 <lwip_htons>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	b2db      	uxtb	r3, r3
 8012c9e:	f003 0301 	and.w	r3, r3, #1
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	f040 80bf 	bne.w	8012e26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012ca8:	4875      	ldr	r0, [pc, #468]	; (8012e80 <tcp_receive+0xf1c>)
 8012caa:	f7fd fa39 	bl	8010120 <tcp_seg_copy>
 8012cae:	4602      	mov	r2, r0
 8012cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f000 80b6 	beq.w	8012e2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cc6:	8912      	ldrh	r2, [r2, #8]
 8012cc8:	441a      	add	r2, r3
 8012cca:	4b6c      	ldr	r3, [pc, #432]	; (8012e7c <tcp_receive+0xf18>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	1ad3      	subs	r3, r2, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	dd12      	ble.n	8012cfa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012cd4:	4b69      	ldr	r3, [pc, #420]	; (8012e7c <tcp_receive+0xf18>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	1ad3      	subs	r3, r2, r3
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cec:	685a      	ldr	r2, [r3, #4]
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	891b      	ldrh	r3, [r3, #8]
 8012cf2:	4619      	mov	r1, r3
 8012cf4:	4610      	mov	r0, r2
 8012cf6:	f7fb fba3 	bl	800e440 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012cfa:	4b62      	ldr	r3, [pc, #392]	; (8012e84 <tcp_receive+0xf20>)
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	4b5e      	ldr	r3, [pc, #376]	; (8012e7c <tcp_receive+0xf18>)
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	441a      	add	r2, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d0a:	6879      	ldr	r1, [r7, #4]
 8012d0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d0e:	440b      	add	r3, r1
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f340 8089 	ble.w	8012e2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	899b      	ldrh	r3, [r3, #12]
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7fa f80c 	bl	800cd40 <lwip_htons>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	f003 0301 	and.w	r3, r3, #1
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d022      	beq.n	8012d7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	899b      	ldrh	r3, [r3, #12]
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	b21b      	sxth	r3, r3
 8012d40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012d44:	b21c      	sxth	r4, r3
 8012d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	899b      	ldrh	r3, [r3, #12]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f9 fff5 	bl	800cd40 <lwip_htons>
 8012d56:	4603      	mov	r3, r0
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012d60:	b29b      	uxth	r3, r3
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f9 ffec 	bl	800cd40 <lwip_htons>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	b21b      	sxth	r3, r3
 8012d6c:	4323      	orrs	r3, r4
 8012d6e:	b21a      	sxth	r2, r3
 8012d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	b292      	uxth	r2, r2
 8012d78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d84:	4413      	add	r3, r2
 8012d86:	b299      	uxth	r1, r3
 8012d88:	4b3c      	ldr	r3, [pc, #240]	; (8012e7c <tcp_receive+0xf18>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	1a8a      	subs	r2, r1, r2
 8012d94:	b292      	uxth	r2, r2
 8012d96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	685a      	ldr	r2, [r3, #4]
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	891b      	ldrh	r3, [r3, #8]
 8012da4:	4619      	mov	r1, r3
 8012da6:	4610      	mov	r0, r2
 8012da8:	f7fb fb4a 	bl	800e440 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	891c      	ldrh	r4, [r3, #8]
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	899b      	ldrh	r3, [r3, #12]
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7f9 ffbf 	bl	800cd40 <lwip_htons>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	f003 0303 	and.w	r3, r3, #3
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <tcp_receive+0xe6e>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e000      	b.n	8012dd4 <tcp_receive+0xe70>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	4423      	add	r3, r4
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	4b2a      	ldr	r3, [pc, #168]	; (8012e84 <tcp_receive+0xf20>)
 8012dda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ddc:	4b29      	ldr	r3, [pc, #164]	; (8012e84 <tcp_receive+0xf20>)
 8012dde:	881b      	ldrh	r3, [r3, #0]
 8012de0:	461a      	mov	r2, r3
 8012de2:	4b26      	ldr	r3, [pc, #152]	; (8012e7c <tcp_receive+0xf18>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	441a      	add	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dec:	6879      	ldr	r1, [r7, #4]
 8012dee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012df0:	440b      	add	r3, r1
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d019      	beq.n	8012e2a <tcp_receive+0xec6>
 8012df6:	4b24      	ldr	r3, [pc, #144]	; (8012e88 <tcp_receive+0xf24>)
 8012df8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012dfc:	4923      	ldr	r1, [pc, #140]	; (8012e8c <tcp_receive+0xf28>)
 8012dfe:	4824      	ldr	r0, [pc, #144]	; (8012e90 <tcp_receive+0xf2c>)
 8012e00:	f005 f816 	bl	8017e30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012e04:	e011      	b.n	8012e2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f47f aea4 	bne.w	8012b5c <tcp_receive+0xbf8>
 8012e14:	e00a      	b.n	8012e2c <tcp_receive+0xec8>
                break;
 8012e16:	bf00      	nop
 8012e18:	e008      	b.n	8012e2c <tcp_receive+0xec8>
                break;
 8012e1a:	bf00      	nop
 8012e1c:	e006      	b.n	8012e2c <tcp_receive+0xec8>
                  break;
 8012e1e:	bf00      	nop
 8012e20:	e004      	b.n	8012e2c <tcp_receive+0xec8>
                  break;
 8012e22:	bf00      	nop
 8012e24:	e002      	b.n	8012e2c <tcp_receive+0xec8>
                  break;
 8012e26:	bf00      	nop
 8012e28:	e000      	b.n	8012e2c <tcp_receive+0xec8>
                break;
 8012e2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f001 fead 	bl	8014b8c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012e32:	e003      	b.n	8012e3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f001 fea9 	bl	8014b8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e3a:	e01a      	b.n	8012e72 <tcp_receive+0xf0e>
 8012e3c:	e019      	b.n	8012e72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012e3e:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <tcp_receive+0xf18>)
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	db0a      	blt.n	8012e62 <tcp_receive+0xefe>
 8012e4c:	4b0b      	ldr	r3, [pc, #44]	; (8012e7c <tcp_receive+0xf18>)
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e54:	6879      	ldr	r1, [r7, #4]
 8012e56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e58:	440b      	add	r3, r1
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	dd07      	ble.n	8012e72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	8b5b      	ldrh	r3, [r3, #26]
 8012e66:	f043 0302 	orr.w	r3, r3, #2
 8012e6a:	b29a      	uxth	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012e70:	e7ff      	b.n	8012e72 <tcp_receive+0xf0e>
 8012e72:	bf00      	nop
 8012e74:	3750      	adds	r7, #80	; 0x50
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bdb0      	pop	{r4, r5, r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	20011be8 	.word	0x20011be8
 8012e80:	20011bc8 	.word	0x20011bc8
 8012e84:	20011bf2 	.word	0x20011bf2
 8012e88:	0801cbf4 	.word	0x0801cbf4
 8012e8c:	0801cf9c 	.word	0x0801cf9c
 8012e90:	0801cc40 	.word	0x0801cc40

08012e94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012e9a:	4b15      	ldr	r3, [pc, #84]	; (8012ef0 <tcp_get_next_optbyte+0x5c>)
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	1c5a      	adds	r2, r3, #1
 8012ea0:	b291      	uxth	r1, r2
 8012ea2:	4a13      	ldr	r2, [pc, #76]	; (8012ef0 <tcp_get_next_optbyte+0x5c>)
 8012ea4:	8011      	strh	r1, [r2, #0]
 8012ea6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012ea8:	4b12      	ldr	r3, [pc, #72]	; (8012ef4 <tcp_get_next_optbyte+0x60>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d004      	beq.n	8012eba <tcp_get_next_optbyte+0x26>
 8012eb0:	4b11      	ldr	r3, [pc, #68]	; (8012ef8 <tcp_get_next_optbyte+0x64>)
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	88fa      	ldrh	r2, [r7, #6]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d208      	bcs.n	8012ecc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012eba:	4b10      	ldr	r3, [pc, #64]	; (8012efc <tcp_get_next_optbyte+0x68>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	3314      	adds	r3, #20
 8012ec0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012ec2:	88fb      	ldrh	r3, [r7, #6]
 8012ec4:	683a      	ldr	r2, [r7, #0]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	e00b      	b.n	8012ee4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012ecc:	88fb      	ldrh	r3, [r7, #6]
 8012ece:	b2da      	uxtb	r2, r3
 8012ed0:	4b09      	ldr	r3, [pc, #36]	; (8012ef8 <tcp_get_next_optbyte+0x64>)
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	1ad3      	subs	r3, r2, r3
 8012ed8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012eda:	4b06      	ldr	r3, [pc, #24]	; (8012ef4 <tcp_get_next_optbyte+0x60>)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	797b      	ldrb	r3, [r7, #5]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr
 8012ef0:	20011be4 	.word	0x20011be4
 8012ef4:	20011be0 	.word	0x20011be0
 8012ef8:	20011bde 	.word	0x20011bde
 8012efc:	20011bd8 	.word	0x20011bd8

08012f00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d106      	bne.n	8012f1c <tcp_parseopt+0x1c>
 8012f0e:	4b32      	ldr	r3, [pc, #200]	; (8012fd8 <tcp_parseopt+0xd8>)
 8012f10:	f240 727d 	movw	r2, #1917	; 0x77d
 8012f14:	4931      	ldr	r1, [pc, #196]	; (8012fdc <tcp_parseopt+0xdc>)
 8012f16:	4832      	ldr	r0, [pc, #200]	; (8012fe0 <tcp_parseopt+0xe0>)
 8012f18:	f004 ff8a 	bl	8017e30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012f1c:	4b31      	ldr	r3, [pc, #196]	; (8012fe4 <tcp_parseopt+0xe4>)
 8012f1e:	881b      	ldrh	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d055      	beq.n	8012fd0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012f24:	4b30      	ldr	r3, [pc, #192]	; (8012fe8 <tcp_parseopt+0xe8>)
 8012f26:	2200      	movs	r2, #0
 8012f28:	801a      	strh	r2, [r3, #0]
 8012f2a:	e045      	b.n	8012fb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012f2c:	f7ff ffb2 	bl	8012e94 <tcp_get_next_optbyte>
 8012f30:	4603      	mov	r3, r0
 8012f32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
 8012f36:	2b02      	cmp	r3, #2
 8012f38:	d006      	beq.n	8012f48 <tcp_parseopt+0x48>
 8012f3a:	2b02      	cmp	r3, #2
 8012f3c:	dc2b      	bgt.n	8012f96 <tcp_parseopt+0x96>
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d041      	beq.n	8012fc6 <tcp_parseopt+0xc6>
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	d127      	bne.n	8012f96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012f46:	e037      	b.n	8012fb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012f48:	f7ff ffa4 	bl	8012e94 <tcp_get_next_optbyte>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b04      	cmp	r3, #4
 8012f50:	d13b      	bne.n	8012fca <tcp_parseopt+0xca>
 8012f52:	4b25      	ldr	r3, [pc, #148]	; (8012fe8 <tcp_parseopt+0xe8>)
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	3301      	adds	r3, #1
 8012f58:	4a22      	ldr	r2, [pc, #136]	; (8012fe4 <tcp_parseopt+0xe4>)
 8012f5a:	8812      	ldrh	r2, [r2, #0]
 8012f5c:	4293      	cmp	r3, r2
 8012f5e:	da34      	bge.n	8012fca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012f60:	f7ff ff98 	bl	8012e94 <tcp_get_next_optbyte>
 8012f64:	4603      	mov	r3, r0
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	021b      	lsls	r3, r3, #8
 8012f6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012f6c:	f7ff ff92 	bl	8012e94 <tcp_get_next_optbyte>
 8012f70:	4603      	mov	r3, r0
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	89bb      	ldrh	r3, [r7, #12]
 8012f76:	4313      	orrs	r3, r2
 8012f78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012f7a:	89bb      	ldrh	r3, [r7, #12]
 8012f7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012f80:	d804      	bhi.n	8012f8c <tcp_parseopt+0x8c>
 8012f82:	89bb      	ldrh	r3, [r7, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d001      	beq.n	8012f8c <tcp_parseopt+0x8c>
 8012f88:	89ba      	ldrh	r2, [r7, #12]
 8012f8a:	e001      	b.n	8012f90 <tcp_parseopt+0x90>
 8012f8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012f94:	e010      	b.n	8012fb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012f96:	f7ff ff7d 	bl	8012e94 <tcp_get_next_optbyte>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012f9e:	7afb      	ldrb	r3, [r7, #11]
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d914      	bls.n	8012fce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012fa4:	7afb      	ldrb	r3, [r7, #11]
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	4b0f      	ldr	r3, [pc, #60]	; (8012fe8 <tcp_parseopt+0xe8>)
 8012faa:	881b      	ldrh	r3, [r3, #0]
 8012fac:	4413      	add	r3, r2
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	3b02      	subs	r3, #2
 8012fb2:	b29a      	uxth	r2, r3
 8012fb4:	4b0c      	ldr	r3, [pc, #48]	; (8012fe8 <tcp_parseopt+0xe8>)
 8012fb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012fb8:	4b0b      	ldr	r3, [pc, #44]	; (8012fe8 <tcp_parseopt+0xe8>)
 8012fba:	881a      	ldrh	r2, [r3, #0]
 8012fbc:	4b09      	ldr	r3, [pc, #36]	; (8012fe4 <tcp_parseopt+0xe4>)
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d3b3      	bcc.n	8012f2c <tcp_parseopt+0x2c>
 8012fc4:	e004      	b.n	8012fd0 <tcp_parseopt+0xd0>
          return;
 8012fc6:	bf00      	nop
 8012fc8:	e002      	b.n	8012fd0 <tcp_parseopt+0xd0>
            return;
 8012fca:	bf00      	nop
 8012fcc:	e000      	b.n	8012fd0 <tcp_parseopt+0xd0>
            return;
 8012fce:	bf00      	nop
      }
    }
  }
}
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	0801cbf4 	.word	0x0801cbf4
 8012fdc:	0801d058 	.word	0x0801d058
 8012fe0:	0801cc40 	.word	0x0801cc40
 8012fe4:	20011bdc 	.word	0x20011bdc
 8012fe8:	20011be4 	.word	0x20011be4

08012fec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012fec:	b480      	push	{r7}
 8012fee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012ff0:	4b05      	ldr	r3, [pc, #20]	; (8013008 <tcp_trigger_input_pcb_close+0x1c>)
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f043 0310 	orr.w	r3, r3, #16
 8012ff8:	b2da      	uxtb	r2, r3
 8012ffa:	4b03      	ldr	r3, [pc, #12]	; (8013008 <tcp_trigger_input_pcb_close+0x1c>)
 8012ffc:	701a      	strb	r2, [r3, #0]
}
 8012ffe:	bf00      	nop
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr
 8013008:	20011bf5 	.word	0x20011bf5

0801300c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	60f8      	str	r0, [r7, #12]
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d00a      	beq.n	8013034 <tcp_route+0x28>
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	7a1b      	ldrb	r3, [r3, #8]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d006      	beq.n	8013034 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	7a1b      	ldrb	r3, [r3, #8]
 801302a:	4618      	mov	r0, r3
 801302c:	f7fb f800 	bl	800e030 <netif_get_by_index>
 8013030:	4603      	mov	r3, r0
 8013032:	e003      	b.n	801303c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013034:	6878      	ldr	r0, [r7, #4]
 8013036:	f003 f96d 	bl	8016314 <ip4_route>
 801303a:	4603      	mov	r3, r0
  }
}
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013044:	b590      	push	{r4, r7, lr}
 8013046:	b087      	sub	sp, #28
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	603b      	str	r3, [r7, #0]
 8013050:	4613      	mov	r3, r2
 8013052:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d105      	bne.n	8013066 <tcp_create_segment+0x22>
 801305a:	4b44      	ldr	r3, [pc, #272]	; (801316c <tcp_create_segment+0x128>)
 801305c:	22a3      	movs	r2, #163	; 0xa3
 801305e:	4944      	ldr	r1, [pc, #272]	; (8013170 <tcp_create_segment+0x12c>)
 8013060:	4844      	ldr	r0, [pc, #272]	; (8013174 <tcp_create_segment+0x130>)
 8013062:	f004 fee5 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d105      	bne.n	8013078 <tcp_create_segment+0x34>
 801306c:	4b3f      	ldr	r3, [pc, #252]	; (801316c <tcp_create_segment+0x128>)
 801306e:	22a4      	movs	r2, #164	; 0xa4
 8013070:	4941      	ldr	r1, [pc, #260]	; (8013178 <tcp_create_segment+0x134>)
 8013072:	4840      	ldr	r0, [pc, #256]	; (8013174 <tcp_create_segment+0x130>)
 8013074:	f004 fedc 	bl	8017e30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	b2db      	uxtb	r3, r3
 8013080:	f003 0304 	and.w	r3, r3, #4
 8013084:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013086:	2002      	movs	r0, #2
 8013088:	f7fa fc4a 	bl	800d920 <memp_malloc>
 801308c:	6138      	str	r0, [r7, #16]
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d104      	bne.n	801309e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013094:	68b8      	ldr	r0, [r7, #8]
 8013096:	f7fb fb59 	bl	800e74c <pbuf_free>
    return NULL;
 801309a:	2300      	movs	r3, #0
 801309c:	e061      	b.n	8013162 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80130a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	2200      	movs	r2, #0
 80130aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	68ba      	ldr	r2, [r7, #8]
 80130b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	891a      	ldrh	r2, [r3, #8]
 80130b6:	7dfb      	ldrb	r3, [r7, #23]
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d205      	bcs.n	80130ca <tcp_create_segment+0x86>
 80130be:	4b2b      	ldr	r3, [pc, #172]	; (801316c <tcp_create_segment+0x128>)
 80130c0:	22b0      	movs	r2, #176	; 0xb0
 80130c2:	492e      	ldr	r1, [pc, #184]	; (801317c <tcp_create_segment+0x138>)
 80130c4:	482b      	ldr	r0, [pc, #172]	; (8013174 <tcp_create_segment+0x130>)
 80130c6:	f004 feb3 	bl	8017e30 <iprintf>
  seg->len = p->tot_len - optlen;
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	891a      	ldrh	r2, [r3, #8]
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80130da:	2114      	movs	r1, #20
 80130dc:	68b8      	ldr	r0, [r7, #8]
 80130de:	f7fb fa9f 	bl	800e620 <pbuf_add_header>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d004      	beq.n	80130f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80130e8:	6938      	ldr	r0, [r7, #16]
 80130ea:	f7fd f800 	bl	80100ee <tcp_seg_free>
    return NULL;
 80130ee:	2300      	movs	r3, #0
 80130f0:	e037      	b.n	8013162 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	685a      	ldr	r2, [r3, #4]
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	8ada      	ldrh	r2, [r3, #22]
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	68dc      	ldr	r4, [r3, #12]
 8013104:	4610      	mov	r0, r2
 8013106:	f7f9 fe1b 	bl	800cd40 <lwip_htons>
 801310a:	4603      	mov	r3, r0
 801310c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	8b1a      	ldrh	r2, [r3, #24]
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	68dc      	ldr	r4, [r3, #12]
 8013116:	4610      	mov	r0, r2
 8013118:	f7f9 fe12 	bl	800cd40 <lwip_htons>
 801311c:	4603      	mov	r3, r0
 801311e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	68dc      	ldr	r4, [r3, #12]
 8013124:	6838      	ldr	r0, [r7, #0]
 8013126:	f7f9 fe20 	bl	800cd6a <lwip_htonl>
 801312a:	4603      	mov	r3, r0
 801312c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	089b      	lsrs	r3, r3, #2
 8013132:	b2db      	uxtb	r3, r3
 8013134:	b29b      	uxth	r3, r3
 8013136:	3305      	adds	r3, #5
 8013138:	b29b      	uxth	r3, r3
 801313a:	031b      	lsls	r3, r3, #12
 801313c:	b29a      	uxth	r2, r3
 801313e:	79fb      	ldrb	r3, [r7, #7]
 8013140:	b29b      	uxth	r3, r3
 8013142:	4313      	orrs	r3, r2
 8013144:	b29a      	uxth	r2, r3
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	68dc      	ldr	r4, [r3, #12]
 801314a:	4610      	mov	r0, r2
 801314c:	f7f9 fdf8 	bl	800cd40 <lwip_htons>
 8013150:	4603      	mov	r3, r0
 8013152:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	2200      	movs	r2, #0
 801315a:	749a      	strb	r2, [r3, #18]
 801315c:	2200      	movs	r2, #0
 801315e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013160:	693b      	ldr	r3, [r7, #16]
}
 8013162:	4618      	mov	r0, r3
 8013164:	371c      	adds	r7, #28
 8013166:	46bd      	mov	sp, r7
 8013168:	bd90      	pop	{r4, r7, pc}
 801316a:	bf00      	nop
 801316c:	0801d074 	.word	0x0801d074
 8013170:	0801d0a8 	.word	0x0801d0a8
 8013174:	0801d0c8 	.word	0x0801d0c8
 8013178:	0801d0f0 	.word	0x0801d0f0
 801317c:	0801d114 	.word	0x0801d114

08013180 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	607b      	str	r3, [r7, #4]
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
 801318c:	460b      	mov	r3, r1
 801318e:	81bb      	strh	r3, [r7, #12]
 8013190:	4613      	mov	r3, r2
 8013192:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013194:	89bb      	ldrh	r3, [r7, #12]
 8013196:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d105      	bne.n	80131aa <tcp_pbuf_prealloc+0x2a>
 801319e:	4b30      	ldr	r3, [pc, #192]	; (8013260 <tcp_pbuf_prealloc+0xe0>)
 80131a0:	22e8      	movs	r2, #232	; 0xe8
 80131a2:	4930      	ldr	r1, [pc, #192]	; (8013264 <tcp_pbuf_prealloc+0xe4>)
 80131a4:	4830      	ldr	r0, [pc, #192]	; (8013268 <tcp_pbuf_prealloc+0xe8>)
 80131a6:	f004 fe43 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d105      	bne.n	80131bc <tcp_pbuf_prealloc+0x3c>
 80131b0:	4b2b      	ldr	r3, [pc, #172]	; (8013260 <tcp_pbuf_prealloc+0xe0>)
 80131b2:	22e9      	movs	r2, #233	; 0xe9
 80131b4:	492d      	ldr	r1, [pc, #180]	; (801326c <tcp_pbuf_prealloc+0xec>)
 80131b6:	482c      	ldr	r0, [pc, #176]	; (8013268 <tcp_pbuf_prealloc+0xe8>)
 80131b8:	f004 fe3a 	bl	8017e30 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80131bc:	89ba      	ldrh	r2, [r7, #12]
 80131be:	897b      	ldrh	r3, [r7, #10]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d221      	bcs.n	8013208 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80131c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80131c8:	f003 0302 	and.w	r3, r3, #2
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d111      	bne.n	80131f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80131d0:	6a3b      	ldr	r3, [r7, #32]
 80131d2:	8b5b      	ldrh	r3, [r3, #26]
 80131d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d115      	bne.n	8013208 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80131dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d007      	beq.n	80131f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80131e4:	6a3b      	ldr	r3, [r7, #32]
 80131e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d103      	bne.n	80131f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80131ec:	6a3b      	ldr	r3, [r7, #32]
 80131ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d009      	beq.n	8013208 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80131f4:	89bb      	ldrh	r3, [r7, #12]
 80131f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80131fa:	f023 0203 	bic.w	r2, r3, #3
 80131fe:	897b      	ldrh	r3, [r7, #10]
 8013200:	4293      	cmp	r3, r2
 8013202:	bf28      	it	cs
 8013204:	4613      	movcs	r3, r2
 8013206:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013208:	8af9      	ldrh	r1, [r7, #22]
 801320a:	7bfb      	ldrb	r3, [r7, #15]
 801320c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013210:	4618      	mov	r0, r3
 8013212:	f7fa ffb7 	bl	800e184 <pbuf_alloc>
 8013216:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801321e:	2300      	movs	r3, #0
 8013220:	e019      	b.n	8013256 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d006      	beq.n	8013238 <tcp_pbuf_prealloc+0xb8>
 801322a:	4b0d      	ldr	r3, [pc, #52]	; (8013260 <tcp_pbuf_prealloc+0xe0>)
 801322c:	f240 120b 	movw	r2, #267	; 0x10b
 8013230:	490f      	ldr	r1, [pc, #60]	; (8013270 <tcp_pbuf_prealloc+0xf0>)
 8013232:	480d      	ldr	r0, [pc, #52]	; (8013268 <tcp_pbuf_prealloc+0xe8>)
 8013234:	f004 fdfc 	bl	8017e30 <iprintf>
  *oversize = p->len - length;
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	895a      	ldrh	r2, [r3, #10]
 801323c:	89bb      	ldrh	r3, [r7, #12]
 801323e:	1ad3      	subs	r3, r2, r3
 8013240:	b29a      	uxth	r2, r3
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	89ba      	ldrh	r2, [r7, #12]
 801324a:	811a      	strh	r2, [r3, #8]
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	891a      	ldrh	r2, [r3, #8]
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	815a      	strh	r2, [r3, #10]
  return p;
 8013254:	693b      	ldr	r3, [r7, #16]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3718      	adds	r7, #24
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	0801d074 	.word	0x0801d074
 8013264:	0801d12c 	.word	0x0801d12c
 8013268:	0801d0c8 	.word	0x0801d0c8
 801326c:	0801d150 	.word	0x0801d150
 8013270:	0801d170 	.word	0x0801d170

08013274 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	460b      	mov	r3, r1
 801327e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <tcp_write_checks+0x20>
 8013286:	4b33      	ldr	r3, [pc, #204]	; (8013354 <tcp_write_checks+0xe0>)
 8013288:	f240 1233 	movw	r2, #307	; 0x133
 801328c:	4932      	ldr	r1, [pc, #200]	; (8013358 <tcp_write_checks+0xe4>)
 801328e:	4833      	ldr	r0, [pc, #204]	; (801335c <tcp_write_checks+0xe8>)
 8013290:	f004 fdce 	bl	8017e30 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	7d1b      	ldrb	r3, [r3, #20]
 8013298:	2b04      	cmp	r3, #4
 801329a:	d00e      	beq.n	80132ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80132a0:	2b07      	cmp	r3, #7
 80132a2:	d00a      	beq.n	80132ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d006      	beq.n	80132ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80132b0:	2b03      	cmp	r3, #3
 80132b2:	d002      	beq.n	80132ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80132b4:	f06f 030a 	mvn.w	r3, #10
 80132b8:	e048      	b.n	801334c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80132ba:	887b      	ldrh	r3, [r7, #2]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d101      	bne.n	80132c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80132c0:	2300      	movs	r3, #0
 80132c2:	e043      	b.n	801334c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80132ca:	887a      	ldrh	r2, [r7, #2]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d909      	bls.n	80132e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	8b5b      	ldrh	r3, [r3, #26]
 80132d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132d8:	b29a      	uxth	r2, r3
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80132de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132e2:	e033      	b.n	801334c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132ea:	2b08      	cmp	r3, #8
 80132ec:	d909      	bls.n	8013302 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	8b5b      	ldrh	r3, [r3, #26]
 80132f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80132fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013300:	e024      	b.n	801334c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013308:	2b00      	cmp	r3, #0
 801330a:	d00f      	beq.n	801332c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013310:	2b00      	cmp	r3, #0
 8013312:	d11a      	bne.n	801334a <tcp_write_checks+0xd6>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013318:	2b00      	cmp	r3, #0
 801331a:	d116      	bne.n	801334a <tcp_write_checks+0xd6>
 801331c:	4b0d      	ldr	r3, [pc, #52]	; (8013354 <tcp_write_checks+0xe0>)
 801331e:	f240 1255 	movw	r2, #341	; 0x155
 8013322:	490f      	ldr	r1, [pc, #60]	; (8013360 <tcp_write_checks+0xec>)
 8013324:	480d      	ldr	r0, [pc, #52]	; (801335c <tcp_write_checks+0xe8>)
 8013326:	f004 fd83 	bl	8017e30 <iprintf>
 801332a:	e00e      	b.n	801334a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013330:	2b00      	cmp	r3, #0
 8013332:	d103      	bne.n	801333c <tcp_write_checks+0xc8>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013338:	2b00      	cmp	r3, #0
 801333a:	d006      	beq.n	801334a <tcp_write_checks+0xd6>
 801333c:	4b05      	ldr	r3, [pc, #20]	; (8013354 <tcp_write_checks+0xe0>)
 801333e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013342:	4908      	ldr	r1, [pc, #32]	; (8013364 <tcp_write_checks+0xf0>)
 8013344:	4805      	ldr	r0, [pc, #20]	; (801335c <tcp_write_checks+0xe8>)
 8013346:	f004 fd73 	bl	8017e30 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	0801d074 	.word	0x0801d074
 8013358:	0801d184 	.word	0x0801d184
 801335c:	0801d0c8 	.word	0x0801d0c8
 8013360:	0801d1a4 	.word	0x0801d1a4
 8013364:	0801d1e0 	.word	0x0801d1e0

08013368 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013368:	b590      	push	{r4, r7, lr}
 801336a:	b09b      	sub	sp, #108	; 0x6c
 801336c:	af04      	add	r7, sp, #16
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	4611      	mov	r1, r2
 8013374:	461a      	mov	r2, r3
 8013376:	460b      	mov	r3, r1
 8013378:	80fb      	strh	r3, [r7, #6]
 801337a:	4613      	mov	r3, r2
 801337c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013382:	2300      	movs	r3, #0
 8013384:	653b      	str	r3, [r7, #80]	; 0x50
 8013386:	2300      	movs	r3, #0
 8013388:	64fb      	str	r3, [r7, #76]	; 0x4c
 801338a:	2300      	movs	r3, #0
 801338c:	64bb      	str	r3, [r7, #72]	; 0x48
 801338e:	2300      	movs	r3, #0
 8013390:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013392:	2300      	movs	r3, #0
 8013394:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801339e:	2300      	movs	r3, #0
 80133a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d109      	bne.n	80133c4 <tcp_write+0x5c>
 80133b0:	4ba4      	ldr	r3, [pc, #656]	; (8013644 <tcp_write+0x2dc>)
 80133b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80133b6:	49a4      	ldr	r1, [pc, #656]	; (8013648 <tcp_write+0x2e0>)
 80133b8:	48a4      	ldr	r0, [pc, #656]	; (801364c <tcp_write+0x2e4>)
 80133ba:	f004 fd39 	bl	8017e30 <iprintf>
 80133be:	f06f 030f 	mvn.w	r3, #15
 80133c2:	e32a      	b.n	8013a1a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80133ca:	085b      	lsrs	r3, r3, #1
 80133cc:	b29a      	uxth	r2, r3
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d2:	4293      	cmp	r3, r2
 80133d4:	bf28      	it	cs
 80133d6:	4613      	movcs	r3, r2
 80133d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80133da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d102      	bne.n	80133e6 <tcp_write+0x7e>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133e4:	e000      	b.n	80133e8 <tcp_write+0x80>
 80133e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d109      	bne.n	8013404 <tcp_write+0x9c>
 80133f0:	4b94      	ldr	r3, [pc, #592]	; (8013644 <tcp_write+0x2dc>)
 80133f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80133f6:	4996      	ldr	r1, [pc, #600]	; (8013650 <tcp_write+0x2e8>)
 80133f8:	4894      	ldr	r0, [pc, #592]	; (801364c <tcp_write+0x2e4>)
 80133fa:	f004 fd19 	bl	8017e30 <iprintf>
 80133fe:	f06f 030f 	mvn.w	r3, #15
 8013402:	e30a      	b.n	8013a1a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013404:	88fb      	ldrh	r3, [r7, #6]
 8013406:	4619      	mov	r1, r3
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f7ff ff33 	bl	8013274 <tcp_write_checks>
 801340e:	4603      	mov	r3, r0
 8013410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013414:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013418:	2b00      	cmp	r3, #0
 801341a:	d002      	beq.n	8013422 <tcp_write+0xba>
    return err;
 801341c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013420:	e2fb      	b.n	8013a1a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013428:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801342c:	2300      	movs	r3, #0
 801342e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013436:	2b00      	cmp	r3, #0
 8013438:	f000 80f6 	beq.w	8013628 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013440:	653b      	str	r3, [r7, #80]	; 0x50
 8013442:	e002      	b.n	801344a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801344a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d1f8      	bne.n	8013444 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013454:	7a9b      	ldrb	r3, [r3, #10]
 8013456:	009b      	lsls	r3, r3, #2
 8013458:	b29b      	uxth	r3, r3
 801345a:	f003 0304 	and.w	r3, r3, #4
 801345e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013460:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013464:	891b      	ldrh	r3, [r3, #8]
 8013466:	4619      	mov	r1, r3
 8013468:	8c3b      	ldrh	r3, [r7, #32]
 801346a:	440b      	add	r3, r1
 801346c:	429a      	cmp	r2, r3
 801346e:	da06      	bge.n	801347e <tcp_write+0x116>
 8013470:	4b74      	ldr	r3, [pc, #464]	; (8013644 <tcp_write+0x2dc>)
 8013472:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013476:	4977      	ldr	r1, [pc, #476]	; (8013654 <tcp_write+0x2ec>)
 8013478:	4874      	ldr	r0, [pc, #464]	; (801364c <tcp_write+0x2e4>)
 801347a:	f004 fcd9 	bl	8017e30 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801347e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013480:	891a      	ldrh	r2, [r3, #8]
 8013482:	8c3b      	ldrh	r3, [r7, #32]
 8013484:	4413      	add	r3, r2
 8013486:	b29b      	uxth	r3, r3
 8013488:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013494:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013496:	8a7b      	ldrh	r3, [r7, #18]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d026      	beq.n	80134ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801349c:	8a7b      	ldrh	r3, [r7, #18]
 801349e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d206      	bcs.n	80134b2 <tcp_write+0x14a>
 80134a4:	4b67      	ldr	r3, [pc, #412]	; (8013644 <tcp_write+0x2dc>)
 80134a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80134aa:	496b      	ldr	r1, [pc, #428]	; (8013658 <tcp_write+0x2f0>)
 80134ac:	4867      	ldr	r0, [pc, #412]	; (801364c <tcp_write+0x2e4>)
 80134ae:	f004 fcbf 	bl	8017e30 <iprintf>
      seg = last_unsent;
 80134b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80134b6:	8a7b      	ldrh	r3, [r7, #18]
 80134b8:	88fa      	ldrh	r2, [r7, #6]
 80134ba:	4293      	cmp	r3, r2
 80134bc:	bf28      	it	cs
 80134be:	4613      	movcs	r3, r2
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134c4:	4293      	cmp	r3, r2
 80134c6:	bf28      	it	cs
 80134c8:	4613      	movcs	r3, r2
 80134ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80134cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134d2:	4413      	add	r3, r2
 80134d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80134d8:	8a7a      	ldrh	r2, [r7, #18]
 80134da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	b29b      	uxth	r3, r3
 80134e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80134e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80134ea:	8a7b      	ldrh	r3, [r7, #18]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d00b      	beq.n	8013508 <tcp_write+0x1a0>
 80134f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80134f4:	88fb      	ldrh	r3, [r7, #6]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d006      	beq.n	8013508 <tcp_write+0x1a0>
 80134fa:	4b52      	ldr	r3, [pc, #328]	; (8013644 <tcp_write+0x2dc>)
 80134fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013500:	4956      	ldr	r1, [pc, #344]	; (801365c <tcp_write+0x2f4>)
 8013502:	4852      	ldr	r0, [pc, #328]	; (801364c <tcp_write+0x2e4>)
 8013504:	f004 fc94 	bl	8017e30 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801350c:	88fb      	ldrh	r3, [r7, #6]
 801350e:	429a      	cmp	r2, r3
 8013510:	f080 8167 	bcs.w	80137e2 <tcp_write+0x47a>
 8013514:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013516:	2b00      	cmp	r3, #0
 8013518:	f000 8163 	beq.w	80137e2 <tcp_write+0x47a>
 801351c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801351e:	891b      	ldrh	r3, [r3, #8]
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 815e 	beq.w	80137e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013526:	88fa      	ldrh	r2, [r7, #6]
 8013528:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801352c:	1ad2      	subs	r2, r2, r3
 801352e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013530:	4293      	cmp	r3, r2
 8013532:	bfa8      	it	ge
 8013534:	4613      	movge	r3, r2
 8013536:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801353a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801353c:	797b      	ldrb	r3, [r7, #5]
 801353e:	f003 0301 	and.w	r3, r3, #1
 8013542:	2b00      	cmp	r3, #0
 8013544:	d027      	beq.n	8013596 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013546:	f107 0012 	add.w	r0, r7, #18
 801354a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801354c:	8bf9      	ldrh	r1, [r7, #30]
 801354e:	2301      	movs	r3, #1
 8013550:	9302      	str	r3, [sp, #8]
 8013552:	797b      	ldrb	r3, [r7, #5]
 8013554:	9301      	str	r3, [sp, #4]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	9300      	str	r3, [sp, #0]
 801355a:	4603      	mov	r3, r0
 801355c:	2000      	movs	r0, #0
 801355e:	f7ff fe0f 	bl	8013180 <tcp_pbuf_prealloc>
 8013562:	6578      	str	r0, [r7, #84]	; 0x54
 8013564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 8225 	beq.w	80139b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801356c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801356e:	6858      	ldr	r0, [r3, #4]
 8013570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013574:	68ba      	ldr	r2, [r7, #8]
 8013576:	4413      	add	r3, r2
 8013578:	8bfa      	ldrh	r2, [r7, #30]
 801357a:	4619      	mov	r1, r3
 801357c:	f004 fb93 	bl	8017ca6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013580:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013582:	f7fb f971 	bl	800e868 <pbuf_clen>
 8013586:	4603      	mov	r3, r0
 8013588:	461a      	mov	r2, r3
 801358a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801358e:	4413      	add	r3, r2
 8013590:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013594:	e041      	b.n	801361a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	637b      	str	r3, [r7, #52]	; 0x34
 801359c:	e002      	b.n	80135a4 <tcp_write+0x23c>
 801359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	637b      	str	r3, [r7, #52]	; 0x34
 80135a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d1f8      	bne.n	801359e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80135ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ae:	7b1b      	ldrb	r3, [r3, #12]
 80135b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d115      	bne.n	80135e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80135b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135be:	8952      	ldrh	r2, [r2, #10]
 80135c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	429a      	cmp	r2, r3
 80135c6:	d10d      	bne.n	80135e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80135c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d006      	beq.n	80135de <tcp_write+0x276>
 80135d0:	4b1c      	ldr	r3, [pc, #112]	; (8013644 <tcp_write+0x2dc>)
 80135d2:	f240 2231 	movw	r2, #561	; 0x231
 80135d6:	4922      	ldr	r1, [pc, #136]	; (8013660 <tcp_write+0x2f8>)
 80135d8:	481c      	ldr	r0, [pc, #112]	; (801364c <tcp_write+0x2e4>)
 80135da:	f004 fc29 	bl	8017e30 <iprintf>
          extendlen = seglen;
 80135de:	8bfb      	ldrh	r3, [r7, #30]
 80135e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80135e2:	e01a      	b.n	801361a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80135e4:	8bfb      	ldrh	r3, [r7, #30]
 80135e6:	2201      	movs	r2, #1
 80135e8:	4619      	mov	r1, r3
 80135ea:	2000      	movs	r0, #0
 80135ec:	f7fa fdca 	bl	800e184 <pbuf_alloc>
 80135f0:	6578      	str	r0, [r7, #84]	; 0x54
 80135f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f000 81e0 	beq.w	80139ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80135fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	441a      	add	r2, r3
 8013602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013604:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013606:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013608:	f7fb f92e 	bl	800e868 <pbuf_clen>
 801360c:	4603      	mov	r3, r0
 801360e:	461a      	mov	r2, r3
 8013610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013614:	4413      	add	r3, r2
 8013616:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801361a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801361e:	8bfb      	ldrh	r3, [r7, #30]
 8013620:	4413      	add	r3, r2
 8013622:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013626:	e0dc      	b.n	80137e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801362e:	2b00      	cmp	r3, #0
 8013630:	f000 80d7 	beq.w	80137e2 <tcp_write+0x47a>
 8013634:	4b03      	ldr	r3, [pc, #12]	; (8013644 <tcp_write+0x2dc>)
 8013636:	f240 224a 	movw	r2, #586	; 0x24a
 801363a:	490a      	ldr	r1, [pc, #40]	; (8013664 <tcp_write+0x2fc>)
 801363c:	4803      	ldr	r0, [pc, #12]	; (801364c <tcp_write+0x2e4>)
 801363e:	f004 fbf7 	bl	8017e30 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013642:	e0ce      	b.n	80137e2 <tcp_write+0x47a>
 8013644:	0801d074 	.word	0x0801d074
 8013648:	0801d214 	.word	0x0801d214
 801364c:	0801d0c8 	.word	0x0801d0c8
 8013650:	0801d22c 	.word	0x0801d22c
 8013654:	0801d260 	.word	0x0801d260
 8013658:	0801d278 	.word	0x0801d278
 801365c:	0801d298 	.word	0x0801d298
 8013660:	0801d2b8 	.word	0x0801d2b8
 8013664:	0801d2e4 	.word	0x0801d2e4
    struct pbuf *p;
    u16_t left = len - pos;
 8013668:	88fa      	ldrh	r2, [r7, #6]
 801366a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801366e:	1ad3      	subs	r3, r2, r3
 8013670:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013672:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013676:	b29b      	uxth	r3, r3
 8013678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801367a:	1ad3      	subs	r3, r2, r3
 801367c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801367e:	8b7a      	ldrh	r2, [r7, #26]
 8013680:	8bbb      	ldrh	r3, [r7, #28]
 8013682:	4293      	cmp	r3, r2
 8013684:	bf28      	it	cs
 8013686:	4613      	movcs	r3, r2
 8013688:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801368a:	797b      	ldrb	r3, [r7, #5]
 801368c:	f003 0301 	and.w	r3, r3, #1
 8013690:	2b00      	cmp	r3, #0
 8013692:	d036      	beq.n	8013702 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013694:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013698:	b29a      	uxth	r2, r3
 801369a:	8b3b      	ldrh	r3, [r7, #24]
 801369c:	4413      	add	r3, r2
 801369e:	b299      	uxth	r1, r3
 80136a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	bf0c      	ite	eq
 80136a6:	2301      	moveq	r3, #1
 80136a8:	2300      	movne	r3, #0
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	f107 0012 	add.w	r0, r7, #18
 80136b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80136b2:	9302      	str	r3, [sp, #8]
 80136b4:	797b      	ldrb	r3, [r7, #5]
 80136b6:	9301      	str	r3, [sp, #4]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	9300      	str	r3, [sp, #0]
 80136bc:	4603      	mov	r3, r0
 80136be:	2036      	movs	r0, #54	; 0x36
 80136c0:	f7ff fd5e 	bl	8013180 <tcp_pbuf_prealloc>
 80136c4:	6338      	str	r0, [r7, #48]	; 0x30
 80136c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 8178 	beq.w	80139be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	895b      	ldrh	r3, [r3, #10]
 80136d2:	8b3a      	ldrh	r2, [r7, #24]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d906      	bls.n	80136e6 <tcp_write+0x37e>
 80136d8:	4b8c      	ldr	r3, [pc, #560]	; (801390c <tcp_write+0x5a4>)
 80136da:	f240 2266 	movw	r2, #614	; 0x266
 80136de:	498c      	ldr	r1, [pc, #560]	; (8013910 <tcp_write+0x5a8>)
 80136e0:	488c      	ldr	r0, [pc, #560]	; (8013914 <tcp_write+0x5ac>)
 80136e2:	f004 fba5 	bl	8017e30 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80136e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e8:	685a      	ldr	r2, [r3, #4]
 80136ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80136ee:	18d0      	adds	r0, r2, r3
 80136f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	4413      	add	r3, r2
 80136f8:	8b3a      	ldrh	r2, [r7, #24]
 80136fa:	4619      	mov	r1, r3
 80136fc:	f004 fad3 	bl	8017ca6 <memcpy>
 8013700:	e02f      	b.n	8013762 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013702:	8a7b      	ldrh	r3, [r7, #18]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d006      	beq.n	8013716 <tcp_write+0x3ae>
 8013708:	4b80      	ldr	r3, [pc, #512]	; (801390c <tcp_write+0x5a4>)
 801370a:	f240 2271 	movw	r2, #625	; 0x271
 801370e:	4982      	ldr	r1, [pc, #520]	; (8013918 <tcp_write+0x5b0>)
 8013710:	4880      	ldr	r0, [pc, #512]	; (8013914 <tcp_write+0x5ac>)
 8013712:	f004 fb8d 	bl	8017e30 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013716:	8b3b      	ldrh	r3, [r7, #24]
 8013718:	2201      	movs	r2, #1
 801371a:	4619      	mov	r1, r3
 801371c:	2036      	movs	r0, #54	; 0x36
 801371e:	f7fa fd31 	bl	800e184 <pbuf_alloc>
 8013722:	6178      	str	r0, [r7, #20]
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	2b00      	cmp	r3, #0
 8013728:	f000 814b 	beq.w	80139c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801372c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	441a      	add	r2, r3
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013738:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801373c:	b29b      	uxth	r3, r3
 801373e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013742:	4619      	mov	r1, r3
 8013744:	2036      	movs	r0, #54	; 0x36
 8013746:	f7fa fd1d 	bl	800e184 <pbuf_alloc>
 801374a:	6338      	str	r0, [r7, #48]	; 0x30
 801374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374e:	2b00      	cmp	r3, #0
 8013750:	d103      	bne.n	801375a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013752:	6978      	ldr	r0, [r7, #20]
 8013754:	f7fa fffa 	bl	800e74c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013758:	e136      	b.n	80139c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801375a:	6979      	ldr	r1, [r7, #20]
 801375c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801375e:	f7fb f8c3 	bl	800e8e8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013764:	f7fb f880 	bl	800e868 <pbuf_clen>
 8013768:	4603      	mov	r3, r0
 801376a:	461a      	mov	r2, r3
 801376c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013770:	4413      	add	r3, r2
 8013772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801377a:	2b09      	cmp	r3, #9
 801377c:	d903      	bls.n	8013786 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801377e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013780:	f7fa ffe4 	bl	800e74c <pbuf_free>
      goto memerr;
 8013784:	e120      	b.n	80139c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801378a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801378e:	441a      	add	r2, r3
 8013790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	4613      	mov	r3, r2
 8013798:	2200      	movs	r2, #0
 801379a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801379c:	68f8      	ldr	r0, [r7, #12]
 801379e:	f7ff fc51 	bl	8013044 <tcp_create_segment>
 80137a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80137a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f000 810d 	beq.w	80139c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80137ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d102      	bne.n	80137b8 <tcp_write+0x450>
      queue = seg;
 80137b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137b4:	647b      	str	r3, [r7, #68]	; 0x44
 80137b6:	e00c      	b.n	80137d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80137b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <tcp_write+0x464>
 80137be:	4b53      	ldr	r3, [pc, #332]	; (801390c <tcp_write+0x5a4>)
 80137c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80137c4:	4955      	ldr	r1, [pc, #340]	; (801391c <tcp_write+0x5b4>)
 80137c6:	4853      	ldr	r0, [pc, #332]	; (8013914 <tcp_write+0x5ac>)
 80137c8:	f004 fb32 	bl	8017e30 <iprintf>
      prev_seg->next = seg;
 80137cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80137d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80137d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80137d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137da:	8b3b      	ldrh	r3, [r7, #24]
 80137dc:	4413      	add	r3, r2
 80137de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80137e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137e6:	88fb      	ldrh	r3, [r7, #6]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	f4ff af3d 	bcc.w	8013668 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80137ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d02c      	beq.n	801384e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80137f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137fa:	e01e      	b.n	801383a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80137fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137fe:	891a      	ldrh	r2, [r3, #8]
 8013800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013802:	4413      	add	r3, r2
 8013804:	b29a      	uxth	r2, r3
 8013806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013808:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d110      	bne.n	8013834 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013814:	685b      	ldr	r3, [r3, #4]
 8013816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013818:	8952      	ldrh	r2, [r2, #10]
 801381a:	4413      	add	r3, r2
 801381c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801381e:	68b9      	ldr	r1, [r7, #8]
 8013820:	4618      	mov	r0, r3
 8013822:	f004 fa40 	bl	8017ca6 <memcpy>
        p->len += oversize_used;
 8013826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013828:	895a      	ldrh	r2, [r3, #10]
 801382a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801382c:	4413      	add	r3, r2
 801382e:	b29a      	uxth	r2, r3
 8013830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013832:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	62fb      	str	r3, [r7, #44]	; 0x2c
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d1dd      	bne.n	80137fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013842:	891a      	ldrh	r2, [r3, #8]
 8013844:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013846:	4413      	add	r3, r2
 8013848:	b29a      	uxth	r2, r3
 801384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801384c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801384e:	8a7a      	ldrh	r2, [r7, #18]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013858:	2b00      	cmp	r3, #0
 801385a:	d018      	beq.n	801388e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801385c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801385e:	2b00      	cmp	r3, #0
 8013860:	d106      	bne.n	8013870 <tcp_write+0x508>
 8013862:	4b2a      	ldr	r3, [pc, #168]	; (801390c <tcp_write+0x5a4>)
 8013864:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013868:	492d      	ldr	r1, [pc, #180]	; (8013920 <tcp_write+0x5b8>)
 801386a:	482a      	ldr	r0, [pc, #168]	; (8013914 <tcp_write+0x5ac>)
 801386c:	f004 fae0 	bl	8017e30 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013876:	4618      	mov	r0, r3
 8013878:	f7fb f836 	bl	800e8e8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801387e:	891a      	ldrh	r2, [r3, #8]
 8013880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013882:	891b      	ldrh	r3, [r3, #8]
 8013884:	4413      	add	r3, r2
 8013886:	b29a      	uxth	r2, r3
 8013888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388a:	811a      	strh	r2, [r3, #8]
 801388c:	e037      	b.n	80138fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 801388e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013890:	2b00      	cmp	r3, #0
 8013892:	d034      	beq.n	80138fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013896:	2b00      	cmp	r3, #0
 8013898:	d003      	beq.n	80138a2 <tcp_write+0x53a>
 801389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d106      	bne.n	80138b0 <tcp_write+0x548>
 80138a2:	4b1a      	ldr	r3, [pc, #104]	; (801390c <tcp_write+0x5a4>)
 80138a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80138a8:	491e      	ldr	r1, [pc, #120]	; (8013924 <tcp_write+0x5bc>)
 80138aa:	481a      	ldr	r0, [pc, #104]	; (8013914 <tcp_write+0x5ac>)
 80138ac:	f004 fac0 	bl	8017e30 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80138b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80138b6:	e009      	b.n	80138cc <tcp_write+0x564>
      p->tot_len += extendlen;
 80138b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ba:	891a      	ldrh	r2, [r3, #8]
 80138bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138be:	4413      	add	r3, r2
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80138c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80138cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1f1      	bne.n	80138b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80138d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d6:	891a      	ldrh	r2, [r3, #8]
 80138d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138da:	4413      	add	r3, r2
 80138dc:	b29a      	uxth	r2, r3
 80138de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80138e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e4:	895a      	ldrh	r2, [r3, #10]
 80138e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138e8:	4413      	add	r3, r2
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80138f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138f2:	891a      	ldrh	r2, [r3, #8]
 80138f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80138f6:	4413      	add	r3, r2
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80138fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013900:	2b00      	cmp	r3, #0
 8013902:	d111      	bne.n	8013928 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013908:	66da      	str	r2, [r3, #108]	; 0x6c
 801390a:	e010      	b.n	801392e <tcp_write+0x5c6>
 801390c:	0801d074 	.word	0x0801d074
 8013910:	0801d314 	.word	0x0801d314
 8013914:	0801d0c8 	.word	0x0801d0c8
 8013918:	0801d354 	.word	0x0801d354
 801391c:	0801d364 	.word	0x0801d364
 8013920:	0801d378 	.word	0x0801d378
 8013924:	0801d3b0 	.word	0x0801d3b0
  } else {
    last_unsent->next = queue;
 8013928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801392a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801392c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013932:	88fb      	ldrh	r3, [r7, #6]
 8013934:	441a      	add	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013940:	88fb      	ldrh	r3, [r7, #6]
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	b29a      	uxth	r2, r3
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013952:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801395c:	2b00      	cmp	r3, #0
 801395e:	d00e      	beq.n	801397e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10a      	bne.n	801397e <tcp_write+0x616>
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801396c:	2b00      	cmp	r3, #0
 801396e:	d106      	bne.n	801397e <tcp_write+0x616>
 8013970:	4b2c      	ldr	r3, [pc, #176]	; (8013a24 <tcp_write+0x6bc>)
 8013972:	f240 3212 	movw	r2, #786	; 0x312
 8013976:	492c      	ldr	r1, [pc, #176]	; (8013a28 <tcp_write+0x6c0>)
 8013978:	482c      	ldr	r0, [pc, #176]	; (8013a2c <tcp_write+0x6c4>)
 801397a:	f004 fa59 	bl	8017e30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013980:	2b00      	cmp	r3, #0
 8013982:	d016      	beq.n	80139b2 <tcp_write+0x64a>
 8013984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d012      	beq.n	80139b2 <tcp_write+0x64a>
 801398c:	797b      	ldrb	r3, [r7, #5]
 801398e:	f003 0302 	and.w	r3, r3, #2
 8013992:	2b00      	cmp	r3, #0
 8013994:	d10d      	bne.n	80139b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	899b      	ldrh	r3, [r3, #12]
 801399c:	b29c      	uxth	r4, r3
 801399e:	2008      	movs	r0, #8
 80139a0:	f7f9 f9ce 	bl	800cd40 <lwip_htons>
 80139a4:	4603      	mov	r3, r0
 80139a6:	461a      	mov	r2, r3
 80139a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139aa:	68db      	ldr	r3, [r3, #12]
 80139ac:	4322      	orrs	r2, r4
 80139ae:	b292      	uxth	r2, r2
 80139b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80139b2:	2300      	movs	r3, #0
 80139b4:	e031      	b.n	8013a1a <tcp_write+0x6b2>
          goto memerr;
 80139b6:	bf00      	nop
 80139b8:	e006      	b.n	80139c8 <tcp_write+0x660>
            goto memerr;
 80139ba:	bf00      	nop
 80139bc:	e004      	b.n	80139c8 <tcp_write+0x660>
        goto memerr;
 80139be:	bf00      	nop
 80139c0:	e002      	b.n	80139c8 <tcp_write+0x660>
        goto memerr;
 80139c2:	bf00      	nop
 80139c4:	e000      	b.n	80139c8 <tcp_write+0x660>
      goto memerr;
 80139c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	8b5b      	ldrh	r3, [r3, #26]
 80139cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139d0:	b29a      	uxth	r2, r3
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80139d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d002      	beq.n	80139e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80139dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80139de:	f7fa feb5 	bl	800e74c <pbuf_free>
  }
  if (queue != NULL) {
 80139e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d002      	beq.n	80139ee <tcp_write+0x686>
    tcp_segs_free(queue);
 80139e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80139ea:	f7fc fb6b 	bl	80100c4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00e      	beq.n	8013a16 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d10a      	bne.n	8013a16 <tcp_write+0x6ae>
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d106      	bne.n	8013a16 <tcp_write+0x6ae>
 8013a08:	4b06      	ldr	r3, [pc, #24]	; (8013a24 <tcp_write+0x6bc>)
 8013a0a:	f240 3227 	movw	r2, #807	; 0x327
 8013a0e:	4906      	ldr	r1, [pc, #24]	; (8013a28 <tcp_write+0x6c0>)
 8013a10:	4806      	ldr	r0, [pc, #24]	; (8013a2c <tcp_write+0x6c4>)
 8013a12:	f004 fa0d 	bl	8017e30 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	375c      	adds	r7, #92	; 0x5c
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd90      	pop	{r4, r7, pc}
 8013a22:	bf00      	nop
 8013a24:	0801d074 	.word	0x0801d074
 8013a28:	0801d3e8 	.word	0x0801d3e8
 8013a2c:	0801d0c8 	.word	0x0801d0c8

08013a30 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b08b      	sub	sp, #44	; 0x2c
 8013a34:	af02      	add	r7, sp, #8
 8013a36:	6078      	str	r0, [r7, #4]
 8013a38:	460b      	mov	r3, r1
 8013a3a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	61fb      	str	r3, [r7, #28]
 8013a40:	2300      	movs	r3, #0
 8013a42:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013a44:	2300      	movs	r3, #0
 8013a46:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d106      	bne.n	8013a5c <tcp_split_unsent_seg+0x2c>
 8013a4e:	4b95      	ldr	r3, [pc, #596]	; (8013ca4 <tcp_split_unsent_seg+0x274>)
 8013a50:	f240 324b 	movw	r2, #843	; 0x34b
 8013a54:	4994      	ldr	r1, [pc, #592]	; (8013ca8 <tcp_split_unsent_seg+0x278>)
 8013a56:	4895      	ldr	r0, [pc, #596]	; (8013cac <tcp_split_unsent_seg+0x27c>)
 8013a58:	f004 f9ea 	bl	8017e30 <iprintf>

  useg = pcb->unsent;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a60:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d102      	bne.n	8013a6e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a6c:	e116      	b.n	8013c9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013a6e:	887b      	ldrh	r3, [r7, #2]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d109      	bne.n	8013a88 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013a74:	4b8b      	ldr	r3, [pc, #556]	; (8013ca4 <tcp_split_unsent_seg+0x274>)
 8013a76:	f240 3253 	movw	r2, #851	; 0x353
 8013a7a:	498d      	ldr	r1, [pc, #564]	; (8013cb0 <tcp_split_unsent_seg+0x280>)
 8013a7c:	488b      	ldr	r0, [pc, #556]	; (8013cac <tcp_split_unsent_seg+0x27c>)
 8013a7e:	f004 f9d7 	bl	8017e30 <iprintf>
    return ERR_VAL;
 8013a82:	f06f 0305 	mvn.w	r3, #5
 8013a86:	e109      	b.n	8013c9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	891b      	ldrh	r3, [r3, #8]
 8013a8c:	887a      	ldrh	r2, [r7, #2]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d301      	bcc.n	8013a96 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	e102      	b.n	8013c9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a9a:	887a      	ldrh	r2, [r7, #2]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d906      	bls.n	8013aae <tcp_split_unsent_seg+0x7e>
 8013aa0:	4b80      	ldr	r3, [pc, #512]	; (8013ca4 <tcp_split_unsent_seg+0x274>)
 8013aa2:	f240 325b 	movw	r2, #859	; 0x35b
 8013aa6:	4983      	ldr	r1, [pc, #524]	; (8013cb4 <tcp_split_unsent_seg+0x284>)
 8013aa8:	4880      	ldr	r0, [pc, #512]	; (8013cac <tcp_split_unsent_seg+0x27c>)
 8013aaa:	f004 f9c1 	bl	8017e30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	891b      	ldrh	r3, [r3, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d106      	bne.n	8013ac4 <tcp_split_unsent_seg+0x94>
 8013ab6:	4b7b      	ldr	r3, [pc, #492]	; (8013ca4 <tcp_split_unsent_seg+0x274>)
 8013ab8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013abc:	497e      	ldr	r1, [pc, #504]	; (8013cb8 <tcp_split_unsent_seg+0x288>)
 8013abe:	487b      	ldr	r0, [pc, #492]	; (8013cac <tcp_split_unsent_seg+0x27c>)
 8013ac0:	f004 f9b6 	bl	8017e30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013ac4:	697b      	ldr	r3, [r7, #20]
 8013ac6:	7a9b      	ldrb	r3, [r3, #10]
 8013ac8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013aca:	7bfb      	ldrb	r3, [r7, #15]
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	f003 0304 	and.w	r3, r3, #4
 8013ad4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	891a      	ldrh	r2, [r3, #8]
 8013ada:	887b      	ldrh	r3, [r7, #2]
 8013adc:	1ad3      	subs	r3, r2, r3
 8013ade:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013ae0:	7bbb      	ldrb	r3, [r7, #14]
 8013ae2:	b29a      	uxth	r2, r3
 8013ae4:	89bb      	ldrh	r3, [r7, #12]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013aee:	4619      	mov	r1, r3
 8013af0:	2036      	movs	r0, #54	; 0x36
 8013af2:	f7fa fb47 	bl	800e184 <pbuf_alloc>
 8013af6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f000 80b7 	beq.w	8013c6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	891a      	ldrh	r2, [r3, #8]
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	891b      	ldrh	r3, [r3, #8]
 8013b0a:	1ad3      	subs	r3, r2, r3
 8013b0c:	b29a      	uxth	r2, r3
 8013b0e:	887b      	ldrh	r3, [r7, #2]
 8013b10:	4413      	add	r3, r2
 8013b12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	6858      	ldr	r0, [r3, #4]
 8013b18:	693b      	ldr	r3, [r7, #16]
 8013b1a:	685a      	ldr	r2, [r3, #4]
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
 8013b1e:	18d1      	adds	r1, r2, r3
 8013b20:	897b      	ldrh	r3, [r7, #10]
 8013b22:	89ba      	ldrh	r2, [r7, #12]
 8013b24:	f7fb f808 	bl	800eb38 <pbuf_copy_partial>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	89bb      	ldrh	r3, [r7, #12]
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	f040 809f 	bne.w	8013c72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	899b      	ldrh	r3, [r3, #12]
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f9 f8ff 	bl	800cd40 <lwip_htons>
 8013b42:	4603      	mov	r3, r0
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013b50:	7efb      	ldrb	r3, [r7, #27]
 8013b52:	f003 0308 	and.w	r3, r3, #8
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d007      	beq.n	8013b6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013b5a:	7efb      	ldrb	r3, [r7, #27]
 8013b5c:	f023 0308 	bic.w	r3, r3, #8
 8013b60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013b62:	7ebb      	ldrb	r3, [r7, #26]
 8013b64:	f043 0308 	orr.w	r3, r3, #8
 8013b68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013b6a:	7efb      	ldrb	r3, [r7, #27]
 8013b6c:	f003 0301 	and.w	r3, r3, #1
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d007      	beq.n	8013b84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013b74:	7efb      	ldrb	r3, [r7, #27]
 8013b76:	f023 0301 	bic.w	r3, r3, #1
 8013b7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013b7c:	7ebb      	ldrb	r3, [r7, #26]
 8013b7e:	f043 0301 	orr.w	r3, r3, #1
 8013b82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013b84:	697b      	ldr	r3, [r7, #20]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7f9 f8ed 	bl	800cd6a <lwip_htonl>
 8013b90:	4602      	mov	r2, r0
 8013b92:	887b      	ldrh	r3, [r7, #2]
 8013b94:	18d1      	adds	r1, r2, r3
 8013b96:	7eba      	ldrb	r2, [r7, #26]
 8013b98:	7bfb      	ldrb	r3, [r7, #15]
 8013b9a:	9300      	str	r3, [sp, #0]
 8013b9c:	460b      	mov	r3, r1
 8013b9e:	6939      	ldr	r1, [r7, #16]
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7ff fa4f 	bl	8013044 <tcp_create_segment>
 8013ba6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d063      	beq.n	8013c76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fa fe58 	bl	800e868 <pbuf_clen>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	461a      	mov	r2, r3
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bc2:	1a9b      	subs	r3, r3, r2
 8013bc4:	b29a      	uxth	r2, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	6858      	ldr	r0, [r3, #4]
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	891a      	ldrh	r2, [r3, #8]
 8013bd6:	89bb      	ldrh	r3, [r7, #12]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	b29b      	uxth	r3, r3
 8013bdc:	4619      	mov	r1, r3
 8013bde:	f7fa fc2f 	bl	800e440 <pbuf_realloc>
  useg->len -= remainder;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	891a      	ldrh	r2, [r3, #8]
 8013be6:	89bb      	ldrh	r3, [r7, #12]
 8013be8:	1ad3      	subs	r3, r2, r3
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	899b      	ldrh	r3, [r3, #12]
 8013bf6:	b29c      	uxth	r4, r3
 8013bf8:	7efb      	ldrb	r3, [r7, #27]
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f9 f89f 	bl	800cd40 <lwip_htons>
 8013c02:	4603      	mov	r3, r0
 8013c04:	461a      	mov	r2, r3
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	4322      	orrs	r2, r4
 8013c0c:	b292      	uxth	r2, r2
 8013c0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fa fe27 	bl	800e868 <pbuf_clen>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c24:	4413      	add	r3, r2
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fa fe18 	bl	800e868 <pbuf_clen>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	461a      	mov	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c42:	4413      	add	r3, r2
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	681a      	ldr	r2, [r3, #0]
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	69fa      	ldr	r2, [r7, #28]
 8013c58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d103      	bne.n	8013c6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2200      	movs	r2, #0
 8013c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	e016      	b.n	8013c9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013c6e:	bf00      	nop
 8013c70:	e002      	b.n	8013c78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013c72:	bf00      	nop
 8013c74:	e000      	b.n	8013c78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013c76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d006      	beq.n	8013c8c <tcp_split_unsent_seg+0x25c>
 8013c7e:	4b09      	ldr	r3, [pc, #36]	; (8013ca4 <tcp_split_unsent_seg+0x274>)
 8013c80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013c84:	490d      	ldr	r1, [pc, #52]	; (8013cbc <tcp_split_unsent_seg+0x28c>)
 8013c86:	4809      	ldr	r0, [pc, #36]	; (8013cac <tcp_split_unsent_seg+0x27c>)
 8013c88:	f004 f8d2 	bl	8017e30 <iprintf>
  if (p != NULL) {
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d002      	beq.n	8013c98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013c92:	6938      	ldr	r0, [r7, #16]
 8013c94:	f7fa fd5a 	bl	800e74c <pbuf_free>
  }

  return ERR_MEM;
 8013c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3724      	adds	r7, #36	; 0x24
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd90      	pop	{r4, r7, pc}
 8013ca4:	0801d074 	.word	0x0801d074
 8013ca8:	0801d408 	.word	0x0801d408
 8013cac:	0801d0c8 	.word	0x0801d0c8
 8013cb0:	0801d42c 	.word	0x0801d42c
 8013cb4:	0801d450 	.word	0x0801d450
 8013cb8:	0801d460 	.word	0x0801d460
 8013cbc:	0801d470 	.word	0x0801d470

08013cc0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013cc0:	b590      	push	{r4, r7, lr}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d106      	bne.n	8013cdc <tcp_send_fin+0x1c>
 8013cce:	4b21      	ldr	r3, [pc, #132]	; (8013d54 <tcp_send_fin+0x94>)
 8013cd0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013cd4:	4920      	ldr	r1, [pc, #128]	; (8013d58 <tcp_send_fin+0x98>)
 8013cd6:	4821      	ldr	r0, [pc, #132]	; (8013d5c <tcp_send_fin+0x9c>)
 8013cd8:	f004 f8aa 	bl	8017e30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d02e      	beq.n	8013d42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce8:	60fb      	str	r3, [r7, #12]
 8013cea:	e002      	b.n	8013cf2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d1f8      	bne.n	8013cec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	899b      	ldrh	r3, [r3, #12]
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7f9 f81c 	bl	800cd40 <lwip_htons>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	f003 0307 	and.w	r3, r3, #7
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d116      	bne.n	8013d42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	899b      	ldrh	r3, [r3, #12]
 8013d1a:	b29c      	uxth	r4, r3
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	f7f9 f80f 	bl	800cd40 <lwip_htons>
 8013d22:	4603      	mov	r3, r0
 8013d24:	461a      	mov	r2, r3
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	4322      	orrs	r2, r4
 8013d2c:	b292      	uxth	r2, r2
 8013d2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	8b5b      	ldrh	r3, [r3, #26]
 8013d34:	f043 0320 	orr.w	r3, r3, #32
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	e004      	b.n	8013d4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013d42:	2101      	movs	r1, #1
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f000 f80b 	bl	8013d60 <tcp_enqueue_flags>
 8013d4a:	4603      	mov	r3, r0
}
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	3714      	adds	r7, #20
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd90      	pop	{r4, r7, pc}
 8013d54:	0801d074 	.word	0x0801d074
 8013d58:	0801d47c 	.word	0x0801d47c
 8013d5c:	0801d0c8 	.word	0x0801d0c8

08013d60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b08a      	sub	sp, #40	; 0x28
 8013d64:	af02      	add	r7, sp, #8
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	460b      	mov	r3, r1
 8013d6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013d70:	2300      	movs	r3, #0
 8013d72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013d74:	78fb      	ldrb	r3, [r7, #3]
 8013d76:	f003 0303 	and.w	r3, r3, #3
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <tcp_enqueue_flags+0x2c>
 8013d7e:	4b67      	ldr	r3, [pc, #412]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013d80:	f240 4211 	movw	r2, #1041	; 0x411
 8013d84:	4966      	ldr	r1, [pc, #408]	; (8013f20 <tcp_enqueue_flags+0x1c0>)
 8013d86:	4867      	ldr	r0, [pc, #412]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013d88:	f004 f852 	bl	8017e30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <tcp_enqueue_flags+0x40>
 8013d92:	4b62      	ldr	r3, [pc, #392]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013d94:	f240 4213 	movw	r2, #1043	; 0x413
 8013d98:	4963      	ldr	r1, [pc, #396]	; (8013f28 <tcp_enqueue_flags+0x1c8>)
 8013d9a:	4862      	ldr	r0, [pc, #392]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013d9c:	f004 f848 	bl	8017e30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013da0:	78fb      	ldrb	r3, [r7, #3]
 8013da2:	f003 0302 	and.w	r3, r3, #2
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013daa:	2301      	movs	r3, #1
 8013dac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013dae:	7ffb      	ldrb	r3, [r7, #31]
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	f003 0304 	and.w	r3, r3, #4
 8013db8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013dba:	7dfb      	ldrb	r3, [r7, #23]
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	2036      	movs	r0, #54	; 0x36
 8013dc6:	f7fa f9dd 	bl	800e184 <pbuf_alloc>
 8013dca:	6138      	str	r0, [r7, #16]
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d109      	bne.n	8013de6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8b5b      	ldrh	r3, [r3, #26]
 8013dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dda:	b29a      	uxth	r2, r3
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013de4:	e095      	b.n	8013f12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	895a      	ldrh	r2, [r3, #10]
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d206      	bcs.n	8013e00 <tcp_enqueue_flags+0xa0>
 8013df2:	4b4a      	ldr	r3, [pc, #296]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013df4:	f240 4239 	movw	r2, #1081	; 0x439
 8013df8:	494c      	ldr	r1, [pc, #304]	; (8013f2c <tcp_enqueue_flags+0x1cc>)
 8013dfa:	484a      	ldr	r0, [pc, #296]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013dfc:	f004 f818 	bl	8017e30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013e04:	78fa      	ldrb	r2, [r7, #3]
 8013e06:	7ffb      	ldrb	r3, [r7, #31]
 8013e08:	9300      	str	r3, [sp, #0]
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	6939      	ldr	r1, [r7, #16]
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7ff f918 	bl	8013044 <tcp_create_segment>
 8013e14:	60f8      	str	r0, [r7, #12]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d109      	bne.n	8013e30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	8b5b      	ldrh	r3, [r3, #26]
 8013e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e2e:	e070      	b.n	8013f12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	f003 0303 	and.w	r3, r3, #3
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d006      	beq.n	8013e4a <tcp_enqueue_flags+0xea>
 8013e3c:	4b37      	ldr	r3, [pc, #220]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013e3e:	f240 4242 	movw	r2, #1090	; 0x442
 8013e42:	493b      	ldr	r1, [pc, #236]	; (8013f30 <tcp_enqueue_flags+0x1d0>)
 8013e44:	4837      	ldr	r0, [pc, #220]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013e46:	f003 fff3 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	891b      	ldrh	r3, [r3, #8]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d006      	beq.n	8013e60 <tcp_enqueue_flags+0x100>
 8013e52:	4b32      	ldr	r3, [pc, #200]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013e54:	f240 4243 	movw	r2, #1091	; 0x443
 8013e58:	4936      	ldr	r1, [pc, #216]	; (8013f34 <tcp_enqueue_flags+0x1d4>)
 8013e5a:	4832      	ldr	r0, [pc, #200]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013e5c:	f003 ffe8 	bl	8017e30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d103      	bne.n	8013e70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e6e:	e00d      	b.n	8013e8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e74:	61bb      	str	r3, [r7, #24]
 8013e76:	e002      	b.n	8013e7e <tcp_enqueue_flags+0x11e>
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	61bb      	str	r3, [r7, #24]
 8013e7e:	69bb      	ldr	r3, [r7, #24]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d1f8      	bne.n	8013e78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013e86:	69bb      	ldr	r3, [r7, #24]
 8013e88:	68fa      	ldr	r2, [r7, #12]
 8013e8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013e94:	78fb      	ldrb	r3, [r7, #3]
 8013e96:	f003 0302 	and.w	r3, r3, #2
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d104      	bne.n	8013ea8 <tcp_enqueue_flags+0x148>
 8013e9e:	78fb      	ldrb	r3, [r7, #3]
 8013ea0:	f003 0301 	and.w	r3, r3, #1
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d004      	beq.n	8013eb2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013eac:	1c5a      	adds	r2, r3, #1
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013eb2:	78fb      	ldrb	r3, [r7, #3]
 8013eb4:	f003 0301 	and.w	r3, r3, #1
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d006      	beq.n	8013eca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	8b5b      	ldrh	r3, [r3, #26]
 8013ec0:	f043 0320 	orr.w	r3, r3, #32
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7fa fcca 	bl	800e868 <pbuf_clen>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ede:	4413      	add	r3, r2
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00e      	beq.n	8013f10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d10a      	bne.n	8013f10 <tcp_enqueue_flags+0x1b0>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <tcp_enqueue_flags+0x1b0>
 8013f02:	4b06      	ldr	r3, [pc, #24]	; (8013f1c <tcp_enqueue_flags+0x1bc>)
 8013f04:	f240 4265 	movw	r2, #1125	; 0x465
 8013f08:	490b      	ldr	r1, [pc, #44]	; (8013f38 <tcp_enqueue_flags+0x1d8>)
 8013f0a:	4806      	ldr	r0, [pc, #24]	; (8013f24 <tcp_enqueue_flags+0x1c4>)
 8013f0c:	f003 ff90 	bl	8017e30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013f10:	2300      	movs	r3, #0
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3720      	adds	r7, #32
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	0801d074 	.word	0x0801d074
 8013f20:	0801d498 	.word	0x0801d498
 8013f24:	0801d0c8 	.word	0x0801d0c8
 8013f28:	0801d4f0 	.word	0x0801d4f0
 8013f2c:	0801d510 	.word	0x0801d510
 8013f30:	0801d54c 	.word	0x0801d54c
 8013f34:	0801d564 	.word	0x0801d564
 8013f38:	0801d590 	.word	0x0801d590

08013f3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013f3c:	b5b0      	push	{r4, r5, r7, lr}
 8013f3e:	b08a      	sub	sp, #40	; 0x28
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d106      	bne.n	8013f58 <tcp_output+0x1c>
 8013f4a:	4b8a      	ldr	r3, [pc, #552]	; (8014174 <tcp_output+0x238>)
 8013f4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013f50:	4989      	ldr	r1, [pc, #548]	; (8014178 <tcp_output+0x23c>)
 8013f52:	488a      	ldr	r0, [pc, #552]	; (801417c <tcp_output+0x240>)
 8013f54:	f003 ff6c 	bl	8017e30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	7d1b      	ldrb	r3, [r3, #20]
 8013f5c:	2b01      	cmp	r3, #1
 8013f5e:	d106      	bne.n	8013f6e <tcp_output+0x32>
 8013f60:	4b84      	ldr	r3, [pc, #528]	; (8014174 <tcp_output+0x238>)
 8013f62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013f66:	4986      	ldr	r1, [pc, #536]	; (8014180 <tcp_output+0x244>)
 8013f68:	4884      	ldr	r0, [pc, #528]	; (801417c <tcp_output+0x240>)
 8013f6a:	f003 ff61 	bl	8017e30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013f6e:	4b85      	ldr	r3, [pc, #532]	; (8014184 <tcp_output+0x248>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d101      	bne.n	8013f7c <tcp_output+0x40>
    return ERR_OK;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	e1ce      	b.n	801431a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f88:	4293      	cmp	r3, r2
 8013f8a:	bf28      	it	cs
 8013f8c:	4613      	movcs	r3, r2
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d10b      	bne.n	8013fb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	8b5b      	ldrh	r3, [r3, #26]
 8013fa2:	f003 0302 	and.w	r3, r3, #2
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f000 81aa 	beq.w	8014300 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f000 fded 	bl	8014b8c <tcp_send_empty_ack>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	e1b1      	b.n	801431a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013fb6:	6879      	ldr	r1, [r7, #4]
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	3304      	adds	r3, #4
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f7ff f824 	bl	801300c <tcp_route>
 8013fc4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d102      	bne.n	8013fd2 <tcp_output+0x96>
    return ERR_RTE;
 8013fcc:	f06f 0303 	mvn.w	r3, #3
 8013fd0:	e1a3      	b.n	801431a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d003      	beq.n	8013fe0 <tcp_output+0xa4>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d111      	bne.n	8014004 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d002      	beq.n	8013fec <tcp_output+0xb0>
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	3304      	adds	r3, #4
 8013fea:	e000      	b.n	8013fee <tcp_output+0xb2>
 8013fec:	2300      	movs	r3, #0
 8013fee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d102      	bne.n	8013ffc <tcp_output+0xc0>
      return ERR_RTE;
 8013ff6:	f06f 0303 	mvn.w	r3, #3
 8013ffa:	e18e      	b.n	801431a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7f8 fead 	bl	800cd6a <lwip_htonl>
 8014010:	4602      	mov	r2, r0
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801401a:	8912      	ldrh	r2, [r2, #8]
 801401c:	4413      	add	r3, r2
 801401e:	69ba      	ldr	r2, [r7, #24]
 8014020:	429a      	cmp	r2, r3
 8014022:	d227      	bcs.n	8014074 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801402a:	461a      	mov	r2, r3
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	4293      	cmp	r3, r2
 8014030:	d114      	bne.n	801405c <tcp_output+0x120>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014036:	2b00      	cmp	r3, #0
 8014038:	d110      	bne.n	801405c <tcp_output+0x120>
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014040:	2b00      	cmp	r3, #0
 8014042:	d10b      	bne.n	801405c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2200      	movs	r2, #0
 8014048:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2201      	movs	r2, #1
 8014050:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	8b5b      	ldrh	r3, [r3, #26]
 8014060:	f003 0302 	and.w	r3, r3, #2
 8014064:	2b00      	cmp	r3, #0
 8014066:	f000 814d 	beq.w	8014304 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 fd8e 	bl	8014b8c <tcp_send_empty_ack>
 8014070:	4603      	mov	r3, r0
 8014072:	e152      	b.n	801431a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2200      	movs	r2, #0
 8014078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014080:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 811c 	beq.w	80142c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801408a:	e002      	b.n	8014092 <tcp_output+0x156>
 801408c:	6a3b      	ldr	r3, [r7, #32]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	623b      	str	r3, [r7, #32]
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d1f8      	bne.n	801408c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801409a:	e112      	b.n	80142c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	899b      	ldrh	r3, [r3, #12]
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7f8 fe4b 	bl	800cd40 <lwip_htons>
 80140aa:	4603      	mov	r3, r0
 80140ac:	b2db      	uxtb	r3, r3
 80140ae:	f003 0304 	and.w	r3, r3, #4
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d006      	beq.n	80140c4 <tcp_output+0x188>
 80140b6:	4b2f      	ldr	r3, [pc, #188]	; (8014174 <tcp_output+0x238>)
 80140b8:	f240 5236 	movw	r2, #1334	; 0x536
 80140bc:	4932      	ldr	r1, [pc, #200]	; (8014188 <tcp_output+0x24c>)
 80140be:	482f      	ldr	r0, [pc, #188]	; (801417c <tcp_output+0x240>)
 80140c0:	f003 feb6 	bl	8017e30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d01f      	beq.n	801410c <tcp_output+0x1d0>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	8b5b      	ldrh	r3, [r3, #26]
 80140d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d119      	bne.n	801410c <tcp_output+0x1d0>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00b      	beq.n	80140f8 <tcp_output+0x1bc>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d110      	bne.n	801410c <tcp_output+0x1d0>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140ee:	891a      	ldrh	r2, [r3, #8]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d209      	bcs.n	801410c <tcp_output+0x1d0>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d004      	beq.n	801410c <tcp_output+0x1d0>
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014108:	2b08      	cmp	r3, #8
 801410a:	d901      	bls.n	8014110 <tcp_output+0x1d4>
 801410c:	2301      	movs	r3, #1
 801410e:	e000      	b.n	8014112 <tcp_output+0x1d6>
 8014110:	2300      	movs	r3, #0
 8014112:	2b00      	cmp	r3, #0
 8014114:	d106      	bne.n	8014124 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	8b5b      	ldrh	r3, [r3, #26]
 801411a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801411e:	2b00      	cmp	r3, #0
 8014120:	f000 80e4 	beq.w	80142ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	7d1b      	ldrb	r3, [r3, #20]
 8014128:	2b02      	cmp	r3, #2
 801412a:	d00d      	beq.n	8014148 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412e:	68db      	ldr	r3, [r3, #12]
 8014130:	899b      	ldrh	r3, [r3, #12]
 8014132:	b29c      	uxth	r4, r3
 8014134:	2010      	movs	r0, #16
 8014136:	f7f8 fe03 	bl	800cd40 <lwip_htons>
 801413a:	4603      	mov	r3, r0
 801413c:	461a      	mov	r2, r3
 801413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014140:	68db      	ldr	r3, [r3, #12]
 8014142:	4322      	orrs	r2, r4
 8014144:	b292      	uxth	r2, r2
 8014146:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014148:	697a      	ldr	r2, [r7, #20]
 801414a:	6879      	ldr	r1, [r7, #4]
 801414c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801414e:	f000 f909 	bl	8014364 <tcp_output_segment>
 8014152:	4603      	mov	r3, r0
 8014154:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d016      	beq.n	801418c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	8b5b      	ldrh	r3, [r3, #26]
 8014162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	835a      	strh	r2, [r3, #26]
      return err;
 801416c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014170:	e0d3      	b.n	801431a <tcp_output+0x3de>
 8014172:	bf00      	nop
 8014174:	0801d074 	.word	0x0801d074
 8014178:	0801d5b8 	.word	0x0801d5b8
 801417c:	0801d0c8 	.word	0x0801d0c8
 8014180:	0801d5d0 	.word	0x0801d5d0
 8014184:	20011bfc 	.word	0x20011bfc
 8014188:	0801d5f8 	.word	0x0801d5f8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	7d1b      	ldrb	r3, [r3, #20]
 8014198:	2b02      	cmp	r3, #2
 801419a:	d006      	beq.n	80141aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	8b5b      	ldrh	r3, [r3, #26]
 80141a0:	f023 0303 	bic.w	r3, r3, #3
 80141a4:	b29a      	uxth	r2, r3
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80141aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ac:	68db      	ldr	r3, [r3, #12]
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7f8 fdda 	bl	800cd6a <lwip_htonl>
 80141b6:	4604      	mov	r4, r0
 80141b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ba:	891b      	ldrh	r3, [r3, #8]
 80141bc:	461d      	mov	r5, r3
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	899b      	ldrh	r3, [r3, #12]
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7f8 fdba 	bl	800cd40 <lwip_htons>
 80141cc:	4603      	mov	r3, r0
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	f003 0303 	and.w	r3, r3, #3
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d001      	beq.n	80141dc <tcp_output+0x2a0>
 80141d8:	2301      	movs	r3, #1
 80141da:	e000      	b.n	80141de <tcp_output+0x2a2>
 80141dc:	2300      	movs	r3, #0
 80141de:	442b      	add	r3, r5
 80141e0:	4423      	add	r3, r4
 80141e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	da02      	bge.n	80141f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80141f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f8:	891b      	ldrh	r3, [r3, #8]
 80141fa:	461c      	mov	r4, r3
 80141fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	899b      	ldrh	r3, [r3, #12]
 8014202:	b29b      	uxth	r3, r3
 8014204:	4618      	mov	r0, r3
 8014206:	f7f8 fd9b 	bl	800cd40 <lwip_htons>
 801420a:	4603      	mov	r3, r0
 801420c:	b2db      	uxtb	r3, r3
 801420e:	f003 0303 	and.w	r3, r3, #3
 8014212:	2b00      	cmp	r3, #0
 8014214:	d001      	beq.n	801421a <tcp_output+0x2de>
 8014216:	2301      	movs	r3, #1
 8014218:	e000      	b.n	801421c <tcp_output+0x2e0>
 801421a:	2300      	movs	r3, #0
 801421c:	4423      	add	r3, r4
 801421e:	2b00      	cmp	r3, #0
 8014220:	d049      	beq.n	80142b6 <tcp_output+0x37a>
      seg->next = NULL;
 8014222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014224:	2200      	movs	r2, #0
 8014226:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801422c:	2b00      	cmp	r3, #0
 801422e:	d105      	bne.n	801423c <tcp_output+0x300>
        pcb->unacked = seg;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014234:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	623b      	str	r3, [r7, #32]
 801423a:	e03f      	b.n	80142bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	4618      	mov	r0, r3
 8014244:	f7f8 fd91 	bl	800cd6a <lwip_htonl>
 8014248:	4604      	mov	r4, r0
 801424a:	6a3b      	ldr	r3, [r7, #32]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	4618      	mov	r0, r3
 8014252:	f7f8 fd8a 	bl	800cd6a <lwip_htonl>
 8014256:	4603      	mov	r3, r0
 8014258:	1ae3      	subs	r3, r4, r3
 801425a:	2b00      	cmp	r3, #0
 801425c:	da24      	bge.n	80142a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	3370      	adds	r3, #112	; 0x70
 8014262:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014264:	e002      	b.n	801426c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d011      	beq.n	8014298 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	f7f8 fd74 	bl	800cd6a <lwip_htonl>
 8014282:	4604      	mov	r4, r0
 8014284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014286:	68db      	ldr	r3, [r3, #12]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	4618      	mov	r0, r3
 801428c:	f7f8 fd6d 	bl	800cd6a <lwip_htonl>
 8014290:	4603      	mov	r3, r0
 8014292:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014294:	2b00      	cmp	r3, #0
 8014296:	dbe6      	blt.n	8014266 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142a4:	601a      	str	r2, [r3, #0]
 80142a6:	e009      	b.n	80142bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80142a8:	6a3b      	ldr	r3, [r7, #32]
 80142aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	623b      	str	r3, [r7, #32]
 80142b4:	e002      	b.n	80142bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80142b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142b8:	f7fb ff19 	bl	80100ee <tcp_seg_free>
    }
    seg = pcb->unsent;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d012      	beq.n	80142ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80142c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7f8 fd4b 	bl	800cd6a <lwip_htonl>
 80142d4:	4602      	mov	r2, r0
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142da:	1ad3      	subs	r3, r2, r3
 80142dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142de:	8912      	ldrh	r2, [r2, #8]
 80142e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80142e2:	69ba      	ldr	r2, [r7, #24]
 80142e4:	429a      	cmp	r2, r3
 80142e6:	f4bf aed9 	bcs.w	801409c <tcp_output+0x160>
 80142ea:	e000      	b.n	80142ee <tcp_output+0x3b2>
      break;
 80142ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d108      	bne.n	8014308 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2200      	movs	r2, #0
 80142fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80142fe:	e004      	b.n	801430a <tcp_output+0x3ce>
    goto output_done;
 8014300:	bf00      	nop
 8014302:	e002      	b.n	801430a <tcp_output+0x3ce>
    goto output_done;
 8014304:	bf00      	nop
 8014306:	e000      	b.n	801430a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014308:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	8b5b      	ldrh	r3, [r3, #26]
 801430e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014312:	b29a      	uxth	r2, r3
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014318:	2300      	movs	r3, #0
}
 801431a:	4618      	mov	r0, r3
 801431c:	3728      	adds	r7, #40	; 0x28
 801431e:	46bd      	mov	sp, r7
 8014320:	bdb0      	pop	{r4, r5, r7, pc}
 8014322:	bf00      	nop

08014324 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d106      	bne.n	8014340 <tcp_output_segment_busy+0x1c>
 8014332:	4b09      	ldr	r3, [pc, #36]	; (8014358 <tcp_output_segment_busy+0x34>)
 8014334:	f240 529a 	movw	r2, #1434	; 0x59a
 8014338:	4908      	ldr	r1, [pc, #32]	; (801435c <tcp_output_segment_busy+0x38>)
 801433a:	4809      	ldr	r0, [pc, #36]	; (8014360 <tcp_output_segment_busy+0x3c>)
 801433c:	f003 fd78 	bl	8017e30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	685b      	ldr	r3, [r3, #4]
 8014344:	7b9b      	ldrb	r3, [r3, #14]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d001      	beq.n	801434e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801434a:	2301      	movs	r3, #1
 801434c:	e000      	b.n	8014350 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801434e:	2300      	movs	r3, #0
}
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	0801d074 	.word	0x0801d074
 801435c:	0801d610 	.word	0x0801d610
 8014360:	0801d0c8 	.word	0x0801d0c8

08014364 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014364:	b5b0      	push	{r4, r5, r7, lr}
 8014366:	b08c      	sub	sp, #48	; 0x30
 8014368:	af04      	add	r7, sp, #16
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d106      	bne.n	8014384 <tcp_output_segment+0x20>
 8014376:	4b6c      	ldr	r3, [pc, #432]	; (8014528 <tcp_output_segment+0x1c4>)
 8014378:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801437c:	496b      	ldr	r1, [pc, #428]	; (801452c <tcp_output_segment+0x1c8>)
 801437e:	486c      	ldr	r0, [pc, #432]	; (8014530 <tcp_output_segment+0x1cc>)
 8014380:	f003 fd56 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d106      	bne.n	8014398 <tcp_output_segment+0x34>
 801438a:	4b67      	ldr	r3, [pc, #412]	; (8014528 <tcp_output_segment+0x1c4>)
 801438c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014390:	4968      	ldr	r1, [pc, #416]	; (8014534 <tcp_output_segment+0x1d0>)
 8014392:	4867      	ldr	r0, [pc, #412]	; (8014530 <tcp_output_segment+0x1cc>)
 8014394:	f003 fd4c 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d106      	bne.n	80143ac <tcp_output_segment+0x48>
 801439e:	4b62      	ldr	r3, [pc, #392]	; (8014528 <tcp_output_segment+0x1c4>)
 80143a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80143a4:	4964      	ldr	r1, [pc, #400]	; (8014538 <tcp_output_segment+0x1d4>)
 80143a6:	4862      	ldr	r0, [pc, #392]	; (8014530 <tcp_output_segment+0x1cc>)
 80143a8:	f003 fd42 	bl	8017e30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80143ac:	68f8      	ldr	r0, [r7, #12]
 80143ae:	f7ff ffb9 	bl	8014324 <tcp_output_segment_busy>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80143b8:	2300      	movs	r3, #0
 80143ba:	e0b1      	b.n	8014520 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	68dc      	ldr	r4, [r3, #12]
 80143c4:	4610      	mov	r0, r2
 80143c6:	f7f8 fcd0 	bl	800cd6a <lwip_htonl>
 80143ca:	4603      	mov	r3, r0
 80143cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	68dc      	ldr	r4, [r3, #12]
 80143d6:	4610      	mov	r0, r2
 80143d8:	f7f8 fcb2 	bl	800cd40 <lwip_htons>
 80143dc:	4603      	mov	r3, r0
 80143de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80143e8:	441a      	add	r2, r3
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	3314      	adds	r3, #20
 80143f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	7a9b      	ldrb	r3, [r3, #10]
 80143fa:	f003 0301 	and.w	r3, r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d015      	beq.n	801442e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	3304      	adds	r3, #4
 8014406:	461a      	mov	r2, r3
 8014408:	6879      	ldr	r1, [r7, #4]
 801440a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801440e:	f7fc fa33 	bl	8010878 <tcp_eff_send_mss_netif>
 8014412:	4603      	mov	r3, r0
 8014414:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014416:	8b7b      	ldrh	r3, [r7, #26]
 8014418:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801441c:	4618      	mov	r0, r3
 801441e:	f7f8 fca4 	bl	800cd6a <lwip_htonl>
 8014422:	4602      	mov	r2, r0
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	3304      	adds	r3, #4
 801442c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014434:	2b00      	cmp	r3, #0
 8014436:	da02      	bge.n	801443e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	2200      	movs	r2, #0
 801443c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014442:	2b00      	cmp	r3, #0
 8014444:	d10c      	bne.n	8014460 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014446:	4b3d      	ldr	r3, [pc, #244]	; (801453c <tcp_output_segment+0x1d8>)
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	4618      	mov	r0, r3
 8014456:	f7f8 fc88 	bl	800cd6a <lwip_htonl>
 801445a:	4602      	mov	r2, r0
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	68da      	ldr	r2, [r3, #12]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	8959      	ldrh	r1, [r3, #10]
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	8b3a      	ldrh	r2, [r7, #24]
 801447a:	1a8a      	subs	r2, r1, r2
 801447c:	b292      	uxth	r2, r2
 801447e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	8919      	ldrh	r1, [r3, #8]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	8b3a      	ldrh	r2, [r7, #24]
 801448c:	1a8a      	subs	r2, r1, r2
 801448e:	b292      	uxth	r2, r2
 8014490:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	685b      	ldr	r3, [r3, #4]
 8014496:	68fa      	ldr	r2, [r7, #12]
 8014498:	68d2      	ldr	r2, [r2, #12]
 801449a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	741a      	strb	r2, [r3, #16]
 80144a4:	2200      	movs	r2, #0
 80144a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	f103 0214 	add.w	r2, r3, #20
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	7a9b      	ldrb	r3, [r3, #10]
 80144b4:	009b      	lsls	r3, r3, #2
 80144b6:	f003 0304 	and.w	r3, r3, #4
 80144ba:	4413      	add	r3, r2
 80144bc:	69fa      	ldr	r2, [r7, #28]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d006      	beq.n	80144d0 <tcp_output_segment+0x16c>
 80144c2:	4b19      	ldr	r3, [pc, #100]	; (8014528 <tcp_output_segment+0x1c4>)
 80144c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80144c8:	491d      	ldr	r1, [pc, #116]	; (8014540 <tcp_output_segment+0x1dc>)
 80144ca:	4819      	ldr	r0, [pc, #100]	; (8014530 <tcp_output_segment+0x1cc>)
 80144cc:	f003 fcb0 	bl	8017e30 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80144d8:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80144da:	68bd      	ldr	r5, [r7, #8]
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	68d4      	ldr	r4, [r2, #12]
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	462b      	mov	r3, r5
 80144e8:	460a      	mov	r2, r1
 80144ea:	2106      	movs	r1, #6
 80144ec:	f7f8 fd5a 	bl	800cfa4 <ip_chksum_pseudo>
 80144f0:	4603      	mov	r3, r0
 80144f2:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	6858      	ldr	r0, [r3, #4]
 80144f8:	68b9      	ldr	r1, [r7, #8]
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	1d1c      	adds	r4, r3, #4
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	7add      	ldrb	r5, [r3, #11]
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	7a9b      	ldrb	r3, [r3, #10]
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	9202      	str	r2, [sp, #8]
 801450a:	2206      	movs	r2, #6
 801450c:	9201      	str	r2, [sp, #4]
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	462b      	mov	r3, r5
 8014512:	4622      	mov	r2, r4
 8014514:	f002 f8b2 	bl	801667c <ip4_output_if>
 8014518:	4603      	mov	r3, r0
 801451a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801451c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014520:	4618      	mov	r0, r3
 8014522:	3720      	adds	r7, #32
 8014524:	46bd      	mov	sp, r7
 8014526:	bdb0      	pop	{r4, r5, r7, pc}
 8014528:	0801d074 	.word	0x0801d074
 801452c:	0801d638 	.word	0x0801d638
 8014530:	0801d0c8 	.word	0x0801d0c8
 8014534:	0801d658 	.word	0x0801d658
 8014538:	0801d678 	.word	0x0801d678
 801453c:	20011bb0 	.word	0x20011bb0
 8014540:	0801d69c 	.word	0x0801d69c

08014544 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014544:	b5b0      	push	{r4, r5, r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <tcp_rexmit_rto_prepare+0x1c>
 8014552:	4b31      	ldr	r3, [pc, #196]	; (8014618 <tcp_rexmit_rto_prepare+0xd4>)
 8014554:	f240 6263 	movw	r2, #1635	; 0x663
 8014558:	4930      	ldr	r1, [pc, #192]	; (801461c <tcp_rexmit_rto_prepare+0xd8>)
 801455a:	4831      	ldr	r0, [pc, #196]	; (8014620 <tcp_rexmit_rto_prepare+0xdc>)
 801455c:	f003 fc68 	bl	8017e30 <iprintf>

  if (pcb->unacked == NULL) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014564:	2b00      	cmp	r3, #0
 8014566:	d102      	bne.n	801456e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014568:	f06f 0305 	mvn.w	r3, #5
 801456c:	e050      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	e00b      	b.n	801458e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f7ff fed4 	bl	8014324 <tcp_output_segment_busy>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d002      	beq.n	8014588 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014582:	f06f 0305 	mvn.w	r3, #5
 8014586:	e043      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	60fb      	str	r3, [r7, #12]
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1ef      	bne.n	8014576 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f7ff fec4 	bl	8014324 <tcp_output_segment_busy>
 801459c:	4603      	mov	r3, r0
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d002      	beq.n	80145a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80145a2:	f06f 0305 	mvn.w	r3, #5
 80145a6:	e033      	b.n	8014610 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2200      	movs	r2, #0
 80145bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	8b5b      	ldrh	r3, [r3, #26]
 80145c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80145c6:	b29a      	uxth	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7f8 fbc9 	bl	800cd6a <lwip_htonl>
 80145d8:	4604      	mov	r4, r0
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	891b      	ldrh	r3, [r3, #8]
 80145de:	461d      	mov	r5, r3
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	899b      	ldrh	r3, [r3, #12]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	4618      	mov	r0, r3
 80145ea:	f7f8 fba9 	bl	800cd40 <lwip_htons>
 80145ee:	4603      	mov	r3, r0
 80145f0:	b2db      	uxtb	r3, r3
 80145f2:	f003 0303 	and.w	r3, r3, #3
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d001      	beq.n	80145fe <tcp_rexmit_rto_prepare+0xba>
 80145fa:	2301      	movs	r3, #1
 80145fc:	e000      	b.n	8014600 <tcp_rexmit_rto_prepare+0xbc>
 80145fe:	2300      	movs	r3, #0
 8014600:	442b      	add	r3, r5
 8014602:	18e2      	adds	r2, r4, r3
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bdb0      	pop	{r4, r5, r7, pc}
 8014618:	0801d074 	.word	0x0801d074
 801461c:	0801d6b0 	.word	0x0801d6b0
 8014620:	0801d0c8 	.word	0x0801d0c8

08014624 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <tcp_rexmit_rto_commit+0x1c>
 8014632:	4b0d      	ldr	r3, [pc, #52]	; (8014668 <tcp_rexmit_rto_commit+0x44>)
 8014634:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014638:	490c      	ldr	r1, [pc, #48]	; (801466c <tcp_rexmit_rto_commit+0x48>)
 801463a:	480d      	ldr	r0, [pc, #52]	; (8014670 <tcp_rexmit_rto_commit+0x4c>)
 801463c:	f003 fbf8 	bl	8017e30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014646:	2bff      	cmp	r3, #255	; 0xff
 8014648:	d007      	beq.n	801465a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014650:	3301      	adds	r3, #1
 8014652:	b2da      	uxtb	r2, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7ff fc6e 	bl	8013f3c <tcp_output>
}
 8014660:	bf00      	nop
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	0801d074 	.word	0x0801d074
 801466c:	0801d6d4 	.word	0x0801d6d4
 8014670:	0801d0c8 	.word	0x0801d0c8

08014674 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d106      	bne.n	8014690 <tcp_rexmit_rto+0x1c>
 8014682:	4b0a      	ldr	r3, [pc, #40]	; (80146ac <tcp_rexmit_rto+0x38>)
 8014684:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014688:	4909      	ldr	r1, [pc, #36]	; (80146b0 <tcp_rexmit_rto+0x3c>)
 801468a:	480a      	ldr	r0, [pc, #40]	; (80146b4 <tcp_rexmit_rto+0x40>)
 801468c:	f003 fbd0 	bl	8017e30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f7ff ff57 	bl	8014544 <tcp_rexmit_rto_prepare>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d102      	bne.n	80146a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff ffc1 	bl	8014624 <tcp_rexmit_rto_commit>
  }
}
 80146a2:	bf00      	nop
 80146a4:	3708      	adds	r7, #8
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	0801d074 	.word	0x0801d074
 80146b0:	0801d6f8 	.word	0x0801d6f8
 80146b4:	0801d0c8 	.word	0x0801d0c8

080146b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80146b8:	b590      	push	{r4, r7, lr}
 80146ba:	b085      	sub	sp, #20
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d106      	bne.n	80146d4 <tcp_rexmit+0x1c>
 80146c6:	4b2f      	ldr	r3, [pc, #188]	; (8014784 <tcp_rexmit+0xcc>)
 80146c8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80146cc:	492e      	ldr	r1, [pc, #184]	; (8014788 <tcp_rexmit+0xd0>)
 80146ce:	482f      	ldr	r0, [pc, #188]	; (801478c <tcp_rexmit+0xd4>)
 80146d0:	f003 fbae 	bl	8017e30 <iprintf>

  if (pcb->unacked == NULL) {
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d102      	bne.n	80146e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80146dc:	f06f 0305 	mvn.w	r3, #5
 80146e0:	e04c      	b.n	801477c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80146e8:	68b8      	ldr	r0, [r7, #8]
 80146ea:	f7ff fe1b 	bl	8014324 <tcp_output_segment_busy>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d002      	beq.n	80146fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80146f4:	f06f 0305 	mvn.w	r3, #5
 80146f8:	e040      	b.n	801477c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	336c      	adds	r3, #108	; 0x6c
 8014706:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014708:	e002      	b.n	8014710 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d011      	beq.n	801473c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7f8 fb22 	bl	800cd6a <lwip_htonl>
 8014726:	4604      	mov	r4, r0
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4618      	mov	r0, r3
 8014730:	f7f8 fb1b 	bl	800cd6a <lwip_htonl>
 8014734:	4603      	mov	r3, r0
 8014736:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014738:	2b00      	cmp	r3, #0
 801473a:	dbe6      	blt.n	801470a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	68ba      	ldr	r2, [r7, #8]
 8014748:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d103      	bne.n	801475a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2200      	movs	r2, #0
 8014756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014760:	2bff      	cmp	r3, #255	; 0xff
 8014762:	d007      	beq.n	8014774 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801476a:	3301      	adds	r3, #1
 801476c:	b2da      	uxtb	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	bd90      	pop	{r4, r7, pc}
 8014784:	0801d074 	.word	0x0801d074
 8014788:	0801d714 	.word	0x0801d714
 801478c:	0801d0c8 	.word	0x0801d0c8

08014790 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d106      	bne.n	80147ac <tcp_rexmit_fast+0x1c>
 801479e:	4b2a      	ldr	r3, [pc, #168]	; (8014848 <tcp_rexmit_fast+0xb8>)
 80147a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80147a4:	4929      	ldr	r1, [pc, #164]	; (801484c <tcp_rexmit_fast+0xbc>)
 80147a6:	482a      	ldr	r0, [pc, #168]	; (8014850 <tcp_rexmit_fast+0xc0>)
 80147a8:	f003 fb42 	bl	8017e30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d045      	beq.n	8014840 <tcp_rexmit_fast+0xb0>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	8b5b      	ldrh	r3, [r3, #26]
 80147b8:	f003 0304 	and.w	r3, r3, #4
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d13f      	bne.n	8014840 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7ff ff79 	bl	80146b8 <tcp_rexmit>
 80147c6:	4603      	mov	r3, r0
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d139      	bne.n	8014840 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80147d8:	4293      	cmp	r3, r2
 80147da:	bf28      	it	cs
 80147dc:	4613      	movcs	r3, r2
 80147de:	b29b      	uxth	r3, r3
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	da00      	bge.n	80147e6 <tcp_rexmit_fast+0x56>
 80147e4:	3301      	adds	r3, #1
 80147e6:	105b      	asrs	r3, r3, #1
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80147f6:	461a      	mov	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147fc:	005b      	lsls	r3, r3, #1
 80147fe:	429a      	cmp	r2, r3
 8014800:	d206      	bcs.n	8014810 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	b29a      	uxth	r2, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801481a:	4619      	mov	r1, r3
 801481c:	0049      	lsls	r1, r1, #1
 801481e:	440b      	add	r3, r1
 8014820:	b29b      	uxth	r3, r3
 8014822:	4413      	add	r3, r2
 8014824:	b29a      	uxth	r2, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	8b5b      	ldrh	r3, [r3, #26]
 8014830:	f043 0304 	orr.w	r3, r3, #4
 8014834:	b29a      	uxth	r2, r3
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014840:	bf00      	nop
 8014842:	3708      	adds	r7, #8
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	0801d074 	.word	0x0801d074
 801484c:	0801d72c 	.word	0x0801d72c
 8014850:	0801d0c8 	.word	0x0801d0c8

08014854 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b086      	sub	sp, #24
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	607b      	str	r3, [r7, #4]
 801485e:	460b      	mov	r3, r1
 8014860:	817b      	strh	r3, [r7, #10]
 8014862:	4613      	mov	r3, r2
 8014864:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014866:	897a      	ldrh	r2, [r7, #10]
 8014868:	893b      	ldrh	r3, [r7, #8]
 801486a:	4413      	add	r3, r2
 801486c:	b29b      	uxth	r3, r3
 801486e:	3314      	adds	r3, #20
 8014870:	b29b      	uxth	r3, r3
 8014872:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014876:	4619      	mov	r1, r3
 8014878:	2022      	movs	r0, #34	; 0x22
 801487a:	f7f9 fc83 	bl	800e184 <pbuf_alloc>
 801487e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d04d      	beq.n	8014922 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014886:	897b      	ldrh	r3, [r7, #10]
 8014888:	3313      	adds	r3, #19
 801488a:	697a      	ldr	r2, [r7, #20]
 801488c:	8952      	ldrh	r2, [r2, #10]
 801488e:	4293      	cmp	r3, r2
 8014890:	db06      	blt.n	80148a0 <tcp_output_alloc_header_common+0x4c>
 8014892:	4b26      	ldr	r3, [pc, #152]	; (801492c <tcp_output_alloc_header_common+0xd8>)
 8014894:	f240 7223 	movw	r2, #1827	; 0x723
 8014898:	4925      	ldr	r1, [pc, #148]	; (8014930 <tcp_output_alloc_header_common+0xdc>)
 801489a:	4826      	ldr	r0, [pc, #152]	; (8014934 <tcp_output_alloc_header_common+0xe0>)
 801489c:	f003 fac8 	bl	8017e30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80148a6:	8c3b      	ldrh	r3, [r7, #32]
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7f8 fa49 	bl	800cd40 <lwip_htons>
 80148ae:	4603      	mov	r3, r0
 80148b0:	461a      	mov	r2, r3
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80148b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7f8 fa41 	bl	800cd40 <lwip_htons>
 80148be:	4603      	mov	r3, r0
 80148c0:	461a      	mov	r2, r3
 80148c2:	693b      	ldr	r3, [r7, #16]
 80148c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f7f8 fa4c 	bl	800cd6a <lwip_htonl>
 80148d2:	4602      	mov	r2, r0
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80148d8:	897b      	ldrh	r3, [r7, #10]
 80148da:	089b      	lsrs	r3, r3, #2
 80148dc:	b29b      	uxth	r3, r3
 80148de:	3305      	adds	r3, #5
 80148e0:	b29b      	uxth	r3, r3
 80148e2:	031b      	lsls	r3, r3, #12
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	4313      	orrs	r3, r2
 80148ee:	b29b      	uxth	r3, r3
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7f8 fa25 	bl	800cd40 <lwip_htons>
 80148f6:	4603      	mov	r3, r0
 80148f8:	461a      	mov	r2, r3
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80148fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014900:	4618      	mov	r0, r3
 8014902:	f7f8 fa1d 	bl	800cd40 <lwip_htons>
 8014906:	4603      	mov	r3, r0
 8014908:	461a      	mov	r2, r3
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2200      	movs	r2, #0
 8014912:	741a      	strb	r2, [r3, #16]
 8014914:	2200      	movs	r2, #0
 8014916:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014918:	693b      	ldr	r3, [r7, #16]
 801491a:	2200      	movs	r2, #0
 801491c:	749a      	strb	r2, [r3, #18]
 801491e:	2200      	movs	r2, #0
 8014920:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014922:	697b      	ldr	r3, [r7, #20]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	0801d074 	.word	0x0801d074
 8014930:	0801d74c 	.word	0x0801d74c
 8014934:	0801d0c8 	.word	0x0801d0c8

08014938 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014938:	b5b0      	push	{r4, r5, r7, lr}
 801493a:	b08a      	sub	sp, #40	; 0x28
 801493c:	af04      	add	r7, sp, #16
 801493e:	60f8      	str	r0, [r7, #12]
 8014940:	607b      	str	r3, [r7, #4]
 8014942:	460b      	mov	r3, r1
 8014944:	817b      	strh	r3, [r7, #10]
 8014946:	4613      	mov	r3, r2
 8014948:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d106      	bne.n	801495e <tcp_output_alloc_header+0x26>
 8014950:	4b15      	ldr	r3, [pc, #84]	; (80149a8 <tcp_output_alloc_header+0x70>)
 8014952:	f240 7242 	movw	r2, #1858	; 0x742
 8014956:	4915      	ldr	r1, [pc, #84]	; (80149ac <tcp_output_alloc_header+0x74>)
 8014958:	4815      	ldr	r0, [pc, #84]	; (80149b0 <tcp_output_alloc_header+0x78>)
 801495a:	f003 fa69 	bl	8017e30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	8adb      	ldrh	r3, [r3, #22]
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	8b12      	ldrh	r2, [r2, #24]
 801496a:	68f9      	ldr	r1, [r7, #12]
 801496c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801496e:	893d      	ldrh	r5, [r7, #8]
 8014970:	897c      	ldrh	r4, [r7, #10]
 8014972:	9103      	str	r1, [sp, #12]
 8014974:	2110      	movs	r1, #16
 8014976:	9102      	str	r1, [sp, #8]
 8014978:	9201      	str	r2, [sp, #4]
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	462a      	mov	r2, r5
 8014980:	4621      	mov	r1, r4
 8014982:	f7ff ff67 	bl	8014854 <tcp_output_alloc_header_common>
 8014986:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d006      	beq.n	801499c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014992:	68fa      	ldr	r2, [r7, #12]
 8014994:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014996:	441a      	add	r2, r3
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801499c:	697b      	ldr	r3, [r7, #20]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3718      	adds	r7, #24
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bdb0      	pop	{r4, r5, r7, pc}
 80149a6:	bf00      	nop
 80149a8:	0801d074 	.word	0x0801d074
 80149ac:	0801d77c 	.word	0x0801d77c
 80149b0:	0801d0c8 	.word	0x0801d0c8

080149b4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b088      	sub	sp, #32
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	4611      	mov	r1, r2
 80149c0:	461a      	mov	r2, r3
 80149c2:	460b      	mov	r3, r1
 80149c4:	71fb      	strb	r3, [r7, #7]
 80149c6:	4613      	mov	r3, r2
 80149c8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80149ca:	2300      	movs	r3, #0
 80149cc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d106      	bne.n	80149e2 <tcp_output_fill_options+0x2e>
 80149d4:	4b13      	ldr	r3, [pc, #76]	; (8014a24 <tcp_output_fill_options+0x70>)
 80149d6:	f240 7256 	movw	r2, #1878	; 0x756
 80149da:	4913      	ldr	r1, [pc, #76]	; (8014a28 <tcp_output_fill_options+0x74>)
 80149dc:	4813      	ldr	r0, [pc, #76]	; (8014a2c <tcp_output_fill_options+0x78>)
 80149de:	f003 fa27 	bl	8017e30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	685b      	ldr	r3, [r3, #4]
 80149e6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	3314      	adds	r3, #20
 80149ec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80149ee:	69bb      	ldr	r3, [r7, #24]
 80149f0:	f103 0214 	add.w	r2, r3, #20
 80149f4:	8bfb      	ldrh	r3, [r7, #30]
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	4619      	mov	r1, r3
 80149fa:	79fb      	ldrb	r3, [r7, #7]
 80149fc:	009b      	lsls	r3, r3, #2
 80149fe:	f003 0304 	and.w	r3, r3, #4
 8014a02:	440b      	add	r3, r1
 8014a04:	4413      	add	r3, r2
 8014a06:	697a      	ldr	r2, [r7, #20]
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d006      	beq.n	8014a1a <tcp_output_fill_options+0x66>
 8014a0c:	4b05      	ldr	r3, [pc, #20]	; (8014a24 <tcp_output_fill_options+0x70>)
 8014a0e:	f240 7275 	movw	r2, #1909	; 0x775
 8014a12:	4907      	ldr	r1, [pc, #28]	; (8014a30 <tcp_output_fill_options+0x7c>)
 8014a14:	4805      	ldr	r0, [pc, #20]	; (8014a2c <tcp_output_fill_options+0x78>)
 8014a16:	f003 fa0b 	bl	8017e30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014a1a:	bf00      	nop
 8014a1c:	3720      	adds	r7, #32
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	0801d074 	.word	0x0801d074
 8014a28:	0801d7a4 	.word	0x0801d7a4
 8014a2c:	0801d0c8 	.word	0x0801d0c8
 8014a30:	0801d69c 	.word	0x0801d69c

08014a34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b08c      	sub	sp, #48	; 0x30
 8014a38:	af04      	add	r7, sp, #16
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
 8014a40:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d106      	bne.n	8014a56 <tcp_output_control_segment+0x22>
 8014a48:	4b24      	ldr	r3, [pc, #144]	; (8014adc <tcp_output_control_segment+0xa8>)
 8014a4a:	f240 7287 	movw	r2, #1927	; 0x787
 8014a4e:	4924      	ldr	r1, [pc, #144]	; (8014ae0 <tcp_output_control_segment+0xac>)
 8014a50:	4824      	ldr	r0, [pc, #144]	; (8014ae4 <tcp_output_control_segment+0xb0>)
 8014a52:	f003 f9ed 	bl	8017e30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	6879      	ldr	r1, [r7, #4]
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f7fe fad6 	bl	801300c <tcp_route>
 8014a60:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d102      	bne.n	8014a6e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014a68:	23fc      	movs	r3, #252	; 0xfc
 8014a6a:	77fb      	strb	r3, [r7, #31]
 8014a6c:	e02c      	b.n	8014ac8 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	891a      	ldrh	r2, [r3, #8]
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2106      	movs	r1, #6
 8014a80:	68b8      	ldr	r0, [r7, #8]
 8014a82:	f7f8 fa8f 	bl	800cfa4 <ip_chksum_pseudo>
 8014a86:	4603      	mov	r3, r0
 8014a88:	461a      	mov	r2, r3
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d006      	beq.n	8014aa2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	7adb      	ldrb	r3, [r3, #11]
 8014a98:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	7a9b      	ldrb	r3, [r3, #10]
 8014a9e:	777b      	strb	r3, [r7, #29]
 8014aa0:	e003      	b.n	8014aaa <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014aa2:	23ff      	movs	r3, #255	; 0xff
 8014aa4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014aaa:	7fba      	ldrb	r2, [r7, #30]
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	9302      	str	r3, [sp, #8]
 8014ab0:	2306      	movs	r3, #6
 8014ab2:	9301      	str	r3, [sp, #4]
 8014ab4:	7f7b      	ldrb	r3, [r7, #29]
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	4613      	mov	r3, r2
 8014aba:	683a      	ldr	r2, [r7, #0]
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	68b8      	ldr	r0, [r7, #8]
 8014ac0:	f001 fddc 	bl	801667c <ip4_output_if>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014ac8:	68b8      	ldr	r0, [r7, #8]
 8014aca:	f7f9 fe3f 	bl	800e74c <pbuf_free>
  return err;
 8014ace:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3720      	adds	r7, #32
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	0801d074 	.word	0x0801d074
 8014ae0:	0801d7cc 	.word	0x0801d7cc
 8014ae4:	0801d0c8 	.word	0x0801d0c8

08014ae8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014ae8:	b590      	push	{r4, r7, lr}
 8014aea:	b08b      	sub	sp, #44	; 0x2c
 8014aec:	af04      	add	r7, sp, #16
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	607a      	str	r2, [r7, #4]
 8014af4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d106      	bne.n	8014b0a <tcp_rst+0x22>
 8014afc:	4b1f      	ldr	r3, [pc, #124]	; (8014b7c <tcp_rst+0x94>)
 8014afe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b02:	491f      	ldr	r1, [pc, #124]	; (8014b80 <tcp_rst+0x98>)
 8014b04:	481f      	ldr	r0, [pc, #124]	; (8014b84 <tcp_rst+0x9c>)
 8014b06:	f003 f993 	bl	8017e30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d106      	bne.n	8014b1e <tcp_rst+0x36>
 8014b10:	4b1a      	ldr	r3, [pc, #104]	; (8014b7c <tcp_rst+0x94>)
 8014b12:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b16:	491c      	ldr	r1, [pc, #112]	; (8014b88 <tcp_rst+0xa0>)
 8014b18:	481a      	ldr	r0, [pc, #104]	; (8014b84 <tcp_rst+0x9c>)
 8014b1a:	f003 f989 	bl	8017e30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b1e:	2300      	movs	r3, #0
 8014b20:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b22:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b26:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014b28:	7dfb      	ldrb	r3, [r7, #23]
 8014b2a:	b29c      	uxth	r4, r3
 8014b2c:	68b8      	ldr	r0, [r7, #8]
 8014b2e:	f7f8 f91c 	bl	800cd6a <lwip_htonl>
 8014b32:	4602      	mov	r2, r0
 8014b34:	8abb      	ldrh	r3, [r7, #20]
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	2314      	movs	r3, #20
 8014b3a:	9302      	str	r3, [sp, #8]
 8014b3c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014b3e:	9301      	str	r3, [sp, #4]
 8014b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	4613      	mov	r3, r2
 8014b46:	2200      	movs	r2, #0
 8014b48:	4621      	mov	r1, r4
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f7ff fe82 	bl	8014854 <tcp_output_alloc_header_common>
 8014b50:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00c      	beq.n	8014b72 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b58:	7dfb      	ldrb	r3, [r7, #23]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	6939      	ldr	r1, [r7, #16]
 8014b5e:	68f8      	ldr	r0, [r7, #12]
 8014b60:	f7ff ff28 	bl	80149b4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	6939      	ldr	r1, [r7, #16]
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f7ff ff62 	bl	8014a34 <tcp_output_control_segment>
 8014b70:	e000      	b.n	8014b74 <tcp_rst+0x8c>
    return;
 8014b72:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014b74:	371c      	adds	r7, #28
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd90      	pop	{r4, r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	0801d074 	.word	0x0801d074
 8014b80:	0801d7f8 	.word	0x0801d7f8
 8014b84:	0801d0c8 	.word	0x0801d0c8
 8014b88:	0801d814 	.word	0x0801d814

08014b8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014b8c:	b590      	push	{r4, r7, lr}
 8014b8e:	b087      	sub	sp, #28
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014b94:	2300      	movs	r3, #0
 8014b96:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d106      	bne.n	8014bb0 <tcp_send_empty_ack+0x24>
 8014ba2:	4b28      	ldr	r3, [pc, #160]	; (8014c44 <tcp_send_empty_ack+0xb8>)
 8014ba4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014ba8:	4927      	ldr	r1, [pc, #156]	; (8014c48 <tcp_send_empty_ack+0xbc>)
 8014baa:	4828      	ldr	r0, [pc, #160]	; (8014c4c <tcp_send_empty_ack+0xc0>)
 8014bac:	f003 f940 	bl	8017e30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014bb0:	7dfb      	ldrb	r3, [r7, #23]
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	f003 0304 	and.w	r3, r3, #4
 8014bba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014bbc:	7d7b      	ldrb	r3, [r7, #21]
 8014bbe:	b29c      	uxth	r4, r3
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f8 f8d0 	bl	800cd6a <lwip_htonl>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2200      	movs	r2, #0
 8014bce:	4621      	mov	r1, r4
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7ff feb1 	bl	8014938 <tcp_output_alloc_header>
 8014bd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014bd8:	693b      	ldr	r3, [r7, #16]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d109      	bne.n	8014bf2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8b5b      	ldrh	r3, [r3, #26]
 8014be2:	f043 0303 	orr.w	r3, r3, #3
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014bec:	f06f 0301 	mvn.w	r3, #1
 8014bf0:	e023      	b.n	8014c3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014bf2:	7dbb      	ldrb	r3, [r7, #22]
 8014bf4:	7dfa      	ldrb	r2, [r7, #23]
 8014bf6:	6939      	ldr	r1, [r7, #16]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7ff fedb 	bl	80149b4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	3304      	adds	r3, #4
 8014c04:	6939      	ldr	r1, [r7, #16]
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f7ff ff14 	bl	8014a34 <tcp_output_control_segment>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d007      	beq.n	8014c28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	8b5b      	ldrh	r3, [r3, #26]
 8014c1c:	f043 0303 	orr.w	r3, r3, #3
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	835a      	strh	r2, [r3, #26]
 8014c26:	e006      	b.n	8014c36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	8b5b      	ldrh	r3, [r3, #26]
 8014c2c:	f023 0303 	bic.w	r3, r3, #3
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	371c      	adds	r7, #28
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd90      	pop	{r4, r7, pc}
 8014c42:	bf00      	nop
 8014c44:	0801d074 	.word	0x0801d074
 8014c48:	0801d830 	.word	0x0801d830
 8014c4c:	0801d0c8 	.word	0x0801d0c8

08014c50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014c50:	b590      	push	{r4, r7, lr}
 8014c52:	b087      	sub	sp, #28
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c58:	2300      	movs	r3, #0
 8014c5a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d106      	bne.n	8014c70 <tcp_keepalive+0x20>
 8014c62:	4b18      	ldr	r3, [pc, #96]	; (8014cc4 <tcp_keepalive+0x74>)
 8014c64:	f640 0224 	movw	r2, #2084	; 0x824
 8014c68:	4917      	ldr	r1, [pc, #92]	; (8014cc8 <tcp_keepalive+0x78>)
 8014c6a:	4818      	ldr	r0, [pc, #96]	; (8014ccc <tcp_keepalive+0x7c>)
 8014c6c:	f003 f8e0 	bl	8017e30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	b29c      	uxth	r4, r3
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c78:	3b01      	subs	r3, #1
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7f8 f875 	bl	800cd6a <lwip_htonl>
 8014c80:	4603      	mov	r3, r0
 8014c82:	2200      	movs	r2, #0
 8014c84:	4621      	mov	r1, r4
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f7ff fe56 	bl	8014938 <tcp_output_alloc_header>
 8014c8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d102      	bne.n	8014c9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c98:	e010      	b.n	8014cbc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c9a:	7dfb      	ldrb	r3, [r7, #23]
 8014c9c:	2200      	movs	r2, #0
 8014c9e:	6939      	ldr	r1, [r7, #16]
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f7ff fe87 	bl	80149b4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	3304      	adds	r3, #4
 8014cac:	6939      	ldr	r1, [r7, #16]
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f7ff fec0 	bl	8014a34 <tcp_output_control_segment>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	371c      	adds	r7, #28
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd90      	pop	{r4, r7, pc}
 8014cc4:	0801d074 	.word	0x0801d074
 8014cc8:	0801d850 	.word	0x0801d850
 8014ccc:	0801d0c8 	.word	0x0801d0c8

08014cd0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014cd0:	b590      	push	{r4, r7, lr}
 8014cd2:	b08b      	sub	sp, #44	; 0x2c
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cd8:	2300      	movs	r3, #0
 8014cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d106      	bne.n	8014cf2 <tcp_zero_window_probe+0x22>
 8014ce4:	4b4c      	ldr	r3, [pc, #304]	; (8014e18 <tcp_zero_window_probe+0x148>)
 8014ce6:	f640 024f 	movw	r2, #2127	; 0x84f
 8014cea:	494c      	ldr	r1, [pc, #304]	; (8014e1c <tcp_zero_window_probe+0x14c>)
 8014cec:	484c      	ldr	r0, [pc, #304]	; (8014e20 <tcp_zero_window_probe+0x150>)
 8014cee:	f003 f89f 	bl	8017e30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014cf8:	6a3b      	ldr	r3, [r7, #32]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d101      	bne.n	8014d02 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	e086      	b.n	8014e10 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d08:	2bff      	cmp	r3, #255	; 0xff
 8014d0a:	d007      	beq.n	8014d1c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d12:	3301      	adds	r3, #1
 8014d14:	b2da      	uxtb	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d1c:	6a3b      	ldr	r3, [r7, #32]
 8014d1e:	68db      	ldr	r3, [r3, #12]
 8014d20:	899b      	ldrh	r3, [r3, #12]
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7f8 f80b 	bl	800cd40 <lwip_htons>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	b2db      	uxtb	r3, r3
 8014d2e:	f003 0301 	and.w	r3, r3, #1
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d005      	beq.n	8014d42 <tcp_zero_window_probe+0x72>
 8014d36:	6a3b      	ldr	r3, [r7, #32]
 8014d38:	891b      	ldrh	r3, [r3, #8]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d101      	bne.n	8014d42 <tcp_zero_window_probe+0x72>
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e000      	b.n	8014d44 <tcp_zero_window_probe+0x74>
 8014d42:	2300      	movs	r3, #0
 8014d44:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014d46:	7ffb      	ldrb	r3, [r7, #31]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	bf0c      	ite	eq
 8014d4c:	2301      	moveq	r3, #1
 8014d4e:	2300      	movne	r3, #0
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d58:	b299      	uxth	r1, r3
 8014d5a:	6a3b      	ldr	r3, [r7, #32]
 8014d5c:	68db      	ldr	r3, [r3, #12]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	8bba      	ldrh	r2, [r7, #28]
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f7ff fde8 	bl	8014938 <tcp_output_alloc_header>
 8014d68:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014d6a:	69bb      	ldr	r3, [r7, #24]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d102      	bne.n	8014d76 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d74:	e04c      	b.n	8014e10 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014d76:	69bb      	ldr	r3, [r7, #24]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014d7c:	7ffb      	ldrb	r3, [r7, #31]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d011      	beq.n	8014da6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	899b      	ldrh	r3, [r3, #12]
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	b21b      	sxth	r3, r3
 8014d8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d8e:	b21c      	sxth	r4, r3
 8014d90:	2011      	movs	r0, #17
 8014d92:	f7f7 ffd5 	bl	800cd40 <lwip_htons>
 8014d96:	4603      	mov	r3, r0
 8014d98:	b21b      	sxth	r3, r3
 8014d9a:	4323      	orrs	r3, r4
 8014d9c:	b21b      	sxth	r3, r3
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	697b      	ldr	r3, [r7, #20]
 8014da2:	819a      	strh	r2, [r3, #12]
 8014da4:	e010      	b.n	8014dc8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	3314      	adds	r3, #20
 8014dac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014dae:	6a3b      	ldr	r3, [r7, #32]
 8014db0:	6858      	ldr	r0, [r3, #4]
 8014db2:	6a3b      	ldr	r3, [r7, #32]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	891a      	ldrh	r2, [r3, #8]
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	891b      	ldrh	r3, [r3, #8]
 8014dbc:	1ad3      	subs	r3, r2, r3
 8014dbe:	b29b      	uxth	r3, r3
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	6939      	ldr	r1, [r7, #16]
 8014dc4:	f7f9 feb8 	bl	800eb38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014dc8:	6a3b      	ldr	r3, [r7, #32]
 8014dca:	68db      	ldr	r3, [r3, #12]
 8014dcc:	685b      	ldr	r3, [r3, #4]
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7f7 ffcb 	bl	800cd6a <lwip_htonl>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	1ad3      	subs	r3, r2, r3
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	da02      	bge.n	8014dec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	68fa      	ldr	r2, [r7, #12]
 8014dea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014df0:	2200      	movs	r2, #0
 8014df2:	69b9      	ldr	r1, [r7, #24]
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f7ff fddd 	bl	80149b4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	3304      	adds	r3, #4
 8014e00:	69b9      	ldr	r1, [r7, #24]
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7ff fe16 	bl	8014a34 <tcp_output_control_segment>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	372c      	adds	r7, #44	; 0x2c
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd90      	pop	{r4, r7, pc}
 8014e18:	0801d074 	.word	0x0801d074
 8014e1c:	0801d86c 	.word	0x0801d86c
 8014e20:	0801d0c8 	.word	0x0801d0c8

08014e24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014e2c:	f7f9 ff72 	bl	800ed14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014e30:	4b0a      	ldr	r3, [pc, #40]	; (8014e5c <tcpip_tcp_timer+0x38>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d103      	bne.n	8014e40 <tcpip_tcp_timer+0x1c>
 8014e38:	4b09      	ldr	r3, [pc, #36]	; (8014e60 <tcpip_tcp_timer+0x3c>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d005      	beq.n	8014e4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e40:	2200      	movs	r2, #0
 8014e42:	4908      	ldr	r1, [pc, #32]	; (8014e64 <tcpip_tcp_timer+0x40>)
 8014e44:	20fa      	movs	r0, #250	; 0xfa
 8014e46:	f000 f8f3 	bl	8015030 <sys_timeout>
 8014e4a:	e003      	b.n	8014e54 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014e4c:	4b06      	ldr	r3, [pc, #24]	; (8014e68 <tcpip_tcp_timer+0x44>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	601a      	str	r2, [r3, #0]
  }
}
 8014e52:	bf00      	nop
 8014e54:	bf00      	nop
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	20011bbc 	.word	0x20011bbc
 8014e60:	20011bc0 	.word	0x20011bc0
 8014e64:	08014e25 	.word	0x08014e25
 8014e68:	20011c08 	.word	0x20011c08

08014e6c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e70:	4b0a      	ldr	r3, [pc, #40]	; (8014e9c <tcp_timer_needed+0x30>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d10f      	bne.n	8014e98 <tcp_timer_needed+0x2c>
 8014e78:	4b09      	ldr	r3, [pc, #36]	; (8014ea0 <tcp_timer_needed+0x34>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d103      	bne.n	8014e88 <tcp_timer_needed+0x1c>
 8014e80:	4b08      	ldr	r3, [pc, #32]	; (8014ea4 <tcp_timer_needed+0x38>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d007      	beq.n	8014e98 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014e88:	4b04      	ldr	r3, [pc, #16]	; (8014e9c <tcp_timer_needed+0x30>)
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e8e:	2200      	movs	r2, #0
 8014e90:	4905      	ldr	r1, [pc, #20]	; (8014ea8 <tcp_timer_needed+0x3c>)
 8014e92:	20fa      	movs	r0, #250	; 0xfa
 8014e94:	f000 f8cc 	bl	8015030 <sys_timeout>
  }
}
 8014e98:	bf00      	nop
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	20011c08 	.word	0x20011c08
 8014ea0:	20011bbc 	.word	0x20011bbc
 8014ea4:	20011bc0 	.word	0x20011bc0
 8014ea8:	08014e25 	.word	0x08014e25

08014eac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b086      	sub	sp, #24
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014eb8:	2009      	movs	r0, #9
 8014eba:	f7f8 fd31 	bl	800d920 <memp_malloc>
 8014ebe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ec0:	693b      	ldr	r3, [r7, #16]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d109      	bne.n	8014eda <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d151      	bne.n	8014f70 <sys_timeout_abs+0xc4>
 8014ecc:	4b2a      	ldr	r3, [pc, #168]	; (8014f78 <sys_timeout_abs+0xcc>)
 8014ece:	22be      	movs	r2, #190	; 0xbe
 8014ed0:	492a      	ldr	r1, [pc, #168]	; (8014f7c <sys_timeout_abs+0xd0>)
 8014ed2:	482b      	ldr	r0, [pc, #172]	; (8014f80 <sys_timeout_abs+0xd4>)
 8014ed4:	f002 ffac 	bl	8017e30 <iprintf>
    return;
 8014ed8:	e04a      	b.n	8014f70 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	2200      	movs	r2, #0
 8014ede:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	68ba      	ldr	r2, [r7, #8]
 8014ee4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	68fa      	ldr	r2, [r7, #12]
 8014ef0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014ef2:	4b24      	ldr	r3, [pc, #144]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d103      	bne.n	8014f02 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014efa:	4a22      	ldr	r2, [pc, #136]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	6013      	str	r3, [r2, #0]
    return;
 8014f00:	e037      	b.n	8014f72 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f02:	693b      	ldr	r3, [r7, #16]
 8014f04:	685a      	ldr	r2, [r3, #4]
 8014f06:	4b1f      	ldr	r3, [pc, #124]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	1ad3      	subs	r3, r2, r3
 8014f0e:	0fdb      	lsrs	r3, r3, #31
 8014f10:	f003 0301 	and.w	r3, r3, #1
 8014f14:	b2db      	uxtb	r3, r3
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d007      	beq.n	8014f2a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014f1a:	4b1a      	ldr	r3, [pc, #104]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f22:	4a18      	ldr	r2, [pc, #96]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	6013      	str	r3, [r2, #0]
 8014f28:	e023      	b.n	8014f72 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f2a:	4b16      	ldr	r3, [pc, #88]	; (8014f84 <sys_timeout_abs+0xd8>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	617b      	str	r3, [r7, #20]
 8014f30:	e01a      	b.n	8014f68 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d00b      	beq.n	8014f52 <sys_timeout_abs+0xa6>
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	685a      	ldr	r2, [r3, #4]
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	1ad3      	subs	r3, r2, r3
 8014f46:	0fdb      	lsrs	r3, r3, #31
 8014f48:	f003 0301 	and.w	r3, r3, #1
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d007      	beq.n	8014f62 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	693a      	ldr	r2, [r7, #16]
 8014f5e:	601a      	str	r2, [r3, #0]
        break;
 8014f60:	e007      	b.n	8014f72 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	617b      	str	r3, [r7, #20]
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d1e1      	bne.n	8014f32 <sys_timeout_abs+0x86>
 8014f6e:	e000      	b.n	8014f72 <sys_timeout_abs+0xc6>
    return;
 8014f70:	bf00      	nop
      }
    }
  }
}
 8014f72:	3718      	adds	r7, #24
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	0801d890 	.word	0x0801d890
 8014f7c:	0801d8c4 	.word	0x0801d8c4
 8014f80:	0801d904 	.word	0x0801d904
 8014f84:	20011c00 	.word	0x20011c00

08014f88 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	4798      	blx	r3

  now = sys_now();
 8014f9a:	f7f1 fb31 	bl	8006600 <sys_now>
 8014f9e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	4b0f      	ldr	r3, [pc, #60]	; (8014fe4 <lwip_cyclic_timer+0x5c>)
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4413      	add	r3, r2
 8014faa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	0fdb      	lsrs	r3, r3, #31
 8014fb4:	f003 0301 	and.w	r3, r3, #1
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d009      	beq.n	8014fd2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	4413      	add	r3, r2
 8014fc6:	687a      	ldr	r2, [r7, #4]
 8014fc8:	4907      	ldr	r1, [pc, #28]	; (8014fe8 <lwip_cyclic_timer+0x60>)
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7ff ff6e 	bl	8014eac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014fd0:	e004      	b.n	8014fdc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	4904      	ldr	r1, [pc, #16]	; (8014fe8 <lwip_cyclic_timer+0x60>)
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	f7ff ff68 	bl	8014eac <sys_timeout_abs>
}
 8014fdc:	bf00      	nop
 8014fde:	3718      	adds	r7, #24
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	20011c04 	.word	0x20011c04
 8014fe8:	08014f89 	.word	0x08014f89

08014fec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	607b      	str	r3, [r7, #4]
 8014ff6:	e00e      	b.n	8015016 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014ff8:	4a0b      	ldr	r2, [pc, #44]	; (8015028 <sys_timeouts_init+0x3c>)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	00db      	lsls	r3, r3, #3
 8015004:	4a08      	ldr	r2, [pc, #32]	; (8015028 <sys_timeouts_init+0x3c>)
 8015006:	4413      	add	r3, r2
 8015008:	461a      	mov	r2, r3
 801500a:	4908      	ldr	r1, [pc, #32]	; (801502c <sys_timeouts_init+0x40>)
 801500c:	f000 f810 	bl	8015030 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	3301      	adds	r3, #1
 8015014:	607b      	str	r3, [r7, #4]
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2b02      	cmp	r3, #2
 801501a:	d9ed      	bls.n	8014ff8 <sys_timeouts_init+0xc>
  }
}
 801501c:	bf00      	nop
 801501e:	bf00      	nop
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	0801e214 	.word	0x0801e214
 801502c:	08014f89 	.word	0x08014f89

08015030 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af00      	add	r7, sp, #0
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015042:	d306      	bcc.n	8015052 <sys_timeout+0x22>
 8015044:	4b0a      	ldr	r3, [pc, #40]	; (8015070 <sys_timeout+0x40>)
 8015046:	f240 1229 	movw	r2, #297	; 0x129
 801504a:	490a      	ldr	r1, [pc, #40]	; (8015074 <sys_timeout+0x44>)
 801504c:	480a      	ldr	r0, [pc, #40]	; (8015078 <sys_timeout+0x48>)
 801504e:	f002 feef 	bl	8017e30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015052:	f7f1 fad5 	bl	8006600 <sys_now>
 8015056:	4602      	mov	r2, r0
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	4413      	add	r3, r2
 801505c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	68b9      	ldr	r1, [r7, #8]
 8015062:	6978      	ldr	r0, [r7, #20]
 8015064:	f7ff ff22 	bl	8014eac <sys_timeout_abs>
#endif
}
 8015068:	bf00      	nop
 801506a:	3718      	adds	r7, #24
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	0801d890 	.word	0x0801d890
 8015074:	0801d92c 	.word	0x0801d92c
 8015078:	0801d904 	.word	0x0801d904

0801507c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015082:	f7f1 fabd 	bl	8006600 <sys_now>
 8015086:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015088:	4b17      	ldr	r3, [pc, #92]	; (80150e8 <sys_check_timeouts+0x6c>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d022      	beq.n	80150da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	1ad3      	subs	r3, r2, r3
 801509c:	0fdb      	lsrs	r3, r3, #31
 801509e:	f003 0301 	and.w	r3, r3, #1
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d11a      	bne.n	80150de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	4a0e      	ldr	r2, [pc, #56]	; (80150e8 <sys_check_timeouts+0x6c>)
 80150ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	689b      	ldr	r3, [r3, #8]
 80150b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	68db      	ldr	r3, [r3, #12]
 80150ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	4a0a      	ldr	r2, [pc, #40]	; (80150ec <sys_check_timeouts+0x70>)
 80150c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80150c4:	68b9      	ldr	r1, [r7, #8]
 80150c6:	2009      	movs	r0, #9
 80150c8:	f7f8 fca0 	bl	800da0c <memp_free>
    if (handler != NULL) {
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d0da      	beq.n	8015088 <sys_check_timeouts+0xc>
      handler(arg);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6838      	ldr	r0, [r7, #0]
 80150d6:	4798      	blx	r3
  do {
 80150d8:	e7d6      	b.n	8015088 <sys_check_timeouts+0xc>
      return;
 80150da:	bf00      	nop
 80150dc:	e000      	b.n	80150e0 <sys_check_timeouts+0x64>
      return;
 80150de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	20011c00 	.word	0x20011c00
 80150ec:	20011c04 	.word	0x20011c04

080150f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80150f6:	4b16      	ldr	r3, [pc, #88]	; (8015150 <sys_timeouts_sleeptime+0x60>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d102      	bne.n	8015104 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80150fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015102:	e020      	b.n	8015146 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015104:	f7f1 fa7c 	bl	8006600 <sys_now>
 8015108:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801510a:	4b11      	ldr	r3, [pc, #68]	; (8015150 <sys_timeouts_sleeptime+0x60>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	685a      	ldr	r2, [r3, #4]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	1ad3      	subs	r3, r2, r3
 8015114:	0fdb      	lsrs	r3, r3, #31
 8015116:	f003 0301 	and.w	r3, r3, #1
 801511a:	b2db      	uxtb	r3, r3
 801511c:	2b00      	cmp	r3, #0
 801511e:	d001      	beq.n	8015124 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015120:	2300      	movs	r3, #0
 8015122:	e010      	b.n	8015146 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015124:	4b0a      	ldr	r3, [pc, #40]	; (8015150 <sys_timeouts_sleeptime+0x60>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	685a      	ldr	r2, [r3, #4]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	1ad3      	subs	r3, r2, r3
 801512e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	2b00      	cmp	r3, #0
 8015134:	da06      	bge.n	8015144 <sys_timeouts_sleeptime+0x54>
 8015136:	4b07      	ldr	r3, [pc, #28]	; (8015154 <sys_timeouts_sleeptime+0x64>)
 8015138:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801513c:	4906      	ldr	r1, [pc, #24]	; (8015158 <sys_timeouts_sleeptime+0x68>)
 801513e:	4807      	ldr	r0, [pc, #28]	; (801515c <sys_timeouts_sleeptime+0x6c>)
 8015140:	f002 fe76 	bl	8017e30 <iprintf>
    return ret;
 8015144:	683b      	ldr	r3, [r7, #0]
  }
}
 8015146:	4618      	mov	r0, r3
 8015148:	3708      	adds	r7, #8
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	20011c00 	.word	0x20011c00
 8015154:	0801d890 	.word	0x0801d890
 8015158:	0801d964 	.word	0x0801d964
 801515c:	0801d904 	.word	0x0801d904

08015160 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015168:	4915      	ldr	r1, [pc, #84]	; (80151c0 <etharp_free_entry+0x60>)
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	4613      	mov	r3, r2
 801516e:	005b      	lsls	r3, r3, #1
 8015170:	4413      	add	r3, r2
 8015172:	00db      	lsls	r3, r3, #3
 8015174:	440b      	add	r3, r1
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d013      	beq.n	80151a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801517c:	4910      	ldr	r1, [pc, #64]	; (80151c0 <etharp_free_entry+0x60>)
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	4613      	mov	r3, r2
 8015182:	005b      	lsls	r3, r3, #1
 8015184:	4413      	add	r3, r2
 8015186:	00db      	lsls	r3, r3, #3
 8015188:	440b      	add	r3, r1
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4618      	mov	r0, r3
 801518e:	f7f9 fadd 	bl	800e74c <pbuf_free>
    arp_table[i].q = NULL;
 8015192:	490b      	ldr	r1, [pc, #44]	; (80151c0 <etharp_free_entry+0x60>)
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	4613      	mov	r3, r2
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	4413      	add	r3, r2
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	440b      	add	r3, r1
 80151a0:	2200      	movs	r2, #0
 80151a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80151a4:	4906      	ldr	r1, [pc, #24]	; (80151c0 <etharp_free_entry+0x60>)
 80151a6:	687a      	ldr	r2, [r7, #4]
 80151a8:	4613      	mov	r3, r2
 80151aa:	005b      	lsls	r3, r3, #1
 80151ac:	4413      	add	r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	440b      	add	r3, r1
 80151b2:	3314      	adds	r3, #20
 80151b4:	2200      	movs	r2, #0
 80151b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80151b8:	bf00      	nop
 80151ba:	3708      	adds	r7, #8
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	20011c0c 	.word	0x20011c0c

080151c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151ca:	2300      	movs	r3, #0
 80151cc:	607b      	str	r3, [r7, #4]
 80151ce:	e096      	b.n	80152fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80151d0:	494f      	ldr	r1, [pc, #316]	; (8015310 <etharp_tmr+0x14c>)
 80151d2:	687a      	ldr	r2, [r7, #4]
 80151d4:	4613      	mov	r3, r2
 80151d6:	005b      	lsls	r3, r3, #1
 80151d8:	4413      	add	r3, r2
 80151da:	00db      	lsls	r3, r3, #3
 80151dc:	440b      	add	r3, r1
 80151de:	3314      	adds	r3, #20
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80151e4:	78fb      	ldrb	r3, [r7, #3]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 8086 	beq.w	80152f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80151ec:	4948      	ldr	r1, [pc, #288]	; (8015310 <etharp_tmr+0x14c>)
 80151ee:	687a      	ldr	r2, [r7, #4]
 80151f0:	4613      	mov	r3, r2
 80151f2:	005b      	lsls	r3, r3, #1
 80151f4:	4413      	add	r3, r2
 80151f6:	00db      	lsls	r3, r3, #3
 80151f8:	440b      	add	r3, r1
 80151fa:	3312      	adds	r3, #18
 80151fc:	881b      	ldrh	r3, [r3, #0]
 80151fe:	3301      	adds	r3, #1
 8015200:	b298      	uxth	r0, r3
 8015202:	4943      	ldr	r1, [pc, #268]	; (8015310 <etharp_tmr+0x14c>)
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	4613      	mov	r3, r2
 8015208:	005b      	lsls	r3, r3, #1
 801520a:	4413      	add	r3, r2
 801520c:	00db      	lsls	r3, r3, #3
 801520e:	440b      	add	r3, r1
 8015210:	3312      	adds	r3, #18
 8015212:	4602      	mov	r2, r0
 8015214:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015216:	493e      	ldr	r1, [pc, #248]	; (8015310 <etharp_tmr+0x14c>)
 8015218:	687a      	ldr	r2, [r7, #4]
 801521a:	4613      	mov	r3, r2
 801521c:	005b      	lsls	r3, r3, #1
 801521e:	4413      	add	r3, r2
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	440b      	add	r3, r1
 8015224:	3312      	adds	r3, #18
 8015226:	881b      	ldrh	r3, [r3, #0]
 8015228:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801522c:	d215      	bcs.n	801525a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801522e:	4938      	ldr	r1, [pc, #224]	; (8015310 <etharp_tmr+0x14c>)
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	4613      	mov	r3, r2
 8015234:	005b      	lsls	r3, r3, #1
 8015236:	4413      	add	r3, r2
 8015238:	00db      	lsls	r3, r3, #3
 801523a:	440b      	add	r3, r1
 801523c:	3314      	adds	r3, #20
 801523e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015240:	2b01      	cmp	r3, #1
 8015242:	d10e      	bne.n	8015262 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015244:	4932      	ldr	r1, [pc, #200]	; (8015310 <etharp_tmr+0x14c>)
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	4613      	mov	r3, r2
 801524a:	005b      	lsls	r3, r3, #1
 801524c:	4413      	add	r3, r2
 801524e:	00db      	lsls	r3, r3, #3
 8015250:	440b      	add	r3, r1
 8015252:	3312      	adds	r3, #18
 8015254:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015256:	2b04      	cmp	r3, #4
 8015258:	d903      	bls.n	8015262 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7ff ff80 	bl	8015160 <etharp_free_entry>
 8015260:	e04a      	b.n	80152f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015262:	492b      	ldr	r1, [pc, #172]	; (8015310 <etharp_tmr+0x14c>)
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	4613      	mov	r3, r2
 8015268:	005b      	lsls	r3, r3, #1
 801526a:	4413      	add	r3, r2
 801526c:	00db      	lsls	r3, r3, #3
 801526e:	440b      	add	r3, r1
 8015270:	3314      	adds	r3, #20
 8015272:	781b      	ldrb	r3, [r3, #0]
 8015274:	2b03      	cmp	r3, #3
 8015276:	d10a      	bne.n	801528e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015278:	4925      	ldr	r1, [pc, #148]	; (8015310 <etharp_tmr+0x14c>)
 801527a:	687a      	ldr	r2, [r7, #4]
 801527c:	4613      	mov	r3, r2
 801527e:	005b      	lsls	r3, r3, #1
 8015280:	4413      	add	r3, r2
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	440b      	add	r3, r1
 8015286:	3314      	adds	r3, #20
 8015288:	2204      	movs	r2, #4
 801528a:	701a      	strb	r2, [r3, #0]
 801528c:	e034      	b.n	80152f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801528e:	4920      	ldr	r1, [pc, #128]	; (8015310 <etharp_tmr+0x14c>)
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	4613      	mov	r3, r2
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	4413      	add	r3, r2
 8015298:	00db      	lsls	r3, r3, #3
 801529a:	440b      	add	r3, r1
 801529c:	3314      	adds	r3, #20
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	2b04      	cmp	r3, #4
 80152a2:	d10a      	bne.n	80152ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80152a4:	491a      	ldr	r1, [pc, #104]	; (8015310 <etharp_tmr+0x14c>)
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	4613      	mov	r3, r2
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	4413      	add	r3, r2
 80152ae:	00db      	lsls	r3, r3, #3
 80152b0:	440b      	add	r3, r1
 80152b2:	3314      	adds	r3, #20
 80152b4:	2202      	movs	r2, #2
 80152b6:	701a      	strb	r2, [r3, #0]
 80152b8:	e01e      	b.n	80152f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80152ba:	4915      	ldr	r1, [pc, #84]	; (8015310 <etharp_tmr+0x14c>)
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	4613      	mov	r3, r2
 80152c0:	005b      	lsls	r3, r3, #1
 80152c2:	4413      	add	r3, r2
 80152c4:	00db      	lsls	r3, r3, #3
 80152c6:	440b      	add	r3, r1
 80152c8:	3314      	adds	r3, #20
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	2b01      	cmp	r3, #1
 80152ce:	d113      	bne.n	80152f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80152d0:	490f      	ldr	r1, [pc, #60]	; (8015310 <etharp_tmr+0x14c>)
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	4613      	mov	r3, r2
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	3308      	adds	r3, #8
 80152e0:	6818      	ldr	r0, [r3, #0]
 80152e2:	687a      	ldr	r2, [r7, #4]
 80152e4:	4613      	mov	r3, r2
 80152e6:	005b      	lsls	r3, r3, #1
 80152e8:	4413      	add	r3, r2
 80152ea:	00db      	lsls	r3, r3, #3
 80152ec:	4a08      	ldr	r2, [pc, #32]	; (8015310 <etharp_tmr+0x14c>)
 80152ee:	4413      	add	r3, r2
 80152f0:	3304      	adds	r3, #4
 80152f2:	4619      	mov	r1, r3
 80152f4:	f000 fe6e 	bl	8015fd4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	3301      	adds	r3, #1
 80152fc:	607b      	str	r3, [r7, #4]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	2b09      	cmp	r3, #9
 8015302:	f77f af65 	ble.w	80151d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015306:	bf00      	nop
 8015308:	bf00      	nop
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	20011c0c 	.word	0x20011c0c

08015314 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b08a      	sub	sp, #40	; 0x28
 8015318:	af00      	add	r7, sp, #0
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	460b      	mov	r3, r1
 801531e:	607a      	str	r2, [r7, #4]
 8015320:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015322:	230a      	movs	r3, #10
 8015324:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015326:	230a      	movs	r3, #10
 8015328:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801532a:	230a      	movs	r3, #10
 801532c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015332:	230a      	movs	r3, #10
 8015334:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	83bb      	strh	r3, [r7, #28]
 801533a:	2300      	movs	r3, #0
 801533c:	837b      	strh	r3, [r7, #26]
 801533e:	2300      	movs	r3, #0
 8015340:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015342:	2300      	movs	r3, #0
 8015344:	843b      	strh	r3, [r7, #32]
 8015346:	e0ae      	b.n	80154a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801534c:	49a6      	ldr	r1, [pc, #664]	; (80155e8 <etharp_find_entry+0x2d4>)
 801534e:	4613      	mov	r3, r2
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	4413      	add	r3, r2
 8015354:	00db      	lsls	r3, r3, #3
 8015356:	440b      	add	r3, r1
 8015358:	3314      	adds	r3, #20
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801535e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015362:	2b0a      	cmp	r3, #10
 8015364:	d105      	bne.n	8015372 <etharp_find_entry+0x5e>
 8015366:	7dfb      	ldrb	r3, [r7, #23]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d102      	bne.n	8015372 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801536c:	8c3b      	ldrh	r3, [r7, #32]
 801536e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015370:	e095      	b.n	801549e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015372:	7dfb      	ldrb	r3, [r7, #23]
 8015374:	2b00      	cmp	r3, #0
 8015376:	f000 8092 	beq.w	801549e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801537a:	7dfb      	ldrb	r3, [r7, #23]
 801537c:	2b01      	cmp	r3, #1
 801537e:	d009      	beq.n	8015394 <etharp_find_entry+0x80>
 8015380:	7dfb      	ldrb	r3, [r7, #23]
 8015382:	2b01      	cmp	r3, #1
 8015384:	d806      	bhi.n	8015394 <etharp_find_entry+0x80>
 8015386:	4b99      	ldr	r3, [pc, #612]	; (80155ec <etharp_find_entry+0x2d8>)
 8015388:	f240 1223 	movw	r2, #291	; 0x123
 801538c:	4998      	ldr	r1, [pc, #608]	; (80155f0 <etharp_find_entry+0x2dc>)
 801538e:	4899      	ldr	r0, [pc, #612]	; (80155f4 <etharp_find_entry+0x2e0>)
 8015390:	f002 fd4e 	bl	8017e30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d020      	beq.n	80153dc <etharp_find_entry+0xc8>
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	6819      	ldr	r1, [r3, #0]
 801539e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153a2:	4891      	ldr	r0, [pc, #580]	; (80155e8 <etharp_find_entry+0x2d4>)
 80153a4:	4613      	mov	r3, r2
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	4413      	add	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	4403      	add	r3, r0
 80153ae:	3304      	adds	r3, #4
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	4299      	cmp	r1, r3
 80153b4:	d112      	bne.n	80153dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d00c      	beq.n	80153d6 <etharp_find_entry+0xc2>
 80153bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153c0:	4989      	ldr	r1, [pc, #548]	; (80155e8 <etharp_find_entry+0x2d4>)
 80153c2:	4613      	mov	r3, r2
 80153c4:	005b      	lsls	r3, r3, #1
 80153c6:	4413      	add	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	440b      	add	r3, r1
 80153cc:	3308      	adds	r3, #8
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d102      	bne.n	80153dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80153d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153da:	e100      	b.n	80155de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80153dc:	7dfb      	ldrb	r3, [r7, #23]
 80153de:	2b01      	cmp	r3, #1
 80153e0:	d140      	bne.n	8015464 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80153e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153e6:	4980      	ldr	r1, [pc, #512]	; (80155e8 <etharp_find_entry+0x2d4>)
 80153e8:	4613      	mov	r3, r2
 80153ea:	005b      	lsls	r3, r3, #1
 80153ec:	4413      	add	r3, r2
 80153ee:	00db      	lsls	r3, r3, #3
 80153f0:	440b      	add	r3, r1
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d01a      	beq.n	801542e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80153f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153fc:	497a      	ldr	r1, [pc, #488]	; (80155e8 <etharp_find_entry+0x2d4>)
 80153fe:	4613      	mov	r3, r2
 8015400:	005b      	lsls	r3, r3, #1
 8015402:	4413      	add	r3, r2
 8015404:	00db      	lsls	r3, r3, #3
 8015406:	440b      	add	r3, r1
 8015408:	3312      	adds	r3, #18
 801540a:	881b      	ldrh	r3, [r3, #0]
 801540c:	8bba      	ldrh	r2, [r7, #28]
 801540e:	429a      	cmp	r2, r3
 8015410:	d845      	bhi.n	801549e <etharp_find_entry+0x18a>
            old_queue = i;
 8015412:	8c3b      	ldrh	r3, [r7, #32]
 8015414:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015416:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801541a:	4973      	ldr	r1, [pc, #460]	; (80155e8 <etharp_find_entry+0x2d4>)
 801541c:	4613      	mov	r3, r2
 801541e:	005b      	lsls	r3, r3, #1
 8015420:	4413      	add	r3, r2
 8015422:	00db      	lsls	r3, r3, #3
 8015424:	440b      	add	r3, r1
 8015426:	3312      	adds	r3, #18
 8015428:	881b      	ldrh	r3, [r3, #0]
 801542a:	83bb      	strh	r3, [r7, #28]
 801542c:	e037      	b.n	801549e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801542e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015432:	496d      	ldr	r1, [pc, #436]	; (80155e8 <etharp_find_entry+0x2d4>)
 8015434:	4613      	mov	r3, r2
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	4413      	add	r3, r2
 801543a:	00db      	lsls	r3, r3, #3
 801543c:	440b      	add	r3, r1
 801543e:	3312      	adds	r3, #18
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	8b7a      	ldrh	r2, [r7, #26]
 8015444:	429a      	cmp	r2, r3
 8015446:	d82a      	bhi.n	801549e <etharp_find_entry+0x18a>
            old_pending = i;
 8015448:	8c3b      	ldrh	r3, [r7, #32]
 801544a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801544c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015450:	4965      	ldr	r1, [pc, #404]	; (80155e8 <etharp_find_entry+0x2d4>)
 8015452:	4613      	mov	r3, r2
 8015454:	005b      	lsls	r3, r3, #1
 8015456:	4413      	add	r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	440b      	add	r3, r1
 801545c:	3312      	adds	r3, #18
 801545e:	881b      	ldrh	r3, [r3, #0]
 8015460:	837b      	strh	r3, [r7, #26]
 8015462:	e01c      	b.n	801549e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015464:	7dfb      	ldrb	r3, [r7, #23]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d919      	bls.n	801549e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801546a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801546e:	495e      	ldr	r1, [pc, #376]	; (80155e8 <etharp_find_entry+0x2d4>)
 8015470:	4613      	mov	r3, r2
 8015472:	005b      	lsls	r3, r3, #1
 8015474:	4413      	add	r3, r2
 8015476:	00db      	lsls	r3, r3, #3
 8015478:	440b      	add	r3, r1
 801547a:	3312      	adds	r3, #18
 801547c:	881b      	ldrh	r3, [r3, #0]
 801547e:	8b3a      	ldrh	r2, [r7, #24]
 8015480:	429a      	cmp	r2, r3
 8015482:	d80c      	bhi.n	801549e <etharp_find_entry+0x18a>
            old_stable = i;
 8015484:	8c3b      	ldrh	r3, [r7, #32]
 8015486:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801548c:	4956      	ldr	r1, [pc, #344]	; (80155e8 <etharp_find_entry+0x2d4>)
 801548e:	4613      	mov	r3, r2
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	4413      	add	r3, r2
 8015494:	00db      	lsls	r3, r3, #3
 8015496:	440b      	add	r3, r1
 8015498:	3312      	adds	r3, #18
 801549a:	881b      	ldrh	r3, [r3, #0]
 801549c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801549e:	8c3b      	ldrh	r3, [r7, #32]
 80154a0:	3301      	adds	r3, #1
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	843b      	strh	r3, [r7, #32]
 80154a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154aa:	2b09      	cmp	r3, #9
 80154ac:	f77f af4c 	ble.w	8015348 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80154b0:	7afb      	ldrb	r3, [r7, #11]
 80154b2:	f003 0302 	and.w	r3, r3, #2
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d108      	bne.n	80154cc <etharp_find_entry+0x1b8>
 80154ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154be:	2b0a      	cmp	r3, #10
 80154c0:	d107      	bne.n	80154d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80154c2:	7afb      	ldrb	r3, [r7, #11]
 80154c4:	f003 0301 	and.w	r3, r3, #1
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d102      	bne.n	80154d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80154cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154d0:	e085      	b.n	80155de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80154d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154d6:	2b09      	cmp	r3, #9
 80154d8:	dc02      	bgt.n	80154e0 <etharp_find_entry+0x1cc>
    i = empty;
 80154da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154dc:	843b      	strh	r3, [r7, #32]
 80154de:	e039      	b.n	8015554 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80154e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80154e4:	2b09      	cmp	r3, #9
 80154e6:	dc14      	bgt.n	8015512 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80154e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80154ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154f0:	493d      	ldr	r1, [pc, #244]	; (80155e8 <etharp_find_entry+0x2d4>)
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	00db      	lsls	r3, r3, #3
 80154fa:	440b      	add	r3, r1
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d018      	beq.n	8015534 <etharp_find_entry+0x220>
 8015502:	4b3a      	ldr	r3, [pc, #232]	; (80155ec <etharp_find_entry+0x2d8>)
 8015504:	f240 126d 	movw	r2, #365	; 0x16d
 8015508:	493b      	ldr	r1, [pc, #236]	; (80155f8 <etharp_find_entry+0x2e4>)
 801550a:	483a      	ldr	r0, [pc, #232]	; (80155f4 <etharp_find_entry+0x2e0>)
 801550c:	f002 fc90 	bl	8017e30 <iprintf>
 8015510:	e010      	b.n	8015534 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015512:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015516:	2b09      	cmp	r3, #9
 8015518:	dc02      	bgt.n	8015520 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801551a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801551c:	843b      	strh	r3, [r7, #32]
 801551e:	e009      	b.n	8015534 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015520:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015524:	2b09      	cmp	r3, #9
 8015526:	dc02      	bgt.n	801552e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015528:	8bfb      	ldrh	r3, [r7, #30]
 801552a:	843b      	strh	r3, [r7, #32]
 801552c:	e002      	b.n	8015534 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801552e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015532:	e054      	b.n	80155de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015534:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015538:	2b09      	cmp	r3, #9
 801553a:	dd06      	ble.n	801554a <etharp_find_entry+0x236>
 801553c:	4b2b      	ldr	r3, [pc, #172]	; (80155ec <etharp_find_entry+0x2d8>)
 801553e:	f240 127f 	movw	r2, #383	; 0x17f
 8015542:	492e      	ldr	r1, [pc, #184]	; (80155fc <etharp_find_entry+0x2e8>)
 8015544:	482b      	ldr	r0, [pc, #172]	; (80155f4 <etharp_find_entry+0x2e0>)
 8015546:	f002 fc73 	bl	8017e30 <iprintf>
    etharp_free_entry(i);
 801554a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801554e:	4618      	mov	r0, r3
 8015550:	f7ff fe06 	bl	8015160 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015554:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015558:	2b09      	cmp	r3, #9
 801555a:	dd06      	ble.n	801556a <etharp_find_entry+0x256>
 801555c:	4b23      	ldr	r3, [pc, #140]	; (80155ec <etharp_find_entry+0x2d8>)
 801555e:	f240 1283 	movw	r2, #387	; 0x183
 8015562:	4926      	ldr	r1, [pc, #152]	; (80155fc <etharp_find_entry+0x2e8>)
 8015564:	4823      	ldr	r0, [pc, #140]	; (80155f4 <etharp_find_entry+0x2e0>)
 8015566:	f002 fc63 	bl	8017e30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801556a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801556e:	491e      	ldr	r1, [pc, #120]	; (80155e8 <etharp_find_entry+0x2d4>)
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	00db      	lsls	r3, r3, #3
 8015578:	440b      	add	r3, r1
 801557a:	3314      	adds	r3, #20
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d006      	beq.n	8015590 <etharp_find_entry+0x27c>
 8015582:	4b1a      	ldr	r3, [pc, #104]	; (80155ec <etharp_find_entry+0x2d8>)
 8015584:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015588:	491d      	ldr	r1, [pc, #116]	; (8015600 <etharp_find_entry+0x2ec>)
 801558a:	481a      	ldr	r0, [pc, #104]	; (80155f4 <etharp_find_entry+0x2e0>)
 801558c:	f002 fc50 	bl	8017e30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00b      	beq.n	80155ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	6819      	ldr	r1, [r3, #0]
 801559e:	4812      	ldr	r0, [pc, #72]	; (80155e8 <etharp_find_entry+0x2d4>)
 80155a0:	4613      	mov	r3, r2
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	4413      	add	r3, r2
 80155a6:	00db      	lsls	r3, r3, #3
 80155a8:	4403      	add	r3, r0
 80155aa:	3304      	adds	r3, #4
 80155ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80155ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155b2:	490d      	ldr	r1, [pc, #52]	; (80155e8 <etharp_find_entry+0x2d4>)
 80155b4:	4613      	mov	r3, r2
 80155b6:	005b      	lsls	r3, r3, #1
 80155b8:	4413      	add	r3, r2
 80155ba:	00db      	lsls	r3, r3, #3
 80155bc:	440b      	add	r3, r1
 80155be:	3312      	adds	r3, #18
 80155c0:	2200      	movs	r2, #0
 80155c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80155c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155c8:	4907      	ldr	r1, [pc, #28]	; (80155e8 <etharp_find_entry+0x2d4>)
 80155ca:	4613      	mov	r3, r2
 80155cc:	005b      	lsls	r3, r3, #1
 80155ce:	4413      	add	r3, r2
 80155d0:	00db      	lsls	r3, r3, #3
 80155d2:	440b      	add	r3, r1
 80155d4:	3308      	adds	r3, #8
 80155d6:	687a      	ldr	r2, [r7, #4]
 80155d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80155da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3728      	adds	r7, #40	; 0x28
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}
 80155e6:	bf00      	nop
 80155e8:	20011c0c 	.word	0x20011c0c
 80155ec:	0801d978 	.word	0x0801d978
 80155f0:	0801d9b0 	.word	0x0801d9b0
 80155f4:	0801d9f0 	.word	0x0801d9f0
 80155f8:	0801da18 	.word	0x0801da18
 80155fc:	0801da30 	.word	0x0801da30
 8015600:	0801da44 	.word	0x0801da44

08015604 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b088      	sub	sp, #32
 8015608:	af02      	add	r7, sp, #8
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015618:	2b06      	cmp	r3, #6
 801561a:	d006      	beq.n	801562a <etharp_update_arp_entry+0x26>
 801561c:	4b48      	ldr	r3, [pc, #288]	; (8015740 <etharp_update_arp_entry+0x13c>)
 801561e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015622:	4948      	ldr	r1, [pc, #288]	; (8015744 <etharp_update_arp_entry+0x140>)
 8015624:	4848      	ldr	r0, [pc, #288]	; (8015748 <etharp_update_arp_entry+0x144>)
 8015626:	f002 fc03 	bl	8017e30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d012      	beq.n	8015656 <etharp_update_arp_entry+0x52>
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d00e      	beq.n	8015656 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	68f9      	ldr	r1, [r7, #12]
 801563e:	4618      	mov	r0, r3
 8015640:	f001 f8f4 	bl	801682c <ip4_addr_isbroadcast_u32>
 8015644:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015646:	2b00      	cmp	r3, #0
 8015648:	d105      	bne.n	8015656 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015652:	2be0      	cmp	r3, #224	; 0xe0
 8015654:	d102      	bne.n	801565c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015656:	f06f 030f 	mvn.w	r3, #15
 801565a:	e06c      	b.n	8015736 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801565c:	78fb      	ldrb	r3, [r7, #3]
 801565e:	68fa      	ldr	r2, [r7, #12]
 8015660:	4619      	mov	r1, r3
 8015662:	68b8      	ldr	r0, [r7, #8]
 8015664:	f7ff fe56 	bl	8015314 <etharp_find_entry>
 8015668:	4603      	mov	r3, r0
 801566a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801566c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015670:	2b00      	cmp	r3, #0
 8015672:	da02      	bge.n	801567a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015674:	8afb      	ldrh	r3, [r7, #22]
 8015676:	b25b      	sxtb	r3, r3
 8015678:	e05d      	b.n	8015736 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801567a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801567e:	4933      	ldr	r1, [pc, #204]	; (801574c <etharp_update_arp_entry+0x148>)
 8015680:	4613      	mov	r3, r2
 8015682:	005b      	lsls	r3, r3, #1
 8015684:	4413      	add	r3, r2
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	440b      	add	r3, r1
 801568a:	3314      	adds	r3, #20
 801568c:	2202      	movs	r2, #2
 801568e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015694:	492d      	ldr	r1, [pc, #180]	; (801574c <etharp_update_arp_entry+0x148>)
 8015696:	4613      	mov	r3, r2
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	4413      	add	r3, r2
 801569c:	00db      	lsls	r3, r3, #3
 801569e:	440b      	add	r3, r1
 80156a0:	3308      	adds	r3, #8
 80156a2:	68fa      	ldr	r2, [r7, #12]
 80156a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80156a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156aa:	4613      	mov	r3, r2
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	4413      	add	r3, r2
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	3308      	adds	r3, #8
 80156b4:	4a25      	ldr	r2, [pc, #148]	; (801574c <etharp_update_arp_entry+0x148>)
 80156b6:	4413      	add	r3, r2
 80156b8:	3304      	adds	r3, #4
 80156ba:	2206      	movs	r2, #6
 80156bc:	6879      	ldr	r1, [r7, #4]
 80156be:	4618      	mov	r0, r3
 80156c0:	f002 faf1 	bl	8017ca6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80156c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156c8:	4920      	ldr	r1, [pc, #128]	; (801574c <etharp_update_arp_entry+0x148>)
 80156ca:	4613      	mov	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	00db      	lsls	r3, r3, #3
 80156d2:	440b      	add	r3, r1
 80156d4:	3312      	adds	r3, #18
 80156d6:	2200      	movs	r2, #0
 80156d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80156da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156de:	491b      	ldr	r1, [pc, #108]	; (801574c <etharp_update_arp_entry+0x148>)
 80156e0:	4613      	mov	r3, r2
 80156e2:	005b      	lsls	r3, r3, #1
 80156e4:	4413      	add	r3, r2
 80156e6:	00db      	lsls	r3, r3, #3
 80156e8:	440b      	add	r3, r1
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d021      	beq.n	8015734 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80156f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156f4:	4915      	ldr	r1, [pc, #84]	; (801574c <etharp_update_arp_entry+0x148>)
 80156f6:	4613      	mov	r3, r2
 80156f8:	005b      	lsls	r3, r3, #1
 80156fa:	4413      	add	r3, r2
 80156fc:	00db      	lsls	r3, r3, #3
 80156fe:	440b      	add	r3, r1
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015704:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015708:	4910      	ldr	r1, [pc, #64]	; (801574c <etharp_update_arp_entry+0x148>)
 801570a:	4613      	mov	r3, r2
 801570c:	005b      	lsls	r3, r3, #1
 801570e:	4413      	add	r3, r2
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	440b      	add	r3, r1
 8015714:	2200      	movs	r2, #0
 8015716:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801571e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015722:	9300      	str	r3, [sp, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6939      	ldr	r1, [r7, #16]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f001 ff8d 	bl	8017648 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801572e:	6938      	ldr	r0, [r7, #16]
 8015730:	f7f9 f80c 	bl	800e74c <pbuf_free>
  }
  return ERR_OK;
 8015734:	2300      	movs	r3, #0
}
 8015736:	4618      	mov	r0, r3
 8015738:	3718      	adds	r7, #24
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	0801d978 	.word	0x0801d978
 8015744:	0801da70 	.word	0x0801da70
 8015748:	0801d9f0 	.word	0x0801d9f0
 801574c:	20011c0c 	.word	0x20011c0c

08015750 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015758:	2300      	movs	r3, #0
 801575a:	60fb      	str	r3, [r7, #12]
 801575c:	e01e      	b.n	801579c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801575e:	4913      	ldr	r1, [pc, #76]	; (80157ac <etharp_cleanup_netif+0x5c>)
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	4613      	mov	r3, r2
 8015764:	005b      	lsls	r3, r3, #1
 8015766:	4413      	add	r3, r2
 8015768:	00db      	lsls	r3, r3, #3
 801576a:	440b      	add	r3, r1
 801576c:	3314      	adds	r3, #20
 801576e:	781b      	ldrb	r3, [r3, #0]
 8015770:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015772:	7afb      	ldrb	r3, [r7, #11]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d00e      	beq.n	8015796 <etharp_cleanup_netif+0x46>
 8015778:	490c      	ldr	r1, [pc, #48]	; (80157ac <etharp_cleanup_netif+0x5c>)
 801577a:	68fa      	ldr	r2, [r7, #12]
 801577c:	4613      	mov	r3, r2
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	4413      	add	r3, r2
 8015782:	00db      	lsls	r3, r3, #3
 8015784:	440b      	add	r3, r1
 8015786:	3308      	adds	r3, #8
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	429a      	cmp	r2, r3
 801578e:	d102      	bne.n	8015796 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f7ff fce5 	bl	8015160 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	3301      	adds	r3, #1
 801579a:	60fb      	str	r3, [r7, #12]
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2b09      	cmp	r3, #9
 80157a0:	dddd      	ble.n	801575e <etharp_cleanup_netif+0xe>
    }
  }
}
 80157a2:	bf00      	nop
 80157a4:	bf00      	nop
 80157a6:	3710      	adds	r7, #16
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20011c0c 	.word	0x20011c0c

080157b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80157b0:	b5b0      	push	{r4, r5, r7, lr}
 80157b2:	b08a      	sub	sp, #40	; 0x28
 80157b4:	af04      	add	r7, sp, #16
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d107      	bne.n	80157d0 <etharp_input+0x20>
 80157c0:	4b3d      	ldr	r3, [pc, #244]	; (80158b8 <etharp_input+0x108>)
 80157c2:	f240 228a 	movw	r2, #650	; 0x28a
 80157c6:	493d      	ldr	r1, [pc, #244]	; (80158bc <etharp_input+0x10c>)
 80157c8:	483d      	ldr	r0, [pc, #244]	; (80158c0 <etharp_input+0x110>)
 80157ca:	f002 fb31 	bl	8017e30 <iprintf>
 80157ce:	e06f      	b.n	80158b0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	881b      	ldrh	r3, [r3, #0]
 80157da:	b29b      	uxth	r3, r3
 80157dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157e0:	d10c      	bne.n	80157fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80157e6:	2b06      	cmp	r3, #6
 80157e8:	d108      	bne.n	80157fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157ee:	2b04      	cmp	r3, #4
 80157f0:	d104      	bne.n	80157fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	885b      	ldrh	r3, [r3, #2]
 80157f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157f8:	2b08      	cmp	r3, #8
 80157fa:	d003      	beq.n	8015804 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7f8 ffa5 	bl	800e74c <pbuf_free>
    return;
 8015802:	e055      	b.n	80158b0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	330e      	adds	r3, #14
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801580c:	693b      	ldr	r3, [r7, #16]
 801580e:	3318      	adds	r3, #24
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	3304      	adds	r3, #4
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d102      	bne.n	8015824 <etharp_input+0x74>
    for_us = 0;
 801581e:	2300      	movs	r3, #0
 8015820:	75fb      	strb	r3, [r7, #23]
 8015822:	e009      	b.n	8015838 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015824:	68ba      	ldr	r2, [r7, #8]
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	3304      	adds	r3, #4
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	429a      	cmp	r2, r3
 801582e:	bf0c      	ite	eq
 8015830:	2301      	moveq	r3, #1
 8015832:	2300      	movne	r3, #0
 8015834:	b2db      	uxtb	r3, r3
 8015836:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	f103 0208 	add.w	r2, r3, #8
 801583e:	7dfb      	ldrb	r3, [r7, #23]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d001      	beq.n	8015848 <etharp_input+0x98>
 8015844:	2301      	movs	r3, #1
 8015846:	e000      	b.n	801584a <etharp_input+0x9a>
 8015848:	2302      	movs	r3, #2
 801584a:	f107 010c 	add.w	r1, r7, #12
 801584e:	6838      	ldr	r0, [r7, #0]
 8015850:	f7ff fed8 	bl	8015604 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	88db      	ldrh	r3, [r3, #6]
 8015858:	b29b      	uxth	r3, r3
 801585a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801585e:	d003      	beq.n	8015868 <etharp_input+0xb8>
 8015860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015864:	d01e      	beq.n	80158a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015866:	e020      	b.n	80158aa <etharp_input+0xfa>
      if (for_us) {
 8015868:	7dfb      	ldrb	r3, [r7, #23]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d01c      	beq.n	80158a8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015884:	693a      	ldr	r2, [r7, #16]
 8015886:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015888:	2102      	movs	r1, #2
 801588a:	9103      	str	r1, [sp, #12]
 801588c:	f107 010c 	add.w	r1, r7, #12
 8015890:	9102      	str	r1, [sp, #8]
 8015892:	9201      	str	r2, [sp, #4]
 8015894:	9300      	str	r3, [sp, #0]
 8015896:	462b      	mov	r3, r5
 8015898:	4622      	mov	r2, r4
 801589a:	4601      	mov	r1, r0
 801589c:	6838      	ldr	r0, [r7, #0]
 801589e:	f000 faeb 	bl	8015e78 <etharp_raw>
      break;
 80158a2:	e001      	b.n	80158a8 <etharp_input+0xf8>
      break;
 80158a4:	bf00      	nop
 80158a6:	e000      	b.n	80158aa <etharp_input+0xfa>
      break;
 80158a8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f7f8 ff4e 	bl	800e74c <pbuf_free>
}
 80158b0:	3718      	adds	r7, #24
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bdb0      	pop	{r4, r5, r7, pc}
 80158b6:	bf00      	nop
 80158b8:	0801d978 	.word	0x0801d978
 80158bc:	0801dac8 	.word	0x0801dac8
 80158c0:	0801d9f0 	.word	0x0801d9f0

080158c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b086      	sub	sp, #24
 80158c8:	af02      	add	r7, sp, #8
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	4613      	mov	r3, r2
 80158d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80158d2:	79fa      	ldrb	r2, [r7, #7]
 80158d4:	4944      	ldr	r1, [pc, #272]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 80158d6:	4613      	mov	r3, r2
 80158d8:	005b      	lsls	r3, r3, #1
 80158da:	4413      	add	r3, r2
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	440b      	add	r3, r1
 80158e0:	3314      	adds	r3, #20
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d806      	bhi.n	80158f6 <etharp_output_to_arp_index+0x32>
 80158e8:	4b40      	ldr	r3, [pc, #256]	; (80159ec <etharp_output_to_arp_index+0x128>)
 80158ea:	f240 22ee 	movw	r2, #750	; 0x2ee
 80158ee:	4940      	ldr	r1, [pc, #256]	; (80159f0 <etharp_output_to_arp_index+0x12c>)
 80158f0:	4840      	ldr	r0, [pc, #256]	; (80159f4 <etharp_output_to_arp_index+0x130>)
 80158f2:	f002 fa9d 	bl	8017e30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80158f6:	79fa      	ldrb	r2, [r7, #7]
 80158f8:	493b      	ldr	r1, [pc, #236]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 80158fa:	4613      	mov	r3, r2
 80158fc:	005b      	lsls	r3, r3, #1
 80158fe:	4413      	add	r3, r2
 8015900:	00db      	lsls	r3, r3, #3
 8015902:	440b      	add	r3, r1
 8015904:	3314      	adds	r3, #20
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	2b02      	cmp	r3, #2
 801590a:	d153      	bne.n	80159b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801590c:	79fa      	ldrb	r2, [r7, #7]
 801590e:	4936      	ldr	r1, [pc, #216]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 8015910:	4613      	mov	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	440b      	add	r3, r1
 801591a:	3312      	adds	r3, #18
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015922:	d919      	bls.n	8015958 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015924:	79fa      	ldrb	r2, [r7, #7]
 8015926:	4613      	mov	r3, r2
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	4413      	add	r3, r2
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	4a2e      	ldr	r2, [pc, #184]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 8015930:	4413      	add	r3, r2
 8015932:	3304      	adds	r3, #4
 8015934:	4619      	mov	r1, r3
 8015936:	68f8      	ldr	r0, [r7, #12]
 8015938:	f000 fb4c 	bl	8015fd4 <etharp_request>
 801593c:	4603      	mov	r3, r0
 801593e:	2b00      	cmp	r3, #0
 8015940:	d138      	bne.n	80159b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015942:	79fa      	ldrb	r2, [r7, #7]
 8015944:	4928      	ldr	r1, [pc, #160]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 8015946:	4613      	mov	r3, r2
 8015948:	005b      	lsls	r3, r3, #1
 801594a:	4413      	add	r3, r2
 801594c:	00db      	lsls	r3, r3, #3
 801594e:	440b      	add	r3, r1
 8015950:	3314      	adds	r3, #20
 8015952:	2203      	movs	r2, #3
 8015954:	701a      	strb	r2, [r3, #0]
 8015956:	e02d      	b.n	80159b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015958:	79fa      	ldrb	r2, [r7, #7]
 801595a:	4923      	ldr	r1, [pc, #140]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 801595c:	4613      	mov	r3, r2
 801595e:	005b      	lsls	r3, r3, #1
 8015960:	4413      	add	r3, r2
 8015962:	00db      	lsls	r3, r3, #3
 8015964:	440b      	add	r3, r1
 8015966:	3312      	adds	r3, #18
 8015968:	881b      	ldrh	r3, [r3, #0]
 801596a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801596e:	d321      	bcc.n	80159b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015970:	79fa      	ldrb	r2, [r7, #7]
 8015972:	4613      	mov	r3, r2
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	4413      	add	r3, r2
 8015978:	00db      	lsls	r3, r3, #3
 801597a:	4a1b      	ldr	r2, [pc, #108]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 801597c:	4413      	add	r3, r2
 801597e:	1d19      	adds	r1, r3, #4
 8015980:	79fa      	ldrb	r2, [r7, #7]
 8015982:	4613      	mov	r3, r2
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	4413      	add	r3, r2
 8015988:	00db      	lsls	r3, r3, #3
 801598a:	3308      	adds	r3, #8
 801598c:	4a16      	ldr	r2, [pc, #88]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 801598e:	4413      	add	r3, r2
 8015990:	3304      	adds	r3, #4
 8015992:	461a      	mov	r2, r3
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f000 fafb 	bl	8015f90 <etharp_request_dst>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d109      	bne.n	80159b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80159a0:	79fa      	ldrb	r2, [r7, #7]
 80159a2:	4911      	ldr	r1, [pc, #68]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 80159a4:	4613      	mov	r3, r2
 80159a6:	005b      	lsls	r3, r3, #1
 80159a8:	4413      	add	r3, r2
 80159aa:	00db      	lsls	r3, r3, #3
 80159ac:	440b      	add	r3, r1
 80159ae:	3314      	adds	r3, #20
 80159b0:	2203      	movs	r2, #3
 80159b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80159ba:	79fa      	ldrb	r2, [r7, #7]
 80159bc:	4613      	mov	r3, r2
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	3308      	adds	r3, #8
 80159c6:	4a08      	ldr	r2, [pc, #32]	; (80159e8 <etharp_output_to_arp_index+0x124>)
 80159c8:	4413      	add	r3, r2
 80159ca:	3304      	adds	r3, #4
 80159cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80159d0:	9200      	str	r2, [sp, #0]
 80159d2:	460a      	mov	r2, r1
 80159d4:	68b9      	ldr	r1, [r7, #8]
 80159d6:	68f8      	ldr	r0, [r7, #12]
 80159d8:	f001 fe36 	bl	8017648 <ethernet_output>
 80159dc:	4603      	mov	r3, r0
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3710      	adds	r7, #16
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}
 80159e6:	bf00      	nop
 80159e8:	20011c0c 	.word	0x20011c0c
 80159ec:	0801d978 	.word	0x0801d978
 80159f0:	0801dae8 	.word	0x0801dae8
 80159f4:	0801d9f0 	.word	0x0801d9f0

080159f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b08a      	sub	sp, #40	; 0x28
 80159fc:	af02      	add	r7, sp, #8
 80159fe:	60f8      	str	r0, [r7, #12]
 8015a00:	60b9      	str	r1, [r7, #8]
 8015a02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d106      	bne.n	8015a1c <etharp_output+0x24>
 8015a0e:	4b73      	ldr	r3, [pc, #460]	; (8015bdc <etharp_output+0x1e4>)
 8015a10:	f240 321e 	movw	r2, #798	; 0x31e
 8015a14:	4972      	ldr	r1, [pc, #456]	; (8015be0 <etharp_output+0x1e8>)
 8015a16:	4873      	ldr	r0, [pc, #460]	; (8015be4 <etharp_output+0x1ec>)
 8015a18:	f002 fa0a 	bl	8017e30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d106      	bne.n	8015a30 <etharp_output+0x38>
 8015a22:	4b6e      	ldr	r3, [pc, #440]	; (8015bdc <etharp_output+0x1e4>)
 8015a24:	f240 321f 	movw	r2, #799	; 0x31f
 8015a28:	496f      	ldr	r1, [pc, #444]	; (8015be8 <etharp_output+0x1f0>)
 8015a2a:	486e      	ldr	r0, [pc, #440]	; (8015be4 <etharp_output+0x1ec>)
 8015a2c:	f002 fa00 	bl	8017e30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d106      	bne.n	8015a44 <etharp_output+0x4c>
 8015a36:	4b69      	ldr	r3, [pc, #420]	; (8015bdc <etharp_output+0x1e4>)
 8015a38:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015a3c:	496b      	ldr	r1, [pc, #428]	; (8015bec <etharp_output+0x1f4>)
 8015a3e:	4869      	ldr	r0, [pc, #420]	; (8015be4 <etharp_output+0x1ec>)
 8015a40:	f002 f9f6 	bl	8017e30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	68f9      	ldr	r1, [r7, #12]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f000 feee 	bl	801682c <ip4_addr_isbroadcast_u32>
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d002      	beq.n	8015a5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015a56:	4b66      	ldr	r3, [pc, #408]	; (8015bf0 <etharp_output+0x1f8>)
 8015a58:	61fb      	str	r3, [r7, #28]
 8015a5a:	e0af      	b.n	8015bbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a64:	2be0      	cmp	r3, #224	; 0xe0
 8015a66:	d118      	bne.n	8015a9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015a68:	2301      	movs	r3, #1
 8015a6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015a70:	235e      	movs	r3, #94	; 0x5e
 8015a72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3301      	adds	r3, #1
 8015a78:	781b      	ldrb	r3, [r3, #0]
 8015a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a7e:	b2db      	uxtb	r3, r3
 8015a80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	3302      	adds	r3, #2
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	3303      	adds	r3, #3
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015a92:	f107 0310 	add.w	r3, r7, #16
 8015a96:	61fb      	str	r3, [r7, #28]
 8015a98:	e090      	b.n	8015bbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	3304      	adds	r3, #4
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	405a      	eors	r2, r3
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	3308      	adds	r3, #8
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4013      	ands	r3, r2
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d012      	beq.n	8015ad8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ab8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015abc:	4293      	cmp	r3, r2
 8015abe:	d00b      	beq.n	8015ad8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	330c      	adds	r3, #12
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d003      	beq.n	8015ad2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	330c      	adds	r3, #12
 8015ace:	61bb      	str	r3, [r7, #24]
 8015ad0:	e002      	b.n	8015ad8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015ad2:	f06f 0303 	mvn.w	r3, #3
 8015ad6:	e07d      	b.n	8015bd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015ad8:	4b46      	ldr	r3, [pc, #280]	; (8015bf4 <etharp_output+0x1fc>)
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	4619      	mov	r1, r3
 8015ade:	4a46      	ldr	r2, [pc, #280]	; (8015bf8 <etharp_output+0x200>)
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	440b      	add	r3, r1
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	4413      	add	r3, r2
 8015aea:	3314      	adds	r3, #20
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d925      	bls.n	8015b3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015af2:	4b40      	ldr	r3, [pc, #256]	; (8015bf4 <etharp_output+0x1fc>)
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	4619      	mov	r1, r3
 8015af8:	4a3f      	ldr	r2, [pc, #252]	; (8015bf8 <etharp_output+0x200>)
 8015afa:	460b      	mov	r3, r1
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	440b      	add	r3, r1
 8015b00:	00db      	lsls	r3, r3, #3
 8015b02:	4413      	add	r3, r2
 8015b04:	3308      	adds	r3, #8
 8015b06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d117      	bne.n	8015b3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015b0e:	69bb      	ldr	r3, [r7, #24]
 8015b10:	681a      	ldr	r2, [r3, #0]
 8015b12:	4b38      	ldr	r3, [pc, #224]	; (8015bf4 <etharp_output+0x1fc>)
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	4618      	mov	r0, r3
 8015b18:	4937      	ldr	r1, [pc, #220]	; (8015bf8 <etharp_output+0x200>)
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	005b      	lsls	r3, r3, #1
 8015b1e:	4403      	add	r3, r0
 8015b20:	00db      	lsls	r3, r3, #3
 8015b22:	440b      	add	r3, r1
 8015b24:	3304      	adds	r3, #4
 8015b26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d108      	bne.n	8015b3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015b2c:	4b31      	ldr	r3, [pc, #196]	; (8015bf4 <etharp_output+0x1fc>)
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	461a      	mov	r2, r3
 8015b32:	68b9      	ldr	r1, [r7, #8]
 8015b34:	68f8      	ldr	r0, [r7, #12]
 8015b36:	f7ff fec5 	bl	80158c4 <etharp_output_to_arp_index>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	e04a      	b.n	8015bd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b3e:	2300      	movs	r3, #0
 8015b40:	75fb      	strb	r3, [r7, #23]
 8015b42:	e031      	b.n	8015ba8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b44:	7dfa      	ldrb	r2, [r7, #23]
 8015b46:	492c      	ldr	r1, [pc, #176]	; (8015bf8 <etharp_output+0x200>)
 8015b48:	4613      	mov	r3, r2
 8015b4a:	005b      	lsls	r3, r3, #1
 8015b4c:	4413      	add	r3, r2
 8015b4e:	00db      	lsls	r3, r3, #3
 8015b50:	440b      	add	r3, r1
 8015b52:	3314      	adds	r3, #20
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d923      	bls.n	8015ba2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015b5a:	7dfa      	ldrb	r2, [r7, #23]
 8015b5c:	4926      	ldr	r1, [pc, #152]	; (8015bf8 <etharp_output+0x200>)
 8015b5e:	4613      	mov	r3, r2
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	4413      	add	r3, r2
 8015b64:	00db      	lsls	r3, r3, #3
 8015b66:	440b      	add	r3, r1
 8015b68:	3308      	adds	r3, #8
 8015b6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	d117      	bne.n	8015ba2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	6819      	ldr	r1, [r3, #0]
 8015b76:	7dfa      	ldrb	r2, [r7, #23]
 8015b78:	481f      	ldr	r0, [pc, #124]	; (8015bf8 <etharp_output+0x200>)
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	4413      	add	r3, r2
 8015b80:	00db      	lsls	r3, r3, #3
 8015b82:	4403      	add	r3, r0
 8015b84:	3304      	adds	r3, #4
 8015b86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015b88:	4299      	cmp	r1, r3
 8015b8a:	d10a      	bne.n	8015ba2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015b8c:	4a19      	ldr	r2, [pc, #100]	; (8015bf4 <etharp_output+0x1fc>)
 8015b8e:	7dfb      	ldrb	r3, [r7, #23]
 8015b90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015b92:	7dfb      	ldrb	r3, [r7, #23]
 8015b94:	461a      	mov	r2, r3
 8015b96:	68b9      	ldr	r1, [r7, #8]
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f7ff fe93 	bl	80158c4 <etharp_output_to_arp_index>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	e018      	b.n	8015bd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015ba2:	7dfb      	ldrb	r3, [r7, #23]
 8015ba4:	3301      	adds	r3, #1
 8015ba6:	75fb      	strb	r3, [r7, #23]
 8015ba8:	7dfb      	ldrb	r3, [r7, #23]
 8015baa:	2b09      	cmp	r3, #9
 8015bac:	d9ca      	bls.n	8015b44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015bae:	68ba      	ldr	r2, [r7, #8]
 8015bb0:	69b9      	ldr	r1, [r7, #24]
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f000 f822 	bl	8015bfc <etharp_query>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	e00b      	b.n	8015bd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	68b9      	ldr	r1, [r7, #8]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f001 fd3b 	bl	8017648 <ethernet_output>
 8015bd2:	4603      	mov	r3, r0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3720      	adds	r7, #32
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0801d978 	.word	0x0801d978
 8015be0:	0801dac8 	.word	0x0801dac8
 8015be4:	0801d9f0 	.word	0x0801d9f0
 8015be8:	0801db18 	.word	0x0801db18
 8015bec:	0801dab8 	.word	0x0801dab8
 8015bf0:	0801e230 	.word	0x0801e230
 8015bf4:	20011cfc 	.word	0x20011cfc
 8015bf8:	20011c0c 	.word	0x20011c0c

08015bfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b08c      	sub	sp, #48	; 0x30
 8015c00:	af02      	add	r7, sp, #8
 8015c02:	60f8      	str	r0, [r7, #12]
 8015c04:	60b9      	str	r1, [r7, #8]
 8015c06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	3326      	adds	r3, #38	; 0x26
 8015c0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015c0e:	23ff      	movs	r3, #255	; 0xff
 8015c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c18:	68bb      	ldr	r3, [r7, #8]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	68f9      	ldr	r1, [r7, #12]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f000 fe04 	bl	801682c <ip4_addr_isbroadcast_u32>
 8015c24:	4603      	mov	r3, r0
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d10c      	bne.n	8015c44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c32:	2be0      	cmp	r3, #224	; 0xe0
 8015c34:	d006      	beq.n	8015c44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d003      	beq.n	8015c44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d102      	bne.n	8015c4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c44:	f06f 030f 	mvn.w	r3, #15
 8015c48:	e101      	b.n	8015e4e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	2101      	movs	r1, #1
 8015c4e:	68b8      	ldr	r0, [r7, #8]
 8015c50:	f7ff fb60 	bl	8015314 <etharp_find_entry>
 8015c54:	4603      	mov	r3, r0
 8015c56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	da02      	bge.n	8015c66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015c60:	8a7b      	ldrh	r3, [r7, #18]
 8015c62:	b25b      	sxtb	r3, r3
 8015c64:	e0f3      	b.n	8015e4e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015c66:	8a7b      	ldrh	r3, [r7, #18]
 8015c68:	2b7e      	cmp	r3, #126	; 0x7e
 8015c6a:	d906      	bls.n	8015c7a <etharp_query+0x7e>
 8015c6c:	4b7a      	ldr	r3, [pc, #488]	; (8015e58 <etharp_query+0x25c>)
 8015c6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015c72:	497a      	ldr	r1, [pc, #488]	; (8015e5c <etharp_query+0x260>)
 8015c74:	487a      	ldr	r0, [pc, #488]	; (8015e60 <etharp_query+0x264>)
 8015c76:	f002 f8db 	bl	8017e30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015c7a:	8a7b      	ldrh	r3, [r7, #18]
 8015c7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015c7e:	7c7a      	ldrb	r2, [r7, #17]
 8015c80:	4978      	ldr	r1, [pc, #480]	; (8015e64 <etharp_query+0x268>)
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	440b      	add	r3, r1
 8015c8c:	3314      	adds	r3, #20
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d115      	bne.n	8015cc0 <etharp_query+0xc4>
    is_new_entry = 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015c98:	7c7a      	ldrb	r2, [r7, #17]
 8015c9a:	4972      	ldr	r1, [pc, #456]	; (8015e64 <etharp_query+0x268>)
 8015c9c:	4613      	mov	r3, r2
 8015c9e:	005b      	lsls	r3, r3, #1
 8015ca0:	4413      	add	r3, r2
 8015ca2:	00db      	lsls	r3, r3, #3
 8015ca4:	440b      	add	r3, r1
 8015ca6:	3314      	adds	r3, #20
 8015ca8:	2201      	movs	r2, #1
 8015caa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015cac:	7c7a      	ldrb	r2, [r7, #17]
 8015cae:	496d      	ldr	r1, [pc, #436]	; (8015e64 <etharp_query+0x268>)
 8015cb0:	4613      	mov	r3, r2
 8015cb2:	005b      	lsls	r3, r3, #1
 8015cb4:	4413      	add	r3, r2
 8015cb6:	00db      	lsls	r3, r3, #3
 8015cb8:	440b      	add	r3, r1
 8015cba:	3308      	adds	r3, #8
 8015cbc:	68fa      	ldr	r2, [r7, #12]
 8015cbe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015cc0:	7c7a      	ldrb	r2, [r7, #17]
 8015cc2:	4968      	ldr	r1, [pc, #416]	; (8015e64 <etharp_query+0x268>)
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	005b      	lsls	r3, r3, #1
 8015cc8:	4413      	add	r3, r2
 8015cca:	00db      	lsls	r3, r3, #3
 8015ccc:	440b      	add	r3, r1
 8015cce:	3314      	adds	r3, #20
 8015cd0:	781b      	ldrb	r3, [r3, #0]
 8015cd2:	2b01      	cmp	r3, #1
 8015cd4:	d011      	beq.n	8015cfa <etharp_query+0xfe>
 8015cd6:	7c7a      	ldrb	r2, [r7, #17]
 8015cd8:	4962      	ldr	r1, [pc, #392]	; (8015e64 <etharp_query+0x268>)
 8015cda:	4613      	mov	r3, r2
 8015cdc:	005b      	lsls	r3, r3, #1
 8015cde:	4413      	add	r3, r2
 8015ce0:	00db      	lsls	r3, r3, #3
 8015ce2:	440b      	add	r3, r1
 8015ce4:	3314      	adds	r3, #20
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d806      	bhi.n	8015cfa <etharp_query+0xfe>
 8015cec:	4b5a      	ldr	r3, [pc, #360]	; (8015e58 <etharp_query+0x25c>)
 8015cee:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015cf2:	495d      	ldr	r1, [pc, #372]	; (8015e68 <etharp_query+0x26c>)
 8015cf4:	485a      	ldr	r0, [pc, #360]	; (8015e60 <etharp_query+0x264>)
 8015cf6:	f002 f89b 	bl	8017e30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015cfa:	6a3b      	ldr	r3, [r7, #32]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d102      	bne.n	8015d06 <etharp_query+0x10a>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d10c      	bne.n	8015d20 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015d06:	68b9      	ldr	r1, [r7, #8]
 8015d08:	68f8      	ldr	r0, [r7, #12]
 8015d0a:	f000 f963 	bl	8015fd4 <etharp_request>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d102      	bne.n	8015d20 <etharp_query+0x124>
      return result;
 8015d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015d1e:	e096      	b.n	8015e4e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d106      	bne.n	8015d34 <etharp_query+0x138>
 8015d26:	4b4c      	ldr	r3, [pc, #304]	; (8015e58 <etharp_query+0x25c>)
 8015d28:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015d2c:	494f      	ldr	r1, [pc, #316]	; (8015e6c <etharp_query+0x270>)
 8015d2e:	484c      	ldr	r0, [pc, #304]	; (8015e60 <etharp_query+0x264>)
 8015d30:	f002 f87e 	bl	8017e30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015d34:	7c7a      	ldrb	r2, [r7, #17]
 8015d36:	494b      	ldr	r1, [pc, #300]	; (8015e64 <etharp_query+0x268>)
 8015d38:	4613      	mov	r3, r2
 8015d3a:	005b      	lsls	r3, r3, #1
 8015d3c:	4413      	add	r3, r2
 8015d3e:	00db      	lsls	r3, r3, #3
 8015d40:	440b      	add	r3, r1
 8015d42:	3314      	adds	r3, #20
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d917      	bls.n	8015d7a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015d4a:	4a49      	ldr	r2, [pc, #292]	; (8015e70 <etharp_query+0x274>)
 8015d4c:	7c7b      	ldrb	r3, [r7, #17]
 8015d4e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015d50:	7c7a      	ldrb	r2, [r7, #17]
 8015d52:	4613      	mov	r3, r2
 8015d54:	005b      	lsls	r3, r3, #1
 8015d56:	4413      	add	r3, r2
 8015d58:	00db      	lsls	r3, r3, #3
 8015d5a:	3308      	adds	r3, #8
 8015d5c:	4a41      	ldr	r2, [pc, #260]	; (8015e64 <etharp_query+0x268>)
 8015d5e:	4413      	add	r3, r2
 8015d60:	3304      	adds	r3, #4
 8015d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d66:	9200      	str	r2, [sp, #0]
 8015d68:	697a      	ldr	r2, [r7, #20]
 8015d6a:	6879      	ldr	r1, [r7, #4]
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	f001 fc6b 	bl	8017648 <ethernet_output>
 8015d72:	4603      	mov	r3, r0
 8015d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d78:	e067      	b.n	8015e4a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015d7a:	7c7a      	ldrb	r2, [r7, #17]
 8015d7c:	4939      	ldr	r1, [pc, #228]	; (8015e64 <etharp_query+0x268>)
 8015d7e:	4613      	mov	r3, r2
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	4413      	add	r3, r2
 8015d84:	00db      	lsls	r3, r3, #3
 8015d86:	440b      	add	r3, r1
 8015d88:	3314      	adds	r3, #20
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d15c      	bne.n	8015e4a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015d90:	2300      	movs	r3, #0
 8015d92:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015d98:	e01c      	b.n	8015dd4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	895a      	ldrh	r2, [r3, #10]
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	891b      	ldrh	r3, [r3, #8]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d10a      	bne.n	8015dbc <etharp_query+0x1c0>
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d006      	beq.n	8015dbc <etharp_query+0x1c0>
 8015dae:	4b2a      	ldr	r3, [pc, #168]	; (8015e58 <etharp_query+0x25c>)
 8015db0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015db4:	492f      	ldr	r1, [pc, #188]	; (8015e74 <etharp_query+0x278>)
 8015db6:	482a      	ldr	r0, [pc, #168]	; (8015e60 <etharp_query+0x264>)
 8015db8:	f002 f83a 	bl	8017e30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	7b1b      	ldrb	r3, [r3, #12]
 8015dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d002      	beq.n	8015dce <etharp_query+0x1d2>
        copy_needed = 1;
 8015dc8:	2301      	movs	r3, #1
 8015dca:	61bb      	str	r3, [r7, #24]
        break;
 8015dcc:	e005      	b.n	8015dda <etharp_query+0x1de>
      }
      p = p->next;
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d1df      	bne.n	8015d9a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d007      	beq.n	8015df0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015de6:	200e      	movs	r0, #14
 8015de8:	f7f8 ff18 	bl	800ec1c <pbuf_clone>
 8015dec:	61f8      	str	r0, [r7, #28]
 8015dee:	e004      	b.n	8015dfa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015df4:	69f8      	ldr	r0, [r7, #28]
 8015df6:	f7f8 fd4f 	bl	800e898 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015dfa:	69fb      	ldr	r3, [r7, #28]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d021      	beq.n	8015e44 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015e00:	7c7a      	ldrb	r2, [r7, #17]
 8015e02:	4918      	ldr	r1, [pc, #96]	; (8015e64 <etharp_query+0x268>)
 8015e04:	4613      	mov	r3, r2
 8015e06:	005b      	lsls	r3, r3, #1
 8015e08:	4413      	add	r3, r2
 8015e0a:	00db      	lsls	r3, r3, #3
 8015e0c:	440b      	add	r3, r1
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d00a      	beq.n	8015e2a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015e14:	7c7a      	ldrb	r2, [r7, #17]
 8015e16:	4913      	ldr	r1, [pc, #76]	; (8015e64 <etharp_query+0x268>)
 8015e18:	4613      	mov	r3, r2
 8015e1a:	005b      	lsls	r3, r3, #1
 8015e1c:	4413      	add	r3, r2
 8015e1e:	00db      	lsls	r3, r3, #3
 8015e20:	440b      	add	r3, r1
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7f8 fc91 	bl	800e74c <pbuf_free>
      }
      arp_table[i].q = p;
 8015e2a:	7c7a      	ldrb	r2, [r7, #17]
 8015e2c:	490d      	ldr	r1, [pc, #52]	; (8015e64 <etharp_query+0x268>)
 8015e2e:	4613      	mov	r3, r2
 8015e30:	005b      	lsls	r3, r3, #1
 8015e32:	4413      	add	r3, r2
 8015e34:	00db      	lsls	r3, r3, #3
 8015e36:	440b      	add	r3, r1
 8015e38:	69fa      	ldr	r2, [r7, #28]
 8015e3a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e42:	e002      	b.n	8015e4a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015e44:	23ff      	movs	r3, #255	; 0xff
 8015e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015e4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3728      	adds	r7, #40	; 0x28
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
 8015e56:	bf00      	nop
 8015e58:	0801d978 	.word	0x0801d978
 8015e5c:	0801db24 	.word	0x0801db24
 8015e60:	0801d9f0 	.word	0x0801d9f0
 8015e64:	20011c0c 	.word	0x20011c0c
 8015e68:	0801db34 	.word	0x0801db34
 8015e6c:	0801db18 	.word	0x0801db18
 8015e70:	20011cfc 	.word	0x20011cfc
 8015e74:	0801db5c 	.word	0x0801db5c

08015e78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b08a      	sub	sp, #40	; 0x28
 8015e7c:	af02      	add	r7, sp, #8
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015e86:	2300      	movs	r3, #0
 8015e88:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d106      	bne.n	8015e9e <etharp_raw+0x26>
 8015e90:	4b3a      	ldr	r3, [pc, #232]	; (8015f7c <etharp_raw+0x104>)
 8015e92:	f240 4257 	movw	r2, #1111	; 0x457
 8015e96:	493a      	ldr	r1, [pc, #232]	; (8015f80 <etharp_raw+0x108>)
 8015e98:	483a      	ldr	r0, [pc, #232]	; (8015f84 <etharp_raw+0x10c>)
 8015e9a:	f001 ffc9 	bl	8017e30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015e9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ea2:	211c      	movs	r1, #28
 8015ea4:	200e      	movs	r0, #14
 8015ea6:	f7f8 f96d 	bl	800e184 <pbuf_alloc>
 8015eaa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d102      	bne.n	8015eb8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015eb6:	e05d      	b.n	8015f74 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	895b      	ldrh	r3, [r3, #10]
 8015ebc:	2b1b      	cmp	r3, #27
 8015ebe:	d806      	bhi.n	8015ece <etharp_raw+0x56>
 8015ec0:	4b2e      	ldr	r3, [pc, #184]	; (8015f7c <etharp_raw+0x104>)
 8015ec2:	f240 4262 	movw	r2, #1122	; 0x462
 8015ec6:	4930      	ldr	r1, [pc, #192]	; (8015f88 <etharp_raw+0x110>)
 8015ec8:	482e      	ldr	r0, [pc, #184]	; (8015f84 <etharp_raw+0x10c>)
 8015eca:	f001 ffb1 	bl	8017e30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015ece:	69bb      	ldr	r3, [r7, #24]
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015ed4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7f6 ff32 	bl	800cd40 <lwip_htons>
 8015edc:	4603      	mov	r3, r0
 8015ede:	461a      	mov	r2, r3
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015eea:	2b06      	cmp	r3, #6
 8015eec:	d006      	beq.n	8015efc <etharp_raw+0x84>
 8015eee:	4b23      	ldr	r3, [pc, #140]	; (8015f7c <etharp_raw+0x104>)
 8015ef0:	f240 4269 	movw	r2, #1129	; 0x469
 8015ef4:	4925      	ldr	r1, [pc, #148]	; (8015f8c <etharp_raw+0x114>)
 8015ef6:	4823      	ldr	r0, [pc, #140]	; (8015f84 <etharp_raw+0x10c>)
 8015ef8:	f001 ff9a 	bl	8017e30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	3308      	adds	r3, #8
 8015f00:	2206      	movs	r2, #6
 8015f02:	6839      	ldr	r1, [r7, #0]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f001 fece 	bl	8017ca6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	3312      	adds	r3, #18
 8015f0e:	2206      	movs	r2, #6
 8015f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f12:	4618      	mov	r0, r3
 8015f14:	f001 fec7 	bl	8017ca6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	330e      	adds	r3, #14
 8015f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f1e:	6812      	ldr	r2, [r2, #0]
 8015f20:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	3318      	adds	r3, #24
 8015f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f28:	6812      	ldr	r2, [r2, #0]
 8015f2a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	701a      	strb	r2, [r3, #0]
 8015f32:	2200      	movs	r2, #0
 8015f34:	f042 0201 	orr.w	r2, r2, #1
 8015f38:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	f042 0208 	orr.w	r2, r2, #8
 8015f42:	709a      	strb	r2, [r3, #2]
 8015f44:	2200      	movs	r2, #0
 8015f46:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	2206      	movs	r2, #6
 8015f4c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	2204      	movs	r2, #4
 8015f52:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015f54:	f640 0306 	movw	r3, #2054	; 0x806
 8015f58:	9300      	str	r3, [sp, #0]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	68ba      	ldr	r2, [r7, #8]
 8015f5e:	69b9      	ldr	r1, [r7, #24]
 8015f60:	68f8      	ldr	r0, [r7, #12]
 8015f62:	f001 fb71 	bl	8017648 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015f66:	69b8      	ldr	r0, [r7, #24]
 8015f68:	f7f8 fbf0 	bl	800e74c <pbuf_free>
  p = NULL;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015f70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3720      	adds	r7, #32
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	0801d978 	.word	0x0801d978
 8015f80:	0801dac8 	.word	0x0801dac8
 8015f84:	0801d9f0 	.word	0x0801d9f0
 8015f88:	0801db78 	.word	0x0801db78
 8015f8c:	0801dbac 	.word	0x0801dbac

08015f90 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b088      	sub	sp, #32
 8015f94:	af04      	add	r7, sp, #16
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015fac:	2201      	movs	r2, #1
 8015fae:	9203      	str	r2, [sp, #12]
 8015fb0:	68ba      	ldr	r2, [r7, #8]
 8015fb2:	9202      	str	r2, [sp, #8]
 8015fb4:	4a06      	ldr	r2, [pc, #24]	; (8015fd0 <etharp_request_dst+0x40>)
 8015fb6:	9201      	str	r2, [sp, #4]
 8015fb8:	9300      	str	r3, [sp, #0]
 8015fba:	4603      	mov	r3, r0
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	68f8      	ldr	r0, [r7, #12]
 8015fc0:	f7ff ff5a 	bl	8015e78 <etharp_raw>
 8015fc4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	0801e238 	.word	0x0801e238

08015fd4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015fde:	4a05      	ldr	r2, [pc, #20]	; (8015ff4 <etharp_request+0x20>)
 8015fe0:	6839      	ldr	r1, [r7, #0]
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f7ff ffd4 	bl	8015f90 <etharp_request_dst>
 8015fe8:	4603      	mov	r3, r0
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3708      	adds	r7, #8
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	0801e230 	.word	0x0801e230

08015ff8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b08e      	sub	sp, #56	; 0x38
 8015ffc:	af04      	add	r7, sp, #16
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016002:	4b79      	ldr	r3, [pc, #484]	; (80161e8 <icmp_input+0x1f0>)
 8016004:	689b      	ldr	r3, [r3, #8]
 8016006:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	f003 030f 	and.w	r3, r3, #15
 8016010:	b2db      	uxtb	r3, r3
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	b2db      	uxtb	r3, r3
 8016016:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801601a:	2b13      	cmp	r3, #19
 801601c:	f240 80cd 	bls.w	80161ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	895b      	ldrh	r3, [r3, #10]
 8016024:	2b03      	cmp	r3, #3
 8016026:	f240 80ca 	bls.w	80161be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016034:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016038:	2b00      	cmp	r3, #0
 801603a:	f000 80b7 	beq.w	80161ac <icmp_input+0x1b4>
 801603e:	2b08      	cmp	r3, #8
 8016040:	f040 80b7 	bne.w	80161b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016044:	4b69      	ldr	r3, [pc, #420]	; (80161ec <icmp_input+0x1f4>)
 8016046:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016048:	4b67      	ldr	r3, [pc, #412]	; (80161e8 <icmp_input+0x1f0>)
 801604a:	695b      	ldr	r3, [r3, #20]
 801604c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016050:	2be0      	cmp	r3, #224	; 0xe0
 8016052:	f000 80bb 	beq.w	80161cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016056:	4b64      	ldr	r3, [pc, #400]	; (80161e8 <icmp_input+0x1f0>)
 8016058:	695b      	ldr	r3, [r3, #20]
 801605a:	4a63      	ldr	r2, [pc, #396]	; (80161e8 <icmp_input+0x1f0>)
 801605c:	6812      	ldr	r2, [r2, #0]
 801605e:	4611      	mov	r1, r2
 8016060:	4618      	mov	r0, r3
 8016062:	f000 fbe3 	bl	801682c <ip4_addr_isbroadcast_u32>
 8016066:	4603      	mov	r3, r0
 8016068:	2b00      	cmp	r3, #0
 801606a:	f040 80b1 	bne.w	80161d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	891b      	ldrh	r3, [r3, #8]
 8016072:	2b07      	cmp	r3, #7
 8016074:	f240 80a5 	bls.w	80161c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801607a:	330e      	adds	r3, #14
 801607c:	4619      	mov	r1, r3
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f7f8 face 	bl	800e620 <pbuf_add_header>
 8016084:	4603      	mov	r3, r0
 8016086:	2b00      	cmp	r3, #0
 8016088:	d04b      	beq.n	8016122 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	891a      	ldrh	r2, [r3, #8]
 801608e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016090:	4413      	add	r3, r2
 8016092:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	891b      	ldrh	r3, [r3, #8]
 8016098:	8b7a      	ldrh	r2, [r7, #26]
 801609a:	429a      	cmp	r2, r3
 801609c:	f0c0 809a 	bcc.w	80161d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80160a0:	8b7b      	ldrh	r3, [r7, #26]
 80160a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160a6:	4619      	mov	r1, r3
 80160a8:	200e      	movs	r0, #14
 80160aa:	f7f8 f86b 	bl	800e184 <pbuf_alloc>
 80160ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	f000 8090 	beq.w	80161d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	895b      	ldrh	r3, [r3, #10]
 80160bc:	461a      	mov	r2, r3
 80160be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160c0:	3308      	adds	r3, #8
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d203      	bcs.n	80160ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80160c6:	6978      	ldr	r0, [r7, #20]
 80160c8:	f7f8 fb40 	bl	800e74c <pbuf_free>
          goto icmperr;
 80160cc:	e085      	b.n	80161da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80160d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160d6:	4618      	mov	r0, r3
 80160d8:	f001 fde5 	bl	8017ca6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80160dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160de:	4619      	mov	r1, r3
 80160e0:	6978      	ldr	r0, [r7, #20]
 80160e2:	f7f8 faad 	bl	800e640 <pbuf_remove_header>
 80160e6:	4603      	mov	r3, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d009      	beq.n	8016100 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80160ec:	4b40      	ldr	r3, [pc, #256]	; (80161f0 <icmp_input+0x1f8>)
 80160ee:	22b6      	movs	r2, #182	; 0xb6
 80160f0:	4940      	ldr	r1, [pc, #256]	; (80161f4 <icmp_input+0x1fc>)
 80160f2:	4841      	ldr	r0, [pc, #260]	; (80161f8 <icmp_input+0x200>)
 80160f4:	f001 fe9c 	bl	8017e30 <iprintf>
          pbuf_free(r);
 80160f8:	6978      	ldr	r0, [r7, #20]
 80160fa:	f7f8 fb27 	bl	800e74c <pbuf_free>
          goto icmperr;
 80160fe:	e06c      	b.n	80161da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016100:	6879      	ldr	r1, [r7, #4]
 8016102:	6978      	ldr	r0, [r7, #20]
 8016104:	f7f8 fc46 	bl	800e994 <pbuf_copy>
 8016108:	4603      	mov	r3, r0
 801610a:	2b00      	cmp	r3, #0
 801610c:	d003      	beq.n	8016116 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801610e:	6978      	ldr	r0, [r7, #20]
 8016110:	f7f8 fb1c 	bl	800e74c <pbuf_free>
          goto icmperr;
 8016114:	e061      	b.n	80161da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f7f8 fb18 	bl	800e74c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	607b      	str	r3, [r7, #4]
 8016120:	e00f      	b.n	8016142 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016124:	330e      	adds	r3, #14
 8016126:	4619      	mov	r1, r3
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f7f8 fa89 	bl	800e640 <pbuf_remove_header>
 801612e:	4603      	mov	r3, r0
 8016130:	2b00      	cmp	r3, #0
 8016132:	d006      	beq.n	8016142 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016134:	4b2e      	ldr	r3, [pc, #184]	; (80161f0 <icmp_input+0x1f8>)
 8016136:	22c7      	movs	r2, #199	; 0xc7
 8016138:	4930      	ldr	r1, [pc, #192]	; (80161fc <icmp_input+0x204>)
 801613a:	482f      	ldr	r0, [pc, #188]	; (80161f8 <icmp_input+0x200>)
 801613c:	f001 fe78 	bl	8017e30 <iprintf>
          goto icmperr;
 8016140:	e04b      	b.n	80161da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801614a:	4619      	mov	r1, r3
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f7f8 fa67 	bl	800e620 <pbuf_add_header>
 8016152:	4603      	mov	r3, r0
 8016154:	2b00      	cmp	r3, #0
 8016156:	d12b      	bne.n	80161b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	681a      	ldr	r2, [r3, #0]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016166:	4b20      	ldr	r3, [pc, #128]	; (80161e8 <icmp_input+0x1f0>)
 8016168:	691a      	ldr	r2, [r3, #16]
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	2200      	movs	r2, #0
 8016172:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	2200      	movs	r2, #0
 8016178:	709a      	strb	r2, [r3, #2]
 801617a:	2200      	movs	r2, #0
 801617c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	22ff      	movs	r2, #255	; 0xff
 8016182:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2200      	movs	r2, #0
 8016188:	729a      	strb	r2, [r3, #10]
 801618a:	2200      	movs	r2, #0
 801618c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	9302      	str	r3, [sp, #8]
 8016192:	2301      	movs	r3, #1
 8016194:	9301      	str	r3, [sp, #4]
 8016196:	2300      	movs	r3, #0
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	23ff      	movs	r3, #255	; 0xff
 801619c:	2200      	movs	r2, #0
 801619e:	69f9      	ldr	r1, [r7, #28]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 fa6b 	bl	801667c <ip4_output_if>
 80161a6:	4603      	mov	r3, r0
 80161a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80161aa:	e001      	b.n	80161b0 <icmp_input+0x1b8>
      break;
 80161ac:	bf00      	nop
 80161ae:	e000      	b.n	80161b2 <icmp_input+0x1ba>
      break;
 80161b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f7f8 faca 	bl	800e74c <pbuf_free>
  return;
 80161b8:	e013      	b.n	80161e2 <icmp_input+0x1ea>
    goto lenerr;
 80161ba:	bf00      	nop
 80161bc:	e002      	b.n	80161c4 <icmp_input+0x1cc>
    goto lenerr;
 80161be:	bf00      	nop
 80161c0:	e000      	b.n	80161c4 <icmp_input+0x1cc>
        goto lenerr;
 80161c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7f8 fac1 	bl	800e74c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80161ca:	e00a      	b.n	80161e2 <icmp_input+0x1ea>
        goto icmperr;
 80161cc:	bf00      	nop
 80161ce:	e004      	b.n	80161da <icmp_input+0x1e2>
        goto icmperr;
 80161d0:	bf00      	nop
 80161d2:	e002      	b.n	80161da <icmp_input+0x1e2>
          goto icmperr;
 80161d4:	bf00      	nop
 80161d6:	e000      	b.n	80161da <icmp_input+0x1e2>
          goto icmperr;
 80161d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7f8 fab6 	bl	800e74c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80161e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80161e2:	3728      	adds	r7, #40	; 0x28
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}
 80161e8:	20009b24 	.word	0x20009b24
 80161ec:	20009b38 	.word	0x20009b38
 80161f0:	0801dbf0 	.word	0x0801dbf0
 80161f4:	0801dc28 	.word	0x0801dc28
 80161f8:	0801dc60 	.word	0x0801dc60
 80161fc:	0801dc88 	.word	0x0801dc88

08016200 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	460b      	mov	r3, r1
 801620a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801620c:	78fb      	ldrb	r3, [r7, #3]
 801620e:	461a      	mov	r2, r3
 8016210:	2103      	movs	r1, #3
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f000 f814 	bl	8016240 <icmp_send_response>
}
 8016218:	bf00      	nop
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	460b      	mov	r3, r1
 801622a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801622c:	78fb      	ldrb	r3, [r7, #3]
 801622e:	461a      	mov	r2, r3
 8016230:	210b      	movs	r1, #11
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f000 f804 	bl	8016240 <icmp_send_response>
}
 8016238:	bf00      	nop
 801623a:	3708      	adds	r7, #8
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b08c      	sub	sp, #48	; 0x30
 8016244:	af04      	add	r7, sp, #16
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	460b      	mov	r3, r1
 801624a:	70fb      	strb	r3, [r7, #3]
 801624c:	4613      	mov	r3, r2
 801624e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016250:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016254:	2124      	movs	r1, #36	; 0x24
 8016256:	2022      	movs	r0, #34	; 0x22
 8016258:	f7f7 ff94 	bl	800e184 <pbuf_alloc>
 801625c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d04c      	beq.n	80162fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	895b      	ldrh	r3, [r3, #10]
 8016268:	2b23      	cmp	r3, #35	; 0x23
 801626a:	d806      	bhi.n	801627a <icmp_send_response+0x3a>
 801626c:	4b26      	ldr	r3, [pc, #152]	; (8016308 <icmp_send_response+0xc8>)
 801626e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016272:	4926      	ldr	r1, [pc, #152]	; (801630c <icmp_send_response+0xcc>)
 8016274:	4826      	ldr	r0, [pc, #152]	; (8016310 <icmp_send_response+0xd0>)
 8016276:	f001 fddb 	bl	8017e30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016280:	69fb      	ldr	r3, [r7, #28]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	78fa      	ldrb	r2, [r7, #3]
 801628a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	78ba      	ldrb	r2, [r7, #2]
 8016290:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	2200      	movs	r2, #0
 8016296:	711a      	strb	r2, [r3, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	2200      	movs	r2, #0
 80162a0:	719a      	strb	r2, [r3, #6]
 80162a2:	2200      	movs	r2, #0
 80162a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80162a6:	69fb      	ldr	r3, [r7, #28]
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	f103 0008 	add.w	r0, r3, #8
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	221c      	movs	r2, #28
 80162b4:	4619      	mov	r1, r3
 80162b6:	f001 fcf6 	bl	8017ca6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80162c0:	f107 030c 	add.w	r3, r7, #12
 80162c4:	4618      	mov	r0, r3
 80162c6:	f000 f825 	bl	8016314 <ip4_route>
 80162ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d011      	beq.n	80162f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	2200      	movs	r2, #0
 80162d6:	709a      	strb	r2, [r3, #2]
 80162d8:	2200      	movs	r2, #0
 80162da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80162dc:	f107 020c 	add.w	r2, r7, #12
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	9302      	str	r3, [sp, #8]
 80162e4:	2301      	movs	r3, #1
 80162e6:	9301      	str	r3, [sp, #4]
 80162e8:	2300      	movs	r3, #0
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	23ff      	movs	r3, #255	; 0xff
 80162ee:	2100      	movs	r1, #0
 80162f0:	69f8      	ldr	r0, [r7, #28]
 80162f2:	f000 f9c3 	bl	801667c <ip4_output_if>
  }
  pbuf_free(q);
 80162f6:	69f8      	ldr	r0, [r7, #28]
 80162f8:	f7f8 fa28 	bl	800e74c <pbuf_free>
 80162fc:	e000      	b.n	8016300 <icmp_send_response+0xc0>
    return;
 80162fe:	bf00      	nop
}
 8016300:	3720      	adds	r7, #32
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	0801dbf0 	.word	0x0801dbf0
 801630c:	0801dcbc 	.word	0x0801dcbc
 8016310:	0801dc60 	.word	0x0801dc60

08016314 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016314:	b480      	push	{r7}
 8016316:	b085      	sub	sp, #20
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801631c:	4b33      	ldr	r3, [pc, #204]	; (80163ec <ip4_route+0xd8>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	60fb      	str	r3, [r7, #12]
 8016322:	e036      	b.n	8016392 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801632a:	f003 0301 	and.w	r3, r3, #1
 801632e:	b2db      	uxtb	r3, r3
 8016330:	2b00      	cmp	r3, #0
 8016332:	d02b      	beq.n	801638c <ip4_route+0x78>
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801633a:	089b      	lsrs	r3, r3, #2
 801633c:	f003 0301 	and.w	r3, r3, #1
 8016340:	b2db      	uxtb	r3, r3
 8016342:	2b00      	cmp	r3, #0
 8016344:	d022      	beq.n	801638c <ip4_route+0x78>
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3304      	adds	r3, #4
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d01d      	beq.n	801638c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681a      	ldr	r2, [r3, #0]
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	3304      	adds	r3, #4
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	405a      	eors	r2, r3
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	3308      	adds	r3, #8
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	4013      	ands	r3, r2
 8016364:	2b00      	cmp	r3, #0
 8016366:	d101      	bne.n	801636c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	e038      	b.n	80163de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016372:	f003 0302 	and.w	r3, r3, #2
 8016376:	2b00      	cmp	r3, #0
 8016378:	d108      	bne.n	801638c <ip4_route+0x78>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681a      	ldr	r2, [r3, #0]
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	330c      	adds	r3, #12
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	429a      	cmp	r2, r3
 8016386:	d101      	bne.n	801638c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	e028      	b.n	80163de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	60fb      	str	r3, [r7, #12]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d1c5      	bne.n	8016324 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016398:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <ip4_route+0xdc>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d01a      	beq.n	80163d6 <ip4_route+0xc2>
 80163a0:	4b13      	ldr	r3, [pc, #76]	; (80163f0 <ip4_route+0xdc>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163a8:	f003 0301 	and.w	r3, r3, #1
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d012      	beq.n	80163d6 <ip4_route+0xc2>
 80163b0:	4b0f      	ldr	r3, [pc, #60]	; (80163f0 <ip4_route+0xdc>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163b8:	f003 0304 	and.w	r3, r3, #4
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d00a      	beq.n	80163d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80163c0:	4b0b      	ldr	r3, [pc, #44]	; (80163f0 <ip4_route+0xdc>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	3304      	adds	r3, #4
 80163c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d004      	beq.n	80163d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	2b7f      	cmp	r3, #127	; 0x7f
 80163d4:	d101      	bne.n	80163da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80163d6:	2300      	movs	r3, #0
 80163d8:	e001      	b.n	80163de <ip4_route+0xca>
  }

  return netif_default;
 80163da:	4b05      	ldr	r3, [pc, #20]	; (80163f0 <ip4_route+0xdc>)
 80163dc:	681b      	ldr	r3, [r3, #0]
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3714      	adds	r7, #20
 80163e2:	46bd      	mov	sp, r7
 80163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	20011ba4 	.word	0x20011ba4
 80163f0:	20011ba8 	.word	0x20011ba8

080163f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016402:	f003 0301 	and.w	r3, r3, #1
 8016406:	b2db      	uxtb	r3, r3
 8016408:	2b00      	cmp	r3, #0
 801640a:	d016      	beq.n	801643a <ip4_input_accept+0x46>
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	3304      	adds	r3, #4
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d011      	beq.n	801643a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016416:	4b0b      	ldr	r3, [pc, #44]	; (8016444 <ip4_input_accept+0x50>)
 8016418:	695a      	ldr	r2, [r3, #20]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	3304      	adds	r3, #4
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	429a      	cmp	r2, r3
 8016422:	d008      	beq.n	8016436 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016424:	4b07      	ldr	r3, [pc, #28]	; (8016444 <ip4_input_accept+0x50>)
 8016426:	695b      	ldr	r3, [r3, #20]
 8016428:	6879      	ldr	r1, [r7, #4]
 801642a:	4618      	mov	r0, r3
 801642c:	f000 f9fe 	bl	801682c <ip4_addr_isbroadcast_u32>
 8016430:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016432:	2b00      	cmp	r3, #0
 8016434:	d001      	beq.n	801643a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016436:	2301      	movs	r3, #1
 8016438:	e000      	b.n	801643c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801643a:	2300      	movs	r3, #0
}
 801643c:	4618      	mov	r0, r3
 801643e:	3708      	adds	r7, #8
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	20009b24 	.word	0x20009b24

08016448 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b086      	sub	sp, #24
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	091b      	lsrs	r3, r3, #4
 801645e:	b2db      	uxtb	r3, r3
 8016460:	2b04      	cmp	r3, #4
 8016462:	d004      	beq.n	801646e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f7f8 f971 	bl	800e74c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801646a:	2300      	movs	r3, #0
 801646c:	e0fd      	b.n	801666a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	f003 030f 	and.w	r3, r3, #15
 8016476:	b2db      	uxtb	r3, r3
 8016478:	009b      	lsls	r3, r3, #2
 801647a:	b2db      	uxtb	r3, r3
 801647c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	885b      	ldrh	r3, [r3, #2]
 8016482:	b29b      	uxth	r3, r3
 8016484:	4618      	mov	r0, r3
 8016486:	f7f6 fc5b 	bl	800cd40 <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	891b      	ldrh	r3, [r3, #8]
 8016492:	89ba      	ldrh	r2, [r7, #12]
 8016494:	429a      	cmp	r2, r3
 8016496:	d204      	bcs.n	80164a2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016498:	89bb      	ldrh	r3, [r7, #12]
 801649a:	4619      	mov	r1, r3
 801649c:	6878      	ldr	r0, [r7, #4]
 801649e:	f7f7 ffcf 	bl	800e440 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	895b      	ldrh	r3, [r3, #10]
 80164a6:	89fa      	ldrh	r2, [r7, #14]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d807      	bhi.n	80164bc <ip4_input+0x74>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	891b      	ldrh	r3, [r3, #8]
 80164b0:	89ba      	ldrh	r2, [r7, #12]
 80164b2:	429a      	cmp	r2, r3
 80164b4:	d802      	bhi.n	80164bc <ip4_input+0x74>
 80164b6:	89fb      	ldrh	r3, [r7, #14]
 80164b8:	2b13      	cmp	r3, #19
 80164ba:	d804      	bhi.n	80164c6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7f8 f945 	bl	800e74c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80164c2:	2300      	movs	r3, #0
 80164c4:	e0d1      	b.n	801666a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	691b      	ldr	r3, [r3, #16]
 80164ca:	4a6a      	ldr	r2, [pc, #424]	; (8016674 <ip4_input+0x22c>)
 80164cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	4a68      	ldr	r2, [pc, #416]	; (8016674 <ip4_input+0x22c>)
 80164d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164d6:	4b67      	ldr	r3, [pc, #412]	; (8016674 <ip4_input+0x22c>)
 80164d8:	695b      	ldr	r3, [r3, #20]
 80164da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164de:	2be0      	cmp	r3, #224	; 0xe0
 80164e0:	d112      	bne.n	8016508 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164e8:	f003 0301 	and.w	r3, r3, #1
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d007      	beq.n	8016502 <ip4_input+0xba>
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	3304      	adds	r3, #4
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d002      	beq.n	8016502 <ip4_input+0xba>
      netif = inp;
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	613b      	str	r3, [r7, #16]
 8016500:	e02a      	b.n	8016558 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016502:	2300      	movs	r3, #0
 8016504:	613b      	str	r3, [r7, #16]
 8016506:	e027      	b.n	8016558 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016508:	6838      	ldr	r0, [r7, #0]
 801650a:	f7ff ff73 	bl	80163f4 <ip4_input_accept>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d002      	beq.n	801651a <ip4_input+0xd2>
      netif = inp;
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	613b      	str	r3, [r7, #16]
 8016518:	e01e      	b.n	8016558 <ip4_input+0x110>
    } else {
      netif = NULL;
 801651a:	2300      	movs	r3, #0
 801651c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801651e:	4b55      	ldr	r3, [pc, #340]	; (8016674 <ip4_input+0x22c>)
 8016520:	695b      	ldr	r3, [r3, #20]
 8016522:	b2db      	uxtb	r3, r3
 8016524:	2b7f      	cmp	r3, #127	; 0x7f
 8016526:	d017      	beq.n	8016558 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016528:	4b53      	ldr	r3, [pc, #332]	; (8016678 <ip4_input+0x230>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	613b      	str	r3, [r7, #16]
 801652e:	e00e      	b.n	801654e <ip4_input+0x106>
          if (netif == inp) {
 8016530:	693a      	ldr	r2, [r7, #16]
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	429a      	cmp	r2, r3
 8016536:	d006      	beq.n	8016546 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016538:	6938      	ldr	r0, [r7, #16]
 801653a:	f7ff ff5b 	bl	80163f4 <ip4_input_accept>
 801653e:	4603      	mov	r3, r0
 8016540:	2b00      	cmp	r3, #0
 8016542:	d108      	bne.n	8016556 <ip4_input+0x10e>
 8016544:	e000      	b.n	8016548 <ip4_input+0x100>
            continue;
 8016546:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016548:	693b      	ldr	r3, [r7, #16]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	613b      	str	r3, [r7, #16]
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1ed      	bne.n	8016530 <ip4_input+0xe8>
 8016554:	e000      	b.n	8016558 <ip4_input+0x110>
            break;
 8016556:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016558:	4b46      	ldr	r3, [pc, #280]	; (8016674 <ip4_input+0x22c>)
 801655a:	691b      	ldr	r3, [r3, #16]
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	4618      	mov	r0, r3
 8016560:	f000 f964 	bl	801682c <ip4_addr_isbroadcast_u32>
 8016564:	4603      	mov	r3, r0
 8016566:	2b00      	cmp	r3, #0
 8016568:	d105      	bne.n	8016576 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801656a:	4b42      	ldr	r3, [pc, #264]	; (8016674 <ip4_input+0x22c>)
 801656c:	691b      	ldr	r3, [r3, #16]
 801656e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016572:	2be0      	cmp	r3, #224	; 0xe0
 8016574:	d104      	bne.n	8016580 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f7f8 f8e8 	bl	800e74c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801657c:	2300      	movs	r3, #0
 801657e:	e074      	b.n	801666a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016580:	693b      	ldr	r3, [r7, #16]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d104      	bne.n	8016590 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7f8 f8e0 	bl	800e74c <pbuf_free>
    return ERR_OK;
 801658c:	2300      	movs	r3, #0
 801658e:	e06c      	b.n	801666a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	88db      	ldrh	r3, [r3, #6]
 8016594:	b29b      	uxth	r3, r3
 8016596:	461a      	mov	r2, r3
 8016598:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801659c:	4013      	ands	r3, r2
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d00b      	beq.n	80165ba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 fc88 	bl	8016eb8 <ip4_reass>
 80165a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d101      	bne.n	80165b4 <ip4_input+0x16c>
      return ERR_OK;
 80165b0:	2300      	movs	r3, #0
 80165b2:	e05a      	b.n	801666a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	685b      	ldr	r3, [r3, #4]
 80165b8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80165ba:	4a2e      	ldr	r2, [pc, #184]	; (8016674 <ip4_input+0x22c>)
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80165c0:	4a2c      	ldr	r2, [pc, #176]	; (8016674 <ip4_input+0x22c>)
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80165c6:	4a2b      	ldr	r2, [pc, #172]	; (8016674 <ip4_input+0x22c>)
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	f003 030f 	and.w	r3, r3, #15
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	009b      	lsls	r3, r3, #2
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	b29a      	uxth	r2, r3
 80165dc:	4b25      	ldr	r3, [pc, #148]	; (8016674 <ip4_input+0x22c>)
 80165de:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80165e0:	89fb      	ldrh	r3, [r7, #14]
 80165e2:	4619      	mov	r1, r3
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f7f8 f82b 	bl	800e640 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	7a5b      	ldrb	r3, [r3, #9]
 80165ee:	2b01      	cmp	r3, #1
 80165f0:	d006      	beq.n	8016600 <ip4_input+0x1b8>
 80165f2:	2b06      	cmp	r3, #6
 80165f4:	d109      	bne.n	801660a <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7fa f9fb 	bl	80109f4 <tcp_input>
        break;
 80165fe:	e021      	b.n	8016644 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f7ff fcf8 	bl	8015ff8 <icmp_input>
        break;
 8016608:	e01c      	b.n	8016644 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801660a:	4b1a      	ldr	r3, [pc, #104]	; (8016674 <ip4_input+0x22c>)
 801660c:	695b      	ldr	r3, [r3, #20]
 801660e:	6939      	ldr	r1, [r7, #16]
 8016610:	4618      	mov	r0, r3
 8016612:	f000 f90b 	bl	801682c <ip4_addr_isbroadcast_u32>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	d10f      	bne.n	801663c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801661c:	4b15      	ldr	r3, [pc, #84]	; (8016674 <ip4_input+0x22c>)
 801661e:	695b      	ldr	r3, [r3, #20]
 8016620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016624:	2be0      	cmp	r3, #224	; 0xe0
 8016626:	d009      	beq.n	801663c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801662c:	4619      	mov	r1, r3
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f7f8 f879 	bl	800e726 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016634:	2102      	movs	r1, #2
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f7ff fde2 	bl	8016200 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f7f8 f885 	bl	800e74c <pbuf_free>
        break;
 8016642:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016644:	4b0b      	ldr	r3, [pc, #44]	; (8016674 <ip4_input+0x22c>)
 8016646:	2200      	movs	r2, #0
 8016648:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801664a:	4b0a      	ldr	r3, [pc, #40]	; (8016674 <ip4_input+0x22c>)
 801664c:	2200      	movs	r2, #0
 801664e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016650:	4b08      	ldr	r3, [pc, #32]	; (8016674 <ip4_input+0x22c>)
 8016652:	2200      	movs	r2, #0
 8016654:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016656:	4b07      	ldr	r3, [pc, #28]	; (8016674 <ip4_input+0x22c>)
 8016658:	2200      	movs	r2, #0
 801665a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801665c:	4b05      	ldr	r3, [pc, #20]	; (8016674 <ip4_input+0x22c>)
 801665e:	2200      	movs	r2, #0
 8016660:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016662:	4b04      	ldr	r3, [pc, #16]	; (8016674 <ip4_input+0x22c>)
 8016664:	2200      	movs	r2, #0
 8016666:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016668:	2300      	movs	r3, #0
}
 801666a:	4618      	mov	r0, r3
 801666c:	3718      	adds	r7, #24
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	20009b24 	.word	0x20009b24
 8016678:	20011ba4 	.word	0x20011ba4

0801667c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b08a      	sub	sp, #40	; 0x28
 8016680:	af04      	add	r7, sp, #16
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	607a      	str	r2, [r7, #4]
 8016688:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d009      	beq.n	80166a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d003      	beq.n	80166a2 <ip4_output_if+0x26>
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d102      	bne.n	80166a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80166a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a4:	3304      	adds	r3, #4
 80166a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80166a8:	78fa      	ldrb	r2, [r7, #3]
 80166aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ac:	9302      	str	r3, [sp, #8]
 80166ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80166b2:	9301      	str	r3, [sp, #4]
 80166b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166b8:	9300      	str	r3, [sp, #0]
 80166ba:	4613      	mov	r3, r2
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	6979      	ldr	r1, [r7, #20]
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	f000 f805 	bl	80166d0 <ip4_output_if_src>
 80166c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	3718      	adds	r7, #24
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b088      	sub	sp, #32
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
 80166dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	7b9b      	ldrb	r3, [r3, #14]
 80166e2:	2b01      	cmp	r3, #1
 80166e4:	d006      	beq.n	80166f4 <ip4_output_if_src+0x24>
 80166e6:	4b4b      	ldr	r3, [pc, #300]	; (8016814 <ip4_output_if_src+0x144>)
 80166e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80166ec:	494a      	ldr	r1, [pc, #296]	; (8016818 <ip4_output_if_src+0x148>)
 80166ee:	484b      	ldr	r0, [pc, #300]	; (801681c <ip4_output_if_src+0x14c>)
 80166f0:	f001 fb9e 	bl	8017e30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d060      	beq.n	80167bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80166fa:	2314      	movs	r3, #20
 80166fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80166fe:	2114      	movs	r1, #20
 8016700:	68f8      	ldr	r0, [r7, #12]
 8016702:	f7f7 ff8d 	bl	800e620 <pbuf_add_header>
 8016706:	4603      	mov	r3, r0
 8016708:	2b00      	cmp	r3, #0
 801670a:	d002      	beq.n	8016712 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801670c:	f06f 0301 	mvn.w	r3, #1
 8016710:	e07c      	b.n	801680c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	895b      	ldrh	r3, [r3, #10]
 801671c:	2b13      	cmp	r3, #19
 801671e:	d806      	bhi.n	801672e <ip4_output_if_src+0x5e>
 8016720:	4b3c      	ldr	r3, [pc, #240]	; (8016814 <ip4_output_if_src+0x144>)
 8016722:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016726:	493e      	ldr	r1, [pc, #248]	; (8016820 <ip4_output_if_src+0x150>)
 8016728:	483c      	ldr	r0, [pc, #240]	; (801681c <ip4_output_if_src+0x14c>)
 801672a:	f001 fb81 	bl	8017e30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	78fa      	ldrb	r2, [r7, #3]
 8016732:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801673a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681a      	ldr	r2, [r3, #0]
 8016740:	69fb      	ldr	r3, [r7, #28]
 8016742:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016744:	8b7b      	ldrh	r3, [r7, #26]
 8016746:	089b      	lsrs	r3, r3, #2
 8016748:	b29b      	uxth	r3, r3
 801674a:	b2db      	uxtb	r3, r3
 801674c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016750:	b2da      	uxtb	r2, r3
 8016752:	69fb      	ldr	r3, [r7, #28]
 8016754:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801675c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	891b      	ldrh	r3, [r3, #8]
 8016762:	4618      	mov	r0, r3
 8016764:	f7f6 faec 	bl	800cd40 <lwip_htons>
 8016768:	4603      	mov	r3, r0
 801676a:	461a      	mov	r2, r3
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016770:	69fb      	ldr	r3, [r7, #28]
 8016772:	2200      	movs	r2, #0
 8016774:	719a      	strb	r2, [r3, #6]
 8016776:	2200      	movs	r2, #0
 8016778:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801677a:	4b2a      	ldr	r3, [pc, #168]	; (8016824 <ip4_output_if_src+0x154>)
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	4618      	mov	r0, r3
 8016780:	f7f6 fade 	bl	800cd40 <lwip_htons>
 8016784:	4603      	mov	r3, r0
 8016786:	461a      	mov	r2, r3
 8016788:	69fb      	ldr	r3, [r7, #28]
 801678a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801678c:	4b25      	ldr	r3, [pc, #148]	; (8016824 <ip4_output_if_src+0x154>)
 801678e:	881b      	ldrh	r3, [r3, #0]
 8016790:	3301      	adds	r3, #1
 8016792:	b29a      	uxth	r2, r3
 8016794:	4b23      	ldr	r3, [pc, #140]	; (8016824 <ip4_output_if_src+0x154>)
 8016796:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d104      	bne.n	80167a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801679e:	4b22      	ldr	r3, [pc, #136]	; (8016828 <ip4_output_if_src+0x158>)
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	69fb      	ldr	r3, [r7, #28]
 80167a4:	60da      	str	r2, [r3, #12]
 80167a6:	e003      	b.n	80167b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	681a      	ldr	r2, [r3, #0]
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80167b0:	69fb      	ldr	r3, [r7, #28]
 80167b2:	2200      	movs	r2, #0
 80167b4:	729a      	strb	r2, [r3, #10]
 80167b6:	2200      	movs	r2, #0
 80167b8:	72da      	strb	r2, [r3, #11]
 80167ba:	e00f      	b.n	80167dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	895b      	ldrh	r3, [r3, #10]
 80167c0:	2b13      	cmp	r3, #19
 80167c2:	d802      	bhi.n	80167ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167c4:	f06f 0301 	mvn.w	r3, #1
 80167c8:	e020      	b.n	801680c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	691b      	ldr	r3, [r3, #16]
 80167d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80167d6:	f107 0314 	add.w	r3, r7, #20
 80167da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80167dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00c      	beq.n	80167fe <ip4_output_if_src+0x12e>
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	891a      	ldrh	r2, [r3, #8]
 80167e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d906      	bls.n	80167fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80167f4:	68f8      	ldr	r0, [r7, #12]
 80167f6:	f000 fd53 	bl	80172a0 <ip4_frag>
 80167fa:	4603      	mov	r3, r0
 80167fc:	e006      	b.n	801680c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80167fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016800:	695b      	ldr	r3, [r3, #20]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	68f9      	ldr	r1, [r7, #12]
 8016806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016808:	4798      	blx	r3
 801680a:	4603      	mov	r3, r0
}
 801680c:	4618      	mov	r0, r3
 801680e:	3720      	adds	r7, #32
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}
 8016814:	0801dce8 	.word	0x0801dce8
 8016818:	0801dd1c 	.word	0x0801dd1c
 801681c:	0801dd28 	.word	0x0801dd28
 8016820:	0801dd50 	.word	0x0801dd50
 8016824:	20011cfe 	.word	0x20011cfe
 8016828:	0801e22c 	.word	0x0801e22c

0801682c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801682c:	b480      	push	{r7}
 801682e:	b085      	sub	sp, #20
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016840:	d002      	beq.n	8016848 <ip4_addr_isbroadcast_u32+0x1c>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d101      	bne.n	801684c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016848:	2301      	movs	r3, #1
 801684a:	e02a      	b.n	80168a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016852:	f003 0302 	and.w	r3, r3, #2
 8016856:	2b00      	cmp	r3, #0
 8016858:	d101      	bne.n	801685e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801685a:	2300      	movs	r3, #0
 801685c:	e021      	b.n	80168a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	3304      	adds	r3, #4
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	429a      	cmp	r2, r3
 8016868:	d101      	bne.n	801686e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801686a:	2300      	movs	r3, #0
 801686c:	e019      	b.n	80168a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801686e:	68fa      	ldr	r2, [r7, #12]
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	3304      	adds	r3, #4
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	405a      	eors	r2, r3
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	3308      	adds	r3, #8
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	4013      	ands	r3, r2
 8016880:	2b00      	cmp	r3, #0
 8016882:	d10d      	bne.n	80168a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	3308      	adds	r3, #8
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	43da      	mvns	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	3308      	adds	r3, #8
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016898:	429a      	cmp	r2, r3
 801689a:	d101      	bne.n	80168a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801689c:	2301      	movs	r3, #1
 801689e:	e000      	b.n	80168a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80168a0:	2300      	movs	r3, #0
  }
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3714      	adds	r7, #20
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr
	...

080168b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80168b6:	2300      	movs	r3, #0
 80168b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80168ba:	4b12      	ldr	r3, [pc, #72]	; (8016904 <ip_reass_tmr+0x54>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80168c0:	e018      	b.n	80168f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	7fdb      	ldrb	r3, [r3, #31]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d00b      	beq.n	80168e2 <ip_reass_tmr+0x32>
      r->timer--;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	7fdb      	ldrb	r3, [r3, #31]
 80168ce:	3b01      	subs	r3, #1
 80168d0:	b2da      	uxtb	r2, r3
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	60fb      	str	r3, [r7, #12]
 80168e0:	e008      	b.n	80168f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80168ec:	68b9      	ldr	r1, [r7, #8]
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 f80a 	bl	8016908 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d1e3      	bne.n	80168c2 <ip_reass_tmr+0x12>
    }
  }
}
 80168fa:	bf00      	nop
 80168fc:	bf00      	nop
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	20011d00 	.word	0x20011d00

08016908 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b088      	sub	sp, #32
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
 8016910:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016912:	2300      	movs	r3, #0
 8016914:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016916:	683a      	ldr	r2, [r7, #0]
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	429a      	cmp	r2, r3
 801691c:	d105      	bne.n	801692a <ip_reass_free_complete_datagram+0x22>
 801691e:	4b45      	ldr	r3, [pc, #276]	; (8016a34 <ip_reass_free_complete_datagram+0x12c>)
 8016920:	22ab      	movs	r2, #171	; 0xab
 8016922:	4945      	ldr	r1, [pc, #276]	; (8016a38 <ip_reass_free_complete_datagram+0x130>)
 8016924:	4845      	ldr	r0, [pc, #276]	; (8016a3c <ip_reass_free_complete_datagram+0x134>)
 8016926:	f001 fa83 	bl	8017e30 <iprintf>
  if (prev != NULL) {
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d00a      	beq.n	8016946 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	687a      	ldr	r2, [r7, #4]
 8016936:	429a      	cmp	r2, r3
 8016938:	d005      	beq.n	8016946 <ip_reass_free_complete_datagram+0x3e>
 801693a:	4b3e      	ldr	r3, [pc, #248]	; (8016a34 <ip_reass_free_complete_datagram+0x12c>)
 801693c:	22ad      	movs	r2, #173	; 0xad
 801693e:	4940      	ldr	r1, [pc, #256]	; (8016a40 <ip_reass_free_complete_datagram+0x138>)
 8016940:	483e      	ldr	r0, [pc, #248]	; (8016a3c <ip_reass_free_complete_datagram+0x134>)
 8016942:	f001 fa75 	bl	8017e30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	889b      	ldrh	r3, [r3, #4]
 8016952:	b29b      	uxth	r3, r3
 8016954:	2b00      	cmp	r3, #0
 8016956:	d12a      	bne.n	80169ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	6858      	ldr	r0, [r3, #4]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	3308      	adds	r3, #8
 801696e:	2214      	movs	r2, #20
 8016970:	4619      	mov	r1, r3
 8016972:	f001 f998 	bl	8017ca6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016976:	2101      	movs	r1, #1
 8016978:	69b8      	ldr	r0, [r7, #24]
 801697a:	f7ff fc51 	bl	8016220 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801697e:	69b8      	ldr	r0, [r7, #24]
 8016980:	f7f7 ff72 	bl	800e868 <pbuf_clen>
 8016984:	4603      	mov	r3, r0
 8016986:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016988:	8bfa      	ldrh	r2, [r7, #30]
 801698a:	8a7b      	ldrh	r3, [r7, #18]
 801698c:	4413      	add	r3, r2
 801698e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016992:	db05      	blt.n	80169a0 <ip_reass_free_complete_datagram+0x98>
 8016994:	4b27      	ldr	r3, [pc, #156]	; (8016a34 <ip_reass_free_complete_datagram+0x12c>)
 8016996:	22bc      	movs	r2, #188	; 0xbc
 8016998:	492a      	ldr	r1, [pc, #168]	; (8016a44 <ip_reass_free_complete_datagram+0x13c>)
 801699a:	4828      	ldr	r0, [pc, #160]	; (8016a3c <ip_reass_free_complete_datagram+0x134>)
 801699c:	f001 fa48 	bl	8017e30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169a0:	8bfa      	ldrh	r2, [r7, #30]
 80169a2:	8a7b      	ldrh	r3, [r7, #18]
 80169a4:	4413      	add	r3, r2
 80169a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80169a8:	69b8      	ldr	r0, [r7, #24]
 80169aa:	f7f7 fecf 	bl	800e74c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80169b4:	e01f      	b.n	80169f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80169b6:	69bb      	ldr	r3, [r7, #24]
 80169b8:	685b      	ldr	r3, [r3, #4]
 80169ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 80169bc:	69bb      	ldr	r3, [r7, #24]
 80169be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80169c6:	68f8      	ldr	r0, [r7, #12]
 80169c8:	f7f7 ff4e 	bl	800e868 <pbuf_clen>
 80169cc:	4603      	mov	r3, r0
 80169ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80169d0:	8bfa      	ldrh	r2, [r7, #30]
 80169d2:	8a7b      	ldrh	r3, [r7, #18]
 80169d4:	4413      	add	r3, r2
 80169d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169da:	db05      	blt.n	80169e8 <ip_reass_free_complete_datagram+0xe0>
 80169dc:	4b15      	ldr	r3, [pc, #84]	; (8016a34 <ip_reass_free_complete_datagram+0x12c>)
 80169de:	22cc      	movs	r2, #204	; 0xcc
 80169e0:	4918      	ldr	r1, [pc, #96]	; (8016a44 <ip_reass_free_complete_datagram+0x13c>)
 80169e2:	4816      	ldr	r0, [pc, #88]	; (8016a3c <ip_reass_free_complete_datagram+0x134>)
 80169e4:	f001 fa24 	bl	8017e30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169e8:	8bfa      	ldrh	r2, [r7, #30]
 80169ea:	8a7b      	ldrh	r3, [r7, #18]
 80169ec:	4413      	add	r3, r2
 80169ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f7f7 feab 	bl	800e74c <pbuf_free>
  while (p != NULL) {
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d1dc      	bne.n	80169b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80169fc:	6839      	ldr	r1, [r7, #0]
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f000 f8c2 	bl	8016b88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016a04:	4b10      	ldr	r3, [pc, #64]	; (8016a48 <ip_reass_free_complete_datagram+0x140>)
 8016a06:	881b      	ldrh	r3, [r3, #0]
 8016a08:	8bfa      	ldrh	r2, [r7, #30]
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	d905      	bls.n	8016a1a <ip_reass_free_complete_datagram+0x112>
 8016a0e:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <ip_reass_free_complete_datagram+0x12c>)
 8016a10:	22d2      	movs	r2, #210	; 0xd2
 8016a12:	490e      	ldr	r1, [pc, #56]	; (8016a4c <ip_reass_free_complete_datagram+0x144>)
 8016a14:	4809      	ldr	r0, [pc, #36]	; (8016a3c <ip_reass_free_complete_datagram+0x134>)
 8016a16:	f001 fa0b 	bl	8017e30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016a1a:	4b0b      	ldr	r3, [pc, #44]	; (8016a48 <ip_reass_free_complete_datagram+0x140>)
 8016a1c:	881a      	ldrh	r2, [r3, #0]
 8016a1e:	8bfb      	ldrh	r3, [r7, #30]
 8016a20:	1ad3      	subs	r3, r2, r3
 8016a22:	b29a      	uxth	r2, r3
 8016a24:	4b08      	ldr	r3, [pc, #32]	; (8016a48 <ip_reass_free_complete_datagram+0x140>)
 8016a26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016a28:	8bfb      	ldrh	r3, [r7, #30]
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3720      	adds	r7, #32
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	0801dd80 	.word	0x0801dd80
 8016a38:	0801ddbc 	.word	0x0801ddbc
 8016a3c:	0801ddc8 	.word	0x0801ddc8
 8016a40:	0801ddf0 	.word	0x0801ddf0
 8016a44:	0801de04 	.word	0x0801de04
 8016a48:	20011d04 	.word	0x20011d04
 8016a4c:	0801de24 	.word	0x0801de24

08016a50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b08a      	sub	sp, #40	; 0x28
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016a62:	2300      	movs	r3, #0
 8016a64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016a66:	2300      	movs	r3, #0
 8016a68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016a6e:	4b28      	ldr	r3, [pc, #160]	; (8016b10 <ip_reass_remove_oldest_datagram+0xc0>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016a74:	e030      	b.n	8016ad8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a78:	695a      	ldr	r2, [r3, #20]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	68db      	ldr	r3, [r3, #12]
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d10c      	bne.n	8016a9c <ip_reass_remove_oldest_datagram+0x4c>
 8016a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a84:	699a      	ldr	r2, [r3, #24]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	691b      	ldr	r3, [r3, #16]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d106      	bne.n	8016a9c <ip_reass_remove_oldest_datagram+0x4c>
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a90:	899a      	ldrh	r2, [r3, #12]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	889b      	ldrh	r3, [r3, #4]
 8016a96:	b29b      	uxth	r3, r3
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d014      	beq.n	8016ac6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016aa2:	6a3b      	ldr	r3, [r7, #32]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d104      	bne.n	8016ab2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aaa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016aac:	69fb      	ldr	r3, [r7, #28]
 8016aae:	61bb      	str	r3, [r7, #24]
 8016ab0:	e009      	b.n	8016ac6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab4:	7fda      	ldrb	r2, [r3, #31]
 8016ab6:	6a3b      	ldr	r3, [r7, #32]
 8016ab8:	7fdb      	ldrb	r3, [r3, #31]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d803      	bhi.n	8016ac6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d001      	beq.n	8016ad2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1cb      	bne.n	8016a76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016ade:	6a3b      	ldr	r3, [r7, #32]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d008      	beq.n	8016af6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016ae4:	69b9      	ldr	r1, [r7, #24]
 8016ae6:	6a38      	ldr	r0, [r7, #32]
 8016ae8:	f7ff ff0e 	bl	8016908 <ip_reass_free_complete_datagram>
 8016aec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016aee:	697a      	ldr	r2, [r7, #20]
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	4413      	add	r3, r2
 8016af4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016af6:	697a      	ldr	r2, [r7, #20]
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	429a      	cmp	r2, r3
 8016afc:	da02      	bge.n	8016b04 <ip_reass_remove_oldest_datagram+0xb4>
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	2b01      	cmp	r3, #1
 8016b02:	dcac      	bgt.n	8016a5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016b04:	697b      	ldr	r3, [r7, #20]
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3728      	adds	r7, #40	; 0x28
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	20011d00 	.word	0x20011d00

08016b14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b1e:	2003      	movs	r0, #3
 8016b20:	f7f6 fefe 	bl	800d920 <memp_malloc>
 8016b24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d110      	bne.n	8016b4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016b2c:	6839      	ldr	r1, [r7, #0]
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f7ff ff8e 	bl	8016a50 <ip_reass_remove_oldest_datagram>
 8016b34:	4602      	mov	r2, r0
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	4293      	cmp	r3, r2
 8016b3a:	dc03      	bgt.n	8016b44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b3c:	2003      	movs	r0, #3
 8016b3e:	f7f6 feef 	bl	800d920 <memp_malloc>
 8016b42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d101      	bne.n	8016b4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	e016      	b.n	8016b7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b4e:	2220      	movs	r2, #32
 8016b50:	2100      	movs	r1, #0
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f001 f8cf 	bl	8017cf6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	220f      	movs	r2, #15
 8016b5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b5e:	4b09      	ldr	r3, [pc, #36]	; (8016b84 <ip_reass_enqueue_new_datagram+0x70>)
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016b66:	4a07      	ldr	r2, [pc, #28]	; (8016b84 <ip_reass_enqueue_new_datagram+0x70>)
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	3308      	adds	r3, #8
 8016b70:	2214      	movs	r2, #20
 8016b72:	6879      	ldr	r1, [r7, #4]
 8016b74:	4618      	mov	r0, r3
 8016b76:	f001 f896 	bl	8017ca6 <memcpy>
  return ipr;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3710      	adds	r7, #16
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}
 8016b84:	20011d00 	.word	0x20011d00

08016b88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016b92:	4b10      	ldr	r3, [pc, #64]	; (8016bd4 <ip_reass_dequeue_datagram+0x4c>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	687a      	ldr	r2, [r7, #4]
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	d104      	bne.n	8016ba6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	4a0c      	ldr	r2, [pc, #48]	; (8016bd4 <ip_reass_dequeue_datagram+0x4c>)
 8016ba2:	6013      	str	r3, [r2, #0]
 8016ba4:	e00d      	b.n	8016bc2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d106      	bne.n	8016bba <ip_reass_dequeue_datagram+0x32>
 8016bac:	4b0a      	ldr	r3, [pc, #40]	; (8016bd8 <ip_reass_dequeue_datagram+0x50>)
 8016bae:	f240 1245 	movw	r2, #325	; 0x145
 8016bb2:	490a      	ldr	r1, [pc, #40]	; (8016bdc <ip_reass_dequeue_datagram+0x54>)
 8016bb4:	480a      	ldr	r0, [pc, #40]	; (8016be0 <ip_reass_dequeue_datagram+0x58>)
 8016bb6:	f001 f93b 	bl	8017e30 <iprintf>
    prev->next = ipr->next;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681a      	ldr	r2, [r3, #0]
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016bc2:	6879      	ldr	r1, [r7, #4]
 8016bc4:	2003      	movs	r0, #3
 8016bc6:	f7f6 ff21 	bl	800da0c <memp_free>
}
 8016bca:	bf00      	nop
 8016bcc:	3708      	adds	r7, #8
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
 8016bd2:	bf00      	nop
 8016bd4:	20011d00 	.word	0x20011d00
 8016bd8:	0801dd80 	.word	0x0801dd80
 8016bdc:	0801de48 	.word	0x0801de48
 8016be0:	0801ddc8 	.word	0x0801ddc8

08016be4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b08c      	sub	sp, #48	; 0x30
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	60f8      	str	r0, [r7, #12]
 8016bec:	60b9      	str	r1, [r7, #8]
 8016bee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	885b      	ldrh	r3, [r3, #2]
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7f6 f89b 	bl	800cd40 <lwip_htons>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	781b      	ldrb	r3, [r3, #0]
 8016c12:	f003 030f 	and.w	r3, r3, #15
 8016c16:	b2db      	uxtb	r3, r3
 8016c18:	009b      	lsls	r3, r3, #2
 8016c1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016c1c:	7e7b      	ldrb	r3, [r7, #25]
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	8b7a      	ldrh	r2, [r7, #26]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d202      	bcs.n	8016c2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c2a:	e135      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016c2c:	7e7b      	ldrb	r3, [r7, #25]
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	8b7a      	ldrh	r2, [r7, #26]
 8016c32:	1ad3      	subs	r3, r2, r3
 8016c34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	88db      	ldrh	r3, [r3, #6]
 8016c3a:	b29b      	uxth	r3, r3
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7f6 f87f 	bl	800cd40 <lwip_htons>
 8016c42:	4603      	mov	r3, r0
 8016c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	00db      	lsls	r3, r3, #3
 8016c4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c56:	2200      	movs	r2, #0
 8016c58:	701a      	strb	r2, [r3, #0]
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	705a      	strb	r2, [r3, #1]
 8016c5e:	2200      	movs	r2, #0
 8016c60:	709a      	strb	r2, [r3, #2]
 8016c62:	2200      	movs	r2, #0
 8016c64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c68:	8afa      	ldrh	r2, [r7, #22]
 8016c6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016c6c:	8afa      	ldrh	r2, [r7, #22]
 8016c6e:	8b7b      	ldrh	r3, [r7, #26]
 8016c70:	4413      	add	r3, r2
 8016c72:	b29a      	uxth	r2, r3
 8016c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c7a:	88db      	ldrh	r3, [r3, #6]
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	8afa      	ldrh	r2, [r7, #22]
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d902      	bls.n	8016c8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c88:	e106      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8016c90:	e068      	b.n	8016d64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c9a:	889b      	ldrh	r3, [r3, #4]
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	693b      	ldr	r3, [r7, #16]
 8016ca0:	889b      	ldrh	r3, [r3, #4]
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d235      	bcs.n	8016d14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d020      	beq.n	8016cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cb6:	889b      	ldrh	r3, [r3, #4]
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cbc:	88db      	ldrh	r3, [r3, #6]
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d307      	bcc.n	8016cd4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cc6:	88db      	ldrh	r3, [r3, #6]
 8016cc8:	b29a      	uxth	r2, r3
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	889b      	ldrh	r3, [r3, #4]
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	429a      	cmp	r2, r3
 8016cd2:	d902      	bls.n	8016cda <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cd8:	e0de      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cdc:	68ba      	ldr	r2, [r7, #8]
 8016cde:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce2:	88db      	ldrh	r3, [r3, #6]
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce8:	889b      	ldrh	r3, [r3, #4]
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d03d      	beq.n	8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016cf4:	e03a      	b.n	8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf8:	88db      	ldrh	r3, [r3, #6]
 8016cfa:	b29a      	uxth	r2, r3
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	889b      	ldrh	r3, [r3, #4]
 8016d00:	b29b      	uxth	r3, r3
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d902      	bls.n	8016d0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d0a:	e0c5      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	68ba      	ldr	r2, [r7, #8]
 8016d10:	605a      	str	r2, [r3, #4]
      break;
 8016d12:	e02b      	b.n	8016d6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d16:	889b      	ldrh	r3, [r3, #4]
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	889b      	ldrh	r3, [r3, #4]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	429a      	cmp	r2, r3
 8016d22:	d102      	bne.n	8016d2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d28:	e0b6      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d2c:	889b      	ldrh	r3, [r3, #4]
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	88db      	ldrh	r3, [r3, #6]
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d202      	bcs.n	8016d40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d3e:	e0ab      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d009      	beq.n	8016d5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d48:	88db      	ldrh	r3, [r3, #6]
 8016d4a:	b29a      	uxth	r2, r3
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	889b      	ldrh	r3, [r3, #4]
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d001      	beq.n	8016d5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d56:	2300      	movs	r3, #0
 8016d58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d193      	bne.n	8016c92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016d6a:	e000      	b.n	8016d6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016d6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d12d      	bne.n	8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d01c      	beq.n	8016db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d7c:	88db      	ldrh	r3, [r3, #6]
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d82:	889b      	ldrh	r3, [r3, #4]
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	429a      	cmp	r2, r3
 8016d88:	d906      	bls.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016d8a:	4b45      	ldr	r3, [pc, #276]	; (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016d90:	4944      	ldr	r1, [pc, #272]	; (8016ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d92:	4845      	ldr	r0, [pc, #276]	; (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d94:	f001 f84c 	bl	8017e30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9a:	68ba      	ldr	r2, [r7, #8]
 8016d9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da0:	88db      	ldrh	r3, [r3, #6]
 8016da2:	b29a      	uxth	r2, r3
 8016da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da6:	889b      	ldrh	r3, [r3, #4]
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d010      	beq.n	8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016dae:	2300      	movs	r3, #0
 8016db0:	623b      	str	r3, [r7, #32]
 8016db2:	e00d      	b.n	8016dd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d006      	beq.n	8016dca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016dbc:	4b38      	ldr	r3, [pc, #224]	; (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016dbe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016dc2:	493a      	ldr	r1, [pc, #232]	; (8016eac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016dc4:	4838      	ldr	r0, [pc, #224]	; (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dc6:	f001 f833 	bl	8017e30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	68ba      	ldr	r2, [r7, #8]
 8016dce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d105      	bne.n	8016de2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	7f9b      	ldrb	r3, [r3, #30]
 8016dda:	f003 0301 	and.w	r3, r3, #1
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d059      	beq.n	8016e96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016de2:	6a3b      	ldr	r3, [r7, #32]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d04f      	beq.n	8016e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d006      	beq.n	8016dfe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	889b      	ldrh	r3, [r3, #4]
 8016df8:	b29b      	uxth	r3, r3
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d002      	beq.n	8016e04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	623b      	str	r3, [r7, #32]
 8016e02:	e041      	b.n	8016e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e0e:	e012      	b.n	8016e36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e12:	685b      	ldr	r3, [r3, #4]
 8016e14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e18:	88db      	ldrh	r3, [r3, #6]
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1e:	889b      	ldrh	r3, [r3, #4]
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	429a      	cmp	r2, r3
 8016e24:	d002      	beq.n	8016e2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	623b      	str	r3, [r7, #32]
            break;
 8016e2a:	e007      	b.n	8016e3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d1e9      	bne.n	8016e10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e3c:	6a3b      	ldr	r3, [r7, #32]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d022      	beq.n	8016e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d106      	bne.n	8016e58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016e4a:	4b15      	ldr	r3, [pc, #84]	; (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e4c:	f240 12df 	movw	r2, #479	; 0x1df
 8016e50:	4917      	ldr	r1, [pc, #92]	; (8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e52:	4815      	ldr	r0, [pc, #84]	; (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e54:	f000 ffec 	bl	8017e30 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	685b      	ldr	r3, [r3, #4]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d106      	bne.n	8016e72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016e64:	4b0e      	ldr	r3, [pc, #56]	; (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016e6a:	4911      	ldr	r1, [pc, #68]	; (8016eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e6c:	480e      	ldr	r0, [pc, #56]	; (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e6e:	f000 ffdf 	bl	8017e30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d006      	beq.n	8016e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016e7a:	4b09      	ldr	r3, [pc, #36]	; (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016e80:	490c      	ldr	r1, [pc, #48]	; (8016eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016e82:	4809      	ldr	r0, [pc, #36]	; (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e84:	f000 ffd4 	bl	8017e30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016e88:	6a3b      	ldr	r3, [r7, #32]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	bf14      	ite	ne
 8016e8e:	2301      	movne	r3, #1
 8016e90:	2300      	moveq	r3, #0
 8016e92:	b2db      	uxtb	r3, r3
 8016e94:	e000      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016e96:	2300      	movs	r3, #0
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	3730      	adds	r7, #48	; 0x30
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}
 8016ea0:	0801dd80 	.word	0x0801dd80
 8016ea4:	0801de64 	.word	0x0801de64
 8016ea8:	0801ddc8 	.word	0x0801ddc8
 8016eac:	0801de84 	.word	0x0801de84
 8016eb0:	0801debc 	.word	0x0801debc
 8016eb4:	0801decc 	.word	0x0801decc

08016eb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b08e      	sub	sp, #56	; 0x38
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	f003 030f 	and.w	r3, r3, #15
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	b2db      	uxtb	r3, r3
 8016ed4:	2b14      	cmp	r3, #20
 8016ed6:	f040 8171 	bne.w	80171bc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016edc:	88db      	ldrh	r3, [r3, #6]
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7f5 ff2d 	bl	800cd40 <lwip_htons>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016eec:	b29b      	uxth	r3, r3
 8016eee:	00db      	lsls	r3, r3, #3
 8016ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef4:	885b      	ldrh	r3, [r3, #2]
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	4618      	mov	r0, r3
 8016efa:	f7f5 ff21 	bl	800cd40 <lwip_htons>
 8016efe:	4603      	mov	r3, r0
 8016f00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	f003 030f 	and.w	r3, r3, #15
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	009b      	lsls	r3, r3, #2
 8016f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	f0c0 8150 	bcc.w	80171c0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016f28:	1ad3      	subs	r3, r2, r3
 8016f2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016f2c:	6878      	ldr	r0, [r7, #4]
 8016f2e:	f7f7 fc9b 	bl	800e868 <pbuf_clen>
 8016f32:	4603      	mov	r3, r0
 8016f34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016f36:	4b8c      	ldr	r3, [pc, #560]	; (8017168 <ip4_reass+0x2b0>)
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	461a      	mov	r2, r3
 8016f3c:	8c3b      	ldrh	r3, [r7, #32]
 8016f3e:	4413      	add	r3, r2
 8016f40:	2b0a      	cmp	r3, #10
 8016f42:	dd10      	ble.n	8016f66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f44:	8c3b      	ldrh	r3, [r7, #32]
 8016f46:	4619      	mov	r1, r3
 8016f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016f4a:	f7ff fd81 	bl	8016a50 <ip_reass_remove_oldest_datagram>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	f000 8137 	beq.w	80171c4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f56:	4b84      	ldr	r3, [pc, #528]	; (8017168 <ip4_reass+0x2b0>)
 8016f58:	881b      	ldrh	r3, [r3, #0]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	8c3b      	ldrh	r3, [r7, #32]
 8016f5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f60:	2b0a      	cmp	r3, #10
 8016f62:	f300 812f 	bgt.w	80171c4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f66:	4b81      	ldr	r3, [pc, #516]	; (801716c <ip4_reass+0x2b4>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8016f6c:	e015      	b.n	8016f9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f70:	695a      	ldr	r2, [r3, #20]
 8016f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d10c      	bne.n	8016f94 <ip4_reass+0xdc>
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f7c:	699a      	ldr	r2, [r3, #24]
 8016f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f80:	691b      	ldr	r3, [r3, #16]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	d106      	bne.n	8016f94 <ip4_reass+0xdc>
 8016f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f88:	899a      	ldrh	r2, [r3, #12]
 8016f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8c:	889b      	ldrh	r3, [r3, #4]
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d006      	beq.n	8016fa2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	633b      	str	r3, [r7, #48]	; 0x30
 8016f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d1e6      	bne.n	8016f6e <ip4_reass+0xb6>
 8016fa0:	e000      	b.n	8016fa4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016fa2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d109      	bne.n	8016fbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016faa:	8c3b      	ldrh	r3, [r7, #32]
 8016fac:	4619      	mov	r1, r3
 8016fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fb0:	f7ff fdb0 	bl	8016b14 <ip_reass_enqueue_new_datagram>
 8016fb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d11c      	bne.n	8016ff6 <ip4_reass+0x13e>
      goto nullreturn;
 8016fbc:	e105      	b.n	80171ca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc0:	88db      	ldrh	r3, [r3, #6]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7f5 febb 	bl	800cd40 <lwip_htons>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d110      	bne.n	8016ff6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd6:	89db      	ldrh	r3, [r3, #14]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f5 feb1 	bl	800cd40 <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d006      	beq.n	8016ff6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fea:	3308      	adds	r3, #8
 8016fec:	2214      	movs	r2, #20
 8016fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f000 fe58 	bl	8017ca6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff8:	88db      	ldrh	r3, [r3, #6]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	f003 0320 	and.w	r3, r3, #32
 8017000:	2b00      	cmp	r3, #0
 8017002:	bf0c      	ite	eq
 8017004:	2301      	moveq	r3, #1
 8017006:	2300      	movne	r3, #0
 8017008:	b2db      	uxtb	r3, r3
 801700a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801700c:	69fb      	ldr	r3, [r7, #28]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d00e      	beq.n	8017030 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017012:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017016:	4413      	add	r3, r2
 8017018:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801701a:	8b7a      	ldrh	r2, [r7, #26]
 801701c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801701e:	429a      	cmp	r2, r3
 8017020:	f0c0 80a0 	bcc.w	8017164 <ip4_reass+0x2ac>
 8017024:	8b7b      	ldrh	r3, [r7, #26]
 8017026:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801702a:	4293      	cmp	r3, r2
 801702c:	f200 809a 	bhi.w	8017164 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017030:	69fa      	ldr	r2, [r7, #28]
 8017032:	6879      	ldr	r1, [r7, #4]
 8017034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017036:	f7ff fdd5 	bl	8016be4 <ip_reass_chain_frag_into_datagram_and_validate>
 801703a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017042:	f000 809b 	beq.w	801717c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017046:	4b48      	ldr	r3, [pc, #288]	; (8017168 <ip4_reass+0x2b0>)
 8017048:	881a      	ldrh	r2, [r3, #0]
 801704a:	8c3b      	ldrh	r3, [r7, #32]
 801704c:	4413      	add	r3, r2
 801704e:	b29a      	uxth	r2, r3
 8017050:	4b45      	ldr	r3, [pc, #276]	; (8017168 <ip4_reass+0x2b0>)
 8017052:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d00d      	beq.n	8017076 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801705a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801705c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801705e:	4413      	add	r3, r2
 8017060:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017064:	8a7a      	ldrh	r2, [r7, #18]
 8017066:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706a:	7f9b      	ldrb	r3, [r3, #30]
 801706c:	f043 0301 	orr.w	r3, r3, #1
 8017070:	b2da      	uxtb	r2, r3
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	2b01      	cmp	r3, #1
 801707a:	d171      	bne.n	8017160 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707e:	8b9b      	ldrh	r3, [r3, #28]
 8017080:	3314      	adds	r3, #20
 8017082:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	685b      	ldr	r3, [r3, #4]
 8017094:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017098:	3308      	adds	r3, #8
 801709a:	2214      	movs	r2, #20
 801709c:	4619      	mov	r1, r3
 801709e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170a0:	f000 fe01 	bl	8017ca6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80170a4:	8a3b      	ldrh	r3, [r7, #16]
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7f5 fe4a 	bl	800cd40 <lwip_htons>
 80170ac:	4603      	mov	r3, r0
 80170ae:	461a      	mov	r2, r3
 80170b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80170b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b6:	2200      	movs	r2, #0
 80170b8:	719a      	strb	r2, [r3, #6]
 80170ba:	2200      	movs	r2, #0
 80170bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80170be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c0:	2200      	movs	r2, #0
 80170c2:	729a      	strb	r2, [r3, #10]
 80170c4:	2200      	movs	r2, #0
 80170c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80170c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ca:	685b      	ldr	r3, [r3, #4]
 80170cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80170ce:	e00d      	b.n	80170ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80170d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170d2:	685b      	ldr	r3, [r3, #4]
 80170d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80170d6:	2114      	movs	r1, #20
 80170d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80170da:	f7f7 fab1 	bl	800e640 <pbuf_remove_header>
      pbuf_cat(p, r);
 80170de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f7f7 fc01 	bl	800e8e8 <pbuf_cat>
      r = iprh->next_pbuf;
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80170ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d1ee      	bne.n	80170d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80170f2:	4b1e      	ldr	r3, [pc, #120]	; (801716c <ip4_reass+0x2b4>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d102      	bne.n	8017102 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80170fc:	2300      	movs	r3, #0
 80170fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017100:	e010      	b.n	8017124 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017102:	4b1a      	ldr	r3, [pc, #104]	; (801716c <ip4_reass+0x2b4>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017108:	e007      	b.n	801711a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017110:	429a      	cmp	r2, r3
 8017112:	d006      	beq.n	8017122 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	62fb      	str	r3, [r7, #44]	; 0x2c
 801711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711c:	2b00      	cmp	r3, #0
 801711e:	d1f4      	bne.n	801710a <ip4_reass+0x252>
 8017120:	e000      	b.n	8017124 <ip4_reass+0x26c>
          break;
 8017122:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017126:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017128:	f7ff fd2e 	bl	8016b88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f7f7 fb9b 	bl	800e868 <pbuf_clen>
 8017132:	4603      	mov	r3, r0
 8017134:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017136:	4b0c      	ldr	r3, [pc, #48]	; (8017168 <ip4_reass+0x2b0>)
 8017138:	881b      	ldrh	r3, [r3, #0]
 801713a:	8c3a      	ldrh	r2, [r7, #32]
 801713c:	429a      	cmp	r2, r3
 801713e:	d906      	bls.n	801714e <ip4_reass+0x296>
 8017140:	4b0b      	ldr	r3, [pc, #44]	; (8017170 <ip4_reass+0x2b8>)
 8017142:	f240 229b 	movw	r2, #667	; 0x29b
 8017146:	490b      	ldr	r1, [pc, #44]	; (8017174 <ip4_reass+0x2bc>)
 8017148:	480b      	ldr	r0, [pc, #44]	; (8017178 <ip4_reass+0x2c0>)
 801714a:	f000 fe71 	bl	8017e30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801714e:	4b06      	ldr	r3, [pc, #24]	; (8017168 <ip4_reass+0x2b0>)
 8017150:	881a      	ldrh	r2, [r3, #0]
 8017152:	8c3b      	ldrh	r3, [r7, #32]
 8017154:	1ad3      	subs	r3, r2, r3
 8017156:	b29a      	uxth	r2, r3
 8017158:	4b03      	ldr	r3, [pc, #12]	; (8017168 <ip4_reass+0x2b0>)
 801715a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	e038      	b.n	80171d2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017160:	2300      	movs	r3, #0
 8017162:	e036      	b.n	80171d2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017164:	bf00      	nop
 8017166:	e00a      	b.n	801717e <ip4_reass+0x2c6>
 8017168:	20011d04 	.word	0x20011d04
 801716c:	20011d00 	.word	0x20011d00
 8017170:	0801dd80 	.word	0x0801dd80
 8017174:	0801def0 	.word	0x0801def0
 8017178:	0801ddc8 	.word	0x0801ddc8
    goto nullreturn_ipr;
 801717c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017180:	2b00      	cmp	r3, #0
 8017182:	d106      	bne.n	8017192 <ip4_reass+0x2da>
 8017184:	4b15      	ldr	r3, [pc, #84]	; (80171dc <ip4_reass+0x324>)
 8017186:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801718a:	4915      	ldr	r1, [pc, #84]	; (80171e0 <ip4_reass+0x328>)
 801718c:	4815      	ldr	r0, [pc, #84]	; (80171e4 <ip4_reass+0x32c>)
 801718e:	f000 fe4f 	bl	8017e30 <iprintf>
  if (ipr->p == NULL) {
 8017192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017194:	685b      	ldr	r3, [r3, #4]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d116      	bne.n	80171c8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801719a:	4b13      	ldr	r3, [pc, #76]	; (80171e8 <ip4_reass+0x330>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d006      	beq.n	80171b2 <ip4_reass+0x2fa>
 80171a4:	4b0d      	ldr	r3, [pc, #52]	; (80171dc <ip4_reass+0x324>)
 80171a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80171aa:	4910      	ldr	r1, [pc, #64]	; (80171ec <ip4_reass+0x334>)
 80171ac:	480d      	ldr	r0, [pc, #52]	; (80171e4 <ip4_reass+0x32c>)
 80171ae:	f000 fe3f 	bl	8017e30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80171b2:	2100      	movs	r1, #0
 80171b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171b6:	f7ff fce7 	bl	8016b88 <ip_reass_dequeue_datagram>
 80171ba:	e006      	b.n	80171ca <ip4_reass+0x312>
    goto nullreturn;
 80171bc:	bf00      	nop
 80171be:	e004      	b.n	80171ca <ip4_reass+0x312>
    goto nullreturn;
 80171c0:	bf00      	nop
 80171c2:	e002      	b.n	80171ca <ip4_reass+0x312>
      goto nullreturn;
 80171c4:	bf00      	nop
 80171c6:	e000      	b.n	80171ca <ip4_reass+0x312>
  }

nullreturn:
 80171c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7f7 fabe 	bl	800e74c <pbuf_free>
  return NULL;
 80171d0:	2300      	movs	r3, #0
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	3738      	adds	r7, #56	; 0x38
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	bf00      	nop
 80171dc:	0801dd80 	.word	0x0801dd80
 80171e0:	0801df0c 	.word	0x0801df0c
 80171e4:	0801ddc8 	.word	0x0801ddc8
 80171e8:	20011d00 	.word	0x20011d00
 80171ec:	0801df18 	.word	0x0801df18

080171f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80171f4:	2004      	movs	r0, #4
 80171f6:	f7f6 fb93 	bl	800d920 <memp_malloc>
 80171fa:	4603      	mov	r3, r0
}
 80171fc:	4618      	mov	r0, r3
 80171fe:	bd80      	pop	{r7, pc}

08017200 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d106      	bne.n	801721c <ip_frag_free_pbuf_custom_ref+0x1c>
 801720e:	4b07      	ldr	r3, [pc, #28]	; (801722c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017210:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017214:	4906      	ldr	r1, [pc, #24]	; (8017230 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017216:	4807      	ldr	r0, [pc, #28]	; (8017234 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017218:	f000 fe0a 	bl	8017e30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801721c:	6879      	ldr	r1, [r7, #4]
 801721e:	2004      	movs	r0, #4
 8017220:	f7f6 fbf4 	bl	800da0c <memp_free>
}
 8017224:	bf00      	nop
 8017226:	3708      	adds	r7, #8
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}
 801722c:	0801dd80 	.word	0x0801dd80
 8017230:	0801df38 	.word	0x0801df38
 8017234:	0801ddc8 	.word	0x0801ddc8

08017238 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b084      	sub	sp, #16
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d106      	bne.n	8017258 <ipfrag_free_pbuf_custom+0x20>
 801724a:	4b11      	ldr	r3, [pc, #68]	; (8017290 <ipfrag_free_pbuf_custom+0x58>)
 801724c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017250:	4910      	ldr	r1, [pc, #64]	; (8017294 <ipfrag_free_pbuf_custom+0x5c>)
 8017252:	4811      	ldr	r0, [pc, #68]	; (8017298 <ipfrag_free_pbuf_custom+0x60>)
 8017254:	f000 fdec 	bl	8017e30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	429a      	cmp	r2, r3
 801725e:	d006      	beq.n	801726e <ipfrag_free_pbuf_custom+0x36>
 8017260:	4b0b      	ldr	r3, [pc, #44]	; (8017290 <ipfrag_free_pbuf_custom+0x58>)
 8017262:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017266:	490d      	ldr	r1, [pc, #52]	; (801729c <ipfrag_free_pbuf_custom+0x64>)
 8017268:	480b      	ldr	r0, [pc, #44]	; (8017298 <ipfrag_free_pbuf_custom+0x60>)
 801726a:	f000 fde1 	bl	8017e30 <iprintf>
  if (pcr->original != NULL) {
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	695b      	ldr	r3, [r3, #20]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d004      	beq.n	8017280 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	695b      	ldr	r3, [r3, #20]
 801727a:	4618      	mov	r0, r3
 801727c:	f7f7 fa66 	bl	800e74c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f7ff ffbd 	bl	8017200 <ip_frag_free_pbuf_custom_ref>
}
 8017286:	bf00      	nop
 8017288:	3710      	adds	r7, #16
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
 801728e:	bf00      	nop
 8017290:	0801dd80 	.word	0x0801dd80
 8017294:	0801df44 	.word	0x0801df44
 8017298:	0801ddc8 	.word	0x0801ddc8
 801729c:	0801df50 	.word	0x0801df50

080172a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b094      	sub	sp, #80	; 0x50
 80172a4:	af02      	add	r7, sp, #8
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80172ac:	2300      	movs	r3, #0
 80172ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80172b6:	3b14      	subs	r3, #20
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	da00      	bge.n	80172be <ip4_frag+0x1e>
 80172bc:	3307      	adds	r3, #7
 80172be:	10db      	asrs	r3, r3, #3
 80172c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80172c2:	2314      	movs	r3, #20
 80172c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	685b      	ldr	r3, [r3, #4]
 80172ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80172cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80172d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	f003 030f 	and.w	r3, r3, #15
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	009b      	lsls	r3, r3, #2
 80172dc:	b2db      	uxtb	r3, r3
 80172de:	2b14      	cmp	r3, #20
 80172e0:	d002      	beq.n	80172e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80172e2:	f06f 0305 	mvn.w	r3, #5
 80172e6:	e110      	b.n	801750a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	895b      	ldrh	r3, [r3, #10]
 80172ec:	2b13      	cmp	r3, #19
 80172ee:	d809      	bhi.n	8017304 <ip4_frag+0x64>
 80172f0:	4b88      	ldr	r3, [pc, #544]	; (8017514 <ip4_frag+0x274>)
 80172f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80172f6:	4988      	ldr	r1, [pc, #544]	; (8017518 <ip4_frag+0x278>)
 80172f8:	4888      	ldr	r0, [pc, #544]	; (801751c <ip4_frag+0x27c>)
 80172fa:	f000 fd99 	bl	8017e30 <iprintf>
 80172fe:	f06f 0305 	mvn.w	r3, #5
 8017302:	e102      	b.n	801750a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017306:	88db      	ldrh	r3, [r3, #6]
 8017308:	b29b      	uxth	r3, r3
 801730a:	4618      	mov	r0, r3
 801730c:	f7f5 fd18 	bl	800cd40 <lwip_htons>
 8017310:	4603      	mov	r3, r0
 8017312:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017314:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017316:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801731a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801731e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017324:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	891b      	ldrh	r3, [r3, #8]
 801732a:	3b14      	subs	r3, #20
 801732c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017330:	e0e1      	b.n	80174f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017332:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017334:	00db      	lsls	r3, r3, #3
 8017336:	b29b      	uxth	r3, r3
 8017338:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801733c:	4293      	cmp	r3, r2
 801733e:	bf28      	it	cs
 8017340:	4613      	movcs	r3, r2
 8017342:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017344:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017348:	2114      	movs	r1, #20
 801734a:	200e      	movs	r0, #14
 801734c:	f7f6 ff1a 	bl	800e184 <pbuf_alloc>
 8017350:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017354:	2b00      	cmp	r3, #0
 8017356:	f000 80d5 	beq.w	8017504 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735c:	895b      	ldrh	r3, [r3, #10]
 801735e:	2b13      	cmp	r3, #19
 8017360:	d806      	bhi.n	8017370 <ip4_frag+0xd0>
 8017362:	4b6c      	ldr	r3, [pc, #432]	; (8017514 <ip4_frag+0x274>)
 8017364:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017368:	496d      	ldr	r1, [pc, #436]	; (8017520 <ip4_frag+0x280>)
 801736a:	486c      	ldr	r0, [pc, #432]	; (801751c <ip4_frag+0x27c>)
 801736c:	f000 fd60 	bl	8017e30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017372:	685b      	ldr	r3, [r3, #4]
 8017374:	2214      	movs	r2, #20
 8017376:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017378:	4618      	mov	r0, r3
 801737a:	f000 fc94 	bl	8017ca6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017380:	685b      	ldr	r3, [r3, #4]
 8017382:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017386:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801738a:	e064      	b.n	8017456 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	895a      	ldrh	r2, [r3, #10]
 8017390:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	895b      	ldrh	r3, [r3, #10]
 801739a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801739c:	429a      	cmp	r2, r3
 801739e:	d906      	bls.n	80173ae <ip4_frag+0x10e>
 80173a0:	4b5c      	ldr	r3, [pc, #368]	; (8017514 <ip4_frag+0x274>)
 80173a2:	f240 322d 	movw	r2, #813	; 0x32d
 80173a6:	495f      	ldr	r1, [pc, #380]	; (8017524 <ip4_frag+0x284>)
 80173a8:	485c      	ldr	r0, [pc, #368]	; (801751c <ip4_frag+0x27c>)
 80173aa:	f000 fd41 	bl	8017e30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80173ae:	8bfa      	ldrh	r2, [r7, #30]
 80173b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80173b4:	4293      	cmp	r3, r2
 80173b6:	bf28      	it	cs
 80173b8:	4613      	movcs	r3, r2
 80173ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80173be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d105      	bne.n	80173d2 <ip4_frag+0x132>
        poff = 0;
 80173c6:	2300      	movs	r3, #0
 80173c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	60fb      	str	r3, [r7, #12]
        continue;
 80173d0:	e041      	b.n	8017456 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80173d2:	f7ff ff0d 	bl	80171f0 <ip_frag_alloc_pbuf_custom_ref>
 80173d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80173d8:	69bb      	ldr	r3, [r7, #24]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d103      	bne.n	80173e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80173de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80173e0:	f7f7 f9b4 	bl	800e74c <pbuf_free>
        goto memerr;
 80173e4:	e08f      	b.n	8017506 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173ee:	4413      	add	r3, r2
 80173f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80173f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80173f8:	9201      	str	r2, [sp, #4]
 80173fa:	9300      	str	r3, [sp, #0]
 80173fc:	4603      	mov	r3, r0
 80173fe:	2241      	movs	r2, #65	; 0x41
 8017400:	2000      	movs	r0, #0
 8017402:	f7f6 ffe9 	bl	800e3d8 <pbuf_alloced_custom>
 8017406:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d106      	bne.n	801741c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801740e:	69b8      	ldr	r0, [r7, #24]
 8017410:	f7ff fef6 	bl	8017200 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017416:	f7f7 f999 	bl	800e74c <pbuf_free>
        goto memerr;
 801741a:	e074      	b.n	8017506 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801741c:	68f8      	ldr	r0, [r7, #12]
 801741e:	f7f7 fa3b 	bl	800e898 <pbuf_ref>
      pcr->original = p;
 8017422:	69bb      	ldr	r3, [r7, #24]
 8017424:	68fa      	ldr	r2, [r7, #12]
 8017426:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017428:	69bb      	ldr	r3, [r7, #24]
 801742a:	4a3f      	ldr	r2, [pc, #252]	; (8017528 <ip4_frag+0x288>)
 801742c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801742e:	6979      	ldr	r1, [r7, #20]
 8017430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017432:	f7f7 fa59 	bl	800e8e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017436:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801743a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801743e:	1ad3      	subs	r3, r2, r3
 8017440:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017444:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017448:	2b00      	cmp	r3, #0
 801744a:	d004      	beq.n	8017456 <ip4_frag+0x1b6>
        poff = 0;
 801744c:	2300      	movs	r3, #0
 801744e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017456:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801745a:	2b00      	cmp	r3, #0
 801745c:	d196      	bne.n	801738c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801745e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017460:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017464:	4413      	add	r3, r2
 8017466:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801746c:	f1a3 0213 	sub.w	r2, r3, #19
 8017470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017474:	429a      	cmp	r2, r3
 8017476:	bfcc      	ite	gt
 8017478:	2301      	movgt	r3, #1
 801747a:	2300      	movle	r3, #0
 801747c:	b2db      	uxtb	r3, r3
 801747e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017480:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017488:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801748a:	6a3b      	ldr	r3, [r7, #32]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d002      	beq.n	8017496 <ip4_frag+0x1f6>
 8017490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017492:	2b00      	cmp	r3, #0
 8017494:	d003      	beq.n	801749e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801749c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801749e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7f5 fc4d 	bl	800cd40 <lwip_htons>
 80174a6:	4603      	mov	r3, r0
 80174a8:	461a      	mov	r2, r3
 80174aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80174ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80174b0:	3314      	adds	r3, #20
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7f5 fc43 	bl	800cd40 <lwip_htons>
 80174ba:	4603      	mov	r3, r0
 80174bc:	461a      	mov	r2, r3
 80174be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80174c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c4:	2200      	movs	r2, #0
 80174c6:	729a      	strb	r2, [r3, #10]
 80174c8:	2200      	movs	r2, #0
 80174ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	695b      	ldr	r3, [r3, #20]
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174d4:	68b8      	ldr	r0, [r7, #8]
 80174d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80174d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174da:	f7f7 f937 	bl	800e74c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80174de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80174e4:	1ad3      	subs	r3, r2, r3
 80174e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80174ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80174ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174f0:	4413      	add	r3, r2
 80174f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80174f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f47f af19 	bne.w	8017332 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017500:	2300      	movs	r3, #0
 8017502:	e002      	b.n	801750a <ip4_frag+0x26a>
      goto memerr;
 8017504:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801750a:	4618      	mov	r0, r3
 801750c:	3748      	adds	r7, #72	; 0x48
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	0801dd80 	.word	0x0801dd80
 8017518:	0801df5c 	.word	0x0801df5c
 801751c:	0801ddc8 	.word	0x0801ddc8
 8017520:	0801df78 	.word	0x0801df78
 8017524:	0801df98 	.word	0x0801df98
 8017528:	08017239 	.word	0x08017239

0801752c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b086      	sub	sp, #24
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017536:	230e      	movs	r3, #14
 8017538:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	895b      	ldrh	r3, [r3, #10]
 801753e:	2b0e      	cmp	r3, #14
 8017540:	d96e      	bls.n	8017620 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	7bdb      	ldrb	r3, [r3, #15]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d106      	bne.n	8017558 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017550:	3301      	adds	r3, #1
 8017552:	b2da      	uxtb	r2, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	7b1a      	ldrb	r2, [r3, #12]
 8017562:	7b5b      	ldrb	r3, [r3, #13]
 8017564:	021b      	lsls	r3, r3, #8
 8017566:	4313      	orrs	r3, r2
 8017568:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 0301 	and.w	r3, r3, #1
 8017572:	2b00      	cmp	r3, #0
 8017574:	d023      	beq.n	80175be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	2b01      	cmp	r3, #1
 801757c:	d10f      	bne.n	801759e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	785b      	ldrb	r3, [r3, #1]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d11b      	bne.n	80175be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017586:	693b      	ldr	r3, [r7, #16]
 8017588:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801758a:	2b5e      	cmp	r3, #94	; 0x5e
 801758c:	d117      	bne.n	80175be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	7b5b      	ldrb	r3, [r3, #13]
 8017592:	f043 0310 	orr.w	r3, r3, #16
 8017596:	b2da      	uxtb	r2, r3
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	735a      	strb	r2, [r3, #13]
 801759c:	e00f      	b.n	80175be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	2206      	movs	r2, #6
 80175a2:	4928      	ldr	r1, [pc, #160]	; (8017644 <ethernet_input+0x118>)
 80175a4:	4618      	mov	r0, r3
 80175a6:	f000 fb6e 	bl	8017c86 <memcmp>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d106      	bne.n	80175be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	7b5b      	ldrb	r3, [r3, #13]
 80175b4:	f043 0308 	orr.w	r3, r3, #8
 80175b8:	b2da      	uxtb	r2, r3
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80175be:	89fb      	ldrh	r3, [r7, #14]
 80175c0:	2b08      	cmp	r3, #8
 80175c2:	d003      	beq.n	80175cc <ethernet_input+0xa0>
 80175c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80175c8:	d014      	beq.n	80175f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80175ca:	e032      	b.n	8017632 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175d2:	f003 0308 	and.w	r3, r3, #8
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d024      	beq.n	8017624 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80175da:	8afb      	ldrh	r3, [r7, #22]
 80175dc:	4619      	mov	r1, r3
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7f7 f82e 	bl	800e640 <pbuf_remove_header>
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d11e      	bne.n	8017628 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80175ea:	6839      	ldr	r1, [r7, #0]
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f7fe ff2b 	bl	8016448 <ip4_input>
      break;
 80175f2:	e013      	b.n	801761c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175fa:	f003 0308 	and.w	r3, r3, #8
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d014      	beq.n	801762c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017602:	8afb      	ldrh	r3, [r7, #22]
 8017604:	4619      	mov	r1, r3
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7f7 f81a 	bl	800e640 <pbuf_remove_header>
 801760c:	4603      	mov	r3, r0
 801760e:	2b00      	cmp	r3, #0
 8017610:	d10e      	bne.n	8017630 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017612:	6839      	ldr	r1, [r7, #0]
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f7fe f8cb 	bl	80157b0 <etharp_input>
      break;
 801761a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801761c:	2300      	movs	r3, #0
 801761e:	e00c      	b.n	801763a <ethernet_input+0x10e>
    goto free_and_return;
 8017620:	bf00      	nop
 8017622:	e006      	b.n	8017632 <ethernet_input+0x106>
        goto free_and_return;
 8017624:	bf00      	nop
 8017626:	e004      	b.n	8017632 <ethernet_input+0x106>
        goto free_and_return;
 8017628:	bf00      	nop
 801762a:	e002      	b.n	8017632 <ethernet_input+0x106>
        goto free_and_return;
 801762c:	bf00      	nop
 801762e:	e000      	b.n	8017632 <ethernet_input+0x106>
        goto free_and_return;
 8017630:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f7f7 f88a 	bl	800e74c <pbuf_free>
  return ERR_OK;
 8017638:	2300      	movs	r3, #0
}
 801763a:	4618      	mov	r0, r3
 801763c:	3718      	adds	r7, #24
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	0801e230 	.word	0x0801e230

08017648 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017648:	b580      	push	{r7, lr}
 801764a:	b086      	sub	sp, #24
 801764c:	af00      	add	r7, sp, #0
 801764e:	60f8      	str	r0, [r7, #12]
 8017650:	60b9      	str	r1, [r7, #8]
 8017652:	607a      	str	r2, [r7, #4]
 8017654:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017656:	8c3b      	ldrh	r3, [r7, #32]
 8017658:	4618      	mov	r0, r3
 801765a:	f7f5 fb71 	bl	800cd40 <lwip_htons>
 801765e:	4603      	mov	r3, r0
 8017660:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017662:	210e      	movs	r1, #14
 8017664:	68b8      	ldr	r0, [r7, #8]
 8017666:	f7f6 ffdb 	bl	800e620 <pbuf_add_header>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d125      	bne.n	80176bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	685b      	ldr	r3, [r3, #4]
 8017674:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	8afa      	ldrh	r2, [r7, #22]
 801767a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	2206      	movs	r2, #6
 8017680:	6839      	ldr	r1, [r7, #0]
 8017682:	4618      	mov	r0, r3
 8017684:	f000 fb0f 	bl	8017ca6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	3306      	adds	r3, #6
 801768c:	2206      	movs	r2, #6
 801768e:	6879      	ldr	r1, [r7, #4]
 8017690:	4618      	mov	r0, r3
 8017692:	f000 fb08 	bl	8017ca6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801769c:	2b06      	cmp	r3, #6
 801769e:	d006      	beq.n	80176ae <ethernet_output+0x66>
 80176a0:	4b0a      	ldr	r3, [pc, #40]	; (80176cc <ethernet_output+0x84>)
 80176a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80176a6:	490a      	ldr	r1, [pc, #40]	; (80176d0 <ethernet_output+0x88>)
 80176a8:	480a      	ldr	r0, [pc, #40]	; (80176d4 <ethernet_output+0x8c>)
 80176aa:	f000 fbc1 	bl	8017e30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	699b      	ldr	r3, [r3, #24]
 80176b2:	68b9      	ldr	r1, [r7, #8]
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	4798      	blx	r3
 80176b8:	4603      	mov	r3, r0
 80176ba:	e002      	b.n	80176c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80176bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80176be:	f06f 0301 	mvn.w	r3, #1
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3718      	adds	r7, #24
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bd80      	pop	{r7, pc}
 80176ca:	bf00      	nop
 80176cc:	0801dfa8 	.word	0x0801dfa8
 80176d0:	0801dfe0 	.word	0x0801dfe0
 80176d4:	0801e014 	.word	0x0801e014

080176d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	2200      	movs	r2, #0
 80176e6:	2104      	movs	r1, #4
 80176e8:	4618      	mov	r0, r3
 80176ea:	f7ef fdef 	bl	80072cc <osMessageQueueNew>
 80176ee:	4602      	mov	r2, r0
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d102      	bne.n	8017702 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80176fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017700:	e000      	b.n	8017704 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017702:	2300      	movs	r3, #0
}
 8017704:	4618      	mov	r0, r3
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	4618      	mov	r0, r3
 801771a:	f7ef ff43 	bl	80075a4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	4618      	mov	r0, r3
 8017724:	f7ef ff70 	bl	8007608 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017728:	bf00      	nop
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}

08017730 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b084      	sub	sp, #16
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6818      	ldr	r0, [r3, #0]
 801773e:	4639      	mov	r1, r7
 8017740:	2300      	movs	r3, #0
 8017742:	2200      	movs	r2, #0
 8017744:	f7ef fe48 	bl	80073d8 <osMessageQueuePut>
 8017748:	4603      	mov	r3, r0
 801774a:	2b00      	cmp	r3, #0
 801774c:	d102      	bne.n	8017754 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801774e:	2300      	movs	r3, #0
 8017750:	73fb      	strb	r3, [r7, #15]
 8017752:	e001      	b.n	8017758 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017754:	23ff      	movs	r3, #255	; 0xff
 8017756:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801775c:	4618      	mov	r0, r3
 801775e:	3710      	adds	r7, #16
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b086      	sub	sp, #24
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017770:	f7ef f9d8 	bl	8006b24 <osKernelGetTickCount>
 8017774:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d013      	beq.n	80177a4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	6818      	ldr	r0, [r3, #0]
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2200      	movs	r2, #0
 8017784:	68b9      	ldr	r1, [r7, #8]
 8017786:	f7ef fe9b 	bl	80074c0 <osMessageQueueGet>
 801778a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d105      	bne.n	801779e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017792:	f7ef f9c7 	bl	8006b24 <osKernelGetTickCount>
 8017796:	4602      	mov	r2, r0
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	1ad3      	subs	r3, r2, r3
 801779c:	e00f      	b.n	80177be <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801779e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177a2:	e00c      	b.n	80177be <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	6818      	ldr	r0, [r3, #0]
 80177a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177ac:	2200      	movs	r2, #0
 80177ae:	68b9      	ldr	r1, [r7, #8]
 80177b0:	f7ef fe86 	bl	80074c0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80177b4:	f7ef f9b6 	bl	8006b24 <osKernelGetTickCount>
 80177b8:	4602      	mov	r2, r0
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3718      	adds	r7, #24
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}

080177c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80177c6:	b580      	push	{r7, lr}
 80177c8:	b082      	sub	sp, #8
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	6078      	str	r0, [r7, #4]
 80177ce:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	6818      	ldr	r0, [r3, #0]
 80177d4:	2300      	movs	r3, #0
 80177d6:	2200      	movs	r2, #0
 80177d8:	6839      	ldr	r1, [r7, #0]
 80177da:	f7ef fe71 	bl	80074c0 <osMessageQueueGet>
 80177de:	4603      	mov	r3, r0
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d101      	bne.n	80177e8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80177e4:	2300      	movs	r3, #0
 80177e6:	e001      	b.n	80177ec <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80177e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80177ec:	4618      	mov	r0, r3
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}

080177f4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d101      	bne.n	8017808 <sys_mbox_valid+0x14>
    return 0;
 8017804:	2300      	movs	r3, #0
 8017806:	e000      	b.n	801780a <sys_mbox_valid+0x16>
  else
    return 1;
 8017808:	2301      	movs	r3, #1
}
 801780a:	4618      	mov	r0, r3
 801780c:	370c      	adds	r7, #12
 801780e:	46bd      	mov	sp, r7
 8017810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017814:	4770      	bx	lr

08017816 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017816:	b480      	push	{r7}
 8017818:	b083      	sub	sp, #12
 801781a:	af00      	add	r7, sp, #0
 801781c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2200      	movs	r2, #0
 8017822:	601a      	str	r2, [r3, #0]
}
 8017824:	bf00      	nop
 8017826:	370c      	adds	r7, #12
 8017828:	46bd      	mov	sp, r7
 801782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782e:	4770      	bx	lr

08017830 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	460b      	mov	r3, r1
 801783a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801783c:	78fb      	ldrb	r3, [r7, #3]
 801783e:	2200      	movs	r2, #0
 8017840:	4619      	mov	r1, r3
 8017842:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017846:	f7ef fbb1 	bl	8006fac <osSemaphoreNew>
 801784a:	4602      	mov	r2, r0
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801785c:	e009      	b.n	8017872 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801785e:	78fb      	ldrb	r3, [r7, #3]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d105      	bne.n	8017870 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2100      	movs	r1, #0
 801786a:	4618      	mov	r0, r3
 801786c:	f7ef fc3a 	bl	80070e4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017870:	2300      	movs	r3, #0
}
 8017872:	4618      	mov	r0, r3
 8017874:	3708      	adds	r7, #8
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}

0801787a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801787a:	b580      	push	{r7, lr}
 801787c:	b084      	sub	sp, #16
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
 8017882:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8017884:	f7ef f94e 	bl	8006b24 <osKernelGetTickCount>
 8017888:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d011      	beq.n	80178b4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	4618      	mov	r0, r3
 8017898:	f7ef fc24 	bl	80070e4 <osSemaphoreAcquire>
 801789c:	4603      	mov	r3, r0
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d105      	bne.n	80178ae <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80178a2:	f7ef f93f 	bl	8006b24 <osKernelGetTickCount>
 80178a6:	4602      	mov	r2, r0
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	1ad3      	subs	r3, r2, r3
 80178ac:	e012      	b.n	80178d4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80178ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80178b2:	e00f      	b.n	80178d4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80178b4:	bf00      	nop
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80178be:	4618      	mov	r0, r3
 80178c0:	f7ef fc10 	bl	80070e4 <osSemaphoreAcquire>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1f5      	bne.n	80178b6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80178ca:	f7ef f92b 	bl	8006b24 <osKernelGetTickCount>
 80178ce:	4602      	mov	r2, r0
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	3710      	adds	r7, #16
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd80      	pop	{r7, pc}

080178dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7ef fc61 	bl	80071b0 <osSemaphoreRelease>
}
 80178ee:	bf00      	nop
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}

080178f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80178f6:	b580      	push	{r7, lr}
 80178f8:	b082      	sub	sp, #8
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	4618      	mov	r0, r3
 8017904:	f7ef fcac 	bl	8007260 <osSemaphoreDelete>
}
 8017908:	bf00      	nop
 801790a:	3708      	adds	r7, #8
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d101      	bne.n	8017924 <sys_sem_valid+0x14>
    return 0;
 8017920:	2300      	movs	r3, #0
 8017922:	e000      	b.n	8017926 <sys_sem_valid+0x16>
  else
    return 1;
 8017924:	2301      	movs	r3, #1
}
 8017926:	4618      	mov	r0, r3
 8017928:	370c      	adds	r7, #12
 801792a:	46bd      	mov	sp, r7
 801792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017930:	4770      	bx	lr

08017932 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017932:	b480      	push	{r7}
 8017934:	b083      	sub	sp, #12
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	2200      	movs	r2, #0
 801793e:	601a      	str	r2, [r3, #0]
}
 8017940:	bf00      	nop
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr

0801794c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017950:	2000      	movs	r0, #0
 8017952:	f7ef f9e3 	bl	8006d1c <osMutexNew>
 8017956:	4603      	mov	r3, r0
 8017958:	4a01      	ldr	r2, [pc, #4]	; (8017960 <sys_init+0x14>)
 801795a:	6013      	str	r3, [r2, #0]
#endif
}
 801795c:	bf00      	nop
 801795e:	bd80      	pop	{r7, pc}
 8017960:	20011d08 	.word	0x20011d08

08017964 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801796c:	2000      	movs	r0, #0
 801796e:	f7ef f9d5 	bl	8006d1c <osMutexNew>
 8017972:	4602      	mov	r2, r0
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017984:	e000      	b.n	8017988 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017986:	2300      	movs	r3, #0
}
 8017988:	4618      	mov	r0, r3
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}

08017990 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7ef fa55 	bl	8006e50 <osMutexAcquire>
#endif
}
 80179a6:	bf00      	nop
 80179a8:	3708      	adds	r7, #8
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80179ae:	b580      	push	{r7, lr}
 80179b0:	b082      	sub	sp, #8
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7ef faa6 	bl	8006f0c <osMutexRelease>
}
 80179c0:	bf00      	nop
 80179c2:	3708      	adds	r7, #8
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}

080179c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b08e      	sub	sp, #56	; 0x38
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	60f8      	str	r0, [r7, #12]
 80179d0:	60b9      	str	r1, [r7, #8]
 80179d2:	607a      	str	r2, [r7, #4]
 80179d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80179d6:	f107 0314 	add.w	r3, r7, #20
 80179da:	2224      	movs	r2, #36	; 0x24
 80179dc:	2100      	movs	r1, #0
 80179de:	4618      	mov	r0, r3
 80179e0:	f000 f989 	bl	8017cf6 <memset>
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	617b      	str	r3, [r7, #20]
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80179ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80179f0:	f107 0314 	add.w	r3, r7, #20
 80179f4:	461a      	mov	r2, r3
 80179f6:	6879      	ldr	r1, [r7, #4]
 80179f8:	68b8      	ldr	r0, [r7, #8]
 80179fa:	f7ef f8bb 	bl	8006b74 <osThreadNew>
 80179fe:	4603      	mov	r3, r0
#endif
}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3738      	adds	r7, #56	; 0x38
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017a0c:	4b04      	ldr	r3, [pc, #16]	; (8017a20 <sys_arch_protect+0x18>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017a14:	4618      	mov	r0, r3
 8017a16:	f7ef fa1b 	bl	8006e50 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017a1a:	2301      	movs	r3, #1
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	bd80      	pop	{r7, pc}
 8017a20:	20011d08 	.word	0x20011d08

08017a24 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017a2c:	4b04      	ldr	r3, [pc, #16]	; (8017a40 <sys_arch_unprotect+0x1c>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7ef fa6b 	bl	8006f0c <osMutexRelease>
}
 8017a36:	bf00      	nop
 8017a38:	3708      	adds	r7, #8
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}
 8017a3e:	bf00      	nop
 8017a40:	20011d08 	.word	0x20011d08

08017a44 <atof>:
 8017a44:	2100      	movs	r1, #0
 8017a46:	f001 b971 	b.w	8018d2c <strtod>
	...

08017a4c <std>:
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	b510      	push	{r4, lr}
 8017a50:	4604      	mov	r4, r0
 8017a52:	e9c0 3300 	strd	r3, r3, [r0]
 8017a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a5a:	6083      	str	r3, [r0, #8]
 8017a5c:	8181      	strh	r1, [r0, #12]
 8017a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8017a60:	81c2      	strh	r2, [r0, #14]
 8017a62:	6183      	str	r3, [r0, #24]
 8017a64:	4619      	mov	r1, r3
 8017a66:	2208      	movs	r2, #8
 8017a68:	305c      	adds	r0, #92	; 0x5c
 8017a6a:	f000 f944 	bl	8017cf6 <memset>
 8017a6e:	4b05      	ldr	r3, [pc, #20]	; (8017a84 <std+0x38>)
 8017a70:	6263      	str	r3, [r4, #36]	; 0x24
 8017a72:	4b05      	ldr	r3, [pc, #20]	; (8017a88 <std+0x3c>)
 8017a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a76:	4b05      	ldr	r3, [pc, #20]	; (8017a8c <std+0x40>)
 8017a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a7a:	4b05      	ldr	r3, [pc, #20]	; (8017a90 <std+0x44>)
 8017a7c:	6224      	str	r4, [r4, #32]
 8017a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	bf00      	nop
 8017a84:	08018011 	.word	0x08018011
 8017a88:	08018033 	.word	0x08018033
 8017a8c:	0801806b 	.word	0x0801806b
 8017a90:	0801808f 	.word	0x0801808f

08017a94 <_cleanup_r>:
 8017a94:	4901      	ldr	r1, [pc, #4]	; (8017a9c <_cleanup_r+0x8>)
 8017a96:	f000 b8af 	b.w	8017bf8 <_fwalk_reent>
 8017a9a:	bf00      	nop
 8017a9c:	08018f89 	.word	0x08018f89

08017aa0 <__sfmoreglue>:
 8017aa0:	b570      	push	{r4, r5, r6, lr}
 8017aa2:	2268      	movs	r2, #104	; 0x68
 8017aa4:	1e4d      	subs	r5, r1, #1
 8017aa6:	4355      	muls	r5, r2
 8017aa8:	460e      	mov	r6, r1
 8017aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017aae:	f000 f94b 	bl	8017d48 <_malloc_r>
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	b140      	cbz	r0, 8017ac8 <__sfmoreglue+0x28>
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8017abc:	300c      	adds	r0, #12
 8017abe:	60a0      	str	r0, [r4, #8]
 8017ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017ac4:	f000 f917 	bl	8017cf6 <memset>
 8017ac8:	4620      	mov	r0, r4
 8017aca:	bd70      	pop	{r4, r5, r6, pc}

08017acc <__sfp_lock_acquire>:
 8017acc:	4801      	ldr	r0, [pc, #4]	; (8017ad4 <__sfp_lock_acquire+0x8>)
 8017ace:	f000 b8d8 	b.w	8017c82 <__retarget_lock_acquire_recursive>
 8017ad2:	bf00      	nop
 8017ad4:	20011d0d 	.word	0x20011d0d

08017ad8 <__sfp_lock_release>:
 8017ad8:	4801      	ldr	r0, [pc, #4]	; (8017ae0 <__sfp_lock_release+0x8>)
 8017ada:	f000 b8d3 	b.w	8017c84 <__retarget_lock_release_recursive>
 8017ade:	bf00      	nop
 8017ae0:	20011d0d 	.word	0x20011d0d

08017ae4 <__sinit_lock_acquire>:
 8017ae4:	4801      	ldr	r0, [pc, #4]	; (8017aec <__sinit_lock_acquire+0x8>)
 8017ae6:	f000 b8cc 	b.w	8017c82 <__retarget_lock_acquire_recursive>
 8017aea:	bf00      	nop
 8017aec:	20011d0e 	.word	0x20011d0e

08017af0 <__sinit_lock_release>:
 8017af0:	4801      	ldr	r0, [pc, #4]	; (8017af8 <__sinit_lock_release+0x8>)
 8017af2:	f000 b8c7 	b.w	8017c84 <__retarget_lock_release_recursive>
 8017af6:	bf00      	nop
 8017af8:	20011d0e 	.word	0x20011d0e

08017afc <__sinit>:
 8017afc:	b510      	push	{r4, lr}
 8017afe:	4604      	mov	r4, r0
 8017b00:	f7ff fff0 	bl	8017ae4 <__sinit_lock_acquire>
 8017b04:	69a3      	ldr	r3, [r4, #24]
 8017b06:	b11b      	cbz	r3, 8017b10 <__sinit+0x14>
 8017b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b0c:	f7ff bff0 	b.w	8017af0 <__sinit_lock_release>
 8017b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017b14:	6523      	str	r3, [r4, #80]	; 0x50
 8017b16:	4b13      	ldr	r3, [pc, #76]	; (8017b64 <__sinit+0x68>)
 8017b18:	4a13      	ldr	r2, [pc, #76]	; (8017b68 <__sinit+0x6c>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8017b1e:	42a3      	cmp	r3, r4
 8017b20:	bf04      	itt	eq
 8017b22:	2301      	moveq	r3, #1
 8017b24:	61a3      	streq	r3, [r4, #24]
 8017b26:	4620      	mov	r0, r4
 8017b28:	f000 f820 	bl	8017b6c <__sfp>
 8017b2c:	6060      	str	r0, [r4, #4]
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f000 f81c 	bl	8017b6c <__sfp>
 8017b34:	60a0      	str	r0, [r4, #8]
 8017b36:	4620      	mov	r0, r4
 8017b38:	f000 f818 	bl	8017b6c <__sfp>
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	60e0      	str	r0, [r4, #12]
 8017b40:	2104      	movs	r1, #4
 8017b42:	6860      	ldr	r0, [r4, #4]
 8017b44:	f7ff ff82 	bl	8017a4c <std>
 8017b48:	68a0      	ldr	r0, [r4, #8]
 8017b4a:	2201      	movs	r2, #1
 8017b4c:	2109      	movs	r1, #9
 8017b4e:	f7ff ff7d 	bl	8017a4c <std>
 8017b52:	68e0      	ldr	r0, [r4, #12]
 8017b54:	2202      	movs	r2, #2
 8017b56:	2112      	movs	r1, #18
 8017b58:	f7ff ff78 	bl	8017a4c <std>
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	61a3      	str	r3, [r4, #24]
 8017b60:	e7d2      	b.n	8017b08 <__sinit+0xc>
 8017b62:	bf00      	nop
 8017b64:	0801e3a0 	.word	0x0801e3a0
 8017b68:	08017a95 	.word	0x08017a95

08017b6c <__sfp>:
 8017b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b6e:	4607      	mov	r7, r0
 8017b70:	f7ff ffac 	bl	8017acc <__sfp_lock_acquire>
 8017b74:	4b1e      	ldr	r3, [pc, #120]	; (8017bf0 <__sfp+0x84>)
 8017b76:	681e      	ldr	r6, [r3, #0]
 8017b78:	69b3      	ldr	r3, [r6, #24]
 8017b7a:	b913      	cbnz	r3, 8017b82 <__sfp+0x16>
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	f7ff ffbd 	bl	8017afc <__sinit>
 8017b82:	3648      	adds	r6, #72	; 0x48
 8017b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b88:	3b01      	subs	r3, #1
 8017b8a:	d503      	bpl.n	8017b94 <__sfp+0x28>
 8017b8c:	6833      	ldr	r3, [r6, #0]
 8017b8e:	b30b      	cbz	r3, 8017bd4 <__sfp+0x68>
 8017b90:	6836      	ldr	r6, [r6, #0]
 8017b92:	e7f7      	b.n	8017b84 <__sfp+0x18>
 8017b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b98:	b9d5      	cbnz	r5, 8017bd0 <__sfp+0x64>
 8017b9a:	4b16      	ldr	r3, [pc, #88]	; (8017bf4 <__sfp+0x88>)
 8017b9c:	60e3      	str	r3, [r4, #12]
 8017b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8017ba4:	f000 f86c 	bl	8017c80 <__retarget_lock_init_recursive>
 8017ba8:	f7ff ff96 	bl	8017ad8 <__sfp_lock_release>
 8017bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017bb4:	6025      	str	r5, [r4, #0]
 8017bb6:	61a5      	str	r5, [r4, #24]
 8017bb8:	2208      	movs	r2, #8
 8017bba:	4629      	mov	r1, r5
 8017bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017bc0:	f000 f899 	bl	8017cf6 <memset>
 8017bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017bcc:	4620      	mov	r0, r4
 8017bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bd0:	3468      	adds	r4, #104	; 0x68
 8017bd2:	e7d9      	b.n	8017b88 <__sfp+0x1c>
 8017bd4:	2104      	movs	r1, #4
 8017bd6:	4638      	mov	r0, r7
 8017bd8:	f7ff ff62 	bl	8017aa0 <__sfmoreglue>
 8017bdc:	4604      	mov	r4, r0
 8017bde:	6030      	str	r0, [r6, #0]
 8017be0:	2800      	cmp	r0, #0
 8017be2:	d1d5      	bne.n	8017b90 <__sfp+0x24>
 8017be4:	f7ff ff78 	bl	8017ad8 <__sfp_lock_release>
 8017be8:	230c      	movs	r3, #12
 8017bea:	603b      	str	r3, [r7, #0]
 8017bec:	e7ee      	b.n	8017bcc <__sfp+0x60>
 8017bee:	bf00      	nop
 8017bf0:	0801e3a0 	.word	0x0801e3a0
 8017bf4:	ffff0001 	.word	0xffff0001

08017bf8 <_fwalk_reent>:
 8017bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bfc:	4606      	mov	r6, r0
 8017bfe:	4688      	mov	r8, r1
 8017c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017c04:	2700      	movs	r7, #0
 8017c06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017c0a:	f1b9 0901 	subs.w	r9, r9, #1
 8017c0e:	d505      	bpl.n	8017c1c <_fwalk_reent+0x24>
 8017c10:	6824      	ldr	r4, [r4, #0]
 8017c12:	2c00      	cmp	r4, #0
 8017c14:	d1f7      	bne.n	8017c06 <_fwalk_reent+0xe>
 8017c16:	4638      	mov	r0, r7
 8017c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c1c:	89ab      	ldrh	r3, [r5, #12]
 8017c1e:	2b01      	cmp	r3, #1
 8017c20:	d907      	bls.n	8017c32 <_fwalk_reent+0x3a>
 8017c22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017c26:	3301      	adds	r3, #1
 8017c28:	d003      	beq.n	8017c32 <_fwalk_reent+0x3a>
 8017c2a:	4629      	mov	r1, r5
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	47c0      	blx	r8
 8017c30:	4307      	orrs	r7, r0
 8017c32:	3568      	adds	r5, #104	; 0x68
 8017c34:	e7e9      	b.n	8017c0a <_fwalk_reent+0x12>
	...

08017c38 <__libc_init_array>:
 8017c38:	b570      	push	{r4, r5, r6, lr}
 8017c3a:	4d0d      	ldr	r5, [pc, #52]	; (8017c70 <__libc_init_array+0x38>)
 8017c3c:	4c0d      	ldr	r4, [pc, #52]	; (8017c74 <__libc_init_array+0x3c>)
 8017c3e:	1b64      	subs	r4, r4, r5
 8017c40:	10a4      	asrs	r4, r4, #2
 8017c42:	2600      	movs	r6, #0
 8017c44:	42a6      	cmp	r6, r4
 8017c46:	d109      	bne.n	8017c5c <__libc_init_array+0x24>
 8017c48:	4d0b      	ldr	r5, [pc, #44]	; (8017c78 <__libc_init_array+0x40>)
 8017c4a:	4c0c      	ldr	r4, [pc, #48]	; (8017c7c <__libc_init_array+0x44>)
 8017c4c:	f003 f8f4 	bl	801ae38 <_init>
 8017c50:	1b64      	subs	r4, r4, r5
 8017c52:	10a4      	asrs	r4, r4, #2
 8017c54:	2600      	movs	r6, #0
 8017c56:	42a6      	cmp	r6, r4
 8017c58:	d105      	bne.n	8017c66 <__libc_init_array+0x2e>
 8017c5a:	bd70      	pop	{r4, r5, r6, pc}
 8017c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c60:	4798      	blx	r3
 8017c62:	3601      	adds	r6, #1
 8017c64:	e7ee      	b.n	8017c44 <__libc_init_array+0xc>
 8017c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c6a:	4798      	blx	r3
 8017c6c:	3601      	adds	r6, #1
 8017c6e:	e7f2      	b.n	8017c56 <__libc_init_array+0x1e>
 8017c70:	0801e730 	.word	0x0801e730
 8017c74:	0801e730 	.word	0x0801e730
 8017c78:	0801e730 	.word	0x0801e730
 8017c7c:	0801e734 	.word	0x0801e734

08017c80 <__retarget_lock_init_recursive>:
 8017c80:	4770      	bx	lr

08017c82 <__retarget_lock_acquire_recursive>:
 8017c82:	4770      	bx	lr

08017c84 <__retarget_lock_release_recursive>:
 8017c84:	4770      	bx	lr

08017c86 <memcmp>:
 8017c86:	b510      	push	{r4, lr}
 8017c88:	3901      	subs	r1, #1
 8017c8a:	4402      	add	r2, r0
 8017c8c:	4290      	cmp	r0, r2
 8017c8e:	d101      	bne.n	8017c94 <memcmp+0xe>
 8017c90:	2000      	movs	r0, #0
 8017c92:	e005      	b.n	8017ca0 <memcmp+0x1a>
 8017c94:	7803      	ldrb	r3, [r0, #0]
 8017c96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017c9a:	42a3      	cmp	r3, r4
 8017c9c:	d001      	beq.n	8017ca2 <memcmp+0x1c>
 8017c9e:	1b18      	subs	r0, r3, r4
 8017ca0:	bd10      	pop	{r4, pc}
 8017ca2:	3001      	adds	r0, #1
 8017ca4:	e7f2      	b.n	8017c8c <memcmp+0x6>

08017ca6 <memcpy>:
 8017ca6:	440a      	add	r2, r1
 8017ca8:	4291      	cmp	r1, r2
 8017caa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017cae:	d100      	bne.n	8017cb2 <memcpy+0xc>
 8017cb0:	4770      	bx	lr
 8017cb2:	b510      	push	{r4, lr}
 8017cb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017cbc:	4291      	cmp	r1, r2
 8017cbe:	d1f9      	bne.n	8017cb4 <memcpy+0xe>
 8017cc0:	bd10      	pop	{r4, pc}

08017cc2 <memmove>:
 8017cc2:	4288      	cmp	r0, r1
 8017cc4:	b510      	push	{r4, lr}
 8017cc6:	eb01 0402 	add.w	r4, r1, r2
 8017cca:	d902      	bls.n	8017cd2 <memmove+0x10>
 8017ccc:	4284      	cmp	r4, r0
 8017cce:	4623      	mov	r3, r4
 8017cd0:	d807      	bhi.n	8017ce2 <memmove+0x20>
 8017cd2:	1e43      	subs	r3, r0, #1
 8017cd4:	42a1      	cmp	r1, r4
 8017cd6:	d008      	beq.n	8017cea <memmove+0x28>
 8017cd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017ce0:	e7f8      	b.n	8017cd4 <memmove+0x12>
 8017ce2:	4402      	add	r2, r0
 8017ce4:	4601      	mov	r1, r0
 8017ce6:	428a      	cmp	r2, r1
 8017ce8:	d100      	bne.n	8017cec <memmove+0x2a>
 8017cea:	bd10      	pop	{r4, pc}
 8017cec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cf4:	e7f7      	b.n	8017ce6 <memmove+0x24>

08017cf6 <memset>:
 8017cf6:	4402      	add	r2, r0
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	4293      	cmp	r3, r2
 8017cfc:	d100      	bne.n	8017d00 <memset+0xa>
 8017cfe:	4770      	bx	lr
 8017d00:	f803 1b01 	strb.w	r1, [r3], #1
 8017d04:	e7f9      	b.n	8017cfa <memset+0x4>
	...

08017d08 <sbrk_aligned>:
 8017d08:	b570      	push	{r4, r5, r6, lr}
 8017d0a:	4e0e      	ldr	r6, [pc, #56]	; (8017d44 <sbrk_aligned+0x3c>)
 8017d0c:	460c      	mov	r4, r1
 8017d0e:	6831      	ldr	r1, [r6, #0]
 8017d10:	4605      	mov	r5, r0
 8017d12:	b911      	cbnz	r1, 8017d1a <sbrk_aligned+0x12>
 8017d14:	f000 f94c 	bl	8017fb0 <_sbrk_r>
 8017d18:	6030      	str	r0, [r6, #0]
 8017d1a:	4621      	mov	r1, r4
 8017d1c:	4628      	mov	r0, r5
 8017d1e:	f000 f947 	bl	8017fb0 <_sbrk_r>
 8017d22:	1c43      	adds	r3, r0, #1
 8017d24:	d00a      	beq.n	8017d3c <sbrk_aligned+0x34>
 8017d26:	1cc4      	adds	r4, r0, #3
 8017d28:	f024 0403 	bic.w	r4, r4, #3
 8017d2c:	42a0      	cmp	r0, r4
 8017d2e:	d007      	beq.n	8017d40 <sbrk_aligned+0x38>
 8017d30:	1a21      	subs	r1, r4, r0
 8017d32:	4628      	mov	r0, r5
 8017d34:	f000 f93c 	bl	8017fb0 <_sbrk_r>
 8017d38:	3001      	adds	r0, #1
 8017d3a:	d101      	bne.n	8017d40 <sbrk_aligned+0x38>
 8017d3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017d40:	4620      	mov	r0, r4
 8017d42:	bd70      	pop	{r4, r5, r6, pc}
 8017d44:	20011d14 	.word	0x20011d14

08017d48 <_malloc_r>:
 8017d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d4c:	1ccd      	adds	r5, r1, #3
 8017d4e:	f025 0503 	bic.w	r5, r5, #3
 8017d52:	3508      	adds	r5, #8
 8017d54:	2d0c      	cmp	r5, #12
 8017d56:	bf38      	it	cc
 8017d58:	250c      	movcc	r5, #12
 8017d5a:	2d00      	cmp	r5, #0
 8017d5c:	4607      	mov	r7, r0
 8017d5e:	db01      	blt.n	8017d64 <_malloc_r+0x1c>
 8017d60:	42a9      	cmp	r1, r5
 8017d62:	d905      	bls.n	8017d70 <_malloc_r+0x28>
 8017d64:	230c      	movs	r3, #12
 8017d66:	603b      	str	r3, [r7, #0]
 8017d68:	2600      	movs	r6, #0
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d70:	4e2e      	ldr	r6, [pc, #184]	; (8017e2c <_malloc_r+0xe4>)
 8017d72:	f001 fcf3 	bl	801975c <__malloc_lock>
 8017d76:	6833      	ldr	r3, [r6, #0]
 8017d78:	461c      	mov	r4, r3
 8017d7a:	bb34      	cbnz	r4, 8017dca <_malloc_r+0x82>
 8017d7c:	4629      	mov	r1, r5
 8017d7e:	4638      	mov	r0, r7
 8017d80:	f7ff ffc2 	bl	8017d08 <sbrk_aligned>
 8017d84:	1c43      	adds	r3, r0, #1
 8017d86:	4604      	mov	r4, r0
 8017d88:	d14d      	bne.n	8017e26 <_malloc_r+0xde>
 8017d8a:	6834      	ldr	r4, [r6, #0]
 8017d8c:	4626      	mov	r6, r4
 8017d8e:	2e00      	cmp	r6, #0
 8017d90:	d140      	bne.n	8017e14 <_malloc_r+0xcc>
 8017d92:	6823      	ldr	r3, [r4, #0]
 8017d94:	4631      	mov	r1, r6
 8017d96:	4638      	mov	r0, r7
 8017d98:	eb04 0803 	add.w	r8, r4, r3
 8017d9c:	f000 f908 	bl	8017fb0 <_sbrk_r>
 8017da0:	4580      	cmp	r8, r0
 8017da2:	d13a      	bne.n	8017e1a <_malloc_r+0xd2>
 8017da4:	6821      	ldr	r1, [r4, #0]
 8017da6:	3503      	adds	r5, #3
 8017da8:	1a6d      	subs	r5, r5, r1
 8017daa:	f025 0503 	bic.w	r5, r5, #3
 8017dae:	3508      	adds	r5, #8
 8017db0:	2d0c      	cmp	r5, #12
 8017db2:	bf38      	it	cc
 8017db4:	250c      	movcc	r5, #12
 8017db6:	4629      	mov	r1, r5
 8017db8:	4638      	mov	r0, r7
 8017dba:	f7ff ffa5 	bl	8017d08 <sbrk_aligned>
 8017dbe:	3001      	adds	r0, #1
 8017dc0:	d02b      	beq.n	8017e1a <_malloc_r+0xd2>
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	442b      	add	r3, r5
 8017dc6:	6023      	str	r3, [r4, #0]
 8017dc8:	e00e      	b.n	8017de8 <_malloc_r+0xa0>
 8017dca:	6822      	ldr	r2, [r4, #0]
 8017dcc:	1b52      	subs	r2, r2, r5
 8017dce:	d41e      	bmi.n	8017e0e <_malloc_r+0xc6>
 8017dd0:	2a0b      	cmp	r2, #11
 8017dd2:	d916      	bls.n	8017e02 <_malloc_r+0xba>
 8017dd4:	1961      	adds	r1, r4, r5
 8017dd6:	42a3      	cmp	r3, r4
 8017dd8:	6025      	str	r5, [r4, #0]
 8017dda:	bf18      	it	ne
 8017ddc:	6059      	strne	r1, [r3, #4]
 8017dde:	6863      	ldr	r3, [r4, #4]
 8017de0:	bf08      	it	eq
 8017de2:	6031      	streq	r1, [r6, #0]
 8017de4:	5162      	str	r2, [r4, r5]
 8017de6:	604b      	str	r3, [r1, #4]
 8017de8:	4638      	mov	r0, r7
 8017dea:	f104 060b 	add.w	r6, r4, #11
 8017dee:	f001 fcbb 	bl	8019768 <__malloc_unlock>
 8017df2:	f026 0607 	bic.w	r6, r6, #7
 8017df6:	1d23      	adds	r3, r4, #4
 8017df8:	1af2      	subs	r2, r6, r3
 8017dfa:	d0b6      	beq.n	8017d6a <_malloc_r+0x22>
 8017dfc:	1b9b      	subs	r3, r3, r6
 8017dfe:	50a3      	str	r3, [r4, r2]
 8017e00:	e7b3      	b.n	8017d6a <_malloc_r+0x22>
 8017e02:	6862      	ldr	r2, [r4, #4]
 8017e04:	42a3      	cmp	r3, r4
 8017e06:	bf0c      	ite	eq
 8017e08:	6032      	streq	r2, [r6, #0]
 8017e0a:	605a      	strne	r2, [r3, #4]
 8017e0c:	e7ec      	b.n	8017de8 <_malloc_r+0xa0>
 8017e0e:	4623      	mov	r3, r4
 8017e10:	6864      	ldr	r4, [r4, #4]
 8017e12:	e7b2      	b.n	8017d7a <_malloc_r+0x32>
 8017e14:	4634      	mov	r4, r6
 8017e16:	6876      	ldr	r6, [r6, #4]
 8017e18:	e7b9      	b.n	8017d8e <_malloc_r+0x46>
 8017e1a:	230c      	movs	r3, #12
 8017e1c:	603b      	str	r3, [r7, #0]
 8017e1e:	4638      	mov	r0, r7
 8017e20:	f001 fca2 	bl	8019768 <__malloc_unlock>
 8017e24:	e7a1      	b.n	8017d6a <_malloc_r+0x22>
 8017e26:	6025      	str	r5, [r4, #0]
 8017e28:	e7de      	b.n	8017de8 <_malloc_r+0xa0>
 8017e2a:	bf00      	nop
 8017e2c:	20011d10 	.word	0x20011d10

08017e30 <iprintf>:
 8017e30:	b40f      	push	{r0, r1, r2, r3}
 8017e32:	4b0a      	ldr	r3, [pc, #40]	; (8017e5c <iprintf+0x2c>)
 8017e34:	b513      	push	{r0, r1, r4, lr}
 8017e36:	681c      	ldr	r4, [r3, #0]
 8017e38:	b124      	cbz	r4, 8017e44 <iprintf+0x14>
 8017e3a:	69a3      	ldr	r3, [r4, #24]
 8017e3c:	b913      	cbnz	r3, 8017e44 <iprintf+0x14>
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f7ff fe5c 	bl	8017afc <__sinit>
 8017e44:	ab05      	add	r3, sp, #20
 8017e46:	9a04      	ldr	r2, [sp, #16]
 8017e48:	68a1      	ldr	r1, [r4, #8]
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f002 fb3b 	bl	801a4c8 <_vfiprintf_r>
 8017e52:	b002      	add	sp, #8
 8017e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e58:	b004      	add	sp, #16
 8017e5a:	4770      	bx	lr
 8017e5c:	2000002c 	.word	0x2000002c

08017e60 <rand>:
 8017e60:	4b16      	ldr	r3, [pc, #88]	; (8017ebc <rand+0x5c>)
 8017e62:	b510      	push	{r4, lr}
 8017e64:	681c      	ldr	r4, [r3, #0]
 8017e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017e68:	b9b3      	cbnz	r3, 8017e98 <rand+0x38>
 8017e6a:	2018      	movs	r0, #24
 8017e6c:	f001 fc5c 	bl	8019728 <malloc>
 8017e70:	63a0      	str	r0, [r4, #56]	; 0x38
 8017e72:	b928      	cbnz	r0, 8017e80 <rand+0x20>
 8017e74:	4602      	mov	r2, r0
 8017e76:	4b12      	ldr	r3, [pc, #72]	; (8017ec0 <rand+0x60>)
 8017e78:	4812      	ldr	r0, [pc, #72]	; (8017ec4 <rand+0x64>)
 8017e7a:	214e      	movs	r1, #78	; 0x4e
 8017e7c:	f000 ffd0 	bl	8018e20 <__assert_func>
 8017e80:	4a11      	ldr	r2, [pc, #68]	; (8017ec8 <rand+0x68>)
 8017e82:	4b12      	ldr	r3, [pc, #72]	; (8017ecc <rand+0x6c>)
 8017e84:	e9c0 2300 	strd	r2, r3, [r0]
 8017e88:	4b11      	ldr	r3, [pc, #68]	; (8017ed0 <rand+0x70>)
 8017e8a:	6083      	str	r3, [r0, #8]
 8017e8c:	230b      	movs	r3, #11
 8017e8e:	8183      	strh	r3, [r0, #12]
 8017e90:	2201      	movs	r2, #1
 8017e92:	2300      	movs	r3, #0
 8017e94:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017e98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017e9a:	4a0e      	ldr	r2, [pc, #56]	; (8017ed4 <rand+0x74>)
 8017e9c:	6920      	ldr	r0, [r4, #16]
 8017e9e:	6963      	ldr	r3, [r4, #20]
 8017ea0:	490d      	ldr	r1, [pc, #52]	; (8017ed8 <rand+0x78>)
 8017ea2:	4342      	muls	r2, r0
 8017ea4:	fb01 2203 	mla	r2, r1, r3, r2
 8017ea8:	fba0 0101 	umull	r0, r1, r0, r1
 8017eac:	1c43      	adds	r3, r0, #1
 8017eae:	eb42 0001 	adc.w	r0, r2, r1
 8017eb2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017eb6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017eba:	bd10      	pop	{r4, pc}
 8017ebc:	2000002c 	.word	0x2000002c
 8017ec0:	0801e3a4 	.word	0x0801e3a4
 8017ec4:	0801e3bb 	.word	0x0801e3bb
 8017ec8:	abcd330e 	.word	0xabcd330e
 8017ecc:	e66d1234 	.word	0xe66d1234
 8017ed0:	0005deec 	.word	0x0005deec
 8017ed4:	5851f42d 	.word	0x5851f42d
 8017ed8:	4c957f2d 	.word	0x4c957f2d

08017edc <cleanup_glue>:
 8017edc:	b538      	push	{r3, r4, r5, lr}
 8017ede:	460c      	mov	r4, r1
 8017ee0:	6809      	ldr	r1, [r1, #0]
 8017ee2:	4605      	mov	r5, r0
 8017ee4:	b109      	cbz	r1, 8017eea <cleanup_glue+0xe>
 8017ee6:	f7ff fff9 	bl	8017edc <cleanup_glue>
 8017eea:	4621      	mov	r1, r4
 8017eec:	4628      	mov	r0, r5
 8017eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ef2:	f002 b917 	b.w	801a124 <_free_r>
	...

08017ef8 <_reclaim_reent>:
 8017ef8:	4b2c      	ldr	r3, [pc, #176]	; (8017fac <_reclaim_reent+0xb4>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	4283      	cmp	r3, r0
 8017efe:	b570      	push	{r4, r5, r6, lr}
 8017f00:	4604      	mov	r4, r0
 8017f02:	d051      	beq.n	8017fa8 <_reclaim_reent+0xb0>
 8017f04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017f06:	b143      	cbz	r3, 8017f1a <_reclaim_reent+0x22>
 8017f08:	68db      	ldr	r3, [r3, #12]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d14a      	bne.n	8017fa4 <_reclaim_reent+0xac>
 8017f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f10:	6819      	ldr	r1, [r3, #0]
 8017f12:	b111      	cbz	r1, 8017f1a <_reclaim_reent+0x22>
 8017f14:	4620      	mov	r0, r4
 8017f16:	f002 f905 	bl	801a124 <_free_r>
 8017f1a:	6961      	ldr	r1, [r4, #20]
 8017f1c:	b111      	cbz	r1, 8017f24 <_reclaim_reent+0x2c>
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f002 f900 	bl	801a124 <_free_r>
 8017f24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017f26:	b111      	cbz	r1, 8017f2e <_reclaim_reent+0x36>
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f002 f8fb 	bl	801a124 <_free_r>
 8017f2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017f30:	b111      	cbz	r1, 8017f38 <_reclaim_reent+0x40>
 8017f32:	4620      	mov	r0, r4
 8017f34:	f002 f8f6 	bl	801a124 <_free_r>
 8017f38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017f3a:	b111      	cbz	r1, 8017f42 <_reclaim_reent+0x4a>
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	f002 f8f1 	bl	801a124 <_free_r>
 8017f42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017f44:	b111      	cbz	r1, 8017f4c <_reclaim_reent+0x54>
 8017f46:	4620      	mov	r0, r4
 8017f48:	f002 f8ec 	bl	801a124 <_free_r>
 8017f4c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017f4e:	b111      	cbz	r1, 8017f56 <_reclaim_reent+0x5e>
 8017f50:	4620      	mov	r0, r4
 8017f52:	f002 f8e7 	bl	801a124 <_free_r>
 8017f56:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017f58:	b111      	cbz	r1, 8017f60 <_reclaim_reent+0x68>
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f002 f8e2 	bl	801a124 <_free_r>
 8017f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f62:	b111      	cbz	r1, 8017f6a <_reclaim_reent+0x72>
 8017f64:	4620      	mov	r0, r4
 8017f66:	f002 f8dd 	bl	801a124 <_free_r>
 8017f6a:	69a3      	ldr	r3, [r4, #24]
 8017f6c:	b1e3      	cbz	r3, 8017fa8 <_reclaim_reent+0xb0>
 8017f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017f70:	4620      	mov	r0, r4
 8017f72:	4798      	blx	r3
 8017f74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017f76:	b1b9      	cbz	r1, 8017fa8 <_reclaim_reent+0xb0>
 8017f78:	4620      	mov	r0, r4
 8017f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f7e:	f7ff bfad 	b.w	8017edc <cleanup_glue>
 8017f82:	5949      	ldr	r1, [r1, r5]
 8017f84:	b941      	cbnz	r1, 8017f98 <_reclaim_reent+0xa0>
 8017f86:	3504      	adds	r5, #4
 8017f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f8a:	2d80      	cmp	r5, #128	; 0x80
 8017f8c:	68d9      	ldr	r1, [r3, #12]
 8017f8e:	d1f8      	bne.n	8017f82 <_reclaim_reent+0x8a>
 8017f90:	4620      	mov	r0, r4
 8017f92:	f002 f8c7 	bl	801a124 <_free_r>
 8017f96:	e7ba      	b.n	8017f0e <_reclaim_reent+0x16>
 8017f98:	680e      	ldr	r6, [r1, #0]
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	f002 f8c2 	bl	801a124 <_free_r>
 8017fa0:	4631      	mov	r1, r6
 8017fa2:	e7ef      	b.n	8017f84 <_reclaim_reent+0x8c>
 8017fa4:	2500      	movs	r5, #0
 8017fa6:	e7ef      	b.n	8017f88 <_reclaim_reent+0x90>
 8017fa8:	bd70      	pop	{r4, r5, r6, pc}
 8017faa:	bf00      	nop
 8017fac:	2000002c 	.word	0x2000002c

08017fb0 <_sbrk_r>:
 8017fb0:	b538      	push	{r3, r4, r5, lr}
 8017fb2:	4d06      	ldr	r5, [pc, #24]	; (8017fcc <_sbrk_r+0x1c>)
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	4608      	mov	r0, r1
 8017fba:	602b      	str	r3, [r5, #0]
 8017fbc:	f7e9 fe8e 	bl	8001cdc <_sbrk>
 8017fc0:	1c43      	adds	r3, r0, #1
 8017fc2:	d102      	bne.n	8017fca <_sbrk_r+0x1a>
 8017fc4:	682b      	ldr	r3, [r5, #0]
 8017fc6:	b103      	cbz	r3, 8017fca <_sbrk_r+0x1a>
 8017fc8:	6023      	str	r3, [r4, #0]
 8017fca:	bd38      	pop	{r3, r4, r5, pc}
 8017fcc:	20011d18 	.word	0x20011d18

08017fd0 <siprintf>:
 8017fd0:	b40e      	push	{r1, r2, r3}
 8017fd2:	b500      	push	{lr}
 8017fd4:	b09c      	sub	sp, #112	; 0x70
 8017fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8017fd8:	9002      	str	r0, [sp, #8]
 8017fda:	9006      	str	r0, [sp, #24]
 8017fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fe0:	4809      	ldr	r0, [pc, #36]	; (8018008 <siprintf+0x38>)
 8017fe2:	9107      	str	r1, [sp, #28]
 8017fe4:	9104      	str	r1, [sp, #16]
 8017fe6:	4909      	ldr	r1, [pc, #36]	; (801800c <siprintf+0x3c>)
 8017fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fec:	9105      	str	r1, [sp, #20]
 8017fee:	6800      	ldr	r0, [r0, #0]
 8017ff0:	9301      	str	r3, [sp, #4]
 8017ff2:	a902      	add	r1, sp, #8
 8017ff4:	f002 f93e 	bl	801a274 <_svfiprintf_r>
 8017ff8:	9b02      	ldr	r3, [sp, #8]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	701a      	strb	r2, [r3, #0]
 8017ffe:	b01c      	add	sp, #112	; 0x70
 8018000:	f85d eb04 	ldr.w	lr, [sp], #4
 8018004:	b003      	add	sp, #12
 8018006:	4770      	bx	lr
 8018008:	2000002c 	.word	0x2000002c
 801800c:	ffff0208 	.word	0xffff0208

08018010 <__sread>:
 8018010:	b510      	push	{r4, lr}
 8018012:	460c      	mov	r4, r1
 8018014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018018:	f002 fd1a 	bl	801aa50 <_read_r>
 801801c:	2800      	cmp	r0, #0
 801801e:	bfab      	itete	ge
 8018020:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018022:	89a3      	ldrhlt	r3, [r4, #12]
 8018024:	181b      	addge	r3, r3, r0
 8018026:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801802a:	bfac      	ite	ge
 801802c:	6563      	strge	r3, [r4, #84]	; 0x54
 801802e:	81a3      	strhlt	r3, [r4, #12]
 8018030:	bd10      	pop	{r4, pc}

08018032 <__swrite>:
 8018032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018036:	461f      	mov	r7, r3
 8018038:	898b      	ldrh	r3, [r1, #12]
 801803a:	05db      	lsls	r3, r3, #23
 801803c:	4605      	mov	r5, r0
 801803e:	460c      	mov	r4, r1
 8018040:	4616      	mov	r6, r2
 8018042:	d505      	bpl.n	8018050 <__swrite+0x1e>
 8018044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018048:	2302      	movs	r3, #2
 801804a:	2200      	movs	r2, #0
 801804c:	f001 fb5a 	bl	8019704 <_lseek_r>
 8018050:	89a3      	ldrh	r3, [r4, #12]
 8018052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801805a:	81a3      	strh	r3, [r4, #12]
 801805c:	4632      	mov	r2, r6
 801805e:	463b      	mov	r3, r7
 8018060:	4628      	mov	r0, r5
 8018062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018066:	f000 bec9 	b.w	8018dfc <_write_r>

0801806a <__sseek>:
 801806a:	b510      	push	{r4, lr}
 801806c:	460c      	mov	r4, r1
 801806e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018072:	f001 fb47 	bl	8019704 <_lseek_r>
 8018076:	1c43      	adds	r3, r0, #1
 8018078:	89a3      	ldrh	r3, [r4, #12]
 801807a:	bf15      	itete	ne
 801807c:	6560      	strne	r0, [r4, #84]	; 0x54
 801807e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018082:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018086:	81a3      	strheq	r3, [r4, #12]
 8018088:	bf18      	it	ne
 801808a:	81a3      	strhne	r3, [r4, #12]
 801808c:	bd10      	pop	{r4, pc}

0801808e <__sclose>:
 801808e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018092:	f000 bee3 	b.w	8018e5c <_close_r>

08018096 <strncmp>:
 8018096:	b510      	push	{r4, lr}
 8018098:	b17a      	cbz	r2, 80180ba <strncmp+0x24>
 801809a:	4603      	mov	r3, r0
 801809c:	3901      	subs	r1, #1
 801809e:	1884      	adds	r4, r0, r2
 80180a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80180a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80180a8:	4290      	cmp	r0, r2
 80180aa:	d101      	bne.n	80180b0 <strncmp+0x1a>
 80180ac:	42a3      	cmp	r3, r4
 80180ae:	d101      	bne.n	80180b4 <strncmp+0x1e>
 80180b0:	1a80      	subs	r0, r0, r2
 80180b2:	bd10      	pop	{r4, pc}
 80180b4:	2800      	cmp	r0, #0
 80180b6:	d1f3      	bne.n	80180a0 <strncmp+0xa>
 80180b8:	e7fa      	b.n	80180b0 <strncmp+0x1a>
 80180ba:	4610      	mov	r0, r2
 80180bc:	e7f9      	b.n	80180b2 <strncmp+0x1c>

080180be <strncpy>:
 80180be:	b510      	push	{r4, lr}
 80180c0:	3901      	subs	r1, #1
 80180c2:	4603      	mov	r3, r0
 80180c4:	b132      	cbz	r2, 80180d4 <strncpy+0x16>
 80180c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80180ca:	f803 4b01 	strb.w	r4, [r3], #1
 80180ce:	3a01      	subs	r2, #1
 80180d0:	2c00      	cmp	r4, #0
 80180d2:	d1f7      	bne.n	80180c4 <strncpy+0x6>
 80180d4:	441a      	add	r2, r3
 80180d6:	2100      	movs	r1, #0
 80180d8:	4293      	cmp	r3, r2
 80180da:	d100      	bne.n	80180de <strncpy+0x20>
 80180dc:	bd10      	pop	{r4, pc}
 80180de:	f803 1b01 	strb.w	r1, [r3], #1
 80180e2:	e7f9      	b.n	80180d8 <strncpy+0x1a>

080180e4 <sulp>:
 80180e4:	b570      	push	{r4, r5, r6, lr}
 80180e6:	4604      	mov	r4, r0
 80180e8:	460d      	mov	r5, r1
 80180ea:	ec45 4b10 	vmov	d0, r4, r5
 80180ee:	4616      	mov	r6, r2
 80180f0:	f001 feb2 	bl	8019e58 <__ulp>
 80180f4:	ec51 0b10 	vmov	r0, r1, d0
 80180f8:	b17e      	cbz	r6, 801811a <sulp+0x36>
 80180fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80180fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018102:	2b00      	cmp	r3, #0
 8018104:	dd09      	ble.n	801811a <sulp+0x36>
 8018106:	051b      	lsls	r3, r3, #20
 8018108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801810c:	2400      	movs	r4, #0
 801810e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8018112:	4622      	mov	r2, r4
 8018114:	462b      	mov	r3, r5
 8018116:	f7e8 fa8f 	bl	8000638 <__aeabi_dmul>
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	0000      	movs	r0, r0
	...

08018120 <_strtod_l>:
 8018120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018124:	ed2d 8b02 	vpush	{d8}
 8018128:	b09d      	sub	sp, #116	; 0x74
 801812a:	461f      	mov	r7, r3
 801812c:	2300      	movs	r3, #0
 801812e:	9318      	str	r3, [sp, #96]	; 0x60
 8018130:	4ba2      	ldr	r3, [pc, #648]	; (80183bc <_strtod_l+0x29c>)
 8018132:	9213      	str	r2, [sp, #76]	; 0x4c
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	9305      	str	r3, [sp, #20]
 8018138:	4604      	mov	r4, r0
 801813a:	4618      	mov	r0, r3
 801813c:	4688      	mov	r8, r1
 801813e:	f7e8 f867 	bl	8000210 <strlen>
 8018142:	f04f 0a00 	mov.w	sl, #0
 8018146:	4605      	mov	r5, r0
 8018148:	f04f 0b00 	mov.w	fp, #0
 801814c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8018150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018152:	781a      	ldrb	r2, [r3, #0]
 8018154:	2a2b      	cmp	r2, #43	; 0x2b
 8018156:	d04e      	beq.n	80181f6 <_strtod_l+0xd6>
 8018158:	d83b      	bhi.n	80181d2 <_strtod_l+0xb2>
 801815a:	2a0d      	cmp	r2, #13
 801815c:	d834      	bhi.n	80181c8 <_strtod_l+0xa8>
 801815e:	2a08      	cmp	r2, #8
 8018160:	d834      	bhi.n	80181cc <_strtod_l+0xac>
 8018162:	2a00      	cmp	r2, #0
 8018164:	d03e      	beq.n	80181e4 <_strtod_l+0xc4>
 8018166:	2300      	movs	r3, #0
 8018168:	930a      	str	r3, [sp, #40]	; 0x28
 801816a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801816c:	7833      	ldrb	r3, [r6, #0]
 801816e:	2b30      	cmp	r3, #48	; 0x30
 8018170:	f040 80b0 	bne.w	80182d4 <_strtod_l+0x1b4>
 8018174:	7873      	ldrb	r3, [r6, #1]
 8018176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801817a:	2b58      	cmp	r3, #88	; 0x58
 801817c:	d168      	bne.n	8018250 <_strtod_l+0x130>
 801817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018180:	9301      	str	r3, [sp, #4]
 8018182:	ab18      	add	r3, sp, #96	; 0x60
 8018184:	9702      	str	r7, [sp, #8]
 8018186:	9300      	str	r3, [sp, #0]
 8018188:	4a8d      	ldr	r2, [pc, #564]	; (80183c0 <_strtod_l+0x2a0>)
 801818a:	ab19      	add	r3, sp, #100	; 0x64
 801818c:	a917      	add	r1, sp, #92	; 0x5c
 801818e:	4620      	mov	r0, r4
 8018190:	f000 ffb0 	bl	80190f4 <__gethex>
 8018194:	f010 0707 	ands.w	r7, r0, #7
 8018198:	4605      	mov	r5, r0
 801819a:	d005      	beq.n	80181a8 <_strtod_l+0x88>
 801819c:	2f06      	cmp	r7, #6
 801819e:	d12c      	bne.n	80181fa <_strtod_l+0xda>
 80181a0:	3601      	adds	r6, #1
 80181a2:	2300      	movs	r3, #0
 80181a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80181a6:	930a      	str	r3, [sp, #40]	; 0x28
 80181a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	f040 8590 	bne.w	8018cd0 <_strtod_l+0xbb0>
 80181b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181b2:	b1eb      	cbz	r3, 80181f0 <_strtod_l+0xd0>
 80181b4:	4652      	mov	r2, sl
 80181b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80181ba:	ec43 2b10 	vmov	d0, r2, r3
 80181be:	b01d      	add	sp, #116	; 0x74
 80181c0:	ecbd 8b02 	vpop	{d8}
 80181c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c8:	2a20      	cmp	r2, #32
 80181ca:	d1cc      	bne.n	8018166 <_strtod_l+0x46>
 80181cc:	3301      	adds	r3, #1
 80181ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80181d0:	e7be      	b.n	8018150 <_strtod_l+0x30>
 80181d2:	2a2d      	cmp	r2, #45	; 0x2d
 80181d4:	d1c7      	bne.n	8018166 <_strtod_l+0x46>
 80181d6:	2201      	movs	r2, #1
 80181d8:	920a      	str	r2, [sp, #40]	; 0x28
 80181da:	1c5a      	adds	r2, r3, #1
 80181dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80181de:	785b      	ldrb	r3, [r3, #1]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d1c2      	bne.n	801816a <_strtod_l+0x4a>
 80181e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80181e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	f040 856e 	bne.w	8018ccc <_strtod_l+0xbac>
 80181f0:	4652      	mov	r2, sl
 80181f2:	465b      	mov	r3, fp
 80181f4:	e7e1      	b.n	80181ba <_strtod_l+0x9a>
 80181f6:	2200      	movs	r2, #0
 80181f8:	e7ee      	b.n	80181d8 <_strtod_l+0xb8>
 80181fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80181fc:	b13a      	cbz	r2, 801820e <_strtod_l+0xee>
 80181fe:	2135      	movs	r1, #53	; 0x35
 8018200:	a81a      	add	r0, sp, #104	; 0x68
 8018202:	f001 ff34 	bl	801a06e <__copybits>
 8018206:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018208:	4620      	mov	r0, r4
 801820a:	f001 faf3 	bl	80197f4 <_Bfree>
 801820e:	3f01      	subs	r7, #1
 8018210:	2f04      	cmp	r7, #4
 8018212:	d806      	bhi.n	8018222 <_strtod_l+0x102>
 8018214:	e8df f007 	tbb	[pc, r7]
 8018218:	1714030a 	.word	0x1714030a
 801821c:	0a          	.byte	0x0a
 801821d:	00          	.byte	0x00
 801821e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8018222:	0728      	lsls	r0, r5, #28
 8018224:	d5c0      	bpl.n	80181a8 <_strtod_l+0x88>
 8018226:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801822a:	e7bd      	b.n	80181a8 <_strtod_l+0x88>
 801822c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8018230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801823a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801823e:	e7f0      	b.n	8018222 <_strtod_l+0x102>
 8018240:	f8df b180 	ldr.w	fp, [pc, #384]	; 80183c4 <_strtod_l+0x2a4>
 8018244:	e7ed      	b.n	8018222 <_strtod_l+0x102>
 8018246:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801824a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801824e:	e7e8      	b.n	8018222 <_strtod_l+0x102>
 8018250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018252:	1c5a      	adds	r2, r3, #1
 8018254:	9217      	str	r2, [sp, #92]	; 0x5c
 8018256:	785b      	ldrb	r3, [r3, #1]
 8018258:	2b30      	cmp	r3, #48	; 0x30
 801825a:	d0f9      	beq.n	8018250 <_strtod_l+0x130>
 801825c:	2b00      	cmp	r3, #0
 801825e:	d0a3      	beq.n	80181a8 <_strtod_l+0x88>
 8018260:	2301      	movs	r3, #1
 8018262:	f04f 0900 	mov.w	r9, #0
 8018266:	9304      	str	r3, [sp, #16]
 8018268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801826a:	9308      	str	r3, [sp, #32]
 801826c:	f8cd 901c 	str.w	r9, [sp, #28]
 8018270:	464f      	mov	r7, r9
 8018272:	220a      	movs	r2, #10
 8018274:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018276:	7806      	ldrb	r6, [r0, #0]
 8018278:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801827c:	b2d9      	uxtb	r1, r3
 801827e:	2909      	cmp	r1, #9
 8018280:	d92a      	bls.n	80182d8 <_strtod_l+0x1b8>
 8018282:	9905      	ldr	r1, [sp, #20]
 8018284:	462a      	mov	r2, r5
 8018286:	f7ff ff06 	bl	8018096 <strncmp>
 801828a:	b398      	cbz	r0, 80182f4 <_strtod_l+0x1d4>
 801828c:	2000      	movs	r0, #0
 801828e:	4632      	mov	r2, r6
 8018290:	463d      	mov	r5, r7
 8018292:	9005      	str	r0, [sp, #20]
 8018294:	4603      	mov	r3, r0
 8018296:	2a65      	cmp	r2, #101	; 0x65
 8018298:	d001      	beq.n	801829e <_strtod_l+0x17e>
 801829a:	2a45      	cmp	r2, #69	; 0x45
 801829c:	d118      	bne.n	80182d0 <_strtod_l+0x1b0>
 801829e:	b91d      	cbnz	r5, 80182a8 <_strtod_l+0x188>
 80182a0:	9a04      	ldr	r2, [sp, #16]
 80182a2:	4302      	orrs	r2, r0
 80182a4:	d09e      	beq.n	80181e4 <_strtod_l+0xc4>
 80182a6:	2500      	movs	r5, #0
 80182a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80182ac:	f108 0201 	add.w	r2, r8, #1
 80182b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80182b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80182b6:	2a2b      	cmp	r2, #43	; 0x2b
 80182b8:	d075      	beq.n	80183a6 <_strtod_l+0x286>
 80182ba:	2a2d      	cmp	r2, #45	; 0x2d
 80182bc:	d07b      	beq.n	80183b6 <_strtod_l+0x296>
 80182be:	f04f 0c00 	mov.w	ip, #0
 80182c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80182c6:	2909      	cmp	r1, #9
 80182c8:	f240 8082 	bls.w	80183d0 <_strtod_l+0x2b0>
 80182cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80182d0:	2600      	movs	r6, #0
 80182d2:	e09d      	b.n	8018410 <_strtod_l+0x2f0>
 80182d4:	2300      	movs	r3, #0
 80182d6:	e7c4      	b.n	8018262 <_strtod_l+0x142>
 80182d8:	2f08      	cmp	r7, #8
 80182da:	bfd8      	it	le
 80182dc:	9907      	ldrle	r1, [sp, #28]
 80182de:	f100 0001 	add.w	r0, r0, #1
 80182e2:	bfda      	itte	le
 80182e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80182e8:	9307      	strle	r3, [sp, #28]
 80182ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80182ee:	3701      	adds	r7, #1
 80182f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80182f2:	e7bf      	b.n	8018274 <_strtod_l+0x154>
 80182f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80182f6:	195a      	adds	r2, r3, r5
 80182f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80182fa:	5d5a      	ldrb	r2, [r3, r5]
 80182fc:	2f00      	cmp	r7, #0
 80182fe:	d037      	beq.n	8018370 <_strtod_l+0x250>
 8018300:	9005      	str	r0, [sp, #20]
 8018302:	463d      	mov	r5, r7
 8018304:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018308:	2b09      	cmp	r3, #9
 801830a:	d912      	bls.n	8018332 <_strtod_l+0x212>
 801830c:	2301      	movs	r3, #1
 801830e:	e7c2      	b.n	8018296 <_strtod_l+0x176>
 8018310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018312:	1c5a      	adds	r2, r3, #1
 8018314:	9217      	str	r2, [sp, #92]	; 0x5c
 8018316:	785a      	ldrb	r2, [r3, #1]
 8018318:	3001      	adds	r0, #1
 801831a:	2a30      	cmp	r2, #48	; 0x30
 801831c:	d0f8      	beq.n	8018310 <_strtod_l+0x1f0>
 801831e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018322:	2b08      	cmp	r3, #8
 8018324:	f200 84d9 	bhi.w	8018cda <_strtod_l+0xbba>
 8018328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801832a:	9005      	str	r0, [sp, #20]
 801832c:	2000      	movs	r0, #0
 801832e:	9308      	str	r3, [sp, #32]
 8018330:	4605      	mov	r5, r0
 8018332:	3a30      	subs	r2, #48	; 0x30
 8018334:	f100 0301 	add.w	r3, r0, #1
 8018338:	d014      	beq.n	8018364 <_strtod_l+0x244>
 801833a:	9905      	ldr	r1, [sp, #20]
 801833c:	4419      	add	r1, r3
 801833e:	9105      	str	r1, [sp, #20]
 8018340:	462b      	mov	r3, r5
 8018342:	eb00 0e05 	add.w	lr, r0, r5
 8018346:	210a      	movs	r1, #10
 8018348:	4573      	cmp	r3, lr
 801834a:	d113      	bne.n	8018374 <_strtod_l+0x254>
 801834c:	182b      	adds	r3, r5, r0
 801834e:	2b08      	cmp	r3, #8
 8018350:	f105 0501 	add.w	r5, r5, #1
 8018354:	4405      	add	r5, r0
 8018356:	dc1c      	bgt.n	8018392 <_strtod_l+0x272>
 8018358:	9907      	ldr	r1, [sp, #28]
 801835a:	230a      	movs	r3, #10
 801835c:	fb03 2301 	mla	r3, r3, r1, r2
 8018360:	9307      	str	r3, [sp, #28]
 8018362:	2300      	movs	r3, #0
 8018364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018366:	1c51      	adds	r1, r2, #1
 8018368:	9117      	str	r1, [sp, #92]	; 0x5c
 801836a:	7852      	ldrb	r2, [r2, #1]
 801836c:	4618      	mov	r0, r3
 801836e:	e7c9      	b.n	8018304 <_strtod_l+0x1e4>
 8018370:	4638      	mov	r0, r7
 8018372:	e7d2      	b.n	801831a <_strtod_l+0x1fa>
 8018374:	2b08      	cmp	r3, #8
 8018376:	dc04      	bgt.n	8018382 <_strtod_l+0x262>
 8018378:	9e07      	ldr	r6, [sp, #28]
 801837a:	434e      	muls	r6, r1
 801837c:	9607      	str	r6, [sp, #28]
 801837e:	3301      	adds	r3, #1
 8018380:	e7e2      	b.n	8018348 <_strtod_l+0x228>
 8018382:	f103 0c01 	add.w	ip, r3, #1
 8018386:	f1bc 0f10 	cmp.w	ip, #16
 801838a:	bfd8      	it	le
 801838c:	fb01 f909 	mulle.w	r9, r1, r9
 8018390:	e7f5      	b.n	801837e <_strtod_l+0x25e>
 8018392:	2d10      	cmp	r5, #16
 8018394:	bfdc      	itt	le
 8018396:	230a      	movle	r3, #10
 8018398:	fb03 2909 	mlale	r9, r3, r9, r2
 801839c:	e7e1      	b.n	8018362 <_strtod_l+0x242>
 801839e:	2300      	movs	r3, #0
 80183a0:	9305      	str	r3, [sp, #20]
 80183a2:	2301      	movs	r3, #1
 80183a4:	e77c      	b.n	80182a0 <_strtod_l+0x180>
 80183a6:	f04f 0c00 	mov.w	ip, #0
 80183aa:	f108 0202 	add.w	r2, r8, #2
 80183ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80183b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80183b4:	e785      	b.n	80182c2 <_strtod_l+0x1a2>
 80183b6:	f04f 0c01 	mov.w	ip, #1
 80183ba:	e7f6      	b.n	80183aa <_strtod_l+0x28a>
 80183bc:	0801e588 	.word	0x0801e588
 80183c0:	0801e424 	.word	0x0801e424
 80183c4:	7ff00000 	.word	0x7ff00000
 80183c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80183ca:	1c51      	adds	r1, r2, #1
 80183cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80183ce:	7852      	ldrb	r2, [r2, #1]
 80183d0:	2a30      	cmp	r2, #48	; 0x30
 80183d2:	d0f9      	beq.n	80183c8 <_strtod_l+0x2a8>
 80183d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80183d8:	2908      	cmp	r1, #8
 80183da:	f63f af79 	bhi.w	80182d0 <_strtod_l+0x1b0>
 80183de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80183e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80183e4:	9206      	str	r2, [sp, #24]
 80183e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80183e8:	1c51      	adds	r1, r2, #1
 80183ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80183ec:	7852      	ldrb	r2, [r2, #1]
 80183ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80183f2:	2e09      	cmp	r6, #9
 80183f4:	d937      	bls.n	8018466 <_strtod_l+0x346>
 80183f6:	9e06      	ldr	r6, [sp, #24]
 80183f8:	1b89      	subs	r1, r1, r6
 80183fa:	2908      	cmp	r1, #8
 80183fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018400:	dc02      	bgt.n	8018408 <_strtod_l+0x2e8>
 8018402:	4576      	cmp	r6, lr
 8018404:	bfa8      	it	ge
 8018406:	4676      	movge	r6, lr
 8018408:	f1bc 0f00 	cmp.w	ip, #0
 801840c:	d000      	beq.n	8018410 <_strtod_l+0x2f0>
 801840e:	4276      	negs	r6, r6
 8018410:	2d00      	cmp	r5, #0
 8018412:	d14d      	bne.n	80184b0 <_strtod_l+0x390>
 8018414:	9904      	ldr	r1, [sp, #16]
 8018416:	4301      	orrs	r1, r0
 8018418:	f47f aec6 	bne.w	80181a8 <_strtod_l+0x88>
 801841c:	2b00      	cmp	r3, #0
 801841e:	f47f aee1 	bne.w	80181e4 <_strtod_l+0xc4>
 8018422:	2a69      	cmp	r2, #105	; 0x69
 8018424:	d027      	beq.n	8018476 <_strtod_l+0x356>
 8018426:	dc24      	bgt.n	8018472 <_strtod_l+0x352>
 8018428:	2a49      	cmp	r2, #73	; 0x49
 801842a:	d024      	beq.n	8018476 <_strtod_l+0x356>
 801842c:	2a4e      	cmp	r2, #78	; 0x4e
 801842e:	f47f aed9 	bne.w	80181e4 <_strtod_l+0xc4>
 8018432:	499f      	ldr	r1, [pc, #636]	; (80186b0 <_strtod_l+0x590>)
 8018434:	a817      	add	r0, sp, #92	; 0x5c
 8018436:	f001 f8b5 	bl	80195a4 <__match>
 801843a:	2800      	cmp	r0, #0
 801843c:	f43f aed2 	beq.w	80181e4 <_strtod_l+0xc4>
 8018440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018442:	781b      	ldrb	r3, [r3, #0]
 8018444:	2b28      	cmp	r3, #40	; 0x28
 8018446:	d12d      	bne.n	80184a4 <_strtod_l+0x384>
 8018448:	499a      	ldr	r1, [pc, #616]	; (80186b4 <_strtod_l+0x594>)
 801844a:	aa1a      	add	r2, sp, #104	; 0x68
 801844c:	a817      	add	r0, sp, #92	; 0x5c
 801844e:	f001 f8bd 	bl	80195cc <__hexnan>
 8018452:	2805      	cmp	r0, #5
 8018454:	d126      	bne.n	80184a4 <_strtod_l+0x384>
 8018456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018458:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801845c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018460:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018464:	e6a0      	b.n	80181a8 <_strtod_l+0x88>
 8018466:	210a      	movs	r1, #10
 8018468:	fb01 2e0e 	mla	lr, r1, lr, r2
 801846c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018470:	e7b9      	b.n	80183e6 <_strtod_l+0x2c6>
 8018472:	2a6e      	cmp	r2, #110	; 0x6e
 8018474:	e7db      	b.n	801842e <_strtod_l+0x30e>
 8018476:	4990      	ldr	r1, [pc, #576]	; (80186b8 <_strtod_l+0x598>)
 8018478:	a817      	add	r0, sp, #92	; 0x5c
 801847a:	f001 f893 	bl	80195a4 <__match>
 801847e:	2800      	cmp	r0, #0
 8018480:	f43f aeb0 	beq.w	80181e4 <_strtod_l+0xc4>
 8018484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018486:	498d      	ldr	r1, [pc, #564]	; (80186bc <_strtod_l+0x59c>)
 8018488:	3b01      	subs	r3, #1
 801848a:	a817      	add	r0, sp, #92	; 0x5c
 801848c:	9317      	str	r3, [sp, #92]	; 0x5c
 801848e:	f001 f889 	bl	80195a4 <__match>
 8018492:	b910      	cbnz	r0, 801849a <_strtod_l+0x37a>
 8018494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018496:	3301      	adds	r3, #1
 8018498:	9317      	str	r3, [sp, #92]	; 0x5c
 801849a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80186cc <_strtod_l+0x5ac>
 801849e:	f04f 0a00 	mov.w	sl, #0
 80184a2:	e681      	b.n	80181a8 <_strtod_l+0x88>
 80184a4:	4886      	ldr	r0, [pc, #536]	; (80186c0 <_strtod_l+0x5a0>)
 80184a6:	f002 fae7 	bl	801aa78 <nan>
 80184aa:	ec5b ab10 	vmov	sl, fp, d0
 80184ae:	e67b      	b.n	80181a8 <_strtod_l+0x88>
 80184b0:	9b05      	ldr	r3, [sp, #20]
 80184b2:	9807      	ldr	r0, [sp, #28]
 80184b4:	1af3      	subs	r3, r6, r3
 80184b6:	2f00      	cmp	r7, #0
 80184b8:	bf08      	it	eq
 80184ba:	462f      	moveq	r7, r5
 80184bc:	2d10      	cmp	r5, #16
 80184be:	9306      	str	r3, [sp, #24]
 80184c0:	46a8      	mov	r8, r5
 80184c2:	bfa8      	it	ge
 80184c4:	f04f 0810 	movge.w	r8, #16
 80184c8:	f7e8 f83c 	bl	8000544 <__aeabi_ui2d>
 80184cc:	2d09      	cmp	r5, #9
 80184ce:	4682      	mov	sl, r0
 80184d0:	468b      	mov	fp, r1
 80184d2:	dd13      	ble.n	80184fc <_strtod_l+0x3dc>
 80184d4:	4b7b      	ldr	r3, [pc, #492]	; (80186c4 <_strtod_l+0x5a4>)
 80184d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80184da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80184de:	f7e8 f8ab 	bl	8000638 <__aeabi_dmul>
 80184e2:	4682      	mov	sl, r0
 80184e4:	4648      	mov	r0, r9
 80184e6:	468b      	mov	fp, r1
 80184e8:	f7e8 f82c 	bl	8000544 <__aeabi_ui2d>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	4650      	mov	r0, sl
 80184f2:	4659      	mov	r1, fp
 80184f4:	f7e7 feea 	bl	80002cc <__adddf3>
 80184f8:	4682      	mov	sl, r0
 80184fa:	468b      	mov	fp, r1
 80184fc:	2d0f      	cmp	r5, #15
 80184fe:	dc38      	bgt.n	8018572 <_strtod_l+0x452>
 8018500:	9b06      	ldr	r3, [sp, #24]
 8018502:	2b00      	cmp	r3, #0
 8018504:	f43f ae50 	beq.w	80181a8 <_strtod_l+0x88>
 8018508:	dd24      	ble.n	8018554 <_strtod_l+0x434>
 801850a:	2b16      	cmp	r3, #22
 801850c:	dc0b      	bgt.n	8018526 <_strtod_l+0x406>
 801850e:	496d      	ldr	r1, [pc, #436]	; (80186c4 <_strtod_l+0x5a4>)
 8018510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018518:	4652      	mov	r2, sl
 801851a:	465b      	mov	r3, fp
 801851c:	f7e8 f88c 	bl	8000638 <__aeabi_dmul>
 8018520:	4682      	mov	sl, r0
 8018522:	468b      	mov	fp, r1
 8018524:	e640      	b.n	80181a8 <_strtod_l+0x88>
 8018526:	9a06      	ldr	r2, [sp, #24]
 8018528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801852c:	4293      	cmp	r3, r2
 801852e:	db20      	blt.n	8018572 <_strtod_l+0x452>
 8018530:	4c64      	ldr	r4, [pc, #400]	; (80186c4 <_strtod_l+0x5a4>)
 8018532:	f1c5 050f 	rsb	r5, r5, #15
 8018536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801853a:	4652      	mov	r2, sl
 801853c:	465b      	mov	r3, fp
 801853e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018542:	f7e8 f879 	bl	8000638 <__aeabi_dmul>
 8018546:	9b06      	ldr	r3, [sp, #24]
 8018548:	1b5d      	subs	r5, r3, r5
 801854a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801854e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018552:	e7e3      	b.n	801851c <_strtod_l+0x3fc>
 8018554:	9b06      	ldr	r3, [sp, #24]
 8018556:	3316      	adds	r3, #22
 8018558:	db0b      	blt.n	8018572 <_strtod_l+0x452>
 801855a:	9b05      	ldr	r3, [sp, #20]
 801855c:	1b9e      	subs	r6, r3, r6
 801855e:	4b59      	ldr	r3, [pc, #356]	; (80186c4 <_strtod_l+0x5a4>)
 8018560:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8018564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018568:	4650      	mov	r0, sl
 801856a:	4659      	mov	r1, fp
 801856c:	f7e8 f98e 	bl	800088c <__aeabi_ddiv>
 8018570:	e7d6      	b.n	8018520 <_strtod_l+0x400>
 8018572:	9b06      	ldr	r3, [sp, #24]
 8018574:	eba5 0808 	sub.w	r8, r5, r8
 8018578:	4498      	add	r8, r3
 801857a:	f1b8 0f00 	cmp.w	r8, #0
 801857e:	dd74      	ble.n	801866a <_strtod_l+0x54a>
 8018580:	f018 030f 	ands.w	r3, r8, #15
 8018584:	d00a      	beq.n	801859c <_strtod_l+0x47c>
 8018586:	494f      	ldr	r1, [pc, #316]	; (80186c4 <_strtod_l+0x5a4>)
 8018588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801858c:	4652      	mov	r2, sl
 801858e:	465b      	mov	r3, fp
 8018590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018594:	f7e8 f850 	bl	8000638 <__aeabi_dmul>
 8018598:	4682      	mov	sl, r0
 801859a:	468b      	mov	fp, r1
 801859c:	f038 080f 	bics.w	r8, r8, #15
 80185a0:	d04f      	beq.n	8018642 <_strtod_l+0x522>
 80185a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80185a6:	dd22      	ble.n	80185ee <_strtod_l+0x4ce>
 80185a8:	2500      	movs	r5, #0
 80185aa:	462e      	mov	r6, r5
 80185ac:	9507      	str	r5, [sp, #28]
 80185ae:	9505      	str	r5, [sp, #20]
 80185b0:	2322      	movs	r3, #34	; 0x22
 80185b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80186cc <_strtod_l+0x5ac>
 80185b6:	6023      	str	r3, [r4, #0]
 80185b8:	f04f 0a00 	mov.w	sl, #0
 80185bc:	9b07      	ldr	r3, [sp, #28]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	f43f adf2 	beq.w	80181a8 <_strtod_l+0x88>
 80185c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80185c6:	4620      	mov	r0, r4
 80185c8:	f001 f914 	bl	80197f4 <_Bfree>
 80185cc:	9905      	ldr	r1, [sp, #20]
 80185ce:	4620      	mov	r0, r4
 80185d0:	f001 f910 	bl	80197f4 <_Bfree>
 80185d4:	4631      	mov	r1, r6
 80185d6:	4620      	mov	r0, r4
 80185d8:	f001 f90c 	bl	80197f4 <_Bfree>
 80185dc:	9907      	ldr	r1, [sp, #28]
 80185de:	4620      	mov	r0, r4
 80185e0:	f001 f908 	bl	80197f4 <_Bfree>
 80185e4:	4629      	mov	r1, r5
 80185e6:	4620      	mov	r0, r4
 80185e8:	f001 f904 	bl	80197f4 <_Bfree>
 80185ec:	e5dc      	b.n	80181a8 <_strtod_l+0x88>
 80185ee:	4b36      	ldr	r3, [pc, #216]	; (80186c8 <_strtod_l+0x5a8>)
 80185f0:	9304      	str	r3, [sp, #16]
 80185f2:	2300      	movs	r3, #0
 80185f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80185f8:	4650      	mov	r0, sl
 80185fa:	4659      	mov	r1, fp
 80185fc:	4699      	mov	r9, r3
 80185fe:	f1b8 0f01 	cmp.w	r8, #1
 8018602:	dc21      	bgt.n	8018648 <_strtod_l+0x528>
 8018604:	b10b      	cbz	r3, 801860a <_strtod_l+0x4ea>
 8018606:	4682      	mov	sl, r0
 8018608:	468b      	mov	fp, r1
 801860a:	4b2f      	ldr	r3, [pc, #188]	; (80186c8 <_strtod_l+0x5a8>)
 801860c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018610:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8018614:	4652      	mov	r2, sl
 8018616:	465b      	mov	r3, fp
 8018618:	e9d9 0100 	ldrd	r0, r1, [r9]
 801861c:	f7e8 f80c 	bl	8000638 <__aeabi_dmul>
 8018620:	4b2a      	ldr	r3, [pc, #168]	; (80186cc <_strtod_l+0x5ac>)
 8018622:	460a      	mov	r2, r1
 8018624:	400b      	ands	r3, r1
 8018626:	492a      	ldr	r1, [pc, #168]	; (80186d0 <_strtod_l+0x5b0>)
 8018628:	428b      	cmp	r3, r1
 801862a:	4682      	mov	sl, r0
 801862c:	d8bc      	bhi.n	80185a8 <_strtod_l+0x488>
 801862e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018632:	428b      	cmp	r3, r1
 8018634:	bf86      	itte	hi
 8018636:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80186d4 <_strtod_l+0x5b4>
 801863a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801863e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018642:	2300      	movs	r3, #0
 8018644:	9304      	str	r3, [sp, #16]
 8018646:	e084      	b.n	8018752 <_strtod_l+0x632>
 8018648:	f018 0f01 	tst.w	r8, #1
 801864c:	d005      	beq.n	801865a <_strtod_l+0x53a>
 801864e:	9b04      	ldr	r3, [sp, #16]
 8018650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018654:	f7e7 fff0 	bl	8000638 <__aeabi_dmul>
 8018658:	2301      	movs	r3, #1
 801865a:	9a04      	ldr	r2, [sp, #16]
 801865c:	3208      	adds	r2, #8
 801865e:	f109 0901 	add.w	r9, r9, #1
 8018662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018666:	9204      	str	r2, [sp, #16]
 8018668:	e7c9      	b.n	80185fe <_strtod_l+0x4de>
 801866a:	d0ea      	beq.n	8018642 <_strtod_l+0x522>
 801866c:	f1c8 0800 	rsb	r8, r8, #0
 8018670:	f018 020f 	ands.w	r2, r8, #15
 8018674:	d00a      	beq.n	801868c <_strtod_l+0x56c>
 8018676:	4b13      	ldr	r3, [pc, #76]	; (80186c4 <_strtod_l+0x5a4>)
 8018678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801867c:	4650      	mov	r0, sl
 801867e:	4659      	mov	r1, fp
 8018680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018684:	f7e8 f902 	bl	800088c <__aeabi_ddiv>
 8018688:	4682      	mov	sl, r0
 801868a:	468b      	mov	fp, r1
 801868c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8018690:	d0d7      	beq.n	8018642 <_strtod_l+0x522>
 8018692:	f1b8 0f1f 	cmp.w	r8, #31
 8018696:	dd1f      	ble.n	80186d8 <_strtod_l+0x5b8>
 8018698:	2500      	movs	r5, #0
 801869a:	462e      	mov	r6, r5
 801869c:	9507      	str	r5, [sp, #28]
 801869e:	9505      	str	r5, [sp, #20]
 80186a0:	2322      	movs	r3, #34	; 0x22
 80186a2:	f04f 0a00 	mov.w	sl, #0
 80186a6:	f04f 0b00 	mov.w	fp, #0
 80186aa:	6023      	str	r3, [r4, #0]
 80186ac:	e786      	b.n	80185bc <_strtod_l+0x49c>
 80186ae:	bf00      	nop
 80186b0:	0801e41f 	.word	0x0801e41f
 80186b4:	0801e438 	.word	0x0801e438
 80186b8:	0801e416 	.word	0x0801e416
 80186bc:	0801e419 	.word	0x0801e419
 80186c0:	0801e510 	.word	0x0801e510
 80186c4:	0801e620 	.word	0x0801e620
 80186c8:	0801e5f8 	.word	0x0801e5f8
 80186cc:	7ff00000 	.word	0x7ff00000
 80186d0:	7ca00000 	.word	0x7ca00000
 80186d4:	7fefffff 	.word	0x7fefffff
 80186d8:	f018 0310 	ands.w	r3, r8, #16
 80186dc:	bf18      	it	ne
 80186de:	236a      	movne	r3, #106	; 0x6a
 80186e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8018a90 <_strtod_l+0x970>
 80186e4:	9304      	str	r3, [sp, #16]
 80186e6:	4650      	mov	r0, sl
 80186e8:	4659      	mov	r1, fp
 80186ea:	2300      	movs	r3, #0
 80186ec:	f018 0f01 	tst.w	r8, #1
 80186f0:	d004      	beq.n	80186fc <_strtod_l+0x5dc>
 80186f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80186f6:	f7e7 ff9f 	bl	8000638 <__aeabi_dmul>
 80186fa:	2301      	movs	r3, #1
 80186fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018700:	f109 0908 	add.w	r9, r9, #8
 8018704:	d1f2      	bne.n	80186ec <_strtod_l+0x5cc>
 8018706:	b10b      	cbz	r3, 801870c <_strtod_l+0x5ec>
 8018708:	4682      	mov	sl, r0
 801870a:	468b      	mov	fp, r1
 801870c:	9b04      	ldr	r3, [sp, #16]
 801870e:	b1c3      	cbz	r3, 8018742 <_strtod_l+0x622>
 8018710:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8018714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018718:	2b00      	cmp	r3, #0
 801871a:	4659      	mov	r1, fp
 801871c:	dd11      	ble.n	8018742 <_strtod_l+0x622>
 801871e:	2b1f      	cmp	r3, #31
 8018720:	f340 8124 	ble.w	801896c <_strtod_l+0x84c>
 8018724:	2b34      	cmp	r3, #52	; 0x34
 8018726:	bfde      	ittt	le
 8018728:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801872c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8018730:	fa03 f202 	lslle.w	r2, r3, r2
 8018734:	f04f 0a00 	mov.w	sl, #0
 8018738:	bfcc      	ite	gt
 801873a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801873e:	ea02 0b01 	andle.w	fp, r2, r1
 8018742:	2200      	movs	r2, #0
 8018744:	2300      	movs	r3, #0
 8018746:	4650      	mov	r0, sl
 8018748:	4659      	mov	r1, fp
 801874a:	f7e8 f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 801874e:	2800      	cmp	r0, #0
 8018750:	d1a2      	bne.n	8018698 <_strtod_l+0x578>
 8018752:	9b07      	ldr	r3, [sp, #28]
 8018754:	9300      	str	r3, [sp, #0]
 8018756:	9908      	ldr	r1, [sp, #32]
 8018758:	462b      	mov	r3, r5
 801875a:	463a      	mov	r2, r7
 801875c:	4620      	mov	r0, r4
 801875e:	f001 f8b1 	bl	80198c4 <__s2b>
 8018762:	9007      	str	r0, [sp, #28]
 8018764:	2800      	cmp	r0, #0
 8018766:	f43f af1f 	beq.w	80185a8 <_strtod_l+0x488>
 801876a:	9b05      	ldr	r3, [sp, #20]
 801876c:	1b9e      	subs	r6, r3, r6
 801876e:	9b06      	ldr	r3, [sp, #24]
 8018770:	2b00      	cmp	r3, #0
 8018772:	bfb4      	ite	lt
 8018774:	4633      	movlt	r3, r6
 8018776:	2300      	movge	r3, #0
 8018778:	930c      	str	r3, [sp, #48]	; 0x30
 801877a:	9b06      	ldr	r3, [sp, #24]
 801877c:	2500      	movs	r5, #0
 801877e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018782:	9312      	str	r3, [sp, #72]	; 0x48
 8018784:	462e      	mov	r6, r5
 8018786:	9b07      	ldr	r3, [sp, #28]
 8018788:	4620      	mov	r0, r4
 801878a:	6859      	ldr	r1, [r3, #4]
 801878c:	f000 fff2 	bl	8019774 <_Balloc>
 8018790:	9005      	str	r0, [sp, #20]
 8018792:	2800      	cmp	r0, #0
 8018794:	f43f af0c 	beq.w	80185b0 <_strtod_l+0x490>
 8018798:	9b07      	ldr	r3, [sp, #28]
 801879a:	691a      	ldr	r2, [r3, #16]
 801879c:	3202      	adds	r2, #2
 801879e:	f103 010c 	add.w	r1, r3, #12
 80187a2:	0092      	lsls	r2, r2, #2
 80187a4:	300c      	adds	r0, #12
 80187a6:	f7ff fa7e 	bl	8017ca6 <memcpy>
 80187aa:	ec4b ab10 	vmov	d0, sl, fp
 80187ae:	aa1a      	add	r2, sp, #104	; 0x68
 80187b0:	a919      	add	r1, sp, #100	; 0x64
 80187b2:	4620      	mov	r0, r4
 80187b4:	f001 fbcc 	bl	8019f50 <__d2b>
 80187b8:	ec4b ab18 	vmov	d8, sl, fp
 80187bc:	9018      	str	r0, [sp, #96]	; 0x60
 80187be:	2800      	cmp	r0, #0
 80187c0:	f43f aef6 	beq.w	80185b0 <_strtod_l+0x490>
 80187c4:	2101      	movs	r1, #1
 80187c6:	4620      	mov	r0, r4
 80187c8:	f001 f916 	bl	80199f8 <__i2b>
 80187cc:	4606      	mov	r6, r0
 80187ce:	2800      	cmp	r0, #0
 80187d0:	f43f aeee 	beq.w	80185b0 <_strtod_l+0x490>
 80187d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80187d6:	9904      	ldr	r1, [sp, #16]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	bfab      	itete	ge
 80187dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80187de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80187e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80187e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80187e6:	bfac      	ite	ge
 80187e8:	eb03 0902 	addge.w	r9, r3, r2
 80187ec:	1ad7      	sublt	r7, r2, r3
 80187ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80187f0:	eba3 0801 	sub.w	r8, r3, r1
 80187f4:	4490      	add	r8, r2
 80187f6:	4ba1      	ldr	r3, [pc, #644]	; (8018a7c <_strtod_l+0x95c>)
 80187f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80187fc:	4598      	cmp	r8, r3
 80187fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018802:	f280 80c7 	bge.w	8018994 <_strtod_l+0x874>
 8018806:	eba3 0308 	sub.w	r3, r3, r8
 801880a:	2b1f      	cmp	r3, #31
 801880c:	eba2 0203 	sub.w	r2, r2, r3
 8018810:	f04f 0101 	mov.w	r1, #1
 8018814:	f300 80b1 	bgt.w	801897a <_strtod_l+0x85a>
 8018818:	fa01 f303 	lsl.w	r3, r1, r3
 801881c:	930d      	str	r3, [sp, #52]	; 0x34
 801881e:	2300      	movs	r3, #0
 8018820:	9308      	str	r3, [sp, #32]
 8018822:	eb09 0802 	add.w	r8, r9, r2
 8018826:	9b04      	ldr	r3, [sp, #16]
 8018828:	45c1      	cmp	r9, r8
 801882a:	4417      	add	r7, r2
 801882c:	441f      	add	r7, r3
 801882e:	464b      	mov	r3, r9
 8018830:	bfa8      	it	ge
 8018832:	4643      	movge	r3, r8
 8018834:	42bb      	cmp	r3, r7
 8018836:	bfa8      	it	ge
 8018838:	463b      	movge	r3, r7
 801883a:	2b00      	cmp	r3, #0
 801883c:	bfc2      	ittt	gt
 801883e:	eba8 0803 	subgt.w	r8, r8, r3
 8018842:	1aff      	subgt	r7, r7, r3
 8018844:	eba9 0903 	subgt.w	r9, r9, r3
 8018848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801884a:	2b00      	cmp	r3, #0
 801884c:	dd17      	ble.n	801887e <_strtod_l+0x75e>
 801884e:	4631      	mov	r1, r6
 8018850:	461a      	mov	r2, r3
 8018852:	4620      	mov	r0, r4
 8018854:	f001 f990 	bl	8019b78 <__pow5mult>
 8018858:	4606      	mov	r6, r0
 801885a:	2800      	cmp	r0, #0
 801885c:	f43f aea8 	beq.w	80185b0 <_strtod_l+0x490>
 8018860:	4601      	mov	r1, r0
 8018862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018864:	4620      	mov	r0, r4
 8018866:	f001 f8dd 	bl	8019a24 <__multiply>
 801886a:	900b      	str	r0, [sp, #44]	; 0x2c
 801886c:	2800      	cmp	r0, #0
 801886e:	f43f ae9f 	beq.w	80185b0 <_strtod_l+0x490>
 8018872:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018874:	4620      	mov	r0, r4
 8018876:	f000 ffbd 	bl	80197f4 <_Bfree>
 801887a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801887c:	9318      	str	r3, [sp, #96]	; 0x60
 801887e:	f1b8 0f00 	cmp.w	r8, #0
 8018882:	f300 808c 	bgt.w	801899e <_strtod_l+0x87e>
 8018886:	9b06      	ldr	r3, [sp, #24]
 8018888:	2b00      	cmp	r3, #0
 801888a:	dd08      	ble.n	801889e <_strtod_l+0x77e>
 801888c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801888e:	9905      	ldr	r1, [sp, #20]
 8018890:	4620      	mov	r0, r4
 8018892:	f001 f971 	bl	8019b78 <__pow5mult>
 8018896:	9005      	str	r0, [sp, #20]
 8018898:	2800      	cmp	r0, #0
 801889a:	f43f ae89 	beq.w	80185b0 <_strtod_l+0x490>
 801889e:	2f00      	cmp	r7, #0
 80188a0:	dd08      	ble.n	80188b4 <_strtod_l+0x794>
 80188a2:	9905      	ldr	r1, [sp, #20]
 80188a4:	463a      	mov	r2, r7
 80188a6:	4620      	mov	r0, r4
 80188a8:	f001 f9c0 	bl	8019c2c <__lshift>
 80188ac:	9005      	str	r0, [sp, #20]
 80188ae:	2800      	cmp	r0, #0
 80188b0:	f43f ae7e 	beq.w	80185b0 <_strtod_l+0x490>
 80188b4:	f1b9 0f00 	cmp.w	r9, #0
 80188b8:	dd08      	ble.n	80188cc <_strtod_l+0x7ac>
 80188ba:	4631      	mov	r1, r6
 80188bc:	464a      	mov	r2, r9
 80188be:	4620      	mov	r0, r4
 80188c0:	f001 f9b4 	bl	8019c2c <__lshift>
 80188c4:	4606      	mov	r6, r0
 80188c6:	2800      	cmp	r0, #0
 80188c8:	f43f ae72 	beq.w	80185b0 <_strtod_l+0x490>
 80188cc:	9a05      	ldr	r2, [sp, #20]
 80188ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80188d0:	4620      	mov	r0, r4
 80188d2:	f001 fa37 	bl	8019d44 <__mdiff>
 80188d6:	4605      	mov	r5, r0
 80188d8:	2800      	cmp	r0, #0
 80188da:	f43f ae69 	beq.w	80185b0 <_strtod_l+0x490>
 80188de:	68c3      	ldr	r3, [r0, #12]
 80188e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80188e2:	2300      	movs	r3, #0
 80188e4:	60c3      	str	r3, [r0, #12]
 80188e6:	4631      	mov	r1, r6
 80188e8:	f001 fa10 	bl	8019d0c <__mcmp>
 80188ec:	2800      	cmp	r0, #0
 80188ee:	da60      	bge.n	80189b2 <_strtod_l+0x892>
 80188f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188f2:	ea53 030a 	orrs.w	r3, r3, sl
 80188f6:	f040 8082 	bne.w	80189fe <_strtod_l+0x8de>
 80188fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d17d      	bne.n	80189fe <_strtod_l+0x8de>
 8018902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018906:	0d1b      	lsrs	r3, r3, #20
 8018908:	051b      	lsls	r3, r3, #20
 801890a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801890e:	d976      	bls.n	80189fe <_strtod_l+0x8de>
 8018910:	696b      	ldr	r3, [r5, #20]
 8018912:	b913      	cbnz	r3, 801891a <_strtod_l+0x7fa>
 8018914:	692b      	ldr	r3, [r5, #16]
 8018916:	2b01      	cmp	r3, #1
 8018918:	dd71      	ble.n	80189fe <_strtod_l+0x8de>
 801891a:	4629      	mov	r1, r5
 801891c:	2201      	movs	r2, #1
 801891e:	4620      	mov	r0, r4
 8018920:	f001 f984 	bl	8019c2c <__lshift>
 8018924:	4631      	mov	r1, r6
 8018926:	4605      	mov	r5, r0
 8018928:	f001 f9f0 	bl	8019d0c <__mcmp>
 801892c:	2800      	cmp	r0, #0
 801892e:	dd66      	ble.n	80189fe <_strtod_l+0x8de>
 8018930:	9904      	ldr	r1, [sp, #16]
 8018932:	4a53      	ldr	r2, [pc, #332]	; (8018a80 <_strtod_l+0x960>)
 8018934:	465b      	mov	r3, fp
 8018936:	2900      	cmp	r1, #0
 8018938:	f000 8081 	beq.w	8018a3e <_strtod_l+0x91e>
 801893c:	ea02 010b 	and.w	r1, r2, fp
 8018940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018944:	dc7b      	bgt.n	8018a3e <_strtod_l+0x91e>
 8018946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801894a:	f77f aea9 	ble.w	80186a0 <_strtod_l+0x580>
 801894e:	4b4d      	ldr	r3, [pc, #308]	; (8018a84 <_strtod_l+0x964>)
 8018950:	4650      	mov	r0, sl
 8018952:	4659      	mov	r1, fp
 8018954:	2200      	movs	r2, #0
 8018956:	f7e7 fe6f 	bl	8000638 <__aeabi_dmul>
 801895a:	460b      	mov	r3, r1
 801895c:	4303      	orrs	r3, r0
 801895e:	bf08      	it	eq
 8018960:	2322      	moveq	r3, #34	; 0x22
 8018962:	4682      	mov	sl, r0
 8018964:	468b      	mov	fp, r1
 8018966:	bf08      	it	eq
 8018968:	6023      	streq	r3, [r4, #0]
 801896a:	e62b      	b.n	80185c4 <_strtod_l+0x4a4>
 801896c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018970:	fa02 f303 	lsl.w	r3, r2, r3
 8018974:	ea03 0a0a 	and.w	sl, r3, sl
 8018978:	e6e3      	b.n	8018742 <_strtod_l+0x622>
 801897a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801897e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8018982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8018986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801898a:	fa01 f308 	lsl.w	r3, r1, r8
 801898e:	9308      	str	r3, [sp, #32]
 8018990:	910d      	str	r1, [sp, #52]	; 0x34
 8018992:	e746      	b.n	8018822 <_strtod_l+0x702>
 8018994:	2300      	movs	r3, #0
 8018996:	9308      	str	r3, [sp, #32]
 8018998:	2301      	movs	r3, #1
 801899a:	930d      	str	r3, [sp, #52]	; 0x34
 801899c:	e741      	b.n	8018822 <_strtod_l+0x702>
 801899e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80189a0:	4642      	mov	r2, r8
 80189a2:	4620      	mov	r0, r4
 80189a4:	f001 f942 	bl	8019c2c <__lshift>
 80189a8:	9018      	str	r0, [sp, #96]	; 0x60
 80189aa:	2800      	cmp	r0, #0
 80189ac:	f47f af6b 	bne.w	8018886 <_strtod_l+0x766>
 80189b0:	e5fe      	b.n	80185b0 <_strtod_l+0x490>
 80189b2:	465f      	mov	r7, fp
 80189b4:	d16e      	bne.n	8018a94 <_strtod_l+0x974>
 80189b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189bc:	b342      	cbz	r2, 8018a10 <_strtod_l+0x8f0>
 80189be:	4a32      	ldr	r2, [pc, #200]	; (8018a88 <_strtod_l+0x968>)
 80189c0:	4293      	cmp	r3, r2
 80189c2:	d128      	bne.n	8018a16 <_strtod_l+0x8f6>
 80189c4:	9b04      	ldr	r3, [sp, #16]
 80189c6:	4651      	mov	r1, sl
 80189c8:	b1eb      	cbz	r3, 8018a06 <_strtod_l+0x8e6>
 80189ca:	4b2d      	ldr	r3, [pc, #180]	; (8018a80 <_strtod_l+0x960>)
 80189cc:	403b      	ands	r3, r7
 80189ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80189d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189d6:	d819      	bhi.n	8018a0c <_strtod_l+0x8ec>
 80189d8:	0d1b      	lsrs	r3, r3, #20
 80189da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80189de:	fa02 f303 	lsl.w	r3, r2, r3
 80189e2:	4299      	cmp	r1, r3
 80189e4:	d117      	bne.n	8018a16 <_strtod_l+0x8f6>
 80189e6:	4b29      	ldr	r3, [pc, #164]	; (8018a8c <_strtod_l+0x96c>)
 80189e8:	429f      	cmp	r7, r3
 80189ea:	d102      	bne.n	80189f2 <_strtod_l+0x8d2>
 80189ec:	3101      	adds	r1, #1
 80189ee:	f43f addf 	beq.w	80185b0 <_strtod_l+0x490>
 80189f2:	4b23      	ldr	r3, [pc, #140]	; (8018a80 <_strtod_l+0x960>)
 80189f4:	403b      	ands	r3, r7
 80189f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80189fa:	f04f 0a00 	mov.w	sl, #0
 80189fe:	9b04      	ldr	r3, [sp, #16]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d1a4      	bne.n	801894e <_strtod_l+0x82e>
 8018a04:	e5de      	b.n	80185c4 <_strtod_l+0x4a4>
 8018a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a0a:	e7ea      	b.n	80189e2 <_strtod_l+0x8c2>
 8018a0c:	4613      	mov	r3, r2
 8018a0e:	e7e8      	b.n	80189e2 <_strtod_l+0x8c2>
 8018a10:	ea53 030a 	orrs.w	r3, r3, sl
 8018a14:	d08c      	beq.n	8018930 <_strtod_l+0x810>
 8018a16:	9b08      	ldr	r3, [sp, #32]
 8018a18:	b1db      	cbz	r3, 8018a52 <_strtod_l+0x932>
 8018a1a:	423b      	tst	r3, r7
 8018a1c:	d0ef      	beq.n	80189fe <_strtod_l+0x8de>
 8018a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a20:	9a04      	ldr	r2, [sp, #16]
 8018a22:	4650      	mov	r0, sl
 8018a24:	4659      	mov	r1, fp
 8018a26:	b1c3      	cbz	r3, 8018a5a <_strtod_l+0x93a>
 8018a28:	f7ff fb5c 	bl	80180e4 <sulp>
 8018a2c:	4602      	mov	r2, r0
 8018a2e:	460b      	mov	r3, r1
 8018a30:	ec51 0b18 	vmov	r0, r1, d8
 8018a34:	f7e7 fc4a 	bl	80002cc <__adddf3>
 8018a38:	4682      	mov	sl, r0
 8018a3a:	468b      	mov	fp, r1
 8018a3c:	e7df      	b.n	80189fe <_strtod_l+0x8de>
 8018a3e:	4013      	ands	r3, r2
 8018a40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018a44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018a48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018a4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018a50:	e7d5      	b.n	80189fe <_strtod_l+0x8de>
 8018a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a54:	ea13 0f0a 	tst.w	r3, sl
 8018a58:	e7e0      	b.n	8018a1c <_strtod_l+0x8fc>
 8018a5a:	f7ff fb43 	bl	80180e4 <sulp>
 8018a5e:	4602      	mov	r2, r0
 8018a60:	460b      	mov	r3, r1
 8018a62:	ec51 0b18 	vmov	r0, r1, d8
 8018a66:	f7e7 fc2f 	bl	80002c8 <__aeabi_dsub>
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	4682      	mov	sl, r0
 8018a70:	468b      	mov	fp, r1
 8018a72:	f7e8 f849 	bl	8000b08 <__aeabi_dcmpeq>
 8018a76:	2800      	cmp	r0, #0
 8018a78:	d0c1      	beq.n	80189fe <_strtod_l+0x8de>
 8018a7a:	e611      	b.n	80186a0 <_strtod_l+0x580>
 8018a7c:	fffffc02 	.word	0xfffffc02
 8018a80:	7ff00000 	.word	0x7ff00000
 8018a84:	39500000 	.word	0x39500000
 8018a88:	000fffff 	.word	0x000fffff
 8018a8c:	7fefffff 	.word	0x7fefffff
 8018a90:	0801e450 	.word	0x0801e450
 8018a94:	4631      	mov	r1, r6
 8018a96:	4628      	mov	r0, r5
 8018a98:	f001 fab6 	bl	801a008 <__ratio>
 8018a9c:	ec59 8b10 	vmov	r8, r9, d0
 8018aa0:	ee10 0a10 	vmov	r0, s0
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018aaa:	4649      	mov	r1, r9
 8018aac:	f7e8 f840 	bl	8000b30 <__aeabi_dcmple>
 8018ab0:	2800      	cmp	r0, #0
 8018ab2:	d07a      	beq.n	8018baa <_strtod_l+0xa8a>
 8018ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d04a      	beq.n	8018b50 <_strtod_l+0xa30>
 8018aba:	4b95      	ldr	r3, [pc, #596]	; (8018d10 <_strtod_l+0xbf0>)
 8018abc:	2200      	movs	r2, #0
 8018abe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018ac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018d10 <_strtod_l+0xbf0>
 8018ac6:	f04f 0800 	mov.w	r8, #0
 8018aca:	4b92      	ldr	r3, [pc, #584]	; (8018d14 <_strtod_l+0xbf4>)
 8018acc:	403b      	ands	r3, r7
 8018ace:	930d      	str	r3, [sp, #52]	; 0x34
 8018ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ad2:	4b91      	ldr	r3, [pc, #580]	; (8018d18 <_strtod_l+0xbf8>)
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	f040 80b0 	bne.w	8018c3a <_strtod_l+0xb1a>
 8018ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018ade:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018ae2:	ec4b ab10 	vmov	d0, sl, fp
 8018ae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018aea:	f001 f9b5 	bl	8019e58 <__ulp>
 8018aee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018af2:	ec53 2b10 	vmov	r2, r3, d0
 8018af6:	f7e7 fd9f 	bl	8000638 <__aeabi_dmul>
 8018afa:	4652      	mov	r2, sl
 8018afc:	465b      	mov	r3, fp
 8018afe:	f7e7 fbe5 	bl	80002cc <__adddf3>
 8018b02:	460b      	mov	r3, r1
 8018b04:	4983      	ldr	r1, [pc, #524]	; (8018d14 <_strtod_l+0xbf4>)
 8018b06:	4a85      	ldr	r2, [pc, #532]	; (8018d1c <_strtod_l+0xbfc>)
 8018b08:	4019      	ands	r1, r3
 8018b0a:	4291      	cmp	r1, r2
 8018b0c:	4682      	mov	sl, r0
 8018b0e:	d960      	bls.n	8018bd2 <_strtod_l+0xab2>
 8018b10:	ee18 3a90 	vmov	r3, s17
 8018b14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d104      	bne.n	8018b26 <_strtod_l+0xa06>
 8018b1c:	ee18 3a10 	vmov	r3, s16
 8018b20:	3301      	adds	r3, #1
 8018b22:	f43f ad45 	beq.w	80185b0 <_strtod_l+0x490>
 8018b26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8018d28 <_strtod_l+0xc08>
 8018b2a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018b30:	4620      	mov	r0, r4
 8018b32:	f000 fe5f 	bl	80197f4 <_Bfree>
 8018b36:	9905      	ldr	r1, [sp, #20]
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f000 fe5b 	bl	80197f4 <_Bfree>
 8018b3e:	4631      	mov	r1, r6
 8018b40:	4620      	mov	r0, r4
 8018b42:	f000 fe57 	bl	80197f4 <_Bfree>
 8018b46:	4629      	mov	r1, r5
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f000 fe53 	bl	80197f4 <_Bfree>
 8018b4e:	e61a      	b.n	8018786 <_strtod_l+0x666>
 8018b50:	f1ba 0f00 	cmp.w	sl, #0
 8018b54:	d11b      	bne.n	8018b8e <_strtod_l+0xa6e>
 8018b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018b5a:	b9f3      	cbnz	r3, 8018b9a <_strtod_l+0xa7a>
 8018b5c:	4b6c      	ldr	r3, [pc, #432]	; (8018d10 <_strtod_l+0xbf0>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	4640      	mov	r0, r8
 8018b62:	4649      	mov	r1, r9
 8018b64:	f7e7 ffda 	bl	8000b1c <__aeabi_dcmplt>
 8018b68:	b9d0      	cbnz	r0, 8018ba0 <_strtod_l+0xa80>
 8018b6a:	4640      	mov	r0, r8
 8018b6c:	4649      	mov	r1, r9
 8018b6e:	4b6c      	ldr	r3, [pc, #432]	; (8018d20 <_strtod_l+0xc00>)
 8018b70:	2200      	movs	r2, #0
 8018b72:	f7e7 fd61 	bl	8000638 <__aeabi_dmul>
 8018b76:	4680      	mov	r8, r0
 8018b78:	4689      	mov	r9, r1
 8018b7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018b7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8018b82:	9315      	str	r3, [sp, #84]	; 0x54
 8018b84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018b8c:	e79d      	b.n	8018aca <_strtod_l+0x9aa>
 8018b8e:	f1ba 0f01 	cmp.w	sl, #1
 8018b92:	d102      	bne.n	8018b9a <_strtod_l+0xa7a>
 8018b94:	2f00      	cmp	r7, #0
 8018b96:	f43f ad83 	beq.w	80186a0 <_strtod_l+0x580>
 8018b9a:	4b62      	ldr	r3, [pc, #392]	; (8018d24 <_strtod_l+0xc04>)
 8018b9c:	2200      	movs	r2, #0
 8018b9e:	e78e      	b.n	8018abe <_strtod_l+0x99e>
 8018ba0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8018d20 <_strtod_l+0xc00>
 8018ba4:	f04f 0800 	mov.w	r8, #0
 8018ba8:	e7e7      	b.n	8018b7a <_strtod_l+0xa5a>
 8018baa:	4b5d      	ldr	r3, [pc, #372]	; (8018d20 <_strtod_l+0xc00>)
 8018bac:	4640      	mov	r0, r8
 8018bae:	4649      	mov	r1, r9
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	f7e7 fd41 	bl	8000638 <__aeabi_dmul>
 8018bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bb8:	4680      	mov	r8, r0
 8018bba:	4689      	mov	r9, r1
 8018bbc:	b933      	cbnz	r3, 8018bcc <_strtod_l+0xaac>
 8018bbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8018bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8018bc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018bca:	e7dd      	b.n	8018b88 <_strtod_l+0xa68>
 8018bcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8018bd0:	e7f9      	b.n	8018bc6 <_strtod_l+0xaa6>
 8018bd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018bd6:	9b04      	ldr	r3, [sp, #16]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d1a8      	bne.n	8018b2e <_strtod_l+0xa0e>
 8018bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018be2:	0d1b      	lsrs	r3, r3, #20
 8018be4:	051b      	lsls	r3, r3, #20
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d1a1      	bne.n	8018b2e <_strtod_l+0xa0e>
 8018bea:	4640      	mov	r0, r8
 8018bec:	4649      	mov	r1, r9
 8018bee:	f7e8 f845 	bl	8000c7c <__aeabi_d2lz>
 8018bf2:	f7e7 fcf3 	bl	80005dc <__aeabi_l2d>
 8018bf6:	4602      	mov	r2, r0
 8018bf8:	460b      	mov	r3, r1
 8018bfa:	4640      	mov	r0, r8
 8018bfc:	4649      	mov	r1, r9
 8018bfe:	f7e7 fb63 	bl	80002c8 <__aeabi_dsub>
 8018c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018c08:	ea43 030a 	orr.w	r3, r3, sl
 8018c0c:	4313      	orrs	r3, r2
 8018c0e:	4680      	mov	r8, r0
 8018c10:	4689      	mov	r9, r1
 8018c12:	d055      	beq.n	8018cc0 <_strtod_l+0xba0>
 8018c14:	a336      	add	r3, pc, #216	; (adr r3, 8018cf0 <_strtod_l+0xbd0>)
 8018c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c1a:	f7e7 ff7f 	bl	8000b1c <__aeabi_dcmplt>
 8018c1e:	2800      	cmp	r0, #0
 8018c20:	f47f acd0 	bne.w	80185c4 <_strtod_l+0x4a4>
 8018c24:	a334      	add	r3, pc, #208	; (adr r3, 8018cf8 <_strtod_l+0xbd8>)
 8018c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c2a:	4640      	mov	r0, r8
 8018c2c:	4649      	mov	r1, r9
 8018c2e:	f7e7 ff93 	bl	8000b58 <__aeabi_dcmpgt>
 8018c32:	2800      	cmp	r0, #0
 8018c34:	f43f af7b 	beq.w	8018b2e <_strtod_l+0xa0e>
 8018c38:	e4c4      	b.n	80185c4 <_strtod_l+0x4a4>
 8018c3a:	9b04      	ldr	r3, [sp, #16]
 8018c3c:	b333      	cbz	r3, 8018c8c <_strtod_l+0xb6c>
 8018c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018c44:	d822      	bhi.n	8018c8c <_strtod_l+0xb6c>
 8018c46:	a32e      	add	r3, pc, #184	; (adr r3, 8018d00 <_strtod_l+0xbe0>)
 8018c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c4c:	4640      	mov	r0, r8
 8018c4e:	4649      	mov	r1, r9
 8018c50:	f7e7 ff6e 	bl	8000b30 <__aeabi_dcmple>
 8018c54:	b1a0      	cbz	r0, 8018c80 <_strtod_l+0xb60>
 8018c56:	4649      	mov	r1, r9
 8018c58:	4640      	mov	r0, r8
 8018c5a:	f7e7 ff87 	bl	8000b6c <__aeabi_d2uiz>
 8018c5e:	2801      	cmp	r0, #1
 8018c60:	bf38      	it	cc
 8018c62:	2001      	movcc	r0, #1
 8018c64:	f7e7 fc6e 	bl	8000544 <__aeabi_ui2d>
 8018c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c6a:	4680      	mov	r8, r0
 8018c6c:	4689      	mov	r9, r1
 8018c6e:	bb23      	cbnz	r3, 8018cba <_strtod_l+0xb9a>
 8018c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018c74:	9010      	str	r0, [sp, #64]	; 0x40
 8018c76:	9311      	str	r3, [sp, #68]	; 0x44
 8018c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018c7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018c84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018c88:	1a9b      	subs	r3, r3, r2
 8018c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018c90:	eeb0 0a48 	vmov.f32	s0, s16
 8018c94:	eef0 0a68 	vmov.f32	s1, s17
 8018c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018c9c:	f001 f8dc 	bl	8019e58 <__ulp>
 8018ca0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018ca4:	ec53 2b10 	vmov	r2, r3, d0
 8018ca8:	f7e7 fcc6 	bl	8000638 <__aeabi_dmul>
 8018cac:	ec53 2b18 	vmov	r2, r3, d8
 8018cb0:	f7e7 fb0c 	bl	80002cc <__adddf3>
 8018cb4:	4682      	mov	sl, r0
 8018cb6:	468b      	mov	fp, r1
 8018cb8:	e78d      	b.n	8018bd6 <_strtod_l+0xab6>
 8018cba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8018cbe:	e7db      	b.n	8018c78 <_strtod_l+0xb58>
 8018cc0:	a311      	add	r3, pc, #68	; (adr r3, 8018d08 <_strtod_l+0xbe8>)
 8018cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cc6:	f7e7 ff29 	bl	8000b1c <__aeabi_dcmplt>
 8018cca:	e7b2      	b.n	8018c32 <_strtod_l+0xb12>
 8018ccc:	2300      	movs	r3, #0
 8018cce:	930a      	str	r3, [sp, #40]	; 0x28
 8018cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018cd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018cd4:	6013      	str	r3, [r2, #0]
 8018cd6:	f7ff ba6b 	b.w	80181b0 <_strtod_l+0x90>
 8018cda:	2a65      	cmp	r2, #101	; 0x65
 8018cdc:	f43f ab5f 	beq.w	801839e <_strtod_l+0x27e>
 8018ce0:	2a45      	cmp	r2, #69	; 0x45
 8018ce2:	f43f ab5c 	beq.w	801839e <_strtod_l+0x27e>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	f7ff bb94 	b.w	8018414 <_strtod_l+0x2f4>
 8018cec:	f3af 8000 	nop.w
 8018cf0:	94a03595 	.word	0x94a03595
 8018cf4:	3fdfffff 	.word	0x3fdfffff
 8018cf8:	35afe535 	.word	0x35afe535
 8018cfc:	3fe00000 	.word	0x3fe00000
 8018d00:	ffc00000 	.word	0xffc00000
 8018d04:	41dfffff 	.word	0x41dfffff
 8018d08:	94a03595 	.word	0x94a03595
 8018d0c:	3fcfffff 	.word	0x3fcfffff
 8018d10:	3ff00000 	.word	0x3ff00000
 8018d14:	7ff00000 	.word	0x7ff00000
 8018d18:	7fe00000 	.word	0x7fe00000
 8018d1c:	7c9fffff 	.word	0x7c9fffff
 8018d20:	3fe00000 	.word	0x3fe00000
 8018d24:	bff00000 	.word	0xbff00000
 8018d28:	7fefffff 	.word	0x7fefffff

08018d2c <strtod>:
 8018d2c:	460a      	mov	r2, r1
 8018d2e:	4601      	mov	r1, r0
 8018d30:	4802      	ldr	r0, [pc, #8]	; (8018d3c <strtod+0x10>)
 8018d32:	4b03      	ldr	r3, [pc, #12]	; (8018d40 <strtod+0x14>)
 8018d34:	6800      	ldr	r0, [r0, #0]
 8018d36:	f7ff b9f3 	b.w	8018120 <_strtod_l>
 8018d3a:	bf00      	nop
 8018d3c:	2000002c 	.word	0x2000002c
 8018d40:	20000094 	.word	0x20000094

08018d44 <strtok>:
 8018d44:	4b16      	ldr	r3, [pc, #88]	; (8018da0 <strtok+0x5c>)
 8018d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d48:	681e      	ldr	r6, [r3, #0]
 8018d4a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018d4c:	4605      	mov	r5, r0
 8018d4e:	b9fc      	cbnz	r4, 8018d90 <strtok+0x4c>
 8018d50:	2050      	movs	r0, #80	; 0x50
 8018d52:	9101      	str	r1, [sp, #4]
 8018d54:	f000 fce8 	bl	8019728 <malloc>
 8018d58:	9901      	ldr	r1, [sp, #4]
 8018d5a:	65b0      	str	r0, [r6, #88]	; 0x58
 8018d5c:	4602      	mov	r2, r0
 8018d5e:	b920      	cbnz	r0, 8018d6a <strtok+0x26>
 8018d60:	4b10      	ldr	r3, [pc, #64]	; (8018da4 <strtok+0x60>)
 8018d62:	4811      	ldr	r0, [pc, #68]	; (8018da8 <strtok+0x64>)
 8018d64:	2157      	movs	r1, #87	; 0x57
 8018d66:	f000 f85b 	bl	8018e20 <__assert_func>
 8018d6a:	e9c0 4400 	strd	r4, r4, [r0]
 8018d6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018d72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018d76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018d7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018d7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018d82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018d86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018d8a:	6184      	str	r4, [r0, #24]
 8018d8c:	7704      	strb	r4, [r0, #28]
 8018d8e:	6244      	str	r4, [r0, #36]	; 0x24
 8018d90:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018d92:	2301      	movs	r3, #1
 8018d94:	4628      	mov	r0, r5
 8018d96:	b002      	add	sp, #8
 8018d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d9c:	f000 b806 	b.w	8018dac <__strtok_r>
 8018da0:	2000002c 	.word	0x2000002c
 8018da4:	0801e3a4 	.word	0x0801e3a4
 8018da8:	0801e478 	.word	0x0801e478

08018dac <__strtok_r>:
 8018dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dae:	b908      	cbnz	r0, 8018db4 <__strtok_r+0x8>
 8018db0:	6810      	ldr	r0, [r2, #0]
 8018db2:	b188      	cbz	r0, 8018dd8 <__strtok_r+0x2c>
 8018db4:	4604      	mov	r4, r0
 8018db6:	4620      	mov	r0, r4
 8018db8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018dbc:	460f      	mov	r7, r1
 8018dbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018dc2:	b91e      	cbnz	r6, 8018dcc <__strtok_r+0x20>
 8018dc4:	b965      	cbnz	r5, 8018de0 <__strtok_r+0x34>
 8018dc6:	6015      	str	r5, [r2, #0]
 8018dc8:	4628      	mov	r0, r5
 8018dca:	e005      	b.n	8018dd8 <__strtok_r+0x2c>
 8018dcc:	42b5      	cmp	r5, r6
 8018dce:	d1f6      	bne.n	8018dbe <__strtok_r+0x12>
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d1f0      	bne.n	8018db6 <__strtok_r+0xa>
 8018dd4:	6014      	str	r4, [r2, #0]
 8018dd6:	7003      	strb	r3, [r0, #0]
 8018dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dda:	461c      	mov	r4, r3
 8018ddc:	e00c      	b.n	8018df8 <__strtok_r+0x4c>
 8018dde:	b915      	cbnz	r5, 8018de6 <__strtok_r+0x3a>
 8018de0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018de4:	460e      	mov	r6, r1
 8018de6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018dea:	42ab      	cmp	r3, r5
 8018dec:	d1f7      	bne.n	8018dde <__strtok_r+0x32>
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d0f3      	beq.n	8018dda <__strtok_r+0x2e>
 8018df2:	2300      	movs	r3, #0
 8018df4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018df8:	6014      	str	r4, [r2, #0]
 8018dfa:	e7ed      	b.n	8018dd8 <__strtok_r+0x2c>

08018dfc <_write_r>:
 8018dfc:	b538      	push	{r3, r4, r5, lr}
 8018dfe:	4d07      	ldr	r5, [pc, #28]	; (8018e1c <_write_r+0x20>)
 8018e00:	4604      	mov	r4, r0
 8018e02:	4608      	mov	r0, r1
 8018e04:	4611      	mov	r1, r2
 8018e06:	2200      	movs	r2, #0
 8018e08:	602a      	str	r2, [r5, #0]
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	f7e8 ff15 	bl	8001c3a <_write>
 8018e10:	1c43      	adds	r3, r0, #1
 8018e12:	d102      	bne.n	8018e1a <_write_r+0x1e>
 8018e14:	682b      	ldr	r3, [r5, #0]
 8018e16:	b103      	cbz	r3, 8018e1a <_write_r+0x1e>
 8018e18:	6023      	str	r3, [r4, #0]
 8018e1a:	bd38      	pop	{r3, r4, r5, pc}
 8018e1c:	20011d18 	.word	0x20011d18

08018e20 <__assert_func>:
 8018e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e22:	4614      	mov	r4, r2
 8018e24:	461a      	mov	r2, r3
 8018e26:	4b09      	ldr	r3, [pc, #36]	; (8018e4c <__assert_func+0x2c>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4605      	mov	r5, r0
 8018e2c:	68d8      	ldr	r0, [r3, #12]
 8018e2e:	b14c      	cbz	r4, 8018e44 <__assert_func+0x24>
 8018e30:	4b07      	ldr	r3, [pc, #28]	; (8018e50 <__assert_func+0x30>)
 8018e32:	9100      	str	r1, [sp, #0]
 8018e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018e38:	4906      	ldr	r1, [pc, #24]	; (8018e54 <__assert_func+0x34>)
 8018e3a:	462b      	mov	r3, r5
 8018e3c:	f000 f8e0 	bl	8019000 <fiprintf>
 8018e40:	f001 fef0 	bl	801ac24 <abort>
 8018e44:	4b04      	ldr	r3, [pc, #16]	; (8018e58 <__assert_func+0x38>)
 8018e46:	461c      	mov	r4, r3
 8018e48:	e7f3      	b.n	8018e32 <__assert_func+0x12>
 8018e4a:	bf00      	nop
 8018e4c:	2000002c 	.word	0x2000002c
 8018e50:	0801e4d5 	.word	0x0801e4d5
 8018e54:	0801e4e2 	.word	0x0801e4e2
 8018e58:	0801e510 	.word	0x0801e510

08018e5c <_close_r>:
 8018e5c:	b538      	push	{r3, r4, r5, lr}
 8018e5e:	4d06      	ldr	r5, [pc, #24]	; (8018e78 <_close_r+0x1c>)
 8018e60:	2300      	movs	r3, #0
 8018e62:	4604      	mov	r4, r0
 8018e64:	4608      	mov	r0, r1
 8018e66:	602b      	str	r3, [r5, #0]
 8018e68:	f7e8 ff03 	bl	8001c72 <_close>
 8018e6c:	1c43      	adds	r3, r0, #1
 8018e6e:	d102      	bne.n	8018e76 <_close_r+0x1a>
 8018e70:	682b      	ldr	r3, [r5, #0]
 8018e72:	b103      	cbz	r3, 8018e76 <_close_r+0x1a>
 8018e74:	6023      	str	r3, [r4, #0]
 8018e76:	bd38      	pop	{r3, r4, r5, pc}
 8018e78:	20011d18 	.word	0x20011d18

08018e7c <__sflush_r>:
 8018e7c:	898a      	ldrh	r2, [r1, #12]
 8018e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e82:	4605      	mov	r5, r0
 8018e84:	0710      	lsls	r0, r2, #28
 8018e86:	460c      	mov	r4, r1
 8018e88:	d458      	bmi.n	8018f3c <__sflush_r+0xc0>
 8018e8a:	684b      	ldr	r3, [r1, #4]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	dc05      	bgt.n	8018e9c <__sflush_r+0x20>
 8018e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	dc02      	bgt.n	8018e9c <__sflush_r+0x20>
 8018e96:	2000      	movs	r0, #0
 8018e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e9e:	2e00      	cmp	r6, #0
 8018ea0:	d0f9      	beq.n	8018e96 <__sflush_r+0x1a>
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018ea8:	682f      	ldr	r7, [r5, #0]
 8018eaa:	602b      	str	r3, [r5, #0]
 8018eac:	d032      	beq.n	8018f14 <__sflush_r+0x98>
 8018eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018eb0:	89a3      	ldrh	r3, [r4, #12]
 8018eb2:	075a      	lsls	r2, r3, #29
 8018eb4:	d505      	bpl.n	8018ec2 <__sflush_r+0x46>
 8018eb6:	6863      	ldr	r3, [r4, #4]
 8018eb8:	1ac0      	subs	r0, r0, r3
 8018eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ebc:	b10b      	cbz	r3, 8018ec2 <__sflush_r+0x46>
 8018ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018ec0:	1ac0      	subs	r0, r0, r3
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	4602      	mov	r2, r0
 8018ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ec8:	6a21      	ldr	r1, [r4, #32]
 8018eca:	4628      	mov	r0, r5
 8018ecc:	47b0      	blx	r6
 8018ece:	1c43      	adds	r3, r0, #1
 8018ed0:	89a3      	ldrh	r3, [r4, #12]
 8018ed2:	d106      	bne.n	8018ee2 <__sflush_r+0x66>
 8018ed4:	6829      	ldr	r1, [r5, #0]
 8018ed6:	291d      	cmp	r1, #29
 8018ed8:	d82c      	bhi.n	8018f34 <__sflush_r+0xb8>
 8018eda:	4a2a      	ldr	r2, [pc, #168]	; (8018f84 <__sflush_r+0x108>)
 8018edc:	40ca      	lsrs	r2, r1
 8018ede:	07d6      	lsls	r6, r2, #31
 8018ee0:	d528      	bpl.n	8018f34 <__sflush_r+0xb8>
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	6062      	str	r2, [r4, #4]
 8018ee6:	04d9      	lsls	r1, r3, #19
 8018ee8:	6922      	ldr	r2, [r4, #16]
 8018eea:	6022      	str	r2, [r4, #0]
 8018eec:	d504      	bpl.n	8018ef8 <__sflush_r+0x7c>
 8018eee:	1c42      	adds	r2, r0, #1
 8018ef0:	d101      	bne.n	8018ef6 <__sflush_r+0x7a>
 8018ef2:	682b      	ldr	r3, [r5, #0]
 8018ef4:	b903      	cbnz	r3, 8018ef8 <__sflush_r+0x7c>
 8018ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8018ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018efa:	602f      	str	r7, [r5, #0]
 8018efc:	2900      	cmp	r1, #0
 8018efe:	d0ca      	beq.n	8018e96 <__sflush_r+0x1a>
 8018f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018f04:	4299      	cmp	r1, r3
 8018f06:	d002      	beq.n	8018f0e <__sflush_r+0x92>
 8018f08:	4628      	mov	r0, r5
 8018f0a:	f001 f90b 	bl	801a124 <_free_r>
 8018f0e:	2000      	movs	r0, #0
 8018f10:	6360      	str	r0, [r4, #52]	; 0x34
 8018f12:	e7c1      	b.n	8018e98 <__sflush_r+0x1c>
 8018f14:	6a21      	ldr	r1, [r4, #32]
 8018f16:	2301      	movs	r3, #1
 8018f18:	4628      	mov	r0, r5
 8018f1a:	47b0      	blx	r6
 8018f1c:	1c41      	adds	r1, r0, #1
 8018f1e:	d1c7      	bne.n	8018eb0 <__sflush_r+0x34>
 8018f20:	682b      	ldr	r3, [r5, #0]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d0c4      	beq.n	8018eb0 <__sflush_r+0x34>
 8018f26:	2b1d      	cmp	r3, #29
 8018f28:	d001      	beq.n	8018f2e <__sflush_r+0xb2>
 8018f2a:	2b16      	cmp	r3, #22
 8018f2c:	d101      	bne.n	8018f32 <__sflush_r+0xb6>
 8018f2e:	602f      	str	r7, [r5, #0]
 8018f30:	e7b1      	b.n	8018e96 <__sflush_r+0x1a>
 8018f32:	89a3      	ldrh	r3, [r4, #12]
 8018f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f38:	81a3      	strh	r3, [r4, #12]
 8018f3a:	e7ad      	b.n	8018e98 <__sflush_r+0x1c>
 8018f3c:	690f      	ldr	r7, [r1, #16]
 8018f3e:	2f00      	cmp	r7, #0
 8018f40:	d0a9      	beq.n	8018e96 <__sflush_r+0x1a>
 8018f42:	0793      	lsls	r3, r2, #30
 8018f44:	680e      	ldr	r6, [r1, #0]
 8018f46:	bf08      	it	eq
 8018f48:	694b      	ldreq	r3, [r1, #20]
 8018f4a:	600f      	str	r7, [r1, #0]
 8018f4c:	bf18      	it	ne
 8018f4e:	2300      	movne	r3, #0
 8018f50:	eba6 0807 	sub.w	r8, r6, r7
 8018f54:	608b      	str	r3, [r1, #8]
 8018f56:	f1b8 0f00 	cmp.w	r8, #0
 8018f5a:	dd9c      	ble.n	8018e96 <__sflush_r+0x1a>
 8018f5c:	6a21      	ldr	r1, [r4, #32]
 8018f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018f60:	4643      	mov	r3, r8
 8018f62:	463a      	mov	r2, r7
 8018f64:	4628      	mov	r0, r5
 8018f66:	47b0      	blx	r6
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	dc06      	bgt.n	8018f7a <__sflush_r+0xfe>
 8018f6c:	89a3      	ldrh	r3, [r4, #12]
 8018f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f72:	81a3      	strh	r3, [r4, #12]
 8018f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f78:	e78e      	b.n	8018e98 <__sflush_r+0x1c>
 8018f7a:	4407      	add	r7, r0
 8018f7c:	eba8 0800 	sub.w	r8, r8, r0
 8018f80:	e7e9      	b.n	8018f56 <__sflush_r+0xda>
 8018f82:	bf00      	nop
 8018f84:	20400001 	.word	0x20400001

08018f88 <_fflush_r>:
 8018f88:	b538      	push	{r3, r4, r5, lr}
 8018f8a:	690b      	ldr	r3, [r1, #16]
 8018f8c:	4605      	mov	r5, r0
 8018f8e:	460c      	mov	r4, r1
 8018f90:	b913      	cbnz	r3, 8018f98 <_fflush_r+0x10>
 8018f92:	2500      	movs	r5, #0
 8018f94:	4628      	mov	r0, r5
 8018f96:	bd38      	pop	{r3, r4, r5, pc}
 8018f98:	b118      	cbz	r0, 8018fa2 <_fflush_r+0x1a>
 8018f9a:	6983      	ldr	r3, [r0, #24]
 8018f9c:	b90b      	cbnz	r3, 8018fa2 <_fflush_r+0x1a>
 8018f9e:	f7fe fdad 	bl	8017afc <__sinit>
 8018fa2:	4b14      	ldr	r3, [pc, #80]	; (8018ff4 <_fflush_r+0x6c>)
 8018fa4:	429c      	cmp	r4, r3
 8018fa6:	d11b      	bne.n	8018fe0 <_fflush_r+0x58>
 8018fa8:	686c      	ldr	r4, [r5, #4]
 8018faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d0ef      	beq.n	8018f92 <_fflush_r+0xa>
 8018fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018fb4:	07d0      	lsls	r0, r2, #31
 8018fb6:	d404      	bmi.n	8018fc2 <_fflush_r+0x3a>
 8018fb8:	0599      	lsls	r1, r3, #22
 8018fba:	d402      	bmi.n	8018fc2 <_fflush_r+0x3a>
 8018fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018fbe:	f7fe fe60 	bl	8017c82 <__retarget_lock_acquire_recursive>
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	4621      	mov	r1, r4
 8018fc6:	f7ff ff59 	bl	8018e7c <__sflush_r>
 8018fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018fcc:	07da      	lsls	r2, r3, #31
 8018fce:	4605      	mov	r5, r0
 8018fd0:	d4e0      	bmi.n	8018f94 <_fflush_r+0xc>
 8018fd2:	89a3      	ldrh	r3, [r4, #12]
 8018fd4:	059b      	lsls	r3, r3, #22
 8018fd6:	d4dd      	bmi.n	8018f94 <_fflush_r+0xc>
 8018fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018fda:	f7fe fe53 	bl	8017c84 <__retarget_lock_release_recursive>
 8018fde:	e7d9      	b.n	8018f94 <_fflush_r+0xc>
 8018fe0:	4b05      	ldr	r3, [pc, #20]	; (8018ff8 <_fflush_r+0x70>)
 8018fe2:	429c      	cmp	r4, r3
 8018fe4:	d101      	bne.n	8018fea <_fflush_r+0x62>
 8018fe6:	68ac      	ldr	r4, [r5, #8]
 8018fe8:	e7df      	b.n	8018faa <_fflush_r+0x22>
 8018fea:	4b04      	ldr	r3, [pc, #16]	; (8018ffc <_fflush_r+0x74>)
 8018fec:	429c      	cmp	r4, r3
 8018fee:	bf08      	it	eq
 8018ff0:	68ec      	ldreq	r4, [r5, #12]
 8018ff2:	e7da      	b.n	8018faa <_fflush_r+0x22>
 8018ff4:	0801e360 	.word	0x0801e360
 8018ff8:	0801e380 	.word	0x0801e380
 8018ffc:	0801e340 	.word	0x0801e340

08019000 <fiprintf>:
 8019000:	b40e      	push	{r1, r2, r3}
 8019002:	b503      	push	{r0, r1, lr}
 8019004:	4601      	mov	r1, r0
 8019006:	ab03      	add	r3, sp, #12
 8019008:	4805      	ldr	r0, [pc, #20]	; (8019020 <fiprintf+0x20>)
 801900a:	f853 2b04 	ldr.w	r2, [r3], #4
 801900e:	6800      	ldr	r0, [r0, #0]
 8019010:	9301      	str	r3, [sp, #4]
 8019012:	f001 fa59 	bl	801a4c8 <_vfiprintf_r>
 8019016:	b002      	add	sp, #8
 8019018:	f85d eb04 	ldr.w	lr, [sp], #4
 801901c:	b003      	add	sp, #12
 801901e:	4770      	bx	lr
 8019020:	2000002c 	.word	0x2000002c

08019024 <rshift>:
 8019024:	6903      	ldr	r3, [r0, #16]
 8019026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801902a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801902e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019032:	f100 0414 	add.w	r4, r0, #20
 8019036:	dd45      	ble.n	80190c4 <rshift+0xa0>
 8019038:	f011 011f 	ands.w	r1, r1, #31
 801903c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019040:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019044:	d10c      	bne.n	8019060 <rshift+0x3c>
 8019046:	f100 0710 	add.w	r7, r0, #16
 801904a:	4629      	mov	r1, r5
 801904c:	42b1      	cmp	r1, r6
 801904e:	d334      	bcc.n	80190ba <rshift+0x96>
 8019050:	1a9b      	subs	r3, r3, r2
 8019052:	009b      	lsls	r3, r3, #2
 8019054:	1eea      	subs	r2, r5, #3
 8019056:	4296      	cmp	r6, r2
 8019058:	bf38      	it	cc
 801905a:	2300      	movcc	r3, #0
 801905c:	4423      	add	r3, r4
 801905e:	e015      	b.n	801908c <rshift+0x68>
 8019060:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019064:	f1c1 0820 	rsb	r8, r1, #32
 8019068:	40cf      	lsrs	r7, r1
 801906a:	f105 0e04 	add.w	lr, r5, #4
 801906e:	46a1      	mov	r9, r4
 8019070:	4576      	cmp	r6, lr
 8019072:	46f4      	mov	ip, lr
 8019074:	d815      	bhi.n	80190a2 <rshift+0x7e>
 8019076:	1a9a      	subs	r2, r3, r2
 8019078:	0092      	lsls	r2, r2, #2
 801907a:	3a04      	subs	r2, #4
 801907c:	3501      	adds	r5, #1
 801907e:	42ae      	cmp	r6, r5
 8019080:	bf38      	it	cc
 8019082:	2200      	movcc	r2, #0
 8019084:	18a3      	adds	r3, r4, r2
 8019086:	50a7      	str	r7, [r4, r2]
 8019088:	b107      	cbz	r7, 801908c <rshift+0x68>
 801908a:	3304      	adds	r3, #4
 801908c:	1b1a      	subs	r2, r3, r4
 801908e:	42a3      	cmp	r3, r4
 8019090:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019094:	bf08      	it	eq
 8019096:	2300      	moveq	r3, #0
 8019098:	6102      	str	r2, [r0, #16]
 801909a:	bf08      	it	eq
 801909c:	6143      	streq	r3, [r0, #20]
 801909e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190a2:	f8dc c000 	ldr.w	ip, [ip]
 80190a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80190aa:	ea4c 0707 	orr.w	r7, ip, r7
 80190ae:	f849 7b04 	str.w	r7, [r9], #4
 80190b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80190b6:	40cf      	lsrs	r7, r1
 80190b8:	e7da      	b.n	8019070 <rshift+0x4c>
 80190ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80190be:	f847 cf04 	str.w	ip, [r7, #4]!
 80190c2:	e7c3      	b.n	801904c <rshift+0x28>
 80190c4:	4623      	mov	r3, r4
 80190c6:	e7e1      	b.n	801908c <rshift+0x68>

080190c8 <__hexdig_fun>:
 80190c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80190cc:	2b09      	cmp	r3, #9
 80190ce:	d802      	bhi.n	80190d6 <__hexdig_fun+0xe>
 80190d0:	3820      	subs	r0, #32
 80190d2:	b2c0      	uxtb	r0, r0
 80190d4:	4770      	bx	lr
 80190d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80190da:	2b05      	cmp	r3, #5
 80190dc:	d801      	bhi.n	80190e2 <__hexdig_fun+0x1a>
 80190de:	3847      	subs	r0, #71	; 0x47
 80190e0:	e7f7      	b.n	80190d2 <__hexdig_fun+0xa>
 80190e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80190e6:	2b05      	cmp	r3, #5
 80190e8:	d801      	bhi.n	80190ee <__hexdig_fun+0x26>
 80190ea:	3827      	subs	r0, #39	; 0x27
 80190ec:	e7f1      	b.n	80190d2 <__hexdig_fun+0xa>
 80190ee:	2000      	movs	r0, #0
 80190f0:	4770      	bx	lr
	...

080190f4 <__gethex>:
 80190f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190f8:	ed2d 8b02 	vpush	{d8}
 80190fc:	b089      	sub	sp, #36	; 0x24
 80190fe:	ee08 0a10 	vmov	s16, r0
 8019102:	9304      	str	r3, [sp, #16]
 8019104:	4bb4      	ldr	r3, [pc, #720]	; (80193d8 <__gethex+0x2e4>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	9301      	str	r3, [sp, #4]
 801910a:	4618      	mov	r0, r3
 801910c:	468b      	mov	fp, r1
 801910e:	4690      	mov	r8, r2
 8019110:	f7e7 f87e 	bl	8000210 <strlen>
 8019114:	9b01      	ldr	r3, [sp, #4]
 8019116:	f8db 2000 	ldr.w	r2, [fp]
 801911a:	4403      	add	r3, r0
 801911c:	4682      	mov	sl, r0
 801911e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019122:	9305      	str	r3, [sp, #20]
 8019124:	1c93      	adds	r3, r2, #2
 8019126:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801912a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801912e:	32fe      	adds	r2, #254	; 0xfe
 8019130:	18d1      	adds	r1, r2, r3
 8019132:	461f      	mov	r7, r3
 8019134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019138:	9100      	str	r1, [sp, #0]
 801913a:	2830      	cmp	r0, #48	; 0x30
 801913c:	d0f8      	beq.n	8019130 <__gethex+0x3c>
 801913e:	f7ff ffc3 	bl	80190c8 <__hexdig_fun>
 8019142:	4604      	mov	r4, r0
 8019144:	2800      	cmp	r0, #0
 8019146:	d13a      	bne.n	80191be <__gethex+0xca>
 8019148:	9901      	ldr	r1, [sp, #4]
 801914a:	4652      	mov	r2, sl
 801914c:	4638      	mov	r0, r7
 801914e:	f7fe ffa2 	bl	8018096 <strncmp>
 8019152:	4605      	mov	r5, r0
 8019154:	2800      	cmp	r0, #0
 8019156:	d168      	bne.n	801922a <__gethex+0x136>
 8019158:	f817 000a 	ldrb.w	r0, [r7, sl]
 801915c:	eb07 060a 	add.w	r6, r7, sl
 8019160:	f7ff ffb2 	bl	80190c8 <__hexdig_fun>
 8019164:	2800      	cmp	r0, #0
 8019166:	d062      	beq.n	801922e <__gethex+0x13a>
 8019168:	4633      	mov	r3, r6
 801916a:	7818      	ldrb	r0, [r3, #0]
 801916c:	2830      	cmp	r0, #48	; 0x30
 801916e:	461f      	mov	r7, r3
 8019170:	f103 0301 	add.w	r3, r3, #1
 8019174:	d0f9      	beq.n	801916a <__gethex+0x76>
 8019176:	f7ff ffa7 	bl	80190c8 <__hexdig_fun>
 801917a:	2301      	movs	r3, #1
 801917c:	fab0 f480 	clz	r4, r0
 8019180:	0964      	lsrs	r4, r4, #5
 8019182:	4635      	mov	r5, r6
 8019184:	9300      	str	r3, [sp, #0]
 8019186:	463a      	mov	r2, r7
 8019188:	4616      	mov	r6, r2
 801918a:	3201      	adds	r2, #1
 801918c:	7830      	ldrb	r0, [r6, #0]
 801918e:	f7ff ff9b 	bl	80190c8 <__hexdig_fun>
 8019192:	2800      	cmp	r0, #0
 8019194:	d1f8      	bne.n	8019188 <__gethex+0x94>
 8019196:	9901      	ldr	r1, [sp, #4]
 8019198:	4652      	mov	r2, sl
 801919a:	4630      	mov	r0, r6
 801919c:	f7fe ff7b 	bl	8018096 <strncmp>
 80191a0:	b980      	cbnz	r0, 80191c4 <__gethex+0xd0>
 80191a2:	b94d      	cbnz	r5, 80191b8 <__gethex+0xc4>
 80191a4:	eb06 050a 	add.w	r5, r6, sl
 80191a8:	462a      	mov	r2, r5
 80191aa:	4616      	mov	r6, r2
 80191ac:	3201      	adds	r2, #1
 80191ae:	7830      	ldrb	r0, [r6, #0]
 80191b0:	f7ff ff8a 	bl	80190c8 <__hexdig_fun>
 80191b4:	2800      	cmp	r0, #0
 80191b6:	d1f8      	bne.n	80191aa <__gethex+0xb6>
 80191b8:	1bad      	subs	r5, r5, r6
 80191ba:	00ad      	lsls	r5, r5, #2
 80191bc:	e004      	b.n	80191c8 <__gethex+0xd4>
 80191be:	2400      	movs	r4, #0
 80191c0:	4625      	mov	r5, r4
 80191c2:	e7e0      	b.n	8019186 <__gethex+0x92>
 80191c4:	2d00      	cmp	r5, #0
 80191c6:	d1f7      	bne.n	80191b8 <__gethex+0xc4>
 80191c8:	7833      	ldrb	r3, [r6, #0]
 80191ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80191ce:	2b50      	cmp	r3, #80	; 0x50
 80191d0:	d13b      	bne.n	801924a <__gethex+0x156>
 80191d2:	7873      	ldrb	r3, [r6, #1]
 80191d4:	2b2b      	cmp	r3, #43	; 0x2b
 80191d6:	d02c      	beq.n	8019232 <__gethex+0x13e>
 80191d8:	2b2d      	cmp	r3, #45	; 0x2d
 80191da:	d02e      	beq.n	801923a <__gethex+0x146>
 80191dc:	1c71      	adds	r1, r6, #1
 80191de:	f04f 0900 	mov.w	r9, #0
 80191e2:	7808      	ldrb	r0, [r1, #0]
 80191e4:	f7ff ff70 	bl	80190c8 <__hexdig_fun>
 80191e8:	1e43      	subs	r3, r0, #1
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	2b18      	cmp	r3, #24
 80191ee:	d82c      	bhi.n	801924a <__gethex+0x156>
 80191f0:	f1a0 0210 	sub.w	r2, r0, #16
 80191f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80191f8:	f7ff ff66 	bl	80190c8 <__hexdig_fun>
 80191fc:	1e43      	subs	r3, r0, #1
 80191fe:	b2db      	uxtb	r3, r3
 8019200:	2b18      	cmp	r3, #24
 8019202:	d91d      	bls.n	8019240 <__gethex+0x14c>
 8019204:	f1b9 0f00 	cmp.w	r9, #0
 8019208:	d000      	beq.n	801920c <__gethex+0x118>
 801920a:	4252      	negs	r2, r2
 801920c:	4415      	add	r5, r2
 801920e:	f8cb 1000 	str.w	r1, [fp]
 8019212:	b1e4      	cbz	r4, 801924e <__gethex+0x15a>
 8019214:	9b00      	ldr	r3, [sp, #0]
 8019216:	2b00      	cmp	r3, #0
 8019218:	bf14      	ite	ne
 801921a:	2700      	movne	r7, #0
 801921c:	2706      	moveq	r7, #6
 801921e:	4638      	mov	r0, r7
 8019220:	b009      	add	sp, #36	; 0x24
 8019222:	ecbd 8b02 	vpop	{d8}
 8019226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922a:	463e      	mov	r6, r7
 801922c:	4625      	mov	r5, r4
 801922e:	2401      	movs	r4, #1
 8019230:	e7ca      	b.n	80191c8 <__gethex+0xd4>
 8019232:	f04f 0900 	mov.w	r9, #0
 8019236:	1cb1      	adds	r1, r6, #2
 8019238:	e7d3      	b.n	80191e2 <__gethex+0xee>
 801923a:	f04f 0901 	mov.w	r9, #1
 801923e:	e7fa      	b.n	8019236 <__gethex+0x142>
 8019240:	230a      	movs	r3, #10
 8019242:	fb03 0202 	mla	r2, r3, r2, r0
 8019246:	3a10      	subs	r2, #16
 8019248:	e7d4      	b.n	80191f4 <__gethex+0x100>
 801924a:	4631      	mov	r1, r6
 801924c:	e7df      	b.n	801920e <__gethex+0x11a>
 801924e:	1bf3      	subs	r3, r6, r7
 8019250:	3b01      	subs	r3, #1
 8019252:	4621      	mov	r1, r4
 8019254:	2b07      	cmp	r3, #7
 8019256:	dc0b      	bgt.n	8019270 <__gethex+0x17c>
 8019258:	ee18 0a10 	vmov	r0, s16
 801925c:	f000 fa8a 	bl	8019774 <_Balloc>
 8019260:	4604      	mov	r4, r0
 8019262:	b940      	cbnz	r0, 8019276 <__gethex+0x182>
 8019264:	4b5d      	ldr	r3, [pc, #372]	; (80193dc <__gethex+0x2e8>)
 8019266:	4602      	mov	r2, r0
 8019268:	21de      	movs	r1, #222	; 0xde
 801926a:	485d      	ldr	r0, [pc, #372]	; (80193e0 <__gethex+0x2ec>)
 801926c:	f7ff fdd8 	bl	8018e20 <__assert_func>
 8019270:	3101      	adds	r1, #1
 8019272:	105b      	asrs	r3, r3, #1
 8019274:	e7ee      	b.n	8019254 <__gethex+0x160>
 8019276:	f100 0914 	add.w	r9, r0, #20
 801927a:	f04f 0b00 	mov.w	fp, #0
 801927e:	f1ca 0301 	rsb	r3, sl, #1
 8019282:	f8cd 9008 	str.w	r9, [sp, #8]
 8019286:	f8cd b000 	str.w	fp, [sp]
 801928a:	9306      	str	r3, [sp, #24]
 801928c:	42b7      	cmp	r7, r6
 801928e:	d340      	bcc.n	8019312 <__gethex+0x21e>
 8019290:	9802      	ldr	r0, [sp, #8]
 8019292:	9b00      	ldr	r3, [sp, #0]
 8019294:	f840 3b04 	str.w	r3, [r0], #4
 8019298:	eba0 0009 	sub.w	r0, r0, r9
 801929c:	1080      	asrs	r0, r0, #2
 801929e:	0146      	lsls	r6, r0, #5
 80192a0:	6120      	str	r0, [r4, #16]
 80192a2:	4618      	mov	r0, r3
 80192a4:	f000 fb58 	bl	8019958 <__hi0bits>
 80192a8:	1a30      	subs	r0, r6, r0
 80192aa:	f8d8 6000 	ldr.w	r6, [r8]
 80192ae:	42b0      	cmp	r0, r6
 80192b0:	dd63      	ble.n	801937a <__gethex+0x286>
 80192b2:	1b87      	subs	r7, r0, r6
 80192b4:	4639      	mov	r1, r7
 80192b6:	4620      	mov	r0, r4
 80192b8:	f000 fefc 	bl	801a0b4 <__any_on>
 80192bc:	4682      	mov	sl, r0
 80192be:	b1a8      	cbz	r0, 80192ec <__gethex+0x1f8>
 80192c0:	1e7b      	subs	r3, r7, #1
 80192c2:	1159      	asrs	r1, r3, #5
 80192c4:	f003 021f 	and.w	r2, r3, #31
 80192c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80192cc:	f04f 0a01 	mov.w	sl, #1
 80192d0:	fa0a f202 	lsl.w	r2, sl, r2
 80192d4:	420a      	tst	r2, r1
 80192d6:	d009      	beq.n	80192ec <__gethex+0x1f8>
 80192d8:	4553      	cmp	r3, sl
 80192da:	dd05      	ble.n	80192e8 <__gethex+0x1f4>
 80192dc:	1eb9      	subs	r1, r7, #2
 80192de:	4620      	mov	r0, r4
 80192e0:	f000 fee8 	bl	801a0b4 <__any_on>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	d145      	bne.n	8019374 <__gethex+0x280>
 80192e8:	f04f 0a02 	mov.w	sl, #2
 80192ec:	4639      	mov	r1, r7
 80192ee:	4620      	mov	r0, r4
 80192f0:	f7ff fe98 	bl	8019024 <rshift>
 80192f4:	443d      	add	r5, r7
 80192f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80192fa:	42ab      	cmp	r3, r5
 80192fc:	da4c      	bge.n	8019398 <__gethex+0x2a4>
 80192fe:	ee18 0a10 	vmov	r0, s16
 8019302:	4621      	mov	r1, r4
 8019304:	f000 fa76 	bl	80197f4 <_Bfree>
 8019308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801930a:	2300      	movs	r3, #0
 801930c:	6013      	str	r3, [r2, #0]
 801930e:	27a3      	movs	r7, #163	; 0xa3
 8019310:	e785      	b.n	801921e <__gethex+0x12a>
 8019312:	1e73      	subs	r3, r6, #1
 8019314:	9a05      	ldr	r2, [sp, #20]
 8019316:	9303      	str	r3, [sp, #12]
 8019318:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801931c:	4293      	cmp	r3, r2
 801931e:	d019      	beq.n	8019354 <__gethex+0x260>
 8019320:	f1bb 0f20 	cmp.w	fp, #32
 8019324:	d107      	bne.n	8019336 <__gethex+0x242>
 8019326:	9b02      	ldr	r3, [sp, #8]
 8019328:	9a00      	ldr	r2, [sp, #0]
 801932a:	f843 2b04 	str.w	r2, [r3], #4
 801932e:	9302      	str	r3, [sp, #8]
 8019330:	2300      	movs	r3, #0
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	469b      	mov	fp, r3
 8019336:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801933a:	f7ff fec5 	bl	80190c8 <__hexdig_fun>
 801933e:	9b00      	ldr	r3, [sp, #0]
 8019340:	f000 000f 	and.w	r0, r0, #15
 8019344:	fa00 f00b 	lsl.w	r0, r0, fp
 8019348:	4303      	orrs	r3, r0
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	f10b 0b04 	add.w	fp, fp, #4
 8019350:	9b03      	ldr	r3, [sp, #12]
 8019352:	e00d      	b.n	8019370 <__gethex+0x27c>
 8019354:	9b03      	ldr	r3, [sp, #12]
 8019356:	9a06      	ldr	r2, [sp, #24]
 8019358:	4413      	add	r3, r2
 801935a:	42bb      	cmp	r3, r7
 801935c:	d3e0      	bcc.n	8019320 <__gethex+0x22c>
 801935e:	4618      	mov	r0, r3
 8019360:	9901      	ldr	r1, [sp, #4]
 8019362:	9307      	str	r3, [sp, #28]
 8019364:	4652      	mov	r2, sl
 8019366:	f7fe fe96 	bl	8018096 <strncmp>
 801936a:	9b07      	ldr	r3, [sp, #28]
 801936c:	2800      	cmp	r0, #0
 801936e:	d1d7      	bne.n	8019320 <__gethex+0x22c>
 8019370:	461e      	mov	r6, r3
 8019372:	e78b      	b.n	801928c <__gethex+0x198>
 8019374:	f04f 0a03 	mov.w	sl, #3
 8019378:	e7b8      	b.n	80192ec <__gethex+0x1f8>
 801937a:	da0a      	bge.n	8019392 <__gethex+0x29e>
 801937c:	1a37      	subs	r7, r6, r0
 801937e:	4621      	mov	r1, r4
 8019380:	ee18 0a10 	vmov	r0, s16
 8019384:	463a      	mov	r2, r7
 8019386:	f000 fc51 	bl	8019c2c <__lshift>
 801938a:	1bed      	subs	r5, r5, r7
 801938c:	4604      	mov	r4, r0
 801938e:	f100 0914 	add.w	r9, r0, #20
 8019392:	f04f 0a00 	mov.w	sl, #0
 8019396:	e7ae      	b.n	80192f6 <__gethex+0x202>
 8019398:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801939c:	42a8      	cmp	r0, r5
 801939e:	dd72      	ble.n	8019486 <__gethex+0x392>
 80193a0:	1b45      	subs	r5, r0, r5
 80193a2:	42ae      	cmp	r6, r5
 80193a4:	dc36      	bgt.n	8019414 <__gethex+0x320>
 80193a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80193aa:	2b02      	cmp	r3, #2
 80193ac:	d02a      	beq.n	8019404 <__gethex+0x310>
 80193ae:	2b03      	cmp	r3, #3
 80193b0:	d02c      	beq.n	801940c <__gethex+0x318>
 80193b2:	2b01      	cmp	r3, #1
 80193b4:	d11c      	bne.n	80193f0 <__gethex+0x2fc>
 80193b6:	42ae      	cmp	r6, r5
 80193b8:	d11a      	bne.n	80193f0 <__gethex+0x2fc>
 80193ba:	2e01      	cmp	r6, #1
 80193bc:	d112      	bne.n	80193e4 <__gethex+0x2f0>
 80193be:	9a04      	ldr	r2, [sp, #16]
 80193c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80193c4:	6013      	str	r3, [r2, #0]
 80193c6:	2301      	movs	r3, #1
 80193c8:	6123      	str	r3, [r4, #16]
 80193ca:	f8c9 3000 	str.w	r3, [r9]
 80193ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80193d0:	2762      	movs	r7, #98	; 0x62
 80193d2:	601c      	str	r4, [r3, #0]
 80193d4:	e723      	b.n	801921e <__gethex+0x12a>
 80193d6:	bf00      	nop
 80193d8:	0801e588 	.word	0x0801e588
 80193dc:	0801e511 	.word	0x0801e511
 80193e0:	0801e522 	.word	0x0801e522
 80193e4:	1e71      	subs	r1, r6, #1
 80193e6:	4620      	mov	r0, r4
 80193e8:	f000 fe64 	bl	801a0b4 <__any_on>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	d1e6      	bne.n	80193be <__gethex+0x2ca>
 80193f0:	ee18 0a10 	vmov	r0, s16
 80193f4:	4621      	mov	r1, r4
 80193f6:	f000 f9fd 	bl	80197f4 <_Bfree>
 80193fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80193fc:	2300      	movs	r3, #0
 80193fe:	6013      	str	r3, [r2, #0]
 8019400:	2750      	movs	r7, #80	; 0x50
 8019402:	e70c      	b.n	801921e <__gethex+0x12a>
 8019404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019406:	2b00      	cmp	r3, #0
 8019408:	d1f2      	bne.n	80193f0 <__gethex+0x2fc>
 801940a:	e7d8      	b.n	80193be <__gethex+0x2ca>
 801940c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801940e:	2b00      	cmp	r3, #0
 8019410:	d1d5      	bne.n	80193be <__gethex+0x2ca>
 8019412:	e7ed      	b.n	80193f0 <__gethex+0x2fc>
 8019414:	1e6f      	subs	r7, r5, #1
 8019416:	f1ba 0f00 	cmp.w	sl, #0
 801941a:	d131      	bne.n	8019480 <__gethex+0x38c>
 801941c:	b127      	cbz	r7, 8019428 <__gethex+0x334>
 801941e:	4639      	mov	r1, r7
 8019420:	4620      	mov	r0, r4
 8019422:	f000 fe47 	bl	801a0b4 <__any_on>
 8019426:	4682      	mov	sl, r0
 8019428:	117b      	asrs	r3, r7, #5
 801942a:	2101      	movs	r1, #1
 801942c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019430:	f007 071f 	and.w	r7, r7, #31
 8019434:	fa01 f707 	lsl.w	r7, r1, r7
 8019438:	421f      	tst	r7, r3
 801943a:	4629      	mov	r1, r5
 801943c:	4620      	mov	r0, r4
 801943e:	bf18      	it	ne
 8019440:	f04a 0a02 	orrne.w	sl, sl, #2
 8019444:	1b76      	subs	r6, r6, r5
 8019446:	f7ff fded 	bl	8019024 <rshift>
 801944a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801944e:	2702      	movs	r7, #2
 8019450:	f1ba 0f00 	cmp.w	sl, #0
 8019454:	d048      	beq.n	80194e8 <__gethex+0x3f4>
 8019456:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801945a:	2b02      	cmp	r3, #2
 801945c:	d015      	beq.n	801948a <__gethex+0x396>
 801945e:	2b03      	cmp	r3, #3
 8019460:	d017      	beq.n	8019492 <__gethex+0x39e>
 8019462:	2b01      	cmp	r3, #1
 8019464:	d109      	bne.n	801947a <__gethex+0x386>
 8019466:	f01a 0f02 	tst.w	sl, #2
 801946a:	d006      	beq.n	801947a <__gethex+0x386>
 801946c:	f8d9 0000 	ldr.w	r0, [r9]
 8019470:	ea4a 0a00 	orr.w	sl, sl, r0
 8019474:	f01a 0f01 	tst.w	sl, #1
 8019478:	d10e      	bne.n	8019498 <__gethex+0x3a4>
 801947a:	f047 0710 	orr.w	r7, r7, #16
 801947e:	e033      	b.n	80194e8 <__gethex+0x3f4>
 8019480:	f04f 0a01 	mov.w	sl, #1
 8019484:	e7d0      	b.n	8019428 <__gethex+0x334>
 8019486:	2701      	movs	r7, #1
 8019488:	e7e2      	b.n	8019450 <__gethex+0x35c>
 801948a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801948c:	f1c3 0301 	rsb	r3, r3, #1
 8019490:	9315      	str	r3, [sp, #84]	; 0x54
 8019492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019494:	2b00      	cmp	r3, #0
 8019496:	d0f0      	beq.n	801947a <__gethex+0x386>
 8019498:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801949c:	f104 0314 	add.w	r3, r4, #20
 80194a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80194a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80194a8:	f04f 0c00 	mov.w	ip, #0
 80194ac:	4618      	mov	r0, r3
 80194ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80194b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80194b6:	d01c      	beq.n	80194f2 <__gethex+0x3fe>
 80194b8:	3201      	adds	r2, #1
 80194ba:	6002      	str	r2, [r0, #0]
 80194bc:	2f02      	cmp	r7, #2
 80194be:	f104 0314 	add.w	r3, r4, #20
 80194c2:	d13f      	bne.n	8019544 <__gethex+0x450>
 80194c4:	f8d8 2000 	ldr.w	r2, [r8]
 80194c8:	3a01      	subs	r2, #1
 80194ca:	42b2      	cmp	r2, r6
 80194cc:	d10a      	bne.n	80194e4 <__gethex+0x3f0>
 80194ce:	1171      	asrs	r1, r6, #5
 80194d0:	2201      	movs	r2, #1
 80194d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80194d6:	f006 061f 	and.w	r6, r6, #31
 80194da:	fa02 f606 	lsl.w	r6, r2, r6
 80194de:	421e      	tst	r6, r3
 80194e0:	bf18      	it	ne
 80194e2:	4617      	movne	r7, r2
 80194e4:	f047 0720 	orr.w	r7, r7, #32
 80194e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80194ea:	601c      	str	r4, [r3, #0]
 80194ec:	9b04      	ldr	r3, [sp, #16]
 80194ee:	601d      	str	r5, [r3, #0]
 80194f0:	e695      	b.n	801921e <__gethex+0x12a>
 80194f2:	4299      	cmp	r1, r3
 80194f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80194f8:	d8d8      	bhi.n	80194ac <__gethex+0x3b8>
 80194fa:	68a3      	ldr	r3, [r4, #8]
 80194fc:	459b      	cmp	fp, r3
 80194fe:	db19      	blt.n	8019534 <__gethex+0x440>
 8019500:	6861      	ldr	r1, [r4, #4]
 8019502:	ee18 0a10 	vmov	r0, s16
 8019506:	3101      	adds	r1, #1
 8019508:	f000 f934 	bl	8019774 <_Balloc>
 801950c:	4681      	mov	r9, r0
 801950e:	b918      	cbnz	r0, 8019518 <__gethex+0x424>
 8019510:	4b1a      	ldr	r3, [pc, #104]	; (801957c <__gethex+0x488>)
 8019512:	4602      	mov	r2, r0
 8019514:	2184      	movs	r1, #132	; 0x84
 8019516:	e6a8      	b.n	801926a <__gethex+0x176>
 8019518:	6922      	ldr	r2, [r4, #16]
 801951a:	3202      	adds	r2, #2
 801951c:	f104 010c 	add.w	r1, r4, #12
 8019520:	0092      	lsls	r2, r2, #2
 8019522:	300c      	adds	r0, #12
 8019524:	f7fe fbbf 	bl	8017ca6 <memcpy>
 8019528:	4621      	mov	r1, r4
 801952a:	ee18 0a10 	vmov	r0, s16
 801952e:	f000 f961 	bl	80197f4 <_Bfree>
 8019532:	464c      	mov	r4, r9
 8019534:	6923      	ldr	r3, [r4, #16]
 8019536:	1c5a      	adds	r2, r3, #1
 8019538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801953c:	6122      	str	r2, [r4, #16]
 801953e:	2201      	movs	r2, #1
 8019540:	615a      	str	r2, [r3, #20]
 8019542:	e7bb      	b.n	80194bc <__gethex+0x3c8>
 8019544:	6922      	ldr	r2, [r4, #16]
 8019546:	455a      	cmp	r2, fp
 8019548:	dd0b      	ble.n	8019562 <__gethex+0x46e>
 801954a:	2101      	movs	r1, #1
 801954c:	4620      	mov	r0, r4
 801954e:	f7ff fd69 	bl	8019024 <rshift>
 8019552:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019556:	3501      	adds	r5, #1
 8019558:	42ab      	cmp	r3, r5
 801955a:	f6ff aed0 	blt.w	80192fe <__gethex+0x20a>
 801955e:	2701      	movs	r7, #1
 8019560:	e7c0      	b.n	80194e4 <__gethex+0x3f0>
 8019562:	f016 061f 	ands.w	r6, r6, #31
 8019566:	d0fa      	beq.n	801955e <__gethex+0x46a>
 8019568:	4453      	add	r3, sl
 801956a:	f1c6 0620 	rsb	r6, r6, #32
 801956e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8019572:	f000 f9f1 	bl	8019958 <__hi0bits>
 8019576:	42b0      	cmp	r0, r6
 8019578:	dbe7      	blt.n	801954a <__gethex+0x456>
 801957a:	e7f0      	b.n	801955e <__gethex+0x46a>
 801957c:	0801e511 	.word	0x0801e511

08019580 <L_shift>:
 8019580:	f1c2 0208 	rsb	r2, r2, #8
 8019584:	0092      	lsls	r2, r2, #2
 8019586:	b570      	push	{r4, r5, r6, lr}
 8019588:	f1c2 0620 	rsb	r6, r2, #32
 801958c:	6843      	ldr	r3, [r0, #4]
 801958e:	6804      	ldr	r4, [r0, #0]
 8019590:	fa03 f506 	lsl.w	r5, r3, r6
 8019594:	432c      	orrs	r4, r5
 8019596:	40d3      	lsrs	r3, r2
 8019598:	6004      	str	r4, [r0, #0]
 801959a:	f840 3f04 	str.w	r3, [r0, #4]!
 801959e:	4288      	cmp	r0, r1
 80195a0:	d3f4      	bcc.n	801958c <L_shift+0xc>
 80195a2:	bd70      	pop	{r4, r5, r6, pc}

080195a4 <__match>:
 80195a4:	b530      	push	{r4, r5, lr}
 80195a6:	6803      	ldr	r3, [r0, #0]
 80195a8:	3301      	adds	r3, #1
 80195aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195ae:	b914      	cbnz	r4, 80195b6 <__match+0x12>
 80195b0:	6003      	str	r3, [r0, #0]
 80195b2:	2001      	movs	r0, #1
 80195b4:	bd30      	pop	{r4, r5, pc}
 80195b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80195be:	2d19      	cmp	r5, #25
 80195c0:	bf98      	it	ls
 80195c2:	3220      	addls	r2, #32
 80195c4:	42a2      	cmp	r2, r4
 80195c6:	d0f0      	beq.n	80195aa <__match+0x6>
 80195c8:	2000      	movs	r0, #0
 80195ca:	e7f3      	b.n	80195b4 <__match+0x10>

080195cc <__hexnan>:
 80195cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195d0:	680b      	ldr	r3, [r1, #0]
 80195d2:	115e      	asrs	r6, r3, #5
 80195d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80195d8:	f013 031f 	ands.w	r3, r3, #31
 80195dc:	b087      	sub	sp, #28
 80195de:	bf18      	it	ne
 80195e0:	3604      	addne	r6, #4
 80195e2:	2500      	movs	r5, #0
 80195e4:	1f37      	subs	r7, r6, #4
 80195e6:	4690      	mov	r8, r2
 80195e8:	6802      	ldr	r2, [r0, #0]
 80195ea:	9301      	str	r3, [sp, #4]
 80195ec:	4682      	mov	sl, r0
 80195ee:	f846 5c04 	str.w	r5, [r6, #-4]
 80195f2:	46b9      	mov	r9, r7
 80195f4:	463c      	mov	r4, r7
 80195f6:	9502      	str	r5, [sp, #8]
 80195f8:	46ab      	mov	fp, r5
 80195fa:	7851      	ldrb	r1, [r2, #1]
 80195fc:	1c53      	adds	r3, r2, #1
 80195fe:	9303      	str	r3, [sp, #12]
 8019600:	b341      	cbz	r1, 8019654 <__hexnan+0x88>
 8019602:	4608      	mov	r0, r1
 8019604:	9205      	str	r2, [sp, #20]
 8019606:	9104      	str	r1, [sp, #16]
 8019608:	f7ff fd5e 	bl	80190c8 <__hexdig_fun>
 801960c:	2800      	cmp	r0, #0
 801960e:	d14f      	bne.n	80196b0 <__hexnan+0xe4>
 8019610:	9904      	ldr	r1, [sp, #16]
 8019612:	9a05      	ldr	r2, [sp, #20]
 8019614:	2920      	cmp	r1, #32
 8019616:	d818      	bhi.n	801964a <__hexnan+0x7e>
 8019618:	9b02      	ldr	r3, [sp, #8]
 801961a:	459b      	cmp	fp, r3
 801961c:	dd13      	ble.n	8019646 <__hexnan+0x7a>
 801961e:	454c      	cmp	r4, r9
 8019620:	d206      	bcs.n	8019630 <__hexnan+0x64>
 8019622:	2d07      	cmp	r5, #7
 8019624:	dc04      	bgt.n	8019630 <__hexnan+0x64>
 8019626:	462a      	mov	r2, r5
 8019628:	4649      	mov	r1, r9
 801962a:	4620      	mov	r0, r4
 801962c:	f7ff ffa8 	bl	8019580 <L_shift>
 8019630:	4544      	cmp	r4, r8
 8019632:	d950      	bls.n	80196d6 <__hexnan+0x10a>
 8019634:	2300      	movs	r3, #0
 8019636:	f1a4 0904 	sub.w	r9, r4, #4
 801963a:	f844 3c04 	str.w	r3, [r4, #-4]
 801963e:	f8cd b008 	str.w	fp, [sp, #8]
 8019642:	464c      	mov	r4, r9
 8019644:	461d      	mov	r5, r3
 8019646:	9a03      	ldr	r2, [sp, #12]
 8019648:	e7d7      	b.n	80195fa <__hexnan+0x2e>
 801964a:	2929      	cmp	r1, #41	; 0x29
 801964c:	d156      	bne.n	80196fc <__hexnan+0x130>
 801964e:	3202      	adds	r2, #2
 8019650:	f8ca 2000 	str.w	r2, [sl]
 8019654:	f1bb 0f00 	cmp.w	fp, #0
 8019658:	d050      	beq.n	80196fc <__hexnan+0x130>
 801965a:	454c      	cmp	r4, r9
 801965c:	d206      	bcs.n	801966c <__hexnan+0xa0>
 801965e:	2d07      	cmp	r5, #7
 8019660:	dc04      	bgt.n	801966c <__hexnan+0xa0>
 8019662:	462a      	mov	r2, r5
 8019664:	4649      	mov	r1, r9
 8019666:	4620      	mov	r0, r4
 8019668:	f7ff ff8a 	bl	8019580 <L_shift>
 801966c:	4544      	cmp	r4, r8
 801966e:	d934      	bls.n	80196da <__hexnan+0x10e>
 8019670:	f1a8 0204 	sub.w	r2, r8, #4
 8019674:	4623      	mov	r3, r4
 8019676:	f853 1b04 	ldr.w	r1, [r3], #4
 801967a:	f842 1f04 	str.w	r1, [r2, #4]!
 801967e:	429f      	cmp	r7, r3
 8019680:	d2f9      	bcs.n	8019676 <__hexnan+0xaa>
 8019682:	1b3b      	subs	r3, r7, r4
 8019684:	f023 0303 	bic.w	r3, r3, #3
 8019688:	3304      	adds	r3, #4
 801968a:	3401      	adds	r4, #1
 801968c:	3e03      	subs	r6, #3
 801968e:	42b4      	cmp	r4, r6
 8019690:	bf88      	it	hi
 8019692:	2304      	movhi	r3, #4
 8019694:	4443      	add	r3, r8
 8019696:	2200      	movs	r2, #0
 8019698:	f843 2b04 	str.w	r2, [r3], #4
 801969c:	429f      	cmp	r7, r3
 801969e:	d2fb      	bcs.n	8019698 <__hexnan+0xcc>
 80196a0:	683b      	ldr	r3, [r7, #0]
 80196a2:	b91b      	cbnz	r3, 80196ac <__hexnan+0xe0>
 80196a4:	4547      	cmp	r7, r8
 80196a6:	d127      	bne.n	80196f8 <__hexnan+0x12c>
 80196a8:	2301      	movs	r3, #1
 80196aa:	603b      	str	r3, [r7, #0]
 80196ac:	2005      	movs	r0, #5
 80196ae:	e026      	b.n	80196fe <__hexnan+0x132>
 80196b0:	3501      	adds	r5, #1
 80196b2:	2d08      	cmp	r5, #8
 80196b4:	f10b 0b01 	add.w	fp, fp, #1
 80196b8:	dd06      	ble.n	80196c8 <__hexnan+0xfc>
 80196ba:	4544      	cmp	r4, r8
 80196bc:	d9c3      	bls.n	8019646 <__hexnan+0x7a>
 80196be:	2300      	movs	r3, #0
 80196c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80196c4:	2501      	movs	r5, #1
 80196c6:	3c04      	subs	r4, #4
 80196c8:	6822      	ldr	r2, [r4, #0]
 80196ca:	f000 000f 	and.w	r0, r0, #15
 80196ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80196d2:	6022      	str	r2, [r4, #0]
 80196d4:	e7b7      	b.n	8019646 <__hexnan+0x7a>
 80196d6:	2508      	movs	r5, #8
 80196d8:	e7b5      	b.n	8019646 <__hexnan+0x7a>
 80196da:	9b01      	ldr	r3, [sp, #4]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d0df      	beq.n	80196a0 <__hexnan+0xd4>
 80196e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196e4:	f1c3 0320 	rsb	r3, r3, #32
 80196e8:	fa22 f303 	lsr.w	r3, r2, r3
 80196ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80196f0:	401a      	ands	r2, r3
 80196f2:	f846 2c04 	str.w	r2, [r6, #-4]
 80196f6:	e7d3      	b.n	80196a0 <__hexnan+0xd4>
 80196f8:	3f04      	subs	r7, #4
 80196fa:	e7d1      	b.n	80196a0 <__hexnan+0xd4>
 80196fc:	2004      	movs	r0, #4
 80196fe:	b007      	add	sp, #28
 8019700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019704 <_lseek_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4d07      	ldr	r5, [pc, #28]	; (8019724 <_lseek_r+0x20>)
 8019708:	4604      	mov	r4, r0
 801970a:	4608      	mov	r0, r1
 801970c:	4611      	mov	r1, r2
 801970e:	2200      	movs	r2, #0
 8019710:	602a      	str	r2, [r5, #0]
 8019712:	461a      	mov	r2, r3
 8019714:	f7e8 fad4 	bl	8001cc0 <_lseek>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_lseek_r+0x1e>
 801971c:	682b      	ldr	r3, [r5, #0]
 801971e:	b103      	cbz	r3, 8019722 <_lseek_r+0x1e>
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	20011d18 	.word	0x20011d18

08019728 <malloc>:
 8019728:	4b02      	ldr	r3, [pc, #8]	; (8019734 <malloc+0xc>)
 801972a:	4601      	mov	r1, r0
 801972c:	6818      	ldr	r0, [r3, #0]
 801972e:	f7fe bb0b 	b.w	8017d48 <_malloc_r>
 8019732:	bf00      	nop
 8019734:	2000002c 	.word	0x2000002c

08019738 <__ascii_mbtowc>:
 8019738:	b082      	sub	sp, #8
 801973a:	b901      	cbnz	r1, 801973e <__ascii_mbtowc+0x6>
 801973c:	a901      	add	r1, sp, #4
 801973e:	b142      	cbz	r2, 8019752 <__ascii_mbtowc+0x1a>
 8019740:	b14b      	cbz	r3, 8019756 <__ascii_mbtowc+0x1e>
 8019742:	7813      	ldrb	r3, [r2, #0]
 8019744:	600b      	str	r3, [r1, #0]
 8019746:	7812      	ldrb	r2, [r2, #0]
 8019748:	1e10      	subs	r0, r2, #0
 801974a:	bf18      	it	ne
 801974c:	2001      	movne	r0, #1
 801974e:	b002      	add	sp, #8
 8019750:	4770      	bx	lr
 8019752:	4610      	mov	r0, r2
 8019754:	e7fb      	b.n	801974e <__ascii_mbtowc+0x16>
 8019756:	f06f 0001 	mvn.w	r0, #1
 801975a:	e7f8      	b.n	801974e <__ascii_mbtowc+0x16>

0801975c <__malloc_lock>:
 801975c:	4801      	ldr	r0, [pc, #4]	; (8019764 <__malloc_lock+0x8>)
 801975e:	f7fe ba90 	b.w	8017c82 <__retarget_lock_acquire_recursive>
 8019762:	bf00      	nop
 8019764:	20011d0c 	.word	0x20011d0c

08019768 <__malloc_unlock>:
 8019768:	4801      	ldr	r0, [pc, #4]	; (8019770 <__malloc_unlock+0x8>)
 801976a:	f7fe ba8b 	b.w	8017c84 <__retarget_lock_release_recursive>
 801976e:	bf00      	nop
 8019770:	20011d0c 	.word	0x20011d0c

08019774 <_Balloc>:
 8019774:	b570      	push	{r4, r5, r6, lr}
 8019776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019778:	4604      	mov	r4, r0
 801977a:	460d      	mov	r5, r1
 801977c:	b976      	cbnz	r6, 801979c <_Balloc+0x28>
 801977e:	2010      	movs	r0, #16
 8019780:	f7ff ffd2 	bl	8019728 <malloc>
 8019784:	4602      	mov	r2, r0
 8019786:	6260      	str	r0, [r4, #36]	; 0x24
 8019788:	b920      	cbnz	r0, 8019794 <_Balloc+0x20>
 801978a:	4b18      	ldr	r3, [pc, #96]	; (80197ec <_Balloc+0x78>)
 801978c:	4818      	ldr	r0, [pc, #96]	; (80197f0 <_Balloc+0x7c>)
 801978e:	2166      	movs	r1, #102	; 0x66
 8019790:	f7ff fb46 	bl	8018e20 <__assert_func>
 8019794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019798:	6006      	str	r6, [r0, #0]
 801979a:	60c6      	str	r6, [r0, #12]
 801979c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801979e:	68f3      	ldr	r3, [r6, #12]
 80197a0:	b183      	cbz	r3, 80197c4 <_Balloc+0x50>
 80197a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80197a4:	68db      	ldr	r3, [r3, #12]
 80197a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80197aa:	b9b8      	cbnz	r0, 80197dc <_Balloc+0x68>
 80197ac:	2101      	movs	r1, #1
 80197ae:	fa01 f605 	lsl.w	r6, r1, r5
 80197b2:	1d72      	adds	r2, r6, #5
 80197b4:	0092      	lsls	r2, r2, #2
 80197b6:	4620      	mov	r0, r4
 80197b8:	f000 fc9d 	bl	801a0f6 <_calloc_r>
 80197bc:	b160      	cbz	r0, 80197d8 <_Balloc+0x64>
 80197be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80197c2:	e00e      	b.n	80197e2 <_Balloc+0x6e>
 80197c4:	2221      	movs	r2, #33	; 0x21
 80197c6:	2104      	movs	r1, #4
 80197c8:	4620      	mov	r0, r4
 80197ca:	f000 fc94 	bl	801a0f6 <_calloc_r>
 80197ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80197d0:	60f0      	str	r0, [r6, #12]
 80197d2:	68db      	ldr	r3, [r3, #12]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d1e4      	bne.n	80197a2 <_Balloc+0x2e>
 80197d8:	2000      	movs	r0, #0
 80197da:	bd70      	pop	{r4, r5, r6, pc}
 80197dc:	6802      	ldr	r2, [r0, #0]
 80197de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80197e2:	2300      	movs	r3, #0
 80197e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80197e8:	e7f7      	b.n	80197da <_Balloc+0x66>
 80197ea:	bf00      	nop
 80197ec:	0801e3a4 	.word	0x0801e3a4
 80197f0:	0801e59c 	.word	0x0801e59c

080197f4 <_Bfree>:
 80197f4:	b570      	push	{r4, r5, r6, lr}
 80197f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80197f8:	4605      	mov	r5, r0
 80197fa:	460c      	mov	r4, r1
 80197fc:	b976      	cbnz	r6, 801981c <_Bfree+0x28>
 80197fe:	2010      	movs	r0, #16
 8019800:	f7ff ff92 	bl	8019728 <malloc>
 8019804:	4602      	mov	r2, r0
 8019806:	6268      	str	r0, [r5, #36]	; 0x24
 8019808:	b920      	cbnz	r0, 8019814 <_Bfree+0x20>
 801980a:	4b09      	ldr	r3, [pc, #36]	; (8019830 <_Bfree+0x3c>)
 801980c:	4809      	ldr	r0, [pc, #36]	; (8019834 <_Bfree+0x40>)
 801980e:	218a      	movs	r1, #138	; 0x8a
 8019810:	f7ff fb06 	bl	8018e20 <__assert_func>
 8019814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019818:	6006      	str	r6, [r0, #0]
 801981a:	60c6      	str	r6, [r0, #12]
 801981c:	b13c      	cbz	r4, 801982e <_Bfree+0x3a>
 801981e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019820:	6862      	ldr	r2, [r4, #4]
 8019822:	68db      	ldr	r3, [r3, #12]
 8019824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019828:	6021      	str	r1, [r4, #0]
 801982a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801982e:	bd70      	pop	{r4, r5, r6, pc}
 8019830:	0801e3a4 	.word	0x0801e3a4
 8019834:	0801e59c 	.word	0x0801e59c

08019838 <__multadd>:
 8019838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801983c:	690d      	ldr	r5, [r1, #16]
 801983e:	4607      	mov	r7, r0
 8019840:	460c      	mov	r4, r1
 8019842:	461e      	mov	r6, r3
 8019844:	f101 0c14 	add.w	ip, r1, #20
 8019848:	2000      	movs	r0, #0
 801984a:	f8dc 3000 	ldr.w	r3, [ip]
 801984e:	b299      	uxth	r1, r3
 8019850:	fb02 6101 	mla	r1, r2, r1, r6
 8019854:	0c1e      	lsrs	r6, r3, #16
 8019856:	0c0b      	lsrs	r3, r1, #16
 8019858:	fb02 3306 	mla	r3, r2, r6, r3
 801985c:	b289      	uxth	r1, r1
 801985e:	3001      	adds	r0, #1
 8019860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019864:	4285      	cmp	r5, r0
 8019866:	f84c 1b04 	str.w	r1, [ip], #4
 801986a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801986e:	dcec      	bgt.n	801984a <__multadd+0x12>
 8019870:	b30e      	cbz	r6, 80198b6 <__multadd+0x7e>
 8019872:	68a3      	ldr	r3, [r4, #8]
 8019874:	42ab      	cmp	r3, r5
 8019876:	dc19      	bgt.n	80198ac <__multadd+0x74>
 8019878:	6861      	ldr	r1, [r4, #4]
 801987a:	4638      	mov	r0, r7
 801987c:	3101      	adds	r1, #1
 801987e:	f7ff ff79 	bl	8019774 <_Balloc>
 8019882:	4680      	mov	r8, r0
 8019884:	b928      	cbnz	r0, 8019892 <__multadd+0x5a>
 8019886:	4602      	mov	r2, r0
 8019888:	4b0c      	ldr	r3, [pc, #48]	; (80198bc <__multadd+0x84>)
 801988a:	480d      	ldr	r0, [pc, #52]	; (80198c0 <__multadd+0x88>)
 801988c:	21b5      	movs	r1, #181	; 0xb5
 801988e:	f7ff fac7 	bl	8018e20 <__assert_func>
 8019892:	6922      	ldr	r2, [r4, #16]
 8019894:	3202      	adds	r2, #2
 8019896:	f104 010c 	add.w	r1, r4, #12
 801989a:	0092      	lsls	r2, r2, #2
 801989c:	300c      	adds	r0, #12
 801989e:	f7fe fa02 	bl	8017ca6 <memcpy>
 80198a2:	4621      	mov	r1, r4
 80198a4:	4638      	mov	r0, r7
 80198a6:	f7ff ffa5 	bl	80197f4 <_Bfree>
 80198aa:	4644      	mov	r4, r8
 80198ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80198b0:	3501      	adds	r5, #1
 80198b2:	615e      	str	r6, [r3, #20]
 80198b4:	6125      	str	r5, [r4, #16]
 80198b6:	4620      	mov	r0, r4
 80198b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198bc:	0801e511 	.word	0x0801e511
 80198c0:	0801e59c 	.word	0x0801e59c

080198c4 <__s2b>:
 80198c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198c8:	460c      	mov	r4, r1
 80198ca:	4615      	mov	r5, r2
 80198cc:	461f      	mov	r7, r3
 80198ce:	2209      	movs	r2, #9
 80198d0:	3308      	adds	r3, #8
 80198d2:	4606      	mov	r6, r0
 80198d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80198d8:	2100      	movs	r1, #0
 80198da:	2201      	movs	r2, #1
 80198dc:	429a      	cmp	r2, r3
 80198de:	db09      	blt.n	80198f4 <__s2b+0x30>
 80198e0:	4630      	mov	r0, r6
 80198e2:	f7ff ff47 	bl	8019774 <_Balloc>
 80198e6:	b940      	cbnz	r0, 80198fa <__s2b+0x36>
 80198e8:	4602      	mov	r2, r0
 80198ea:	4b19      	ldr	r3, [pc, #100]	; (8019950 <__s2b+0x8c>)
 80198ec:	4819      	ldr	r0, [pc, #100]	; (8019954 <__s2b+0x90>)
 80198ee:	21ce      	movs	r1, #206	; 0xce
 80198f0:	f7ff fa96 	bl	8018e20 <__assert_func>
 80198f4:	0052      	lsls	r2, r2, #1
 80198f6:	3101      	adds	r1, #1
 80198f8:	e7f0      	b.n	80198dc <__s2b+0x18>
 80198fa:	9b08      	ldr	r3, [sp, #32]
 80198fc:	6143      	str	r3, [r0, #20]
 80198fe:	2d09      	cmp	r5, #9
 8019900:	f04f 0301 	mov.w	r3, #1
 8019904:	6103      	str	r3, [r0, #16]
 8019906:	dd16      	ble.n	8019936 <__s2b+0x72>
 8019908:	f104 0909 	add.w	r9, r4, #9
 801990c:	46c8      	mov	r8, r9
 801990e:	442c      	add	r4, r5
 8019910:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019914:	4601      	mov	r1, r0
 8019916:	3b30      	subs	r3, #48	; 0x30
 8019918:	220a      	movs	r2, #10
 801991a:	4630      	mov	r0, r6
 801991c:	f7ff ff8c 	bl	8019838 <__multadd>
 8019920:	45a0      	cmp	r8, r4
 8019922:	d1f5      	bne.n	8019910 <__s2b+0x4c>
 8019924:	f1a5 0408 	sub.w	r4, r5, #8
 8019928:	444c      	add	r4, r9
 801992a:	1b2d      	subs	r5, r5, r4
 801992c:	1963      	adds	r3, r4, r5
 801992e:	42bb      	cmp	r3, r7
 8019930:	db04      	blt.n	801993c <__s2b+0x78>
 8019932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019936:	340a      	adds	r4, #10
 8019938:	2509      	movs	r5, #9
 801993a:	e7f6      	b.n	801992a <__s2b+0x66>
 801993c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019940:	4601      	mov	r1, r0
 8019942:	3b30      	subs	r3, #48	; 0x30
 8019944:	220a      	movs	r2, #10
 8019946:	4630      	mov	r0, r6
 8019948:	f7ff ff76 	bl	8019838 <__multadd>
 801994c:	e7ee      	b.n	801992c <__s2b+0x68>
 801994e:	bf00      	nop
 8019950:	0801e511 	.word	0x0801e511
 8019954:	0801e59c 	.word	0x0801e59c

08019958 <__hi0bits>:
 8019958:	0c03      	lsrs	r3, r0, #16
 801995a:	041b      	lsls	r3, r3, #16
 801995c:	b9d3      	cbnz	r3, 8019994 <__hi0bits+0x3c>
 801995e:	0400      	lsls	r0, r0, #16
 8019960:	2310      	movs	r3, #16
 8019962:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019966:	bf04      	itt	eq
 8019968:	0200      	lsleq	r0, r0, #8
 801996a:	3308      	addeq	r3, #8
 801996c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019970:	bf04      	itt	eq
 8019972:	0100      	lsleq	r0, r0, #4
 8019974:	3304      	addeq	r3, #4
 8019976:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801997a:	bf04      	itt	eq
 801997c:	0080      	lsleq	r0, r0, #2
 801997e:	3302      	addeq	r3, #2
 8019980:	2800      	cmp	r0, #0
 8019982:	db05      	blt.n	8019990 <__hi0bits+0x38>
 8019984:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019988:	f103 0301 	add.w	r3, r3, #1
 801998c:	bf08      	it	eq
 801998e:	2320      	moveq	r3, #32
 8019990:	4618      	mov	r0, r3
 8019992:	4770      	bx	lr
 8019994:	2300      	movs	r3, #0
 8019996:	e7e4      	b.n	8019962 <__hi0bits+0xa>

08019998 <__lo0bits>:
 8019998:	6803      	ldr	r3, [r0, #0]
 801999a:	f013 0207 	ands.w	r2, r3, #7
 801999e:	4601      	mov	r1, r0
 80199a0:	d00b      	beq.n	80199ba <__lo0bits+0x22>
 80199a2:	07da      	lsls	r2, r3, #31
 80199a4:	d423      	bmi.n	80199ee <__lo0bits+0x56>
 80199a6:	0798      	lsls	r0, r3, #30
 80199a8:	bf49      	itett	mi
 80199aa:	085b      	lsrmi	r3, r3, #1
 80199ac:	089b      	lsrpl	r3, r3, #2
 80199ae:	2001      	movmi	r0, #1
 80199b0:	600b      	strmi	r3, [r1, #0]
 80199b2:	bf5c      	itt	pl
 80199b4:	600b      	strpl	r3, [r1, #0]
 80199b6:	2002      	movpl	r0, #2
 80199b8:	4770      	bx	lr
 80199ba:	b298      	uxth	r0, r3
 80199bc:	b9a8      	cbnz	r0, 80199ea <__lo0bits+0x52>
 80199be:	0c1b      	lsrs	r3, r3, #16
 80199c0:	2010      	movs	r0, #16
 80199c2:	b2da      	uxtb	r2, r3
 80199c4:	b90a      	cbnz	r2, 80199ca <__lo0bits+0x32>
 80199c6:	3008      	adds	r0, #8
 80199c8:	0a1b      	lsrs	r3, r3, #8
 80199ca:	071a      	lsls	r2, r3, #28
 80199cc:	bf04      	itt	eq
 80199ce:	091b      	lsreq	r3, r3, #4
 80199d0:	3004      	addeq	r0, #4
 80199d2:	079a      	lsls	r2, r3, #30
 80199d4:	bf04      	itt	eq
 80199d6:	089b      	lsreq	r3, r3, #2
 80199d8:	3002      	addeq	r0, #2
 80199da:	07da      	lsls	r2, r3, #31
 80199dc:	d403      	bmi.n	80199e6 <__lo0bits+0x4e>
 80199de:	085b      	lsrs	r3, r3, #1
 80199e0:	f100 0001 	add.w	r0, r0, #1
 80199e4:	d005      	beq.n	80199f2 <__lo0bits+0x5a>
 80199e6:	600b      	str	r3, [r1, #0]
 80199e8:	4770      	bx	lr
 80199ea:	4610      	mov	r0, r2
 80199ec:	e7e9      	b.n	80199c2 <__lo0bits+0x2a>
 80199ee:	2000      	movs	r0, #0
 80199f0:	4770      	bx	lr
 80199f2:	2020      	movs	r0, #32
 80199f4:	4770      	bx	lr
	...

080199f8 <__i2b>:
 80199f8:	b510      	push	{r4, lr}
 80199fa:	460c      	mov	r4, r1
 80199fc:	2101      	movs	r1, #1
 80199fe:	f7ff feb9 	bl	8019774 <_Balloc>
 8019a02:	4602      	mov	r2, r0
 8019a04:	b928      	cbnz	r0, 8019a12 <__i2b+0x1a>
 8019a06:	4b05      	ldr	r3, [pc, #20]	; (8019a1c <__i2b+0x24>)
 8019a08:	4805      	ldr	r0, [pc, #20]	; (8019a20 <__i2b+0x28>)
 8019a0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019a0e:	f7ff fa07 	bl	8018e20 <__assert_func>
 8019a12:	2301      	movs	r3, #1
 8019a14:	6144      	str	r4, [r0, #20]
 8019a16:	6103      	str	r3, [r0, #16]
 8019a18:	bd10      	pop	{r4, pc}
 8019a1a:	bf00      	nop
 8019a1c:	0801e511 	.word	0x0801e511
 8019a20:	0801e59c 	.word	0x0801e59c

08019a24 <__multiply>:
 8019a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a28:	4691      	mov	r9, r2
 8019a2a:	690a      	ldr	r2, [r1, #16]
 8019a2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019a30:	429a      	cmp	r2, r3
 8019a32:	bfb8      	it	lt
 8019a34:	460b      	movlt	r3, r1
 8019a36:	460c      	mov	r4, r1
 8019a38:	bfbc      	itt	lt
 8019a3a:	464c      	movlt	r4, r9
 8019a3c:	4699      	movlt	r9, r3
 8019a3e:	6927      	ldr	r7, [r4, #16]
 8019a40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019a44:	68a3      	ldr	r3, [r4, #8]
 8019a46:	6861      	ldr	r1, [r4, #4]
 8019a48:	eb07 060a 	add.w	r6, r7, sl
 8019a4c:	42b3      	cmp	r3, r6
 8019a4e:	b085      	sub	sp, #20
 8019a50:	bfb8      	it	lt
 8019a52:	3101      	addlt	r1, #1
 8019a54:	f7ff fe8e 	bl	8019774 <_Balloc>
 8019a58:	b930      	cbnz	r0, 8019a68 <__multiply+0x44>
 8019a5a:	4602      	mov	r2, r0
 8019a5c:	4b44      	ldr	r3, [pc, #272]	; (8019b70 <__multiply+0x14c>)
 8019a5e:	4845      	ldr	r0, [pc, #276]	; (8019b74 <__multiply+0x150>)
 8019a60:	f240 115d 	movw	r1, #349	; 0x15d
 8019a64:	f7ff f9dc 	bl	8018e20 <__assert_func>
 8019a68:	f100 0514 	add.w	r5, r0, #20
 8019a6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019a70:	462b      	mov	r3, r5
 8019a72:	2200      	movs	r2, #0
 8019a74:	4543      	cmp	r3, r8
 8019a76:	d321      	bcc.n	8019abc <__multiply+0x98>
 8019a78:	f104 0314 	add.w	r3, r4, #20
 8019a7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019a80:	f109 0314 	add.w	r3, r9, #20
 8019a84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019a88:	9202      	str	r2, [sp, #8]
 8019a8a:	1b3a      	subs	r2, r7, r4
 8019a8c:	3a15      	subs	r2, #21
 8019a8e:	f022 0203 	bic.w	r2, r2, #3
 8019a92:	3204      	adds	r2, #4
 8019a94:	f104 0115 	add.w	r1, r4, #21
 8019a98:	428f      	cmp	r7, r1
 8019a9a:	bf38      	it	cc
 8019a9c:	2204      	movcc	r2, #4
 8019a9e:	9201      	str	r2, [sp, #4]
 8019aa0:	9a02      	ldr	r2, [sp, #8]
 8019aa2:	9303      	str	r3, [sp, #12]
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	d80c      	bhi.n	8019ac2 <__multiply+0x9e>
 8019aa8:	2e00      	cmp	r6, #0
 8019aaa:	dd03      	ble.n	8019ab4 <__multiply+0x90>
 8019aac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d05a      	beq.n	8019b6a <__multiply+0x146>
 8019ab4:	6106      	str	r6, [r0, #16]
 8019ab6:	b005      	add	sp, #20
 8019ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019abc:	f843 2b04 	str.w	r2, [r3], #4
 8019ac0:	e7d8      	b.n	8019a74 <__multiply+0x50>
 8019ac2:	f8b3 a000 	ldrh.w	sl, [r3]
 8019ac6:	f1ba 0f00 	cmp.w	sl, #0
 8019aca:	d024      	beq.n	8019b16 <__multiply+0xf2>
 8019acc:	f104 0e14 	add.w	lr, r4, #20
 8019ad0:	46a9      	mov	r9, r5
 8019ad2:	f04f 0c00 	mov.w	ip, #0
 8019ad6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019ada:	f8d9 1000 	ldr.w	r1, [r9]
 8019ade:	fa1f fb82 	uxth.w	fp, r2
 8019ae2:	b289      	uxth	r1, r1
 8019ae4:	fb0a 110b 	mla	r1, sl, fp, r1
 8019ae8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019aec:	f8d9 2000 	ldr.w	r2, [r9]
 8019af0:	4461      	add	r1, ip
 8019af2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019af6:	fb0a c20b 	mla	r2, sl, fp, ip
 8019afa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019afe:	b289      	uxth	r1, r1
 8019b00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019b04:	4577      	cmp	r7, lr
 8019b06:	f849 1b04 	str.w	r1, [r9], #4
 8019b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019b0e:	d8e2      	bhi.n	8019ad6 <__multiply+0xb2>
 8019b10:	9a01      	ldr	r2, [sp, #4]
 8019b12:	f845 c002 	str.w	ip, [r5, r2]
 8019b16:	9a03      	ldr	r2, [sp, #12]
 8019b18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019b1c:	3304      	adds	r3, #4
 8019b1e:	f1b9 0f00 	cmp.w	r9, #0
 8019b22:	d020      	beq.n	8019b66 <__multiply+0x142>
 8019b24:	6829      	ldr	r1, [r5, #0]
 8019b26:	f104 0c14 	add.w	ip, r4, #20
 8019b2a:	46ae      	mov	lr, r5
 8019b2c:	f04f 0a00 	mov.w	sl, #0
 8019b30:	f8bc b000 	ldrh.w	fp, [ip]
 8019b34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019b38:	fb09 220b 	mla	r2, r9, fp, r2
 8019b3c:	4492      	add	sl, r2
 8019b3e:	b289      	uxth	r1, r1
 8019b40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019b44:	f84e 1b04 	str.w	r1, [lr], #4
 8019b48:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019b4c:	f8be 1000 	ldrh.w	r1, [lr]
 8019b50:	0c12      	lsrs	r2, r2, #16
 8019b52:	fb09 1102 	mla	r1, r9, r2, r1
 8019b56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019b5a:	4567      	cmp	r7, ip
 8019b5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019b60:	d8e6      	bhi.n	8019b30 <__multiply+0x10c>
 8019b62:	9a01      	ldr	r2, [sp, #4]
 8019b64:	50a9      	str	r1, [r5, r2]
 8019b66:	3504      	adds	r5, #4
 8019b68:	e79a      	b.n	8019aa0 <__multiply+0x7c>
 8019b6a:	3e01      	subs	r6, #1
 8019b6c:	e79c      	b.n	8019aa8 <__multiply+0x84>
 8019b6e:	bf00      	nop
 8019b70:	0801e511 	.word	0x0801e511
 8019b74:	0801e59c 	.word	0x0801e59c

08019b78 <__pow5mult>:
 8019b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b7c:	4615      	mov	r5, r2
 8019b7e:	f012 0203 	ands.w	r2, r2, #3
 8019b82:	4606      	mov	r6, r0
 8019b84:	460f      	mov	r7, r1
 8019b86:	d007      	beq.n	8019b98 <__pow5mult+0x20>
 8019b88:	4c25      	ldr	r4, [pc, #148]	; (8019c20 <__pow5mult+0xa8>)
 8019b8a:	3a01      	subs	r2, #1
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019b92:	f7ff fe51 	bl	8019838 <__multadd>
 8019b96:	4607      	mov	r7, r0
 8019b98:	10ad      	asrs	r5, r5, #2
 8019b9a:	d03d      	beq.n	8019c18 <__pow5mult+0xa0>
 8019b9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019b9e:	b97c      	cbnz	r4, 8019bc0 <__pow5mult+0x48>
 8019ba0:	2010      	movs	r0, #16
 8019ba2:	f7ff fdc1 	bl	8019728 <malloc>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	6270      	str	r0, [r6, #36]	; 0x24
 8019baa:	b928      	cbnz	r0, 8019bb8 <__pow5mult+0x40>
 8019bac:	4b1d      	ldr	r3, [pc, #116]	; (8019c24 <__pow5mult+0xac>)
 8019bae:	481e      	ldr	r0, [pc, #120]	; (8019c28 <__pow5mult+0xb0>)
 8019bb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019bb4:	f7ff f934 	bl	8018e20 <__assert_func>
 8019bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019bbc:	6004      	str	r4, [r0, #0]
 8019bbe:	60c4      	str	r4, [r0, #12]
 8019bc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019bc8:	b94c      	cbnz	r4, 8019bde <__pow5mult+0x66>
 8019bca:	f240 2171 	movw	r1, #625	; 0x271
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f7ff ff12 	bl	80199f8 <__i2b>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8019bda:	4604      	mov	r4, r0
 8019bdc:	6003      	str	r3, [r0, #0]
 8019bde:	f04f 0900 	mov.w	r9, #0
 8019be2:	07eb      	lsls	r3, r5, #31
 8019be4:	d50a      	bpl.n	8019bfc <__pow5mult+0x84>
 8019be6:	4639      	mov	r1, r7
 8019be8:	4622      	mov	r2, r4
 8019bea:	4630      	mov	r0, r6
 8019bec:	f7ff ff1a 	bl	8019a24 <__multiply>
 8019bf0:	4639      	mov	r1, r7
 8019bf2:	4680      	mov	r8, r0
 8019bf4:	4630      	mov	r0, r6
 8019bf6:	f7ff fdfd 	bl	80197f4 <_Bfree>
 8019bfa:	4647      	mov	r7, r8
 8019bfc:	106d      	asrs	r5, r5, #1
 8019bfe:	d00b      	beq.n	8019c18 <__pow5mult+0xa0>
 8019c00:	6820      	ldr	r0, [r4, #0]
 8019c02:	b938      	cbnz	r0, 8019c14 <__pow5mult+0x9c>
 8019c04:	4622      	mov	r2, r4
 8019c06:	4621      	mov	r1, r4
 8019c08:	4630      	mov	r0, r6
 8019c0a:	f7ff ff0b 	bl	8019a24 <__multiply>
 8019c0e:	6020      	str	r0, [r4, #0]
 8019c10:	f8c0 9000 	str.w	r9, [r0]
 8019c14:	4604      	mov	r4, r0
 8019c16:	e7e4      	b.n	8019be2 <__pow5mult+0x6a>
 8019c18:	4638      	mov	r0, r7
 8019c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c1e:	bf00      	nop
 8019c20:	0801e6e8 	.word	0x0801e6e8
 8019c24:	0801e3a4 	.word	0x0801e3a4
 8019c28:	0801e59c 	.word	0x0801e59c

08019c2c <__lshift>:
 8019c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c30:	460c      	mov	r4, r1
 8019c32:	6849      	ldr	r1, [r1, #4]
 8019c34:	6923      	ldr	r3, [r4, #16]
 8019c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019c3a:	68a3      	ldr	r3, [r4, #8]
 8019c3c:	4607      	mov	r7, r0
 8019c3e:	4691      	mov	r9, r2
 8019c40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019c44:	f108 0601 	add.w	r6, r8, #1
 8019c48:	42b3      	cmp	r3, r6
 8019c4a:	db0b      	blt.n	8019c64 <__lshift+0x38>
 8019c4c:	4638      	mov	r0, r7
 8019c4e:	f7ff fd91 	bl	8019774 <_Balloc>
 8019c52:	4605      	mov	r5, r0
 8019c54:	b948      	cbnz	r0, 8019c6a <__lshift+0x3e>
 8019c56:	4602      	mov	r2, r0
 8019c58:	4b2a      	ldr	r3, [pc, #168]	; (8019d04 <__lshift+0xd8>)
 8019c5a:	482b      	ldr	r0, [pc, #172]	; (8019d08 <__lshift+0xdc>)
 8019c5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019c60:	f7ff f8de 	bl	8018e20 <__assert_func>
 8019c64:	3101      	adds	r1, #1
 8019c66:	005b      	lsls	r3, r3, #1
 8019c68:	e7ee      	b.n	8019c48 <__lshift+0x1c>
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	f100 0114 	add.w	r1, r0, #20
 8019c70:	f100 0210 	add.w	r2, r0, #16
 8019c74:	4618      	mov	r0, r3
 8019c76:	4553      	cmp	r3, sl
 8019c78:	db37      	blt.n	8019cea <__lshift+0xbe>
 8019c7a:	6920      	ldr	r0, [r4, #16]
 8019c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019c80:	f104 0314 	add.w	r3, r4, #20
 8019c84:	f019 091f 	ands.w	r9, r9, #31
 8019c88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019c90:	d02f      	beq.n	8019cf2 <__lshift+0xc6>
 8019c92:	f1c9 0e20 	rsb	lr, r9, #32
 8019c96:	468a      	mov	sl, r1
 8019c98:	f04f 0c00 	mov.w	ip, #0
 8019c9c:	681a      	ldr	r2, [r3, #0]
 8019c9e:	fa02 f209 	lsl.w	r2, r2, r9
 8019ca2:	ea42 020c 	orr.w	r2, r2, ip
 8019ca6:	f84a 2b04 	str.w	r2, [sl], #4
 8019caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cae:	4298      	cmp	r0, r3
 8019cb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019cb4:	d8f2      	bhi.n	8019c9c <__lshift+0x70>
 8019cb6:	1b03      	subs	r3, r0, r4
 8019cb8:	3b15      	subs	r3, #21
 8019cba:	f023 0303 	bic.w	r3, r3, #3
 8019cbe:	3304      	adds	r3, #4
 8019cc0:	f104 0215 	add.w	r2, r4, #21
 8019cc4:	4290      	cmp	r0, r2
 8019cc6:	bf38      	it	cc
 8019cc8:	2304      	movcc	r3, #4
 8019cca:	f841 c003 	str.w	ip, [r1, r3]
 8019cce:	f1bc 0f00 	cmp.w	ip, #0
 8019cd2:	d001      	beq.n	8019cd8 <__lshift+0xac>
 8019cd4:	f108 0602 	add.w	r6, r8, #2
 8019cd8:	3e01      	subs	r6, #1
 8019cda:	4638      	mov	r0, r7
 8019cdc:	612e      	str	r6, [r5, #16]
 8019cde:	4621      	mov	r1, r4
 8019ce0:	f7ff fd88 	bl	80197f4 <_Bfree>
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8019cee:	3301      	adds	r3, #1
 8019cf0:	e7c1      	b.n	8019c76 <__lshift+0x4a>
 8019cf2:	3904      	subs	r1, #4
 8019cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8019cfc:	4298      	cmp	r0, r3
 8019cfe:	d8f9      	bhi.n	8019cf4 <__lshift+0xc8>
 8019d00:	e7ea      	b.n	8019cd8 <__lshift+0xac>
 8019d02:	bf00      	nop
 8019d04:	0801e511 	.word	0x0801e511
 8019d08:	0801e59c 	.word	0x0801e59c

08019d0c <__mcmp>:
 8019d0c:	b530      	push	{r4, r5, lr}
 8019d0e:	6902      	ldr	r2, [r0, #16]
 8019d10:	690c      	ldr	r4, [r1, #16]
 8019d12:	1b12      	subs	r2, r2, r4
 8019d14:	d10e      	bne.n	8019d34 <__mcmp+0x28>
 8019d16:	f100 0314 	add.w	r3, r0, #20
 8019d1a:	3114      	adds	r1, #20
 8019d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019d2c:	42a5      	cmp	r5, r4
 8019d2e:	d003      	beq.n	8019d38 <__mcmp+0x2c>
 8019d30:	d305      	bcc.n	8019d3e <__mcmp+0x32>
 8019d32:	2201      	movs	r2, #1
 8019d34:	4610      	mov	r0, r2
 8019d36:	bd30      	pop	{r4, r5, pc}
 8019d38:	4283      	cmp	r3, r0
 8019d3a:	d3f3      	bcc.n	8019d24 <__mcmp+0x18>
 8019d3c:	e7fa      	b.n	8019d34 <__mcmp+0x28>
 8019d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d42:	e7f7      	b.n	8019d34 <__mcmp+0x28>

08019d44 <__mdiff>:
 8019d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	460c      	mov	r4, r1
 8019d4a:	4606      	mov	r6, r0
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	4620      	mov	r0, r4
 8019d50:	4690      	mov	r8, r2
 8019d52:	f7ff ffdb 	bl	8019d0c <__mcmp>
 8019d56:	1e05      	subs	r5, r0, #0
 8019d58:	d110      	bne.n	8019d7c <__mdiff+0x38>
 8019d5a:	4629      	mov	r1, r5
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	f7ff fd09 	bl	8019774 <_Balloc>
 8019d62:	b930      	cbnz	r0, 8019d72 <__mdiff+0x2e>
 8019d64:	4b3a      	ldr	r3, [pc, #232]	; (8019e50 <__mdiff+0x10c>)
 8019d66:	4602      	mov	r2, r0
 8019d68:	f240 2132 	movw	r1, #562	; 0x232
 8019d6c:	4839      	ldr	r0, [pc, #228]	; (8019e54 <__mdiff+0x110>)
 8019d6e:	f7ff f857 	bl	8018e20 <__assert_func>
 8019d72:	2301      	movs	r3, #1
 8019d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d7c:	bfa4      	itt	ge
 8019d7e:	4643      	movge	r3, r8
 8019d80:	46a0      	movge	r8, r4
 8019d82:	4630      	mov	r0, r6
 8019d84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019d88:	bfa6      	itte	ge
 8019d8a:	461c      	movge	r4, r3
 8019d8c:	2500      	movge	r5, #0
 8019d8e:	2501      	movlt	r5, #1
 8019d90:	f7ff fcf0 	bl	8019774 <_Balloc>
 8019d94:	b920      	cbnz	r0, 8019da0 <__mdiff+0x5c>
 8019d96:	4b2e      	ldr	r3, [pc, #184]	; (8019e50 <__mdiff+0x10c>)
 8019d98:	4602      	mov	r2, r0
 8019d9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019d9e:	e7e5      	b.n	8019d6c <__mdiff+0x28>
 8019da0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019da4:	6926      	ldr	r6, [r4, #16]
 8019da6:	60c5      	str	r5, [r0, #12]
 8019da8:	f104 0914 	add.w	r9, r4, #20
 8019dac:	f108 0514 	add.w	r5, r8, #20
 8019db0:	f100 0e14 	add.w	lr, r0, #20
 8019db4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019db8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019dbc:	f108 0210 	add.w	r2, r8, #16
 8019dc0:	46f2      	mov	sl, lr
 8019dc2:	2100      	movs	r1, #0
 8019dc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8019dc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019dcc:	fa1f f883 	uxth.w	r8, r3
 8019dd0:	fa11 f18b 	uxtah	r1, r1, fp
 8019dd4:	0c1b      	lsrs	r3, r3, #16
 8019dd6:	eba1 0808 	sub.w	r8, r1, r8
 8019dda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019dde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019de2:	fa1f f888 	uxth.w	r8, r8
 8019de6:	1419      	asrs	r1, r3, #16
 8019de8:	454e      	cmp	r6, r9
 8019dea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019dee:	f84a 3b04 	str.w	r3, [sl], #4
 8019df2:	d8e7      	bhi.n	8019dc4 <__mdiff+0x80>
 8019df4:	1b33      	subs	r3, r6, r4
 8019df6:	3b15      	subs	r3, #21
 8019df8:	f023 0303 	bic.w	r3, r3, #3
 8019dfc:	3304      	adds	r3, #4
 8019dfe:	3415      	adds	r4, #21
 8019e00:	42a6      	cmp	r6, r4
 8019e02:	bf38      	it	cc
 8019e04:	2304      	movcc	r3, #4
 8019e06:	441d      	add	r5, r3
 8019e08:	4473      	add	r3, lr
 8019e0a:	469e      	mov	lr, r3
 8019e0c:	462e      	mov	r6, r5
 8019e0e:	4566      	cmp	r6, ip
 8019e10:	d30e      	bcc.n	8019e30 <__mdiff+0xec>
 8019e12:	f10c 0203 	add.w	r2, ip, #3
 8019e16:	1b52      	subs	r2, r2, r5
 8019e18:	f022 0203 	bic.w	r2, r2, #3
 8019e1c:	3d03      	subs	r5, #3
 8019e1e:	45ac      	cmp	ip, r5
 8019e20:	bf38      	it	cc
 8019e22:	2200      	movcc	r2, #0
 8019e24:	441a      	add	r2, r3
 8019e26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019e2a:	b17b      	cbz	r3, 8019e4c <__mdiff+0x108>
 8019e2c:	6107      	str	r7, [r0, #16]
 8019e2e:	e7a3      	b.n	8019d78 <__mdiff+0x34>
 8019e30:	f856 8b04 	ldr.w	r8, [r6], #4
 8019e34:	fa11 f288 	uxtah	r2, r1, r8
 8019e38:	1414      	asrs	r4, r2, #16
 8019e3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019e3e:	b292      	uxth	r2, r2
 8019e40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019e44:	f84e 2b04 	str.w	r2, [lr], #4
 8019e48:	1421      	asrs	r1, r4, #16
 8019e4a:	e7e0      	b.n	8019e0e <__mdiff+0xca>
 8019e4c:	3f01      	subs	r7, #1
 8019e4e:	e7ea      	b.n	8019e26 <__mdiff+0xe2>
 8019e50:	0801e511 	.word	0x0801e511
 8019e54:	0801e59c 	.word	0x0801e59c

08019e58 <__ulp>:
 8019e58:	b082      	sub	sp, #8
 8019e5a:	ed8d 0b00 	vstr	d0, [sp]
 8019e5e:	9b01      	ldr	r3, [sp, #4]
 8019e60:	4912      	ldr	r1, [pc, #72]	; (8019eac <__ulp+0x54>)
 8019e62:	4019      	ands	r1, r3
 8019e64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019e68:	2900      	cmp	r1, #0
 8019e6a:	dd05      	ble.n	8019e78 <__ulp+0x20>
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	460b      	mov	r3, r1
 8019e70:	ec43 2b10 	vmov	d0, r2, r3
 8019e74:	b002      	add	sp, #8
 8019e76:	4770      	bx	lr
 8019e78:	4249      	negs	r1, r1
 8019e7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019e7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019e82:	f04f 0200 	mov.w	r2, #0
 8019e86:	f04f 0300 	mov.w	r3, #0
 8019e8a:	da04      	bge.n	8019e96 <__ulp+0x3e>
 8019e8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019e90:	fa41 f300 	asr.w	r3, r1, r0
 8019e94:	e7ec      	b.n	8019e70 <__ulp+0x18>
 8019e96:	f1a0 0114 	sub.w	r1, r0, #20
 8019e9a:	291e      	cmp	r1, #30
 8019e9c:	bfda      	itte	le
 8019e9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019ea2:	fa20 f101 	lsrle.w	r1, r0, r1
 8019ea6:	2101      	movgt	r1, #1
 8019ea8:	460a      	mov	r2, r1
 8019eaa:	e7e1      	b.n	8019e70 <__ulp+0x18>
 8019eac:	7ff00000 	.word	0x7ff00000

08019eb0 <__b2d>:
 8019eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eb2:	6905      	ldr	r5, [r0, #16]
 8019eb4:	f100 0714 	add.w	r7, r0, #20
 8019eb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019ebc:	1f2e      	subs	r6, r5, #4
 8019ebe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	f7ff fd48 	bl	8019958 <__hi0bits>
 8019ec8:	f1c0 0320 	rsb	r3, r0, #32
 8019ecc:	280a      	cmp	r0, #10
 8019ece:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019f4c <__b2d+0x9c>
 8019ed2:	600b      	str	r3, [r1, #0]
 8019ed4:	dc14      	bgt.n	8019f00 <__b2d+0x50>
 8019ed6:	f1c0 0e0b 	rsb	lr, r0, #11
 8019eda:	fa24 f10e 	lsr.w	r1, r4, lr
 8019ede:	42b7      	cmp	r7, r6
 8019ee0:	ea41 030c 	orr.w	r3, r1, ip
 8019ee4:	bf34      	ite	cc
 8019ee6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019eea:	2100      	movcs	r1, #0
 8019eec:	3015      	adds	r0, #21
 8019eee:	fa04 f000 	lsl.w	r0, r4, r0
 8019ef2:	fa21 f10e 	lsr.w	r1, r1, lr
 8019ef6:	ea40 0201 	orr.w	r2, r0, r1
 8019efa:	ec43 2b10 	vmov	d0, r2, r3
 8019efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f00:	42b7      	cmp	r7, r6
 8019f02:	bf3a      	itte	cc
 8019f04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019f08:	f1a5 0608 	subcc.w	r6, r5, #8
 8019f0c:	2100      	movcs	r1, #0
 8019f0e:	380b      	subs	r0, #11
 8019f10:	d017      	beq.n	8019f42 <__b2d+0x92>
 8019f12:	f1c0 0c20 	rsb	ip, r0, #32
 8019f16:	fa04 f500 	lsl.w	r5, r4, r0
 8019f1a:	42be      	cmp	r6, r7
 8019f1c:	fa21 f40c 	lsr.w	r4, r1, ip
 8019f20:	ea45 0504 	orr.w	r5, r5, r4
 8019f24:	bf8c      	ite	hi
 8019f26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019f2a:	2400      	movls	r4, #0
 8019f2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019f30:	fa01 f000 	lsl.w	r0, r1, r0
 8019f34:	fa24 f40c 	lsr.w	r4, r4, ip
 8019f38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019f3c:	ea40 0204 	orr.w	r2, r0, r4
 8019f40:	e7db      	b.n	8019efa <__b2d+0x4a>
 8019f42:	ea44 030c 	orr.w	r3, r4, ip
 8019f46:	460a      	mov	r2, r1
 8019f48:	e7d7      	b.n	8019efa <__b2d+0x4a>
 8019f4a:	bf00      	nop
 8019f4c:	3ff00000 	.word	0x3ff00000

08019f50 <__d2b>:
 8019f50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019f54:	4689      	mov	r9, r1
 8019f56:	2101      	movs	r1, #1
 8019f58:	ec57 6b10 	vmov	r6, r7, d0
 8019f5c:	4690      	mov	r8, r2
 8019f5e:	f7ff fc09 	bl	8019774 <_Balloc>
 8019f62:	4604      	mov	r4, r0
 8019f64:	b930      	cbnz	r0, 8019f74 <__d2b+0x24>
 8019f66:	4602      	mov	r2, r0
 8019f68:	4b25      	ldr	r3, [pc, #148]	; (801a000 <__d2b+0xb0>)
 8019f6a:	4826      	ldr	r0, [pc, #152]	; (801a004 <__d2b+0xb4>)
 8019f6c:	f240 310a 	movw	r1, #778	; 0x30a
 8019f70:	f7fe ff56 	bl	8018e20 <__assert_func>
 8019f74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019f78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019f7c:	bb35      	cbnz	r5, 8019fcc <__d2b+0x7c>
 8019f7e:	2e00      	cmp	r6, #0
 8019f80:	9301      	str	r3, [sp, #4]
 8019f82:	d028      	beq.n	8019fd6 <__d2b+0x86>
 8019f84:	4668      	mov	r0, sp
 8019f86:	9600      	str	r6, [sp, #0]
 8019f88:	f7ff fd06 	bl	8019998 <__lo0bits>
 8019f8c:	9900      	ldr	r1, [sp, #0]
 8019f8e:	b300      	cbz	r0, 8019fd2 <__d2b+0x82>
 8019f90:	9a01      	ldr	r2, [sp, #4]
 8019f92:	f1c0 0320 	rsb	r3, r0, #32
 8019f96:	fa02 f303 	lsl.w	r3, r2, r3
 8019f9a:	430b      	orrs	r3, r1
 8019f9c:	40c2      	lsrs	r2, r0
 8019f9e:	6163      	str	r3, [r4, #20]
 8019fa0:	9201      	str	r2, [sp, #4]
 8019fa2:	9b01      	ldr	r3, [sp, #4]
 8019fa4:	61a3      	str	r3, [r4, #24]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	bf14      	ite	ne
 8019faa:	2202      	movne	r2, #2
 8019fac:	2201      	moveq	r2, #1
 8019fae:	6122      	str	r2, [r4, #16]
 8019fb0:	b1d5      	cbz	r5, 8019fe8 <__d2b+0x98>
 8019fb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019fb6:	4405      	add	r5, r0
 8019fb8:	f8c9 5000 	str.w	r5, [r9]
 8019fbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019fc0:	f8c8 0000 	str.w	r0, [r8]
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	b003      	add	sp, #12
 8019fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019fd0:	e7d5      	b.n	8019f7e <__d2b+0x2e>
 8019fd2:	6161      	str	r1, [r4, #20]
 8019fd4:	e7e5      	b.n	8019fa2 <__d2b+0x52>
 8019fd6:	a801      	add	r0, sp, #4
 8019fd8:	f7ff fcde 	bl	8019998 <__lo0bits>
 8019fdc:	9b01      	ldr	r3, [sp, #4]
 8019fde:	6163      	str	r3, [r4, #20]
 8019fe0:	2201      	movs	r2, #1
 8019fe2:	6122      	str	r2, [r4, #16]
 8019fe4:	3020      	adds	r0, #32
 8019fe6:	e7e3      	b.n	8019fb0 <__d2b+0x60>
 8019fe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019fec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ff0:	f8c9 0000 	str.w	r0, [r9]
 8019ff4:	6918      	ldr	r0, [r3, #16]
 8019ff6:	f7ff fcaf 	bl	8019958 <__hi0bits>
 8019ffa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019ffe:	e7df      	b.n	8019fc0 <__d2b+0x70>
 801a000:	0801e511 	.word	0x0801e511
 801a004:	0801e59c 	.word	0x0801e59c

0801a008 <__ratio>:
 801a008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a00c:	4688      	mov	r8, r1
 801a00e:	4669      	mov	r1, sp
 801a010:	4681      	mov	r9, r0
 801a012:	f7ff ff4d 	bl	8019eb0 <__b2d>
 801a016:	a901      	add	r1, sp, #4
 801a018:	4640      	mov	r0, r8
 801a01a:	ec55 4b10 	vmov	r4, r5, d0
 801a01e:	f7ff ff47 	bl	8019eb0 <__b2d>
 801a022:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a026:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a02a:	eba3 0c02 	sub.w	ip, r3, r2
 801a02e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a032:	1a9b      	subs	r3, r3, r2
 801a034:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a038:	ec51 0b10 	vmov	r0, r1, d0
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	bfd6      	itet	le
 801a040:	460a      	movle	r2, r1
 801a042:	462a      	movgt	r2, r5
 801a044:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a048:	468b      	mov	fp, r1
 801a04a:	462f      	mov	r7, r5
 801a04c:	bfd4      	ite	le
 801a04e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a052:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a056:	4620      	mov	r0, r4
 801a058:	ee10 2a10 	vmov	r2, s0
 801a05c:	465b      	mov	r3, fp
 801a05e:	4639      	mov	r1, r7
 801a060:	f7e6 fc14 	bl	800088c <__aeabi_ddiv>
 801a064:	ec41 0b10 	vmov	d0, r0, r1
 801a068:	b003      	add	sp, #12
 801a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a06e <__copybits>:
 801a06e:	3901      	subs	r1, #1
 801a070:	b570      	push	{r4, r5, r6, lr}
 801a072:	1149      	asrs	r1, r1, #5
 801a074:	6914      	ldr	r4, [r2, #16]
 801a076:	3101      	adds	r1, #1
 801a078:	f102 0314 	add.w	r3, r2, #20
 801a07c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a080:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a084:	1f05      	subs	r5, r0, #4
 801a086:	42a3      	cmp	r3, r4
 801a088:	d30c      	bcc.n	801a0a4 <__copybits+0x36>
 801a08a:	1aa3      	subs	r3, r4, r2
 801a08c:	3b11      	subs	r3, #17
 801a08e:	f023 0303 	bic.w	r3, r3, #3
 801a092:	3211      	adds	r2, #17
 801a094:	42a2      	cmp	r2, r4
 801a096:	bf88      	it	hi
 801a098:	2300      	movhi	r3, #0
 801a09a:	4418      	add	r0, r3
 801a09c:	2300      	movs	r3, #0
 801a09e:	4288      	cmp	r0, r1
 801a0a0:	d305      	bcc.n	801a0ae <__copybits+0x40>
 801a0a2:	bd70      	pop	{r4, r5, r6, pc}
 801a0a4:	f853 6b04 	ldr.w	r6, [r3], #4
 801a0a8:	f845 6f04 	str.w	r6, [r5, #4]!
 801a0ac:	e7eb      	b.n	801a086 <__copybits+0x18>
 801a0ae:	f840 3b04 	str.w	r3, [r0], #4
 801a0b2:	e7f4      	b.n	801a09e <__copybits+0x30>

0801a0b4 <__any_on>:
 801a0b4:	f100 0214 	add.w	r2, r0, #20
 801a0b8:	6900      	ldr	r0, [r0, #16]
 801a0ba:	114b      	asrs	r3, r1, #5
 801a0bc:	4298      	cmp	r0, r3
 801a0be:	b510      	push	{r4, lr}
 801a0c0:	db11      	blt.n	801a0e6 <__any_on+0x32>
 801a0c2:	dd0a      	ble.n	801a0da <__any_on+0x26>
 801a0c4:	f011 011f 	ands.w	r1, r1, #31
 801a0c8:	d007      	beq.n	801a0da <__any_on+0x26>
 801a0ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a0ce:	fa24 f001 	lsr.w	r0, r4, r1
 801a0d2:	fa00 f101 	lsl.w	r1, r0, r1
 801a0d6:	428c      	cmp	r4, r1
 801a0d8:	d10b      	bne.n	801a0f2 <__any_on+0x3e>
 801a0da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a0de:	4293      	cmp	r3, r2
 801a0e0:	d803      	bhi.n	801a0ea <__any_on+0x36>
 801a0e2:	2000      	movs	r0, #0
 801a0e4:	bd10      	pop	{r4, pc}
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	e7f7      	b.n	801a0da <__any_on+0x26>
 801a0ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a0ee:	2900      	cmp	r1, #0
 801a0f0:	d0f5      	beq.n	801a0de <__any_on+0x2a>
 801a0f2:	2001      	movs	r0, #1
 801a0f4:	e7f6      	b.n	801a0e4 <__any_on+0x30>

0801a0f6 <_calloc_r>:
 801a0f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a0f8:	fba1 2402 	umull	r2, r4, r1, r2
 801a0fc:	b94c      	cbnz	r4, 801a112 <_calloc_r+0x1c>
 801a0fe:	4611      	mov	r1, r2
 801a100:	9201      	str	r2, [sp, #4]
 801a102:	f7fd fe21 	bl	8017d48 <_malloc_r>
 801a106:	9a01      	ldr	r2, [sp, #4]
 801a108:	4605      	mov	r5, r0
 801a10a:	b930      	cbnz	r0, 801a11a <_calloc_r+0x24>
 801a10c:	4628      	mov	r0, r5
 801a10e:	b003      	add	sp, #12
 801a110:	bd30      	pop	{r4, r5, pc}
 801a112:	220c      	movs	r2, #12
 801a114:	6002      	str	r2, [r0, #0]
 801a116:	2500      	movs	r5, #0
 801a118:	e7f8      	b.n	801a10c <_calloc_r+0x16>
 801a11a:	4621      	mov	r1, r4
 801a11c:	f7fd fdeb 	bl	8017cf6 <memset>
 801a120:	e7f4      	b.n	801a10c <_calloc_r+0x16>
	...

0801a124 <_free_r>:
 801a124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a126:	2900      	cmp	r1, #0
 801a128:	d044      	beq.n	801a1b4 <_free_r+0x90>
 801a12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a12e:	9001      	str	r0, [sp, #4]
 801a130:	2b00      	cmp	r3, #0
 801a132:	f1a1 0404 	sub.w	r4, r1, #4
 801a136:	bfb8      	it	lt
 801a138:	18e4      	addlt	r4, r4, r3
 801a13a:	f7ff fb0f 	bl	801975c <__malloc_lock>
 801a13e:	4a1e      	ldr	r2, [pc, #120]	; (801a1b8 <_free_r+0x94>)
 801a140:	9801      	ldr	r0, [sp, #4]
 801a142:	6813      	ldr	r3, [r2, #0]
 801a144:	b933      	cbnz	r3, 801a154 <_free_r+0x30>
 801a146:	6063      	str	r3, [r4, #4]
 801a148:	6014      	str	r4, [r2, #0]
 801a14a:	b003      	add	sp, #12
 801a14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a150:	f7ff bb0a 	b.w	8019768 <__malloc_unlock>
 801a154:	42a3      	cmp	r3, r4
 801a156:	d908      	bls.n	801a16a <_free_r+0x46>
 801a158:	6825      	ldr	r5, [r4, #0]
 801a15a:	1961      	adds	r1, r4, r5
 801a15c:	428b      	cmp	r3, r1
 801a15e:	bf01      	itttt	eq
 801a160:	6819      	ldreq	r1, [r3, #0]
 801a162:	685b      	ldreq	r3, [r3, #4]
 801a164:	1949      	addeq	r1, r1, r5
 801a166:	6021      	streq	r1, [r4, #0]
 801a168:	e7ed      	b.n	801a146 <_free_r+0x22>
 801a16a:	461a      	mov	r2, r3
 801a16c:	685b      	ldr	r3, [r3, #4]
 801a16e:	b10b      	cbz	r3, 801a174 <_free_r+0x50>
 801a170:	42a3      	cmp	r3, r4
 801a172:	d9fa      	bls.n	801a16a <_free_r+0x46>
 801a174:	6811      	ldr	r1, [r2, #0]
 801a176:	1855      	adds	r5, r2, r1
 801a178:	42a5      	cmp	r5, r4
 801a17a:	d10b      	bne.n	801a194 <_free_r+0x70>
 801a17c:	6824      	ldr	r4, [r4, #0]
 801a17e:	4421      	add	r1, r4
 801a180:	1854      	adds	r4, r2, r1
 801a182:	42a3      	cmp	r3, r4
 801a184:	6011      	str	r1, [r2, #0]
 801a186:	d1e0      	bne.n	801a14a <_free_r+0x26>
 801a188:	681c      	ldr	r4, [r3, #0]
 801a18a:	685b      	ldr	r3, [r3, #4]
 801a18c:	6053      	str	r3, [r2, #4]
 801a18e:	4421      	add	r1, r4
 801a190:	6011      	str	r1, [r2, #0]
 801a192:	e7da      	b.n	801a14a <_free_r+0x26>
 801a194:	d902      	bls.n	801a19c <_free_r+0x78>
 801a196:	230c      	movs	r3, #12
 801a198:	6003      	str	r3, [r0, #0]
 801a19a:	e7d6      	b.n	801a14a <_free_r+0x26>
 801a19c:	6825      	ldr	r5, [r4, #0]
 801a19e:	1961      	adds	r1, r4, r5
 801a1a0:	428b      	cmp	r3, r1
 801a1a2:	bf04      	itt	eq
 801a1a4:	6819      	ldreq	r1, [r3, #0]
 801a1a6:	685b      	ldreq	r3, [r3, #4]
 801a1a8:	6063      	str	r3, [r4, #4]
 801a1aa:	bf04      	itt	eq
 801a1ac:	1949      	addeq	r1, r1, r5
 801a1ae:	6021      	streq	r1, [r4, #0]
 801a1b0:	6054      	str	r4, [r2, #4]
 801a1b2:	e7ca      	b.n	801a14a <_free_r+0x26>
 801a1b4:	b003      	add	sp, #12
 801a1b6:	bd30      	pop	{r4, r5, pc}
 801a1b8:	20011d10 	.word	0x20011d10

0801a1bc <__ssputs_r>:
 801a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c0:	688e      	ldr	r6, [r1, #8]
 801a1c2:	429e      	cmp	r6, r3
 801a1c4:	4682      	mov	sl, r0
 801a1c6:	460c      	mov	r4, r1
 801a1c8:	4690      	mov	r8, r2
 801a1ca:	461f      	mov	r7, r3
 801a1cc:	d838      	bhi.n	801a240 <__ssputs_r+0x84>
 801a1ce:	898a      	ldrh	r2, [r1, #12]
 801a1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a1d4:	d032      	beq.n	801a23c <__ssputs_r+0x80>
 801a1d6:	6825      	ldr	r5, [r4, #0]
 801a1d8:	6909      	ldr	r1, [r1, #16]
 801a1da:	eba5 0901 	sub.w	r9, r5, r1
 801a1de:	6965      	ldr	r5, [r4, #20]
 801a1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a1e8:	3301      	adds	r3, #1
 801a1ea:	444b      	add	r3, r9
 801a1ec:	106d      	asrs	r5, r5, #1
 801a1ee:	429d      	cmp	r5, r3
 801a1f0:	bf38      	it	cc
 801a1f2:	461d      	movcc	r5, r3
 801a1f4:	0553      	lsls	r3, r2, #21
 801a1f6:	d531      	bpl.n	801a25c <__ssputs_r+0xa0>
 801a1f8:	4629      	mov	r1, r5
 801a1fa:	f7fd fda5 	bl	8017d48 <_malloc_r>
 801a1fe:	4606      	mov	r6, r0
 801a200:	b950      	cbnz	r0, 801a218 <__ssputs_r+0x5c>
 801a202:	230c      	movs	r3, #12
 801a204:	f8ca 3000 	str.w	r3, [sl]
 801a208:	89a3      	ldrh	r3, [r4, #12]
 801a20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a20e:	81a3      	strh	r3, [r4, #12]
 801a210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a218:	6921      	ldr	r1, [r4, #16]
 801a21a:	464a      	mov	r2, r9
 801a21c:	f7fd fd43 	bl	8017ca6 <memcpy>
 801a220:	89a3      	ldrh	r3, [r4, #12]
 801a222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a22a:	81a3      	strh	r3, [r4, #12]
 801a22c:	6126      	str	r6, [r4, #16]
 801a22e:	6165      	str	r5, [r4, #20]
 801a230:	444e      	add	r6, r9
 801a232:	eba5 0509 	sub.w	r5, r5, r9
 801a236:	6026      	str	r6, [r4, #0]
 801a238:	60a5      	str	r5, [r4, #8]
 801a23a:	463e      	mov	r6, r7
 801a23c:	42be      	cmp	r6, r7
 801a23e:	d900      	bls.n	801a242 <__ssputs_r+0x86>
 801a240:	463e      	mov	r6, r7
 801a242:	6820      	ldr	r0, [r4, #0]
 801a244:	4632      	mov	r2, r6
 801a246:	4641      	mov	r1, r8
 801a248:	f7fd fd3b 	bl	8017cc2 <memmove>
 801a24c:	68a3      	ldr	r3, [r4, #8]
 801a24e:	1b9b      	subs	r3, r3, r6
 801a250:	60a3      	str	r3, [r4, #8]
 801a252:	6823      	ldr	r3, [r4, #0]
 801a254:	4433      	add	r3, r6
 801a256:	6023      	str	r3, [r4, #0]
 801a258:	2000      	movs	r0, #0
 801a25a:	e7db      	b.n	801a214 <__ssputs_r+0x58>
 801a25c:	462a      	mov	r2, r5
 801a25e:	f000 fd4d 	bl	801acfc <_realloc_r>
 801a262:	4606      	mov	r6, r0
 801a264:	2800      	cmp	r0, #0
 801a266:	d1e1      	bne.n	801a22c <__ssputs_r+0x70>
 801a268:	6921      	ldr	r1, [r4, #16]
 801a26a:	4650      	mov	r0, sl
 801a26c:	f7ff ff5a 	bl	801a124 <_free_r>
 801a270:	e7c7      	b.n	801a202 <__ssputs_r+0x46>
	...

0801a274 <_svfiprintf_r>:
 801a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a278:	4698      	mov	r8, r3
 801a27a:	898b      	ldrh	r3, [r1, #12]
 801a27c:	061b      	lsls	r3, r3, #24
 801a27e:	b09d      	sub	sp, #116	; 0x74
 801a280:	4607      	mov	r7, r0
 801a282:	460d      	mov	r5, r1
 801a284:	4614      	mov	r4, r2
 801a286:	d50e      	bpl.n	801a2a6 <_svfiprintf_r+0x32>
 801a288:	690b      	ldr	r3, [r1, #16]
 801a28a:	b963      	cbnz	r3, 801a2a6 <_svfiprintf_r+0x32>
 801a28c:	2140      	movs	r1, #64	; 0x40
 801a28e:	f7fd fd5b 	bl	8017d48 <_malloc_r>
 801a292:	6028      	str	r0, [r5, #0]
 801a294:	6128      	str	r0, [r5, #16]
 801a296:	b920      	cbnz	r0, 801a2a2 <_svfiprintf_r+0x2e>
 801a298:	230c      	movs	r3, #12
 801a29a:	603b      	str	r3, [r7, #0]
 801a29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2a0:	e0d1      	b.n	801a446 <_svfiprintf_r+0x1d2>
 801a2a2:	2340      	movs	r3, #64	; 0x40
 801a2a4:	616b      	str	r3, [r5, #20]
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a2aa:	2320      	movs	r3, #32
 801a2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a2b4:	2330      	movs	r3, #48	; 0x30
 801a2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a460 <_svfiprintf_r+0x1ec>
 801a2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a2be:	f04f 0901 	mov.w	r9, #1
 801a2c2:	4623      	mov	r3, r4
 801a2c4:	469a      	mov	sl, r3
 801a2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2ca:	b10a      	cbz	r2, 801a2d0 <_svfiprintf_r+0x5c>
 801a2cc:	2a25      	cmp	r2, #37	; 0x25
 801a2ce:	d1f9      	bne.n	801a2c4 <_svfiprintf_r+0x50>
 801a2d0:	ebba 0b04 	subs.w	fp, sl, r4
 801a2d4:	d00b      	beq.n	801a2ee <_svfiprintf_r+0x7a>
 801a2d6:	465b      	mov	r3, fp
 801a2d8:	4622      	mov	r2, r4
 801a2da:	4629      	mov	r1, r5
 801a2dc:	4638      	mov	r0, r7
 801a2de:	f7ff ff6d 	bl	801a1bc <__ssputs_r>
 801a2e2:	3001      	adds	r0, #1
 801a2e4:	f000 80aa 	beq.w	801a43c <_svfiprintf_r+0x1c8>
 801a2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2ea:	445a      	add	r2, fp
 801a2ec:	9209      	str	r2, [sp, #36]	; 0x24
 801a2ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	f000 80a2 	beq.w	801a43c <_svfiprintf_r+0x1c8>
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a302:	f10a 0a01 	add.w	sl, sl, #1
 801a306:	9304      	str	r3, [sp, #16]
 801a308:	9307      	str	r3, [sp, #28]
 801a30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a30e:	931a      	str	r3, [sp, #104]	; 0x68
 801a310:	4654      	mov	r4, sl
 801a312:	2205      	movs	r2, #5
 801a314:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a318:	4851      	ldr	r0, [pc, #324]	; (801a460 <_svfiprintf_r+0x1ec>)
 801a31a:	f7e5 ff81 	bl	8000220 <memchr>
 801a31e:	9a04      	ldr	r2, [sp, #16]
 801a320:	b9d8      	cbnz	r0, 801a35a <_svfiprintf_r+0xe6>
 801a322:	06d0      	lsls	r0, r2, #27
 801a324:	bf44      	itt	mi
 801a326:	2320      	movmi	r3, #32
 801a328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a32c:	0711      	lsls	r1, r2, #28
 801a32e:	bf44      	itt	mi
 801a330:	232b      	movmi	r3, #43	; 0x2b
 801a332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a336:	f89a 3000 	ldrb.w	r3, [sl]
 801a33a:	2b2a      	cmp	r3, #42	; 0x2a
 801a33c:	d015      	beq.n	801a36a <_svfiprintf_r+0xf6>
 801a33e:	9a07      	ldr	r2, [sp, #28]
 801a340:	4654      	mov	r4, sl
 801a342:	2000      	movs	r0, #0
 801a344:	f04f 0c0a 	mov.w	ip, #10
 801a348:	4621      	mov	r1, r4
 801a34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a34e:	3b30      	subs	r3, #48	; 0x30
 801a350:	2b09      	cmp	r3, #9
 801a352:	d94e      	bls.n	801a3f2 <_svfiprintf_r+0x17e>
 801a354:	b1b0      	cbz	r0, 801a384 <_svfiprintf_r+0x110>
 801a356:	9207      	str	r2, [sp, #28]
 801a358:	e014      	b.n	801a384 <_svfiprintf_r+0x110>
 801a35a:	eba0 0308 	sub.w	r3, r0, r8
 801a35e:	fa09 f303 	lsl.w	r3, r9, r3
 801a362:	4313      	orrs	r3, r2
 801a364:	9304      	str	r3, [sp, #16]
 801a366:	46a2      	mov	sl, r4
 801a368:	e7d2      	b.n	801a310 <_svfiprintf_r+0x9c>
 801a36a:	9b03      	ldr	r3, [sp, #12]
 801a36c:	1d19      	adds	r1, r3, #4
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	9103      	str	r1, [sp, #12]
 801a372:	2b00      	cmp	r3, #0
 801a374:	bfbb      	ittet	lt
 801a376:	425b      	neglt	r3, r3
 801a378:	f042 0202 	orrlt.w	r2, r2, #2
 801a37c:	9307      	strge	r3, [sp, #28]
 801a37e:	9307      	strlt	r3, [sp, #28]
 801a380:	bfb8      	it	lt
 801a382:	9204      	strlt	r2, [sp, #16]
 801a384:	7823      	ldrb	r3, [r4, #0]
 801a386:	2b2e      	cmp	r3, #46	; 0x2e
 801a388:	d10c      	bne.n	801a3a4 <_svfiprintf_r+0x130>
 801a38a:	7863      	ldrb	r3, [r4, #1]
 801a38c:	2b2a      	cmp	r3, #42	; 0x2a
 801a38e:	d135      	bne.n	801a3fc <_svfiprintf_r+0x188>
 801a390:	9b03      	ldr	r3, [sp, #12]
 801a392:	1d1a      	adds	r2, r3, #4
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	9203      	str	r2, [sp, #12]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	bfb8      	it	lt
 801a39c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a3a0:	3402      	adds	r4, #2
 801a3a2:	9305      	str	r3, [sp, #20]
 801a3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a470 <_svfiprintf_r+0x1fc>
 801a3a8:	7821      	ldrb	r1, [r4, #0]
 801a3aa:	2203      	movs	r2, #3
 801a3ac:	4650      	mov	r0, sl
 801a3ae:	f7e5 ff37 	bl	8000220 <memchr>
 801a3b2:	b140      	cbz	r0, 801a3c6 <_svfiprintf_r+0x152>
 801a3b4:	2340      	movs	r3, #64	; 0x40
 801a3b6:	eba0 000a 	sub.w	r0, r0, sl
 801a3ba:	fa03 f000 	lsl.w	r0, r3, r0
 801a3be:	9b04      	ldr	r3, [sp, #16]
 801a3c0:	4303      	orrs	r3, r0
 801a3c2:	3401      	adds	r4, #1
 801a3c4:	9304      	str	r3, [sp, #16]
 801a3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3ca:	4826      	ldr	r0, [pc, #152]	; (801a464 <_svfiprintf_r+0x1f0>)
 801a3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a3d0:	2206      	movs	r2, #6
 801a3d2:	f7e5 ff25 	bl	8000220 <memchr>
 801a3d6:	2800      	cmp	r0, #0
 801a3d8:	d038      	beq.n	801a44c <_svfiprintf_r+0x1d8>
 801a3da:	4b23      	ldr	r3, [pc, #140]	; (801a468 <_svfiprintf_r+0x1f4>)
 801a3dc:	bb1b      	cbnz	r3, 801a426 <_svfiprintf_r+0x1b2>
 801a3de:	9b03      	ldr	r3, [sp, #12]
 801a3e0:	3307      	adds	r3, #7
 801a3e2:	f023 0307 	bic.w	r3, r3, #7
 801a3e6:	3308      	adds	r3, #8
 801a3e8:	9303      	str	r3, [sp, #12]
 801a3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3ec:	4433      	add	r3, r6
 801a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a3f0:	e767      	b.n	801a2c2 <_svfiprintf_r+0x4e>
 801a3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a3f6:	460c      	mov	r4, r1
 801a3f8:	2001      	movs	r0, #1
 801a3fa:	e7a5      	b.n	801a348 <_svfiprintf_r+0xd4>
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	3401      	adds	r4, #1
 801a400:	9305      	str	r3, [sp, #20]
 801a402:	4619      	mov	r1, r3
 801a404:	f04f 0c0a 	mov.w	ip, #10
 801a408:	4620      	mov	r0, r4
 801a40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a40e:	3a30      	subs	r2, #48	; 0x30
 801a410:	2a09      	cmp	r2, #9
 801a412:	d903      	bls.n	801a41c <_svfiprintf_r+0x1a8>
 801a414:	2b00      	cmp	r3, #0
 801a416:	d0c5      	beq.n	801a3a4 <_svfiprintf_r+0x130>
 801a418:	9105      	str	r1, [sp, #20]
 801a41a:	e7c3      	b.n	801a3a4 <_svfiprintf_r+0x130>
 801a41c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a420:	4604      	mov	r4, r0
 801a422:	2301      	movs	r3, #1
 801a424:	e7f0      	b.n	801a408 <_svfiprintf_r+0x194>
 801a426:	ab03      	add	r3, sp, #12
 801a428:	9300      	str	r3, [sp, #0]
 801a42a:	462a      	mov	r2, r5
 801a42c:	4b0f      	ldr	r3, [pc, #60]	; (801a46c <_svfiprintf_r+0x1f8>)
 801a42e:	a904      	add	r1, sp, #16
 801a430:	4638      	mov	r0, r7
 801a432:	f3af 8000 	nop.w
 801a436:	1c42      	adds	r2, r0, #1
 801a438:	4606      	mov	r6, r0
 801a43a:	d1d6      	bne.n	801a3ea <_svfiprintf_r+0x176>
 801a43c:	89ab      	ldrh	r3, [r5, #12]
 801a43e:	065b      	lsls	r3, r3, #25
 801a440:	f53f af2c 	bmi.w	801a29c <_svfiprintf_r+0x28>
 801a444:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a446:	b01d      	add	sp, #116	; 0x74
 801a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44c:	ab03      	add	r3, sp, #12
 801a44e:	9300      	str	r3, [sp, #0]
 801a450:	462a      	mov	r2, r5
 801a452:	4b06      	ldr	r3, [pc, #24]	; (801a46c <_svfiprintf_r+0x1f8>)
 801a454:	a904      	add	r1, sp, #16
 801a456:	4638      	mov	r0, r7
 801a458:	f000 f9d4 	bl	801a804 <_printf_i>
 801a45c:	e7eb      	b.n	801a436 <_svfiprintf_r+0x1c2>
 801a45e:	bf00      	nop
 801a460:	0801e6f4 	.word	0x0801e6f4
 801a464:	0801e6fe 	.word	0x0801e6fe
 801a468:	00000000 	.word	0x00000000
 801a46c:	0801a1bd 	.word	0x0801a1bd
 801a470:	0801e6fa 	.word	0x0801e6fa

0801a474 <__sfputc_r>:
 801a474:	6893      	ldr	r3, [r2, #8]
 801a476:	3b01      	subs	r3, #1
 801a478:	2b00      	cmp	r3, #0
 801a47a:	b410      	push	{r4}
 801a47c:	6093      	str	r3, [r2, #8]
 801a47e:	da08      	bge.n	801a492 <__sfputc_r+0x1e>
 801a480:	6994      	ldr	r4, [r2, #24]
 801a482:	42a3      	cmp	r3, r4
 801a484:	db01      	blt.n	801a48a <__sfputc_r+0x16>
 801a486:	290a      	cmp	r1, #10
 801a488:	d103      	bne.n	801a492 <__sfputc_r+0x1e>
 801a48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a48e:	f000 bafb 	b.w	801aa88 <__swbuf_r>
 801a492:	6813      	ldr	r3, [r2, #0]
 801a494:	1c58      	adds	r0, r3, #1
 801a496:	6010      	str	r0, [r2, #0]
 801a498:	7019      	strb	r1, [r3, #0]
 801a49a:	4608      	mov	r0, r1
 801a49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a4a0:	4770      	bx	lr

0801a4a2 <__sfputs_r>:
 801a4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4a4:	4606      	mov	r6, r0
 801a4a6:	460f      	mov	r7, r1
 801a4a8:	4614      	mov	r4, r2
 801a4aa:	18d5      	adds	r5, r2, r3
 801a4ac:	42ac      	cmp	r4, r5
 801a4ae:	d101      	bne.n	801a4b4 <__sfputs_r+0x12>
 801a4b0:	2000      	movs	r0, #0
 801a4b2:	e007      	b.n	801a4c4 <__sfputs_r+0x22>
 801a4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4b8:	463a      	mov	r2, r7
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f7ff ffda 	bl	801a474 <__sfputc_r>
 801a4c0:	1c43      	adds	r3, r0, #1
 801a4c2:	d1f3      	bne.n	801a4ac <__sfputs_r+0xa>
 801a4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a4c8 <_vfiprintf_r>:
 801a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4cc:	460d      	mov	r5, r1
 801a4ce:	b09d      	sub	sp, #116	; 0x74
 801a4d0:	4614      	mov	r4, r2
 801a4d2:	4698      	mov	r8, r3
 801a4d4:	4606      	mov	r6, r0
 801a4d6:	b118      	cbz	r0, 801a4e0 <_vfiprintf_r+0x18>
 801a4d8:	6983      	ldr	r3, [r0, #24]
 801a4da:	b90b      	cbnz	r3, 801a4e0 <_vfiprintf_r+0x18>
 801a4dc:	f7fd fb0e 	bl	8017afc <__sinit>
 801a4e0:	4b89      	ldr	r3, [pc, #548]	; (801a708 <_vfiprintf_r+0x240>)
 801a4e2:	429d      	cmp	r5, r3
 801a4e4:	d11b      	bne.n	801a51e <_vfiprintf_r+0x56>
 801a4e6:	6875      	ldr	r5, [r6, #4]
 801a4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4ea:	07d9      	lsls	r1, r3, #31
 801a4ec:	d405      	bmi.n	801a4fa <_vfiprintf_r+0x32>
 801a4ee:	89ab      	ldrh	r3, [r5, #12]
 801a4f0:	059a      	lsls	r2, r3, #22
 801a4f2:	d402      	bmi.n	801a4fa <_vfiprintf_r+0x32>
 801a4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4f6:	f7fd fbc4 	bl	8017c82 <__retarget_lock_acquire_recursive>
 801a4fa:	89ab      	ldrh	r3, [r5, #12]
 801a4fc:	071b      	lsls	r3, r3, #28
 801a4fe:	d501      	bpl.n	801a504 <_vfiprintf_r+0x3c>
 801a500:	692b      	ldr	r3, [r5, #16]
 801a502:	b9eb      	cbnz	r3, 801a540 <_vfiprintf_r+0x78>
 801a504:	4629      	mov	r1, r5
 801a506:	4630      	mov	r0, r6
 801a508:	f000 fb1e 	bl	801ab48 <__swsetup_r>
 801a50c:	b1c0      	cbz	r0, 801a540 <_vfiprintf_r+0x78>
 801a50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a510:	07dc      	lsls	r4, r3, #31
 801a512:	d50e      	bpl.n	801a532 <_vfiprintf_r+0x6a>
 801a514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a518:	b01d      	add	sp, #116	; 0x74
 801a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a51e:	4b7b      	ldr	r3, [pc, #492]	; (801a70c <_vfiprintf_r+0x244>)
 801a520:	429d      	cmp	r5, r3
 801a522:	d101      	bne.n	801a528 <_vfiprintf_r+0x60>
 801a524:	68b5      	ldr	r5, [r6, #8]
 801a526:	e7df      	b.n	801a4e8 <_vfiprintf_r+0x20>
 801a528:	4b79      	ldr	r3, [pc, #484]	; (801a710 <_vfiprintf_r+0x248>)
 801a52a:	429d      	cmp	r5, r3
 801a52c:	bf08      	it	eq
 801a52e:	68f5      	ldreq	r5, [r6, #12]
 801a530:	e7da      	b.n	801a4e8 <_vfiprintf_r+0x20>
 801a532:	89ab      	ldrh	r3, [r5, #12]
 801a534:	0598      	lsls	r0, r3, #22
 801a536:	d4ed      	bmi.n	801a514 <_vfiprintf_r+0x4c>
 801a538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a53a:	f7fd fba3 	bl	8017c84 <__retarget_lock_release_recursive>
 801a53e:	e7e9      	b.n	801a514 <_vfiprintf_r+0x4c>
 801a540:	2300      	movs	r3, #0
 801a542:	9309      	str	r3, [sp, #36]	; 0x24
 801a544:	2320      	movs	r3, #32
 801a546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a54a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a54e:	2330      	movs	r3, #48	; 0x30
 801a550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a714 <_vfiprintf_r+0x24c>
 801a554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a558:	f04f 0901 	mov.w	r9, #1
 801a55c:	4623      	mov	r3, r4
 801a55e:	469a      	mov	sl, r3
 801a560:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a564:	b10a      	cbz	r2, 801a56a <_vfiprintf_r+0xa2>
 801a566:	2a25      	cmp	r2, #37	; 0x25
 801a568:	d1f9      	bne.n	801a55e <_vfiprintf_r+0x96>
 801a56a:	ebba 0b04 	subs.w	fp, sl, r4
 801a56e:	d00b      	beq.n	801a588 <_vfiprintf_r+0xc0>
 801a570:	465b      	mov	r3, fp
 801a572:	4622      	mov	r2, r4
 801a574:	4629      	mov	r1, r5
 801a576:	4630      	mov	r0, r6
 801a578:	f7ff ff93 	bl	801a4a2 <__sfputs_r>
 801a57c:	3001      	adds	r0, #1
 801a57e:	f000 80aa 	beq.w	801a6d6 <_vfiprintf_r+0x20e>
 801a582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a584:	445a      	add	r2, fp
 801a586:	9209      	str	r2, [sp, #36]	; 0x24
 801a588:	f89a 3000 	ldrb.w	r3, [sl]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	f000 80a2 	beq.w	801a6d6 <_vfiprintf_r+0x20e>
 801a592:	2300      	movs	r3, #0
 801a594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a59c:	f10a 0a01 	add.w	sl, sl, #1
 801a5a0:	9304      	str	r3, [sp, #16]
 801a5a2:	9307      	str	r3, [sp, #28]
 801a5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a5a8:	931a      	str	r3, [sp, #104]	; 0x68
 801a5aa:	4654      	mov	r4, sl
 801a5ac:	2205      	movs	r2, #5
 801a5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5b2:	4858      	ldr	r0, [pc, #352]	; (801a714 <_vfiprintf_r+0x24c>)
 801a5b4:	f7e5 fe34 	bl	8000220 <memchr>
 801a5b8:	9a04      	ldr	r2, [sp, #16]
 801a5ba:	b9d8      	cbnz	r0, 801a5f4 <_vfiprintf_r+0x12c>
 801a5bc:	06d1      	lsls	r1, r2, #27
 801a5be:	bf44      	itt	mi
 801a5c0:	2320      	movmi	r3, #32
 801a5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5c6:	0713      	lsls	r3, r2, #28
 801a5c8:	bf44      	itt	mi
 801a5ca:	232b      	movmi	r3, #43	; 0x2b
 801a5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5d0:	f89a 3000 	ldrb.w	r3, [sl]
 801a5d4:	2b2a      	cmp	r3, #42	; 0x2a
 801a5d6:	d015      	beq.n	801a604 <_vfiprintf_r+0x13c>
 801a5d8:	9a07      	ldr	r2, [sp, #28]
 801a5da:	4654      	mov	r4, sl
 801a5dc:	2000      	movs	r0, #0
 801a5de:	f04f 0c0a 	mov.w	ip, #10
 801a5e2:	4621      	mov	r1, r4
 801a5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5e8:	3b30      	subs	r3, #48	; 0x30
 801a5ea:	2b09      	cmp	r3, #9
 801a5ec:	d94e      	bls.n	801a68c <_vfiprintf_r+0x1c4>
 801a5ee:	b1b0      	cbz	r0, 801a61e <_vfiprintf_r+0x156>
 801a5f0:	9207      	str	r2, [sp, #28]
 801a5f2:	e014      	b.n	801a61e <_vfiprintf_r+0x156>
 801a5f4:	eba0 0308 	sub.w	r3, r0, r8
 801a5f8:	fa09 f303 	lsl.w	r3, r9, r3
 801a5fc:	4313      	orrs	r3, r2
 801a5fe:	9304      	str	r3, [sp, #16]
 801a600:	46a2      	mov	sl, r4
 801a602:	e7d2      	b.n	801a5aa <_vfiprintf_r+0xe2>
 801a604:	9b03      	ldr	r3, [sp, #12]
 801a606:	1d19      	adds	r1, r3, #4
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	9103      	str	r1, [sp, #12]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	bfbb      	ittet	lt
 801a610:	425b      	neglt	r3, r3
 801a612:	f042 0202 	orrlt.w	r2, r2, #2
 801a616:	9307      	strge	r3, [sp, #28]
 801a618:	9307      	strlt	r3, [sp, #28]
 801a61a:	bfb8      	it	lt
 801a61c:	9204      	strlt	r2, [sp, #16]
 801a61e:	7823      	ldrb	r3, [r4, #0]
 801a620:	2b2e      	cmp	r3, #46	; 0x2e
 801a622:	d10c      	bne.n	801a63e <_vfiprintf_r+0x176>
 801a624:	7863      	ldrb	r3, [r4, #1]
 801a626:	2b2a      	cmp	r3, #42	; 0x2a
 801a628:	d135      	bne.n	801a696 <_vfiprintf_r+0x1ce>
 801a62a:	9b03      	ldr	r3, [sp, #12]
 801a62c:	1d1a      	adds	r2, r3, #4
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	9203      	str	r2, [sp, #12]
 801a632:	2b00      	cmp	r3, #0
 801a634:	bfb8      	it	lt
 801a636:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a63a:	3402      	adds	r4, #2
 801a63c:	9305      	str	r3, [sp, #20]
 801a63e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a724 <_vfiprintf_r+0x25c>
 801a642:	7821      	ldrb	r1, [r4, #0]
 801a644:	2203      	movs	r2, #3
 801a646:	4650      	mov	r0, sl
 801a648:	f7e5 fdea 	bl	8000220 <memchr>
 801a64c:	b140      	cbz	r0, 801a660 <_vfiprintf_r+0x198>
 801a64e:	2340      	movs	r3, #64	; 0x40
 801a650:	eba0 000a 	sub.w	r0, r0, sl
 801a654:	fa03 f000 	lsl.w	r0, r3, r0
 801a658:	9b04      	ldr	r3, [sp, #16]
 801a65a:	4303      	orrs	r3, r0
 801a65c:	3401      	adds	r4, #1
 801a65e:	9304      	str	r3, [sp, #16]
 801a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a664:	482c      	ldr	r0, [pc, #176]	; (801a718 <_vfiprintf_r+0x250>)
 801a666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a66a:	2206      	movs	r2, #6
 801a66c:	f7e5 fdd8 	bl	8000220 <memchr>
 801a670:	2800      	cmp	r0, #0
 801a672:	d03f      	beq.n	801a6f4 <_vfiprintf_r+0x22c>
 801a674:	4b29      	ldr	r3, [pc, #164]	; (801a71c <_vfiprintf_r+0x254>)
 801a676:	bb1b      	cbnz	r3, 801a6c0 <_vfiprintf_r+0x1f8>
 801a678:	9b03      	ldr	r3, [sp, #12]
 801a67a:	3307      	adds	r3, #7
 801a67c:	f023 0307 	bic.w	r3, r3, #7
 801a680:	3308      	adds	r3, #8
 801a682:	9303      	str	r3, [sp, #12]
 801a684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a686:	443b      	add	r3, r7
 801a688:	9309      	str	r3, [sp, #36]	; 0x24
 801a68a:	e767      	b.n	801a55c <_vfiprintf_r+0x94>
 801a68c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a690:	460c      	mov	r4, r1
 801a692:	2001      	movs	r0, #1
 801a694:	e7a5      	b.n	801a5e2 <_vfiprintf_r+0x11a>
 801a696:	2300      	movs	r3, #0
 801a698:	3401      	adds	r4, #1
 801a69a:	9305      	str	r3, [sp, #20]
 801a69c:	4619      	mov	r1, r3
 801a69e:	f04f 0c0a 	mov.w	ip, #10
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6a8:	3a30      	subs	r2, #48	; 0x30
 801a6aa:	2a09      	cmp	r2, #9
 801a6ac:	d903      	bls.n	801a6b6 <_vfiprintf_r+0x1ee>
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d0c5      	beq.n	801a63e <_vfiprintf_r+0x176>
 801a6b2:	9105      	str	r1, [sp, #20]
 801a6b4:	e7c3      	b.n	801a63e <_vfiprintf_r+0x176>
 801a6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6ba:	4604      	mov	r4, r0
 801a6bc:	2301      	movs	r3, #1
 801a6be:	e7f0      	b.n	801a6a2 <_vfiprintf_r+0x1da>
 801a6c0:	ab03      	add	r3, sp, #12
 801a6c2:	9300      	str	r3, [sp, #0]
 801a6c4:	462a      	mov	r2, r5
 801a6c6:	4b16      	ldr	r3, [pc, #88]	; (801a720 <_vfiprintf_r+0x258>)
 801a6c8:	a904      	add	r1, sp, #16
 801a6ca:	4630      	mov	r0, r6
 801a6cc:	f3af 8000 	nop.w
 801a6d0:	4607      	mov	r7, r0
 801a6d2:	1c78      	adds	r0, r7, #1
 801a6d4:	d1d6      	bne.n	801a684 <_vfiprintf_r+0x1bc>
 801a6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a6d8:	07d9      	lsls	r1, r3, #31
 801a6da:	d405      	bmi.n	801a6e8 <_vfiprintf_r+0x220>
 801a6dc:	89ab      	ldrh	r3, [r5, #12]
 801a6de:	059a      	lsls	r2, r3, #22
 801a6e0:	d402      	bmi.n	801a6e8 <_vfiprintf_r+0x220>
 801a6e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a6e4:	f7fd face 	bl	8017c84 <__retarget_lock_release_recursive>
 801a6e8:	89ab      	ldrh	r3, [r5, #12]
 801a6ea:	065b      	lsls	r3, r3, #25
 801a6ec:	f53f af12 	bmi.w	801a514 <_vfiprintf_r+0x4c>
 801a6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6f2:	e711      	b.n	801a518 <_vfiprintf_r+0x50>
 801a6f4:	ab03      	add	r3, sp, #12
 801a6f6:	9300      	str	r3, [sp, #0]
 801a6f8:	462a      	mov	r2, r5
 801a6fa:	4b09      	ldr	r3, [pc, #36]	; (801a720 <_vfiprintf_r+0x258>)
 801a6fc:	a904      	add	r1, sp, #16
 801a6fe:	4630      	mov	r0, r6
 801a700:	f000 f880 	bl	801a804 <_printf_i>
 801a704:	e7e4      	b.n	801a6d0 <_vfiprintf_r+0x208>
 801a706:	bf00      	nop
 801a708:	0801e360 	.word	0x0801e360
 801a70c:	0801e380 	.word	0x0801e380
 801a710:	0801e340 	.word	0x0801e340
 801a714:	0801e6f4 	.word	0x0801e6f4
 801a718:	0801e6fe 	.word	0x0801e6fe
 801a71c:	00000000 	.word	0x00000000
 801a720:	0801a4a3 	.word	0x0801a4a3
 801a724:	0801e6fa 	.word	0x0801e6fa

0801a728 <_printf_common>:
 801a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a72c:	4616      	mov	r6, r2
 801a72e:	4699      	mov	r9, r3
 801a730:	688a      	ldr	r2, [r1, #8]
 801a732:	690b      	ldr	r3, [r1, #16]
 801a734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a738:	4293      	cmp	r3, r2
 801a73a:	bfb8      	it	lt
 801a73c:	4613      	movlt	r3, r2
 801a73e:	6033      	str	r3, [r6, #0]
 801a740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a744:	4607      	mov	r7, r0
 801a746:	460c      	mov	r4, r1
 801a748:	b10a      	cbz	r2, 801a74e <_printf_common+0x26>
 801a74a:	3301      	adds	r3, #1
 801a74c:	6033      	str	r3, [r6, #0]
 801a74e:	6823      	ldr	r3, [r4, #0]
 801a750:	0699      	lsls	r1, r3, #26
 801a752:	bf42      	ittt	mi
 801a754:	6833      	ldrmi	r3, [r6, #0]
 801a756:	3302      	addmi	r3, #2
 801a758:	6033      	strmi	r3, [r6, #0]
 801a75a:	6825      	ldr	r5, [r4, #0]
 801a75c:	f015 0506 	ands.w	r5, r5, #6
 801a760:	d106      	bne.n	801a770 <_printf_common+0x48>
 801a762:	f104 0a19 	add.w	sl, r4, #25
 801a766:	68e3      	ldr	r3, [r4, #12]
 801a768:	6832      	ldr	r2, [r6, #0]
 801a76a:	1a9b      	subs	r3, r3, r2
 801a76c:	42ab      	cmp	r3, r5
 801a76e:	dc26      	bgt.n	801a7be <_printf_common+0x96>
 801a770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a774:	1e13      	subs	r3, r2, #0
 801a776:	6822      	ldr	r2, [r4, #0]
 801a778:	bf18      	it	ne
 801a77a:	2301      	movne	r3, #1
 801a77c:	0692      	lsls	r2, r2, #26
 801a77e:	d42b      	bmi.n	801a7d8 <_printf_common+0xb0>
 801a780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a784:	4649      	mov	r1, r9
 801a786:	4638      	mov	r0, r7
 801a788:	47c0      	blx	r8
 801a78a:	3001      	adds	r0, #1
 801a78c:	d01e      	beq.n	801a7cc <_printf_common+0xa4>
 801a78e:	6823      	ldr	r3, [r4, #0]
 801a790:	68e5      	ldr	r5, [r4, #12]
 801a792:	6832      	ldr	r2, [r6, #0]
 801a794:	f003 0306 	and.w	r3, r3, #6
 801a798:	2b04      	cmp	r3, #4
 801a79a:	bf08      	it	eq
 801a79c:	1aad      	subeq	r5, r5, r2
 801a79e:	68a3      	ldr	r3, [r4, #8]
 801a7a0:	6922      	ldr	r2, [r4, #16]
 801a7a2:	bf0c      	ite	eq
 801a7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a7a8:	2500      	movne	r5, #0
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	bfc4      	itt	gt
 801a7ae:	1a9b      	subgt	r3, r3, r2
 801a7b0:	18ed      	addgt	r5, r5, r3
 801a7b2:	2600      	movs	r6, #0
 801a7b4:	341a      	adds	r4, #26
 801a7b6:	42b5      	cmp	r5, r6
 801a7b8:	d11a      	bne.n	801a7f0 <_printf_common+0xc8>
 801a7ba:	2000      	movs	r0, #0
 801a7bc:	e008      	b.n	801a7d0 <_printf_common+0xa8>
 801a7be:	2301      	movs	r3, #1
 801a7c0:	4652      	mov	r2, sl
 801a7c2:	4649      	mov	r1, r9
 801a7c4:	4638      	mov	r0, r7
 801a7c6:	47c0      	blx	r8
 801a7c8:	3001      	adds	r0, #1
 801a7ca:	d103      	bne.n	801a7d4 <_printf_common+0xac>
 801a7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7d4:	3501      	adds	r5, #1
 801a7d6:	e7c6      	b.n	801a766 <_printf_common+0x3e>
 801a7d8:	18e1      	adds	r1, r4, r3
 801a7da:	1c5a      	adds	r2, r3, #1
 801a7dc:	2030      	movs	r0, #48	; 0x30
 801a7de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a7e2:	4422      	add	r2, r4
 801a7e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a7e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a7ec:	3302      	adds	r3, #2
 801a7ee:	e7c7      	b.n	801a780 <_printf_common+0x58>
 801a7f0:	2301      	movs	r3, #1
 801a7f2:	4622      	mov	r2, r4
 801a7f4:	4649      	mov	r1, r9
 801a7f6:	4638      	mov	r0, r7
 801a7f8:	47c0      	blx	r8
 801a7fa:	3001      	adds	r0, #1
 801a7fc:	d0e6      	beq.n	801a7cc <_printf_common+0xa4>
 801a7fe:	3601      	adds	r6, #1
 801a800:	e7d9      	b.n	801a7b6 <_printf_common+0x8e>
	...

0801a804 <_printf_i>:
 801a804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a808:	7e0f      	ldrb	r7, [r1, #24]
 801a80a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a80c:	2f78      	cmp	r7, #120	; 0x78
 801a80e:	4691      	mov	r9, r2
 801a810:	4680      	mov	r8, r0
 801a812:	460c      	mov	r4, r1
 801a814:	469a      	mov	sl, r3
 801a816:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a81a:	d807      	bhi.n	801a82c <_printf_i+0x28>
 801a81c:	2f62      	cmp	r7, #98	; 0x62
 801a81e:	d80a      	bhi.n	801a836 <_printf_i+0x32>
 801a820:	2f00      	cmp	r7, #0
 801a822:	f000 80d8 	beq.w	801a9d6 <_printf_i+0x1d2>
 801a826:	2f58      	cmp	r7, #88	; 0x58
 801a828:	f000 80a3 	beq.w	801a972 <_printf_i+0x16e>
 801a82c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a834:	e03a      	b.n	801a8ac <_printf_i+0xa8>
 801a836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a83a:	2b15      	cmp	r3, #21
 801a83c:	d8f6      	bhi.n	801a82c <_printf_i+0x28>
 801a83e:	a101      	add	r1, pc, #4	; (adr r1, 801a844 <_printf_i+0x40>)
 801a840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a844:	0801a89d 	.word	0x0801a89d
 801a848:	0801a8b1 	.word	0x0801a8b1
 801a84c:	0801a82d 	.word	0x0801a82d
 801a850:	0801a82d 	.word	0x0801a82d
 801a854:	0801a82d 	.word	0x0801a82d
 801a858:	0801a82d 	.word	0x0801a82d
 801a85c:	0801a8b1 	.word	0x0801a8b1
 801a860:	0801a82d 	.word	0x0801a82d
 801a864:	0801a82d 	.word	0x0801a82d
 801a868:	0801a82d 	.word	0x0801a82d
 801a86c:	0801a82d 	.word	0x0801a82d
 801a870:	0801a9bd 	.word	0x0801a9bd
 801a874:	0801a8e1 	.word	0x0801a8e1
 801a878:	0801a99f 	.word	0x0801a99f
 801a87c:	0801a82d 	.word	0x0801a82d
 801a880:	0801a82d 	.word	0x0801a82d
 801a884:	0801a9df 	.word	0x0801a9df
 801a888:	0801a82d 	.word	0x0801a82d
 801a88c:	0801a8e1 	.word	0x0801a8e1
 801a890:	0801a82d 	.word	0x0801a82d
 801a894:	0801a82d 	.word	0x0801a82d
 801a898:	0801a9a7 	.word	0x0801a9a7
 801a89c:	682b      	ldr	r3, [r5, #0]
 801a89e:	1d1a      	adds	r2, r3, #4
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	602a      	str	r2, [r5, #0]
 801a8a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a8a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a8ac:	2301      	movs	r3, #1
 801a8ae:	e0a3      	b.n	801a9f8 <_printf_i+0x1f4>
 801a8b0:	6820      	ldr	r0, [r4, #0]
 801a8b2:	6829      	ldr	r1, [r5, #0]
 801a8b4:	0606      	lsls	r6, r0, #24
 801a8b6:	f101 0304 	add.w	r3, r1, #4
 801a8ba:	d50a      	bpl.n	801a8d2 <_printf_i+0xce>
 801a8bc:	680e      	ldr	r6, [r1, #0]
 801a8be:	602b      	str	r3, [r5, #0]
 801a8c0:	2e00      	cmp	r6, #0
 801a8c2:	da03      	bge.n	801a8cc <_printf_i+0xc8>
 801a8c4:	232d      	movs	r3, #45	; 0x2d
 801a8c6:	4276      	negs	r6, r6
 801a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8cc:	485e      	ldr	r0, [pc, #376]	; (801aa48 <_printf_i+0x244>)
 801a8ce:	230a      	movs	r3, #10
 801a8d0:	e019      	b.n	801a906 <_printf_i+0x102>
 801a8d2:	680e      	ldr	r6, [r1, #0]
 801a8d4:	602b      	str	r3, [r5, #0]
 801a8d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a8da:	bf18      	it	ne
 801a8dc:	b236      	sxthne	r6, r6
 801a8de:	e7ef      	b.n	801a8c0 <_printf_i+0xbc>
 801a8e0:	682b      	ldr	r3, [r5, #0]
 801a8e2:	6820      	ldr	r0, [r4, #0]
 801a8e4:	1d19      	adds	r1, r3, #4
 801a8e6:	6029      	str	r1, [r5, #0]
 801a8e8:	0601      	lsls	r1, r0, #24
 801a8ea:	d501      	bpl.n	801a8f0 <_printf_i+0xec>
 801a8ec:	681e      	ldr	r6, [r3, #0]
 801a8ee:	e002      	b.n	801a8f6 <_printf_i+0xf2>
 801a8f0:	0646      	lsls	r6, r0, #25
 801a8f2:	d5fb      	bpl.n	801a8ec <_printf_i+0xe8>
 801a8f4:	881e      	ldrh	r6, [r3, #0]
 801a8f6:	4854      	ldr	r0, [pc, #336]	; (801aa48 <_printf_i+0x244>)
 801a8f8:	2f6f      	cmp	r7, #111	; 0x6f
 801a8fa:	bf0c      	ite	eq
 801a8fc:	2308      	moveq	r3, #8
 801a8fe:	230a      	movne	r3, #10
 801a900:	2100      	movs	r1, #0
 801a902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a906:	6865      	ldr	r5, [r4, #4]
 801a908:	60a5      	str	r5, [r4, #8]
 801a90a:	2d00      	cmp	r5, #0
 801a90c:	bfa2      	ittt	ge
 801a90e:	6821      	ldrge	r1, [r4, #0]
 801a910:	f021 0104 	bicge.w	r1, r1, #4
 801a914:	6021      	strge	r1, [r4, #0]
 801a916:	b90e      	cbnz	r6, 801a91c <_printf_i+0x118>
 801a918:	2d00      	cmp	r5, #0
 801a91a:	d04d      	beq.n	801a9b8 <_printf_i+0x1b4>
 801a91c:	4615      	mov	r5, r2
 801a91e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a922:	fb03 6711 	mls	r7, r3, r1, r6
 801a926:	5dc7      	ldrb	r7, [r0, r7]
 801a928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a92c:	4637      	mov	r7, r6
 801a92e:	42bb      	cmp	r3, r7
 801a930:	460e      	mov	r6, r1
 801a932:	d9f4      	bls.n	801a91e <_printf_i+0x11a>
 801a934:	2b08      	cmp	r3, #8
 801a936:	d10b      	bne.n	801a950 <_printf_i+0x14c>
 801a938:	6823      	ldr	r3, [r4, #0]
 801a93a:	07de      	lsls	r6, r3, #31
 801a93c:	d508      	bpl.n	801a950 <_printf_i+0x14c>
 801a93e:	6923      	ldr	r3, [r4, #16]
 801a940:	6861      	ldr	r1, [r4, #4]
 801a942:	4299      	cmp	r1, r3
 801a944:	bfde      	ittt	le
 801a946:	2330      	movle	r3, #48	; 0x30
 801a948:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a94c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a950:	1b52      	subs	r2, r2, r5
 801a952:	6122      	str	r2, [r4, #16]
 801a954:	f8cd a000 	str.w	sl, [sp]
 801a958:	464b      	mov	r3, r9
 801a95a:	aa03      	add	r2, sp, #12
 801a95c:	4621      	mov	r1, r4
 801a95e:	4640      	mov	r0, r8
 801a960:	f7ff fee2 	bl	801a728 <_printf_common>
 801a964:	3001      	adds	r0, #1
 801a966:	d14c      	bne.n	801aa02 <_printf_i+0x1fe>
 801a968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a96c:	b004      	add	sp, #16
 801a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a972:	4835      	ldr	r0, [pc, #212]	; (801aa48 <_printf_i+0x244>)
 801a974:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a978:	6829      	ldr	r1, [r5, #0]
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	f851 6b04 	ldr.w	r6, [r1], #4
 801a980:	6029      	str	r1, [r5, #0]
 801a982:	061d      	lsls	r5, r3, #24
 801a984:	d514      	bpl.n	801a9b0 <_printf_i+0x1ac>
 801a986:	07df      	lsls	r7, r3, #31
 801a988:	bf44      	itt	mi
 801a98a:	f043 0320 	orrmi.w	r3, r3, #32
 801a98e:	6023      	strmi	r3, [r4, #0]
 801a990:	b91e      	cbnz	r6, 801a99a <_printf_i+0x196>
 801a992:	6823      	ldr	r3, [r4, #0]
 801a994:	f023 0320 	bic.w	r3, r3, #32
 801a998:	6023      	str	r3, [r4, #0]
 801a99a:	2310      	movs	r3, #16
 801a99c:	e7b0      	b.n	801a900 <_printf_i+0xfc>
 801a99e:	6823      	ldr	r3, [r4, #0]
 801a9a0:	f043 0320 	orr.w	r3, r3, #32
 801a9a4:	6023      	str	r3, [r4, #0]
 801a9a6:	2378      	movs	r3, #120	; 0x78
 801a9a8:	4828      	ldr	r0, [pc, #160]	; (801aa4c <_printf_i+0x248>)
 801a9aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a9ae:	e7e3      	b.n	801a978 <_printf_i+0x174>
 801a9b0:	0659      	lsls	r1, r3, #25
 801a9b2:	bf48      	it	mi
 801a9b4:	b2b6      	uxthmi	r6, r6
 801a9b6:	e7e6      	b.n	801a986 <_printf_i+0x182>
 801a9b8:	4615      	mov	r5, r2
 801a9ba:	e7bb      	b.n	801a934 <_printf_i+0x130>
 801a9bc:	682b      	ldr	r3, [r5, #0]
 801a9be:	6826      	ldr	r6, [r4, #0]
 801a9c0:	6961      	ldr	r1, [r4, #20]
 801a9c2:	1d18      	adds	r0, r3, #4
 801a9c4:	6028      	str	r0, [r5, #0]
 801a9c6:	0635      	lsls	r5, r6, #24
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	d501      	bpl.n	801a9d0 <_printf_i+0x1cc>
 801a9cc:	6019      	str	r1, [r3, #0]
 801a9ce:	e002      	b.n	801a9d6 <_printf_i+0x1d2>
 801a9d0:	0670      	lsls	r0, r6, #25
 801a9d2:	d5fb      	bpl.n	801a9cc <_printf_i+0x1c8>
 801a9d4:	8019      	strh	r1, [r3, #0]
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	6123      	str	r3, [r4, #16]
 801a9da:	4615      	mov	r5, r2
 801a9dc:	e7ba      	b.n	801a954 <_printf_i+0x150>
 801a9de:	682b      	ldr	r3, [r5, #0]
 801a9e0:	1d1a      	adds	r2, r3, #4
 801a9e2:	602a      	str	r2, [r5, #0]
 801a9e4:	681d      	ldr	r5, [r3, #0]
 801a9e6:	6862      	ldr	r2, [r4, #4]
 801a9e8:	2100      	movs	r1, #0
 801a9ea:	4628      	mov	r0, r5
 801a9ec:	f7e5 fc18 	bl	8000220 <memchr>
 801a9f0:	b108      	cbz	r0, 801a9f6 <_printf_i+0x1f2>
 801a9f2:	1b40      	subs	r0, r0, r5
 801a9f4:	6060      	str	r0, [r4, #4]
 801a9f6:	6863      	ldr	r3, [r4, #4]
 801a9f8:	6123      	str	r3, [r4, #16]
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa00:	e7a8      	b.n	801a954 <_printf_i+0x150>
 801aa02:	6923      	ldr	r3, [r4, #16]
 801aa04:	462a      	mov	r2, r5
 801aa06:	4649      	mov	r1, r9
 801aa08:	4640      	mov	r0, r8
 801aa0a:	47d0      	blx	sl
 801aa0c:	3001      	adds	r0, #1
 801aa0e:	d0ab      	beq.n	801a968 <_printf_i+0x164>
 801aa10:	6823      	ldr	r3, [r4, #0]
 801aa12:	079b      	lsls	r3, r3, #30
 801aa14:	d413      	bmi.n	801aa3e <_printf_i+0x23a>
 801aa16:	68e0      	ldr	r0, [r4, #12]
 801aa18:	9b03      	ldr	r3, [sp, #12]
 801aa1a:	4298      	cmp	r0, r3
 801aa1c:	bfb8      	it	lt
 801aa1e:	4618      	movlt	r0, r3
 801aa20:	e7a4      	b.n	801a96c <_printf_i+0x168>
 801aa22:	2301      	movs	r3, #1
 801aa24:	4632      	mov	r2, r6
 801aa26:	4649      	mov	r1, r9
 801aa28:	4640      	mov	r0, r8
 801aa2a:	47d0      	blx	sl
 801aa2c:	3001      	adds	r0, #1
 801aa2e:	d09b      	beq.n	801a968 <_printf_i+0x164>
 801aa30:	3501      	adds	r5, #1
 801aa32:	68e3      	ldr	r3, [r4, #12]
 801aa34:	9903      	ldr	r1, [sp, #12]
 801aa36:	1a5b      	subs	r3, r3, r1
 801aa38:	42ab      	cmp	r3, r5
 801aa3a:	dcf2      	bgt.n	801aa22 <_printf_i+0x21e>
 801aa3c:	e7eb      	b.n	801aa16 <_printf_i+0x212>
 801aa3e:	2500      	movs	r5, #0
 801aa40:	f104 0619 	add.w	r6, r4, #25
 801aa44:	e7f5      	b.n	801aa32 <_printf_i+0x22e>
 801aa46:	bf00      	nop
 801aa48:	0801e705 	.word	0x0801e705
 801aa4c:	0801e716 	.word	0x0801e716

0801aa50 <_read_r>:
 801aa50:	b538      	push	{r3, r4, r5, lr}
 801aa52:	4d07      	ldr	r5, [pc, #28]	; (801aa70 <_read_r+0x20>)
 801aa54:	4604      	mov	r4, r0
 801aa56:	4608      	mov	r0, r1
 801aa58:	4611      	mov	r1, r2
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	602a      	str	r2, [r5, #0]
 801aa5e:	461a      	mov	r2, r3
 801aa60:	f7e7 f8ce 	bl	8001c00 <_read>
 801aa64:	1c43      	adds	r3, r0, #1
 801aa66:	d102      	bne.n	801aa6e <_read_r+0x1e>
 801aa68:	682b      	ldr	r3, [r5, #0]
 801aa6a:	b103      	cbz	r3, 801aa6e <_read_r+0x1e>
 801aa6c:	6023      	str	r3, [r4, #0]
 801aa6e:	bd38      	pop	{r3, r4, r5, pc}
 801aa70:	20011d18 	.word	0x20011d18
 801aa74:	00000000 	.word	0x00000000

0801aa78 <nan>:
 801aa78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801aa80 <nan+0x8>
 801aa7c:	4770      	bx	lr
 801aa7e:	bf00      	nop
 801aa80:	00000000 	.word	0x00000000
 801aa84:	7ff80000 	.word	0x7ff80000

0801aa88 <__swbuf_r>:
 801aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa8a:	460e      	mov	r6, r1
 801aa8c:	4614      	mov	r4, r2
 801aa8e:	4605      	mov	r5, r0
 801aa90:	b118      	cbz	r0, 801aa9a <__swbuf_r+0x12>
 801aa92:	6983      	ldr	r3, [r0, #24]
 801aa94:	b90b      	cbnz	r3, 801aa9a <__swbuf_r+0x12>
 801aa96:	f7fd f831 	bl	8017afc <__sinit>
 801aa9a:	4b21      	ldr	r3, [pc, #132]	; (801ab20 <__swbuf_r+0x98>)
 801aa9c:	429c      	cmp	r4, r3
 801aa9e:	d12b      	bne.n	801aaf8 <__swbuf_r+0x70>
 801aaa0:	686c      	ldr	r4, [r5, #4]
 801aaa2:	69a3      	ldr	r3, [r4, #24]
 801aaa4:	60a3      	str	r3, [r4, #8]
 801aaa6:	89a3      	ldrh	r3, [r4, #12]
 801aaa8:	071a      	lsls	r2, r3, #28
 801aaaa:	d52f      	bpl.n	801ab0c <__swbuf_r+0x84>
 801aaac:	6923      	ldr	r3, [r4, #16]
 801aaae:	b36b      	cbz	r3, 801ab0c <__swbuf_r+0x84>
 801aab0:	6923      	ldr	r3, [r4, #16]
 801aab2:	6820      	ldr	r0, [r4, #0]
 801aab4:	1ac0      	subs	r0, r0, r3
 801aab6:	6963      	ldr	r3, [r4, #20]
 801aab8:	b2f6      	uxtb	r6, r6
 801aaba:	4283      	cmp	r3, r0
 801aabc:	4637      	mov	r7, r6
 801aabe:	dc04      	bgt.n	801aaca <__swbuf_r+0x42>
 801aac0:	4621      	mov	r1, r4
 801aac2:	4628      	mov	r0, r5
 801aac4:	f7fe fa60 	bl	8018f88 <_fflush_r>
 801aac8:	bb30      	cbnz	r0, 801ab18 <__swbuf_r+0x90>
 801aaca:	68a3      	ldr	r3, [r4, #8]
 801aacc:	3b01      	subs	r3, #1
 801aace:	60a3      	str	r3, [r4, #8]
 801aad0:	6823      	ldr	r3, [r4, #0]
 801aad2:	1c5a      	adds	r2, r3, #1
 801aad4:	6022      	str	r2, [r4, #0]
 801aad6:	701e      	strb	r6, [r3, #0]
 801aad8:	6963      	ldr	r3, [r4, #20]
 801aada:	3001      	adds	r0, #1
 801aadc:	4283      	cmp	r3, r0
 801aade:	d004      	beq.n	801aaea <__swbuf_r+0x62>
 801aae0:	89a3      	ldrh	r3, [r4, #12]
 801aae2:	07db      	lsls	r3, r3, #31
 801aae4:	d506      	bpl.n	801aaf4 <__swbuf_r+0x6c>
 801aae6:	2e0a      	cmp	r6, #10
 801aae8:	d104      	bne.n	801aaf4 <__swbuf_r+0x6c>
 801aaea:	4621      	mov	r1, r4
 801aaec:	4628      	mov	r0, r5
 801aaee:	f7fe fa4b 	bl	8018f88 <_fflush_r>
 801aaf2:	b988      	cbnz	r0, 801ab18 <__swbuf_r+0x90>
 801aaf4:	4638      	mov	r0, r7
 801aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aaf8:	4b0a      	ldr	r3, [pc, #40]	; (801ab24 <__swbuf_r+0x9c>)
 801aafa:	429c      	cmp	r4, r3
 801aafc:	d101      	bne.n	801ab02 <__swbuf_r+0x7a>
 801aafe:	68ac      	ldr	r4, [r5, #8]
 801ab00:	e7cf      	b.n	801aaa2 <__swbuf_r+0x1a>
 801ab02:	4b09      	ldr	r3, [pc, #36]	; (801ab28 <__swbuf_r+0xa0>)
 801ab04:	429c      	cmp	r4, r3
 801ab06:	bf08      	it	eq
 801ab08:	68ec      	ldreq	r4, [r5, #12]
 801ab0a:	e7ca      	b.n	801aaa2 <__swbuf_r+0x1a>
 801ab0c:	4621      	mov	r1, r4
 801ab0e:	4628      	mov	r0, r5
 801ab10:	f000 f81a 	bl	801ab48 <__swsetup_r>
 801ab14:	2800      	cmp	r0, #0
 801ab16:	d0cb      	beq.n	801aab0 <__swbuf_r+0x28>
 801ab18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ab1c:	e7ea      	b.n	801aaf4 <__swbuf_r+0x6c>
 801ab1e:	bf00      	nop
 801ab20:	0801e360 	.word	0x0801e360
 801ab24:	0801e380 	.word	0x0801e380
 801ab28:	0801e340 	.word	0x0801e340

0801ab2c <__ascii_wctomb>:
 801ab2c:	b149      	cbz	r1, 801ab42 <__ascii_wctomb+0x16>
 801ab2e:	2aff      	cmp	r2, #255	; 0xff
 801ab30:	bf85      	ittet	hi
 801ab32:	238a      	movhi	r3, #138	; 0x8a
 801ab34:	6003      	strhi	r3, [r0, #0]
 801ab36:	700a      	strbls	r2, [r1, #0]
 801ab38:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801ab3c:	bf98      	it	ls
 801ab3e:	2001      	movls	r0, #1
 801ab40:	4770      	bx	lr
 801ab42:	4608      	mov	r0, r1
 801ab44:	4770      	bx	lr
	...

0801ab48 <__swsetup_r>:
 801ab48:	4b32      	ldr	r3, [pc, #200]	; (801ac14 <__swsetup_r+0xcc>)
 801ab4a:	b570      	push	{r4, r5, r6, lr}
 801ab4c:	681d      	ldr	r5, [r3, #0]
 801ab4e:	4606      	mov	r6, r0
 801ab50:	460c      	mov	r4, r1
 801ab52:	b125      	cbz	r5, 801ab5e <__swsetup_r+0x16>
 801ab54:	69ab      	ldr	r3, [r5, #24]
 801ab56:	b913      	cbnz	r3, 801ab5e <__swsetup_r+0x16>
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f7fc ffcf 	bl	8017afc <__sinit>
 801ab5e:	4b2e      	ldr	r3, [pc, #184]	; (801ac18 <__swsetup_r+0xd0>)
 801ab60:	429c      	cmp	r4, r3
 801ab62:	d10f      	bne.n	801ab84 <__swsetup_r+0x3c>
 801ab64:	686c      	ldr	r4, [r5, #4]
 801ab66:	89a3      	ldrh	r3, [r4, #12]
 801ab68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ab6c:	0719      	lsls	r1, r3, #28
 801ab6e:	d42c      	bmi.n	801abca <__swsetup_r+0x82>
 801ab70:	06dd      	lsls	r5, r3, #27
 801ab72:	d411      	bmi.n	801ab98 <__swsetup_r+0x50>
 801ab74:	2309      	movs	r3, #9
 801ab76:	6033      	str	r3, [r6, #0]
 801ab78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ab7c:	81a3      	strh	r3, [r4, #12]
 801ab7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab82:	e03e      	b.n	801ac02 <__swsetup_r+0xba>
 801ab84:	4b25      	ldr	r3, [pc, #148]	; (801ac1c <__swsetup_r+0xd4>)
 801ab86:	429c      	cmp	r4, r3
 801ab88:	d101      	bne.n	801ab8e <__swsetup_r+0x46>
 801ab8a:	68ac      	ldr	r4, [r5, #8]
 801ab8c:	e7eb      	b.n	801ab66 <__swsetup_r+0x1e>
 801ab8e:	4b24      	ldr	r3, [pc, #144]	; (801ac20 <__swsetup_r+0xd8>)
 801ab90:	429c      	cmp	r4, r3
 801ab92:	bf08      	it	eq
 801ab94:	68ec      	ldreq	r4, [r5, #12]
 801ab96:	e7e6      	b.n	801ab66 <__swsetup_r+0x1e>
 801ab98:	0758      	lsls	r0, r3, #29
 801ab9a:	d512      	bpl.n	801abc2 <__swsetup_r+0x7a>
 801ab9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab9e:	b141      	cbz	r1, 801abb2 <__swsetup_r+0x6a>
 801aba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aba4:	4299      	cmp	r1, r3
 801aba6:	d002      	beq.n	801abae <__swsetup_r+0x66>
 801aba8:	4630      	mov	r0, r6
 801abaa:	f7ff fabb 	bl	801a124 <_free_r>
 801abae:	2300      	movs	r3, #0
 801abb0:	6363      	str	r3, [r4, #52]	; 0x34
 801abb2:	89a3      	ldrh	r3, [r4, #12]
 801abb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801abb8:	81a3      	strh	r3, [r4, #12]
 801abba:	2300      	movs	r3, #0
 801abbc:	6063      	str	r3, [r4, #4]
 801abbe:	6923      	ldr	r3, [r4, #16]
 801abc0:	6023      	str	r3, [r4, #0]
 801abc2:	89a3      	ldrh	r3, [r4, #12]
 801abc4:	f043 0308 	orr.w	r3, r3, #8
 801abc8:	81a3      	strh	r3, [r4, #12]
 801abca:	6923      	ldr	r3, [r4, #16]
 801abcc:	b94b      	cbnz	r3, 801abe2 <__swsetup_r+0x9a>
 801abce:	89a3      	ldrh	r3, [r4, #12]
 801abd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801abd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801abd8:	d003      	beq.n	801abe2 <__swsetup_r+0x9a>
 801abda:	4621      	mov	r1, r4
 801abdc:	4630      	mov	r0, r6
 801abde:	f000 f84d 	bl	801ac7c <__smakebuf_r>
 801abe2:	89a0      	ldrh	r0, [r4, #12]
 801abe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801abe8:	f010 0301 	ands.w	r3, r0, #1
 801abec:	d00a      	beq.n	801ac04 <__swsetup_r+0xbc>
 801abee:	2300      	movs	r3, #0
 801abf0:	60a3      	str	r3, [r4, #8]
 801abf2:	6963      	ldr	r3, [r4, #20]
 801abf4:	425b      	negs	r3, r3
 801abf6:	61a3      	str	r3, [r4, #24]
 801abf8:	6923      	ldr	r3, [r4, #16]
 801abfa:	b943      	cbnz	r3, 801ac0e <__swsetup_r+0xc6>
 801abfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ac00:	d1ba      	bne.n	801ab78 <__swsetup_r+0x30>
 801ac02:	bd70      	pop	{r4, r5, r6, pc}
 801ac04:	0781      	lsls	r1, r0, #30
 801ac06:	bf58      	it	pl
 801ac08:	6963      	ldrpl	r3, [r4, #20]
 801ac0a:	60a3      	str	r3, [r4, #8]
 801ac0c:	e7f4      	b.n	801abf8 <__swsetup_r+0xb0>
 801ac0e:	2000      	movs	r0, #0
 801ac10:	e7f7      	b.n	801ac02 <__swsetup_r+0xba>
 801ac12:	bf00      	nop
 801ac14:	2000002c 	.word	0x2000002c
 801ac18:	0801e360 	.word	0x0801e360
 801ac1c:	0801e380 	.word	0x0801e380
 801ac20:	0801e340 	.word	0x0801e340

0801ac24 <abort>:
 801ac24:	b508      	push	{r3, lr}
 801ac26:	2006      	movs	r0, #6
 801ac28:	f000 f8c0 	bl	801adac <raise>
 801ac2c:	2001      	movs	r0, #1
 801ac2e:	f7e6 ffdd 	bl	8001bec <_exit>

0801ac32 <__swhatbuf_r>:
 801ac32:	b570      	push	{r4, r5, r6, lr}
 801ac34:	460e      	mov	r6, r1
 801ac36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac3a:	2900      	cmp	r1, #0
 801ac3c:	b096      	sub	sp, #88	; 0x58
 801ac3e:	4614      	mov	r4, r2
 801ac40:	461d      	mov	r5, r3
 801ac42:	da08      	bge.n	801ac56 <__swhatbuf_r+0x24>
 801ac44:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ac48:	2200      	movs	r2, #0
 801ac4a:	602a      	str	r2, [r5, #0]
 801ac4c:	061a      	lsls	r2, r3, #24
 801ac4e:	d410      	bmi.n	801ac72 <__swhatbuf_r+0x40>
 801ac50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ac54:	e00e      	b.n	801ac74 <__swhatbuf_r+0x42>
 801ac56:	466a      	mov	r2, sp
 801ac58:	f000 f8c4 	bl	801ade4 <_fstat_r>
 801ac5c:	2800      	cmp	r0, #0
 801ac5e:	dbf1      	blt.n	801ac44 <__swhatbuf_r+0x12>
 801ac60:	9a01      	ldr	r2, [sp, #4]
 801ac62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ac66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ac6a:	425a      	negs	r2, r3
 801ac6c:	415a      	adcs	r2, r3
 801ac6e:	602a      	str	r2, [r5, #0]
 801ac70:	e7ee      	b.n	801ac50 <__swhatbuf_r+0x1e>
 801ac72:	2340      	movs	r3, #64	; 0x40
 801ac74:	2000      	movs	r0, #0
 801ac76:	6023      	str	r3, [r4, #0]
 801ac78:	b016      	add	sp, #88	; 0x58
 801ac7a:	bd70      	pop	{r4, r5, r6, pc}

0801ac7c <__smakebuf_r>:
 801ac7c:	898b      	ldrh	r3, [r1, #12]
 801ac7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ac80:	079d      	lsls	r5, r3, #30
 801ac82:	4606      	mov	r6, r0
 801ac84:	460c      	mov	r4, r1
 801ac86:	d507      	bpl.n	801ac98 <__smakebuf_r+0x1c>
 801ac88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ac8c:	6023      	str	r3, [r4, #0]
 801ac8e:	6123      	str	r3, [r4, #16]
 801ac90:	2301      	movs	r3, #1
 801ac92:	6163      	str	r3, [r4, #20]
 801ac94:	b002      	add	sp, #8
 801ac96:	bd70      	pop	{r4, r5, r6, pc}
 801ac98:	ab01      	add	r3, sp, #4
 801ac9a:	466a      	mov	r2, sp
 801ac9c:	f7ff ffc9 	bl	801ac32 <__swhatbuf_r>
 801aca0:	9900      	ldr	r1, [sp, #0]
 801aca2:	4605      	mov	r5, r0
 801aca4:	4630      	mov	r0, r6
 801aca6:	f7fd f84f 	bl	8017d48 <_malloc_r>
 801acaa:	b948      	cbnz	r0, 801acc0 <__smakebuf_r+0x44>
 801acac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acb0:	059a      	lsls	r2, r3, #22
 801acb2:	d4ef      	bmi.n	801ac94 <__smakebuf_r+0x18>
 801acb4:	f023 0303 	bic.w	r3, r3, #3
 801acb8:	f043 0302 	orr.w	r3, r3, #2
 801acbc:	81a3      	strh	r3, [r4, #12]
 801acbe:	e7e3      	b.n	801ac88 <__smakebuf_r+0xc>
 801acc0:	4b0d      	ldr	r3, [pc, #52]	; (801acf8 <__smakebuf_r+0x7c>)
 801acc2:	62b3      	str	r3, [r6, #40]	; 0x28
 801acc4:	89a3      	ldrh	r3, [r4, #12]
 801acc6:	6020      	str	r0, [r4, #0]
 801acc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801accc:	81a3      	strh	r3, [r4, #12]
 801acce:	9b00      	ldr	r3, [sp, #0]
 801acd0:	6163      	str	r3, [r4, #20]
 801acd2:	9b01      	ldr	r3, [sp, #4]
 801acd4:	6120      	str	r0, [r4, #16]
 801acd6:	b15b      	cbz	r3, 801acf0 <__smakebuf_r+0x74>
 801acd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801acdc:	4630      	mov	r0, r6
 801acde:	f000 f893 	bl	801ae08 <_isatty_r>
 801ace2:	b128      	cbz	r0, 801acf0 <__smakebuf_r+0x74>
 801ace4:	89a3      	ldrh	r3, [r4, #12]
 801ace6:	f023 0303 	bic.w	r3, r3, #3
 801acea:	f043 0301 	orr.w	r3, r3, #1
 801acee:	81a3      	strh	r3, [r4, #12]
 801acf0:	89a0      	ldrh	r0, [r4, #12]
 801acf2:	4305      	orrs	r5, r0
 801acf4:	81a5      	strh	r5, [r4, #12]
 801acf6:	e7cd      	b.n	801ac94 <__smakebuf_r+0x18>
 801acf8:	08017a95 	.word	0x08017a95

0801acfc <_realloc_r>:
 801acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad00:	4680      	mov	r8, r0
 801ad02:	4614      	mov	r4, r2
 801ad04:	460e      	mov	r6, r1
 801ad06:	b921      	cbnz	r1, 801ad12 <_realloc_r+0x16>
 801ad08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad0c:	4611      	mov	r1, r2
 801ad0e:	f7fd b81b 	b.w	8017d48 <_malloc_r>
 801ad12:	b92a      	cbnz	r2, 801ad20 <_realloc_r+0x24>
 801ad14:	f7ff fa06 	bl	801a124 <_free_r>
 801ad18:	4625      	mov	r5, r4
 801ad1a:	4628      	mov	r0, r5
 801ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad20:	f000 f882 	bl	801ae28 <_malloc_usable_size_r>
 801ad24:	4284      	cmp	r4, r0
 801ad26:	4607      	mov	r7, r0
 801ad28:	d802      	bhi.n	801ad30 <_realloc_r+0x34>
 801ad2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ad2e:	d812      	bhi.n	801ad56 <_realloc_r+0x5a>
 801ad30:	4621      	mov	r1, r4
 801ad32:	4640      	mov	r0, r8
 801ad34:	f7fd f808 	bl	8017d48 <_malloc_r>
 801ad38:	4605      	mov	r5, r0
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d0ed      	beq.n	801ad1a <_realloc_r+0x1e>
 801ad3e:	42bc      	cmp	r4, r7
 801ad40:	4622      	mov	r2, r4
 801ad42:	4631      	mov	r1, r6
 801ad44:	bf28      	it	cs
 801ad46:	463a      	movcs	r2, r7
 801ad48:	f7fc ffad 	bl	8017ca6 <memcpy>
 801ad4c:	4631      	mov	r1, r6
 801ad4e:	4640      	mov	r0, r8
 801ad50:	f7ff f9e8 	bl	801a124 <_free_r>
 801ad54:	e7e1      	b.n	801ad1a <_realloc_r+0x1e>
 801ad56:	4635      	mov	r5, r6
 801ad58:	e7df      	b.n	801ad1a <_realloc_r+0x1e>

0801ad5a <_raise_r>:
 801ad5a:	291f      	cmp	r1, #31
 801ad5c:	b538      	push	{r3, r4, r5, lr}
 801ad5e:	4604      	mov	r4, r0
 801ad60:	460d      	mov	r5, r1
 801ad62:	d904      	bls.n	801ad6e <_raise_r+0x14>
 801ad64:	2316      	movs	r3, #22
 801ad66:	6003      	str	r3, [r0, #0]
 801ad68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad6c:	bd38      	pop	{r3, r4, r5, pc}
 801ad6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ad70:	b112      	cbz	r2, 801ad78 <_raise_r+0x1e>
 801ad72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ad76:	b94b      	cbnz	r3, 801ad8c <_raise_r+0x32>
 801ad78:	4620      	mov	r0, r4
 801ad7a:	f000 f831 	bl	801ade0 <_getpid_r>
 801ad7e:	462a      	mov	r2, r5
 801ad80:	4601      	mov	r1, r0
 801ad82:	4620      	mov	r0, r4
 801ad84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad88:	f000 b818 	b.w	801adbc <_kill_r>
 801ad8c:	2b01      	cmp	r3, #1
 801ad8e:	d00a      	beq.n	801ada6 <_raise_r+0x4c>
 801ad90:	1c59      	adds	r1, r3, #1
 801ad92:	d103      	bne.n	801ad9c <_raise_r+0x42>
 801ad94:	2316      	movs	r3, #22
 801ad96:	6003      	str	r3, [r0, #0]
 801ad98:	2001      	movs	r0, #1
 801ad9a:	e7e7      	b.n	801ad6c <_raise_r+0x12>
 801ad9c:	2400      	movs	r4, #0
 801ad9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ada2:	4628      	mov	r0, r5
 801ada4:	4798      	blx	r3
 801ada6:	2000      	movs	r0, #0
 801ada8:	e7e0      	b.n	801ad6c <_raise_r+0x12>
	...

0801adac <raise>:
 801adac:	4b02      	ldr	r3, [pc, #8]	; (801adb8 <raise+0xc>)
 801adae:	4601      	mov	r1, r0
 801adb0:	6818      	ldr	r0, [r3, #0]
 801adb2:	f7ff bfd2 	b.w	801ad5a <_raise_r>
 801adb6:	bf00      	nop
 801adb8:	2000002c 	.word	0x2000002c

0801adbc <_kill_r>:
 801adbc:	b538      	push	{r3, r4, r5, lr}
 801adbe:	4d07      	ldr	r5, [pc, #28]	; (801addc <_kill_r+0x20>)
 801adc0:	2300      	movs	r3, #0
 801adc2:	4604      	mov	r4, r0
 801adc4:	4608      	mov	r0, r1
 801adc6:	4611      	mov	r1, r2
 801adc8:	602b      	str	r3, [r5, #0]
 801adca:	f7e6 fefd 	bl	8001bc8 <_kill>
 801adce:	1c43      	adds	r3, r0, #1
 801add0:	d102      	bne.n	801add8 <_kill_r+0x1c>
 801add2:	682b      	ldr	r3, [r5, #0]
 801add4:	b103      	cbz	r3, 801add8 <_kill_r+0x1c>
 801add6:	6023      	str	r3, [r4, #0]
 801add8:	bd38      	pop	{r3, r4, r5, pc}
 801adda:	bf00      	nop
 801addc:	20011d18 	.word	0x20011d18

0801ade0 <_getpid_r>:
 801ade0:	f7e6 beea 	b.w	8001bb8 <_getpid>

0801ade4 <_fstat_r>:
 801ade4:	b538      	push	{r3, r4, r5, lr}
 801ade6:	4d07      	ldr	r5, [pc, #28]	; (801ae04 <_fstat_r+0x20>)
 801ade8:	2300      	movs	r3, #0
 801adea:	4604      	mov	r4, r0
 801adec:	4608      	mov	r0, r1
 801adee:	4611      	mov	r1, r2
 801adf0:	602b      	str	r3, [r5, #0]
 801adf2:	f7e6 ff4a 	bl	8001c8a <_fstat>
 801adf6:	1c43      	adds	r3, r0, #1
 801adf8:	d102      	bne.n	801ae00 <_fstat_r+0x1c>
 801adfa:	682b      	ldr	r3, [r5, #0]
 801adfc:	b103      	cbz	r3, 801ae00 <_fstat_r+0x1c>
 801adfe:	6023      	str	r3, [r4, #0]
 801ae00:	bd38      	pop	{r3, r4, r5, pc}
 801ae02:	bf00      	nop
 801ae04:	20011d18 	.word	0x20011d18

0801ae08 <_isatty_r>:
 801ae08:	b538      	push	{r3, r4, r5, lr}
 801ae0a:	4d06      	ldr	r5, [pc, #24]	; (801ae24 <_isatty_r+0x1c>)
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	4604      	mov	r4, r0
 801ae10:	4608      	mov	r0, r1
 801ae12:	602b      	str	r3, [r5, #0]
 801ae14:	f7e6 ff49 	bl	8001caa <_isatty>
 801ae18:	1c43      	adds	r3, r0, #1
 801ae1a:	d102      	bne.n	801ae22 <_isatty_r+0x1a>
 801ae1c:	682b      	ldr	r3, [r5, #0]
 801ae1e:	b103      	cbz	r3, 801ae22 <_isatty_r+0x1a>
 801ae20:	6023      	str	r3, [r4, #0]
 801ae22:	bd38      	pop	{r3, r4, r5, pc}
 801ae24:	20011d18 	.word	0x20011d18

0801ae28 <_malloc_usable_size_r>:
 801ae28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae2c:	1f18      	subs	r0, r3, #4
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	bfbc      	itt	lt
 801ae32:	580b      	ldrlt	r3, [r1, r0]
 801ae34:	18c0      	addlt	r0, r0, r3
 801ae36:	4770      	bx	lr

0801ae38 <_init>:
 801ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae3a:	bf00      	nop
 801ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae3e:	bc08      	pop	{r3}
 801ae40:	469e      	mov	lr, r3
 801ae42:	4770      	bx	lr

0801ae44 <_fini>:
 801ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae46:	bf00      	nop
 801ae48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae4a:	bc08      	pop	{r3}
 801ae4c:	469e      	mov	lr, r3
 801ae4e:	4770      	bx	lr
