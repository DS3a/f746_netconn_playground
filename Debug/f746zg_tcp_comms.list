
f746zg_tcp_comms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a9e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  0801abb0  0801abb0  0002abb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e468  0801e468  00030340  2**0
                  CONTENTS
  4 .ARM          00000008  0801e468  0801e468  0002e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e470  0801e470  00030340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e470  0801e470  0002e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e474  0801e474  0002e474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801e478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000200  0801e678  00030200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002a0  0801e718  000302a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000119c4  20000340  0801e7b8  00030340  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20011d04  0801e7b8  00031d04  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003388b  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000079f0  00000000  00000000  00063bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002380  00000000  00000000  0006b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000366ab  00000000  00000000  0006d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035f2a  00000000  00000000  000a401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001116b1  00000000  00000000  000d9f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eb5f6  2**0
                  CONTENTS, READONLY
 21 .debug_ranges 000021d8  00000000  00000000  001eb648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a4d8  00000000  00000000  001ed820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000340 	.word	0x20000340
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ab98 	.word	0x0801ab98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000344 	.word	0x20000344
 800020c:	0801ab98 	.word	0x0801ab98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b9aa 	b.w	8000fb8 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
}
 8000fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fc6:	f3bf 8f6f 	isb	sy
}
 8000fca:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SCB_EnableICache+0x48>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
}
 8000fd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
}
 8000fde:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SCB_EnableICache+0x48>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fec:	f3bf 8f4f 	dsb	sy
}
 8000ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff2:	f3bf 8f6f 	isb	sy
}
 8000ff6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SCB_EnableDCache+0x84>)
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SCB_EnableDCache+0x84>)
 800101e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001022:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	0b5b      	lsrs	r3, r3, #13
 8001028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800102c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001036:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	015a      	lsls	r2, r3, #5
 800103c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001040:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <SCB_EnableDCache+0x84>)
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1ef      	bne.n	8001038 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	60fa      	str	r2, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e5      	bne.n	800102e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001062:	f3bf 8f4f 	dsb	sy
}
 8001066:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCB_EnableDCache+0x84>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <SCB_EnableDCache+0x84>)
 800106e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001072:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800107a:	f3bf 8f6f 	isb	sy
}
 800107e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001094:	f000 fa42 	bl	800151c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001098:	f7ff ff90 	bl	8000fbc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800109c:	f7ff ffb4 	bl	8001008 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f001 f85e 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f842 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f908 	bl	80012bc <MX_GPIO_Init>
  MX_TIM3_Init();
 80010ac:	f000 f8ac 	bl	8001208 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010b0:	f005 fb82 	bl	80067b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of conn_handler */
  conn_handlerHandle = osThreadNew(start_conn_handler, NULL, &conn_handler_attributes);
 80010b4:	4a11      	ldr	r2, [pc, #68]	; (80010fc <main+0x6c>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <main+0x70>)
 80010ba:	f005 fc0f 	bl	80068dc <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <main+0x74>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 80010c4:	4a10      	ldr	r2, [pc, #64]	; (8001108 <main+0x78>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <main+0x7c>)
 80010ca:	f005 fc07 	bl	80068dc <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <main+0x80>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of tcp_thread */
  tcp_threadHandle = osThreadNew(start_tcp_thread, NULL, &tcp_thread_attributes);
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <main+0x84>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <main+0x88>)
 80010da:	f005 fbff 	bl	80068dc <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <main+0x8c>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of control_systems */
  control_systemsHandle = osThreadNew(start_control_systems, NULL, &control_systems_attributes);
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <main+0x90>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <main+0x94>)
 80010ea:	f005 fbf7 	bl	80068dc <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <main+0x98>)
 80010f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010f4:	f005 fb94 	bl	8006820 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0x68>
 80010fa:	bf00      	nop
 80010fc:	0801ddb8 	.word	0x0801ddb8
 8001100:	080013dd 	.word	0x080013dd
 8001104:	200003a8 	.word	0x200003a8
 8001108:	0801dddc 	.word	0x0801dddc
 800110c:	080013f5 	.word	0x080013f5
 8001110:	200003ac 	.word	0x200003ac
 8001114:	0801de00 	.word	0x0801de00
 8001118:	08001451 	.word	0x08001451
 800111c:	200003b0 	.word	0x200003b0
 8001120:	0801de24 	.word	0x0801de24
 8001124:	08001475 	.word	0x08001475
 8001128:	200003b4 	.word	0x200003b4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	; 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f016 fc8b 	bl	8017a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <SystemClock_Config+0xd4>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <SystemClock_Config+0xd4>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xd4>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	4b26      	ldr	r3, [pc, #152]	; (8001204 <SystemClock_Config+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <SystemClock_Config+0xd8>)
 800116e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SystemClock_Config+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001194:	2319      	movs	r3, #25
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001198:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800119c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fe54 	bl	8003e58 <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011b6:	f000 f9f1 	bl	800159c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011ba:	f002 fdfd 	bl	8003db8 <HAL_PWREx_EnableOverDrive>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011c4:	f000 f9ea 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2107      	movs	r1, #7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f8da 	bl	80043a0 <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f2:	f000 f9d3 	bl	800159c <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_TIM3_Init+0xac>)
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_TIM3_Init+0xb0>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM3_Init+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM3_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001254:	f003 fb82 	bl	800495c <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 f99d 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001272:	f004 fba9 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800127c:	f000 f98e 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001298:	f003 fdd2 	bl	8004e40 <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012a2:	f000 f97b 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0xac>)
 80012a8:	f000 fad8 	bl	800185c <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000035c 	.word	0x2000035c
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MX_GPIO_Init+0x110>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a3d      	ldr	r2, [pc, #244]	; (80013cc <MX_GPIO_Init+0x110>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <MX_GPIO_Init+0x110>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <MX_GPIO_Init+0x110>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <MX_GPIO_Init+0x110>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <MX_GPIO_Init+0x110>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <MX_GPIO_Init+0x110>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a31      	ldr	r2, [pc, #196]	; (80013cc <MX_GPIO_Init+0x110>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_GPIO_Init+0x110>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_GPIO_Init+0x110>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <MX_GPIO_Init+0x110>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_GPIO_Init+0x110>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0x110>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <MX_GPIO_Init+0x110>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0x110>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <MX_GPIO_Init+0x114>)
 8001350:	f002 fd18 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <MX_GPIO_Init+0x118>)
 800135c:	f002 fd12 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0x11c>)
 8001368:	f002 fd0c 	bl	8003d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800136c:	2320      	movs	r3, #32
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_GPIO_Init+0x114>)
 8001384:	f002 fb52 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0x118>)
 80013a2:	f002 fb43 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_GPIO_Init+0x11c>)
 80013c0:	f002 fb34 	bl	8003a2c <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020800 	.word	0x40020800

080013dc <start_conn_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_conn_handler */
void start_conn_handler(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80013e4:	f004 fba6 	bl	8005b34 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  tcpclient_init();
 80013e8:	f000 fd08 	bl	8001dfc <tcpclient_init>
  for (;;) {
    osDelay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f005 fb1b 	bl	8006a28 <osDelay>
 80013f2:	e7fb      	b.n	80013ec <start_conn_handler+0x10>

080013f4 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af06      	add	r7, sp, #24
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_motor_control */
  DC_MOTOR_Init(DC_MOTOR_CfgParam[0]);
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <start_motor_control+0x50>)
 80013fe:	466c      	mov	r4, sp
 8001400:	f103 0210 	add.w	r2, r3, #16
 8001404:	ca07      	ldmia	r2, {r0, r1, r2}
 8001406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800140a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800140c:	f000 f8cc 	bl	80015a8 <DC_MOTOR_Init>
  /* Infinite loop */
  for(;;)
  {
    set_idx(motor_speed);
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <start_motor_control+0x54>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fc07 	bl	8001c28 <set_idx>
    DC_MOTOR_Start(DC_MOTOR_CfgParam[0], motor_dir, motor_speed);
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <start_motor_control+0x58>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <start_motor_control+0x54>)
 8001420:	8819      	ldrh	r1, [r3, #0]
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <start_motor_control+0x50>)
 8001424:	9104      	str	r1, [sp, #16]
 8001426:	9203      	str	r2, [sp, #12]
 8001428:	466c      	mov	r4, sp
 800142a:	f103 0210 	add.w	r2, r3, #16
 800142e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	f000 f999 	bl	800176c <DC_MOTOR_Start>
//    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    osDelay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f005 faf4 	bl	8006a28 <osDelay>
  {
 8001440:	e7e6      	b.n	8001410 <start_motor_control+0x1c>
 8001442:	bf00      	nop
 8001444:	0801dd9c 	.word	0x0801dd9c
 8001448:	200003ba 	.word	0x200003ba
 800144c:	200003b8 	.word	0x200003b8

08001450 <start_tcp_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_tcp_thread */
void start_tcp_thread(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_tcp_thread */
  struct netif *gnetif = get_static_netif();
 8001458:	f004 fb62 	bl	8005b20 <get_static_netif>
 800145c:	4603      	mov	r3, r0
 800145e:	60fb      	str	r3, [r7, #12]
  ethernetif_input(gnetif);
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f004 ff09 	bl	8006278 <ethernetif_input>
  sys_check_timeouts();
 8001466:	f013 fcb9 	bl	8014ddc <sys_check_timeouts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f005 fadc 	bl	8006a28 <osDelay>
 8001470:	e7fb      	b.n	800146a <start_tcp_thread+0x1a>
	...

08001474 <start_control_systems>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_control_systems */
void start_control_systems(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_control_systems */
  float *linear_x_ptr = get_linear_x();
 800147c:	f000 fbe4 	bl	8001c48 <get_linear_x>
 8001480:	4603      	mov	r3, r0
 8001482:	613b      	str	r3, [r7, #16]
  float *angular_z_ptr = get_angular_z();
 8001484:	f000 fbea 	bl	8001c5c <get_angular_z>
 8001488:	4603      	mov	r3, r0
 800148a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	float angular_z = *angular_z_ptr;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	617b      	str	r3, [r7, #20]
	if (angular_z > 0) {
 8001492:	edd7 7a05 	vldr	s15, [r7, #20]
 8001496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd03      	ble.n	80014a8 <start_control_systems+0x34>
		motor_dir = DIR_ACW;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <start_control_systems+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e008      	b.n	80014ba <start_control_systems+0x46>
	} else {
		motor_dir = DIR_CW;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <start_control_systems+0x98>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
		angular_z *= -1;
 80014ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b2:	eef1 7a67 	vneg.f32	s15, s15
 80014b6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (angular_z >= 1){
 80014ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80014be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	db02      	blt.n	80014d2 <start_control_systems+0x5e>
		angular_z = 1;
 80014cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80014d0:	617b      	str	r3, [r7, #20]
	}
	motor_speed = 65535*angular_z;
 80014d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001510 <start_control_systems+0x9c>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e2:	ee17 3a90 	vmov	r3, s15
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <start_control_systems+0xa0>)
 80014ea:	801a      	strh	r2, [r3, #0]
    int m = (*linear_x_ptr) * 100;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001518 <start_control_systems+0xa4>
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fe:	ee17 3a90 	vmov	r3, s15
 8001502:	60bb      	str	r3, [r7, #8]

    osDelay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f005 fa8f 	bl	8006a28 <osDelay>
  {
 800150a:	e7bf      	b.n	800148c <start_control_systems+0x18>
 800150c:	200003b8 	.word	0x200003b8
 8001510:	477fff00 	.word	0x477fff00
 8001514:	200003ba 	.word	0x200003ba
 8001518:	42c80000 	.word	0x42c80000

0800151c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800152e:	f000 ff53 	bl	80023d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001532:	2301      	movs	r3, #1
 8001534:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001536:	2300      	movs	r3, #0
 8001538:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MPU_Config+0x58>)
 800153c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800153e:	230e      	movs	r3, #14
 8001540:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001542:	2300      	movs	r3, #0
 8001544:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001546:	2301      	movs	r3, #1
 8001548:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800154a:	2303      	movs	r3, #3
 800154c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800154e:	2301      	movs	r3, #1
 8001550:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800155e:	463b      	mov	r3, r7
 8001560:	4618      	mov	r0, r3
 8001562:	f000 ff71 	bl	8002448 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001566:	2004      	movs	r0, #4
 8001568:	f000 ff4e 	bl	8002408 <HAL_MPU_Enable>

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20010000 	.word	0x20010000

08001578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800158a:	f000 fdff 	bl	800218c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>
	...

080015a8 <DC_MOTOR_Init>:
#include "mdds30.h"
#include "DC_MOTOR_cfg.h"
#include "main.h"

void DC_MOTOR_Init(DC_MOTOR_CfgType au8_MOTOR_Instance)
{
 80015a8:	b084      	sub	sp, #16
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b0aa      	sub	sp, #168	; 0xa8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	f107 0cb0 	add.w	ip, r7, #176	; 0xb0
 80015b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]
	TIM_HandleTypeDef htim;
	uint32_t PSC_Value = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	uint32_t ARR_Value = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	uint8_t i = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	/*------------Configure Direction GPIO Pin---------------*/
//	if(DC_MOTOR_CfgParam[au8_MOTOR_Instance].IN_GPIO == GPIOA){
	if(au8_MOTOR_Instance.IN_GPIO == GPIOA){
 8001608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <DC_MOTOR_Init+0x1b8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10b      	bne.n	800162a <DC_MOTOR_Init+0x82>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b54      	ldr	r3, [pc, #336]	; (8001764 <DC_MOTOR_Init+0x1bc>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a53      	ldr	r2, [pc, #332]	; (8001764 <DC_MOTOR_Init+0x1bc>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b51      	ldr	r3, [pc, #324]	; (8001764 <DC_MOTOR_Init+0x1bc>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
	}
	GPIO_InitStruct.Pin = au8_MOTOR_Instance.IN_PIN;
 800162a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800162e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	HAL_GPIO_Init(au8_MOTOR_Instance.IN_GPIO, &GPIO_InitStruct);
 800163e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001642:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f002 f9ef 	bl	8003a2c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN,0);
 800164e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001652:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8001656:	2200      	movs	r2, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fb93 	bl	8003d84 <HAL_GPIO_WritePin>

	//Calculate PSC & ARR
	ARR_Value = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 8001664:	2300      	movs	r3, #0
 8001666:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800166a:	e009      	b.n	8001680 <DC_MOTOR_Init+0xd8>
		ARR_Value *=2;
 800166c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	for(i=0;i<au8_MOTOR_Instance.PWM_RES_BITS;i++){
 8001676:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800167a:	3301      	adds	r3, #1
 800167c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001680:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8001684:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001688:	429a      	cmp	r2, r3
 800168a:	d3ef      	bcc.n	800166c <DC_MOTOR_Init+0xc4>
	}
	PSC_Value =(uint32_t)((au8_MOTOR_Instance.TIM_CLK_MHz*1000000) / (ARR_Value*au8_MOTOR_Instance.PWM_FREQ_Hz));
 800168c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001690:	461a      	mov	r2, r3
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <DC_MOTOR_Init+0x1c0>)
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4619      	mov	r1, r3
 800169a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800169e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	PSC_Value--;
 80016ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	ARR_Value -= 2;
 80016b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016bc:	3b02      	subs	r3, #2
 80016be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	//Configure the DC Motor PWM Timer Channel

	htim.Instance = au8_MOTOR_Instance.TIM_Instance;
 80016c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c6:	607b      	str	r3, [r7, #4]
	htim.Init.Prescaler = PSC_Value;
 80016c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016cc:	60bb      	str	r3, [r7, #8]
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
	htim.Init.Period = ARR_Value;
 80016d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016d6:	613b      	str	r3, [r7, #16]
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	61fb      	str	r3, [r7, #28]
	HAL_TIM_Base_Init(&htim);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f860 	bl	80047a8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ec:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 80016ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fcb6 	bl	8005068 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 f92c 	bl	800495c <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	66fb      	str	r3, [r7, #108]	; 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 800170c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f004 f957 	bl	80059c8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171a:	2360      	movs	r3, #96	; 0x60
 800171c:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.Pulse = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, au8_MOTOR_Instance.PWM_TIM_CH);
 800172a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fb83 	bl	8004e40 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f88d 	bl	800185c <HAL_TIM_MspPostInit>

	//Start PWM
	HAL_TIM_PWM_Start(&htim, au8_MOTOR_Instance.PWM_TIM_CH);
 8001742:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f003 f95e 	bl	8004a0c <HAL_TIM_PWM_Start>
}
 8001750:	bf00      	nop
 8001752:	37a8      	adds	r7, #168	; 0xa8
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800175a:	b004      	add	sp, #16
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40020000 	.word	0x40020000
 8001764:	40023800 	.word	0x40023800
 8001768:	000f4240 	.word	0x000f4240

0800176c <DC_MOTOR_Start>:
void DC_MOTOR_Start(DC_MOTOR_CfgType au8_MOTOR_Instance,uint8_t au8_DIR,uint16_t au16_SPEED){
 800176c:	b084      	sub	sp, #16
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
 8001772:	f107 0c08 	add.w	ip, r7, #8
 8001776:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Write to Direction PIN

	if(au8_DIR == DIR_CW){
 800177a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800177e:	2b01      	cmp	r3, #1
 8001780:	d106      	bne.n	8001790 <DC_MOTOR_Start+0x24>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 1);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	89b9      	ldrh	r1, [r7, #12]
 8001786:	2201      	movs	r2, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fafb 	bl	8003d84 <HAL_GPIO_WritePin>
 800178e:	e009      	b.n	80017a4 <DC_MOTOR_Start+0x38>

	}
	else if(au8_DIR == DIR_ACW){
 8001790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <DC_MOTOR_Start+0x38>
		HAL_GPIO_WritePin(au8_MOTOR_Instance.IN_GPIO, au8_MOTOR_Instance.IN_PIN, 0);
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	89b9      	ldrh	r1, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 faf0 	bl	8003d84 <HAL_GPIO_WritePin>
	}

	//Write Speed -> Duty Cycle Register
	if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_1){
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <DC_MOTOR_Start+0x46>
		au8_MOTOR_Instance.TIM_Instance->CCR1 = au16_SPEED;
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
	}
}
 80017b0:	e005      	b.n	80017be <DC_MOTOR_Start+0x52>
	else if(au8_MOTOR_Instance.PWM_TIM_CH == TIM_CHANNEL_2){
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d102      	bne.n	80017be <DC_MOTOR_Start+0x52>
		au8_MOTOR_Instance.TIM_Instance->CCR2 = au16_SPEED;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017c6:	b004      	add	sp, #16
 80017c8:	4770      	bx	lr
	...

080017cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	210f      	movs	r1, #15
 8001806:	f06f 0001 	mvn.w	r0, #1
 800180a:	f000 fdbb 	bl	8002384 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_TIM_PWM_MspInit+0x38>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_TIM_PWM_MspInit+0x3c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40000400 	.word	0x40000400
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_TIM_MspPostInit+0x64>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d11b      	bne.n	80018b6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_TIM_MspPostInit+0x68>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_TIM_MspPostInit+0x68>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_TIM_MspPostInit+0x68>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_TIM_MspPostInit+0x6c>)
 80018b2:	f002 f8bb 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_InitTick+0xd0>)
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	4a2e      	ldr	r2, [pc, #184]	; (800199c <HAL_InitTick+0xd0>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6453      	str	r3, [r2, #68]	; 0x44
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_InitTick+0xd0>)
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f4:	f107 020c 	add.w	r2, r7, #12
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ff20 	bl	8004744 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001904:	f002 ff0a 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8001908:	4603      	mov	r3, r0
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_InitTick+0xd4>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3b01      	subs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_InitTick+0xd8>)
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_InitTick+0xdc>)
 8001920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_InitTick+0xd8>)
 8001924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001928:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_InitTick+0xd8>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_InitTick+0xd8>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_InitTick+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_InitTick+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <HAL_InitTick+0xd8>)
 8001944:	f002 ff30 	bl	80047a8 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11b      	bne.n	800198e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001956:	4813      	ldr	r0, [pc, #76]	; (80019a4 <HAL_InitTick+0xd8>)
 8001958:	f002 ff88 	bl	800486c <HAL_TIM_Base_Start_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d111      	bne.n	800198e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800196a:	2019      	movs	r0, #25
 800196c:	f000 fd26 	bl	80023bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	d808      	bhi.n	8001988 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001976:	2200      	movs	r2, #0
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	2019      	movs	r0, #25
 800197c:	f000 fd02 	bl	8002384 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0xe0>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e002      	b.n	800198e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800198e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001992:	4618      	mov	r0, r3
 8001994:	3730      	adds	r7, #48	; 0x30
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	200003bc 	.word	0x200003bc
 80019a8:	40010000 	.word	0x40010000
 80019ac:	20000004 	.word	0x20000004

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019e2:	f003 f90d 	bl	8004c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200003bc 	.word	0x200003bc

080019f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <ETH_IRQHandler+0x10>)
 80019f6:	f001 f945 	bl	8002c84 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20004fec 	.word	0x20004fec

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_kill>:

int _kill(int pid, int sig)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <_kill+0x20>)
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
	return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	20011d00 	.word	0x20011d00

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe5 	bl	8001a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
	}

return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
	}
	return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d205      	bcs.n	8001b64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <_sbrk+0x6c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20050000 	.word	0x20050000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	20000408 	.word	0x20000408
 8001b90:	20011d08 	.word	0x20011d08
 8001b94:	20011d00 	.word	0x20011d00

08001b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <SystemInit+0x24>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <SystemInit+0x24>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  RCC->CFGR = 0;
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SystemInit+0x28>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <fun>:
int indx = 0;
float linear_x=0, angular_z=0;


float *fun(char string[])
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    static float res[10];
    char *token;
    int count=0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
    token = strtok(string,",");
 8001bd0:	4913      	ldr	r1, [pc, #76]	; (8001c20 <fun+0x5c>)
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f016 ff66 	bl	8018aa4 <strtok>
 8001bd8:	6178      	str	r0, [r7, #20]
    float x;
    // res[0] = atof(token);
    while (token)
 8001bda:	e018      	b.n	8001c0e <fun+0x4a>
    {
        x = atof(token);
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f015 fde1 	bl	80177a4 <atof>
 8001be2:	ec53 2b10 	vmov	r2, r3, d0
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ffdf 	bl	8000bac <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]
        res[count] = x;
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <fun+0x60>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]
        // printf("%f ",x);
        count+=1;
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
        token = strtok(NULL,",");
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <fun+0x5c>)
 8001c06:	2000      	movs	r0, #0
 8001c08:	f016 ff4c 	bl	8018aa4 <strtok>
 8001c0c:	6178      	str	r0, [r7, #20]
    while (token)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e3      	bne.n	8001bdc <fun+0x18>
    }
    return res;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <fun+0x60>)
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0801abec 	.word	0x0801abec
 8001c24:	200005bc 	.word	0x200005bc

08001c28 <set_idx>:

// Function to send the data to the server
void tcpsend (char *data);

void set_idx(int ix) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	indx = ix;
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <set_idx+0x1c>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	200005ac 	.word	0x200005ac

08001c48 <get_linear_x>:

float *get_linear_x() {
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    return &linear_x;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <get_linear_x+0x10>)
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	200005b0 	.word	0x200005b0

08001c5c <get_angular_z>:

float *get_angular_z() {
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	return &angular_z;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <get_angular_z+0x10>)
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	200005b4 	.word	0x200005b4

08001c70 <tcpinit_thread>:

// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2010      	movs	r0, #16
 8001c7e:	f008 fdeb 	bl	800a858 <netconn_new_with_proto_and_callback>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a39      	ldr	r2, [pc, #228]	; (8001d6c <tcpinit_thread+0xfc>)
 8001c86:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <tcpinit_thread+0xfc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d068      	beq.n	8001d62 <tcpinit_thread+0xf2>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <tcpinit_thread+0xfc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	220a      	movs	r2, #10
 8001c96:	4936      	ldr	r1, [pc, #216]	; (8001d70 <tcpinit_thread+0x100>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f008 fe97 	bl	800a9cc <netconn_bind>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d156      	bne.n	8001d58 <tcpinit_thread+0xe8>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 10, 42, 0, 1);
 8001caa:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <tcpinit_thread+0x104>)
 8001cac:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <tcpinit_thread+0x108>)
 8001cae:	601a      	str	r2, [r3, #0]
			dest_port = 3000;  // server port
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <tcpinit_thread+0x10c>)
 8001cb2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cb6:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <tcpinit_thread+0xfc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <tcpinit_thread+0x10c>)
 8001cbe:	8812      	ldrh	r2, [r2, #0]
 8001cc0:	492c      	ldr	r1, [pc, #176]	; (8001d74 <tcpinit_thread+0x104>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f008 feba 	bl	800aa3c <netconn_connect>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 8001ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d136      	bne.n	8001d42 <tcpinit_thread+0xd2>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem);
 8001cd4:	482a      	ldr	r0, [pc, #168]	; (8001d80 <tcpinit_thread+0x110>)
 8001cd6:	f015 fcb1 	bl	801763c <sys_sem_signal>
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <tcpinit_thread+0xfc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4929      	ldr	r1, [pc, #164]	; (8001d84 <tcpinit_thread+0x114>)
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f009 f847 	bl	800ad74 <netconn_recv>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f6      	bne.n	8001cda <tcpinit_thread+0x6a>

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <tcpinit_thread+0x114>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <tcpinit_thread+0x114>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	895b      	ldrh	r3, [r3, #10]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4822      	ldr	r0, [pc, #136]	; (8001d88 <tcpinit_thread+0x118>)
 8001d00:	f016 f88d 	bl	8017e1e <strncpy>

							float *linx = fun(msgc);
 8001d04:	4820      	ldr	r0, [pc, #128]	; (8001d88 <tcpinit_thread+0x118>)
 8001d06:	f7ff ff5d 	bl	8001bc4 <fun>
 8001d0a:	60b8      	str	r0, [r7, #8]
							linear_x = *(linx);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <tcpinit_thread+0x11c>)
 8001d12:	6013      	str	r3, [r2, #0]
							angular_z = *(linx+1);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <tcpinit_thread+0x120>)
 8001d1a:	6013      	str	r3, [r2, #0]
//							sys_arch_sem_wait(&tcpsem, 5);
//
//							// send the data to the TCP Server
//							tcpsend (smsgc);

							memset (msgc, '\0', 100);  // clear the buffer
 8001d1c:	2264      	movs	r2, #100	; 0x64
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4819      	ldr	r0, [pc, #100]	; (8001d88 <tcpinit_thread+0x118>)
 8001d22:	f015 fe98 	bl	8017a56 <memset>
						}
						while (netbuf_next(buf) > 0);
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <tcpinit_thread+0x114>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00a fcd0 	bl	800c6d0 <netbuf_next>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	dcda      	bgt.n	8001cec <tcpinit_thread+0x7c>

						netbuf_delete(buf);
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <tcpinit_thread+0x114>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00a fca8 	bl	800c690 <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 8001d40:	e7cb      	b.n	8001cda <tcpinit_thread+0x6a>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <tcpinit_thread+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 f982 	bl	800b050 <netconn_close>
				netconn_delete(conn);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <tcpinit_thread+0xfc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f008 fe1f 	bl	800a994 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001d56:	e004      	b.n	8001d62 <tcpinit_thread+0xf2>
			netconn_delete(conn);
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <tcpinit_thread+0xfc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 fe19 	bl	800a994 <netconn_delete>
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000040c 	.word	0x2000040c
 8001d70:	0801df70 	.word	0x0801df70
 8001d74:	20000414 	.word	0x20000414
 8001d78:	01002a0a 	.word	0x01002a0a
 8001d7c:	20000418 	.word	0x20000418
 8001d80:	200005b8 	.word	0x200005b8
 8001d84:	20000410 	.word	0x20000410
 8001d88:	2000041c 	.word	0x2000041c
 8001d8c:	200005b0 	.word	0x200005b0
 8001d90:	200005b4 	.word	0x200005b4

08001d94 <tcpsend>:

void tcpsend (char *data)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <tcpsend+0x30>)
 8001d9e:	681c      	ldr	r4, [r3, #0]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7fe fa35 	bl	8000210 <strlen>
 8001da6:	4602      	mov	r2, r0
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2301      	movs	r3, #1
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4620      	mov	r0, r4
 8001db2:	f009 f84b 	bl	800ae4c <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem);
 8001db6:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <tcpsend+0x34>)
 8001db8:	f015 fc40 	bl	801763c <sys_sem_signal>
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	2000040c 	.word	0x2000040c
 8001dc8:	200005b8 	.word	0x200005b8

08001dcc <tcpsend_thread>:


static void tcpsend_thread (void *arg)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		sprintf (smsgc, "index value = %d\n", indx);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <tcpsend_thread+0x24>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4906      	ldr	r1, [pc, #24]	; (8001df4 <tcpsend_thread+0x28>)
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <tcpsend_thread+0x2c>)
 8001dde:	f015 ffa7 	bl	8017d30 <siprintf>
		// semaphore must be taken before accessing the tcpsend function
//		sys_arch_sem_wait(&tcpsem, 5);
		// send the data to the server
		tcpsend(smsgc);
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <tcpsend_thread+0x2c>)
 8001de4:	f7ff ffd6 	bl	8001d94 <tcpsend>
		osDelay(1);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f004 fe1d 	bl	8006a28 <osDelay>
		sprintf (smsgc, "index value = %d\n", indx);
 8001dee:	e7f1      	b.n	8001dd4 <tcpsend_thread+0x8>
 8001df0:	200005ac 	.word	0x200005ac
 8001df4:	0801abf0 	.word	0x0801abf0
 8001df8:	200004e4 	.word	0x200004e4

08001dfc <tcpclient_init>:




void tcpclient_init (void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 0);  // the semaphore would prevent simultaneous access to tcpsend
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <tcpclient_init+0x3c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f015 fbc1 	bl	8017590 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001e0e:	2318      	movs	r3, #24
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e16:	2200      	movs	r2, #0
 8001e18:	4908      	ldr	r1, [pc, #32]	; (8001e3c <tcpclient_init+0x40>)
 8001e1a:	4809      	ldr	r0, [pc, #36]	; (8001e40 <tcpclient_init+0x44>)
 8001e1c:	f015 fc84 	bl	8017728 <sys_thread_new>
	sys_thread_new("tcpsend_thread", tcpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001e20:	2318      	movs	r3, #24
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4906      	ldr	r1, [pc, #24]	; (8001e44 <tcpclient_init+0x48>)
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <tcpclient_init+0x4c>)
 8001e2e:	f015 fc7b 	bl	8017728 <sys_thread_new>
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200005b8 	.word	0x200005b8
 8001e3c:	08001c71 	.word	0x08001c71
 8001e40:	0801ac04 	.word	0x0801ac04
 8001e44:	08001dcd 	.word	0x08001dcd
 8001e48:	0801ac14 	.word	0x0801ac14

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	; (8001e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e76:	f7ff fe8f 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f015 fd8d 	bl	8017998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f907 	bl	8001090 <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001e90:	0801e478 	.word	0x0801e478
  ldr r2, =_sbss
 8001e94:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001e98:	20011d04 	.word	0x20011d04

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>

08001e9e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <LAN8742_RegisterBusIO+0x28>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <LAN8742_RegisterBusIO+0x28>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <LAN8742_RegisterBusIO+0x28>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	e014      	b.n	8001ef6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d17c      	bne.n	800201c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e01c      	b.n	8001f76 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f107 0208 	add.w	r2, r7, #8
 8001f44:	2112      	movs	r1, #18
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	4798      	blx	r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da03      	bge.n	8001f58 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001f50:	f06f 0304 	mvn.w	r3, #4
 8001f54:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001f56:	e00b      	b.n	8001f70 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d105      	bne.n	8001f70 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
         break;
 8001f6e:	e005      	b.n	8001f7c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b1f      	cmp	r3, #31
 8001f7a:	d9df      	bls.n	8001f3c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b1f      	cmp	r3, #31
 8001f82:	d902      	bls.n	8001f8a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001f84:	f06f 0302 	mvn.w	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d145      	bne.n	800201c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6810      	ldr	r0, [r2, #0]
 8001f98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4798      	blx	r3
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db37      	blt.n	8002016 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6810      	ldr	r0, [r2, #0]
 8001fae:	f107 0208 	add.w	r2, r7, #8
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4798      	blx	r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db28      	blt.n	800200e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4798      	blx	r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001fc6:	e01c      	b.n	8002002 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4798      	blx	r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fda:	d80e      	bhi.n	8001ffa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6810      	ldr	r0, [r2, #0]
 8001fe4:	f107 0208 	add.w	r2, r7, #8
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4798      	blx	r3
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da07      	bge.n	8002002 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001ff2:	f06f 0304 	mvn.w	r3, #4
 8001ff6:	613b      	str	r3, [r7, #16]
                 break;
 8001ff8:	e010      	b.n	800201c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001ffa:	f06f 0301 	mvn.w	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
               break;
 8002000:	e00c      	b.n	800201c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1dd      	bne.n	8001fc8 <LAN8742_Init+0xc6>
 800200c:	e006      	b.n	800201c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800200e:	f06f 0304 	mvn.w	r3, #4
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	e002      	b.n	800201c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002016:	f06f 0303 	mvn.w	r3, #3
 800201a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4798      	blx	r3
 8002028:	4603      	mov	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800202c:	bf00      	nop
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4798      	blx	r3
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002040:	d9f5      	bls.n	800202e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002048:	693b      	ldr	r3, [r7, #16]
 }
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6810      	ldr	r0, [r2, #0]
 8002066:	f107 020c 	add.w	r2, r7, #12
 800206a:	2101      	movs	r1, #1
 800206c:	4798      	blx	r3
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	da02      	bge.n	800207a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002074:	f06f 0304 	mvn.w	r3, #4
 8002078:	e06e      	b.n	8002158 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6810      	ldr	r0, [r2, #0]
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	2101      	movs	r1, #1
 8002088:	4798      	blx	r3
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	da02      	bge.n	8002096 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002090:	f06f 0304 	mvn.w	r3, #4
 8002094:	e060      	b.n	8002158 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80020a0:	2301      	movs	r3, #1
 80020a2:	e059      	b.n	8002158 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6810      	ldr	r0, [r2, #0]
 80020ac:	f107 020c 	add.w	r2, r7, #12
 80020b0:	2100      	movs	r1, #0
 80020b2:	4798      	blx	r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da02      	bge.n	80020c0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020ba:	f06f 0304 	mvn.w	r3, #4
 80020be:	e04b      	b.n	8002158 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11b      	bne.n	8002102 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <LAN8742_GetLinkState+0x90>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80020de:	2302      	movs	r3, #2
 80020e0:	e03a      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e033      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020fa:	2304      	movs	r3, #4
 80020fc:	e02c      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020fe:	2305      	movs	r3, #5
 8002100:	e02a      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6810      	ldr	r0, [r2, #0]
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	211f      	movs	r1, #31
 8002110:	4798      	blx	r3
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	da02      	bge.n	800211e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002118:	f06f 0304 	mvn.w	r3, #4
 800211c:	e01c      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002128:	2306      	movs	r3, #6
 800212a:	e015      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 031c 	and.w	r3, r3, #28
 8002132:	2b18      	cmp	r3, #24
 8002134:	d101      	bne.n	800213a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002136:	2302      	movs	r3, #2
 8002138:	e00e      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 031c 	and.w	r3, r3, #28
 8002140:	2b08      	cmp	r3, #8
 8002142:	d101      	bne.n	8002148 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002144:	2303      	movs	r3, #3
 8002146:	e007      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 031c 	and.w	r3, r3, #28
 800214e:	2b14      	cmp	r3, #20
 8002150:	d101      	bne.n	8002156 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002152:	2304      	movs	r3, #4
 8002154:	e000      	b.n	8002158 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002156:	2305      	movs	r3, #5
    }				
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_Init+0x28>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_Init+0x28>)
 800216a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002170:	2003      	movs	r0, #3
 8002172:	f000 f8fc 	bl	800236e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002176:	200f      	movs	r0, #15
 8002178:	f7ff fba8 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217c:	f7ff fb26 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00

0800218c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x20>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x24>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4413      	add	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_IncTick+0x24>)
 800219e:	6013      	str	r3, [r2, #0]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000008 	.word	0x20000008
 80021b0:	200005e4 	.word	0x200005e4

080021b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTick+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	200005e4 	.word	0x200005e4

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff ffee 	bl	80021b4 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_Delay+0x44>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000008 	.word	0x20000008

08002214 <__NVIC_SetPriorityGrouping>:
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	4313      	orrs	r3, r2
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x40>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00
 8002258:	05fa0000 	.word	0x05fa0000

0800225c <__NVIC_GetPriorityGrouping>:
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	; (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff4c 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002396:	f7ff ff61 	bl	800225c <__NVIC_GetPriorityGrouping>
 800239a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7ff ffb1 	bl	8002308 <NVIC_EncodePriority>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff80 	bl	80022b4 <__NVIC_SetPriority>
}
 80023b4:	bf00      	nop
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff54 	bl	8002278 <__NVIC_EnableIRQ>
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023dc:	f3bf 8f5f 	dmb	sy
}
 80023e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_MPU_Disable+0x28>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_MPU_Disable+0x28>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_MPU_Disable+0x2c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	e000ed90 	.word	0xe000ed90

08002408 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <HAL_MPU_Enable+0x38>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_MPU_Enable+0x3c>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_MPU_Enable+0x3c>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002426:	f3bf 8f4f 	dsb	sy
}
 800242a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800242c:	f3bf 8f6f 	isb	sy
}
 8002430:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed90 	.word	0xe000ed90
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	785a      	ldrb	r2, [r3, #1]
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_MPU_ConfigRegion+0x84>)
 8002456:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d029      	beq.n	80024b4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002460:	4a1a      	ldr	r2, [pc, #104]	; (80024cc <HAL_MPU_ConfigRegion+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
 800246c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7adb      	ldrb	r3, [r3, #11]
 8002472:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002474:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7a9b      	ldrb	r3, [r3, #10]
 800247a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800247c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7b5b      	ldrb	r3, [r3, #13]
 8002482:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002484:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7b9b      	ldrb	r3, [r3, #14]
 800248a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800248c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7bdb      	ldrb	r3, [r3, #15]
 8002492:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002494:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7a5b      	ldrb	r3, [r3, #9]
 800249a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800249c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7a1b      	ldrb	r3, [r3, #8]
 80024a2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024a4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024ae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024b0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80024b2:	e005      	b.n	80024c0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_MPU_ConfigRegion+0x84>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <HAL_MPU_ConfigRegion+0x84>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed90 	.word	0xe000ed90

080024d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06a      	b.n	80025b8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2223      	movs	r2, #35	; 0x23
 80024f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f003 ff3f 	bl	8006378 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b31      	ldr	r3, [pc, #196]	; (80025c0 <HAL_ETH_Init+0xf0>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <HAL_ETH_Init+0xf0>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_ETH_Init+0xf0>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_ETH_Init+0xf4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <HAL_ETH_Init+0xf4>)
 8002518:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800251c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_ETH_Init+0xf4>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4927      	ldr	r1, [pc, #156]	; (80025c4 <HAL_ETH_Init+0xf4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_ETH_Init+0xf4>)
 800252e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002546:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002548:	f7ff fe34 	bl	80021b4 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800254e:	e011      	b.n	8002574 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002550:	f7ff fe30 	bl	80021b4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800255e:	d909      	bls.n	8002574 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2204      	movs	r2, #4
 8002564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	22e0      	movs	r2, #224	; 0xe0
 800256c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e021      	b.n	80025b8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e4      	bne.n	8002550 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 ffac 	bl	80034e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f001 f853 	bl	8003638 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 f8a9 	bl	80036ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	461a      	mov	r2, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 f811 	bl	80035c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2210      	movs	r2, #16
 80025b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40013800 	.word	0x40013800

080025c8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d150      	bne.n	800267c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2223      	movs	r2, #35	; 0x23
 80025de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa7b 	bl	8002ae4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0208 	orr.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff fde0 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0204 	orr.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff fdcd 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fdf3 	bl	8003226 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002656:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800266e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2223      	movs	r2, #35	; 0x23
 8002674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
  }
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002696:	2b10      	cmp	r3, #16
 8002698:	d17b      	bne.n	8002792 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2223      	movs	r2, #35	; 0x23
 800269e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_ETH_Start_IT+0x114>)
 80026c6:	430b      	orrs	r3, r1
 80026c8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80026dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2204      	movs	r2, #4
 80026e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9fc 	bl	8002ae4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0208 	orr.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff fd61 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800272a:	2001      	movs	r0, #1
 800272c:	f7ff fd4e 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fd74 	bl	8003226 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002754:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800276c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	69d9      	ldr	r1, [r3, #28]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_ETH_Start_IT+0x118>)
 800277e:	430b      	orrs	r3, r1
 8002780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002784:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2223      	movs	r2, #35	; 0x23
 800278a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	00020060 	.word	0x00020060
 80027a0:	0001a0c1 	.word	0x0001a0c1

080027a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b2:	2b23      	cmp	r3, #35	; 0x23
 80027b4:	d16e      	bne.n	8002894 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2223      	movs	r2, #35	; 0x23
 80027ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c6:	69d9      	ldr	r1, [r3, #28]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_ETH_Stop_IT+0xfc>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027d4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ec:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	f023 0302 	bic.w	r3, r3, #2
 8002800:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002804:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0204 	bic.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800281e:	2001      	movs	r0, #1
 8002820:	f7ff fcd4 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fcfa 	bl	8003226 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0208 	bic.w	r2, r2, #8
 8002840:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff fcbe 	bl	80021cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e00e      	b.n	800287c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	3212      	adds	r2, #18
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d9ed      	bls.n	800285e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2210      	movs	r2, #16
 800288c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	fffe5f3e 	.word	0xfffe5f3e

080028a4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e045      	b.n	8002954 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ce:	2b23      	cmp	r3, #35	; 0x23
 80028d0:	d13f      	bne.n	8002952 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80028da:	2201      	movs	r2, #1
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 ff70 	bl	80037c4 <ETH_Prepare_Tx_Descriptors>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e02a      	b.n	8002954 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80028fe:	f3bf 8f4f 	dsb	sy
}
 8002902:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	2b03      	cmp	r3, #3
 8002914:	d904      	bls.n	8002920 <HAL_ETH_Transmit_IT+0x7c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	1f1a      	subs	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293a:	461a      	mov	r2, r3
 800293c:	2304      	movs	r3, #4
 800293e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002948:	461a      	mov	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0a8      	b.n	8002ada <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298e:	2b23      	cmp	r3, #35	; 0x23
 8002990:	d001      	beq.n	8002996 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0a1      	b.n	8002ada <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	3212      	adds	r2, #18
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ac:	f1c3 0304 	rsb	r3, r3, #4
 80029b0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80029b2:	e06a      	b.n	8002a8a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <HAL_ETH_ReadData+0x88>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d040      	beq.n	8002a66 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00c      	beq.n	8002a28 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a18:	3b04      	subs	r3, #4
 8002a1a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002a40:	461a      	mov	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f003 fe63 	bl	8006710 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2200      	movs	r2, #0
 8002a64:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d902      	bls.n	8002a78 <HAL_ETH_ReadData+0x11c>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b04      	subs	r3, #4
 8002a76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	3212      	adds	r2, #18
 8002a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db06      	blt.n	8002aa0 <HAL_ETH_ReadData+0x144>
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d202      	bcs.n	8002aa0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d089      	beq.n	80029b4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f815 	bl	8002ae4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002af0:	2301      	movs	r3, #1
 8002af2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	3212      	adds	r2, #18
 8002b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002b0c:	e040      	b.n	8002b90 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d112      	bne.n	8002b3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fdc8 	bl	80066b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	74fb      	strb	r3, [r7, #19]
 8002b2a:	e007      	b.n	8002b3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d026      	beq.n	8002b90 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <ETH_UpdateDescriptor+0xe4>)
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	e003      	b.n	8002b5a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b5a:	f3bf 8f5f 	dmb	sy
}
 8002b5e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d902      	bls.n	8002b7e <ETH_UpdateDescriptor+0x9a>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	3212      	adds	r2, #18
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <ETH_UpdateDescriptor+0xb8>
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1b8      	bne.n	8002b0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d00c      	beq.n	8002bc0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	800045f8 	.word	0x800045f8

08002bcc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3318      	adds	r3, #24
 8002bd8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002bea:	e03f      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d028      	beq.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db1b      	blt.n	8002c68 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	3304      	adds	r3, #4
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fda9 	bl	8006794 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	3304      	adds	r3, #4
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c66:	e001      	b.n	8002c6c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_ETH_ReleaseTxPacket+0xac>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1b9      	bne.n	8002bec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d112      	bne.n	8002cc4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d109      	bne.n	8002cc4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_ETH_IRQHandler+0x178>)
 8002cbc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f003 f8bc 	bl	8005e3c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d113      	bne.n	8002cfe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10a      	bne.n	8002cfe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002cf6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f003 f8af 	bl	8005e5c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d10:	d14c      	bne.n	8002dac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d24:	d142      	bne.n	8002dac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f043 0208 	orr.w	r2, r3, #8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d48:	d11a      	bne.n	8002d80 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_ETH_IRQHandler+0x17c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002d70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d74:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	22e0      	movs	r2, #224	; 0xe0
 8002d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d7e:	e012      	b.n	8002da6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	f248 6380 	movw	r3, #34432	; 0x8680
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f248 6380 	movw	r3, #34432	; 0x8680
 8002da4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f003 f868 	bl	8005e7c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d10e      	bne.n	8002dd8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f81c 	bl	8002e08 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_ETH_IRQHandler+0x180>)
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_ETH_IRQHandler+0x180>)
 8002de6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002dea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f815 	bl	8002e1c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00010040 	.word	0x00010040
 8002e00:	007e2000 	.word	0x007e2000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f003 031c 	and.w	r3, r3, #28
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	02db      	lsls	r3, r3, #11
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002e80:	f7ff f998 	bl	80021b4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e86:	e00d      	b.n	8002ea4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002e88:	f7ff f994 	bl	80021b4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e96:	d301      	bcc.n	8002e9c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e010      	b.n	8002ebe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ec      	bne.n	8002e88 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 031c 	and.w	r3, r3, #28
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	02db      	lsls	r3, r3, #11
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	019b      	lsls	r3, r3, #6
 8002ef4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7ff f948 	bl	80021b4 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f26:	e00d      	b.n	8002f44 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002f28:	f7ff f944 	bl	80021b4 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d301      	bcc.n	8002f3c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e009      	b.n	8002f50 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ec      	bne.n	8002f28 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0d9      	b.n	8003120 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	0c1b      	lsrs	r3, r3, #16
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e00b      	b.n	8003158 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	2b10      	cmp	r3, #16
 8003148:	d105      	bne.n	8003156 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f88f 	bl	8003270 <ETH_SetMACConfig>

    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e000      	b.n	8003158 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
  }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 031c 	bic.w	r3, r3, #28
 8003176:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003178:	f001 fac4 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800317c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d908      	bls.n	8003198 <HAL_ETH_SetMDIOClockRange+0x38>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d804      	bhi.n	8003198 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e027      	b.n	80031e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d908      	bls.n	80031b2 <HAL_ETH_SetMDIOClockRange+0x52>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d204      	bcs.n	80031b2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f043 030c 	orr.w	r3, r3, #12
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e01a      	b.n	80031e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d303      	bcc.n	80031c2 <HAL_ETH_SetMDIOClockRange+0x62>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d911      	bls.n	80031e6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d908      	bls.n	80031dc <HAL_ETH_SetMDIOClockRange+0x7c>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d804      	bhi.n	80031dc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e005      	b.n	80031e8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f043 0310 	orr.w	r3, r3, #16
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e000      	b.n	80031e8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80031e6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	611a      	str	r2, [r3, #16]
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	01312cff 	.word	0x01312cff
 80031fc:	02160ebf 	.word	0x02160ebf
 8003200:	03938700 	.word	0x03938700
 8003204:	05f5e0ff 	.word	0x05f5e0ff
 8003208:	08f0d17f 	.word	0x08f0d17f

0800320c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003244:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003248:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003256:	2001      	movs	r0, #1
 8003258:	f7fe ffb8 	bl	80021cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003266:	6193      	str	r3, [r2, #24]
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4b51      	ldr	r3, [pc, #324]	; (80033cc <ETH_SetMACConfig+0x15c>)
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	7c1b      	ldrb	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <ETH_SetMACConfig+0x28>
 8003292:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003296:	e000      	b.n	800329a <ETH_SetMACConfig+0x2a>
 8003298:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	7c5b      	ldrb	r3, [r3, #17]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <ETH_SetMACConfig+0x38>
 80032a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032a6:	e000      	b.n	80032aa <ETH_SetMACConfig+0x3a>
 80032a8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	7fdb      	ldrb	r3, [r3, #31]
 80032b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80032b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	7f92      	ldrb	r2, [r2, #30]
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	d102      	bne.n	80032ce <ETH_SetMACConfig+0x5e>
 80032c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032cc:	e000      	b.n	80032d0 <ETH_SetMACConfig+0x60>
 80032ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80032d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	7f1b      	ldrb	r3, [r3, #28]
 80032d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	791b      	ldrb	r3, [r3, #4]
 80032e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80032e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80032ee:	2a00      	cmp	r2, #0
 80032f0:	d102      	bne.n	80032f8 <ETH_SetMACConfig+0x88>
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	e000      	b.n	80032fa <ETH_SetMACConfig+0x8a>
 80032f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80032fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7bdb      	ldrb	r3, [r3, #15]
 8003300:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003302:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003310:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003312:	4313      	orrs	r3, r2
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800332a:	2001      	movs	r0, #1
 800332c:	f7fe ff4e 	bl	80021cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003356:	2a00      	cmp	r2, #0
 8003358:	d101      	bne.n	800335e <ETH_SetMACConfig+0xee>
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	e000      	b.n	8003360 <ETH_SetMACConfig+0xf0>
 800335e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003360:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003366:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800336e:	2a01      	cmp	r2, #1
 8003370:	d101      	bne.n	8003376 <ETH_SetMACConfig+0x106>
 8003372:	2208      	movs	r2, #8
 8003374:	e000      	b.n	8003378 <ETH_SetMACConfig+0x108>
 8003376:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003378:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003380:	2a01      	cmp	r2, #1
 8003382:	d101      	bne.n	8003388 <ETH_SetMACConfig+0x118>
 8003384:	2204      	movs	r2, #4
 8003386:	e000      	b.n	800338a <ETH_SetMACConfig+0x11a>
 8003388:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800338a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003392:	2a01      	cmp	r2, #1
 8003394:	d101      	bne.n	800339a <ETH_SetMACConfig+0x12a>
 8003396:	2202      	movs	r2, #2
 8003398:	e000      	b.n	800339c <ETH_SetMACConfig+0x12c>
 800339a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800339c:	4313      	orrs	r3, r2
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f7fe ff09 	bl	80021cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	619a      	str	r2, [r3, #24]
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	ff20810f 	.word	0xff20810f

080033d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <ETH_SetDMAConfig+0x110>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	7b1b      	ldrb	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <ETH_SetDMAConfig+0x2c>
 80033f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033fa:	e000      	b.n	80033fe <ETH_SetDMAConfig+0x2e>
 80033fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	7b5b      	ldrb	r3, [r3, #13]
 8003402:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003404:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	7f52      	ldrb	r2, [r2, #29]
 800340a:	2a00      	cmp	r2, #0
 800340c:	d102      	bne.n	8003414 <ETH_SetDMAConfig+0x44>
 800340e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003412:	e000      	b.n	8003416 <ETH_SetDMAConfig+0x46>
 8003414:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003416:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7b9b      	ldrb	r3, [r3, #14]
 800341c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800341e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003424:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	7f1b      	ldrb	r3, [r3, #28]
 800342a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800342c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	7f9b      	ldrb	r3, [r3, #30]
 8003432:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003434:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800343a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003442:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003444:	4313      	orrs	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003466:	2001      	movs	r0, #1
 8003468:	f7fe feb0 	bl	80021cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	791b      	ldrb	r3, [r3, #4]
 800347e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003484:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800348a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003490:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003498:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800349a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80034b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fe fe81 	bl	80021cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	f8de3f23 	.word	0xf8de3f23

080034e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b0a6      	sub	sp, #152	; 0x98
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003514:	2300      	movs	r3, #0
 8003516:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003520:	2300      	movs	r3, #0
 8003522:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800352a:	2300      	movs	r3, #0
 800352c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800354c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003550:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fe86 	bl	8003270 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003564:	2301      	movs	r3, #1
 8003566:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003568:	2301      	movs	r3, #1
 800356a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003572:	2301      	movs	r3, #1
 8003574:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003586:	2300      	movs	r3, #0
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003590:	2301      	movs	r3, #1
 8003592:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003598:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800359a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800359e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ff08 	bl	80033d0 <ETH_SetDMAConfig>
}
 80035c0:	bf00      	nop
 80035c2:	3798      	adds	r7, #152	; 0x98
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3305      	adds	r3, #5
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	3204      	adds	r2, #4
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <ETH_MACAddressConfig+0x68>)
 80035ea:	4413      	add	r3, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3303      	adds	r3, #3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3302      	adds	r3, #2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3301      	adds	r3, #1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	4313      	orrs	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <ETH_MACAddressConfig+0x6c>)
 800361a:	4413      	add	r3, r2
 800361c:	461a      	mov	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40028040 	.word	0x40028040
 8003634:	40028044 	.word	0x40028044

08003638 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e03e      	b.n	80036c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	440b      	add	r3, r1
 8003656:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	3206      	adds	r2, #6
 8003678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d80c      	bhi.n	80036a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68d9      	ldr	r1, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	e004      	b.n	80036b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	461a      	mov	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d9bd      	bls.n	8003646 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036dc:	611a      	str	r2, [r3, #16]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e046      	b.n	8003786 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6919      	ldr	r1, [r3, #16]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003734:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800373c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	3212      	adds	r2, #18
 8003752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d80c      	bhi.n	8003776 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6919      	ldr	r1, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	60da      	str	r2, [r3, #12]
 8003774:	e004      	b.n	8003780 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	461a      	mov	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d9b5      	bls.n	80036f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b6:	60da      	str	r2, [r3, #12]
}
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b08d      	sub	sp, #52	; 0x34
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3318      	adds	r3, #24
 80037d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003806:	d007      	beq.n	8003818 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	3304      	adds	r3, #4
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	e0ff      	b.n	8003a1c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	3301      	adds	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003832:	4013      	ands	r3, r2
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	431a      	orrs	r2, r3
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800389e:	f3bf 8f5f 	dmb	sy
}
 80038a2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80038b0:	e082      	b.n	80039b8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e005      	b.n	80038de <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	3301      	adds	r3, #1
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d902      	bls.n	80038f0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	3b04      	subs	r3, #4
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003912:	d007      	beq.n	8003924 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	3304      	adds	r3, #4
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d029      	beq.n	8003978 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003930:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003932:	2300      	movs	r3, #0
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
 8003936:	e019      	b.n	800396c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003938:	f3bf 8f5f 	dmb	sy
}
 800393c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	3301      	adds	r3, #1
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b03      	cmp	r3, #3
 8003954:	d902      	bls.n	800395c <ETH_Prepare_Tx_Descriptors+0x198>
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	3b04      	subs	r3, #4
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003964:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	3301      	adds	r3, #1
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
 800396c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	429a      	cmp	r2, r3
 8003972:	d3e1      	bcc.n	8003938 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8003974:	2302      	movs	r3, #2
 8003976:	e051      	b.n	8003a1c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	3301      	adds	r3, #1
 800397c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <ETH_Prepare_Tx_Descriptors+0x264>)
 8003994:	4013      	ands	r3, r2
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	6852      	ldr	r2, [r2, #4]
 800399a:	431a      	orrs	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80039a6:	f3bf 8f5f 	dmb	sy
}
 80039aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f47f af78 	bne.w	80038b2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e005      	b.n	80039e2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f2:	6979      	ldr	r1, [r7, #20]
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	3304      	adds	r3, #4
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a02:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a04:	b672      	cpsid	i
}
 8003a06:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003a16:	b662      	cpsie	i
}
 8003a18:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3734      	adds	r7, #52	; 0x34
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	ffffe000 	.word	0xffffe000

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e175      	b.n	8003d38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f040 8164 	bne.w	8003d32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d005      	beq.n	8003a82 <HAL_GPIO_Init+0x56>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d130      	bne.n	8003ae4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab8:	2201      	movs	r2, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 0201 	and.w	r2, r3, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d017      	beq.n	8003b20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d123      	bne.n	8003b74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	69b9      	ldr	r1, [r7, #24]
 8003b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0203 	and.w	r2, r3, #3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80be 	beq.w	8003d32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bce:	4a61      	ldr	r2, [pc, #388]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_GPIO_Init+0x32c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d037      	beq.n	8003c6a <HAL_GPIO_Init+0x23e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x330>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x23a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x236>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a55      	ldr	r2, [pc, #340]	; (8003d64 <HAL_GPIO_Init+0x338>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x232>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_GPIO_Init+0x33c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x22e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a53      	ldr	r2, [pc, #332]	; (8003d6c <HAL_GPIO_Init+0x340>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x22a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_GPIO_Init+0x344>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	; (8003d74 <HAL_GPIO_Init+0x348>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_GPIO_Init+0x34c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	; (8003d7c <HAL_GPIO_Init+0x350>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e012      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e010      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae86 	bls.w	8003a4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022400 	.word	0x40022400
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	807b      	strh	r3, [r7, #2]
 8003d90:	4613      	mov	r3, r2
 8003d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d94:	787b      	ldrb	r3, [r7, #1]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003da0:	e003      	b.n	8003daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	041a      	lsls	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	619a      	str	r2, [r3, #24]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de6:	f7fe f9e5 	bl	80021b4 <HAL_GetTick>
 8003dea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dec:	e009      	b.n	8003e02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dee:	f7fe f9e1 	bl	80021b4 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dfc:	d901      	bls.n	8003e02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e022      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0e:	d1ee      	bne.n	8003dee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e10:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7fe f9ca 	bl	80021b4 <HAL_GetTick>
 8003e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e22:	e009      	b.n	8003e38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e24:	f7fe f9c6 	bl	80021b4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e32:	d901      	bls.n	8003e38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e007      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e44:	d1ee      	bne.n	8003e24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e291      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8087 	beq.w	8003f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7c:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e88:	4b93      	ldr	r3, [pc, #588]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d112      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
 8003e94:	4b90      	ldr	r3, [pc, #576]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x130>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d168      	bne.n	8003f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e26b      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a>
 8003ec4:	4b84      	ldr	r3, [pc, #528]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e02e      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x9c>
 8003eda:	4b7f      	ldr	r3, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7e      	ldr	r2, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xc0>
 8003efe:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe f93c 	bl	80021b4 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe f938 	bl	80021b4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e21f      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe8>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe f928 	bl	80021b4 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe f924 	bl	80021b4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20b      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d069      	beq.n	800406a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f96:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d11c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
 8003fae:	4b4a      	ldr	r3, [pc, #296]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1df      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	493d      	ldr	r1, [pc, #244]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	e040      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d023      	beq.n	8004038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a38      	ldr	r2, [pc, #224]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fe f8da 	bl	80021b4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004004:	f7fe f8d6 	bl	80021b4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1bd      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4929      	ldr	r1, [pc, #164]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
 8004036:	e018      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe f8b6 	bl	80021b4 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7fe f8b2 	bl	80021b4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e199      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d038      	beq.n	80040e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe f893 	bl	80021b4 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe f88f 	bl	80021b4 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e176      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x23a>
 80040b0:	e01a      	b.n	80040e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe f879 	bl	80021b4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe f875 	bl	80021b4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d903      	bls.n	80040dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e15c      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
 80040d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b91      	ldr	r3, [pc, #580]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ee      	bne.n	80040c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a4 	beq.w	800423e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a87      	ldr	r2, [pc, #540]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	4b85      	ldr	r3, [pc, #532]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	; (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	; (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fe f83d 	bl	80021b4 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fe f839 	bl	80021b4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e120      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	; (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x31a>
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a6e      	ldr	r2, [pc, #440]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x33c>
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	4a69      	ldr	r2, [pc, #420]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	; 0x70
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a66      	ldr	r2, [pc, #408]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x35e>
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	4a60      	ldr	r2, [pc, #384]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6713      	str	r3, [r2, #112]	; 0x70
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	; 0x70
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
 80041c2:	4b58      	ldr	r3, [pc, #352]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a57      	ldr	r2, [pc, #348]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7fd ffed 	bl	80021b4 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7fd ffe9 	bl	80021b4 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0ce      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x386>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fd ffd7 	bl	80021b4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fd ffd3 	bl	80021b4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	; 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a4 	beq.w	8004390 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d06b      	beq.n	800432c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d149      	bne.n	80042f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b31      	ldr	r3, [pc, #196]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd ffa4 	bl	80021b4 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7fd ffa0 	bl	80021b4 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e087      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	4313      	orrs	r3, r2
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd ff74 	bl	80021b4 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd ff70 	bl	80021b4 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e057      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x478>
 80042ee:	e04f      	b.n	8004390 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd ff5a 	bl	80021b4 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fd ff56 	bl	80021b4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e03d      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b03      	ldr	r3, [pc, #12]	; (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x4ac>
 8004322:	e035      	b.n	8004390 <HAL_RCC_OscConfig+0x538>
 8004324:	40023800 	.word	0x40023800
 8004328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x544>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d028      	beq.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d121      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	3b01      	subs	r3, #1
 8004376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0d0      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b67      	ldr	r3, [pc, #412]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 020f 	bic.w	r2, r3, #15
 80043ce:	4965      	ldr	r1, [pc, #404]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d040      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d115      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e073      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4936      	ldr	r1, [pc, #216]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7fd fe8e 	bl	80021b4 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	f7fd fe8a 	bl	80021b4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e053      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 020c 	and.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1eb      	bne.n	800449c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d210      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 020f 	bic.w	r2, r3, #15
 80044da:	4922      	ldr	r1, [pc, #136]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	; (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	; (800456c <HAL_RCC_ClockConfig+0x1cc>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1d0>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_ClockConfig+0x1d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd f9ba 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	0801de48 	.word	0x0801de48
 8004570:	20000000 	.word	0x20000000
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b090      	sub	sp, #64	; 0x40
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	2300      	movs	r3, #0
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004588:	2300      	movs	r3, #0
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004590:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x40>
 800459c:	2b08      	cmp	r3, #8
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x34>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045aa:	e09b      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_GetSysClockFreq+0x184>)
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045b0:	e09b      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b2:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045b6:	e098      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b8:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045c2:	4b4d      	ldr	r3, [pc, #308]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d028      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ce:	4b4a      	ldr	r3, [pc, #296]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	2200      	movs	r2, #0
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	627a      	str	r2, [r7, #36]	; 0x24
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045e0:	2100      	movs	r1, #0
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045e4:	fb03 f201 	mul.w	r2, r3, r1
 80045e8:	2300      	movs	r3, #0
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	4a43      	ldr	r2, [pc, #268]	; (8004700 <HAL_RCC_GetSysClockFreq+0x188>)
 80045f2:	fba0 1202 	umull	r1, r2, r0, r2
 80045f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f8:	460a      	mov	r2, r1
 80045fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80045fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fe:	4413      	add	r3, r2
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	2200      	movs	r2, #0
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	61fa      	str	r2, [r7, #28]
 800460a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004612:	f7fc fb1b 	bl	8000c4c <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4613      	mov	r3, r2
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461e:	e053      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	2200      	movs	r2, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	617a      	str	r2, [r7, #20]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004632:	f04f 0b00 	mov.w	fp, #0
 8004636:	4652      	mov	r2, sl
 8004638:	465b      	mov	r3, fp
 800463a:	f04f 0000 	mov.w	r0, #0
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	0159      	lsls	r1, r3, #5
 8004644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004648:	0150      	lsls	r0, r2, #5
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	ebb2 080a 	subs.w	r8, r2, sl
 8004652:	eb63 090b 	sbc.w	r9, r3, fp
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800466a:	ebb2 0408 	subs.w	r4, r2, r8
 800466e:	eb63 0509 	sbc.w	r5, r3, r9
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	00eb      	lsls	r3, r5, #3
 800467c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004680:	00e2      	lsls	r2, r4, #3
 8004682:	4614      	mov	r4, r2
 8004684:	461d      	mov	r5, r3
 8004686:	eb14 030a 	adds.w	r3, r4, sl
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	eb45 030b 	adc.w	r3, r5, fp
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800469e:	4629      	mov	r1, r5
 80046a0:	028b      	lsls	r3, r1, #10
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046a8:	4621      	mov	r1, r4
 80046aa:	028a      	lsls	r2, r1, #10
 80046ac:	4610      	mov	r0, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	2200      	movs	r2, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	60fa      	str	r2, [r7, #12]
 80046b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046bc:	f7fc fac6 	bl	8000c4c <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80046d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetSysClockFreq+0x184>)
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3740      	adds	r7, #64	; 0x40
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	017d7840 	.word	0x017d7840

08004704 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0b5b      	lsrs	r3, r3, #13
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	0801de58 	.word	0x0801de58

08004744 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	220f      	movs	r2, #15
 8004752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0203 	and.w	r2, r3, #3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800476c:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_RCC_GetClockConfig+0x60>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	601a      	str	r2, [r3, #0]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40023c00 	.word	0x40023c00

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e049      	b.n	800484e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f841 	bl	8004856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fd30 	bl	800524c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d001      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e054      	b.n	800492e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_TIM_Base_Start_IT+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d022      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d01d      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a22      	ldr	r2, [pc, #136]	; (8004940 <HAL_TIM_Base_Start_IT+0xd4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d018      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <HAL_TIM_Base_Start_IT+0xd8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1e      	ldr	r2, [pc, #120]	; (800494c <HAL_TIM_Base_Start_IT+0xe0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <HAL_TIM_Base_Start_IT+0xe4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x80>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <HAL_TIM_Base_Start_IT+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d115      	bne.n	8004918 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_TIM_Base_Start_IT+0xec>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d015      	beq.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d011      	beq.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	e008      	b.n	800492a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e000      	b.n	800492c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40010000 	.word	0x40010000
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40001800 	.word	0x40001800
 8004958:	00010007 	.word	0x00010007

0800495c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e049      	b.n	8004a02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc ff4a 	bl	800181c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fc56 	bl	800524c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_TIM_PWM_Start+0x24>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e03c      	b.n	8004aaa <HAL_TIM_PWM_Start+0x9e>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d109      	bne.n	8004a4a <HAL_TIM_PWM_Start+0x3e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	e02f      	b.n	8004aaa <HAL_TIM_PWM_Start+0x9e>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d109      	bne.n	8004a64 <HAL_TIM_PWM_Start+0x58>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e022      	b.n	8004aaa <HAL_TIM_PWM_Start+0x9e>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d109      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x72>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e015      	b.n	8004aaa <HAL_TIM_PWM_Start+0x9e>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x8c>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e008      	b.n	8004aaa <HAL_TIM_PWM_Start+0x9e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e092      	b.n	8004bd8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xb6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	e023      	b.n	8004b0a <HAL_TIM_PWM_Start+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_PWM_Start+0xc6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad0:	e01b      	b.n	8004b0a <HAL_TIM_PWM_Start+0xfe>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d104      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0xd6>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae0:	e013      	b.n	8004b0a <HAL_TIM_PWM_Start+0xfe>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_PWM_Start+0xe6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004af0:	e00b      	b.n	8004b0a <HAL_TIM_PWM_Start+0xfe>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_PWM_Start+0xf6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b00:	e003      	b.n	8004b0a <HAL_TIM_PWM_Start+0xfe>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 ff32 	bl	800597c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a30      	ldr	r2, [pc, #192]	; (8004be0 <HAL_TIM_PWM_Start+0x1d4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_PWM_Start+0x120>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2f      	ldr	r2, [pc, #188]	; (8004be4 <HAL_TIM_PWM_Start+0x1d8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x124>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_TIM_PWM_Start+0x126>
 8004b30:	2300      	movs	r3, #0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_TIM_PWM_Start+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d022      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d01d      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <HAL_TIM_PWM_Start+0x1dc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d018      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <HAL_TIM_PWM_Start+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <HAL_TIM_PWM_Start+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_TIM_PWM_Start+0x1d8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_TIM_PWM_Start+0x1e8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x18a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_TIM_PWM_Start+0x1ec>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d115      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_TIM_PWM_Start+0x1f0>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d015      	beq.n	8004bd4 <HAL_TIM_PWM_Start+0x1c8>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d011      	beq.n	8004bd4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	e008      	b.n	8004bd4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e000      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40010400 	.word	0x40010400
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40001800 	.word	0x40001800
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fae4 	bl	8005210 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fad6 	bl	80051fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fae7 	bl	8005224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0204 	mvn.w	r2, #4
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 faba 	bl	8005210 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 faac 	bl	80051fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fabd 	bl	8005224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0208 	mvn.w	r2, #8
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa90 	bl	8005210 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa82 	bl	80051fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa93 	bl	8005224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa66 	bl	8005210 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa58 	bl	80051fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa69 	bl	8005224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0201 	mvn.w	r2, #1
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc fbfa 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b80      	cmp	r3, #128	; 0x80
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b80      	cmp	r3, #128	; 0x80
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fea4 	bl	8005af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	d10e      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b80      	cmp	r3, #128	; 0x80
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fe97 	bl	8005b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d10e      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fa17 	bl	8005238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d10e      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0320 	and.w	r3, r3, #32
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d107      	bne.n	8004e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0220 	mvn.w	r2, #32
 8004e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fe57 	bl	8005ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0ff      	b.n	800505e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b14      	cmp	r3, #20
 8004e6a:	f200 80f0 	bhi.w	800504e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	0800504f 	.word	0x0800504f
 8004e7c:	0800504f 	.word	0x0800504f
 8004e80:	0800504f 	.word	0x0800504f
 8004e84:	08004f09 	.word	0x08004f09
 8004e88:	0800504f 	.word	0x0800504f
 8004e8c:	0800504f 	.word	0x0800504f
 8004e90:	0800504f 	.word	0x0800504f
 8004e94:	08004f4b 	.word	0x08004f4b
 8004e98:	0800504f 	.word	0x0800504f
 8004e9c:	0800504f 	.word	0x0800504f
 8004ea0:	0800504f 	.word	0x0800504f
 8004ea4:	08004f8b 	.word	0x08004f8b
 8004ea8:	0800504f 	.word	0x0800504f
 8004eac:	0800504f 	.word	0x0800504f
 8004eb0:	0800504f 	.word	0x0800504f
 8004eb4:	08004fcd 	.word	0x08004fcd
 8004eb8:	0800504f 	.word	0x0800504f
 8004ebc:	0800504f 	.word	0x0800504f
 8004ec0:	0800504f 	.word	0x0800504f
 8004ec4:	0800500d 	.word	0x0800500d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa5c 	bl	800538c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0204 	bic.w	r2, r2, #4
 8004ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	619a      	str	r2, [r3, #24]
      break;
 8004f06:	e0a5      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 faae 	bl	8005470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6999      	ldr	r1, [r3, #24]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	619a      	str	r2, [r3, #24]
      break;
 8004f48:	e084      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fb05 	bl	8005560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0208 	orr.w	r2, r2, #8
 8004f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0204 	bic.w	r2, r2, #4
 8004f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69d9      	ldr	r1, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	61da      	str	r2, [r3, #28]
      break;
 8004f88:	e064      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fb5b 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69d9      	ldr	r1, [r3, #28]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	021a      	lsls	r2, r3, #8
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	61da      	str	r2, [r3, #28]
      break;
 8004fca:	e043      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fb92 	bl	80056fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0208 	orr.w	r2, r2, #8
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0204 	bic.w	r2, r2, #4
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800500a:	e023      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68b9      	ldr	r1, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fbc4 	bl	80057a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800504c:	e002      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
      break;
 8005052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800505c:	7dfb      	ldrb	r3, [r7, #23]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop

08005068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIM_ConfigClockSource+0x1c>
 8005080:	2302      	movs	r3, #2
 8005082:	e0b4      	b.n	80051ee <HAL_TIM_ConfigClockSource+0x186>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_TIM_ConfigClockSource+0x190>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d03e      	beq.n	800513c <HAL_TIM_ConfigClockSource+0xd4>
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	f200 8087 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	f000 8086 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x172>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d87f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d01a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xa6>
 80050d8:	2b70      	cmp	r3, #112	; 0x70
 80050da:	d87b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d050      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x11a>
 80050e0:	2b60      	cmp	r3, #96	; 0x60
 80050e2:	d877      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b50      	cmp	r3, #80	; 0x50
 80050e6:	d03c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0xfa>
 80050e8:	2b50      	cmp	r3, #80	; 0x50
 80050ea:	d873      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d058      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x13a>
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d86f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d064      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	2b30      	cmp	r3, #48	; 0x30
 80050fa:	d86b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d060      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d867      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d05a      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 800510c:	e062      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f000 fc0d 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	609a      	str	r2, [r3, #8]
      break;
 800513a:	e04f      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f000 fbf6 	bl	800593c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515e:	609a      	str	r2, [r3, #8]
      break;
 8005160:	e03c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	461a      	mov	r2, r3
 8005170:	f000 fb6a 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2150      	movs	r1, #80	; 0x50
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fbc3 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 8005180:	e02c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	461a      	mov	r2, r3
 8005190:	f000 fb89 	bl	80058a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2160      	movs	r1, #96	; 0x60
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbb3 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80051a0:	e01c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f000 fb4a 	bl	8005848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fba3 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 fb9a 	bl	8005906 <TIM_ITRx_SetConfig>
      break;
 80051d2:	e003      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e000      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	fffeff88 	.word	0xfffeff88

080051fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3d      	ldr	r2, [pc, #244]	; (8005364 <TIM_Base_SetConfig+0x118>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a3b      	ldr	r2, [pc, #236]	; (800536c <TIM_Base_SetConfig+0x120>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <TIM_Base_SetConfig+0x114>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d027      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	; (8005364 <TIM_Base_SetConfig+0x118>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d023      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a2b      	ldr	r2, [pc, #172]	; (8005368 <TIM_Base_SetConfig+0x11c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01f      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a2a      	ldr	r2, [pc, #168]	; (800536c <TIM_Base_SetConfig+0x120>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a29      	ldr	r2, [pc, #164]	; (8005370 <TIM_Base_SetConfig+0x124>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d017      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <TIM_Base_SetConfig+0x128>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a27      	ldr	r2, [pc, #156]	; (8005378 <TIM_Base_SetConfig+0x12c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <TIM_Base_SetConfig+0x130>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <TIM_Base_SetConfig+0x134>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a24      	ldr	r2, [pc, #144]	; (8005384 <TIM_Base_SetConfig+0x138>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a23      	ldr	r2, [pc, #140]	; (8005388 <TIM_Base_SetConfig+0x13c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <TIM_Base_SetConfig+0x114>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a0c      	ldr	r2, [pc, #48]	; (8005370 <TIM_Base_SetConfig+0x124>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	615a      	str	r2, [r3, #20]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40010400 	.word	0x40010400
 8005374:	40014000 	.word	0x40014000
 8005378:	40014400 	.word	0x40014400
 800537c:	40014800 	.word	0x40014800
 8005380:	40001800 	.word	0x40001800
 8005384:	40001c00 	.word	0x40001c00
 8005388:	40002000 	.word	0x40002000

0800538c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0201 	bic.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <TIM_OC1_SetConfig+0xd8>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 0302 	bic.w	r3, r3, #2
 80053d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <TIM_OC1_SetConfig+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_OC1_SetConfig+0x64>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a20      	ldr	r2, [pc, #128]	; (800546c <TIM_OC1_SetConfig+0xe0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10c      	bne.n	800540a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0308 	bic.w	r3, r3, #8
 80053f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a16      	ldr	r2, [pc, #88]	; (8005468 <TIM_OC1_SetConfig+0xdc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC1_SetConfig+0x8e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a15      	ldr	r2, [pc, #84]	; (800546c <TIM_OC1_SetConfig+0xe0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	fffeff8f 	.word	0xfffeff8f
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400

08005470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <TIM_OC2_SetConfig+0xe4>)
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0320 	bic.w	r3, r3, #32
 80054ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a23      	ldr	r2, [pc, #140]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC2_SetConfig+0x68>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a22      	ldr	r2, [pc, #136]	; (800555c <TIM_OC2_SetConfig+0xec>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x94>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <TIM_OC2_SetConfig+0xec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d113      	bne.n	800552c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	feff8fff 	.word	0xfeff8fff
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <TIM_OC3_SetConfig+0xe0>)
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a22      	ldr	r2, [pc, #136]	; (8005644 <TIM_OC3_SetConfig+0xe4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC3_SetConfig+0x66>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	; (8005648 <TIM_OC3_SetConfig+0xe8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d10d      	bne.n	80055e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <TIM_OC3_SetConfig+0xe4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_OC3_SetConfig+0x92>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	; (8005648 <TIM_OC3_SetConfig+0xe8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d113      	bne.n	800561a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	fffeff8f 	.word	0xfffeff8f
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <TIM_OC4_SetConfig+0xa4>)
 8005678:	4013      	ands	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <TIM_OC4_SetConfig+0xa8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC4_SetConfig+0x68>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <TIM_OC4_SetConfig+0xac>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d109      	bne.n	80056c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	019b      	lsls	r3, r3, #6
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	feff8fff 	.word	0xfeff8fff
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <TIM_OC5_SetConfig+0x98>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800573c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <TIM_OC5_SetConfig+0x9c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC5_SetConfig+0x5e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <TIM_OC5_SetConfig+0xa0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d109      	bne.n	800576e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005760:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	621a      	str	r2, [r3, #32]
}
 8005788:	bf00      	nop
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	fffeff8f 	.word	0xfffeff8f
 8005798:	40010000 	.word	0x40010000
 800579c:	40010400 	.word	0x40010400

080057a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4b1c      	ldr	r3, [pc, #112]	; (800583c <TIM_OC6_SetConfig+0x9c>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	051b      	lsls	r3, r3, #20
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a13      	ldr	r2, [pc, #76]	; (8005840 <TIM_OC6_SetConfig+0xa0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC6_SetConfig+0x60>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a12      	ldr	r2, [pc, #72]	; (8005844 <TIM_OC6_SetConfig+0xa4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d109      	bne.n	8005814 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005806:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	feff8fff 	.word	0xfeff8fff
 8005840:	40010000 	.word	0x40010000
 8005844:	40010400 	.word	0x40010400

08005848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0201 	bic.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f023 030a 	bic.w	r3, r3, #10
 8005884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	621a      	str	r2, [r3, #32]
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b087      	sub	sp, #28
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0210 	bic.w	r2, r3, #16
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	031b      	lsls	r3, r3, #12
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	f043 0307 	orr.w	r3, r3, #7
 8005928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	609a      	str	r2, [r3, #8]
}
 8005930:	bf00      	nop
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	431a      	orrs	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2201      	movs	r2, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e06d      	b.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a30      	ldr	r2, [pc, #192]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d108      	bne.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d01d      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a15      	ldr	r2, [pc, #84]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a16      	ldr	r2, [pc, #88]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10c      	bne.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40001800 	.word	0x40001800

08005ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <get_static_netif>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
struct netif *get_static_netif() {
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return &gnetif;
 8005b24:	4b02      	ldr	r3, [pc, #8]	; (8005b30 <get_static_netif+0x10>)
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	200005e8 	.word	0x200005e8

08005b34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8005b3a:	4b98      	ldr	r3, [pc, #608]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8005b40:	4b96      	ldr	r3, [pc, #600]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b42:	222a      	movs	r2, #42	; 0x2a
 8005b44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005b46:	4b95      	ldr	r3, [pc, #596]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 32;
 8005b4c:	4b93      	ldr	r3, [pc, #588]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b4e:	2220      	movs	r2, #32
 8005b50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005b52:	4b93      	ldr	r3, [pc, #588]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005b58:	4b91      	ldr	r3, [pc, #580]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005b5a:	22ff      	movs	r2, #255	; 0xff
 8005b5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005b5e:	4b90      	ldr	r3, [pc, #576]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b64:	4b8e      	ldr	r3, [pc, #568]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8005b6a:	4b8e      	ldr	r3, [pc, #568]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8005b70:	4b8c      	ldr	r3, [pc, #560]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005b72:	222a      	movs	r2, #42	; 0x2a
 8005b74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005b76:	4b8b      	ldr	r3, [pc, #556]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005b7c:	4b89      	ldr	r3, [pc, #548]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005b82:	2100      	movs	r1, #0
 8005b84:	2000      	movs	r0, #0
 8005b86:	f006 ff41 	bl	800ca0c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b8a:	4b84      	ldr	r3, [pc, #528]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	061a      	lsls	r2, r3, #24
 8005b90:	4b82      	ldr	r3, [pc, #520]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	431a      	orrs	r2, r3
 8005b98:	4b80      	ldr	r3, [pc, #512]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005b9a:	789b      	ldrb	r3, [r3, #2]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	4a7e      	ldr	r2, [pc, #504]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005ba2:	78d2      	ldrb	r2, [r2, #3]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	061a      	lsls	r2, r3, #24
 8005ba8:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	0619      	lsls	r1, r3, #24
 8005bae:	4b7b      	ldr	r3, [pc, #492]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	4319      	orrs	r1, r3
 8005bb6:	4b79      	ldr	r3, [pc, #484]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bb8:	789b      	ldrb	r3, [r3, #2]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	4977      	ldr	r1, [pc, #476]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bc0:	78c9      	ldrb	r1, [r1, #3]
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	4b73      	ldr	r3, [pc, #460]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	0619      	lsls	r1, r3, #24
 8005bd2:	4b72      	ldr	r3, [pc, #456]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	041b      	lsls	r3, r3, #16
 8005bd8:	4319      	orrs	r1, r3
 8005bda:	4b70      	ldr	r3, [pc, #448]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	430b      	orrs	r3, r1
 8005be2:	496e      	ldr	r1, [pc, #440]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005be4:	78c9      	ldrb	r1, [r1, #3]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	0619      	lsls	r1, r3, #24
 8005bf6:	4b69      	ldr	r3, [pc, #420]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	4319      	orrs	r1, r3
 8005bfe:	4b67      	ldr	r3, [pc, #412]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005c00:	789b      	ldrb	r3, [r3, #2]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	430b      	orrs	r3, r1
 8005c06:	4965      	ldr	r1, [pc, #404]	; (8005d9c <MX_LWIP_Init+0x268>)
 8005c08:	78c9      	ldrb	r1, [r1, #3]
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	0e1b      	lsrs	r3, r3, #24
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	4a65      	ldr	r2, [pc, #404]	; (8005da8 <MX_LWIP_Init+0x274>)
 8005c12:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005c14:	4b62      	ldr	r3, [pc, #392]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	061a      	lsls	r2, r3, #24
 8005c1a:	4b61      	ldr	r3, [pc, #388]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	431a      	orrs	r2, r3
 8005c22:	4b5f      	ldr	r3, [pc, #380]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c24:	789b      	ldrb	r3, [r3, #2]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	4a5d      	ldr	r2, [pc, #372]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c2c:	78d2      	ldrb	r2, [r2, #3]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	061a      	lsls	r2, r3, #24
 8005c32:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	0619      	lsls	r1, r3, #24
 8005c38:	4b59      	ldr	r3, [pc, #356]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	4319      	orrs	r1, r3
 8005c40:	4b57      	ldr	r3, [pc, #348]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c42:	789b      	ldrb	r3, [r3, #2]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	430b      	orrs	r3, r1
 8005c48:	4955      	ldr	r1, [pc, #340]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c4a:	78c9      	ldrb	r1, [r1, #3]
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c54:	431a      	orrs	r2, r3
 8005c56:	4b52      	ldr	r3, [pc, #328]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	0619      	lsls	r1, r3, #24
 8005c5c:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	4319      	orrs	r1, r3
 8005c64:	4b4e      	ldr	r3, [pc, #312]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c66:	789b      	ldrb	r3, [r3, #2]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	494c      	ldr	r1, [pc, #304]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c6e:	78c9      	ldrb	r1, [r1, #3]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	0619      	lsls	r1, r3, #24
 8005c80:	4b47      	ldr	r3, [pc, #284]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	4319      	orrs	r1, r3
 8005c88:	4b45      	ldr	r3, [pc, #276]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c8a:	789b      	ldrb	r3, [r3, #2]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	4943      	ldr	r1, [pc, #268]	; (8005da0 <MX_LWIP_Init+0x26c>)
 8005c92:	78c9      	ldrb	r1, [r1, #3]
 8005c94:	430b      	orrs	r3, r1
 8005c96:	0e1b      	lsrs	r3, r3, #24
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	4a44      	ldr	r2, [pc, #272]	; (8005dac <MX_LWIP_Init+0x278>)
 8005c9c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c9e:	4b41      	ldr	r3, [pc, #260]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	061a      	lsls	r2, r3, #24
 8005ca4:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	4b3d      	ldr	r3, [pc, #244]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cae:	789b      	ldrb	r3, [r3, #2]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cb6:	78d2      	ldrb	r2, [r2, #3]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	061a      	lsls	r2, r3, #24
 8005cbc:	4b39      	ldr	r3, [pc, #228]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	0619      	lsls	r1, r3, #24
 8005cc2:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cc4:	785b      	ldrb	r3, [r3, #1]
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	4319      	orrs	r1, r3
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005ccc:	789b      	ldrb	r3, [r3, #2]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	4934      	ldr	r1, [pc, #208]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cd4:	78c9      	ldrb	r1, [r1, #3]
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	4b30      	ldr	r3, [pc, #192]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	0619      	lsls	r1, r3, #24
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	4319      	orrs	r1, r3
 8005cee:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cf0:	789b      	ldrb	r3, [r3, #2]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	492b      	ldr	r1, [pc, #172]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005cf8:	78c9      	ldrb	r1, [r1, #3]
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d02:	431a      	orrs	r2, r3
 8005d04:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	0619      	lsls	r1, r3, #24
 8005d0a:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	4319      	orrs	r1, r3
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005d14:	789b      	ldrb	r3, [r3, #2]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	4922      	ldr	r1, [pc, #136]	; (8005da4 <MX_LWIP_Init+0x270>)
 8005d1c:	78c9      	ldrb	r1, [r1, #3]
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	4313      	orrs	r3, r2
 8005d24:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <MX_LWIP_Init+0x27c>)
 8005d26:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <MX_LWIP_Init+0x280>)
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	4b22      	ldr	r3, [pc, #136]	; (8005db8 <MX_LWIP_Init+0x284>)
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	2300      	movs	r3, #0
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <MX_LWIP_Init+0x27c>)
 8005d36:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <MX_LWIP_Init+0x278>)
 8005d38:	491b      	ldr	r1, [pc, #108]	; (8005da8 <MX_LWIP_Init+0x274>)
 8005d3a:	4820      	ldr	r0, [pc, #128]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d3c:	f007 fd48 	bl	800d7d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d40:	481e      	ldr	r0, [pc, #120]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d42:	f007 fef3 	bl	800db2c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d58:	4818      	ldr	r0, [pc, #96]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d5a:	f007 fef7 	bl	800db4c <netif_set_up>
 8005d5e:	e002      	b.n	8005d66 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005d60:	4816      	ldr	r0, [pc, #88]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d62:	f007 ff5f 	bl	800dc24 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005d66:	4916      	ldr	r1, [pc, #88]	; (8005dc0 <MX_LWIP_Init+0x28c>)
 8005d68:	4814      	ldr	r0, [pc, #80]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d6a:	f007 fff1 	bl	800dd50 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	2100      	movs	r1, #0
 8005d72:	4814      	ldr	r0, [pc, #80]	; (8005dc4 <MX_LWIP_Init+0x290>)
 8005d74:	f011 fe6f 	bl	8017a56 <memset>
  attributes.name = "EthLink";
 8005d78:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <MX_LWIP_Init+0x290>)
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <MX_LWIP_Init+0x294>)
 8005d7c:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <MX_LWIP_Init+0x290>)
 8005d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d84:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005d86:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <MX_LWIP_Init+0x290>)
 8005d88:	2210      	movs	r2, #16
 8005d8a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005d8c:	4a0d      	ldr	r2, [pc, #52]	; (8005dc4 <MX_LWIP_Init+0x290>)
 8005d8e:	490b      	ldr	r1, [pc, #44]	; (8005dbc <MX_LWIP_Init+0x288>)
 8005d90:	480e      	ldr	r0, [pc, #56]	; (8005dcc <MX_LWIP_Init+0x298>)
 8005d92:	f000 fda3 	bl	80068dc <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005d96:	bf00      	nop
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000628 	.word	0x20000628
 8005da0:	2000062c 	.word	0x2000062c
 8005da4:	20000630 	.word	0x20000630
 8005da8:	2000061c 	.word	0x2000061c
 8005dac:	20000620 	.word	0x20000620
 8005db0:	20000624 	.word	0x20000624
 8005db4:	0800c91d 	.word	0x0800c91d
 8005db8:	080062cd 	.word	0x080062cd
 8005dbc:	200005e8 	.word	0x200005e8
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	20000634 	.word	0x20000634
 8005dc8:	0801ac24 	.word	0x0801ac24
 8005dcc:	08006595 	.word	0x08006595

08005dd0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005df6:	2320      	movs	r3, #32
 8005df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dfa:	f3bf 8f4f 	dsb	sy
}
 8005dfe:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005e00:	e00b      	b.n	8005e1a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005e02:	4a0d      	ldr	r2, [pc, #52]	; (8005e38 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dcf0      	bgt.n	8005e02 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e20:	f3bf 8f4f 	dsb	sy
}
 8005e24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e26:	f3bf 8f6f 	isb	sy
}
 8005e2a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_ETH_RxCpltCallback+0x1c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 f865 	bl	8006f18 <osSemaphoreRelease>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20004fe4 	.word	0x20004fe4

08005e5c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <HAL_ETH_TxCpltCallback+0x1c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 f855 	bl	8006f18 <osSemaphoreRelease>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20004fe8 	.word	0x20004fe8

08005e7c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fd f9c1 	bl	800320c <HAL_ETH_GetDMAError>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d104      	bne.n	8005e9e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <HAL_ETH_ErrorCallback+0x2c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 f83d 	bl	8006f18 <osSemaphoreRelease>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20004fe4 	.word	0x20004fe4

08005eac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b0aa      	sub	sp, #168	; 0xa8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005ec6:	f107 0310 	add.w	r3, r7, #16
 8005eca:	2264      	movs	r2, #100	; 0x64
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f011 fdc1 	bl	8017a56 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005ed4:	4b85      	ldr	r3, [pc, #532]	; (80060ec <low_level_init+0x240>)
 8005ed6:	4a86      	ldr	r2, [pc, #536]	; (80060f0 <low_level_init+0x244>)
 8005ed8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005eda:	2300      	movs	r3, #0
 8005edc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005ede:	2380      	movs	r3, #128	; 0x80
 8005ee0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005ee2:	23e1      	movs	r3, #225	; 0xe1
 8005ee4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005eea:	2300      	movs	r3, #0
 8005eec:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005ef2:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <low_level_init+0x240>)
 8005ef4:	f107 0308 	add.w	r3, r7, #8
 8005ef8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005efa:	4b7c      	ldr	r3, [pc, #496]	; (80060ec <low_level_init+0x240>)
 8005efc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f00:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005f02:	4b7a      	ldr	r3, [pc, #488]	; (80060ec <low_level_init+0x240>)
 8005f04:	4a7b      	ldr	r2, [pc, #492]	; (80060f4 <low_level_init+0x248>)
 8005f06:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005f08:	4b78      	ldr	r3, [pc, #480]	; (80060ec <low_level_init+0x240>)
 8005f0a:	4a7b      	ldr	r2, [pc, #492]	; (80060f8 <low_level_init+0x24c>)
 8005f0c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005f0e:	4b77      	ldr	r3, [pc, #476]	; (80060ec <low_level_init+0x240>)
 8005f10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005f14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005f16:	4875      	ldr	r0, [pc, #468]	; (80060ec <low_level_init+0x240>)
 8005f18:	f7fc fada 	bl	80024d0 <HAL_ETH_Init>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005f22:	2238      	movs	r2, #56	; 0x38
 8005f24:	2100      	movs	r1, #0
 8005f26:	4875      	ldr	r0, [pc, #468]	; (80060fc <low_level_init+0x250>)
 8005f28:	f011 fd95 	bl	8017a56 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005f2c:	4b73      	ldr	r3, [pc, #460]	; (80060fc <low_level_init+0x250>)
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005f32:	4b72      	ldr	r3, [pc, #456]	; (80060fc <low_level_init+0x250>)
 8005f34:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005f38:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005f3a:	4b70      	ldr	r3, [pc, #448]	; (80060fc <low_level_init+0x250>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005f40:	486f      	ldr	r0, [pc, #444]	; (8006100 <low_level_init+0x254>)
 8005f42:	f007 faff 	bl	800d544 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2206      	movs	r2, #6
 8005f4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005f4e:	4b67      	ldr	r3, [pc, #412]	; (80060ec <low_level_init+0x240>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005f5a:	4b64      	ldr	r3, [pc, #400]	; (80060ec <low_level_init+0x240>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	785a      	ldrb	r2, [r3, #1]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005f66:	4b61      	ldr	r3, [pc, #388]	; (80060ec <low_level_init+0x240>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	789a      	ldrb	r2, [r3, #2]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005f72:	4b5e      	ldr	r3, [pc, #376]	; (80060ec <low_level_init+0x240>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	78da      	ldrb	r2, [r3, #3]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005f7e:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <low_level_init+0x240>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	791a      	ldrb	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005f8a:	4b58      	ldr	r3, [pc, #352]	; (80060ec <low_level_init+0x240>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	795a      	ldrb	r2, [r3, #5]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f9c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fa4:	f043 030a 	orr.w	r3, r3, #10
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f000 fead 	bl	8006d14 <osSemaphoreNew>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4a51      	ldr	r2, [pc, #324]	; (8006104 <low_level_init+0x258>)
 8005fbe:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	f000 fea5 	bl	8006d14 <osSemaphoreNew>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	4a4e      	ldr	r2, [pc, #312]	; (8006108 <low_level_init+0x25c>)
 8005fce:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005fd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fd4:	2224      	movs	r2, #36	; 0x24
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f011 fd3c 	bl	8017a56 <memset>
  attributes.name = "EthIf";
 8005fde:	4b4b      	ldr	r3, [pc, #300]	; (800610c <low_level_init+0x260>)
 8005fe0:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005fe2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8005fea:	2330      	movs	r3, #48	; 0x30
 8005fec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005ff0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4845      	ldr	r0, [pc, #276]	; (8006110 <low_level_init+0x264>)
 8005ffa:	f000 fc6f 	bl	80068dc <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005ffe:	4945      	ldr	r1, [pc, #276]	; (8006114 <low_level_init+0x268>)
 8006000:	4845      	ldr	r0, [pc, #276]	; (8006118 <low_level_init+0x26c>)
 8006002:	f7fb ff4c 	bl	8001e9e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006006:	4844      	ldr	r0, [pc, #272]	; (8006118 <low_level_init+0x26c>)
 8006008:	f7fb ff7b 	bl	8001f02 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800600c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8006010:	2b00      	cmp	r3, #0
 8006012:	d164      	bne.n	80060de <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006014:	4840      	ldr	r0, [pc, #256]	; (8006118 <low_level_init+0x26c>)
 8006016:	f7fc f81c 	bl	8002052 <LAN8742_GetLinkState>
 800601a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800601e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006022:	2b01      	cmp	r3, #1
 8006024:	dc06      	bgt.n	8006034 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f007 fe62 	bl	800dcf0 <netif_set_link_down>
      netif_set_down(netif);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f007 fdf9 	bl	800dc24 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006032:	e056      	b.n	80060e2 <low_level_init+0x236>
      switch (PHYLinkState)
 8006034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006038:	3b02      	subs	r3, #2
 800603a:	2b03      	cmp	r3, #3
 800603c:	d82a      	bhi.n	8006094 <low_level_init+0x1e8>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <low_level_init+0x198>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006055 	.word	0x08006055
 8006048:	08006067 	.word	0x08006067
 800604c:	08006077 	.word	0x08006077
 8006050:	08006087 	.word	0x08006087
        duplex = ETH_FULLDUPLEX_MODE;
 8006054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800605c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006064:	e01f      	b.n	80060a6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006066:	2300      	movs	r3, #0
 8006068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800606c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006074:	e017      	b.n	80060a6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800607a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006084:	e00f      	b.n	80060a6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8006092:	e008      	b.n	80060a6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800609c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80060a4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80060a6:	f107 0310 	add.w	r3, r7, #16
 80060aa:	4619      	mov	r1, r3
 80060ac:	480f      	ldr	r0, [pc, #60]	; (80060ec <low_level_init+0x240>)
 80060ae:	f7fc ff53 	bl	8002f58 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80060b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80060b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80060be:	f107 0310 	add.w	r3, r7, #16
 80060c2:	4619      	mov	r1, r3
 80060c4:	4809      	ldr	r0, [pc, #36]	; (80060ec <low_level_init+0x240>)
 80060c6:	f7fd f831 	bl	800312c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80060ca:	4808      	ldr	r0, [pc, #32]	; (80060ec <low_level_init+0x240>)
 80060cc:	f7fc fadc 	bl	8002688 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f007 fd3b 	bl	800db4c <netif_set_up>
    netif_set_link_up(netif);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f007 fdd6 	bl	800dc88 <netif_set_link_up>
}
 80060dc:	e001      	b.n	80060e2 <low_level_init+0x236>
    Error_Handler();
 80060de:	f7fb fa5d 	bl	800159c <Error_Handler>
}
 80060e2:	bf00      	nop
 80060e4:	37a8      	adds	r7, #168	; 0xa8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20004fec 	.word	0x20004fec
 80060f0:	40028000 	.word	0x40028000
 80060f4:	200002a0 	.word	0x200002a0
 80060f8:	20000200 	.word	0x20000200
 80060fc:	2000509c 	.word	0x2000509c
 8006100:	0801de60 	.word	0x0801de60
 8006104:	20004fe4 	.word	0x20004fe4
 8006108:	20004fe8 	.word	0x20004fe8
 800610c:	0801ac2c 	.word	0x0801ac2c
 8006110:	08006279 	.word	0x08006279
 8006114:	2000000c 	.word	0x2000000c
 8006118:	200050d4 	.word	0x200050d4

0800611c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b092      	sub	sp, #72	; 0x48
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	2230      	movs	r2, #48	; 0x30
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f011 fc8a 	bl	8017a56 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006142:	f107 030c 	add.w	r3, r7, #12
 8006146:	2230      	movs	r2, #48	; 0x30
 8006148:	2100      	movs	r1, #0
 800614a:	4618      	mov	r0, r3
 800614c:	f011 fc83 	bl	8017a56 <memset>

  for(q = p; q != NULL; q = q->next)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
 8006154:	e045      	b.n	80061e2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006158:	2b03      	cmp	r3, #3
 800615a:	d902      	bls.n	8006162 <low_level_output+0x46>
      return ERR_IF;
 800615c:	f06f 030b 	mvn.w	r3, #11
 8006160:	e065      	b.n	800622e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8006162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	3348      	adds	r3, #72	; 0x48
 8006172:	443b      	add	r3, r7
 8006174:	3b3c      	subs	r3, #60	; 0x3c
 8006176:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617a:	895b      	ldrh	r3, [r3, #10]
 800617c:	4619      	mov	r1, r3
 800617e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006180:	4613      	mov	r3, r2
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	3348      	adds	r3, #72	; 0x48
 800618a:	443b      	add	r3, r7
 800618c:	3b38      	subs	r3, #56	; 0x38
 800618e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006192:	2b00      	cmp	r3, #0
 8006194:	d011      	beq.n	80061ba <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006198:	1e5a      	subs	r2, r3, #1
 800619a:	f107 000c 	add.w	r0, r7, #12
 800619e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061a0:	460b      	mov	r3, r1
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	440b      	add	r3, r1
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	18c1      	adds	r1, r0, r3
 80061aa:	4613      	mov	r3, r2
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	3348      	adds	r3, #72	; 0x48
 80061b4:	443b      	add	r3, r7
 80061b6:	3b34      	subs	r3, #52	; 0x34
 80061b8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80061ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80061c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c4:	4613      	mov	r3, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	3348      	adds	r3, #72	; 0x48
 80061ce:	443b      	add	r3, r7
 80061d0:	3b34      	subs	r3, #52	; 0x34
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80061d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d8:	3301      	adds	r3, #1
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1b6      	bne.n	8006156 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	891b      	ldrh	r3, [r3, #8]
 80061ec:	461a      	mov	r2, r3
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <low_level_output+0x11c>)
 80061f0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80061f2:	4a11      	ldr	r2, [pc, #68]	; (8006238 <low_level_output+0x11c>)
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80061fa:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <low_level_output+0x11c>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006200:	6838      	ldr	r0, [r7, #0]
 8006202:	f008 f9f9 	bl	800e5f8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006206:	490c      	ldr	r1, [pc, #48]	; (8006238 <low_level_output+0x11c>)
 8006208:	480c      	ldr	r0, [pc, #48]	; (800623c <low_level_output+0x120>)
 800620a:	f7fc fb4b 	bl	80028a4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800620e:	bf00      	nop
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <low_level_output+0x124>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fe17 	bl	8006e4c <osSemaphoreAcquire>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f5      	bne.n	8006210 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006224:	4805      	ldr	r0, [pc, #20]	; (800623c <low_level_output+0x120>)
 8006226:	f7fc fcd1 	bl	8002bcc <HAL_ETH_ReleaseTxPacket>

  return errval;
 800622a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800622e:	4618      	mov	r0, r3
 8006230:	3748      	adds	r7, #72	; 0x48
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	2000509c 	.word	0x2000509c
 800623c:	20004fec 	.word	0x20004fec
 8006240:	20004fe8 	.word	0x20004fe8

08006244 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <low_level_input+0x2c>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d105      	bne.n	8006264 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	4619      	mov	r1, r3
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <low_level_input+0x30>)
 8006260:	f7fc fb7c 	bl	800295c <HAL_ETH_ReadData>
  }

  return p;
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20004fe0 	.word	0x20004fe0
 8006274:	20004fec 	.word	0x20004fec

08006278 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006288:	4b0f      	ldr	r3, [pc, #60]	; (80062c8 <ethernetif_input+0x50>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fddb 	bl	8006e4c <osSemaphoreAcquire>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f5      	bne.n	8006288 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f7ff ffd1 	bl	8006244 <low_level_input>
 80062a2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	4798      	blx	r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f008 f8f6 	bl	800e4ac <pbuf_free>
          }
        }
      } while(p!=NULL);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1ea      	bne.n	800629c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80062c6:	e7df      	b.n	8006288 <ethernetif_input+0x10>
 80062c8:	20004fe4 	.word	0x20004fe4

080062cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <ethernetif_init+0x1c>
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <ethernetif_init+0x48>)
 80062dc:	f44f 720d 	mov.w	r2, #564	; 0x234
 80062e0:	490d      	ldr	r1, [pc, #52]	; (8006318 <ethernetif_init+0x4c>)
 80062e2:	480e      	ldr	r0, [pc, #56]	; (800631c <ethernetif_init+0x50>)
 80062e4:	f011 fc54 	bl	8017b90 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2273      	movs	r2, #115	; 0x73
 80062ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2274      	movs	r2, #116	; 0x74
 80062f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <ethernetif_init+0x54>)
 80062fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a08      	ldr	r2, [pc, #32]	; (8006324 <ethernetif_init+0x58>)
 8006302:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fdd1 	bl	8005eac <low_level_init>

  return ERR_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	0801ac34 	.word	0x0801ac34
 8006318:	0801ac50 	.word	0x0801ac50
 800631c:	0801ac60 	.word	0x0801ac60
 8006320:	08015759 	.word	0x08015759
 8006324:	0800611d 	.word	0x0800611d

08006328 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006334:	68f9      	ldr	r1, [r7, #12]
 8006336:	4809      	ldr	r0, [pc, #36]	; (800635c <pbuf_free_custom+0x34>)
 8006338:	f007 f9f4 	bl	800d724 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800633c:	4b08      	ldr	r3, [pc, #32]	; (8006360 <pbuf_free_custom+0x38>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d107      	bne.n	8006354 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <pbuf_free_custom+0x38>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <pbuf_free_custom+0x3c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fde2 	bl	8006f18 <osSemaphoreRelease>
  }
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	0801de60 	.word	0x0801de60
 8006360:	20004fe0 	.word	0x20004fe0
 8006364:	20004fe4 	.word	0x20004fe4

08006368 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800636c:	f7fb ff22 	bl	80021b4 <HAL_GetTick>
 8006370:	4603      	mov	r3, r0
}
 8006372:	4618      	mov	r0, r3
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a52      	ldr	r2, [pc, #328]	; (80064e0 <HAL_ETH_MspInit+0x168>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f040 809e 	bne.w	80064d8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800639c:	4b51      	ldr	r3, [pc, #324]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	4a50      	ldr	r2, [pc, #320]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063a6:	6313      	str	r3, [r2, #48]	; 0x30
 80063a8:	4b4e      	ldr	r3, [pc, #312]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b0:	623b      	str	r3, [r7, #32]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4b4b      	ldr	r3, [pc, #300]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	4a4a      	ldr	r2, [pc, #296]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063be:	6313      	str	r3, [r2, #48]	; 0x30
 80063c0:	4b48      	ldr	r3, [pc, #288]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4b45      	ldr	r3, [pc, #276]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4a44      	ldr	r2, [pc, #272]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063d6:	6313      	str	r3, [r2, #48]	; 0x30
 80063d8:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e4:	4b3f      	ldr	r3, [pc, #252]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e8:	4a3e      	ldr	r2, [pc, #248]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063ea:	f043 0304 	orr.w	r3, r3, #4
 80063ee:	6313      	str	r3, [r2, #48]	; 0x30
 80063f0:	4b3c      	ldr	r3, [pc, #240]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	4a38      	ldr	r2, [pc, #224]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	6313      	str	r3, [r2, #48]	; 0x30
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006414:	4b33      	ldr	r3, [pc, #204]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	4a32      	ldr	r2, [pc, #200]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 800641a:	f043 0302 	orr.w	r3, r3, #2
 800641e:	6313      	str	r3, [r2, #48]	; 0x30
 8006420:	4b30      	ldr	r3, [pc, #192]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800642c:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 8006432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006436:	6313      	str	r3, [r2, #48]	; 0x30
 8006438:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <HAL_ETH_MspInit+0x16c>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006444:	2332      	movs	r3, #50	; 0x32
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006448:	2302      	movs	r3, #2
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644c:	2300      	movs	r3, #0
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006450:	2303      	movs	r3, #3
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006454:	230b      	movs	r3, #11
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800645c:	4619      	mov	r1, r3
 800645e:	4822      	ldr	r0, [pc, #136]	; (80064e8 <HAL_ETH_MspInit+0x170>)
 8006460:	f7fd fae4 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006464:	2386      	movs	r3, #134	; 0x86
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006468:	2302      	movs	r3, #2
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646c:	2300      	movs	r3, #0
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006470:	2303      	movs	r3, #3
 8006472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006474:	230b      	movs	r3, #11
 8006476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800647c:	4619      	mov	r1, r3
 800647e:	481b      	ldr	r0, [pc, #108]	; (80064ec <HAL_ETH_MspInit+0x174>)
 8006480:	f7fd fad4 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648a:	2302      	movs	r3, #2
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648e:	2300      	movs	r3, #0
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006492:	2303      	movs	r3, #3
 8006494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006496:	230b      	movs	r3, #11
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800649a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800649e:	4619      	mov	r1, r3
 80064a0:	4813      	ldr	r0, [pc, #76]	; (80064f0 <HAL_ETH_MspInit+0x178>)
 80064a2:	f7fd fac3 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80064a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ac:	2302      	movs	r3, #2
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b4:	2303      	movs	r3, #3
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80064b8:	230b      	movs	r3, #11
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80064bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c0:	4619      	mov	r1, r3
 80064c2:	480c      	ldr	r0, [pc, #48]	; (80064f4 <HAL_ETH_MspInit+0x17c>)
 80064c4:	f7fd fab2 	bl	8003a2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80064c8:	2200      	movs	r2, #0
 80064ca:	2105      	movs	r1, #5
 80064cc:	203d      	movs	r0, #61	; 0x3d
 80064ce:	f7fb ff59 	bl	8002384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80064d2:	203d      	movs	r0, #61	; 0x3d
 80064d4:	f7fb ff72 	bl	80023bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80064d8:	bf00      	nop
 80064da:	3738      	adds	r7, #56	; 0x38
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	40028000 	.word	0x40028000
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40020800 	.word	0x40020800
 80064ec:	40020000 	.word	0x40020000
 80064f0:	40020400 	.word	0x40020400
 80064f4:	40021800 	.word	0x40021800

080064f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80064fc:	4802      	ldr	r0, [pc, #8]	; (8006508 <ETH_PHY_IO_Init+0x10>)
 80064fe:	f7fc fe2f 	bl	8003160 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20004fec 	.word	0x20004fec

0800650c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return 0;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	68f9      	ldr	r1, [r7, #12]
 800652e:	4807      	ldr	r0, [pc, #28]	; (800654c <ETH_PHY_IO_ReadReg+0x30>)
 8006530:	f7fc fc7e 	bl	8002e30 <HAL_ETH_ReadPHYRegister>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800653e:	e000      	b.n	8006542 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20004fec 	.word	0x20004fec

08006550 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	4807      	ldr	r0, [pc, #28]	; (8006580 <ETH_PHY_IO_WriteReg+0x30>)
 8006564:	f7fc fcaf 	bl	8002ec6 <HAL_ETH_WritePHYRegister>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006572:	e000      	b.n	8006576 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20004fec 	.word	0x20004fec

08006584 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006588:	f7fb fe14 	bl	80021b4 <HAL_GetTick>
 800658c:	4603      	mov	r3, r0
}
 800658e:	4618      	mov	r0, r3
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b0a0      	sub	sp, #128	; 0x80
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800659c:	f107 0308 	add.w	r3, r7, #8
 80065a0:	2264      	movs	r2, #100	; 0x64
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f011 fa56 	bl	8017a56 <memset>
  int32_t PHYLinkState = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065b2:	2300      	movs	r3, #0
 80065b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b6:	2300      	movs	r3, #0
 80065b8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80065be:	483a      	ldr	r0, [pc, #232]	; (80066a8 <ethernet_link_thread+0x114>)
 80065c0:	f7fb fd47 	bl	8002052 <LAN8742_GetLinkState>
 80065c4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80065c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065cc:	089b      	lsrs	r3, r3, #2
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <ethernet_link_thread+0x5e>
 80065d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065da:	2b01      	cmp	r3, #1
 80065dc:	dc09      	bgt.n	80065f2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80065de:	4833      	ldr	r0, [pc, #204]	; (80066ac <ethernet_link_thread+0x118>)
 80065e0:	f7fc f8e0 	bl	80027a4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80065e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065e6:	f007 fb1d 	bl	800dc24 <netif_set_down>
    netif_set_link_down(netif);
 80065ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065ec:	f007 fb80 	bl	800dcf0 <netif_set_link_down>
 80065f0:	e055      	b.n	800669e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80065f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d14e      	bne.n	800669e <ethernet_link_thread+0x10a>
 8006600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006602:	2b01      	cmp	r3, #1
 8006604:	dd4b      	ble.n	800669e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006608:	3b02      	subs	r3, #2
 800660a:	2b03      	cmp	r3, #3
 800660c:	d82a      	bhi.n	8006664 <ethernet_link_thread+0xd0>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <ethernet_link_thread+0x80>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006625 	.word	0x08006625
 8006618:	08006637 	.word	0x08006637
 800661c:	08006647 	.word	0x08006647
 8006620:	08006657 	.word	0x08006657
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006628:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800662a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800662e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006630:	2301      	movs	r3, #1
 8006632:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006634:	e017      	b.n	8006666 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006636:	2300      	movs	r3, #0
 8006638:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800663a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800663e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006640:	2301      	movs	r3, #1
 8006642:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006644:	e00f      	b.n	8006666 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800664a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800664c:	2300      	movs	r3, #0
 800664e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006650:	2301      	movs	r3, #1
 8006652:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006654:	e007      	b.n	8006666 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006656:	2300      	movs	r3, #0
 8006658:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800665a:	2300      	movs	r3, #0
 800665c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800665e:	2301      	movs	r3, #1
 8006660:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006662:	e000      	b.n	8006666 <ethernet_link_thread+0xd2>
    default:
      break;
 8006664:	bf00      	nop
    }

    if(linkchanged)
 8006666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d018      	beq.n	800669e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800666c:	f107 0308 	add.w	r3, r7, #8
 8006670:	4619      	mov	r1, r3
 8006672:	480e      	ldr	r0, [pc, #56]	; (80066ac <ethernet_link_thread+0x118>)
 8006674:	f7fc fc70 	bl	8002f58 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800667a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800667c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006680:	f107 0308 	add.w	r3, r7, #8
 8006684:	4619      	mov	r1, r3
 8006686:	4809      	ldr	r0, [pc, #36]	; (80066ac <ethernet_link_thread+0x118>)
 8006688:	f7fc fd50 	bl	800312c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800668c:	4807      	ldr	r0, [pc, #28]	; (80066ac <ethernet_link_thread+0x118>)
 800668e:	f7fb ff9b 	bl	80025c8 <HAL_ETH_Start>
      netif_set_up(netif);
 8006692:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006694:	f007 fa5a 	bl	800db4c <netif_set_up>
      netif_set_link_up(netif);
 8006698:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800669a:	f007 faf5 	bl	800dc88 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800669e:	2064      	movs	r0, #100	; 0x64
 80066a0:	f000 f9c2 	bl	8006a28 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80066a4:	e78b      	b.n	80065be <ethernet_link_thread+0x2a>
 80066a6:	bf00      	nop
 80066a8:	200050d4 	.word	0x200050d4
 80066ac:	20004fec 	.word	0x20004fec

080066b0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80066b8:	4812      	ldr	r0, [pc, #72]	; (8006704 <HAL_ETH_RxAllocateCallback+0x54>)
 80066ba:	f006 ffbf 	bl	800d63c <memp_malloc_pool>
 80066be:	60f8      	str	r0, [r7, #12]
  if (p)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d014      	beq.n	80066f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f103 0220 	add.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4a0d      	ldr	r2, [pc, #52]	; (8006708 <HAL_ETH_RxAllocateCallback+0x58>)
 80066d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80066de:	9201      	str	r2, [sp, #4]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2241      	movs	r2, #65	; 0x41
 80066e6:	2100      	movs	r1, #0
 80066e8:	2000      	movs	r0, #0
 80066ea:	f007 fd25 	bl	800e138 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80066ee:	e005      	b.n	80066fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_ETH_RxAllocateCallback+0x5c>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	0801de60 	.word	0x0801de60
 8006708:	08006329 	.word	0x08006329
 800670c:	20004fe0 	.word	0x20004fe0

08006710 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3b20      	subs	r3, #32
 800672e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2200      	movs	r2, #0
 800673a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	887a      	ldrh	r2, [r7, #2]
 8006740:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e003      	b.n	800675a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e009      	b.n	800677c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	891a      	ldrh	r2, [r3, #8]
 800676c:	887b      	ldrh	r3, [r7, #2]
 800676e:	4413      	add	r3, r2
 8006770:	b29a      	uxth	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f2      	bne.n	8006768 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff fb2c 	bl	8005de4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800678c:	bf00      	nop
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f007 fe85 	bl	800e4ac <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80067a2:	bf00      	nop
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067aa:	b480      	push	{r7}
 80067ac:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80067ae:	bf00      	nop
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ca:	f3ef 8310 	mrs	r3, PRIMASK
 80067ce:	607b      	str	r3, [r7, #4]
  return(result);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067d6:	f3ef 8311 	mrs	r3, BASEPRI
 80067da:	603b      	str	r3, [r7, #0]
  return(result);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <osKernelInitialize+0x3a>
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <osKernelInitialize+0x64>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d103      	bne.n	80067f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80067ea:	f06f 0305 	mvn.w	r3, #5
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e00c      	b.n	800680c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <osKernelInitialize+0x64>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067fa:	4b08      	ldr	r3, [pc, #32]	; (800681c <osKernelInitialize+0x64>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800680a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800680c:	68fb      	ldr	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	200050f4 	.word	0x200050f4

08006820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006826:	f3ef 8305 	mrs	r3, IPSR
 800682a:	60bb      	str	r3, [r7, #8]
  return(result);
 800682c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10f      	bne.n	8006852 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006832:	f3ef 8310 	mrs	r3, PRIMASK
 8006836:	607b      	str	r3, [r7, #4]
  return(result);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800683e:	f3ef 8311 	mrs	r3, BASEPRI
 8006842:	603b      	str	r3, [r7, #0]
  return(result);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <osKernelStart+0x3a>
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <osKernelStart+0x68>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d103      	bne.n	800685a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e010      	b.n	800687c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <osKernelStart+0x68>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d109      	bne.n	8006876 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006862:	f7ff ffa2 	bl	80067aa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <osKernelStart+0x68>)
 8006868:	2202      	movs	r2, #2
 800686a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800686c:	f002 f9e4 	bl	8008c38 <vTaskStartScheduler>
      stat = osOK;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e002      	b.n	800687c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800687a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200050f4 	.word	0x200050f4

0800688c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006892:	f3ef 8305 	mrs	r3, IPSR
 8006896:	60bb      	str	r3, [r7, #8]
  return(result);
 8006898:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10f      	bne.n	80068be <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689e:	f3ef 8310 	mrs	r3, PRIMASK
 80068a2:	607b      	str	r3, [r7, #4]
  return(result);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068aa:	f3ef 8311 	mrs	r3, BASEPRI
 80068ae:	603b      	str	r3, [r7, #0]
  return(result);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <osKernelGetTickCount+0x3a>
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <osKernelGetTickCount+0x4c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d103      	bne.n	80068c6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80068be:	f002 faed 	bl	8008e9c <xTaskGetTickCountFromISR>
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	e002      	b.n	80068cc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80068c6:	f002 fad9 	bl	8008e7c <xTaskGetTickCount>
 80068ca:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200050f4 	.word	0x200050f4

080068dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b090      	sub	sp, #64	; 0x40
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ec:	f3ef 8305 	mrs	r3, IPSR
 80068f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80068f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 808f 	bne.w	8006a18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fa:	f3ef 8310 	mrs	r3, PRIMASK
 80068fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006906:	f3ef 8311 	mrs	r3, BASEPRI
 800690a:	617b      	str	r3, [r7, #20]
  return(result);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <osThreadNew+0x3e>
 8006912:	4b44      	ldr	r3, [pc, #272]	; (8006a24 <osThreadNew+0x148>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d07e      	beq.n	8006a18 <osThreadNew+0x13c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d07b      	beq.n	8006a18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006924:	2318      	movs	r3, #24
 8006926:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006928:	2300      	movs	r3, #0
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006930:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d045      	beq.n	80069c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <osThreadNew+0x6a>
        name = attr->name;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <osThreadNew+0x90>
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	2b38      	cmp	r3, #56	; 0x38
 800695e:	d805      	bhi.n	800696c <osThreadNew+0x90>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <osThreadNew+0x94>
        return (NULL);
 800696c:	2300      	movs	r3, #0
 800696e:	e054      	b.n	8006a1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	089b      	lsrs	r3, r3, #2
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00e      	beq.n	80069a6 <osThreadNew+0xca>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	2bbb      	cmp	r3, #187	; 0xbb
 800698e:	d90a      	bls.n	80069a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <osThreadNew+0xca>
        mem = 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	623b      	str	r3, [r7, #32]
 80069a4:	e010      	b.n	80069c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10c      	bne.n	80069c8 <osThreadNew+0xec>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <osThreadNew+0xec>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <osThreadNew+0xec>
          mem = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	e001      	b.n	80069c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d110      	bne.n	80069f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069d6:	9202      	str	r2, [sp, #8]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f001 ff31 	bl	800884c <xTaskCreateStatic>
 80069ea:	4603      	mov	r3, r0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e013      	b.n	8006a18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d110      	bne.n	8006a18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f107 0310 	add.w	r3, r7, #16
 80069fe:	9301      	str	r3, [sp, #4]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f001 ff82 	bl	8008912 <xTaskCreate>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d001      	beq.n	8006a18 <osThreadNew+0x13c>
          hTask = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a18:	693b      	ldr	r3, [r7, #16]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3730      	adds	r7, #48	; 0x30
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200050f4 	.word	0x200050f4

08006a28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a30:	f3ef 8305 	mrs	r3, IPSR
 8006a34:	613b      	str	r3, [r7, #16]
  return(result);
 8006a36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10f      	bne.n	8006a5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a48:	f3ef 8311 	mrs	r3, BASEPRI
 8006a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <osDelay+0x3c>
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <osDelay+0x58>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d103      	bne.n	8006a64 <osDelay+0x3c>
    stat = osErrorISR;
 8006a5c:	f06f 0305 	mvn.w	r3, #5
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e007      	b.n	8006a74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f002 f8ac 	bl	8008bcc <vTaskDelay>
    }
  }

  return (stat);
 8006a74:	697b      	ldr	r3, [r7, #20]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200050f4 	.word	0x200050f4

08006a84 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a90:	f3ef 8305 	mrs	r3, IPSR
 8006a94:	613b      	str	r3, [r7, #16]
  return(result);
 8006a96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f040 8085 	bne.w	8006ba8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006aae:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <osMutexNew+0x3a>
 8006ab6:	4b3f      	ldr	r3, [pc, #252]	; (8006bb4 <osMutexNew+0x130>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d074      	beq.n	8006ba8 <osMutexNew+0x124>
    if (attr != NULL) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <osMutexNew+0x48>
      type = attr->attr_bits;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	623b      	str	r3, [r7, #32]
 8006aca:	e001      	b.n	8006ad0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <osMutexNew+0x5c>
      rmtx = 1U;
 8006ada:	2301      	movs	r3, #1
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	e001      	b.n	8006ae4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f003 0308 	and.w	r3, r3, #8
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d15c      	bne.n	8006ba8 <osMutexNew+0x124>
      mem = -1;
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d015      	beq.n	8006b26 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d006      	beq.n	8006b10 <osMutexNew+0x8c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b4f      	cmp	r3, #79	; 0x4f
 8006b08:	d902      	bls.n	8006b10 <osMutexNew+0x8c>
          mem = 1;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e00c      	b.n	8006b2a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <osMutexNew+0xa6>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <osMutexNew+0xa6>
            mem = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
 8006b24:	e001      	b.n	8006b2a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d112      	bne.n	8006b56 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	2004      	movs	r0, #4
 8006b3e:	f000 feb8 	bl	80078b2 <xQueueCreateMutexStatic>
 8006b42:	6278      	str	r0, [r7, #36]	; 0x24
 8006b44:	e016      	b.n	8006b74 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f000 feb0 	bl	80078b2 <xQueueCreateMutexStatic>
 8006b52:	6278      	str	r0, [r7, #36]	; 0x24
 8006b54:	e00e      	b.n	8006b74 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b62:	2004      	movs	r0, #4
 8006b64:	f000 fe8d 	bl	8007882 <xQueueCreateMutex>
 8006b68:	6278      	str	r0, [r7, #36]	; 0x24
 8006b6a:	e003      	b.n	8006b74 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	f000 fe88 	bl	8007882 <xQueueCreateMutex>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <osMutexNew+0x110>
        if (attr != NULL) {
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <osMutexNew+0x104>
          name = attr->name;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e001      	b.n	8006b8c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b8c:	6979      	ldr	r1, [r7, #20]
 8006b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b90:	f001 fdd4 	bl	800873c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <osMutexNew+0x124>
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3728      	adds	r7, #40	; 0x28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200050f4 	.word	0x200050f4

08006bb8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd6:	f3ef 8305 	mrs	r3, IPSR
 8006bda:	613b      	str	r3, [r7, #16]
  return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10f      	bne.n	8006c02 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be2:	f3ef 8310 	mrs	r3, PRIMASK
 8006be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d105      	bne.n	8006bfa <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <osMutexAcquire+0x52>
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <osMutexAcquire+0xb8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d103      	bne.n	8006c0a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006c02:	f06f 0305 	mvn.w	r3, #5
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e02c      	b.n	8006c64 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006c10:	f06f 0303 	mvn.w	r3, #3
 8006c14:	61fb      	str	r3, [r7, #28]
 8006c16:	e025      	b.n	8006c64 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d011      	beq.n	8006c42 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	69b8      	ldr	r0, [r7, #24]
 8006c22:	f000 fe97 	bl	8007954 <xQueueTakeMutexRecursive>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d01b      	beq.n	8006c64 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006c32:	f06f 0301 	mvn.w	r3, #1
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e014      	b.n	8006c64 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006c3a:	f06f 0302 	mvn.w	r3, #2
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e010      	b.n	8006c64 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	69b8      	ldr	r0, [r7, #24]
 8006c46:	f001 fa51 	bl	80080ec <xQueueSemaphoreTake>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d009      	beq.n	8006c64 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006c56:	f06f 0301 	mvn.w	r3, #1
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e002      	b.n	8006c64 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006c5e:	f06f 0302 	mvn.w	r3, #2
 8006c62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200050f4 	.word	0x200050f4

08006c74 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f023 0301 	bic.w	r3, r3, #1
 8006c82:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c90:	f3ef 8305 	mrs	r3, IPSR
 8006c94:	613b      	str	r3, [r7, #16]
  return(result);
 8006c96:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <osMutexRelease+0x50>
 8006cb4:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <osMutexRelease+0x9c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d103      	bne.n	8006cc4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006cbc:	f06f 0305 	mvn.w	r3, #5
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	e01f      	b.n	8006d04 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006cca:	f06f 0303 	mvn.w	r3, #3
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e018      	b.n	8006d04 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006cd8:	69b8      	ldr	r0, [r7, #24]
 8006cda:	f000 fe05 	bl	80078e8 <xQueueGiveMutexRecursive>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d00f      	beq.n	8006d04 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006ce4:	f06f 0302 	mvn.w	r3, #2
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e00b      	b.n	8006d04 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006cec:	2300      	movs	r3, #0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	69b8      	ldr	r0, [r7, #24]
 8006cf4:	f000 fed8 	bl	8007aa8 <xQueueGenericSend>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d002      	beq.n	8006d04 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006cfe:	f06f 0302 	mvn.w	r3, #2
 8006d02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006d04:	69fb      	ldr	r3, [r7, #28]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200050f4 	.word	0x200050f4

08006d14 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	; 0x30
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d24:	f3ef 8305 	mrs	r3, IPSR
 8006d28:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f040 8086 	bne.w	8006e3e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d32:	f3ef 8310 	mrs	r3, PRIMASK
 8006d36:	617b      	str	r3, [r7, #20]
  return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	613b      	str	r3, [r7, #16]
  return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <osSemaphoreNew+0x3e>
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <osSemaphoreNew+0x134>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d075      	beq.n	8006e3e <osSemaphoreNew+0x12a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d072      	beq.n	8006e3e <osSemaphoreNew+0x12a>
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d86e      	bhi.n	8006e3e <osSemaphoreNew+0x12a>
    mem = -1;
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d015      	beq.n	8006d98 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d006      	beq.n	8006d82 <osSemaphoreNew+0x6e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b4f      	cmp	r3, #79	; 0x4f
 8006d7a:	d902      	bls.n	8006d82 <osSemaphoreNew+0x6e>
        mem = 1;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	623b      	str	r3, [r7, #32]
 8006d80:	e00c      	b.n	8006d9c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <osSemaphoreNew+0x88>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d104      	bne.n	8006d9c <osSemaphoreNew+0x88>
          mem = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	e001      	b.n	8006d9c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da2:	d04c      	beq.n	8006e3e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d128      	bne.n	8006dfc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d10a      	bne.n	8006dc6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2203      	movs	r2, #3
 8006db6:	9200      	str	r2, [sp, #0]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2100      	movs	r1, #0
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f000 fc5f 	bl	8007680 <xQueueGenericCreateStatic>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006dc4:	e005      	b.n	8006dd2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f000 fcda 	bl	8007784 <xQueueGenericCreate>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d022      	beq.n	8006e1e <osSemaphoreNew+0x10a>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d01f      	beq.n	8006e1e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006dde:	2300      	movs	r3, #0
 8006de0:	2200      	movs	r2, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de6:	f000 fe5f 	bl	8007aa8 <xQueueGenericSend>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d016      	beq.n	8006e1e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006df2:	f001 fb55 	bl	80084a0 <vQueueDelete>
            hSemaphore = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e010      	b.n	8006e1e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d108      	bne.n	8006e14 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	461a      	mov	r2, r3
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fdda 	bl	80079c4 <xQueueCreateCountingSemaphoreStatic>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24
 8006e12:	e004      	b.n	8006e1e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fe0f 	bl	8007a3a <xQueueCreateCountingSemaphore>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00c      	beq.n	8006e3e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	61fb      	str	r3, [r7, #28]
 8006e30:	e001      	b.n	8006e36 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006e36:	69f9      	ldr	r1, [r7, #28]
 8006e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e3a:	f001 fc7f 	bl	800873c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	; 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	200050f4 	.word	0x200050f4

08006e4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006e64:	f06f 0303 	mvn.w	r3, #3
 8006e68:	61fb      	str	r3, [r7, #28]
 8006e6a:	e04b      	b.n	8006f04 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e6c:	f3ef 8305 	mrs	r3, IPSR
 8006e70:	617b      	str	r3, [r7, #20]
  return(result);
 8006e72:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10f      	bne.n	8006e98 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e78:	f3ef 8310 	mrs	r3, PRIMASK
 8006e7c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e84:	f3ef 8311 	mrs	r3, BASEPRI
 8006e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d026      	beq.n	8006ede <osSemaphoreAcquire+0x92>
 8006e90:	4b1f      	ldr	r3, [pc, #124]	; (8006f10 <osSemaphoreAcquire+0xc4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d122      	bne.n	8006ede <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006e9e:	f06f 0303 	mvn.w	r3, #3
 8006ea2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ea4:	e02d      	b.n	8006f02 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	461a      	mov	r2, r3
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	69b8      	ldr	r0, [r7, #24]
 8006eb4:	f001 fa2e 	bl	8008314 <xQueueReceiveFromISR>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d003      	beq.n	8006ec6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006ebe:	f06f 0302 	mvn.w	r3, #2
 8006ec2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ec4:	e01d      	b.n	8006f02 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <osSemaphoreAcquire+0xb6>
 8006ecc:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <osSemaphoreAcquire+0xc8>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006edc:	e011      	b.n	8006f02 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	69b8      	ldr	r0, [r7, #24]
 8006ee2:	f001 f903 	bl	80080ec <xQueueSemaphoreTake>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d00b      	beq.n	8006f04 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006ef2:	f06f 0301 	mvn.w	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	e004      	b.n	8006f04 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006efa:	f06f 0302 	mvn.w	r3, #2
 8006efe:	61fb      	str	r3, [r7, #28]
 8006f00:	e000      	b.n	8006f04 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006f02:	bf00      	nop
      }
    }
  }

  return (stat);
 8006f04:	69fb      	ldr	r3, [r7, #28]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200050f4 	.word	0x200050f4
 8006f14:	e000ed04 	.word	0xe000ed04

08006f18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d103      	bne.n	8006f36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006f2e:	f06f 0303 	mvn.w	r3, #3
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	e03e      	b.n	8006fb4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f36:	f3ef 8305 	mrs	r3, IPSR
 8006f3a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10f      	bne.n	8006f62 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f42:	f3ef 8310 	mrs	r3, PRIMASK
 8006f46:	613b      	str	r3, [r7, #16]
  return(result);
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f52:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01e      	beq.n	8006f98 <osSemaphoreRelease+0x80>
 8006f5a:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <osSemaphoreRelease+0xa8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d11a      	bne.n	8006f98 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	69b8      	ldr	r0, [r7, #24]
 8006f6e:	f000 ff41 	bl	8007df4 <xQueueGiveFromISR>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d003      	beq.n	8006f80 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006f78:	f06f 0302 	mvn.w	r3, #2
 8006f7c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f7e:	e018      	b.n	8006fb2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d015      	beq.n	8006fb2 <osSemaphoreRelease+0x9a>
 8006f86:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <osSemaphoreRelease+0xac>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006f96:	e00c      	b.n	8006fb2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	69b8      	ldr	r0, [r7, #24]
 8006fa0:	f000 fd82 	bl	8007aa8 <xQueueGenericSend>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d004      	beq.n	8006fb4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006faa:	f06f 0302 	mvn.w	r3, #2
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e000      	b.n	8006fb4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fb2:	bf00      	nop
    }
  }

  return (stat);
 8006fb4:	69fb      	ldr	r3, [r7, #28]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200050f4 	.word	0x200050f4
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd4:	f3ef 8305 	mrs	r3, IPSR
 8006fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8006fda:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10f      	bne.n	8007000 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe4:	613b      	str	r3, [r7, #16]
  return(result);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006fec:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <osSemaphoreDelete+0x40>
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <osSemaphoreDelete+0x68>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d103      	bne.n	8007008 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007000:	f06f 0305 	mvn.w	r3, #5
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	e00e      	b.n	8007026 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800700e:	f06f 0303 	mvn.w	r3, #3
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	e007      	b.n	8007026 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007016:	69b8      	ldr	r0, [r7, #24]
 8007018:	f001 fbba 	bl	8008790 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007020:	69b8      	ldr	r0, [r7, #24]
 8007022:	f001 fa3d 	bl	80084a0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007026:	69fb      	ldr	r3, [r7, #28]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	200050f4 	.word	0x200050f4

08007034 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b08c      	sub	sp, #48	; 0x30
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007044:	f3ef 8305 	mrs	r3, IPSR
 8007048:	61bb      	str	r3, [r7, #24]
  return(result);
 800704a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800704c:	2b00      	cmp	r3, #0
 800704e:	d16f      	bne.n	8007130 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	617b      	str	r3, [r7, #20]
  return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d105      	bne.n	8007068 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800705c:	f3ef 8311 	mrs	r3, BASEPRI
 8007060:	613b      	str	r3, [r7, #16]
  return(result);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <osMessageQueueNew+0x3c>
 8007068:	4b34      	ldr	r3, [pc, #208]	; (800713c <osMessageQueueNew+0x108>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d05f      	beq.n	8007130 <osMessageQueueNew+0xfc>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d05c      	beq.n	8007130 <osMessageQueueNew+0xfc>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d059      	beq.n	8007130 <osMessageQueueNew+0xfc>
    mem = -1;
 800707c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007080:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d029      	beq.n	80070dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d012      	beq.n	80070b6 <osMessageQueueNew+0x82>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	2b4f      	cmp	r3, #79	; 0x4f
 8007096:	d90e      	bls.n	80070b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d302      	bcc.n	80070b6 <osMessageQueueNew+0x82>
        mem = 1;
 80070b0:	2301      	movs	r3, #1
 80070b2:	623b      	str	r3, [r7, #32]
 80070b4:	e014      	b.n	80070e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <osMessageQueueNew+0xac>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10c      	bne.n	80070e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d108      	bne.n	80070e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <osMessageQueueNew+0xac>
          mem = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	623b      	str	r3, [r7, #32]
 80070da:	e001      	b.n	80070e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10b      	bne.n	80070fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2100      	movs	r1, #0
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fac3 	bl	8007680 <xQueueGenericCreateStatic>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24
 80070fc:	e008      	b.n	8007110 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007104:	2200      	movs	r2, #0
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fb3b 	bl	8007784 <xQueueGenericCreate>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <osMessageQueueNew+0xf0>
        name = attr->name;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e001      	b.n	8007128 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800712c:	f001 fb06 	bl	800873c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007132:	4618      	mov	r0, r3
 8007134:	3728      	adds	r7, #40	; 0x28
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200050f4 	.word	0x200050f4

08007140 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007158:	f3ef 8305 	mrs	r3, IPSR
 800715c:	61fb      	str	r3, [r7, #28]
  return(result);
 800715e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007164:	f3ef 8310 	mrs	r3, PRIMASK
 8007168:	61bb      	str	r3, [r7, #24]
  return(result);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007170:	f3ef 8311 	mrs	r3, BASEPRI
 8007174:	617b      	str	r3, [r7, #20]
  return(result);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02c      	beq.n	80071d6 <osMessageQueuePut+0x96>
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <osMessageQueuePut+0xe0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d128      	bne.n	80071d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <osMessageQueuePut+0x56>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <osMessageQueuePut+0x56>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007196:	f06f 0303 	mvn.w	r3, #3
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800719c:	e039      	b.n	8007212 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80071a2:	f107 0210 	add.w	r2, r7, #16
 80071a6:	2300      	movs	r3, #0
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	6a38      	ldr	r0, [r7, #32]
 80071ac:	f000 fd82 	bl	8007cb4 <xQueueGenericSendFromISR>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d003      	beq.n	80071be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80071b6:	f06f 0302 	mvn.w	r3, #2
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071bc:	e029      	b.n	8007212 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d026      	beq.n	8007212 <osMessageQueuePut+0xd2>
 80071c4:	4b17      	ldr	r3, [pc, #92]	; (8007224 <osMessageQueuePut+0xe4>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071d4:	e01d      	b.n	8007212 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <osMessageQueuePut+0xa2>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80071e2:	f06f 0303 	mvn.w	r3, #3
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
 80071e8:	e014      	b.n	8007214 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80071ea:	2300      	movs	r3, #0
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	6a38      	ldr	r0, [r7, #32]
 80071f2:	f000 fc59 	bl	8007aa8 <xQueueGenericSend>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d00b      	beq.n	8007214 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007202:	f06f 0301 	mvn.w	r3, #1
 8007206:	627b      	str	r3, [r7, #36]	; 0x24
 8007208:	e004      	b.n	8007214 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800720a:	f06f 0302 	mvn.w	r3, #2
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
 8007210:	e000      	b.n	8007214 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007212:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007216:	4618      	mov	r0, r3
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	200050f4 	.word	0x200050f4
 8007224:	e000ed04 	.word	0xe000ed04

08007228 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800723e:	f3ef 8305 	mrs	r3, IPSR
 8007242:	61fb      	str	r3, [r7, #28]
  return(result);
 8007244:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724a:	f3ef 8310 	mrs	r3, PRIMASK
 800724e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d105      	bne.n	8007262 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007256:	f3ef 8311 	mrs	r3, BASEPRI
 800725a:	617b      	str	r3, [r7, #20]
  return(result);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d02c      	beq.n	80072bc <osMessageQueueGet+0x94>
 8007262:	4b28      	ldr	r3, [pc, #160]	; (8007304 <osMessageQueueGet+0xdc>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d128      	bne.n	80072bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <osMessageQueueGet+0x54>
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <osMessageQueueGet+0x54>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800727c:	f06f 0303 	mvn.w	r3, #3
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007282:	e038      	b.n	80072f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007288:	f107 0310 	add.w	r3, r7, #16
 800728c:	461a      	mov	r2, r3
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	6a38      	ldr	r0, [r7, #32]
 8007292:	f001 f83f 	bl	8008314 <xQueueReceiveFromISR>
 8007296:	4603      	mov	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d003      	beq.n	80072a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800729c:	f06f 0302 	mvn.w	r3, #2
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072a2:	e028      	b.n	80072f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d025      	beq.n	80072f6 <osMessageQueueGet+0xce>
 80072aa:	4b17      	ldr	r3, [pc, #92]	; (8007308 <osMessageQueueGet+0xe0>)
 80072ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072ba:	e01c      	b.n	80072f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <osMessageQueueGet+0xa0>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d103      	bne.n	80072d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80072c8:	f06f 0303 	mvn.w	r3, #3
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
 80072ce:	e013      	b.n	80072f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	6a38      	ldr	r0, [r7, #32]
 80072d6:	f000 fe23 	bl	8007f20 <xQueueReceive>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d00b      	beq.n	80072f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80072e6:	f06f 0301 	mvn.w	r3, #1
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
 80072ec:	e004      	b.n	80072f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80072ee:	f06f 0302 	mvn.w	r3, #2
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
 80072f4:	e000      	b.n	80072f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3728      	adds	r7, #40	; 0x28
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200050f4 	.word	0x200050f4
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <osMessageQueueGetCount+0x18>
    count = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e01e      	b.n	8007362 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007324:	f3ef 8305 	mrs	r3, IPSR
 8007328:	617b      	str	r3, [r7, #20]
  return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10f      	bne.n	8007350 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007330:	f3ef 8310 	mrs	r3, PRIMASK
 8007334:	613b      	str	r3, [r7, #16]
  return(result);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800733c:	f3ef 8311 	mrs	r3, BASEPRI
 8007340:	60fb      	str	r3, [r7, #12]
  return(result);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <osMessageQueueGetCount+0x4e>
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <osMessageQueueGetCount+0x60>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d104      	bne.n	800735a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007350:	69b8      	ldr	r0, [r7, #24]
 8007352:	f001 f885 	bl	8008460 <uxQueueMessagesWaitingFromISR>
 8007356:	61f8      	str	r0, [r7, #28]
 8007358:	e003      	b.n	8007362 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800735a:	69b8      	ldr	r0, [r7, #24]
 800735c:	f001 f860 	bl	8008420 <uxQueueMessagesWaiting>
 8007360:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007362:	69fb      	ldr	r3, [r7, #28]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200050f4 	.word	0x200050f4

08007370 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800737c:	f3ef 8305 	mrs	r3, IPSR
 8007380:	617b      	str	r3, [r7, #20]
  return(result);
 8007382:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10f      	bne.n	80073a8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007388:	f3ef 8310 	mrs	r3, PRIMASK
 800738c:	613b      	str	r3, [r7, #16]
  return(result);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007394:	f3ef 8311 	mrs	r3, BASEPRI
 8007398:	60fb      	str	r3, [r7, #12]
  return(result);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d007      	beq.n	80073b0 <osMessageQueueDelete+0x40>
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <osMessageQueueDelete+0x68>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d103      	bne.n	80073b0 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80073a8:	f06f 0305 	mvn.w	r3, #5
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	e00e      	b.n	80073ce <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80073b6:	f06f 0303 	mvn.w	r3, #3
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e007      	b.n	80073ce <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80073be:	69b8      	ldr	r0, [r7, #24]
 80073c0:	f001 f9e6 	bl	8008790 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80073c8:	69b8      	ldr	r0, [r7, #24]
 80073ca:	f001 f869 	bl	80084a0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80073ce:	69fb      	ldr	r3, [r7, #28]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	200050f4 	.word	0x200050f4

080073dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a07      	ldr	r2, [pc, #28]	; (8007408 <vApplicationGetIdleTaskMemory+0x2c>)
 80073ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	4a06      	ldr	r2, [pc, #24]	; (800740c <vApplicationGetIdleTaskMemory+0x30>)
 80073f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2280      	movs	r2, #128	; 0x80
 80073f8:	601a      	str	r2, [r3, #0]
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	200050f8 	.word	0x200050f8
 800740c:	200051b4 	.word	0x200051b4

08007410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a07      	ldr	r2, [pc, #28]	; (800743c <vApplicationGetTimerTaskMemory+0x2c>)
 8007420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4a06      	ldr	r2, [pc, #24]	; (8007440 <vApplicationGetTimerTaskMemory+0x30>)
 8007426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800742e:	601a      	str	r2, [r3, #0]
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	200053b4 	.word	0x200053b4
 8007440:	20005470 	.word	0x20005470

08007444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0208 	add.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800745c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f103 0208 	add.w	r2, r3, #8
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 0208 	add.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074fc:	d103      	bne.n	8007506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e00c      	b.n	8007520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3308      	adds	r3, #8
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e002      	b.n	8007514 <vListInsert+0x2e>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d2f6      	bcs.n	800750e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	601a      	str	r2, [r3, #0]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6892      	ldr	r2, [r2, #8]
 800756e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6852      	ldr	r2, [r2, #4]
 8007578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d103      	bne.n	800758c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	1e5a      	subs	r2, r3, #1
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	b672      	cpsid	i
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	b662      	cpsie	i
 80075d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80075da:	f002 fe0f 	bl	800a1fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	441a      	add	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	3b01      	subs	r3, #1
 800760c:	68f9      	ldr	r1, [r7, #12]
 800760e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007610:	fb01 f303 	mul.w	r3, r1, r3
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	22ff      	movs	r2, #255	; 0xff
 800761e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d114      	bne.n	800765a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01a      	beq.n	800766e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3310      	adds	r3, #16
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fdb5 	bl	80091ac <xTaskRemoveFromEventList>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d012      	beq.n	800766e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007648:	4b0c      	ldr	r3, [pc, #48]	; (800767c <xQueueGenericReset+0xd0>)
 800764a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	e009      	b.n	800766e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3310      	adds	r3, #16
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fef0 	bl	8007444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3324      	adds	r3, #36	; 0x24
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff feeb 	bl	8007444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800766e:	f002 fdf9 	bl	800a264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007672:	2301      	movs	r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08e      	sub	sp, #56	; 0x38
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10c      	bne.n	80076ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	b672      	cpsid	i
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	b662      	cpsie	i
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10c      	bne.n	80076ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	b672      	cpsid	i
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	b662      	cpsie	i
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <xQueueGenericCreateStatic+0x5a>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <xQueueGenericCreateStatic+0x5e>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <xQueueGenericCreateStatic+0x60>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10c      	bne.n	80076fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	b672      	cpsid	i
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	b662      	cpsie	i
 80076f8:	623b      	str	r3, [r7, #32]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <xQueueGenericCreateStatic+0x8a>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <xQueueGenericCreateStatic+0x8e>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <xQueueGenericCreateStatic+0x90>
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10c      	bne.n	800772e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	b672      	cpsid	i
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	b662      	cpsie	i
 8007728:	61fb      	str	r3, [r7, #28]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800772e:	2350      	movs	r3, #80	; 0x50
 8007730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b50      	cmp	r3, #80	; 0x50
 8007736:	d00c      	beq.n	8007752 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	b672      	cpsid	i
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	b662      	cpsie	i
 800774c:	61bb      	str	r3, [r7, #24]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4613      	mov	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f847 	bl	8007808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800777c:	4618      	mov	r0, r3
 800777e:	3730      	adds	r7, #48	; 0x30
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08a      	sub	sp, #40	; 0x28
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10c      	bne.n	80077b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	b672      	cpsid	i
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	b662      	cpsie	i
 80077ac:	613b      	str	r3, [r7, #16]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	e004      	b.n	80077c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3350      	adds	r3, #80	; 0x50
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 fe41 	bl	800a454 <pvPortMalloc>
 80077d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d011      	beq.n	80077fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3350      	adds	r3, #80	; 0x50
 80077e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077ec:	79fa      	ldrb	r2, [r7, #7]
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	4613      	mov	r3, r2
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f805 	bl	8007808 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007800:	4618      	mov	r0, r3
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d103      	bne.n	8007824 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	e002      	b.n	800782a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007836:	2101      	movs	r1, #1
 8007838:	69b8      	ldr	r0, [r7, #24]
 800783a:	f7ff feb7 	bl	80075ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800786e:	2300      	movs	r3, #0
 8007870:	2200      	movs	r2, #0
 8007872:	2100      	movs	r1, #0
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f917 	bl	8007aa8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007882:	b580      	push	{r7, lr}
 8007884:	b086      	sub	sp, #24
 8007886:	af00      	add	r7, sp, #0
 8007888:	4603      	mov	r3, r0
 800788a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
 8007890:	2300      	movs	r3, #0
 8007892:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	461a      	mov	r2, r3
 8007898:	6939      	ldr	r1, [r7, #16]
 800789a:	6978      	ldr	r0, [r7, #20]
 800789c:	f7ff ff72 	bl	8007784 <xQueueGenericCreate>
 80078a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff ffd3 	bl	800784e <prvInitialiseMutex>

		return xNewQueue;
 80078a8:	68fb      	ldr	r3, [r7, #12]
	}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b088      	sub	sp, #32
 80078b6:	af02      	add	r7, sp, #8
 80078b8:	4603      	mov	r3, r0
 80078ba:	6039      	str	r1, [r7, #0]
 80078bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078be:	2301      	movs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2200      	movs	r2, #0
 80078ce:	6939      	ldr	r1, [r7, #16]
 80078d0:	6978      	ldr	r0, [r7, #20]
 80078d2:	f7ff fed5 	bl	8007680 <xQueueGenericCreateStatic>
 80078d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ffb8 	bl	800784e <prvInitialiseMutex>

		return xNewQueue;
 80078de:	68fb      	ldr	r3, [r7, #12]
	}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	689c      	ldr	r4, [r3, #8]
 8007918:	f001 fe12 	bl	8009540 <xTaskGetCurrentTaskHandle>
 800791c:	4603      	mov	r3, r0
 800791e:	429c      	cmp	r4, r3
 8007920:	d111      	bne.n	8007946 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	1e5a      	subs	r2, r3, #1
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007934:	2300      	movs	r3, #0
 8007936:	2200      	movs	r2, #0
 8007938:	2100      	movs	r1, #0
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f000 f8b4 	bl	8007aa8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	e001      	b.n	800794a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800794a:	697b      	ldr	r3, [r7, #20]
	}
 800794c:	4618      	mov	r0, r3
 800794e:	371c      	adds	r7, #28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd90      	pop	{r4, r7, pc}

08007954 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10c      	bne.n	8007982 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	b672      	cpsid	i
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	b662      	cpsie	i
 800797c:	60fb      	str	r3, [r7, #12]
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	689c      	ldr	r4, [r3, #8]
 8007986:	f001 fddb 	bl	8009540 <xTaskGetCurrentTaskHandle>
 800798a:	4603      	mov	r3, r0
 800798c:	429c      	cmp	r4, r3
 800798e:	d107      	bne.n	80079a0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	e00c      	b.n	80079ba <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6938      	ldr	r0, [r7, #16]
 80079a4:	f000 fba2 	bl	80080ec <xQueueSemaphoreTake>
 80079a8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80079ba:	697b      	ldr	r3, [r7, #20]
	}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd90      	pop	{r4, r7, pc}

080079c4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	61bb      	str	r3, [r7, #24]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d90c      	bls.n	8007a12 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	b672      	cpsid	i
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	b662      	cpsie	i
 8007a0c:	617b      	str	r3, [r7, #20]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a12:	2302      	movs	r3, #2
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff fe2f 	bl	8007680 <xQueueGenericCreateStatic>
 8007a22:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a30:	69fb      	ldr	r3, [r7, #28]
	}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10c      	bne.n	8007a64 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	b672      	cpsid	i
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	b662      	cpsie	i
 8007a5e:	613b      	str	r3, [r7, #16]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d90c      	bls.n	8007a86 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	b672      	cpsid	i
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	b662      	cpsie	i
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007a86:	2202      	movs	r2, #2
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fe7a 	bl	8007784 <xQueueGenericCreate>
 8007a90:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007a9e:	697b      	ldr	r3, [r7, #20]
	}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10c      	bne.n	8007ade <xQueueGenericSend+0x36>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	b672      	cpsid	i
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	b662      	cpsie	i
 8007ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <xQueueGenericSend+0x44>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <xQueueGenericSend+0x48>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e000      	b.n	8007af2 <xQueueGenericSend+0x4a>
 8007af0:	2300      	movs	r3, #0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <xQueueGenericSend+0x68>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	b672      	cpsid	i
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	b662      	cpsie	i
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b0c:	bf00      	nop
 8007b0e:	e7fe      	b.n	8007b0e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d103      	bne.n	8007b1e <xQueueGenericSend+0x76>
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <xQueueGenericSend+0x7a>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <xQueueGenericSend+0x7c>
 8007b22:	2300      	movs	r3, #0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10c      	bne.n	8007b42 <xQueueGenericSend+0x9a>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	b672      	cpsid	i
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	b662      	cpsie	i
 8007b3c:	623b      	str	r3, [r7, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b42:	f001 fd0d 	bl	8009560 <xTaskGetSchedulerState>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <xQueueGenericSend+0xaa>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <xQueueGenericSend+0xae>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGenericSend+0xb0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <xQueueGenericSend+0xce>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	61fb      	str	r3, [r7, #28]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b76:	f002 fb41 	bl	800a1fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <xQueueGenericSend+0xe4>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d129      	bne.n	8007be0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b92:	f000 fcc2 	bl	800851a <prvCopyDataToQueue>
 8007b96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d010      	beq.n	8007bc2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	3324      	adds	r3, #36	; 0x24
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f001 fb01 	bl	80091ac <xTaskRemoveFromEventList>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bb0:	4b3f      	ldr	r3, [pc, #252]	; (8007cb0 <xQueueGenericSend+0x208>)
 8007bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	e00a      	b.n	8007bd8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bc8:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <xQueueGenericSend+0x208>)
 8007bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bd8:	f002 fb44 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e063      	b.n	8007ca8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007be6:	f002 fb3d 	bl	800a264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e05c      	b.n	8007ca8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 fb3d 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c02:	f002 fb2f 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c06:	f001 f88b 	bl	8008d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c0a:	f002 faf7 	bl	800a1fc <vPortEnterCritical>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c1a:	d103      	bne.n	8007c24 <xQueueGenericSend+0x17c>
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c30:	d103      	bne.n	8007c3a <xQueueGenericSend+0x192>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3a:	f002 fb13 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c3e:	1d3a      	adds	r2, r7, #4
 8007c40:	f107 0314 	add.w	r3, r7, #20
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 fb2c 	bl	80092a4 <xTaskCheckForTimeOut>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d124      	bne.n	8007c9c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c54:	f000 fd59 	bl	800870a <prvIsQueueFull>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d018      	beq.n	8007c90 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	3310      	adds	r3, #16
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 fa4c 	bl	8009104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6e:	f000 fce4 	bl	800863a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c72:	f001 f863 	bl	8008d3c <xTaskResumeAll>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f47f af7c 	bne.w	8007b76 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <xQueueGenericSend+0x208>)
 8007c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	e772      	b.n	8007b76 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c92:	f000 fcd2 	bl	800863a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c96:	f001 f851 	bl	8008d3c <xTaskResumeAll>
 8007c9a:	e76c      	b.n	8007b76 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c9e:	f000 fccc 	bl	800863a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ca2:	f001 f84b 	bl	8008d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ca6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3738      	adds	r7, #56	; 0x38
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	e000ed04 	.word	0xe000ed04

08007cb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	; 0x38
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10c      	bne.n	8007ce6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	b672      	cpsid	i
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	b662      	cpsie	i
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d103      	bne.n	8007cf4 <xQueueGenericSendFromISR+0x40>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <xQueueGenericSendFromISR+0x44>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e000      	b.n	8007cfa <xQueueGenericSendFromISR+0x46>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10c      	bne.n	8007d18 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	623b      	str	r3, [r7, #32]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d103      	bne.n	8007d26 <xQueueGenericSendFromISR+0x72>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <xQueueGenericSendFromISR+0x76>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueGenericSendFromISR+0x78>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10c      	bne.n	8007d4a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	b672      	cpsid	i
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	b662      	cpsie	i
 8007d44:	61fb      	str	r3, [r7, #28]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d4a:	f002 fb3f 	bl	800a3cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d4e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	b672      	cpsid	i
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	b662      	cpsie	i
 8007d66:	61ba      	str	r2, [r7, #24]
 8007d68:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d302      	bcc.n	8007d80 <xQueueGenericSendFromISR+0xcc>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d12c      	bne.n	8007dda <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	68b9      	ldr	r1, [r7, #8]
 8007d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d90:	f000 fbc3 	bl	800851a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d9c:	d112      	bne.n	8007dc4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	3324      	adds	r3, #36	; 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 f9fe 	bl	80091ac <xTaskRemoveFromEventList>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00e      	beq.n	8007dd4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e007      	b.n	8007dd4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	b25a      	sxtb	r2, r3
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007dd8:	e001      	b.n	8007dde <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007de8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3738      	adds	r7, #56	; 0x38
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	623b      	str	r3, [r7, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	b672      	cpsid	i
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	b662      	cpsie	i
 8007e3e:	61fb      	str	r3, [r7, #28]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d103      	bne.n	8007e54 <xQueueGiveFromISR+0x60>
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <xQueueGiveFromISR+0x64>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <xQueueGiveFromISR+0x66>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10c      	bne.n	8007e78 <xQueueGiveFromISR+0x84>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	61bb      	str	r3, [r7, #24]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e78:	f002 faa8 	bl	800a3cc <vPortValidateInterruptPriority>
	__asm volatile
 8007e7c:	f3ef 8211 	mrs	r2, BASEPRI
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	617a      	str	r2, [r7, #20]
 8007e96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007e98:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d22b      	bcs.n	8007f04 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ebe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec6:	d112      	bne.n	8007eee <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d016      	beq.n	8007efe <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 f969 	bl	80091ac <xTaskRemoveFromEventList>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00e      	beq.n	8007efe <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e007      	b.n	8007efe <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	b25a      	sxtb	r2, r3
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007efe:	2301      	movs	r3, #1
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
 8007f02:	e001      	b.n	8007f08 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
 8007f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f383 8811 	msr	BASEPRI, r3
}
 8007f12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3738      	adds	r7, #56	; 0x38
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10c      	bne.n	8007f54 <xQueueReceive+0x34>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	b672      	cpsid	i
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	b662      	cpsie	i
 8007f4e:	623b      	str	r3, [r7, #32]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <xQueueReceive+0x42>
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <xQueueReceive+0x46>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <xQueueReceive+0x48>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10c      	bne.n	8007f86 <xQueueReceive+0x66>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	61fb      	str	r3, [r7, #28]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f86:	f001 faeb 	bl	8009560 <xTaskGetSchedulerState>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <xQueueReceive+0x76>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <xQueueReceive+0x7a>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <xQueueReceive+0x7c>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10c      	bne.n	8007fba <xQueueReceive+0x9a>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	b672      	cpsid	i
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	b662      	cpsie	i
 8007fb4:	61bb      	str	r3, [r7, #24]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fba:	f002 f91f 	bl	800a1fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01f      	beq.n	800800a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fca:	68b9      	ldr	r1, [r7, #8]
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fce:	f000 fb0e 	bl	80085ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f8e0 	bl	80091ac <xTaskRemoveFromEventList>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ff2:	4b3d      	ldr	r3, [pc, #244]	; (80080e8 <xQueueReceive+0x1c8>)
 8007ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008002:	f002 f92f 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 8008006:	2301      	movs	r3, #1
 8008008:	e069      	b.n	80080de <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008010:	f002 f928 	bl	800a264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008014:	2300      	movs	r3, #0
 8008016:	e062      	b.n	80080de <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	4618      	mov	r0, r3
 8008024:	f001 f928 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800802c:	f002 f91a 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008030:	f000 fe76 	bl	8008d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008034:	f002 f8e2 	bl	800a1fc <vPortEnterCritical>
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008044:	d103      	bne.n	800804e <xQueueReceive+0x12e>
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008054:	b25b      	sxtb	r3, r3
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805a:	d103      	bne.n	8008064 <xQueueReceive+0x144>
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008064:	f002 f8fe 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008068:	1d3a      	adds	r2, r7, #4
 800806a:	f107 0310 	add.w	r3, r7, #16
 800806e:	4611      	mov	r1, r2
 8008070:	4618      	mov	r0, r3
 8008072:	f001 f917 	bl	80092a4 <xTaskCheckForTimeOut>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d123      	bne.n	80080c4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800807c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807e:	f000 fb2e 	bl	80086de <prvIsQueueEmpty>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d017      	beq.n	80080b8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	3324      	adds	r3, #36	; 0x24
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f001 f837 	bl	8009104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008098:	f000 facf 	bl	800863a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800809c:	f000 fe4e 	bl	8008d3c <xTaskResumeAll>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d189      	bne.n	8007fba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <xQueueReceive+0x1c8>)
 80080a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	e780      	b.n	8007fba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ba:	f000 fabe 	bl	800863a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080be:	f000 fe3d 	bl	8008d3c <xTaskResumeAll>
 80080c2:	e77a      	b.n	8007fba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080c6:	f000 fab8 	bl	800863a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080ca:	f000 fe37 	bl	8008d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d0:	f000 fb05 	bl	80086de <prvIsQueueEmpty>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f43f af6f 	beq.w	8007fba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3730      	adds	r7, #48	; 0x30
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	e000ed04 	.word	0xe000ed04

080080ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080fe:	2300      	movs	r3, #0
 8008100:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10c      	bne.n	8008122 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	623b      	str	r3, [r7, #32]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00c      	beq.n	8008144 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	b672      	cpsid	i
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	b662      	cpsie	i
 800813e:	61fb      	str	r3, [r7, #28]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008144:	f001 fa0c 	bl	8009560 <xTaskGetSchedulerState>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d102      	bne.n	8008154 <xQueueSemaphoreTake+0x68>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <xQueueSemaphoreTake+0x6c>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <xQueueSemaphoreTake+0x6e>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10c      	bne.n	8008178 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	b672      	cpsid	i
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	b662      	cpsie	i
 8008172:	61bb      	str	r3, [r7, #24]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008178:	f002 f840 	bl	800a1fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	2b00      	cmp	r3, #0
 8008186:	d024      	beq.n	80081d2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	1e5a      	subs	r2, r3, #1
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008198:	f001 fb60 	bl	800985c <pvTaskIncrementMutexHeldCount>
 800819c:	4602      	mov	r2, r0
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	3310      	adds	r3, #16
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fffc 	bl	80091ac <xTaskRemoveFromEventList>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081ba:	4b55      	ldr	r3, [pc, #340]	; (8008310 <xQueueSemaphoreTake+0x224>)
 80081bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081ca:	f002 f84b 	bl	800a264 <vPortExitCritical>
				return pdPASS;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e099      	b.n	8008306 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d113      	bne.n	8008200 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	b672      	cpsid	i
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	b662      	cpsie	i
 80081f2:	617b      	str	r3, [r7, #20]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081f8:	f002 f834 	bl	800a264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e082      	b.n	8008306 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008206:	f107 030c 	add.w	r3, r7, #12
 800820a:	4618      	mov	r0, r3
 800820c:	f001 f834 	bl	8009278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008210:	2301      	movs	r3, #1
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008214:	f002 f826 	bl	800a264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008218:	f000 fd82 	bl	8008d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800821c:	f001 ffee 	bl	800a1fc <vPortEnterCritical>
 8008220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008226:	b25b      	sxtb	r3, r3
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800822c:	d103      	bne.n	8008236 <xQueueSemaphoreTake+0x14a>
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823c:	b25b      	sxtb	r3, r3
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008242:	d103      	bne.n	800824c <xQueueSemaphoreTake+0x160>
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800824c:	f002 f80a 	bl	800a264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008250:	463a      	mov	r2, r7
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f823 	bl	80092a4 <xTaskCheckForTimeOut>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d132      	bne.n	80082ca <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008266:	f000 fa3a 	bl	80086de <prvIsQueueEmpty>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d026      	beq.n	80082be <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008278:	f001 ffc0 	bl	800a1fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	4618      	mov	r0, r3
 8008282:	f001 f98b 	bl	800959c <xTaskPriorityInherit>
 8008286:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008288:	f001 ffec 	bl	800a264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	3324      	adds	r3, #36	; 0x24
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f000 ff35 	bl	8009104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800829a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800829c:	f000 f9cd 	bl	800863a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082a0:	f000 fd4c 	bl	8008d3c <xTaskResumeAll>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f47f af66 	bne.w	8008178 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80082ac:	4b18      	ldr	r3, [pc, #96]	; (8008310 <xQueueSemaphoreTake+0x224>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	e75c      	b.n	8008178 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082c0:	f000 f9bb 	bl	800863a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082c4:	f000 fd3a 	bl	8008d3c <xTaskResumeAll>
 80082c8:	e756      	b.n	8008178 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082cc:	f000 f9b5 	bl	800863a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d0:	f000 fd34 	bl	8008d3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082d6:	f000 fa02 	bl	80086de <prvIsQueueEmpty>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f43f af4b 	beq.w	8008178 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00d      	beq.n	8008304 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80082e8:	f001 ff88 	bl	800a1fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ee:	f000 f8fc 	bl	80084ea <prvGetDisinheritPriorityAfterTimeout>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fa28 	bl	8009750 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008300:	f001 ffb0 	bl	800a264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008306:	4618      	mov	r0, r3
 8008308:	3738      	adds	r7, #56	; 0x38
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	e000ed04 	.word	0xe000ed04

08008314 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08e      	sub	sp, #56	; 0x38
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	b672      	cpsid	i
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	b662      	cpsie	i
 800833e:	623b      	str	r3, [r7, #32]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d103      	bne.n	8008352 <xQueueReceiveFromISR+0x3e>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <xQueueReceiveFromISR+0x42>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <xQueueReceiveFromISR+0x44>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10c      	bne.n	8008376 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	b672      	cpsid	i
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	b662      	cpsie	i
 8008370:	61fb      	str	r3, [r7, #28]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008376:	f002 f829 	bl	800a3cc <vPortValidateInterruptPriority>
	__asm volatile
 800837a:	f3ef 8211 	mrs	r2, BASEPRI
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	b672      	cpsid	i
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	b662      	cpsie	i
 8008392:	61ba      	str	r2, [r7, #24]
 8008394:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008396:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d02f      	beq.n	8008406 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083b4:	f000 f91b 	bl	80085ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	1e5a      	subs	r2, r3, #1
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80083c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c8:	d112      	bne.n	80083f0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	3310      	adds	r3, #16
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fee8 	bl	80091ac <xTaskRemoveFromEventList>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e007      	b.n	8008400 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083f4:	3301      	adds	r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	b25a      	sxtb	r2, r3
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008400:	2301      	movs	r3, #1
 8008402:	637b      	str	r3, [r7, #52]	; 0x34
 8008404:	e001      	b.n	800840a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008406:	2300      	movs	r3, #0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f383 8811 	msr	BASEPRI, r3
}
 8008414:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008418:	4618      	mov	r0, r3
 800841a:	3738      	adds	r7, #56	; 0x38
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10c      	bne.n	8008448 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	b672      	cpsid	i
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	b662      	cpsie	i
 8008442:	60bb      	str	r3, [r7, #8]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8008448:	f001 fed8 	bl	800a1fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008452:	f001 ff07 	bl	800a264 <vPortExitCritical>

	return uxReturn;
 8008456:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10c      	bne.n	800848c <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	b672      	cpsid	i
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	b662      	cpsie	i
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008492:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <vQueueDelete+0x2c>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	b672      	cpsid	i
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	b662      	cpsie	i
 80084c6:	60bb      	str	r3, [r7, #8]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f95f 	bl	8008790 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f002 f883 	bl	800a5e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d006      	beq.n	8008508 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	e001      	b.n	800850c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800850c:	68fb      	ldr	r3, [r7, #12]
	}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10d      	bne.n	8008554 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d14d      	bne.n	80085dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4618      	mov	r0, r3
 8008546:	f001 f891 	bl	800966c <xTaskPriorityDisinherit>
 800854a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
 8008552:	e043      	b.n	80085dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d119      	bne.n	800858e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6858      	ldr	r0, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	461a      	mov	r2, r3
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	f00f fa4e 	bl	8017a06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	429a      	cmp	r2, r3
 8008582:	d32b      	bcc.n	80085dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]
 800858c:	e026      	b.n	80085dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68d8      	ldr	r0, [r3, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	461a      	mov	r2, r3
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	f00f fa34 	bl	8017a06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	425b      	negs	r3, r3
 80085a8:	441a      	add	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d207      	bcs.n	80085ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	425b      	negs	r3, r3
 80085c4:	441a      	add	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d105      	bne.n	80085dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3b01      	subs	r3, #1
 80085da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085e4:	697b      	ldr	r3, [r7, #20]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d018      	beq.n	8008632 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	441a      	add	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	d303      	bcc.n	8008622 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68d9      	ldr	r1, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	461a      	mov	r2, r3
 800862c:	6838      	ldr	r0, [r7, #0]
 800862e:	f00f f9ea 	bl	8017a06 <memcpy>
	}
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008642:	f001 fddb 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800864c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800864e:	e011      	b.n	8008674 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d012      	beq.n	800867e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3324      	adds	r3, #36	; 0x24
 800865c:	4618      	mov	r0, r3
 800865e:	f000 fda5 	bl	80091ac <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008668:	f000 fe82 	bl	8009370 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	3b01      	subs	r3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dce9      	bgt.n	8008650 <prvUnlockQueue+0x16>
 800867c:	e000      	b.n	8008680 <prvUnlockQueue+0x46>
					break;
 800867e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	22ff      	movs	r2, #255	; 0xff
 8008684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008688:	f001 fdec 	bl	800a264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800868c:	f001 fdb6 	bl	800a1fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008696:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008698:	e011      	b.n	80086be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d012      	beq.n	80086c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3310      	adds	r3, #16
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fd80 	bl	80091ac <xTaskRemoveFromEventList>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086b2:	f000 fe5d 	bl	8009370 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dce9      	bgt.n	800869a <prvUnlockQueue+0x60>
 80086c6:	e000      	b.n	80086ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086d2:	f001 fdc7 	bl	800a264 <vPortExitCritical>
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086e6:	f001 fd89 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d102      	bne.n	80086f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e001      	b.n	80086fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086fc:	f001 fdb2 	bl	800a264 <vPortExitCritical>

	return xReturn;
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008712:	f001 fd73 	bl	800a1fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871e:	429a      	cmp	r2, r3
 8008720:	d102      	bne.n	8008728 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008722:	2301      	movs	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e001      	b.n	800872c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800872c:	f001 fd9a 	bl	800a264 <vPortExitCritical>

	return xReturn;
 8008730:	68fb      	ldr	r3, [r7, #12]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	e014      	b.n	8008776 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800874c:	4a0f      	ldr	r2, [pc, #60]	; (800878c <vQueueAddToRegistry+0x50>)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10b      	bne.n	8008770 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008758:	490c      	ldr	r1, [pc, #48]	; (800878c <vQueueAddToRegistry+0x50>)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008762:	4a0a      	ldr	r2, [pc, #40]	; (800878c <vQueueAddToRegistry+0x50>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800876e:	e006      	b.n	800877e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b07      	cmp	r3, #7
 800877a:	d9e7      	bls.n	800874c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	20005870 	.word	0x20005870

08008790 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e016      	b.n	80087cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <vQueueUnregisterQueue+0x50>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	4413      	add	r3, r2
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d10b      	bne.n	80087c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <vQueueUnregisterQueue+0x50>)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2100      	movs	r1, #0
 80087b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80087b8:	4a09      	ldr	r2, [pc, #36]	; (80087e0 <vQueueUnregisterQueue+0x50>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	4413      	add	r3, r2
 80087c0:	2200      	movs	r2, #0
 80087c2:	605a      	str	r2, [r3, #4]
				break;
 80087c4:	e006      	b.n	80087d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3301      	adds	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b07      	cmp	r3, #7
 80087d0:	d9e5      	bls.n	800879e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20005870 	.word	0x20005870

080087e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087f4:	f001 fd02 	bl	800a1fc <vPortEnterCritical>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087fe:	b25b      	sxtb	r3, r3
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008804:	d103      	bne.n	800880e <vQueueWaitForMessageRestricted+0x2a>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008814:	b25b      	sxtb	r3, r3
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800881a:	d103      	bne.n	8008824 <vQueueWaitForMessageRestricted+0x40>
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008824:	f001 fd1e 	bl	800a264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	3324      	adds	r3, #36	; 0x24
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	68b9      	ldr	r1, [r7, #8]
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fc89 	bl	8009150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800883e:	6978      	ldr	r0, [r7, #20]
 8008840:	f7ff fefb 	bl	800863a <prvUnlockQueue>
	}
 8008844:	bf00      	nop
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08e      	sub	sp, #56	; 0x38
 8008850:	af04      	add	r7, sp, #16
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <xTaskCreateStatic+0x2e>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	b672      	cpsid	i
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	b662      	cpsie	i
 8008874:	623b      	str	r3, [r7, #32]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10c      	bne.n	800889a <xTaskCreateStatic+0x4e>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	b672      	cpsid	i
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	b662      	cpsie	i
 8008894:	61fb      	str	r3, [r7, #28]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800889a:	23bc      	movs	r3, #188	; 0xbc
 800889c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2bbc      	cmp	r3, #188	; 0xbc
 80088a2:	d00c      	beq.n	80088be <xTaskCreateStatic+0x72>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	61bb      	str	r3, [r7, #24]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01e      	beq.n	8008904 <xTaskCreateStatic+0xb8>
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01b      	beq.n	8008904 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	2202      	movs	r2, #2
 80088da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088de:	2300      	movs	r3, #0
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	f107 0314 	add.w	r3, r7, #20
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f850 	bl	800899c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088fe:	f000 f8f5 	bl	8008aec <prvAddNewTaskToReadyList>
 8008902:	e001      	b.n	8008908 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008908:	697b      	ldr	r3, [r7, #20]
	}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008912:	b580      	push	{r7, lr}
 8008914:	b08c      	sub	sp, #48	; 0x30
 8008916:	af04      	add	r7, sp, #16
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f001 fd94 	bl	800a454 <pvPortMalloc>
 800892c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008934:	20bc      	movs	r0, #188	; 0xbc
 8008936:	f001 fd8d 	bl	800a454 <pvPortMalloc>
 800893a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
 8008948:	e005      	b.n	8008956 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800894a:	6978      	ldr	r0, [r7, #20]
 800894c:	f001 fe4c 	bl	800a5e8 <vPortFree>
 8008950:	e001      	b.n	8008956 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008952:	2300      	movs	r3, #0
 8008954:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d017      	beq.n	800898c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008964:	88fa      	ldrh	r2, [r7, #6]
 8008966:	2300      	movs	r3, #0
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	9302      	str	r3, [sp, #8]
 800896e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f80e 	bl	800899c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008980:	69f8      	ldr	r0, [r7, #28]
 8008982:	f000 f8b3 	bl	8008aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008986:	2301      	movs	r3, #1
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	e002      	b.n	8008992 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008990:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008992:	69bb      	ldr	r3, [r7, #24]
	}
 8008994:	4618      	mov	r0, r3
 8008996:	3720      	adds	r7, #32
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
 80089a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	461a      	mov	r2, r3
 80089b4:	21a5      	movs	r1, #165	; 0xa5
 80089b6:	f00f f84e 	bl	8017a56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80089c4:	440b      	add	r3, r1
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00c      	beq.n	80089f8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	b672      	cpsid	i
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	b662      	cpsie	i
 80089f2:	617b      	str	r3, [r7, #20]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d01f      	beq.n	8008a3e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
 8008a02:	e012      	b.n	8008a2a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	7819      	ldrb	r1, [r3, #0]
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	4413      	add	r3, r2
 8008a12:	3334      	adds	r3, #52	; 0x34
 8008a14:	460a      	mov	r2, r1
 8008a16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	3301      	adds	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2b0f      	cmp	r3, #15
 8008a2e:	d9e9      	bls.n	8008a04 <prvInitialiseNewTask+0x68>
 8008a30:	e000      	b.n	8008a34 <prvInitialiseNewTask+0x98>
			{
				break;
 8008a32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a3c:	e003      	b.n	8008a46 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	2b37      	cmp	r3, #55	; 0x37
 8008a4a:	d901      	bls.n	8008a50 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a4c:	2337      	movs	r3, #55	; 0x37
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	2200      	movs	r2, #0
 8008a60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	3304      	adds	r3, #4
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fd0c 	bl	8007484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6e:	3318      	adds	r3, #24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fe fd07 	bl	8007484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	3354      	adds	r3, #84	; 0x54
 8008aa0:	2260      	movs	r2, #96	; 0x60
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f00e ffd6 	bl	8017a56 <memset>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	4a0c      	ldr	r2, [pc, #48]	; (8008ae0 <prvInitialiseNewTask+0x144>)
 8008aae:	659a      	str	r2, [r3, #88]	; 0x58
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	4a0c      	ldr	r2, [pc, #48]	; (8008ae4 <prvInitialiseNewTask+0x148>)
 8008ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	4a0b      	ldr	r2, [pc, #44]	; (8008ae8 <prvInitialiseNewTask+0x14c>)
 8008aba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008abc:	683a      	ldr	r2, [r7, #0]
 8008abe:	68f9      	ldr	r1, [r7, #12]
 8008ac0:	69b8      	ldr	r0, [r7, #24]
 8008ac2:	f001 fa8f 	bl	8009fe4 <pxPortInitialiseStack>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d002      	beq.n	8008ad8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ad8:	bf00      	nop
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	0801e0a4 	.word	0x0801e0a4
 8008ae4:	0801e0c4 	.word	0x0801e0c4
 8008ae8:	0801e084 	.word	0x0801e084

08008aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008af4:	f001 fb82 	bl	800a1fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008af8:	4b2d      	ldr	r3, [pc, #180]	; (8008bb0 <prvAddNewTaskToReadyList+0xc4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3301      	adds	r3, #1
 8008afe:	4a2c      	ldr	r2, [pc, #176]	; (8008bb0 <prvAddNewTaskToReadyList+0xc4>)
 8008b00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b02:	4b2c      	ldr	r3, [pc, #176]	; (8008bb4 <prvAddNewTaskToReadyList+0xc8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d109      	bne.n	8008b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b0a:	4a2a      	ldr	r2, [pc, #168]	; (8008bb4 <prvAddNewTaskToReadyList+0xc8>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b10:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <prvAddNewTaskToReadyList+0xc4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d110      	bne.n	8008b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b18:	f000 fc4e 	bl	80093b8 <prvInitialiseTaskLists>
 8008b1c:	e00d      	b.n	8008b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b1e:	4b26      	ldr	r3, [pc, #152]	; (8008bb8 <prvAddNewTaskToReadyList+0xcc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b26:	4b23      	ldr	r3, [pc, #140]	; (8008bb4 <prvAddNewTaskToReadyList+0xc8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d802      	bhi.n	8008b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b34:	4a1f      	ldr	r2, [pc, #124]	; (8008bb4 <prvAddNewTaskToReadyList+0xc8>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b3a:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <prvAddNewTaskToReadyList+0xd0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <prvAddNewTaskToReadyList+0xd0>)
 8008b42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b44:	4b1d      	ldr	r3, [pc, #116]	; (8008bbc <prvAddNewTaskToReadyList+0xd0>)
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b50:	4b1b      	ldr	r3, [pc, #108]	; (8008bc0 <prvAddNewTaskToReadyList+0xd4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <prvAddNewTaskToReadyList+0x74>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4a18      	ldr	r2, [pc, #96]	; (8008bc0 <prvAddNewTaskToReadyList+0xd4>)
 8008b5e:	6013      	str	r3, [r2, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <prvAddNewTaskToReadyList+0xd8>)
 8008b6e:	441a      	add	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3304      	adds	r3, #4
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7fe fc91 	bl	800749e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b7c:	f001 fb72 	bl	800a264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b80:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <prvAddNewTaskToReadyList+0xcc>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00e      	beq.n	8008ba6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <prvAddNewTaskToReadyList+0xc8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d207      	bcs.n	8008ba6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b96:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvAddNewTaskToReadyList+0xdc>)
 8008b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20005d84 	.word	0x20005d84
 8008bb4:	200058b0 	.word	0x200058b0
 8008bb8:	20005d90 	.word	0x20005d90
 8008bbc:	20005da0 	.word	0x20005da0
 8008bc0:	20005d8c 	.word	0x20005d8c
 8008bc4:	200058b4 	.word	0x200058b4
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d019      	beq.n	8008c12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bde:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <vTaskDelay+0x64>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00c      	beq.n	8008c00 <vTaskDelay+0x34>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	60bb      	str	r3, [r7, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008c00:	f000 f88e 	bl	8008d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c04:	2100      	movs	r1, #0
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fe3c 	bl	8009884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c0c:	f000 f896 	bl	8008d3c <xTaskResumeAll>
 8008c10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <vTaskDelay+0x68>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20005dac 	.word	0x20005dac
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c46:	463a      	mov	r2, r7
 8008c48:	1d39      	adds	r1, r7, #4
 8008c4a:	f107 0308 	add.w	r3, r7, #8
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fbc4 	bl	80073dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	9202      	str	r2, [sp, #8]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	460a      	mov	r2, r1
 8008c66:	4926      	ldr	r1, [pc, #152]	; (8008d00 <vTaskStartScheduler+0xc8>)
 8008c68:	4826      	ldr	r0, [pc, #152]	; (8008d04 <vTaskStartScheduler+0xcc>)
 8008c6a:	f7ff fdef 	bl	800884c <xTaskCreateStatic>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4a25      	ldr	r2, [pc, #148]	; (8008d08 <vTaskStartScheduler+0xd0>)
 8008c72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c74:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <vTaskStartScheduler+0xd0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e001      	b.n	8008c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d102      	bne.n	8008c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c8c:	f000 fe4e 	bl	800992c <xTimerCreateTimerTask>
 8008c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d11d      	bne.n	8008cd4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	b672      	cpsid	i
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	b662      	cpsie	i
 8008cac:	613b      	str	r3, [r7, #16]
}
 8008cae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <vTaskStartScheduler+0xd4>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3354      	adds	r3, #84	; 0x54
 8008cb6:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <vTaskStartScheduler+0xd8>)
 8008cb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cba:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <vTaskStartScheduler+0xdc>)
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cc2:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <vTaskStartScheduler+0xe0>)
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cc8:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <vTaskStartScheduler+0xe4>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cce:	f001 fa17 	bl	800a100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cd2:	e010      	b.n	8008cf6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cda:	d10c      	bne.n	8008cf6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	b672      	cpsid	i
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	b662      	cpsie	i
 8008cf0:	60fb      	str	r3, [r7, #12]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <vTaskStartScheduler+0xbc>
}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	0801ac88 	.word	0x0801ac88
 8008d04:	08009389 	.word	0x08009389
 8008d08:	20005da8 	.word	0x20005da8
 8008d0c:	200058b0 	.word	0x200058b0
 8008d10:	2000002c 	.word	0x2000002c
 8008d14:	20005da4 	.word	0x20005da4
 8008d18:	20005d90 	.word	0x20005d90
 8008d1c:	20005d88 	.word	0x20005d88

08008d20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <vTaskSuspendAll+0x18>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a03      	ldr	r2, [pc, #12]	; (8008d38 <vTaskSuspendAll+0x18>)
 8008d2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008d2e:	bf00      	nop
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	20005dac 	.word	0x20005dac

08008d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d4a:	4b43      	ldr	r3, [pc, #268]	; (8008e58 <xTaskResumeAll+0x11c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10c      	bne.n	8008d6c <xTaskResumeAll+0x30>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	603b      	str	r3, [r7, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d6c:	f001 fa46 	bl	800a1fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d70:	4b39      	ldr	r3, [pc, #228]	; (8008e58 <xTaskResumeAll+0x11c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	4a38      	ldr	r2, [pc, #224]	; (8008e58 <xTaskResumeAll+0x11c>)
 8008d78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <xTaskResumeAll+0x11c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d162      	bne.n	8008e48 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d82:	4b36      	ldr	r3, [pc, #216]	; (8008e5c <xTaskResumeAll+0x120>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d05e      	beq.n	8008e48 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d8a:	e02f      	b.n	8008dec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8c:	4b34      	ldr	r3, [pc, #208]	; (8008e60 <xTaskResumeAll+0x124>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3318      	adds	r3, #24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe fbdd 	bl	8007558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fbd8 	bl	8007558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dac:	4b2d      	ldr	r3, [pc, #180]	; (8008e64 <xTaskResumeAll+0x128>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d903      	bls.n	8008dbc <xTaskResumeAll+0x80>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	4a2a      	ldr	r2, [pc, #168]	; (8008e64 <xTaskResumeAll+0x128>)
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4a27      	ldr	r2, [pc, #156]	; (8008e68 <xTaskResumeAll+0x12c>)
 8008dca:	441a      	add	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f7fe fb63 	bl	800749e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ddc:	4b23      	ldr	r3, [pc, #140]	; (8008e6c <xTaskResumeAll+0x130>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d302      	bcc.n	8008dec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008de6:	4b22      	ldr	r3, [pc, #136]	; (8008e70 <xTaskResumeAll+0x134>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dec:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <xTaskResumeAll+0x124>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1cb      	bne.n	8008d8c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dfa:	f000 fb81 	bl	8009500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dfe:	4b1d      	ldr	r3, [pc, #116]	; (8008e74 <xTaskResumeAll+0x138>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d010      	beq.n	8008e2c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e0a:	f000 f859 	bl	8008ec0 <xTaskIncrementTick>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008e14:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <xTaskResumeAll+0x134>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f1      	bne.n	8008e0a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <xTaskResumeAll+0x138>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e2c:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <xTaskResumeAll+0x134>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <xTaskResumeAll+0x13c>)
 8008e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e48:	f001 fa0c 	bl	800a264 <vPortExitCritical>

	return xAlreadyYielded;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20005dac 	.word	0x20005dac
 8008e5c:	20005d84 	.word	0x20005d84
 8008e60:	20005d44 	.word	0x20005d44
 8008e64:	20005d8c 	.word	0x20005d8c
 8008e68:	200058b4 	.word	0x200058b4
 8008e6c:	200058b0 	.word	0x200058b0
 8008e70:	20005d98 	.word	0x20005d98
 8008e74:	20005d94 	.word	0x20005d94
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <xTaskGetTickCount+0x1c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e88:	687b      	ldr	r3, [r7, #4]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	20005d88 	.word	0x20005d88

08008e9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ea2:	f001 fa93 	bl	800a3cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008eaa:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <xTaskGetTickCountFromISR+0x20>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eb0:	683b      	ldr	r3, [r7, #0]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	20005d88 	.word	0x20005d88

08008ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eca:	4b50      	ldr	r3, [pc, #320]	; (800900c <xTaskIncrementTick+0x14c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 808b 	bne.w	8008fea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ed4:	4b4e      	ldr	r3, [pc, #312]	; (8009010 <xTaskIncrementTick+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008edc:	4a4c      	ldr	r2, [pc, #304]	; (8009010 <xTaskIncrementTick+0x150>)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d122      	bne.n	8008f2e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ee8:	4b4a      	ldr	r3, [pc, #296]	; (8009014 <xTaskIncrementTick+0x154>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00c      	beq.n	8008f0c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	b672      	cpsid	i
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	b662      	cpsie	i
 8008f06:	603b      	str	r3, [r7, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <xTaskIncrementTick+0x4a>
 8008f0c:	4b41      	ldr	r3, [pc, #260]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	4b41      	ldr	r3, [pc, #260]	; (8009018 <xTaskIncrementTick+0x158>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a3f      	ldr	r2, [pc, #252]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f18:	6013      	str	r3, [r2, #0]
 8008f1a:	4a3f      	ldr	r2, [pc, #252]	; (8009018 <xTaskIncrementTick+0x158>)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	4b3e      	ldr	r3, [pc, #248]	; (800901c <xTaskIncrementTick+0x15c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	4a3d      	ldr	r2, [pc, #244]	; (800901c <xTaskIncrementTick+0x15c>)
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	f000 fae9 	bl	8009500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f2e:	4b3c      	ldr	r3, [pc, #240]	; (8009020 <xTaskIncrementTick+0x160>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d349      	bcc.n	8008fcc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f38:	4b36      	ldr	r3, [pc, #216]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f42:	4b37      	ldr	r3, [pc, #220]	; (8009020 <xTaskIncrementTick+0x160>)
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f48:	601a      	str	r2, [r3, #0]
					break;
 8008f4a:	e03f      	b.n	8008fcc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4c:	4b31      	ldr	r3, [pc, #196]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d203      	bcs.n	8008f6c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f64:	4a2e      	ldr	r2, [pc, #184]	; (8009020 <xTaskIncrementTick+0x160>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f6a:	e02f      	b.n	8008fcc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe faf1 	bl	8007558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	3318      	adds	r3, #24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe fae8 	bl	8007558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	4b25      	ldr	r3, [pc, #148]	; (8009024 <xTaskIncrementTick+0x164>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d903      	bls.n	8008f9c <xTaskIncrementTick+0xdc>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	4a22      	ldr	r2, [pc, #136]	; (8009024 <xTaskIncrementTick+0x164>)
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <xTaskIncrementTick+0x168>)
 8008faa:	441a      	add	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f7fe fa73 	bl	800749e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <xTaskIncrementTick+0x16c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d3b8      	bcc.n	8008f38 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fca:	e7b5      	b.n	8008f38 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fcc:	4b17      	ldr	r3, [pc, #92]	; (800902c <xTaskIncrementTick+0x16c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	4915      	ldr	r1, [pc, #84]	; (8009028 <xTaskIncrementTick+0x168>)
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d907      	bls.n	8008ff4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	e004      	b.n	8008ff4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008fea:	4b11      	ldr	r3, [pc, #68]	; (8009030 <xTaskIncrementTick+0x170>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	4a0f      	ldr	r2, [pc, #60]	; (8009030 <xTaskIncrementTick+0x170>)
 8008ff2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <xTaskIncrementTick+0x174>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009000:	697b      	ldr	r3, [r7, #20]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20005dac 	.word	0x20005dac
 8009010:	20005d88 	.word	0x20005d88
 8009014:	20005d3c 	.word	0x20005d3c
 8009018:	20005d40 	.word	0x20005d40
 800901c:	20005d9c 	.word	0x20005d9c
 8009020:	20005da4 	.word	0x20005da4
 8009024:	20005d8c 	.word	0x20005d8c
 8009028:	200058b4 	.word	0x200058b4
 800902c:	200058b0 	.word	0x200058b0
 8009030:	20005d94 	.word	0x20005d94
 8009034:	20005d98 	.word	0x20005d98

08009038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <vTaskSwitchContext+0xb4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009046:	4b2a      	ldr	r3, [pc, #168]	; (80090f0 <vTaskSwitchContext+0xb8>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800904c:	e048      	b.n	80090e0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800904e:	4b28      	ldr	r3, [pc, #160]	; (80090f0 <vTaskSwitchContext+0xb8>)
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009054:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <vTaskSwitchContext+0xbc>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	e012      	b.n	8009082 <vTaskSwitchContext+0x4a>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10c      	bne.n	800907c <vTaskSwitchContext+0x44>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	b672      	cpsid	i
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	b662      	cpsie	i
 8009076:	607b      	str	r3, [r7, #4]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <vTaskSwitchContext+0x42>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3b01      	subs	r3, #1
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	491d      	ldr	r1, [pc, #116]	; (80090f8 <vTaskSwitchContext+0xc0>)
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0e2      	beq.n	800905c <vTaskSwitchContext+0x24>
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4a15      	ldr	r2, [pc, #84]	; (80090f8 <vTaskSwitchContext+0xc0>)
 80090a2:	4413      	add	r3, r2
 80090a4:	60bb      	str	r3, [r7, #8]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	605a      	str	r2, [r3, #4]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	3308      	adds	r3, #8
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d104      	bne.n	80090c6 <vTaskSwitchContext+0x8e>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	605a      	str	r2, [r3, #4]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <vTaskSwitchContext+0xc4>)
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	4a08      	ldr	r2, [pc, #32]	; (80090f4 <vTaskSwitchContext+0xbc>)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090d6:	4b09      	ldr	r3, [pc, #36]	; (80090fc <vTaskSwitchContext+0xc4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3354      	adds	r3, #84	; 0x54
 80090dc:	4a08      	ldr	r2, [pc, #32]	; (8009100 <vTaskSwitchContext+0xc8>)
 80090de:	6013      	str	r3, [r2, #0]
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	20005dac 	.word	0x20005dac
 80090f0:	20005d98 	.word	0x20005d98
 80090f4:	20005d8c 	.word	0x20005d8c
 80090f8:	200058b4 	.word	0x200058b4
 80090fc:	200058b0 	.word	0x200058b0
 8009100:	2000002c 	.word	0x2000002c

08009104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10c      	bne.n	800912e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	b672      	cpsid	i
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	b662      	cpsie	i
 8009128:	60fb      	str	r3, [r7, #12]
}
 800912a:	bf00      	nop
 800912c:	e7fe      	b.n	800912c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800912e:	4b07      	ldr	r3, [pc, #28]	; (800914c <vTaskPlaceOnEventList+0x48>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3318      	adds	r3, #24
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fe f9d5 	bl	80074e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800913c:	2101      	movs	r1, #1
 800913e:	6838      	ldr	r0, [r7, #0]
 8009140:	f000 fba0 	bl	8009884 <prvAddCurrentTaskToDelayedList>
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200058b0 	.word	0x200058b0

08009150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10c      	bne.n	800917c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	b672      	cpsid	i
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	b662      	cpsie	i
 8009176:	617b      	str	r3, [r7, #20]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <vTaskPlaceOnEventListRestricted+0x58>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3318      	adds	r3, #24
 8009182:	4619      	mov	r1, r3
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7fe f98a 	bl	800749e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009194:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	68b8      	ldr	r0, [r7, #8]
 800919a:	f000 fb73 	bl	8009884 <prvAddCurrentTaskToDelayedList>
	}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	200058b0 	.word	0x200058b0

080091ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10c      	bne.n	80091dc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	b672      	cpsid	i
 80091c8:	f383 8811 	msr	BASEPRI, r3
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	b662      	cpsie	i
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3318      	adds	r3, #24
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe f9b9 	bl	8007558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e6:	4b1e      	ldr	r3, [pc, #120]	; (8009260 <xTaskRemoveFromEventList+0xb4>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d11d      	bne.n	800922a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	3304      	adds	r3, #4
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe f9b0 	bl	8007558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	4b19      	ldr	r3, [pc, #100]	; (8009264 <xTaskRemoveFromEventList+0xb8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d903      	bls.n	800920c <xTaskRemoveFromEventList+0x60>
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	4a16      	ldr	r2, [pc, #88]	; (8009264 <xTaskRemoveFromEventList+0xb8>)
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a13      	ldr	r2, [pc, #76]	; (8009268 <xTaskRemoveFromEventList+0xbc>)
 800921a:	441a      	add	r2, r3
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4610      	mov	r0, r2
 8009224:	f7fe f93b 	bl	800749e <vListInsertEnd>
 8009228:	e005      	b.n	8009236 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	3318      	adds	r3, #24
 800922e:	4619      	mov	r1, r3
 8009230:	480e      	ldr	r0, [pc, #56]	; (800926c <xTaskRemoveFromEventList+0xc0>)
 8009232:	f7fe f934 	bl	800749e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <xTaskRemoveFromEventList+0xc4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	429a      	cmp	r2, r3
 8009242:	d905      	bls.n	8009250 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009248:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <xTaskRemoveFromEventList+0xc8>)
 800924a:	2201      	movs	r2, #1
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e001      	b.n	8009254 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009254:	697b      	ldr	r3, [r7, #20]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20005dac 	.word	0x20005dac
 8009264:	20005d8c 	.word	0x20005d8c
 8009268:	200058b4 	.word	0x200058b4
 800926c:	20005d44 	.word	0x20005d44
 8009270:	200058b0 	.word	0x200058b0
 8009274:	20005d98 	.word	0x20005d98

08009278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009280:	4b06      	ldr	r3, [pc, #24]	; (800929c <vTaskInternalSetTimeOutState+0x24>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <vTaskInternalSetTimeOutState+0x28>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	20005d9c 	.word	0x20005d9c
 80092a0:	20005d88 	.word	0x20005d88

080092a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10c      	bne.n	80092ce <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b8:	b672      	cpsid	i
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	b662      	cpsie	i
 80092c8:	613b      	str	r3, [r7, #16]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10c      	bne.n	80092ee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	b672      	cpsid	i
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	b662      	cpsie	i
 80092e8:	60fb      	str	r3, [r7, #12]
}
 80092ea:	bf00      	nop
 80092ec:	e7fe      	b.n	80092ec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80092ee:	f000 ff85 	bl	800a1fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092f2:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <xTaskCheckForTimeOut+0xc4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800930a:	d102      	bne.n	8009312 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800930c:	2300      	movs	r3, #0
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	e023      	b.n	800935a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b15      	ldr	r3, [pc, #84]	; (800936c <xTaskCheckForTimeOut+0xc8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d007      	beq.n	800932e <xTaskCheckForTimeOut+0x8a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	429a      	cmp	r2, r3
 8009326:	d302      	bcc.n	800932e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e015      	b.n	800935a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	429a      	cmp	r2, r3
 8009336:	d20b      	bcs.n	8009350 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ff97 	bl	8009278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e004      	b.n	800935a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009356:	2301      	movs	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800935a:	f000 ff83 	bl	800a264 <vPortExitCritical>

	return xReturn;
 800935e:	69fb      	ldr	r3, [r7, #28]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3720      	adds	r7, #32
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20005d88 	.word	0x20005d88
 800936c:	20005d9c 	.word	0x20005d9c

08009370 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009374:	4b03      	ldr	r3, [pc, #12]	; (8009384 <vTaskMissedYield+0x14>)
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
}
 800937a:	bf00      	nop
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20005d98 	.word	0x20005d98

08009388 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009390:	f000 f852 	bl	8009438 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <prvIdleTask+0x28>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d9f9      	bls.n	8009390 <prvIdleTask+0x8>
			{
				taskYIELD();
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <prvIdleTask+0x2c>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093ac:	e7f0      	b.n	8009390 <prvIdleTask+0x8>
 80093ae:	bf00      	nop
 80093b0:	200058b4 	.word	0x200058b4
 80093b4:	e000ed04 	.word	0xe000ed04

080093b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093be:	2300      	movs	r3, #0
 80093c0:	607b      	str	r3, [r7, #4]
 80093c2:	e00c      	b.n	80093de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4a12      	ldr	r2, [pc, #72]	; (8009418 <prvInitialiseTaskLists+0x60>)
 80093d0:	4413      	add	r3, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe f836 	bl	8007444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3301      	adds	r3, #1
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b37      	cmp	r3, #55	; 0x37
 80093e2:	d9ef      	bls.n	80093c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e4:	480d      	ldr	r0, [pc, #52]	; (800941c <prvInitialiseTaskLists+0x64>)
 80093e6:	f7fe f82d 	bl	8007444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093ea:	480d      	ldr	r0, [pc, #52]	; (8009420 <prvInitialiseTaskLists+0x68>)
 80093ec:	f7fe f82a 	bl	8007444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093f0:	480c      	ldr	r0, [pc, #48]	; (8009424 <prvInitialiseTaskLists+0x6c>)
 80093f2:	f7fe f827 	bl	8007444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093f6:	480c      	ldr	r0, [pc, #48]	; (8009428 <prvInitialiseTaskLists+0x70>)
 80093f8:	f7fe f824 	bl	8007444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093fc:	480b      	ldr	r0, [pc, #44]	; (800942c <prvInitialiseTaskLists+0x74>)
 80093fe:	f7fe f821 	bl	8007444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009402:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <prvInitialiseTaskLists+0x78>)
 8009404:	4a05      	ldr	r2, [pc, #20]	; (800941c <prvInitialiseTaskLists+0x64>)
 8009406:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <prvInitialiseTaskLists+0x7c>)
 800940a:	4a05      	ldr	r2, [pc, #20]	; (8009420 <prvInitialiseTaskLists+0x68>)
 800940c:	601a      	str	r2, [r3, #0]
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200058b4 	.word	0x200058b4
 800941c:	20005d14 	.word	0x20005d14
 8009420:	20005d28 	.word	0x20005d28
 8009424:	20005d44 	.word	0x20005d44
 8009428:	20005d58 	.word	0x20005d58
 800942c:	20005d70 	.word	0x20005d70
 8009430:	20005d3c 	.word	0x20005d3c
 8009434:	20005d40 	.word	0x20005d40

08009438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800943e:	e019      	b.n	8009474 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009440:	f000 fedc 	bl	800a1fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009444:	4b10      	ldr	r3, [pc, #64]	; (8009488 <prvCheckTasksWaitingTermination+0x50>)
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7fe f881 	bl	8007558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <prvCheckTasksWaitingTermination+0x54>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3b01      	subs	r3, #1
 800945c:	4a0b      	ldr	r2, [pc, #44]	; (800948c <prvCheckTasksWaitingTermination+0x54>)
 800945e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009460:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3b01      	subs	r3, #1
 8009466:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009468:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800946a:	f000 fefb 	bl	800a264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f810 	bl	8009494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <prvCheckTasksWaitingTermination+0x58>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e1      	bne.n	8009440 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20005d58 	.word	0x20005d58
 800948c:	20005d84 	.word	0x20005d84
 8009490:	20005d6c 	.word	0x20005d6c

08009494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3354      	adds	r3, #84	; 0x54
 80094a0:	4618      	mov	r0, r3
 80094a2:	f00e fbd9 	bl	8017c58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d108      	bne.n	80094c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 f897 	bl	800a5e8 <vPortFree>
				vPortFree( pxTCB );
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 f894 	bl	800a5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094c0:	e01a      	b.n	80094f8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d103      	bne.n	80094d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f001 f88b 	bl	800a5e8 <vPortFree>
	}
 80094d2:	e011      	b.n	80094f8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d00c      	beq.n	80094f8 <prvDeleteTCB+0x64>
	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	b672      	cpsid	i
 80094e4:	f383 8811 	msr	BASEPRI, r3
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	b662      	cpsie	i
 80094f2:	60fb      	str	r3, [r7, #12]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <prvDeleteTCB+0x62>
	}
 80094f8:	bf00      	nop
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009506:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <prvResetNextTaskUnblockTime+0x38>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <prvResetNextTaskUnblockTime+0x3c>)
 8009512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009518:	e008      	b.n	800952c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951a:	4b07      	ldr	r3, [pc, #28]	; (8009538 <prvResetNextTaskUnblockTime+0x38>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a04      	ldr	r2, [pc, #16]	; (800953c <prvResetNextTaskUnblockTime+0x3c>)
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	20005d3c 	.word	0x20005d3c
 800953c:	20005da4 	.word	0x20005da4

08009540 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <xTaskGetCurrentTaskHandle+0x1c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800954c:	687b      	ldr	r3, [r7, #4]
	}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	200058b0 	.word	0x200058b0

08009560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <xTaskGetSchedulerState+0x34>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800956e:	2301      	movs	r3, #1
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	e008      	b.n	8009586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009574:	4b08      	ldr	r3, [pc, #32]	; (8009598 <xTaskGetSchedulerState+0x38>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800957c:	2302      	movs	r3, #2
 800957e:	607b      	str	r3, [r7, #4]
 8009580:	e001      	b.n	8009586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009582:	2300      	movs	r3, #0
 8009584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009586:	687b      	ldr	r3, [r7, #4]
	}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	20005d90 	.word	0x20005d90
 8009598:	20005dac 	.word	0x20005dac

0800959c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d051      	beq.n	8009656 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b6:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <xTaskPriorityInherit+0xc4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	429a      	cmp	r2, r3
 80095be:	d241      	bcs.n	8009644 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	db06      	blt.n	80095d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c8:	4b25      	ldr	r3, [pc, #148]	; (8009660 <xTaskPriorityInherit+0xc4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	6959      	ldr	r1, [r3, #20]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4a1f      	ldr	r2, [pc, #124]	; (8009664 <xTaskPriorityInherit+0xc8>)
 80095e8:	4413      	add	r3, r2
 80095ea:	4299      	cmp	r1, r3
 80095ec:	d122      	bne.n	8009634 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fd ffb0 	bl	8007558 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095f8:	4b19      	ldr	r3, [pc, #100]	; (8009660 <xTaskPriorityInherit+0xc4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4b18      	ldr	r3, [pc, #96]	; (8009668 <xTaskPriorityInherit+0xcc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d903      	bls.n	8009616 <xTaskPriorityInherit+0x7a>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <xTaskPriorityInherit+0xcc>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961a:	4613      	mov	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4a10      	ldr	r2, [pc, #64]	; (8009664 <xTaskPriorityInherit+0xc8>)
 8009624:	441a      	add	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fd ff36 	bl	800749e <vListInsertEnd>
 8009632:	e004      	b.n	800963e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009634:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <xTaskPriorityInherit+0xc4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800963e:	2301      	movs	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	e008      	b.n	8009656 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <xTaskPriorityInherit+0xc4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	429a      	cmp	r2, r3
 8009650:	d201      	bcs.n	8009656 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009656:	68fb      	ldr	r3, [r7, #12]
	}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	200058b0 	.word	0x200058b0
 8009664:	200058b4 	.word	0x200058b4
 8009668:	20005d8c 	.word	0x20005d8c

0800966c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009678:	2300      	movs	r3, #0
 800967a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d05a      	beq.n	8009738 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009682:	4b30      	ldr	r3, [pc, #192]	; (8009744 <xTaskPriorityDisinherit+0xd8>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	429a      	cmp	r2, r3
 800968a:	d00c      	beq.n	80096a6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	b672      	cpsid	i
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	b662      	cpsie	i
 80096a0:	60fb      	str	r3, [r7, #12]
}
 80096a2:	bf00      	nop
 80096a4:	e7fe      	b.n	80096a4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10c      	bne.n	80096c8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	b672      	cpsid	i
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	b662      	cpsie	i
 80096c2:	60bb      	str	r3, [r7, #8]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096cc:	1e5a      	subs	r2, r3, #1
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096da:	429a      	cmp	r2, r3
 80096dc:	d02c      	beq.n	8009738 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d128      	bne.n	8009738 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fd ff34 	bl	8007558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <xTaskPriorityDisinherit+0xdc>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d903      	bls.n	8009718 <xTaskPriorityDisinherit+0xac>
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <xTaskPriorityDisinherit+0xdc>)
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4a09      	ldr	r2, [pc, #36]	; (800974c <xTaskPriorityDisinherit+0xe0>)
 8009726:	441a      	add	r2, r3
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	3304      	adds	r3, #4
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7fd feb5 	bl	800749e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009738:	697b      	ldr	r3, [r7, #20]
	}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200058b0 	.word	0x200058b0
 8009748:	20005d8c 	.word	0x20005d8c
 800974c:	200058b4 	.word	0x200058b4

08009750 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800975e:	2301      	movs	r3, #1
 8009760:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d06e      	beq.n	8009846 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10c      	bne.n	800978a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	b672      	cpsid	i
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	b662      	cpsie	i
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d902      	bls.n	800979a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	e002      	b.n	80097a0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d04d      	beq.n	8009846 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d148      	bne.n	8009846 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097b4:	4b26      	ldr	r3, [pc, #152]	; (8009850 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d10c      	bne.n	80097d8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	b672      	cpsid	i
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	b662      	cpsie	i
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	69fa      	ldr	r2, [r7, #28]
 80097e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	db04      	blt.n	80097f6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	6959      	ldr	r1, [r3, #20]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009806:	4413      	add	r3, r2
 8009808:	4299      	cmp	r1, r3
 800980a:	d11c      	bne.n	8009846 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fea1 	bl	8007558 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d903      	bls.n	800982a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	4a0c      	ldr	r2, [pc, #48]	; (8009858 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4a07      	ldr	r2, [pc, #28]	; (8009854 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009838:	441a      	add	r2, r3
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	3304      	adds	r3, #4
 800983e:	4619      	mov	r1, r3
 8009840:	4610      	mov	r0, r2
 8009842:	f7fd fe2c 	bl	800749e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009846:	bf00      	nop
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200058b0 	.word	0x200058b0
 8009854:	200058b4 	.word	0x200058b4
 8009858:	20005d8c 	.word	0x20005d8c

0800985c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <pvTaskIncrementMutexHeldCount+0x24>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <pvTaskIncrementMutexHeldCount+0x24>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800986e:	3201      	adds	r2, #1
 8009870:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009872:	4b03      	ldr	r3, [pc, #12]	; (8009880 <pvTaskIncrementMutexHeldCount+0x24>)
 8009874:	681b      	ldr	r3, [r3, #0]
	}
 8009876:	4618      	mov	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	200058b0 	.word	0x200058b0

08009884 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800988e:	4b21      	ldr	r3, [pc, #132]	; (8009914 <prvAddCurrentTaskToDelayedList+0x90>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009894:	4b20      	ldr	r3, [pc, #128]	; (8009918 <prvAddCurrentTaskToDelayedList+0x94>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3304      	adds	r3, #4
 800989a:	4618      	mov	r0, r3
 800989c:	f7fd fe5c 	bl	8007558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a6:	d10a      	bne.n	80098be <prvAddCurrentTaskToDelayedList+0x3a>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ae:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <prvAddCurrentTaskToDelayedList+0x94>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4619      	mov	r1, r3
 80098b6:	4819      	ldr	r0, [pc, #100]	; (800991c <prvAddCurrentTaskToDelayedList+0x98>)
 80098b8:	f7fd fdf1 	bl	800749e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098bc:	e026      	b.n	800990c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4413      	add	r3, r2
 80098c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098c6:	4b14      	ldr	r3, [pc, #80]	; (8009918 <prvAddCurrentTaskToDelayedList+0x94>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d209      	bcs.n	80098ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098d6:	4b12      	ldr	r3, [pc, #72]	; (8009920 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <prvAddCurrentTaskToDelayedList+0x94>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3304      	adds	r3, #4
 80098e0:	4619      	mov	r1, r3
 80098e2:	4610      	mov	r0, r2
 80098e4:	f7fd fdff 	bl	80074e6 <vListInsert>
}
 80098e8:	e010      	b.n	800990c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ea:	4b0e      	ldr	r3, [pc, #56]	; (8009924 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b0a      	ldr	r3, [pc, #40]	; (8009918 <prvAddCurrentTaskToDelayedList+0x94>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7fd fdf5 	bl	80074e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098fc:	4b0a      	ldr	r3, [pc, #40]	; (8009928 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	429a      	cmp	r2, r3
 8009904:	d202      	bcs.n	800990c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009906:	4a08      	ldr	r2, [pc, #32]	; (8009928 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	6013      	str	r3, [r2, #0]
}
 800990c:	bf00      	nop
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	20005d88 	.word	0x20005d88
 8009918:	200058b0 	.word	0x200058b0
 800991c:	20005d70 	.word	0x20005d70
 8009920:	20005d40 	.word	0x20005d40
 8009924:	20005d3c 	.word	0x20005d3c
 8009928:	20005da4 	.word	0x20005da4

0800992c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009932:	2300      	movs	r3, #0
 8009934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009936:	f000 fb15 	bl	8009f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800993a:	4b1d      	ldr	r3, [pc, #116]	; (80099b0 <xTimerCreateTimerTask+0x84>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d021      	beq.n	8009986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800994a:	1d3a      	adds	r2, r7, #4
 800994c:	f107 0108 	add.w	r1, r7, #8
 8009950:	f107 030c 	add.w	r3, r7, #12
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd fd5b 	bl	8007410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800995a:	6879      	ldr	r1, [r7, #4]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	9202      	str	r2, [sp, #8]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	2302      	movs	r3, #2
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	460a      	mov	r2, r1
 800996c:	4911      	ldr	r1, [pc, #68]	; (80099b4 <xTimerCreateTimerTask+0x88>)
 800996e:	4812      	ldr	r0, [pc, #72]	; (80099b8 <xTimerCreateTimerTask+0x8c>)
 8009970:	f7fe ff6c 	bl	800884c <xTaskCreateStatic>
 8009974:	4603      	mov	r3, r0
 8009976:	4a11      	ldr	r2, [pc, #68]	; (80099bc <xTimerCreateTimerTask+0x90>)
 8009978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800997a:	4b10      	ldr	r3, [pc, #64]	; (80099bc <xTimerCreateTimerTask+0x90>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009982:	2301      	movs	r3, #1
 8009984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10c      	bne.n	80099a6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	b672      	cpsid	i
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	b662      	cpsie	i
 80099a0:	613b      	str	r3, [r7, #16]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20005de0 	.word	0x20005de0
 80099b4:	0801ac90 	.word	0x0801ac90
 80099b8:	08009afd 	.word	0x08009afd
 80099bc:	20005de4 	.word	0x20005de4

080099c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10c      	bne.n	80099f2 <xTimerGenericCommand+0x32>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	b672      	cpsid	i
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	b662      	cpsie	i
 80099ec:	623b      	str	r3, [r7, #32]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099f2:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <xTimerGenericCommand+0x9c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02a      	beq.n	8009a50 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	dc18      	bgt.n	8009a3e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a0c:	f7ff fda8 	bl	8009560 <xTaskGetSchedulerState>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d109      	bne.n	8009a2a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a16:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <xTimerGenericCommand+0x9c>)
 8009a18:	6818      	ldr	r0, [r3, #0]
 8009a1a:	f107 0110 	add.w	r1, r7, #16
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a22:	f7fe f841 	bl	8007aa8 <xQueueGenericSend>
 8009a26:	6278      	str	r0, [r7, #36]	; 0x24
 8009a28:	e012      	b.n	8009a50 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <xTimerGenericCommand+0x9c>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f107 0110 	add.w	r1, r7, #16
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7fe f837 	bl	8007aa8 <xQueueGenericSend>
 8009a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a3c:	e008      	b.n	8009a50 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a3e:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <xTimerGenericCommand+0x9c>)
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f107 0110 	add.w	r1, r7, #16
 8009a46:	2300      	movs	r3, #0
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	f7fe f933 	bl	8007cb4 <xQueueGenericSendFromISR>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3728      	adds	r7, #40	; 0x28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20005de0 	.word	0x20005de0

08009a60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <prvProcessExpiredTimer+0x98>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fd fd6d 	bl	8007558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d024      	beq.n	8009ad6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	18d1      	adds	r1, r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	6978      	ldr	r0, [r7, #20]
 8009a9a:	f000 f8d3 	bl	8009c44 <prvInsertTimerInActiveList>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d021      	beq.n	8009ae8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	2100      	movs	r1, #0
 8009aae:	6978      	ldr	r0, [r7, #20]
 8009ab0:	f7ff ff86 	bl	80099c0 <xTimerGenericCommand>
 8009ab4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d115      	bne.n	8009ae8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	b672      	cpsid	i
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	b662      	cpsie	i
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	6978      	ldr	r0, [r7, #20]
 8009aee:	4798      	blx	r3
}
 8009af0:	bf00      	nop
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20005dd8 	.word	0x20005dd8

08009afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b04:	f107 0308 	add.w	r3, r7, #8
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f857 	bl	8009bbc <prvGetNextExpireTime>
 8009b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4619      	mov	r1, r3
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 f803 	bl	8009b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b1a:	f000 f8d5 	bl	8009cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b1e:	e7f1      	b.n	8009b04 <prvTimerTask+0x8>

08009b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b2a:	f7ff f8f9 	bl	8008d20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b2e:	f107 0308 	add.w	r3, r7, #8
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f866 	bl	8009c04 <prvSampleTimeNow>
 8009b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d130      	bne.n	8009ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <prvProcessTimerOrBlockTask+0x3c>
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d806      	bhi.n	8009b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b4e:	f7ff f8f5 	bl	8008d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ff83 	bl	8009a60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b5a:	e024      	b.n	8009ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d008      	beq.n	8009b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <prvProcessTimerOrBlockTask+0x90>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <prvProcessTimerOrBlockTask+0x50>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <prvProcessTimerOrBlockTask+0x52>
 8009b70:	2300      	movs	r3, #0
 8009b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b74:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <prvProcessTimerOrBlockTask+0x94>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	4619      	mov	r1, r3
 8009b82:	f7fe fe2f 	bl	80087e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b86:	f7ff f8d9 	bl	8008d3c <xTaskResumeAll>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <prvProcessTimerOrBlockTask+0x98>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
}
 8009ba0:	e001      	b.n	8009ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ba2:	f7ff f8cb 	bl	8008d3c <xTaskResumeAll>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20005ddc 	.word	0x20005ddc
 8009bb4:	20005de0 	.word	0x20005de0
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bc4:	4b0e      	ldr	r3, [pc, #56]	; (8009c00 <prvGetNextExpireTime+0x44>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <prvGetNextExpireTime+0x16>
 8009bce:	2201      	movs	r2, #1
 8009bd0:	e000      	b.n	8009bd4 <prvGetNextExpireTime+0x18>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <prvGetNextExpireTime+0x44>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
 8009bea:	e001      	b.n	8009bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	20005dd8 	.word	0x20005dd8

08009c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c0c:	f7ff f936 	bl	8008e7c <xTaskGetTickCount>
 8009c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <prvSampleTimeNow+0x3c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d205      	bcs.n	8009c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c1c:	f000 f93c 	bl	8009e98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	e002      	b.n	8009c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c2e:	4a04      	ldr	r2, [pc, #16]	; (8009c40 <prvSampleTimeNow+0x3c>)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20005de8 	.word	0x20005de8

08009c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
 8009c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d812      	bhi.n	8009c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d302      	bcc.n	8009c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	e01b      	b.n	8009cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <prvInsertTimerInActiveList+0x7c>)
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3304      	adds	r3, #4
 8009c86:	4619      	mov	r1, r3
 8009c88:	4610      	mov	r0, r2
 8009c8a:	f7fd fc2c 	bl	80074e6 <vListInsert>
 8009c8e:	e012      	b.n	8009cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d206      	bcs.n	8009ca6 <prvInsertTimerInActiveList+0x62>
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d302      	bcc.n	8009ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	e007      	b.n	8009cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ca6:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <prvInsertTimerInActiveList+0x80>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f7fd fc18 	bl	80074e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cb6:	697b      	ldr	r3, [r7, #20]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20005ddc 	.word	0x20005ddc
 8009cc4:	20005dd8 	.word	0x20005dd8

08009cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	; 0x38
 8009ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cce:	e0d0      	b.n	8009e72 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	da1a      	bge.n	8009d0c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cd6:	1d3b      	adds	r3, r7, #4
 8009cd8:	3304      	adds	r3, #4
 8009cda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10c      	bne.n	8009cfc <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce6:	b672      	cpsid	i
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	b662      	cpsie	i
 8009cf6:	61fb      	str	r3, [r7, #28]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d02:	6850      	ldr	r0, [r2, #4]
 8009d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d06:	6892      	ldr	r2, [r2, #8]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f2c0 80ae 	blt.w	8009e70 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	3304      	adds	r3, #4
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fd fc17 	bl	8007558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7ff ff69 	bl	8009c04 <prvSampleTimeNow>
 8009d32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	f200 809b 	bhi.w	8009e72 <prvProcessReceivedCommands+0x1aa>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <prvProcessReceivedCommands+0x7c>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009d6d 	.word	0x08009d6d
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	08009d6d 	.word	0x08009d6d
 8009d50:	08009de5 	.word	0x08009de5
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009e47 	.word	0x08009e47
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009d6d 	.word	0x08009d6d
 8009d64:	08009de5 	.word	0x08009de5
 8009d68:	08009df9 	.word	0x08009df9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d72:	f043 0301 	orr.w	r3, r3, #1
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	18d1      	adds	r1, r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8c:	f7ff ff5a 	bl	8009c44 <prvInsertTimerInActiveList>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d06d      	beq.n	8009e72 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d062      	beq.n	8009e72 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	441a      	add	r2, r3
 8009db4:	2300      	movs	r3, #0
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	2100      	movs	r1, #0
 8009dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbe:	f7ff fdff 	bl	80099c0 <xTimerGenericCommand>
 8009dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d153      	bne.n	8009e72 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	b672      	cpsid	i
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	b662      	cpsie	i
 8009dde:	61bb      	str	r3, [r7, #24]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dea:	f023 0301 	bic.w	r3, r3, #1
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009df6:	e03c      	b.n	8009e72 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfe:	f043 0301 	orr.w	r3, r3, #1
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10c      	bne.n	8009e32 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	b672      	cpsid	i
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	b662      	cpsie	i
 8009e2c:	617b      	str	r3, [r7, #20]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	18d1      	adds	r1, r2, r3
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e40:	f7ff ff00 	bl	8009c44 <prvInsertTimerInActiveList>
					break;
 8009e44:	e015      	b.n	8009e72 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4c:	f003 0302 	and.w	r3, r3, #2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d103      	bne.n	8009e5c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e56:	f000 fbc7 	bl	800a5e8 <vPortFree>
 8009e5a:	e00a      	b.n	8009e72 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e62:	f023 0301 	bic.w	r3, r3, #1
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e6e:	e000      	b.n	8009e72 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <prvProcessReceivedCommands+0x1cc>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	1d39      	adds	r1, r7, #4
 8009e78:	2200      	movs	r2, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f850 	bl	8007f20 <xQueueReceive>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f47f af24 	bne.w	8009cd0 <prvProcessReceivedCommands+0x8>
	}
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	3730      	adds	r7, #48	; 0x30
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20005de0 	.word	0x20005de0

08009e98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e9e:	e04a      	b.n	8009f36 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ea0:	4b2e      	ldr	r3, [pc, #184]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eaa:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fd fb4d 	bl	8007558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d030      	beq.n	8009f36 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4413      	add	r3, r2
 8009edc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d90e      	bls.n	8009f04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ef2:	4b1a      	ldr	r3, [pc, #104]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fd faf2 	bl	80074e6 <vListInsert>
 8009f02:	e018      	b.n	8009f36 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f04:	2300      	movs	r3, #0
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f7ff fd56 	bl	80099c0 <xTimerGenericCommand>
 8009f14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d10c      	bne.n	8009f36 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	b672      	cpsid	i
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	b662      	cpsie	i
 8009f30:	603b      	str	r3, [r7, #0]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1af      	bne.n	8009ea0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <prvSwitchTimerLists+0xc8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a04      	ldr	r2, [pc, #16]	; (8009f5c <prvSwitchTimerLists+0xc4>)
 8009f4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f4e:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <prvSwitchTimerLists+0xc8>)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bf00      	nop
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	20005dd8 	.word	0x20005dd8
 8009f60:	20005ddc 	.word	0x20005ddc

08009f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f6a:	f000 f947 	bl	800a1fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f6e:	4b15      	ldr	r3, [pc, #84]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f78:	f7fd fa64 	bl	8007444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f7c:	4813      	ldr	r0, [pc, #76]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f7e:	f7fd fa61 	bl	8007444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <prvCheckForValidListAndQueue+0x6c>)
 8009f84:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <prvCheckForValidListAndQueue+0x70>)
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <prvCheckForValidListAndQueue+0x74>)
 8009f94:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <prvCheckForValidListAndQueue+0x78>)
 8009f96:	2110      	movs	r1, #16
 8009f98:	200a      	movs	r0, #10
 8009f9a:	f7fd fb71 	bl	8007680 <xQueueGenericCreateStatic>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	490b      	ldr	r1, [pc, #44]	; (8009fe0 <prvCheckForValidListAndQueue+0x7c>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fbc2 	bl	800873c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f000 f954 	bl	800a264 <vPortExitCritical>
}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20005de0 	.word	0x20005de0
 8009fc8:	20005db0 	.word	0x20005db0
 8009fcc:	20005dc4 	.word	0x20005dc4
 8009fd0:	20005dd8 	.word	0x20005dd8
 8009fd4:	20005ddc 	.word	0x20005ddc
 8009fd8:	20005e8c 	.word	0x20005e8c
 8009fdc:	20005dec 	.word	0x20005dec
 8009fe0:	0801ac98 	.word	0x0801ac98

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a0c      	ldr	r2, [pc, #48]	; (800a048 <pxPortInitialiseStack+0x64>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f06f 0202 	mvn.w	r2, #2
 800a032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b20      	subs	r3, #32
 800a038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a03a:	68fb      	ldr	r3, [r7, #12]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	0800a04d 	.word	0x0800a04d

0800a04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <prvTaskExitError+0x5c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a05e:	d00c      	beq.n	800a07a <prvTaskExitError+0x2e>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	b672      	cpsid	i
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	b662      	cpsie	i
 800a074:	60fb      	str	r3, [r7, #12]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <prvTaskExitError+0x2c>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	60bb      	str	r3, [r7, #8]
}
 800a090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a092:	bf00      	nop
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0fc      	beq.n	800a094 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	20000020 	.word	0x20000020
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <pxCurrentTCBConst2>)
 800a0b2:	6819      	ldr	r1, [r3, #0]
 800a0b4:	6808      	ldr	r0, [r1, #0]
 800a0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	f380 8809 	msr	PSP, r0
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f04f 0000 	mov.w	r0, #0
 800a0c6:	f380 8811 	msr	BASEPRI, r0
 800a0ca:	4770      	bx	lr
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst2>:
 800a0d0:	200058b0 	.word	0x200058b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0d8:	4808      	ldr	r0, [pc, #32]	; (800a0fc <prvPortStartFirstTask+0x24>)
 800a0da:	6800      	ldr	r0, [r0, #0]
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	f380 8808 	msr	MSP, r0
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8814 	msr	CONTROL, r0
 800a0ea:	b662      	cpsie	i
 800a0ec:	b661      	cpsie	f
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	df00      	svc	0
 800a0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0fa:	bf00      	nop
 800a0fc:	e000ed08 	.word	0xe000ed08

0800a100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a106:	4b37      	ldr	r3, [pc, #220]	; (800a1e4 <xPortStartScheduler+0xe4>)
 800a108:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	22ff      	movs	r2, #255	; 0xff
 800a116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	4b2f      	ldr	r3, [pc, #188]	; (800a1e8 <xPortStartScheduler+0xe8>)
 800a12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a12e:	4b2f      	ldr	r3, [pc, #188]	; (800a1ec <xPortStartScheduler+0xec>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a134:	e009      	b.n	800a14a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a136:	4b2d      	ldr	r3, [pc, #180]	; (800a1ec <xPortStartScheduler+0xec>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	4a2b      	ldr	r2, [pc, #172]	; (800a1ec <xPortStartScheduler+0xec>)
 800a13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a140:	78fb      	ldrb	r3, [r7, #3]
 800a142:	b2db      	uxtb	r3, r3
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b80      	cmp	r3, #128	; 0x80
 800a154:	d0ef      	beq.n	800a136 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a156:	4b25      	ldr	r3, [pc, #148]	; (800a1ec <xPortStartScheduler+0xec>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f1c3 0307 	rsb	r3, r3, #7
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d00c      	beq.n	800a17c <xPortStartScheduler+0x7c>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	b672      	cpsid	i
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	b662      	cpsie	i
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a17c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <xPortStartScheduler+0xec>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	4a1a      	ldr	r2, [pc, #104]	; (800a1ec <xPortStartScheduler+0xec>)
 800a184:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a186:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <xPortStartScheduler+0xec>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a18e:	4a17      	ldr	r2, [pc, #92]	; (800a1ec <xPortStartScheduler+0xec>)
 800a190:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	b2da      	uxtb	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a19a:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <xPortStartScheduler+0xf0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a14      	ldr	r2, [pc, #80]	; (800a1f0 <xPortStartScheduler+0xf0>)
 800a1a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <xPortStartScheduler+0xf0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a11      	ldr	r2, [pc, #68]	; (800a1f0 <xPortStartScheduler+0xf0>)
 800a1ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a1b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a1b2:	f000 f8dd 	bl	800a370 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a1b6:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <xPortStartScheduler+0xf4>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a1bc:	f000 f8fc 	bl	800a3b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1c0:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a0c      	ldr	r2, [pc, #48]	; (800a1f8 <xPortStartScheduler+0xf8>)
 800a1c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1cc:	f7ff ff84 	bl	800a0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1d0:	f7fe ff32 	bl	8009038 <vTaskSwitchContext>
	prvTaskExitError();
 800a1d4:	f7ff ff3a 	bl	800a04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	e000e400 	.word	0xe000e400
 800a1e8:	20005edc 	.word	0x20005edc
 800a1ec:	20005ee0 	.word	0x20005ee0
 800a1f0:	e000ed20 	.word	0xe000ed20
 800a1f4:	20000020 	.word	0x20000020
 800a1f8:	e000ef34 	.word	0xe000ef34

0800a1fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	b672      	cpsid	i
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	b662      	cpsie	i
 800a216:	607b      	str	r3, [r7, #4]
}
 800a218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a21a:	4b10      	ldr	r3, [pc, #64]	; (800a25c <vPortEnterCritical+0x60>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <vPortEnterCritical+0x60>)
 800a222:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a224:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <vPortEnterCritical+0x60>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d111      	bne.n	800a250 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <vPortEnterCritical+0x64>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00c      	beq.n	800a250 <vPortEnterCritical+0x54>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	b672      	cpsid	i
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	b662      	cpsie	i
 800a24a:	603b      	str	r3, [r7, #0]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <vPortEnterCritical+0x52>
	}
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000020 	.word	0x20000020
 800a260:	e000ed04 	.word	0xe000ed04

0800a264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <vPortExitCritical+0x54>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10c      	bne.n	800a28c <vPortExitCritical+0x28>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	b672      	cpsid	i
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	b662      	cpsie	i
 800a286:	607b      	str	r3, [r7, #4]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <vPortExitCritical+0x54>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	4a09      	ldr	r2, [pc, #36]	; (800a2b8 <vPortExitCritical+0x54>)
 800a294:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a296:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <vPortExitCritical+0x54>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <vPortExitCritical+0x46>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f383 8811 	msr	BASEPRI, r3
}
 800a2a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	20000020 	.word	0x20000020
 800a2bc:	00000000 	.word	0x00000000

0800a2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2c0:	f3ef 8009 	mrs	r0, PSP
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4b15      	ldr	r3, [pc, #84]	; (800a320 <pxCurrentTCBConst>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	f01e 0f10 	tst.w	lr, #16
 800a2d0:	bf08      	it	eq
 800a2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2da:	6010      	str	r0, [r2, #0]
 800a2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2e4:	b672      	cpsid	i
 800a2e6:	f380 8811 	msr	BASEPRI, r0
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	b662      	cpsie	i
 800a2f4:	f7fe fea0 	bl	8009038 <vTaskSwitchContext>
 800a2f8:	f04f 0000 	mov.w	r0, #0
 800a2fc:	f380 8811 	msr	BASEPRI, r0
 800a300:	bc09      	pop	{r0, r3}
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	f01e 0f10 	tst.w	lr, #16
 800a30e:	bf08      	it	eq
 800a310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a314:	f380 8809 	msr	PSP, r0
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <pxCurrentTCBConst>:
 800a320:	200058b0 	.word	0x200058b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	b672      	cpsid	i
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	b662      	cpsie	i
 800a342:	607b      	str	r3, [r7, #4]
}
 800a344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a346:	f7fe fdbb 	bl	8008ec0 <xTaskIncrementTick>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a350:	4b06      	ldr	r3, [pc, #24]	; (800a36c <SysTick_Handler+0x44>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f383 8811 	msr	BASEPRI, r3
}
 800a362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a370:	b480      	push	{r7}
 800a372:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a374:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a376:	2200      	movs	r2, #0
 800a378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <vPortSetupTimerInterrupt+0x38>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <vPortSetupTimerInterrupt+0x3c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a0a      	ldr	r2, [pc, #40]	; (800a3b0 <vPortSetupTimerInterrupt+0x40>)
 800a386:	fba2 2303 	umull	r2, r3, r2, r3
 800a38a:	099b      	lsrs	r3, r3, #6
 800a38c:	4a09      	ldr	r2, [pc, #36]	; (800a3b4 <vPortSetupTimerInterrupt+0x44>)
 800a38e:	3b01      	subs	r3, #1
 800a390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a392:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <vPortSetupTimerInterrupt+0x34>)
 800a394:	2207      	movs	r2, #7
 800a396:	601a      	str	r2, [r3, #0]
}
 800a398:	bf00      	nop
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	e000e010 	.word	0xe000e010
 800a3a8:	e000e018 	.word	0xe000e018
 800a3ac:	20000000 	.word	0x20000000
 800a3b0:	10624dd3 	.word	0x10624dd3
 800a3b4:	e000e014 	.word	0xe000e014

0800a3b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a3b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3c8 <vPortEnableVFP+0x10>
 800a3bc:	6801      	ldr	r1, [r0, #0]
 800a3be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a3c2:	6001      	str	r1, [r0, #0]
 800a3c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed88 	.word	0xe000ed88

0800a3cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3d2:	f3ef 8305 	mrs	r3, IPSR
 800a3d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	d916      	bls.n	800a40c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3de:	4a19      	ldr	r2, [pc, #100]	; (800a444 <vPortValidateInterruptPriority+0x78>)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <vPortValidateInterruptPriority+0x7c>)
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	7afa      	ldrb	r2, [r7, #11]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d20c      	bcs.n	800a40c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	b672      	cpsid	i
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	b662      	cpsie	i
 800a406:	607b      	str	r3, [r7, #4]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <vPortValidateInterruptPriority+0x80>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a414:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <vPortValidateInterruptPriority+0x84>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d90c      	bls.n	800a436 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	b672      	cpsid	i
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	b662      	cpsie	i
 800a430:	603b      	str	r3, [r7, #0]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <vPortValidateInterruptPriority+0x68>
	}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	e000e3f0 	.word	0xe000e3f0
 800a448:	20005edc 	.word	0x20005edc
 800a44c:	e000ed0c 	.word	0xe000ed0c
 800a450:	20005ee0 	.word	0x20005ee0

0800a454 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a460:	f7fe fc5e 	bl	8008d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a464:	4b5b      	ldr	r3, [pc, #364]	; (800a5d4 <pvPortMalloc+0x180>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a46c:	f000 f91a 	bl	800a6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a470:	4b59      	ldr	r3, [pc, #356]	; (800a5d8 <pvPortMalloc+0x184>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4013      	ands	r3, r2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f040 8092 	bne.w	800a5a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d01f      	beq.n	800a4c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a484:	2208      	movs	r2, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4413      	add	r3, r2
 800a48a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f003 0307 	and.w	r3, r3, #7
 800a492:	2b00      	cmp	r3, #0
 800a494:	d016      	beq.n	800a4c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f023 0307 	bic.w	r3, r3, #7
 800a49c:	3308      	adds	r3, #8
 800a49e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <pvPortMalloc+0x70>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	b672      	cpsid	i
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	b662      	cpsie	i
 800a4be:	617b      	str	r3, [r7, #20]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d06b      	beq.n	800a5a2 <pvPortMalloc+0x14e>
 800a4ca:	4b44      	ldr	r3, [pc, #272]	; (800a5dc <pvPortMalloc+0x188>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d866      	bhi.n	800a5a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4d4:	4b42      	ldr	r3, [pc, #264]	; (800a5e0 <pvPortMalloc+0x18c>)
 800a4d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4d8:	4b41      	ldr	r3, [pc, #260]	; (800a5e0 <pvPortMalloc+0x18c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4de:	e004      	b.n	800a4ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d903      	bls.n	800a4fc <pvPortMalloc+0xa8>
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f1      	bne.n	800a4e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4fc:	4b35      	ldr	r3, [pc, #212]	; (800a5d4 <pvPortMalloc+0x180>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	429a      	cmp	r2, r3
 800a504:	d04d      	beq.n	800a5a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2208      	movs	r2, #8
 800a50c:	4413      	add	r3, r2
 800a50e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	1ad2      	subs	r2, r2, r3
 800a520:	2308      	movs	r3, #8
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	429a      	cmp	r2, r3
 800a526:	d921      	bls.n	800a56c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4413      	add	r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <pvPortMalloc+0x100>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	b672      	cpsid	i
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	b662      	cpsie	i
 800a54e:	613b      	str	r3, [r7, #16]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a566:	69b8      	ldr	r0, [r7, #24]
 800a568:	f000 f8fe 	bl	800a768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a56c:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <pvPortMalloc+0x188>)
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	4a19      	ldr	r2, [pc, #100]	; (800a5dc <pvPortMalloc+0x188>)
 800a578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a57a:	4b18      	ldr	r3, [pc, #96]	; (800a5dc <pvPortMalloc+0x188>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	4b19      	ldr	r3, [pc, #100]	; (800a5e4 <pvPortMalloc+0x190>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	429a      	cmp	r2, r3
 800a584:	d203      	bcs.n	800a58e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <pvPortMalloc+0x188>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a16      	ldr	r2, [pc, #88]	; (800a5e4 <pvPortMalloc+0x190>)
 800a58c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <pvPortMalloc+0x184>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	431a      	orrs	r2, r3
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	2200      	movs	r2, #0
 800a5a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a2:	f7fe fbcb 	bl	8008d3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f003 0307 	and.w	r3, r3, #7
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00c      	beq.n	800a5ca <pvPortMalloc+0x176>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	b672      	cpsid	i
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	b662      	cpsie	i
 800a5c4:	60fb      	str	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	e7fe      	b.n	800a5c8 <pvPortMalloc+0x174>
	return pvReturn;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3728      	adds	r7, #40	; 0x28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20009aec 	.word	0x20009aec
 800a5d8:	20009af8 	.word	0x20009af8
 800a5dc:	20009af0 	.word	0x20009af0
 800a5e0:	20009ae4 	.word	0x20009ae4
 800a5e4:	20009af4 	.word	0x20009af4

0800a5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d04c      	beq.n	800a694 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5fa:	2308      	movs	r3, #8
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b23      	ldr	r3, [pc, #140]	; (800a69c <vPortFree+0xb4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4013      	ands	r3, r2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10c      	bne.n	800a630 <vPortFree+0x48>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	b672      	cpsid	i
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	b662      	cpsie	i
 800a62a:	60fb      	str	r3, [r7, #12]
}
 800a62c:	bf00      	nop
 800a62e:	e7fe      	b.n	800a62e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00c      	beq.n	800a652 <vPortFree+0x6a>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	b672      	cpsid	i
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	b662      	cpsie	i
 800a64c:	60bb      	str	r3, [r7, #8]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b11      	ldr	r3, [pc, #68]	; (800a69c <vPortFree+0xb4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d019      	beq.n	800a694 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d115      	bne.n	800a694 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <vPortFree+0xb4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	43db      	mvns	r3, r3
 800a672:	401a      	ands	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a678:	f7fe fb52 	bl	8008d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <vPortFree+0xb8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	4a06      	ldr	r2, [pc, #24]	; (800a6a0 <vPortFree+0xb8>)
 800a688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a68a:	6938      	ldr	r0, [r7, #16]
 800a68c:	f000 f86c 	bl	800a768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a690:	f7fe fb54 	bl	8008d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a694:	bf00      	nop
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20009af8 	.word	0x20009af8
 800a6a0:	20009af0 	.word	0x20009af0

0800a6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6b0:	4b27      	ldr	r3, [pc, #156]	; (800a750 <prvHeapInit+0xac>)
 800a6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00c      	beq.n	800a6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0307 	bic.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	4a1f      	ldr	r2, [pc, #124]	; (800a750 <prvHeapInit+0xac>)
 800a6d4:	4413      	add	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6dc:	4a1d      	ldr	r2, [pc, #116]	; (800a754 <prvHeapInit+0xb0>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6e2:	4b1c      	ldr	r3, [pc, #112]	; (800a754 <prvHeapInit+0xb0>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	1a9b      	subs	r3, r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f023 0307 	bic.w	r3, r3, #7
 800a6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4a15      	ldr	r2, [pc, #84]	; (800a758 <prvHeapInit+0xb4>)
 800a704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <prvHeapInit+0xb4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a70e:	4b12      	ldr	r3, [pc, #72]	; (800a758 <prvHeapInit+0xb4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a724:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <prvHeapInit+0xb4>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4a0a      	ldr	r2, [pc, #40]	; (800a75c <prvHeapInit+0xb8>)
 800a732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4a09      	ldr	r2, [pc, #36]	; (800a760 <prvHeapInit+0xbc>)
 800a73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <prvHeapInit+0xc0>)
 800a73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a742:	601a      	str	r2, [r3, #0]
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	20005ee4 	.word	0x20005ee4
 800a754:	20009ae4 	.word	0x20009ae4
 800a758:	20009aec 	.word	0x20009aec
 800a75c:	20009af4 	.word	0x20009af4
 800a760:	20009af0 	.word	0x20009af0
 800a764:	20009af8 	.word	0x20009af8

0800a768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a770:	4b28      	ldr	r3, [pc, #160]	; (800a814 <prvInsertBlockIntoFreeList+0xac>)
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	e002      	b.n	800a77c <prvInsertBlockIntoFreeList+0x14>
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	429a      	cmp	r2, r3
 800a784:	d8f7      	bhi.n	800a776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	4413      	add	r3, r2
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	429a      	cmp	r2, r3
 800a796:	d108      	bne.n	800a7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	441a      	add	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	441a      	add	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d118      	bne.n	800a7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b15      	ldr	r3, [pc, #84]	; (800a818 <prvInsertBlockIntoFreeList+0xb0>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d00d      	beq.n	800a7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	441a      	add	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	e008      	b.n	800a7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7e6:	4b0c      	ldr	r3, [pc, #48]	; (800a818 <prvInsertBlockIntoFreeList+0xb0>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	e003      	b.n	800a7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d002      	beq.n	800a806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a806:	bf00      	nop
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20009ae4 	.word	0x20009ae4
 800a818:	20009aec 	.word	0x20009aec

0800a81c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	461a      	mov	r2, r3
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f002 f8d5 	bl	800c9e0 <tcpip_send_msg_wait_sem>
 800a836:	4603      	mov	r3, r0
 800a838:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a848:	e001      	b.n	800a84e <netconn_apimsg+0x32>
  }
  return err;
 800a84a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08c      	sub	sp, #48	; 0x30
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	603a      	str	r2, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	460b      	mov	r3, r1
 800a866:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 ff1b 	bl	800b6a8 <netconn_alloc>
 800a872:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d054      	beq.n	800a924 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a87a:	79bb      	ldrb	r3, [r7, #6]
 800a87c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4619      	mov	r1, r3
 800a888:	4829      	ldr	r0, [pc, #164]	; (800a930 <netconn_new_with_proto_and_callback+0xd8>)
 800a88a:	f7ff ffc7 	bl	800a81c <netconn_apimsg>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a894:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d043      	beq.n	800a924 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <netconn_new_with_proto_and_callback+0x58>
 800a8a4:	4b23      	ldr	r3, [pc, #140]	; (800a934 <netconn_new_with_proto_and_callback+0xdc>)
 800a8a6:	22a3      	movs	r2, #163	; 0xa3
 800a8a8:	4923      	ldr	r1, [pc, #140]	; (800a938 <netconn_new_with_proto_and_callback+0xe0>)
 800a8aa:	4824      	ldr	r0, [pc, #144]	; (800a93c <netconn_new_with_proto_and_callback+0xe4>)
 800a8ac:	f00d f970 	bl	8017b90 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b2:	3310      	adds	r3, #16
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f00c fe4d 	bl	8017554 <sys_mbox_valid>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <netconn_new_with_proto_and_callback+0x74>
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <netconn_new_with_proto_and_callback+0xdc>)
 800a8c2:	22a4      	movs	r2, #164	; 0xa4
 800a8c4:	491e      	ldr	r1, [pc, #120]	; (800a940 <netconn_new_with_proto_and_callback+0xe8>)
 800a8c6:	481d      	ldr	r0, [pc, #116]	; (800a93c <netconn_new_with_proto_and_callback+0xe4>)
 800a8c8:	f00d f962 	bl	8017b90 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	3314      	adds	r3, #20
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f00c fe3f 	bl	8017554 <sys_mbox_valid>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d005      	beq.n	800a8e8 <netconn_new_with_proto_and_callback+0x90>
 800a8dc:	4b15      	ldr	r3, [pc, #84]	; (800a934 <netconn_new_with_proto_and_callback+0xdc>)
 800a8de:	22a6      	movs	r2, #166	; 0xa6
 800a8e0:	4918      	ldr	r1, [pc, #96]	; (800a944 <netconn_new_with_proto_and_callback+0xec>)
 800a8e2:	4816      	ldr	r0, [pc, #88]	; (800a93c <netconn_new_with_proto_and_callback+0xe4>)
 800a8e4:	f00d f954 	bl	8017b90 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	330c      	adds	r3, #12
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f00c febf 	bl	8017670 <sys_sem_valid>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d105      	bne.n	800a904 <netconn_new_with_proto_and_callback+0xac>
 800a8f8:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <netconn_new_with_proto_and_callback+0xdc>)
 800a8fa:	22a9      	movs	r2, #169	; 0xa9
 800a8fc:	4912      	ldr	r1, [pc, #72]	; (800a948 <netconn_new_with_proto_and_callback+0xf0>)
 800a8fe:	480f      	ldr	r0, [pc, #60]	; (800a93c <netconn_new_with_proto_and_callback+0xe4>)
 800a900:	f00d f946 	bl	8017b90 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	330c      	adds	r3, #12
 800a908:	4618      	mov	r0, r3
 800a90a:	f00c fea4 	bl	8017656 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a910:	3310      	adds	r3, #16
 800a912:	4618      	mov	r0, r3
 800a914:	f00c fdaa 	bl	801746c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a91a:	2006      	movs	r0, #6
 800a91c:	f002 ff26 	bl	800d76c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a920:	2300      	movs	r3, #0
 800a922:	e000      	b.n	800a926 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a926:	4618      	mov	r0, r3
 800a928:	3730      	adds	r7, #48	; 0x30
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	0800b67d 	.word	0x0800b67d
 800a934:	0801aca0 	.word	0x0801aca0
 800a938:	0801acd4 	.word	0x0801acd4
 800a93c:	0801acf8 	.word	0x0801acf8
 800a940:	0801ad20 	.word	0x0801ad20
 800a944:	0801ad38 	.word	0x0801ad38
 800a948:	0801ad5c 	.word	0x0801ad5c

0800a94c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	; 0x30
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	e014      	b.n	800a988 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a962:	2329      	movs	r3, #41	; 0x29
 800a964:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a966:	f107 030c 	add.w	r3, r7, #12
 800a96a:	4619      	mov	r1, r3
 800a96c:	4808      	ldr	r0, [pc, #32]	; (800a990 <netconn_prepare_delete+0x44>)
 800a96e:	f7ff ff55 	bl	800a81c <netconn_apimsg>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <netconn_prepare_delete+0x3a>
    return err;
 800a980:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a984:	e000      	b.n	800a988 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3730      	adds	r7, #48	; 0x30
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	0800bbe1 	.word	0x0800bbe1

0800a994 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <netconn_delete+0x12>
    return ERR_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e00d      	b.n	800a9c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff ffd0 	bl	800a94c <netconn_prepare_delete>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <netconn_delete+0x2a>
    netconn_free(conn);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fedf 	bl	800b77c <netconn_free>
  }
  return err;
 800a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08e      	sub	sp, #56	; 0x38
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d109      	bne.n	800a9f4 <netconn_bind+0x28>
 800a9e0:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <netconn_bind+0x5c>)
 800a9e2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a9e6:	4911      	ldr	r1, [pc, #68]	; (800aa2c <netconn_bind+0x60>)
 800a9e8:	4811      	ldr	r0, [pc, #68]	; (800aa30 <netconn_bind+0x64>)
 800a9ea:	f00d f8d1 	bl	8017b90 <iprintf>
 800a9ee:	f06f 030f 	mvn.w	r3, #15
 800a9f2:	e015      	b.n	800aa20 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a9fa:	4b0e      	ldr	r3, [pc, #56]	; (800aa34 <netconn_bind+0x68>)
 800a9fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800aa0a:	f107 0314 	add.w	r3, r7, #20
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4809      	ldr	r0, [pc, #36]	; (800aa38 <netconn_bind+0x6c>)
 800aa12:	f7ff ff03 	bl	800a81c <netconn_apimsg>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800aa1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3738      	adds	r7, #56	; 0x38
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	0801aca0 	.word	0x0801aca0
 800aa2c:	0801add8 	.word	0x0801add8
 800aa30:	0801acf8 	.word	0x0801acf8
 800aa34:	0801df70 	.word	0x0801df70
 800aa38:	0800bd8d 	.word	0x0800bd8d

0800aa3c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08e      	sub	sp, #56	; 0x38
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d109      	bne.n	800aa64 <netconn_connect+0x28>
 800aa50:	4b11      	ldr	r3, [pc, #68]	; (800aa98 <netconn_connect+0x5c>)
 800aa52:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800aa56:	4911      	ldr	r1, [pc, #68]	; (800aa9c <netconn_connect+0x60>)
 800aa58:	4811      	ldr	r0, [pc, #68]	; (800aaa0 <netconn_connect+0x64>)
 800aa5a:	f00d f899 	bl	8017b90 <iprintf>
 800aa5e:	f06f 030f 	mvn.w	r3, #15
 800aa62:	e015      	b.n	800aa90 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <netconn_connect+0x68>)
 800aa6c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800aa7a:	f107 0314 	add.w	r3, r7, #20
 800aa7e:	4619      	mov	r1, r3
 800aa80:	4809      	ldr	r0, [pc, #36]	; (800aaa8 <netconn_connect+0x6c>)
 800aa82:	f7ff fecb 	bl	800a81c <netconn_apimsg>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800aa8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3738      	adds	r7, #56	; 0x38
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0801aca0 	.word	0x0801aca0
 800aa9c:	0801ae14 	.word	0x0801ae14
 800aaa0:	0801acf8 	.word	0x0801acf8
 800aaa4:	0801df70 	.word	0x0801df70
 800aaa8:	0800bf05 	.word	0x0800bf05

0800aaac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <netconn_recv_data+0x2c>
 800aac4:	4b4d      	ldr	r3, [pc, #308]	; (800abfc <netconn_recv_data+0x150>)
 800aac6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800aaca:	494d      	ldr	r1, [pc, #308]	; (800ac00 <netconn_recv_data+0x154>)
 800aacc:	484d      	ldr	r0, [pc, #308]	; (800ac04 <netconn_recv_data+0x158>)
 800aace:	f00d f85f 	bl	8017b90 <iprintf>
 800aad2:	f06f 030f 	mvn.w	r3, #15
 800aad6:	e08d      	b.n	800abf4 <netconn_recv_data+0x148>
  *new_buf = NULL;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d109      	bne.n	800aaf8 <netconn_recv_data+0x4c>
 800aae4:	4b45      	ldr	r3, [pc, #276]	; (800abfc <netconn_recv_data+0x150>)
 800aae6:	f240 224a 	movw	r2, #586	; 0x24a
 800aaea:	4947      	ldr	r1, [pc, #284]	; (800ac08 <netconn_recv_data+0x15c>)
 800aaec:	4845      	ldr	r0, [pc, #276]	; (800ac04 <netconn_recv_data+0x158>)
 800aaee:	f00d f84f 	bl	8017b90 <iprintf>
 800aaf2:	f06f 030f 	mvn.w	r3, #15
 800aaf6:	e07d      	b.n	800abf4 <netconn_recv_data+0x148>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	3310      	adds	r3, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	f00c fd29 	bl	8017554 <sys_mbox_valid>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10e      	bne.n	800ab26 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 faae 	bl	800b06a <netconn_err>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ab12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ab1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab1e:	e069      	b.n	800abf4 <netconn_recv_data+0x148>
    }
    return ERR_CONN;
 800ab20:	f06f 030a 	mvn.w	r3, #10
 800ab24:	e066      	b.n	800abf4 <netconn_recv_data+0x148>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	7f1b      	ldrb	r3, [r3, #28]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10f      	bne.n	800ab52 <netconn_recv_data+0xa6>
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	7f1b      	ldrb	r3, [r3, #28]
 800ab40:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d104      	bne.n	800ab52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d023      	beq.n	800ab9a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3310      	adds	r3, #16
 800ab56:	f107 0214 	add.w	r2, r7, #20
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f00c fce2 	bl	8017526 <sys_arch_mbox_tryfetch>
 800ab62:	4603      	mov	r3, r0
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab68:	d11f      	bne.n	800abaa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fa7d 	bl	800b06a <netconn_err>
 800ab70:	4603      	mov	r3, r0
 800ab72:	77fb      	strb	r3, [r7, #31]
      if (err != ERR_OK) {
 800ab74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ab7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab80:	e038      	b.n	800abf4 <netconn_recv_data+0x148>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7f1b      	ldrb	r3, [r3, #28]
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d002      	beq.n	800ab94 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ab8e:	f06f 030a 	mvn.w	r3, #10
 800ab92:	e02f      	b.n	800abf4 <netconn_recv_data+0x148>
      }
      return ERR_WOULDBLOCK;
 800ab94:	f06f 0306 	mvn.w	r3, #6
 800ab98:	e02c      	b.n	800abf4 <netconn_recv_data+0x148>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3310      	adds	r3, #16
 800ab9e:	f107 0114 	add.w	r1, r7, #20
 800aba2:	2200      	movs	r2, #0
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00c fc8d 	bl	80174c4 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f107 0213 	add.w	r2, r7, #19
 800abb0:	4611      	mov	r1, r2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 faaa 	bl	800b10c <lwip_netconn_is_err_msg>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <netconn_recv_data+0x126>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800abbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abc2:	f113 0f0f 	cmn.w	r3, #15
 800abc6:	d101      	bne.n	800abcc <netconn_recv_data+0x120>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	e013      	b.n	800abf4 <netconn_recv_data+0x148>
      }
      return err;
 800abcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abd0:	e010      	b.n	800abf4 <netconn_recv_data+0x148>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	891b      	ldrh	r3, [r3, #8]
 800abd6:	83bb      	strh	r3, [r7, #28]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <netconn_recv_data+0x140>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe4:	8bba      	ldrh	r2, [r7, #28]
 800abe6:	2101      	movs	r1, #1
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	0801aca0 	.word	0x0801aca0
 800ac00:	0801aeb8 	.word	0x0801aeb8
 800ac04:	0801acf8 	.word	0x0801acf8
 800ac08:	0801aed8 	.word	0x0801aed8

0800ac0c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <netconn_tcp_recvd_msg+0x1e>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac26:	2b10      	cmp	r3, #16
 800ac28:	d009      	beq.n	800ac3e <netconn_tcp_recvd_msg+0x32>
 800ac2a:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <netconn_tcp_recvd_msg+0x50>)
 800ac2c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ac30:	490b      	ldr	r1, [pc, #44]	; (800ac60 <netconn_tcp_recvd_msg+0x54>)
 800ac32:	480c      	ldr	r0, [pc, #48]	; (800ac64 <netconn_tcp_recvd_msg+0x58>)
 800ac34:	f00c ffac 	bl	8017b90 <iprintf>
 800ac38:	f06f 030f 	mvn.w	r3, #15
 800ac3c:	e00a      	b.n	800ac54 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	4806      	ldr	r0, [pc, #24]	; (800ac68 <netconn_tcp_recvd_msg+0x5c>)
 800ac4e:	f7ff fde5 	bl	800a81c <netconn_apimsg>
 800ac52:	4603      	mov	r3, r0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	0801aca0 	.word	0x0801aca0
 800ac60:	0801aef4 	.word	0x0801aef4
 800ac64:	0801acf8 	.word	0x0801acf8
 800ac68:	0800c061 	.word	0x0800c061

0800ac6c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b090      	sub	sp, #64	; 0x40
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	4613      	mov	r3, r2
 800ac78:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3310      	adds	r3, #16
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f00c fc68 	bl	8017554 <sys_mbox_valid>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d102      	bne.n	800ac90 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ac8a:	f06f 030a 	mvn.w	r3, #10
 800ac8e:	e06d      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	7f1b      	ldrb	r3, [r3, #28]
 800ac94:	b25b      	sxtb	r3, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	da07      	bge.n	800acaa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	7f1b      	ldrb	r3, [r3, #28]
 800ac9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca2:	b2da      	uxtb	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800aca8:	e039      	b.n	800ad1e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800acaa:	79fb      	ldrb	r3, [r7, #7]
 800acac:	461a      	mov	r2, r3
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff fefb 	bl	800aaac <netconn_recv_data>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800acbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800acc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acc8:	e050      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	f003 0308 	and.w	r3, r3, #8
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10e      	bne.n	800acf8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <netconn_recv_data_tcp+0x7a>
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	891b      	ldrh	r3, [r3, #8]
 800ace4:	e000      	b.n	800ace8 <netconn_recv_data_tcp+0x7c>
 800ace6:	2301      	movs	r3, #1
 800ace8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800acea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acec:	f107 0214 	add.w	r2, r7, #20
 800acf0:	4619      	mov	r1, r3
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff ff8a 	bl	800ac0c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d134      	bne.n	800ad68 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d009      	beq.n	800ad1c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	7f1b      	ldrb	r3, [r3, #28]
 800ad0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ad16:	f06f 0306 	mvn.w	r3, #6
 800ad1a:	e027      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ad1c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d005      	beq.n	800ad32 <netconn_recv_data_tcp+0xc6>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10f      	bne.n	800ad5a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f000 f995 	bl	800b06a <netconn_err>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ad46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <netconn_recv_data_tcp+0xe8>
          return err;
 800ad4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad52:	e00b      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ad54:	f06f 030d 	mvn.w	r3, #13
 800ad58:	e008      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f947 	bl	800aff0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ad62:	f06f 030e 	mvn.w	r3, #14
 800ad66:	e001      	b.n	800ad6c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ad68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3740      	adds	r7, #64	; 0x40
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <netconn_recv+0x28>
 800ad88:	4b2b      	ldr	r3, [pc, #172]	; (800ae38 <netconn_recv+0xc4>)
 800ad8a:	f240 3263 	movw	r2, #867	; 0x363
 800ad8e:	492b      	ldr	r1, [pc, #172]	; (800ae3c <netconn_recv+0xc8>)
 800ad90:	482b      	ldr	r0, [pc, #172]	; (800ae40 <netconn_recv+0xcc>)
 800ad92:	f00c fefd 	bl	8017b90 <iprintf>
 800ad96:	f06f 030f 	mvn.w	r3, #15
 800ad9a:	e049      	b.n	800ae30 <netconn_recv+0xbc>
  *new_buf = NULL;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d109      	bne.n	800adbc <netconn_recv+0x48>
 800ada8:	4b23      	ldr	r3, [pc, #140]	; (800ae38 <netconn_recv+0xc4>)
 800adaa:	f240 3265 	movw	r2, #869	; 0x365
 800adae:	4925      	ldr	r1, [pc, #148]	; (800ae44 <netconn_recv+0xd0>)
 800adb0:	4823      	ldr	r0, [pc, #140]	; (800ae40 <netconn_recv+0xcc>)
 800adb2:	f00c feed 	bl	8017b90 <iprintf>
 800adb6:	f06f 030f 	mvn.w	r3, #15
 800adba:	e039      	b.n	800ae30 <netconn_recv+0xbc>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800adc0:	2005      	movs	r0, #5
 800adc2:	f002 fc5d 	bl	800d680 <memp_malloc>
 800adc6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d102      	bne.n	800add4 <netconn_recv+0x60>
      return ERR_MEM;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add2:	e02d      	b.n	800ae30 <netconn_recv+0xbc>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	2200      	movs	r2, #0
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff ff45 	bl	800ac6c <netconn_recv_data_tcp>
 800ade2:	4603      	mov	r3, r0
 800ade4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ade6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d006      	beq.n	800adfc <netconn_recv+0x88>
      memp_free(MEMP_NETBUF, buf);
 800adee:	6979      	ldr	r1, [r7, #20]
 800adf0:	2005      	movs	r0, #5
 800adf2:	f002 fcbb 	bl	800d76c <memp_free>
      return err;
 800adf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800adfa:	e019      	b.n	800ae30 <netconn_recv+0xbc>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <netconn_recv+0x9c>
 800ae02:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <netconn_recv+0xc4>)
 800ae04:	f240 3279 	movw	r2, #889	; 0x379
 800ae08:	490f      	ldr	r1, [pc, #60]	; (800ae48 <netconn_recv+0xd4>)
 800ae0a:	480d      	ldr	r0, [pc, #52]	; (800ae40 <netconn_recv+0xcc>)
 800ae0c:	f00c fec0 	bl	8017b90 <iprintf>

    buf->p = p;
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2200      	movs	r2, #0
 800ae26:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ae2e:	2300      	movs	r3, #0
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3718      	adds	r7, #24
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	0801aca0 	.word	0x0801aca0
 800ae3c:	0801aeb8 	.word	0x0801aeb8
 800ae40:	0801acf8 	.word	0x0801acf8
 800ae44:	0801aed8 	.word	0x0801aed8
 800ae48:	0801af44 	.word	0x0801af44

0800ae4c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
 800ae58:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ae62:	78fa      	ldrb	r2, [r7, #3]
 800ae64:	f107 0110 	add.w	r1, r7, #16
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	2201      	movs	r2, #1
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 f805 	bl	800ae80 <netconn_write_vectors_partly>
 800ae76:	4603      	mov	r3, r0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b092      	sub	sp, #72	; 0x48
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	460b      	mov	r3, r1
 800ae90:	80fb      	strh	r3, [r7, #6]
 800ae92:	4613      	mov	r3, r2
 800ae94:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <netconn_write_vectors_partly+0x30>
 800ae9c:	4b4e      	ldr	r3, [pc, #312]	; (800afd8 <netconn_write_vectors_partly+0x158>)
 800ae9e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aea2:	494e      	ldr	r1, [pc, #312]	; (800afdc <netconn_write_vectors_partly+0x15c>)
 800aea4:	484e      	ldr	r0, [pc, #312]	; (800afe0 <netconn_write_vectors_partly+0x160>)
 800aea6:	f00c fe73 	bl	8017b90 <iprintf>
 800aeaa:	f06f 030f 	mvn.w	r3, #15
 800aeae:	e08e      	b.n	800afce <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeb8:	2b10      	cmp	r3, #16
 800aeba:	d009      	beq.n	800aed0 <netconn_write_vectors_partly+0x50>
 800aebc:	4b46      	ldr	r3, [pc, #280]	; (800afd8 <netconn_write_vectors_partly+0x158>)
 800aebe:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800aec2:	4948      	ldr	r1, [pc, #288]	; (800afe4 <netconn_write_vectors_partly+0x164>)
 800aec4:	4846      	ldr	r0, [pc, #280]	; (800afe0 <netconn_write_vectors_partly+0x160>)
 800aec6:	f00c fe63 	bl	8017b90 <iprintf>
 800aeca:	f06f 0305 	mvn.w	r3, #5
 800aece:	e07e      	b.n	800afce <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	7f1b      	ldrb	r3, [r3, #28]
 800aed4:	f003 0302 	and.w	r3, r3, #2
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <netconn_write_vectors_partly+0x66>
 800aedc:	797b      	ldrb	r3, [r7, #5]
 800aede:	f003 0304 	and.w	r3, r3, #4
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d001      	beq.n	800aeea <netconn_write_vectors_partly+0x6a>
 800aee6:	2301      	movs	r3, #1
 800aee8:	e000      	b.n	800aeec <netconn_write_vectors_partly+0x6c>
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800aef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d005      	beq.n	800af04 <netconn_write_vectors_partly+0x84>
 800aef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800aefe:	f06f 0305 	mvn.w	r3, #5
 800af02:	e064      	b.n	800afce <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800af08:	2300      	movs	r3, #0
 800af0a:	643b      	str	r3, [r7, #64]	; 0x40
 800af0c:	e015      	b.n	800af3a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800af0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	4413      	add	r3, r2
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af1a:	4413      	add	r3, r2
 800af1c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af20:	00db      	lsls	r3, r3, #3
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	4413      	add	r3, r2
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d202      	bcs.n	800af34 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800af2e:	f06f 0305 	mvn.w	r3, #5
 800af32:	e04c      	b.n	800afce <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800af34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af36:	3301      	adds	r3, #1
 800af38:	643b      	str	r3, [r7, #64]	; 0x40
 800af3a:	88fb      	ldrh	r3, [r7, #6]
 800af3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af3e:	429a      	cmp	r2, r3
 800af40:	dbe5      	blt.n	800af0e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800af42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	e040      	b.n	800afce <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800af4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af4e:	2b00      	cmp	r3, #0
 800af50:	da0a      	bge.n	800af68 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800af58:	f06f 0305 	mvn.w	r3, #5
 800af5c:	e037      	b.n	800afce <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800af5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800af62:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800af78:	797b      	ldrb	r3, [r7, #5]
 800af7a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800af7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800af86:	f107 0314 	add.w	r3, r7, #20
 800af8a:	4619      	mov	r1, r3
 800af8c:	4816      	ldr	r0, [pc, #88]	; (800afe8 <netconn_write_vectors_partly+0x168>)
 800af8e:	f7ff fc45 	bl	800a81c <netconn_apimsg>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800af98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d114      	bne.n	800afca <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800afa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800afa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afaa:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800afac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afb8:	429a      	cmp	r2, r3
 800afba:	d006      	beq.n	800afca <netconn_write_vectors_partly+0x14a>
 800afbc:	4b06      	ldr	r3, [pc, #24]	; (800afd8 <netconn_write_vectors_partly+0x158>)
 800afbe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800afc2:	490a      	ldr	r1, [pc, #40]	; (800afec <netconn_write_vectors_partly+0x16c>)
 800afc4:	4806      	ldr	r0, [pc, #24]	; (800afe0 <netconn_write_vectors_partly+0x160>)
 800afc6:	f00c fde3 	bl	8017b90 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800afca:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3748      	adds	r7, #72	; 0x48
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	0801aca0 	.word	0x0801aca0
 800afdc:	0801af6c 	.word	0x0801af6c
 800afe0:	0801acf8 	.word	0x0801acf8
 800afe4:	0801af88 	.word	0x0801af88
 800afe8:	0800c465 	.word	0x0800c465
 800afec:	0801afac 	.word	0x0801afac

0800aff0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08c      	sub	sp, #48	; 0x30
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d109      	bne.n	800b016 <netconn_close_shutdown+0x26>
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <netconn_close_shutdown+0x50>)
 800b004:	f240 4247 	movw	r2, #1095	; 0x447
 800b008:	490e      	ldr	r1, [pc, #56]	; (800b044 <netconn_close_shutdown+0x54>)
 800b00a:	480f      	ldr	r0, [pc, #60]	; (800b048 <netconn_close_shutdown+0x58>)
 800b00c:	f00c fdc0 	bl	8017b90 <iprintf>
 800b010:	f06f 030f 	mvn.w	r3, #15
 800b014:	e010      	b.n	800b038 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b01e:	2329      	movs	r3, #41	; 0x29
 800b020:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800b022:	f107 030c 	add.w	r3, r7, #12
 800b026:	4619      	mov	r1, r3
 800b028:	4808      	ldr	r0, [pc, #32]	; (800b04c <netconn_close_shutdown+0x5c>)
 800b02a:	f7ff fbf7 	bl	800a81c <netconn_apimsg>
 800b02e:	4603      	mov	r3, r0
 800b030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800b034:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3730      	adds	r7, #48	; 0x30
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0801aca0 	.word	0x0801aca0
 800b044:	0801afd0 	.word	0x0801afd0
 800b048:	0801acf8 	.word	0x0801acf8
 800b04c:	0800c579 	.word	0x0800c579

0800b050 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800b058:	2103      	movs	r1, #3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff ffc8 	bl	800aff0 <netconn_close_shutdown>
 800b060:	4603      	mov	r3, r0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <netconn_err+0x12>
    return ERR_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	e00d      	b.n	800b098 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800b07c:	f00c fb74 	bl	8017768 <sys_arch_protect>
 800b080:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	7a1b      	ldrb	r3, [r3, #8]
 800b086:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f00c fb78 	bl	8017784 <sys_arch_unprotect>
  return err;
 800b094:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800b0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ae:	f113 0f0d 	cmn.w	r3, #13
 800b0b2:	d009      	beq.n	800b0c8 <lwip_netconn_err_to_msg+0x28>
 800b0b4:	f113 0f0d 	cmn.w	r3, #13
 800b0b8:	dc0c      	bgt.n	800b0d4 <lwip_netconn_err_to_msg+0x34>
 800b0ba:	f113 0f0f 	cmn.w	r3, #15
 800b0be:	d007      	beq.n	800b0d0 <lwip_netconn_err_to_msg+0x30>
 800b0c0:	f113 0f0e 	cmn.w	r3, #14
 800b0c4:	d002      	beq.n	800b0cc <lwip_netconn_err_to_msg+0x2c>
 800b0c6:	e005      	b.n	800b0d4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <lwip_netconn_err_to_msg+0x54>)
 800b0ca:	e00e      	b.n	800b0ea <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <lwip_netconn_err_to_msg+0x58>)
 800b0ce:	e00c      	b.n	800b0ea <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <lwip_netconn_err_to_msg+0x5c>)
 800b0d2:	e00a      	b.n	800b0ea <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800b0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d005      	beq.n	800b0e8 <lwip_netconn_err_to_msg+0x48>
 800b0dc:	4b08      	ldr	r3, [pc, #32]	; (800b100 <lwip_netconn_err_to_msg+0x60>)
 800b0de:	227d      	movs	r2, #125	; 0x7d
 800b0e0:	4908      	ldr	r1, [pc, #32]	; (800b104 <lwip_netconn_err_to_msg+0x64>)
 800b0e2:	4809      	ldr	r0, [pc, #36]	; (800b108 <lwip_netconn_err_to_msg+0x68>)
 800b0e4:	f00c fd54 	bl	8017b90 <iprintf>
      return NULL;
 800b0e8:	2300      	movs	r3, #0
  }
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	0801de6c 	.word	0x0801de6c
 800b0f8:	0801de6d 	.word	0x0801de6d
 800b0fc:	0801de6e 	.word	0x0801de6e
 800b100:	0801afec 	.word	0x0801afec
 800b104:	0801b020 	.word	0x0801b020
 800b108:	0801b030 	.word	0x0801b030

0800b10c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d105      	bne.n	800b128 <lwip_netconn_is_err_msg+0x1c>
 800b11c:	4b12      	ldr	r3, [pc, #72]	; (800b168 <lwip_netconn_is_err_msg+0x5c>)
 800b11e:	2285      	movs	r2, #133	; 0x85
 800b120:	4912      	ldr	r1, [pc, #72]	; (800b16c <lwip_netconn_is_err_msg+0x60>)
 800b122:	4813      	ldr	r0, [pc, #76]	; (800b170 <lwip_netconn_is_err_msg+0x64>)
 800b124:	f00c fd34 	bl	8017b90 <iprintf>

  if (msg == &netconn_aborted) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a12      	ldr	r2, [pc, #72]	; (800b174 <lwip_netconn_is_err_msg+0x68>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d104      	bne.n	800b13a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	22f3      	movs	r2, #243	; 0xf3
 800b134:	701a      	strb	r2, [r3, #0]
    return 1;
 800b136:	2301      	movs	r3, #1
 800b138:	e012      	b.n	800b160 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a0e      	ldr	r2, [pc, #56]	; (800b178 <lwip_netconn_is_err_msg+0x6c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d104      	bne.n	800b14c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	22f2      	movs	r2, #242	; 0xf2
 800b146:	701a      	strb	r2, [r3, #0]
    return 1;
 800b148:	2301      	movs	r3, #1
 800b14a:	e009      	b.n	800b160 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a0b      	ldr	r2, [pc, #44]	; (800b17c <lwip_netconn_is_err_msg+0x70>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d104      	bne.n	800b15e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	22f1      	movs	r2, #241	; 0xf1
 800b158:	701a      	strb	r2, [r3, #0]
    return 1;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	0801afec 	.word	0x0801afec
 800b16c:	0801b058 	.word	0x0801b058
 800b170:	0801b030 	.word	0x0801b030
 800b174:	0801de6c 	.word	0x0801de6c
 800b178:	0801de6d 	.word	0x0801de6d
 800b17c:	0801de6e 	.word	0x0801de6e

0800b180 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d106      	bne.n	800b1a2 <recv_tcp+0x22>
 800b194:	4b36      	ldr	r3, [pc, #216]	; (800b270 <recv_tcp+0xf0>)
 800b196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b19a:	4936      	ldr	r1, [pc, #216]	; (800b274 <recv_tcp+0xf4>)
 800b19c:	4836      	ldr	r0, [pc, #216]	; (800b278 <recv_tcp+0xf8>)
 800b19e:	f00c fcf7 	bl	8017b90 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d106      	bne.n	800b1b6 <recv_tcp+0x36>
 800b1a8:	4b31      	ldr	r3, [pc, #196]	; (800b270 <recv_tcp+0xf0>)
 800b1aa:	f240 122d 	movw	r2, #301	; 0x12d
 800b1ae:	4933      	ldr	r1, [pc, #204]	; (800b27c <recv_tcp+0xfc>)
 800b1b0:	4831      	ldr	r0, [pc, #196]	; (800b278 <recv_tcp+0xf8>)
 800b1b2:	f00c fced 	bl	8017b90 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800b1b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d006      	beq.n	800b1cc <recv_tcp+0x4c>
 800b1be:	4b2c      	ldr	r3, [pc, #176]	; (800b270 <recv_tcp+0xf0>)
 800b1c0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800b1c4:	492e      	ldr	r1, [pc, #184]	; (800b280 <recv_tcp+0x100>)
 800b1c6:	482c      	ldr	r0, [pc, #176]	; (800b278 <recv_tcp+0xf8>)
 800b1c8:	f00c fce2 	bl	8017b90 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <recv_tcp+0x5c>
    return ERR_VAL;
 800b1d6:	f06f 0305 	mvn.w	r3, #5
 800b1da:	e045      	b.n	800b268 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d006      	beq.n	800b1f4 <recv_tcp+0x74>
 800b1e6:	4b22      	ldr	r3, [pc, #136]	; (800b270 <recv_tcp+0xf0>)
 800b1e8:	f240 1235 	movw	r2, #309	; 0x135
 800b1ec:	4925      	ldr	r1, [pc, #148]	; (800b284 <recv_tcp+0x104>)
 800b1ee:	4822      	ldr	r0, [pc, #136]	; (800b278 <recv_tcp+0xf8>)
 800b1f0:	f00c fcce 	bl	8017b90 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	3310      	adds	r3, #16
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f00c f9ab 	bl	8017554 <sys_mbox_valid>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10d      	bne.n	800b220 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	891b      	ldrh	r3, [r3, #8]
 800b20e:	4619      	mov	r1, r3
 800b210:	68b8      	ldr	r0, [r7, #8]
 800b212:	f004 f839 	bl	800f288 <tcp_recved>
      pbuf_free(p);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f003 f948 	bl	800e4ac <pbuf_free>
    }
    return ERR_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	e023      	b.n	800b268 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <recv_tcp+0xb2>
    msg = p;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	891b      	ldrh	r3, [r3, #8]
 800b22e:	83fb      	strh	r3, [r7, #30]
 800b230:	e003      	b.n	800b23a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <recv_tcp+0x108>)
 800b234:	61bb      	str	r3, [r7, #24]
    len = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3310      	adds	r3, #16
 800b23e:	69b9      	ldr	r1, [r7, #24]
 800b240:	4618      	mov	r0, r3
 800b242:	f00c f925 	bl	8017490 <sys_mbox_trypost>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b250:	e00a      	b.n	800b268 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d005      	beq.n	800b266 <recv_tcp+0xe6>
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	8bfa      	ldrh	r2, [r7, #30]
 800b260:	2100      	movs	r1, #0
 800b262:	6978      	ldr	r0, [r7, #20]
 800b264:	4798      	blx	r3
  }

  return ERR_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	0801afec 	.word	0x0801afec
 800b274:	0801b064 	.word	0x0801b064
 800b278:	0801b030 	.word	0x0801b030
 800b27c:	0801b088 	.word	0x0801b088
 800b280:	0801b0a8 	.word	0x0801b0a8
 800b284:	0801b0c0 	.word	0x0801b0c0
 800b288:	0801de6e 	.word	0x0801de6e

0800b28c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <poll_tcp+0x22>
 800b2a0:	4b29      	ldr	r3, [pc, #164]	; (800b348 <poll_tcp+0xbc>)
 800b2a2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800b2a6:	4929      	ldr	r1, [pc, #164]	; (800b34c <poll_tcp+0xc0>)
 800b2a8:	4829      	ldr	r0, [pc, #164]	; (800b350 <poll_tcp+0xc4>)
 800b2aa:	f00c fc71 	bl	8017b90 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	785b      	ldrb	r3, [r3, #1]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d104      	bne.n	800b2c0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b2b6:	2101      	movs	r1, #1
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f000 ff07 	bl	800c0cc <lwip_netconn_do_writemore>
 800b2be:	e016      	b.n	800b2ee <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	785b      	ldrb	r3, [r3, #1]
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d112      	bne.n	800b2ee <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <poll_tcp+0x5a>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	7a5b      	ldrb	r3, [r3, #9]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	7a5a      	ldrb	r2, [r3, #9]
 800b2e0:	3a01      	subs	r2, #1
 800b2e2:	b2d2      	uxtb	r2, r2
 800b2e4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fb0f 	bl	800b90c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	7f1b      	ldrb	r3, [r3, #28]
 800b2f2:	f003 0310 	and.w	r3, r3, #16
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d021      	beq.n	800b33e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d01d      	beq.n	800b33e <poll_tcp+0xb2>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b30a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b30e:	d316      	bcc.n	800b33e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b318:	2b04      	cmp	r3, #4
 800b31a:	d810      	bhi.n	800b33e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	7f1b      	ldrb	r3, [r3, #28]
 800b320:	f023 0310 	bic.w	r3, r3, #16
 800b324:	b2da      	uxtb	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d005      	beq.n	800b33e <poll_tcp+0xb2>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	2200      	movs	r2, #0
 800b338:	2102      	movs	r1, #2
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	0801afec 	.word	0x0801afec
 800b34c:	0801b0e0 	.word	0x0801b0e0
 800b350:	0801b030 	.word	0x0801b030

0800b354 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <sent_tcp+0x26>
 800b36c:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <sent_tcp+0x9c>)
 800b36e:	f240 1293 	movw	r2, #403	; 0x193
 800b372:	4920      	ldr	r1, [pc, #128]	; (800b3f4 <sent_tcp+0xa0>)
 800b374:	4820      	ldr	r0, [pc, #128]	; (800b3f8 <sent_tcp+0xa4>)
 800b376:	f00c fc0b 	bl	8017b90 <iprintf>

  if (conn) {
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d032      	beq.n	800b3e6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	785b      	ldrb	r3, [r3, #1]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d104      	bne.n	800b392 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800b388:	2101      	movs	r1, #1
 800b38a:	6978      	ldr	r0, [r7, #20]
 800b38c:	f000 fe9e 	bl	800c0cc <lwip_netconn_do_writemore>
 800b390:	e007      	b.n	800b3a2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	785b      	ldrb	r3, [r3, #1]
 800b396:	2b04      	cmp	r3, #4
 800b398:	d103      	bne.n	800b3a2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800b39a:	2101      	movs	r1, #1
 800b39c:	6978      	ldr	r0, [r7, #20]
 800b39e:	f000 fab5 	bl	800b90c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d01d      	beq.n	800b3e6 <sent_tcp+0x92>
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b3b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b3b6:	d316      	bcc.n	800b3e6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d810      	bhi.n	800b3e6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	7f1b      	ldrb	r3, [r3, #28]
 800b3c8:	f023 0310 	bic.w	r3, r3, #16
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <sent_tcp+0x92>
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	88fa      	ldrh	r2, [r7, #6]
 800b3e0:	2102      	movs	r1, #2
 800b3e2:	6978      	ldr	r0, [r7, #20]
 800b3e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	0801afec 	.word	0x0801afec
 800b3f4:	0801b0e0 	.word	0x0801b0e0
 800b3f8:	0801b030 	.word	0x0801b030

0800b3fc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <err_tcp+0x24>
 800b412:	4b5f      	ldr	r3, [pc, #380]	; (800b590 <err_tcp+0x194>)
 800b414:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b418:	495e      	ldr	r1, [pc, #376]	; (800b594 <err_tcp+0x198>)
 800b41a:	485f      	ldr	r0, [pc, #380]	; (800b598 <err_tcp+0x19c>)
 800b41c:	f00c fbb8 	bl	8017b90 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800b420:	f00c f9a2 	bl	8017768 <sys_arch_protect>
 800b424:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2200      	movs	r2, #0
 800b42a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	7f1b      	ldrb	r3, [r3, #28]
 800b436:	f043 0301 	orr.w	r3, r3, #1
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	2200      	movs	r2, #0
 800b44a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f00c f999 	bl	8017784 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	d005      	beq.n	800b466 <err_tcp+0x6a>
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2200      	movs	r2, #0
 800b460:	2104      	movs	r1, #4
 800b462:	69f8      	ldr	r0, [r7, #28]
 800b464:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <err_tcp+0x7e>
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	69f8      	ldr	r0, [r7, #28]
 800b478:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d005      	beq.n	800b48e <err_tcp+0x92>
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	2200      	movs	r2, #0
 800b488:	2102      	movs	r1, #2
 800b48a:	69f8      	ldr	r0, [r7, #28]
 800b48c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b48e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fe04 	bl	800b0a0 <lwip_netconn_err_to_msg>
 800b498:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	3310      	adds	r3, #16
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f00c f858 	bl	8017554 <sys_mbox_valid>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d005      	beq.n	800b4b6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	3310      	adds	r3, #16
 800b4ae:	6939      	ldr	r1, [r7, #16]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f00b ffed 	bl	8017490 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	3314      	adds	r3, #20
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f00c f84a 	bl	8017554 <sys_mbox_valid>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	3314      	adds	r3, #20
 800b4ca:	6939      	ldr	r1, [r7, #16]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f00b ffdf 	bl	8017490 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d005      	beq.n	800b4e4 <err_tcp+0xe8>
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	2b04      	cmp	r3, #4
 800b4dc:	d002      	beq.n	800b4e4 <err_tcp+0xe8>
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b03      	cmp	r3, #3
 800b4e2:	d143      	bne.n	800b56c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	7f1b      	ldrb	r3, [r3, #28]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bf14      	ite	ne
 800b4f0:	2301      	movne	r3, #1
 800b4f2:	2300      	moveq	r3, #0
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	7f1b      	ldrb	r3, [r3, #28]
 800b4fc:	f023 0304 	bic.w	r3, r3, #4
 800b500:	b2da      	uxtb	r2, r3
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d13b      	bne.n	800b584 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	6a1b      	ldr	r3, [r3, #32]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <err_tcp+0x126>
 800b514:	4b1e      	ldr	r3, [pc, #120]	; (800b590 <err_tcp+0x194>)
 800b516:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b51a:	4920      	ldr	r1, [pc, #128]	; (800b59c <err_tcp+0x1a0>)
 800b51c:	481e      	ldr	r0, [pc, #120]	; (800b598 <err_tcp+0x19c>)
 800b51e:	f00c fb37 	bl	8017b90 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	2b04      	cmp	r3, #4
 800b526:	d104      	bne.n	800b532 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	2200      	movs	r2, #0
 800b52e:	711a      	strb	r2, [r3, #4]
 800b530:	e003      	b.n	800b53a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	78fa      	ldrb	r2, [r7, #3]
 800b538:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b544:	68b8      	ldr	r0, [r7, #8]
 800b546:	f00c f893 	bl	8017670 <sys_sem_valid>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d106      	bne.n	800b55e <err_tcp+0x162>
 800b550:	4b0f      	ldr	r3, [pc, #60]	; (800b590 <err_tcp+0x194>)
 800b552:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b556:	4912      	ldr	r1, [pc, #72]	; (800b5a0 <err_tcp+0x1a4>)
 800b558:	480f      	ldr	r0, [pc, #60]	; (800b598 <err_tcp+0x19c>)
 800b55a:	f00c fb19 	bl	8017b90 <iprintf>
      conn->current_msg = NULL;
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	2200      	movs	r2, #0
 800b562:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b564:	68b8      	ldr	r0, [r7, #8]
 800b566:	f00c f869 	bl	801763c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b56a:	e00b      	b.n	800b584 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	6a1b      	ldr	r3, [r3, #32]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d008      	beq.n	800b586 <err_tcp+0x18a>
 800b574:	4b06      	ldr	r3, [pc, #24]	; (800b590 <err_tcp+0x194>)
 800b576:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b57a:	490a      	ldr	r1, [pc, #40]	; (800b5a4 <err_tcp+0x1a8>)
 800b57c:	4806      	ldr	r0, [pc, #24]	; (800b598 <err_tcp+0x19c>)
 800b57e:	f00c fb07 	bl	8017b90 <iprintf>
  }
}
 800b582:	e000      	b.n	800b586 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b584:	bf00      	nop
}
 800b586:	bf00      	nop
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	0801afec 	.word	0x0801afec
 800b594:	0801b0e0 	.word	0x0801b0e0
 800b598:	0801b030 	.word	0x0801b030
 800b59c:	0801b0f0 	.word	0x0801b0f0
 800b5a0:	0801b10c 	.word	0x0801b10c
 800b5a4:	0801b128 	.word	0x0801b128

0800b5a8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b5b6:	6879      	ldr	r1, [r7, #4]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f004 fe43 	bl	8010244 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b5be:	490a      	ldr	r1, [pc, #40]	; (800b5e8 <setup_tcp+0x40>)
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f004 fe51 	bl	8010268 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b5c6:	4909      	ldr	r1, [pc, #36]	; (800b5ec <setup_tcp+0x44>)
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f004 fe6f 	bl	80102ac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	4907      	ldr	r1, [pc, #28]	; (800b5f0 <setup_tcp+0x48>)
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f004 fec6 	bl	8010364 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b5d8:	4906      	ldr	r1, [pc, #24]	; (800b5f4 <setup_tcp+0x4c>)
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f004 fe88 	bl	80102f0 <tcp_err>
}
 800b5e0:	bf00      	nop
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	0800b181 	.word	0x0800b181
 800b5ec:	0800b355 	.word	0x0800b355
 800b5f0:	0800b28d 	.word	0x0800b28d
 800b5f4:	0800b3fd 	.word	0x0800b3fd

0800b5f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b5f8:	b590      	push	{r4, r7, lr}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d006      	beq.n	800b61c <pcb_new+0x24>
 800b60e:	4b18      	ldr	r3, [pc, #96]	; (800b670 <pcb_new+0x78>)
 800b610:	f240 2265 	movw	r2, #613	; 0x265
 800b614:	4917      	ldr	r1, [pc, #92]	; (800b674 <pcb_new+0x7c>)
 800b616:	4818      	ldr	r0, [pc, #96]	; (800b678 <pcb_new+0x80>)
 800b618:	f00c faba 	bl	8017b90 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b626:	2b10      	cmp	r3, #16
 800b628:	d112      	bne.n	800b650 <pcb_new+0x58>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681c      	ldr	r4, [r3, #0]
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	4618      	mov	r0, r3
 800b632:	f004 fdf9 	bl	8010228 <tcp_new_ip_type>
 800b636:	4603      	mov	r3, r0
 800b638:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d009      	beq.n	800b658 <pcb_new+0x60>
        setup_tcp(msg->conn);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7ff ffad 	bl	800b5a8 <setup_tcp>
      }
      break;
 800b64e:	e003      	b.n	800b658 <pcb_new+0x60>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	22fa      	movs	r2, #250	; 0xfa
 800b654:	711a      	strb	r2, [r3, #4]
      return;
 800b656:	e008      	b.n	800b66a <pcb_new+0x72>
      break;
 800b658:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <pcb_new+0x72>
    msg->err = ERR_MEM;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	22ff      	movs	r2, #255	; 0xff
 800b668:	711a      	strb	r2, [r3, #4]
  }
}
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd90      	pop	{r4, r7, pc}
 800b670:	0801afec 	.word	0x0801afec
 800b674:	0801b16c 	.word	0x0801b16c
 800b678:	0801b030 	.word	0x0801b030

0800b67c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff ffad 	bl	800b5f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	75fb      	strb	r3, [r7, #23]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b6b8:	2006      	movs	r0, #6
 800b6ba:	f001 ffe1 	bl	800d680 <memp_malloc>
 800b6be:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d101      	bne.n	800b6ca <netconn_alloc+0x22>
    return NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e04d      	b.n	800b766 <netconn_alloc+0xbe>
  }

  conn->pending_err = ERR_OK;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	79fa      	ldrb	r2, [r7, #7]
 800b6d4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b6dc:	79fb      	ldrb	r3, [r7, #7]
 800b6de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6e2:	2b10      	cmp	r3, #16
 800b6e4:	d10c      	bne.n	800b700 <netconn_alloc+0x58>
#endif /* LWIP_NETBUF_RECVINFO */
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b6e6:	2306      	movs	r3, #6
 800b6e8:	60fb      	str	r3, [r7, #12]
      break;
 800b6ea:	bf00      	nop
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
      goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	3310      	adds	r3, #16
 800b6f0:	68f9      	ldr	r1, [r7, #12]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f00b fea0 	bl	8017438 <sys_mbox_new>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d008      	beq.n	800b710 <netconn_alloc+0x68>
    goto free_and_return;
 800b6fe:	e02d      	b.n	800b75c <netconn_alloc+0xb4>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b700:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <netconn_alloc+0xc8>)
 800b702:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b706:	491b      	ldr	r1, [pc, #108]	; (800b774 <netconn_alloc+0xcc>)
 800b708:	481b      	ldr	r0, [pc, #108]	; (800b778 <netconn_alloc+0xd0>)
 800b70a:	f00c fa41 	bl	8017b90 <iprintf>
      goto free_and_return;
 800b70e:	e025      	b.n	800b75c <netconn_alloc+0xb4>
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	330c      	adds	r3, #12
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f00b ff3a 	bl	8017590 <sys_sem_new>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d005      	beq.n	800b72e <netconn_alloc+0x86>
    sys_mbox_free(&conn->recvmbox);
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3310      	adds	r3, #16
 800b726:	4618      	mov	r0, r3
 800b728:	f00b fea0 	bl	801746c <sys_mbox_free>
    goto free_and_return;
 800b72c:	e016      	b.n	800b75c <netconn_alloc+0xb4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3314      	adds	r3, #20
 800b732:	4618      	mov	r0, r3
 800b734:	f00b ff1f 	bl	8017576 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2200      	movs	r2, #0
 800b73c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b744:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2200      	movs	r2, #0
 800b750:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	7dfa      	ldrb	r2, [r7, #23]
 800b756:	771a      	strb	r2, [r3, #28]
  return conn;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	e004      	b.n	800b766 <netconn_alloc+0xbe>
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b75c:	6939      	ldr	r1, [r7, #16]
 800b75e:	2006      	movs	r0, #6
 800b760:	f002 f804 	bl	800d76c <memp_free>
  return NULL;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3718      	adds	r7, #24
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0801afec 	.word	0x0801afec
 800b774:	0801b18c 	.word	0x0801b18c
 800b778:	0801b030 	.word	0x0801b030

0800b77c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <netconn_free+0x1e>
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <netconn_free+0x80>)
 800b78e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b792:	491b      	ldr	r1, [pc, #108]	; (800b800 <netconn_free+0x84>)
 800b794:	481b      	ldr	r0, [pc, #108]	; (800b804 <netconn_free+0x88>)
 800b796:	f00c f9fb 	bl	8017b90 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3310      	adds	r3, #16
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f00b fed8 	bl	8017554 <sys_mbox_valid>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d006      	beq.n	800b7b8 <netconn_free+0x3c>
 800b7aa:	4b14      	ldr	r3, [pc, #80]	; (800b7fc <netconn_free+0x80>)
 800b7ac:	f240 3223 	movw	r2, #803	; 0x323
 800b7b0:	4915      	ldr	r1, [pc, #84]	; (800b808 <netconn_free+0x8c>)
 800b7b2:	4814      	ldr	r0, [pc, #80]	; (800b804 <netconn_free+0x88>)
 800b7b4:	f00c f9ec 	bl	8017b90 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3314      	adds	r3, #20
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f00b fec9 	bl	8017554 <sys_mbox_valid>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <netconn_free+0x5a>
 800b7c8:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <netconn_free+0x80>)
 800b7ca:	f240 3226 	movw	r2, #806	; 0x326
 800b7ce:	490f      	ldr	r1, [pc, #60]	; (800b80c <netconn_free+0x90>)
 800b7d0:	480c      	ldr	r0, [pc, #48]	; (800b804 <netconn_free+0x88>)
 800b7d2:	f00c f9dd 	bl	8017b90 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f00b ff3b 	bl	8017656 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f00b ff54 	bl	8017692 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b7ea:	6879      	ldr	r1, [r7, #4]
 800b7ec:	2006      	movs	r0, #6
 800b7ee:	f001 ffbd 	bl	800d76c <memp_free>
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0801afec 	.word	0x0801afec
 800b800:	0801b1b4 	.word	0x0801b1b4
 800b804:	0801b030 	.word	0x0801b030
 800b808:	0801b1e4 	.word	0x0801b1e4
 800b80c:	0801b220 	.word	0x0801b220

0800b810 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3310      	adds	r3, #16
 800b81c:	4618      	mov	r0, r3
 800b81e:	f00b fe99 	bl	8017554 <sys_mbox_valid>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d02f      	beq.n	800b888 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b828:	e018      	b.n	800b85c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b832:	2b10      	cmp	r3, #16
 800b834:	d10e      	bne.n	800b854 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	f107 020f 	add.w	r2, r7, #15
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fc64 	bl	800b10c <lwip_netconn_is_err_msg>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d108      	bne.n	800b85c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 fe2d 	bl	800e4ac <pbuf_free>
 800b852:	e003      	b.n	800b85c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	4618      	mov	r0, r3
 800b858:	f000 ff1a 	bl	800c690 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3310      	adds	r3, #16
 800b860:	f107 0210 	add.w	r2, r7, #16
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f00b fe5d 	bl	8017526 <sys_arch_mbox_tryfetch>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b872:	d1da      	bne.n	800b82a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3310      	adds	r3, #16
 800b878:	4618      	mov	r0, r3
 800b87a:	f00b fdf7 	bl	801746c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3310      	adds	r3, #16
 800b882:	4618      	mov	r0, r3
 800b884:	f00b fe77 	bl	8017576 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3314      	adds	r3, #20
 800b88c:	4618      	mov	r0, r3
 800b88e:	f00b fe61 	bl	8017554 <sys_mbox_valid>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d034      	beq.n	800b902 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b898:	e01d      	b.n	800b8d6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	f107 020e 	add.w	r2, r7, #14
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff fc32 	bl	800b10c <lwip_netconn_is_err_msg>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d113      	bne.n	800b8d6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b8b2:	6978      	ldr	r0, [r7, #20]
 800b8b4:	f7ff ffac 	bl	800b810 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d007      	beq.n	800b8d0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f003 fbe1 	bl	800f08c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b8d0:	6978      	ldr	r0, [r7, #20]
 800b8d2:	f7ff ff53 	bl	800b77c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3314      	adds	r3, #20
 800b8da:	f107 0210 	add.w	r2, r7, #16
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f00b fe20 	bl	8017526 <sys_arch_mbox_tryfetch>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8ec:	d1d5      	bne.n	800b89a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3314      	adds	r3, #20
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f00b fdba 	bl	801746c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3314      	adds	r3, #20
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f00b fe3a 	bl	8017576 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b902:	bf00      	nop
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d106      	bne.n	800b930 <lwip_netconn_do_close_internal+0x24>
 800b922:	4b87      	ldr	r3, [pc, #540]	; (800bb40 <lwip_netconn_do_close_internal+0x234>)
 800b924:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b928:	4986      	ldr	r1, [pc, #536]	; (800bb44 <lwip_netconn_do_close_internal+0x238>)
 800b92a:	4887      	ldr	r0, [pc, #540]	; (800bb48 <lwip_netconn_do_close_internal+0x23c>)
 800b92c:	f00c f930 	bl	8017b90 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b938:	2b10      	cmp	r3, #16
 800b93a:	d006      	beq.n	800b94a <lwip_netconn_do_close_internal+0x3e>
 800b93c:	4b80      	ldr	r3, [pc, #512]	; (800bb40 <lwip_netconn_do_close_internal+0x234>)
 800b93e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b942:	4982      	ldr	r1, [pc, #520]	; (800bb4c <lwip_netconn_do_close_internal+0x240>)
 800b944:	4880      	ldr	r0, [pc, #512]	; (800bb48 <lwip_netconn_do_close_internal+0x23c>)
 800b946:	f00c f923 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	785b      	ldrb	r3, [r3, #1]
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d006      	beq.n	800b960 <lwip_netconn_do_close_internal+0x54>
 800b952:	4b7b      	ldr	r3, [pc, #492]	; (800bb40 <lwip_netconn_do_close_internal+0x234>)
 800b954:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b958:	497d      	ldr	r1, [pc, #500]	; (800bb50 <lwip_netconn_do_close_internal+0x244>)
 800b95a:	487b      	ldr	r0, [pc, #492]	; (800bb48 <lwip_netconn_do_close_internal+0x23c>)
 800b95c:	f00c f918 	bl	8017b90 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d106      	bne.n	800b976 <lwip_netconn_do_close_internal+0x6a>
 800b968:	4b75      	ldr	r3, [pc, #468]	; (800bb40 <lwip_netconn_do_close_internal+0x234>)
 800b96a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b96e:	4979      	ldr	r1, [pc, #484]	; (800bb54 <lwip_netconn_do_close_internal+0x248>)
 800b970:	4875      	ldr	r0, [pc, #468]	; (800bb48 <lwip_netconn_do_close_internal+0x23c>)
 800b972:	f00c f90d 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <lwip_netconn_do_close_internal+0x80>
 800b97e:	4b70      	ldr	r3, [pc, #448]	; (800bb40 <lwip_netconn_do_close_internal+0x234>)
 800b980:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b984:	4974      	ldr	r1, [pc, #464]	; (800bb58 <lwip_netconn_do_close_internal+0x24c>)
 800b986:	4870      	ldr	r0, [pc, #448]	; (800bb48 <lwip_netconn_do_close_internal+0x23c>)
 800b988:	f00c f902 	bl	8017b90 <iprintf>

  tpcb = conn->pcb.tcp;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	7a1b      	ldrb	r3, [r3, #8]
 800b998:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d102      	bne.n	800b9b6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	75bb      	strb	r3, [r7, #22]
 800b9b4:	e01f      	b.n	800b9f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00e      	beq.n	800b9da <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b9c0:	2b05      	cmp	r3, #5
 800b9c2:	d007      	beq.n	800b9d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b9c8:	2b06      	cmp	r3, #6
 800b9ca:	d003      	beq.n	800b9d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b9d0:	2b08      	cmp	r3, #8
 800b9d2:	d102      	bne.n	800b9da <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	75bb      	strb	r3, [r7, #22]
 800b9d8:	e00d      	b.n	800b9f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b9da:	7b7b      	ldrb	r3, [r7, #13]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d008      	beq.n	800b9f2 <lwip_netconn_do_close_internal+0xe6>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	8b5b      	ldrh	r3, [r3, #26]
 800b9e4:	f003 0310 	and.w	r3, r3, #16
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	75bb      	strb	r3, [r7, #22]
 800b9f0:	e001      	b.n	800b9f6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b9f6:	7dbb      	ldrb	r3, [r7, #22]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	6938      	ldr	r0, [r7, #16]
 800ba00:	f004 fc20 	bl	8010244 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	7d1b      	ldrb	r3, [r3, #20]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d104      	bne.n	800ba16 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6938      	ldr	r0, [r7, #16]
 800ba10:	f004 fc90 	bl	8010334 <tcp_accept>
 800ba14:	e01d      	b.n	800ba52 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d007      	beq.n	800ba2c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	6938      	ldr	r0, [r7, #16]
 800ba20:	f004 fc22 	bl	8010268 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ba24:	2100      	movs	r1, #0
 800ba26:	6938      	ldr	r0, [r7, #16]
 800ba28:	f004 fc84 	bl	8010334 <tcp_accept>
    }
    if (shut_tx) {
 800ba2c:	7b7b      	ldrb	r3, [r7, #13]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ba32:	2100      	movs	r1, #0
 800ba34:	6938      	ldr	r0, [r7, #16]
 800ba36:	f004 fc39 	bl	80102ac <tcp_sent>
    }
    if (shut_close) {
 800ba3a:	7dbb      	ldrb	r3, [r7, #22]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d008      	beq.n	800ba52 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	6938      	ldr	r0, [r7, #16]
 800ba46:	f004 fc8d 	bl	8010364 <tcp_poll>
      tcp_err(tpcb, NULL);
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6938      	ldr	r0, [r7, #16]
 800ba4e:	f004 fc4f 	bl	80102f0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ba52:	7dbb      	ldrb	r3, [r7, #22]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ba58:	6938      	ldr	r0, [r7, #16]
 800ba5a:	f003 f9d1 	bl	800ee00 <tcp_close>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	75fb      	strb	r3, [r7, #23]
 800ba62:	e007      	b.n	800ba74 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	7b7a      	ldrb	r2, [r7, #13]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6938      	ldr	r0, [r7, #16]
 800ba6c:	f003 f9f4 	bl	800ee58 <tcp_shutdown>
 800ba70:	4603      	mov	r3, r0
 800ba72:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ba74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	757b      	strb	r3, [r7, #21]
 800ba80:	e016      	b.n	800bab0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ba82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba8a:	d10f      	bne.n	800baac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	7a5b      	ldrb	r3, [r3, #9]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10c      	bne.n	800bab0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ba96:	2301      	movs	r3, #1
 800ba98:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ba9a:	7dbb      	ldrb	r3, [r7, #22]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800baa0:	6938      	ldr	r0, [r7, #16]
 800baa2:	f003 faf3 	bl	800f08c <tcp_abort>
          err = ERR_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e001      	b.n	800bab0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800baac:	2301      	movs	r3, #1
 800baae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800bab0:	7d7b      	ldrb	r3, [r7, #21]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d052      	beq.n	800bb5c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	330c      	adds	r3, #12
 800babe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a1b      	ldr	r3, [r3, #32]
 800bac4:	7dfa      	ldrb	r2, [r7, #23]
 800bac6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800bad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d129      	bne.n	800bb30 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800badc:	7dbb      	ldrb	r3, [r7, #22]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00c      	beq.n	800bafc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <lwip_netconn_do_close_internal+0x1f0>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	2200      	movs	r2, #0
 800baf6:	2104      	movs	r1, #4
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	4798      	blx	r3
      }
      if (shut_rx) {
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d009      	beq.n	800bb16 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d005      	beq.n	800bb16 <lwip_netconn_do_close_internal+0x20a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2100      	movs	r1, #0
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
      }
      if (shut_tx) {
 800bb16:	7b7b      	ldrb	r3, [r7, #13]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d005      	beq.n	800bb30 <lwip_netconn_do_close_internal+0x224>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800bb36:	68b8      	ldr	r0, [r7, #8]
 800bb38:	f00b fd80 	bl	801763c <sys_sem_signal>
    }
    return ERR_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e03c      	b.n	800bbba <lwip_netconn_do_close_internal+0x2ae>
 800bb40:	0801afec 	.word	0x0801afec
 800bb44:	0801b25c 	.word	0x0801b25c
 800bb48:	0801b030 	.word	0x0801b030
 800bb4c:	0801b26c 	.word	0x0801b26c
 800bb50:	0801b28c 	.word	0x0801b28c
 800bb54:	0801b2b0 	.word	0x0801b2b0
 800bb58:	0801b0f0 	.word	0x0801b0f0
  }
  if (!close_finished) {
 800bb5c:	7d7b      	ldrb	r3, [r7, #21]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d11e      	bne.n	800bba0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	7d1b      	ldrb	r3, [r3, #20]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d106      	bne.n	800bb78 <lwip_netconn_do_close_internal+0x26c>
 800bb6a:	4b16      	ldr	r3, [pc, #88]	; (800bbc4 <lwip_netconn_do_close_internal+0x2b8>)
 800bb6c:	f240 4241 	movw	r2, #1089	; 0x441
 800bb70:	4915      	ldr	r1, [pc, #84]	; (800bbc8 <lwip_netconn_do_close_internal+0x2bc>)
 800bb72:	4816      	ldr	r0, [pc, #88]	; (800bbcc <lwip_netconn_do_close_internal+0x2c0>)
 800bb74:	f00c f80c 	bl	8017b90 <iprintf>
    if (shut_tx) {
 800bb78:	7b7b      	ldrb	r3, [r7, #13]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800bb7e:	4914      	ldr	r1, [pc, #80]	; (800bbd0 <lwip_netconn_do_close_internal+0x2c4>)
 800bb80:	6938      	ldr	r0, [r7, #16]
 800bb82:	f004 fb93 	bl	80102ac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800bb86:	2201      	movs	r2, #1
 800bb88:	4912      	ldr	r1, [pc, #72]	; (800bbd4 <lwip_netconn_do_close_internal+0x2c8>)
 800bb8a:	6938      	ldr	r0, [r7, #16]
 800bb8c:	f004 fbea 	bl	8010364 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800bb90:	4911      	ldr	r1, [pc, #68]	; (800bbd8 <lwip_netconn_do_close_internal+0x2cc>)
 800bb92:	6938      	ldr	r0, [r7, #16]
 800bb94:	f004 fbac 	bl	80102f0 <tcp_err>
    tcp_arg(tpcb, conn);
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	6938      	ldr	r0, [r7, #16]
 800bb9c:	f004 fb52 	bl	8010244 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800bba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <lwip_netconn_do_close_internal+0x2aa>
 800bba8:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <lwip_netconn_do_close_internal+0x2b8>)
 800bbaa:	f240 424d 	movw	r2, #1101	; 0x44d
 800bbae:	490b      	ldr	r1, [pc, #44]	; (800bbdc <lwip_netconn_do_close_internal+0x2d0>)
 800bbb0:	4806      	ldr	r0, [pc, #24]	; (800bbcc <lwip_netconn_do_close_internal+0x2c0>)
 800bbb2:	f00b ffed 	bl	8017b90 <iprintf>
  return err;
 800bbb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0801afec 	.word	0x0801afec
 800bbc8:	0801b2c4 	.word	0x0801b2c4
 800bbcc:	0801b030 	.word	0x0801b030
 800bbd0:	0800b355 	.word	0x0800b355
 800bbd4:	0800b28d 	.word	0x0800b28d
 800bbd8:	0800b3fd 	.word	0x0800b3fd
 800bbdc:	0801b2e8 	.word	0x0801b2e8

0800bbe0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800bbf4:	7afb      	ldrb	r3, [r7, #11]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d00d      	beq.n	800bc16 <lwip_netconn_do_delconn+0x36>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc04:	2b10      	cmp	r3, #16
 800bc06:	d006      	beq.n	800bc16 <lwip_netconn_do_delconn+0x36>
 800bc08:	4b59      	ldr	r3, [pc, #356]	; (800bd70 <lwip_netconn_do_delconn+0x190>)
 800bc0a:	f240 425e 	movw	r2, #1118	; 0x45e
 800bc0e:	4959      	ldr	r1, [pc, #356]	; (800bd74 <lwip_netconn_do_delconn+0x194>)
 800bc10:	4859      	ldr	r0, [pc, #356]	; (800bd78 <lwip_netconn_do_delconn+0x198>)
 800bc12:	f00b ffbd 	bl	8017b90 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d005      	beq.n	800bc28 <lwip_netconn_do_delconn+0x48>
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d002      	beq.n	800bc28 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800bc22:	7afb      	ldrb	r3, [r7, #11]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d109      	bne.n	800bc3c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800bc28:	7afb      	ldrb	r3, [r7, #11]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d10a      	bne.n	800bc44 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	7f1b      	ldrb	r3, [r3, #28]
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	22fb      	movs	r2, #251	; 0xfb
 800bc40:	711a      	strb	r2, [r3, #4]
 800bc42:	e089      	b.n	800bd58 <lwip_netconn_do_delconn+0x178>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800bc44:	7afb      	ldrb	r3, [r7, #11]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d10d      	bne.n	800bc66 <lwip_netconn_do_delconn+0x86>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	7f1b      	ldrb	r3, [r3, #28]
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <lwip_netconn_do_delconn+0x86>
 800bc58:	4b45      	ldr	r3, [pc, #276]	; (800bd70 <lwip_netconn_do_delconn+0x190>)
 800bc5a:	f240 427a 	movw	r2, #1146	; 0x47a
 800bc5e:	4947      	ldr	r1, [pc, #284]	; (800bd7c <lwip_netconn_do_delconn+0x19c>)
 800bc60:	4845      	ldr	r0, [pc, #276]	; (800bd78 <lwip_netconn_do_delconn+0x198>)
 800bc62:	f00b ff95 	bl	8017b90 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fdcd 	bl	800b810 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d051      	beq.n	800bd24 <lwip_netconn_do_delconn+0x144>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc8a:	2b10      	cmp	r3, #16
 800bc8c:	d145      	bne.n	800bd1a <lwip_netconn_do_delconn+0x13a>
          udp_remove(msg->conn->pcb.udp);
          break;
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d006      	beq.n	800bca6 <lwip_netconn_do_delconn+0xc6>
 800bc98:	4b35      	ldr	r3, [pc, #212]	; (800bd70 <lwip_netconn_do_delconn+0x190>)
 800bc9a:	f240 4294 	movw	r2, #1172	; 0x494
 800bc9e:	4938      	ldr	r1, [pc, #224]	; (800bd80 <lwip_netconn_do_delconn+0x1a0>)
 800bca0:	4835      	ldr	r0, [pc, #212]	; (800bd78 <lwip_netconn_do_delconn+0x198>)
 800bca2:	f00b ff75 	bl	8017b90 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2204      	movs	r2, #4
 800bcac:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2203      	movs	r2, #3
 800bcb2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff fe22 	bl	800b90c <lwip_netconn_do_close_internal>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d04b      	beq.n	800bd66 <lwip_netconn_do_delconn+0x186>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	785b      	ldrb	r3, [r3, #1]
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d006      	beq.n	800bce6 <lwip_netconn_do_delconn+0x106>
 800bcd8:	4b25      	ldr	r3, [pc, #148]	; (800bd70 <lwip_netconn_do_delconn+0x190>)
 800bcda:	f240 429a 	movw	r2, #1178	; 0x49a
 800bcde:	4929      	ldr	r1, [pc, #164]	; (800bd84 <lwip_netconn_do_delconn+0x1a4>)
 800bce0:	4825      	ldr	r0, [pc, #148]	; (800bd78 <lwip_netconn_do_delconn+0x198>)
 800bce2:	f00b ff55 	bl	8017b90 <iprintf>
            UNLOCK_TCPIP_CORE();
 800bce6:	4828      	ldr	r0, [pc, #160]	; (800bd88 <lwip_netconn_do_delconn+0x1a8>)
 800bce8:	f00b fd11 	bl	801770e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	330c      	adds	r3, #12
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f00b fc70 	bl	80175da <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800bcfa:	4823      	ldr	r0, [pc, #140]	; (800bd88 <lwip_netconn_do_delconn+0x1a8>)
 800bcfc:	f00b fcf8 	bl	80176f0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d02d      	beq.n	800bd66 <lwip_netconn_do_delconn+0x186>
 800bd0a:	4b19      	ldr	r3, [pc, #100]	; (800bd70 <lwip_netconn_do_delconn+0x190>)
 800bd0c:	f240 429e 	movw	r2, #1182	; 0x49e
 800bd10:	491c      	ldr	r1, [pc, #112]	; (800bd84 <lwip_netconn_do_delconn+0x1a4>)
 800bd12:	4819      	ldr	r0, [pc, #100]	; (800bd78 <lwip_netconn_do_delconn+0x198>)
 800bd14:	f00b ff3c 	bl	8017b90 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bd18:	e025      	b.n	800bd66 <lwip_netconn_do_delconn+0x186>
#endif /* LWIP_TCP */
        default:
          break;
 800bd1a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2200      	movs	r2, #0
 800bd22:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d007      	beq.n	800bd3e <lwip_netconn_do_delconn+0x15e>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	6810      	ldr	r0, [r2, #0]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d007      	beq.n	800bd58 <lwip_netconn_do_delconn+0x178>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	6810      	ldr	r0, [r2, #0]
 800bd52:	2200      	movs	r2, #0
 800bd54:	2102      	movs	r1, #2
 800bd56:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f00b fc86 	bl	8017670 <sys_sem_valid>
 800bd64:	e000      	b.n	800bd68 <lwip_netconn_do_delconn+0x188>
          return;
 800bd66:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	0801afec 	.word	0x0801afec
 800bd74:	0801b2f8 	.word	0x0801b2f8
 800bd78:	0801b030 	.word	0x0801b030
 800bd7c:	0801b30c 	.word	0x0801b30c
 800bd80:	0801b32c 	.word	0x0801b32c
 800bd84:	0801b348 	.word	0x0801b348
 800bd88:	20009b08 	.word	0x20009b08

0800bd8c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d016      	beq.n	800bdd0 <lwip_netconn_do_bind+0x44>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdac:	2b10      	cmp	r3, #16
 800bdae:	d10c      	bne.n	800bdca <lwip_netconn_do_bind+0x3e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6858      	ldr	r0, [r3, #4]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	6899      	ldr	r1, [r3, #8]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f003 f970 	bl	800f0a4 <tcp_bind>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
        break;
 800bdc8:	e004      	b.n	800bdd4 <lwip_netconn_do_bind+0x48>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800bdca:	23fa      	movs	r3, #250	; 0xfa
 800bdcc:	73fb      	strb	r3, [r7, #15]
        break;
 800bdce:	e001      	b.n	800bdd4 <lwip_netconn_do_bind+0x48>
    }
  } else {
    err = ERR_VAL;
 800bdd0:	23fa      	movs	r3, #250	; 0xfa
 800bdd2:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	7bfa      	ldrb	r2, [r7, #15]
 800bdd8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bdda:	bf00      	nop
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
	...

0800bde4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800be00:	f06f 0305 	mvn.w	r3, #5
 800be04:	e070      	b.n	800bee8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d006      	beq.n	800be1c <lwip_netconn_do_connected+0x38>
 800be0e:	4b38      	ldr	r3, [pc, #224]	; (800bef0 <lwip_netconn_do_connected+0x10c>)
 800be10:	f240 5223 	movw	r2, #1315	; 0x523
 800be14:	4937      	ldr	r1, [pc, #220]	; (800bef4 <lwip_netconn_do_connected+0x110>)
 800be16:	4838      	ldr	r0, [pc, #224]	; (800bef8 <lwip_netconn_do_connected+0x114>)
 800be18:	f00b feba 	bl	8017b90 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	6a1b      	ldr	r3, [r3, #32]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10c      	bne.n	800be3e <lwip_netconn_do_connected+0x5a>
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	7f1b      	ldrb	r3, [r3, #28]
 800be28:	f003 0304 	and.w	r3, r3, #4
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d106      	bne.n	800be3e <lwip_netconn_do_connected+0x5a>
 800be30:	4b2f      	ldr	r3, [pc, #188]	; (800bef0 <lwip_netconn_do_connected+0x10c>)
 800be32:	f240 5224 	movw	r2, #1316	; 0x524
 800be36:	4931      	ldr	r1, [pc, #196]	; (800befc <lwip_netconn_do_connected+0x118>)
 800be38:	482f      	ldr	r0, [pc, #188]	; (800bef8 <lwip_netconn_do_connected+0x114>)
 800be3a:	f00b fea9 	bl	8017b90 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	79fa      	ldrb	r2, [r7, #7]
 800be4c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	330c      	adds	r3, #12
 800be56:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be60:	2b10      	cmp	r3, #16
 800be62:	d106      	bne.n	800be72 <lwip_netconn_do_connected+0x8e>
 800be64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d102      	bne.n	800be72 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800be6c:	69b8      	ldr	r0, [r7, #24]
 800be6e:	f7ff fb9b 	bl	800b5a8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	7f1b      	ldrb	r3, [r3, #28]
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	bf0c      	ite	eq
 800be7e:	2301      	moveq	r3, #1
 800be80:	2300      	movne	r3, #0
 800be82:	b2db      	uxtb	r3, r3
 800be84:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	7f1b      	ldrb	r3, [r3, #28]
 800be8a:	f023 0304 	bic.w	r3, r3, #4
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <lwip_netconn_do_connected+0xbc>
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10c      	bne.n	800beba <lwip_netconn_do_connected+0xd6>
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <lwip_netconn_do_connected+0xc8>
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d006      	beq.n	800beba <lwip_netconn_do_connected+0xd6>
 800beac:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <lwip_netconn_do_connected+0x10c>)
 800beae:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800beb2:	4913      	ldr	r1, [pc, #76]	; (800bf00 <lwip_netconn_do_connected+0x11c>)
 800beb4:	4810      	ldr	r0, [pc, #64]	; (800bef8 <lwip_netconn_do_connected+0x114>)
 800beb6:	f00b fe6b 	bl	8017b90 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2200      	movs	r2, #0
 800bebe:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2200      	movs	r2, #0
 800bec4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	2b00      	cmp	r3, #0
 800becc:	d005      	beq.n	800beda <lwip_netconn_do_connected+0xf6>
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	2200      	movs	r2, #0
 800bed4:	2102      	movs	r1, #2
 800bed6:	69b8      	ldr	r0, [r7, #24]
 800bed8:	4798      	blx	r3

  if (was_blocking) {
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800bee0:	69f8      	ldr	r0, [r7, #28]
 800bee2:	f00b fbab 	bl	801763c <sys_sem_signal>
  }
  return ERR_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	0801afec 	.word	0x0801afec
 800bef4:	0801b350 	.word	0x0801b350
 800bef8:	0801b030 	.word	0x0801b030
 800befc:	0801b370 	.word	0x0801b370
 800bf00:	0801b3b0 	.word	0x0801b3b0

0800bf04 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d102      	bne.n	800bf20 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800bf1a:	23f1      	movs	r3, #241	; 0xf1
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e08b      	b.n	800c038 <lwip_netconn_do_connect+0x134>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf2a:	2b10      	cmp	r3, #16
 800bf2c:	d179      	bne.n	800c022 <lwip_netconn_do_connect+0x11e>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	d102      	bne.n	800bf3e <lwip_netconn_do_connect+0x3a>
          err = ERR_ALREADY;
 800bf38:	23f7      	movs	r3, #247	; 0xf7
 800bf3a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800bf3c:	e07b      	b.n	800c036 <lwip_netconn_do_connect+0x132>
        } else if (msg->conn->state != NETCONN_NONE) {
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <lwip_netconn_do_connect+0x4a>
          err = ERR_ISCONN;
 800bf48:	23f6      	movs	r3, #246	; 0xf6
 800bf4a:	75fb      	strb	r3, [r7, #23]
        break;
 800bf4c:	e073      	b.n	800c036 <lwip_netconn_do_connect+0x132>
          setup_tcp(msg->conn);
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff fb28 	bl	800b5a8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6858      	ldr	r0, [r3, #4]
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	6899      	ldr	r1, [r3, #8]
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	899a      	ldrh	r2, [r3, #12]
 800bf66:	4b38      	ldr	r3, [pc, #224]	; (800c048 <lwip_netconn_do_connect+0x144>)
 800bf68:	f003 fa24 	bl	800f3b4 <tcp_connect>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800bf70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d15e      	bne.n	800c036 <lwip_netconn_do_connect+0x132>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	7f1b      	ldrb	r3, [r3, #28]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bf14      	ite	ne
 800bf86:	2301      	movne	r3, #1
 800bf88:	2300      	moveq	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2203      	movs	r2, #3
 800bf94:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <lwip_netconn_do_connect+0xac>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	7f1a      	ldrb	r2, [r3, #28]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f042 0204 	orr.w	r2, r2, #4
 800bfaa:	b2d2      	uxtb	r2, r2
 800bfac:	771a      	strb	r2, [r3, #28]
 800bfae:	e008      	b.n	800bfc2 <lwip_netconn_do_connect+0xbe>
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	7f1a      	ldrb	r2, [r3, #28]
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 0204 	bic.w	r2, r2, #4
 800bfbe:	b2d2      	uxtb	r2, r2
 800bfc0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <lwip_netconn_do_connect+0xca>
              err = ERR_INPROGRESS;
 800bfc8:	23fb      	movs	r3, #251	; 0xfb
 800bfca:	75fb      	strb	r3, [r7, #23]
        break;
 800bfcc:	e033      	b.n	800c036 <lwip_netconn_do_connect+0x132>
              msg->conn->current_msg = msg;
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d006      	beq.n	800bfee <lwip_netconn_do_connect+0xea>
 800bfe0:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <lwip_netconn_do_connect+0x148>)
 800bfe2:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800bfe6:	491a      	ldr	r1, [pc, #104]	; (800c050 <lwip_netconn_do_connect+0x14c>)
 800bfe8:	481a      	ldr	r0, [pc, #104]	; (800c054 <lwip_netconn_do_connect+0x150>)
 800bfea:	f00b fdd1 	bl	8017b90 <iprintf>
              UNLOCK_TCPIP_CORE();
 800bfee:	481a      	ldr	r0, [pc, #104]	; (800c058 <lwip_netconn_do_connect+0x154>)
 800bff0:	f00b fb8d 	bl	801770e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	330c      	adds	r3, #12
 800bffa:	2100      	movs	r1, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f00b faec 	bl	80175da <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800c002:	4815      	ldr	r0, [pc, #84]	; (800c058 <lwip_netconn_do_connect+0x154>)
 800c004:	f00b fb74 	bl	80176f0 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d116      	bne.n	800c040 <lwip_netconn_do_connect+0x13c>
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <lwip_netconn_do_connect+0x148>)
 800c014:	f240 5274 	movw	r2, #1396	; 0x574
 800c018:	490d      	ldr	r1, [pc, #52]	; (800c050 <lwip_netconn_do_connect+0x14c>)
 800c01a:	480e      	ldr	r0, [pc, #56]	; (800c054 <lwip_netconn_do_connect+0x150>)
 800c01c:	f00b fdb8 	bl	8017b90 <iprintf>
              return;
 800c020:	e00e      	b.n	800c040 <lwip_netconn_do_connect+0x13c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800c022:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <lwip_netconn_do_connect+0x148>)
 800c024:	f240 527d 	movw	r2, #1405	; 0x57d
 800c028:	490c      	ldr	r1, [pc, #48]	; (800c05c <lwip_netconn_do_connect+0x158>)
 800c02a:	480a      	ldr	r0, [pc, #40]	; (800c054 <lwip_netconn_do_connect+0x150>)
 800c02c:	f00b fdb0 	bl	8017b90 <iprintf>
 800c030:	23fa      	movs	r3, #250	; 0xfa
 800c032:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800c034:	e000      	b.n	800c038 <lwip_netconn_do_connect+0x134>
        break;
 800c036:	bf00      	nop
    }
  }
  msg->err = err;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	7dfa      	ldrb	r2, [r7, #23]
 800c03c:	711a      	strb	r2, [r3, #4]
 800c03e:	e000      	b.n	800c042 <lwip_netconn_do_connect+0x13e>
              return;
 800c040:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	0800bde5 	.word	0x0800bde5
 800c04c:	0801afec 	.word	0x0801afec
 800c050:	0801b348 	.word	0x0801b348
 800c054:	0801b030 	.word	0x0801b030
 800c058:	20009b08 	.word	0x20009b08
 800c05c:	0801b3d0 	.word	0x0801b3d0

0800c060 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2200      	movs	r2, #0
 800c070:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d022      	beq.n	800c0c2 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c086:	2b10      	cmp	r3, #16
 800c088:	d11b      	bne.n	800c0c2 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c096:	d202      	bcs.n	800c09e <lwip_netconn_do_recv+0x3e>
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	e001      	b.n	800c0a2 <lwip_netconn_do_recv+0x42>
 800c09e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0a2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	89fa      	ldrh	r2, [r7, #14]
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f003 f8ea 	bl	800f288 <tcp_recved>
        remaining -= recved;
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e6      	bne.n	800c090 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c0c2:	bf00      	nop
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <lwip_netconn_do_writemore+0x24>
 800c0e2:	4b96      	ldr	r3, [pc, #600]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c0e4:	f240 6273 	movw	r2, #1651	; 0x673
 800c0e8:	4995      	ldr	r1, [pc, #596]	; (800c340 <lwip_netconn_do_writemore+0x274>)
 800c0ea:	4896      	ldr	r0, [pc, #600]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c0ec:	f00b fd50 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	785b      	ldrb	r3, [r3, #1]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d006      	beq.n	800c106 <lwip_netconn_do_writemore+0x3a>
 800c0f8:	4b90      	ldr	r3, [pc, #576]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c0fa:	f240 6274 	movw	r2, #1652	; 0x674
 800c0fe:	4992      	ldr	r1, [pc, #584]	; (800c348 <lwip_netconn_do_writemore+0x27c>)
 800c100:	4890      	ldr	r0, [pc, #576]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c102:	f00b fd45 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <lwip_netconn_do_writemore+0x50>
 800c10e:	4b8b      	ldr	r3, [pc, #556]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c110:	f240 6275 	movw	r2, #1653	; 0x675
 800c114:	498d      	ldr	r1, [pc, #564]	; (800c34c <lwip_netconn_do_writemore+0x280>)
 800c116:	488b      	ldr	r0, [pc, #556]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c118:	f00b fd3a 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d106      	bne.n	800c132 <lwip_netconn_do_writemore+0x66>
 800c124:	4b85      	ldr	r3, [pc, #532]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c126:	f240 6276 	movw	r2, #1654	; 0x676
 800c12a:	4989      	ldr	r1, [pc, #548]	; (800c350 <lwip_netconn_do_writemore+0x284>)
 800c12c:	4885      	ldr	r0, [pc, #532]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c12e:	f00b fd2f 	bl	8017b90 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	699a      	ldr	r2, [r3, #24]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	695b      	ldr	r3, [r3, #20]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d306      	bcc.n	800c150 <lwip_netconn_do_writemore+0x84>
 800c142:	4b7e      	ldr	r3, [pc, #504]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c144:	f240 6277 	movw	r2, #1655	; 0x677
 800c148:	4982      	ldr	r1, [pc, #520]	; (800c354 <lwip_netconn_do_writemore+0x288>)
 800c14a:	487e      	ldr	r0, [pc, #504]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c14c:	f00b fd20 	bl	8017b90 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	899b      	ldrh	r3, [r3, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <lwip_netconn_do_writemore+0x9c>
 800c15a:	4b78      	ldr	r3, [pc, #480]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c15c:	f240 6279 	movw	r2, #1657	; 0x679
 800c160:	497d      	ldr	r1, [pc, #500]	; (800c358 <lwip_netconn_do_writemore+0x28c>)
 800c162:	4878      	ldr	r0, [pc, #480]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c164:	f00b fd14 	bl	8017b90 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	7f1b      	ldrb	r3, [r3, #28]
 800c16e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	7f1b      	ldrb	r3, [r3, #28]
 800c174:	f003 0302 	and.w	r3, r3, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d104      	bne.n	800c186 <lwip_netconn_do_writemore+0xba>
 800c17c:	7ebb      	ldrb	r3, [r7, #26]
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <lwip_netconn_do_writemore+0xbe>
 800c186:	2301      	movs	r3, #1
 800c188:	e000      	b.n	800c18c <lwip_netconn_do_writemore+0xc0>
 800c18a:	2300      	movs	r3, #0
 800c18c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	691b      	ldr	r3, [r3, #16]
 800c19c:	4413      	add	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b8:	d307      	bcc.n	800c1ca <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800c1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1be:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c1c0:	7ebb      	ldrb	r3, [r7, #26]
 800c1c2:	f043 0302 	orr.w	r3, r3, #2
 800c1c6:	76bb      	strb	r3, [r7, #26]
 800c1c8:	e001      	b.n	800c1ce <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c1d6:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800c1d8:	89fa      	ldrh	r2, [r7, #14]
 800c1da:	8bbb      	ldrh	r3, [r7, #28]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d216      	bcs.n	800c20e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800c1e4:	7e3b      	ldrb	r3, [r7, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00d      	beq.n	800c206 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800c1ea:	8bbb      	ldrh	r3, [r7, #28]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10e      	bne.n	800c20e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <lwip_netconn_do_writemore+0x134>
 800c1fa:	f06f 0306 	mvn.w	r3, #6
 800c1fe:	e000      	b.n	800c202 <lwip_netconn_do_writemore+0x136>
 800c200:	2300      	movs	r3, #0
 800c202:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800c204:	e07d      	b.n	800c302 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800c206:	7ebb      	ldrb	r3, [r7, #26]
 800c208:	f043 0302 	orr.w	r3, r3, #2
 800c20c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	691a      	ldr	r2, [r3, #16]
 800c214:	8bbb      	ldrh	r3, [r7, #28]
 800c216:	441a      	add	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	429a      	cmp	r2, r3
 800c222:	d906      	bls.n	800c232 <lwip_netconn_do_writemore+0x166>
 800c224:	4b45      	ldr	r3, [pc, #276]	; (800c33c <lwip_netconn_do_writemore+0x270>)
 800c226:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800c22a:	494c      	ldr	r1, [pc, #304]	; (800c35c <lwip_netconn_do_writemore+0x290>)
 800c22c:	4845      	ldr	r0, [pc, #276]	; (800c344 <lwip_netconn_do_writemore+0x278>)
 800c22e:	f00b fcaf 	bl	8017b90 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c232:	8bbb      	ldrh	r3, [r7, #28]
 800c234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c238:	4293      	cmp	r3, r2
 800c23a:	d103      	bne.n	800c244 <lwip_netconn_do_writemore+0x178>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c242:	d209      	bcs.n	800c258 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800c248:	8bba      	ldrh	r2, [r7, #28]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d10b      	bne.n	800c266 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	899b      	ldrh	r3, [r3, #12]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d906      	bls.n	800c266 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800c258:	2301      	movs	r3, #1
 800c25a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800c25c:	7ebb      	ldrb	r3, [r7, #26]
 800c25e:	f043 0302 	orr.w	r3, r3, #2
 800c262:	76bb      	strb	r3, [r7, #26]
 800c264:	e001      	b.n	800c26a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6858      	ldr	r0, [r3, #4]
 800c26e:	7ebb      	ldrb	r3, [r7, #26]
 800c270:	8bba      	ldrh	r2, [r7, #28]
 800c272:	6979      	ldr	r1, [r7, #20]
 800c274:	f006 ff28 	bl	80130c8 <tcp_write>
 800c278:	4603      	mov	r3, r0
 800c27a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800c27c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d12c      	bne.n	800c2de <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	6999      	ldr	r1, [r3, #24]
 800c28a:	8bba      	ldrh	r2, [r7, #28]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a1b      	ldr	r3, [r3, #32]
 800c290:	440a      	add	r2, r1
 800c292:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	6919      	ldr	r1, [r3, #16]
 800c29a:	8bba      	ldrh	r2, [r7, #28]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a1b      	ldr	r3, [r3, #32]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a1b      	ldr	r3, [r3, #32]
 800c2a8:	691a      	ldr	r2, [r3, #16]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d113      	bne.n	800c2de <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	899a      	ldrh	r2, [r3, #12]
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	b292      	uxth	r2, r2
 800c2c0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	899b      	ldrh	r3, [r3, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d008      	beq.n	800c2de <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	3208      	adds	r2, #8
 800c2d4:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800c2de:	7e7b      	ldrb	r3, [r7, #25]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <lwip_netconn_do_writemore+0x222>
 800c2e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f43f af50 	beq.w	800c18e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800c2ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d004      	beq.n	800c300 <lwip_netconn_do_writemore+0x234>
 800c2f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2fe:	d146      	bne.n	800c38e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800c300:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800c302:	7e3b      	ldrb	r3, [r7, #24]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d02b      	beq.n	800c360 <lwip_netconn_do_writemore+0x294>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6a1b      	ldr	r3, [r3, #32]
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	429a      	cmp	r2, r3
 800c316:	d223      	bcs.n	800c360 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <lwip_netconn_do_writemore+0x260>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c324:	2200      	movs	r2, #0
 800c326:	2103      	movs	r1, #3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	7f1b      	ldrb	r3, [r3, #28]
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	b2da      	uxtb	r2, r3
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	771a      	strb	r2, [r3, #28]
 800c33a:	e028      	b.n	800c38e <lwip_netconn_do_writemore+0x2c2>
 800c33c:	0801afec 	.word	0x0801afec
 800c340:	0801b0e0 	.word	0x0801b0e0
 800c344:	0801b030 	.word	0x0801b030
 800c348:	0801b3e8 	.word	0x0801b3e8
 800c34c:	0801b0f0 	.word	0x0801b0f0
 800c350:	0801b408 	.word	0x0801b408
 800c354:	0801b420 	.word	0x0801b420
 800c358:	0801b460 	.word	0x0801b460
 800c35c:	0801b488 	.word	0x0801b488
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c368:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c36c:	d305      	bcc.n	800c37a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800c376:	2b04      	cmp	r3, #4
 800c378:	d909      	bls.n	800c38e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d005      	beq.n	800c38e <lwip_netconn_do_writemore+0x2c2>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c386:	2200      	movs	r2, #0
 800c388:	2103      	movs	r1, #3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c38e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d11d      	bne.n	800c3d2 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	699a      	ldr	r2, [r3, #24]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d002      	beq.n	800c3ac <lwip_netconn_do_writemore+0x2e0>
 800c3a6:	7e3b      	ldrb	r3, [r7, #24]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d001      	beq.n	800c3b0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f007 fc71 	bl	8013c9c <tcp_output>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c3be:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c3c2:	f113 0f04 	cmn.w	r3, #4
 800c3c6:	d12c      	bne.n	800c422 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c3c8:	7b3b      	ldrb	r3, [r7, #12]
 800c3ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	76fb      	strb	r3, [r7, #27]
 800c3d0:	e027      	b.n	800c422 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800c3d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3da:	d120      	bne.n	800c41e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f007 fc5b 	bl	8013c9c <tcp_output>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c3ea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c3ee:	f113 0f04 	cmn.w	r3, #4
 800c3f2:	d104      	bne.n	800c3fe <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c3f4:	7b7b      	ldrb	r3, [r7, #13]
 800c3f6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	76fb      	strb	r3, [r7, #27]
 800c3fc:	e011      	b.n	800c422 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800c3fe:	7e3b      	ldrb	r3, [r7, #24]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00e      	beq.n	800c422 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a1b      	ldr	r3, [r3, #32]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d102      	bne.n	800c414 <lwip_netconn_do_writemore+0x348>
 800c40e:	f06f 0306 	mvn.w	r3, #6
 800c412:	e000      	b.n	800c416 <lwip_netconn_do_writemore+0x34a>
 800c414:	2300      	movs	r3, #0
 800c416:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	76fb      	strb	r3, [r7, #27]
 800c41c:	e001      	b.n	800c422 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c41e:	2301      	movs	r3, #1
 800c420:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c422:	7efb      	ldrb	r3, [r7, #27]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d015      	beq.n	800c454 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	330c      	adds	r3, #12
 800c430:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	7ffa      	ldrb	r2, [r7, #31]
 800c438:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d006      	beq.n	800c45a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c44c:	68b8      	ldr	r0, [r7, #8]
 800c44e:	f00b f8f5 	bl	801763c <sys_sem_signal>
 800c452:	e002      	b.n	800c45a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c458:	e000      	b.n	800c45c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3720      	adds	r7, #32
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fdf8 	bl	800b06a <netconn_err>
 800c47a:	4603      	mov	r3, r0
 800c47c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d163      	bne.n	800c54e <lwip_netconn_do_write+0xea>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c490:	2b10      	cmp	r3, #16
 800c492:	d15c      	bne.n	800c54e <lwip_netconn_do_write+0xea>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	785b      	ldrb	r3, [r3, #1]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c49e:	23fb      	movs	r3, #251	; 0xfb
 800c4a0:	73fb      	strb	r3, [r7, #15]
 800c4a2:	e054      	b.n	800c54e <lwip_netconn_do_write+0xea>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d04d      	beq.n	800c54a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <lwip_netconn_do_write+0x6a>
 800c4c0:	4b27      	ldr	r3, [pc, #156]	; (800c560 <lwip_netconn_do_write+0xfc>)
 800c4c2:	f240 7223 	movw	r2, #1827	; 0x723
 800c4c6:	4927      	ldr	r1, [pc, #156]	; (800c564 <lwip_netconn_do_write+0x100>)
 800c4c8:	4827      	ldr	r0, [pc, #156]	; (800c568 <lwip_netconn_do_write+0x104>)
 800c4ca:	f00b fb61 	bl	8017b90 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <lwip_netconn_do_write+0x80>
 800c4d6:	4b22      	ldr	r3, [pc, #136]	; (800c560 <lwip_netconn_do_write+0xfc>)
 800c4d8:	f240 7224 	movw	r2, #1828	; 0x724
 800c4dc:	4923      	ldr	r1, [pc, #140]	; (800c56c <lwip_netconn_do_write+0x108>)
 800c4de:	4822      	ldr	r0, [pc, #136]	; (800c568 <lwip_netconn_do_write+0x104>)
 800c4e0:	f00b fb56 	bl	8017b90 <iprintf>
        msg->conn->current_msg = msg;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff fdea 	bl	800c0cc <lwip_netconn_do_writemore>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d02b      	beq.n	800c556 <lwip_netconn_do_write+0xf2>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	785b      	ldrb	r3, [r3, #1]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d006      	beq.n	800c516 <lwip_netconn_do_write+0xb2>
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <lwip_netconn_do_write+0xfc>)
 800c50a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c50e:	4918      	ldr	r1, [pc, #96]	; (800c570 <lwip_netconn_do_write+0x10c>)
 800c510:	4815      	ldr	r0, [pc, #84]	; (800c568 <lwip_netconn_do_write+0x104>)
 800c512:	f00b fb3d 	bl	8017b90 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c516:	4817      	ldr	r0, [pc, #92]	; (800c574 <lwip_netconn_do_write+0x110>)
 800c518:	f00b f8f9 	bl	801770e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	330c      	adds	r3, #12
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f00b f858 	bl	80175da <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c52a:	4812      	ldr	r0, [pc, #72]	; (800c574 <lwip_netconn_do_write+0x110>)
 800c52c:	f00b f8e0 	bl	80176f0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d10d      	bne.n	800c556 <lwip_netconn_do_write+0xf2>
 800c53a:	4b09      	ldr	r3, [pc, #36]	; (800c560 <lwip_netconn_do_write+0xfc>)
 800c53c:	f240 722c 	movw	r2, #1836	; 0x72c
 800c540:	490b      	ldr	r1, [pc, #44]	; (800c570 <lwip_netconn_do_write+0x10c>)
 800c542:	4809      	ldr	r0, [pc, #36]	; (800c568 <lwip_netconn_do_write+0x104>)
 800c544:	f00b fb24 	bl	8017b90 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c548:	e005      	b.n	800c556 <lwip_netconn_do_write+0xf2>
      } else {
        err = ERR_CONN;
 800c54a:	23f5      	movs	r3, #245	; 0xf5
 800c54c:	73fb      	strb	r3, [r7, #15]
    } else {
      err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	7bfa      	ldrb	r2, [r7, #15]
 800c552:	711a      	strb	r2, [r3, #4]
 800c554:	e000      	b.n	800c558 <lwip_netconn_do_write+0xf4>
        return;
 800c556:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	0801afec 	.word	0x0801afec
 800c564:	0801b32c 	.word	0x0801b32c
 800c568:	0801b030 	.word	0x0801b030
 800c56c:	0801b4b4 	.word	0x0801b4b4
 800c570:	0801b348 	.word	0x0801b348
 800c574:	20009b08 	.word	0x20009b08

0800c578 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	785b      	ldrb	r3, [r3, #1]
 800c58a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d069      	beq.n	800c66a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c5a0:	2b10      	cmp	r3, #16
 800c5a2:	d162      	bne.n	800c66a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d002      	beq.n	800c5b2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d05b      	beq.n	800c66a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c5b2:	7afb      	ldrb	r3, [r7, #11]
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d103      	bne.n	800c5c0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	22f5      	movs	r2, #245	; 0xf5
 800c5bc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c5be:	e059      	b.n	800c674 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c5c0:	7afb      	ldrb	r3, [r7, #11]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d103      	bne.n	800c5ce <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	22fb      	movs	r2, #251	; 0xfb
 800c5ca:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c5cc:	e052      	b.n	800c674 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7a1b      	ldrb	r3, [r3, #8]
 800c5d2:	f003 0301 	and.w	r3, r3, #1
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d004      	beq.n	800c5e4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff f916 	bl	800b810 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <lwip_netconn_do_close+0x84>
 800c5ee:	4b23      	ldr	r3, [pc, #140]	; (800c67c <lwip_netconn_do_close+0x104>)
 800c5f0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c5f4:	4922      	ldr	r1, [pc, #136]	; (800c680 <lwip_netconn_do_close+0x108>)
 800c5f6:	4823      	ldr	r0, [pc, #140]	; (800c684 <lwip_netconn_do_close+0x10c>)
 800c5f8:	f00b faca 	bl	8017b90 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2204      	movs	r2, #4
 800c602:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2100      	movs	r1, #0
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff f97a 	bl	800b90c <lwip_netconn_do_close_internal>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d029      	beq.n	800c672 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	2b04      	cmp	r3, #4
 800c626:	d006      	beq.n	800c636 <lwip_netconn_do_close+0xbe>
 800c628:	4b14      	ldr	r3, [pc, #80]	; (800c67c <lwip_netconn_do_close+0x104>)
 800c62a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c62e:	4916      	ldr	r1, [pc, #88]	; (800c688 <lwip_netconn_do_close+0x110>)
 800c630:	4814      	ldr	r0, [pc, #80]	; (800c684 <lwip_netconn_do_close+0x10c>)
 800c632:	f00b faad 	bl	8017b90 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c636:	4815      	ldr	r0, [pc, #84]	; (800c68c <lwip_netconn_do_close+0x114>)
 800c638:	f00b f869 	bl	801770e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	330c      	adds	r3, #12
 800c642:	2100      	movs	r1, #0
 800c644:	4618      	mov	r0, r3
 800c646:	f00a ffc8 	bl	80175da <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c64a:	4810      	ldr	r0, [pc, #64]	; (800c68c <lwip_netconn_do_close+0x114>)
 800c64c:	f00b f850 	bl	80176f0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	785b      	ldrb	r3, [r3, #1]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <lwip_netconn_do_close+0xfa>
 800c65a:	4b08      	ldr	r3, [pc, #32]	; (800c67c <lwip_netconn_do_close+0x104>)
 800c65c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c660:	4909      	ldr	r1, [pc, #36]	; (800c688 <lwip_netconn_do_close+0x110>)
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <lwip_netconn_do_close+0x10c>)
 800c664:	f00b fa94 	bl	8017b90 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c668:	e003      	b.n	800c672 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	22f5      	movs	r2, #245	; 0xf5
 800c66e:	711a      	strb	r2, [r3, #4]
 800c670:	e000      	b.n	800c674 <lwip_netconn_do_close+0xfc>
      return;
 800c672:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	0801afec 	.word	0x0801afec
 800c680:	0801b32c 	.word	0x0801b32c
 800c684:	0801b030 	.word	0x0801b030
 800c688:	0801b348 	.word	0x0801b348
 800c68c:	20009b08 	.word	0x20009b08

0800c690 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d013      	beq.n	800c6c6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00b      	beq.n	800c6be <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f001 fefe 	bl	800e4ac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	605a      	str	r2, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685a      	ldr	r2, [r3, #4]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	2005      	movs	r0, #5
 800c6c2:	f001 f853 	bl	800d76c <memp_free>
  }
}
 800c6c6:	bf00      	nop
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d108      	bne.n	800c6f0 <netbuf_next+0x20>
 800c6de:	4b11      	ldr	r3, [pc, #68]	; (800c724 <netbuf_next+0x54>)
 800c6e0:	22e0      	movs	r2, #224	; 0xe0
 800c6e2:	4911      	ldr	r1, [pc, #68]	; (800c728 <netbuf_next+0x58>)
 800c6e4:	4811      	ldr	r0, [pc, #68]	; (800c72c <netbuf_next+0x5c>)
 800c6e6:	f00b fa53 	bl	8017b90 <iprintf>
 800c6ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6ee:	e014      	b.n	800c71a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <netbuf_next+0x30>
    return -1;
 800c6fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6fe:	e00c      	b.n	800c71a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <netbuf_next+0x48>
    return 1;
 800c714:	2301      	movs	r3, #1
 800c716:	e000      	b.n	800c71a <netbuf_next+0x4a>
  }
  return 0;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	0801b4e0 	.word	0x0801b4e0
 800c728:	0801b640 	.word	0x0801b640
 800c72c:	0801b530 	.word	0x0801b530

0800c730 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c73a:	f008 fb89 	bl	8014e50 <sys_timeouts_sleeptime>
 800c73e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c746:	d10b      	bne.n	800c760 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c748:	4813      	ldr	r0, [pc, #76]	; (800c798 <tcpip_timeouts_mbox_fetch+0x68>)
 800c74a:	f00a ffe0 	bl	801770e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c74e:	2200      	movs	r2, #0
 800c750:	6839      	ldr	r1, [r7, #0]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f00a feb6 	bl	80174c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c758:	480f      	ldr	r0, [pc, #60]	; (800c798 <tcpip_timeouts_mbox_fetch+0x68>)
 800c75a:	f00a ffc9 	bl	80176f0 <sys_mutex_lock>
    return;
 800c75e:	e018      	b.n	800c792 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c766:	f008 fb39 	bl	8014ddc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c76a:	e7e6      	b.n	800c73a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c76c:	480a      	ldr	r0, [pc, #40]	; (800c798 <tcpip_timeouts_mbox_fetch+0x68>)
 800c76e:	f00a ffce 	bl	801770e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f00a fea4 	bl	80174c4 <sys_arch_mbox_fetch>
 800c77c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c77e:	4806      	ldr	r0, [pc, #24]	; (800c798 <tcpip_timeouts_mbox_fetch+0x68>)
 800c780:	f00a ffb6 	bl	80176f0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c78a:	d102      	bne.n	800c792 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c78c:	f008 fb26 	bl	8014ddc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c790:	e7d3      	b.n	800c73a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20009b08 	.word	0x20009b08

0800c79c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c7a4:	4810      	ldr	r0, [pc, #64]	; (800c7e8 <tcpip_thread+0x4c>)
 800c7a6:	f00a ffa3 	bl	80176f0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <tcpip_thread+0x50>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d005      	beq.n	800c7be <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c7b2:	4b0e      	ldr	r3, [pc, #56]	; (800c7ec <tcpip_thread+0x50>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a0e      	ldr	r2, [pc, #56]	; (800c7f0 <tcpip_thread+0x54>)
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c7be:	f107 030c 	add.w	r3, r7, #12
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	480b      	ldr	r0, [pc, #44]	; (800c7f4 <tcpip_thread+0x58>)
 800c7c6:	f7ff ffb3 	bl	800c730 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d106      	bne.n	800c7de <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c7d0:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <tcpip_thread+0x5c>)
 800c7d2:	2291      	movs	r2, #145	; 0x91
 800c7d4:	4909      	ldr	r1, [pc, #36]	; (800c7fc <tcpip_thread+0x60>)
 800c7d6:	480a      	ldr	r0, [pc, #40]	; (800c800 <tcpip_thread+0x64>)
 800c7d8:	f00b f9da 	bl	8017b90 <iprintf>
      continue;
 800c7dc:	e003      	b.n	800c7e6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 f80f 	bl	800c804 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c7e6:	e7ea      	b.n	800c7be <tcpip_thread+0x22>
 800c7e8:	20009b08 	.word	0x20009b08
 800c7ec:	20009afc 	.word	0x20009afc
 800c7f0:	20009b00 	.word	0x20009b00
 800c7f4:	20009b04 	.word	0x20009b04
 800c7f8:	0801b678 	.word	0x0801b678
 800c7fc:	0801b6a8 	.word	0x0801b6a8
 800c800:	0801b6c8 	.word	0x0801b6c8

0800c804 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b02      	cmp	r3, #2
 800c812:	d026      	beq.n	800c862 <tcpip_thread_handle_msg+0x5e>
 800c814:	2b02      	cmp	r3, #2
 800c816:	dc2b      	bgt.n	800c870 <tcpip_thread_handle_msg+0x6c>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <tcpip_thread_handle_msg+0x1e>
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d015      	beq.n	800c84c <tcpip_thread_handle_msg+0x48>
 800c820:	e026      	b.n	800c870 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	6850      	ldr	r0, [r2, #4]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6892      	ldr	r2, [r2, #8]
 800c82e:	4611      	mov	r1, r2
 800c830:	4798      	blx	r3
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f001 fe35 	bl	800e4ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c842:	6879      	ldr	r1, [r7, #4]
 800c844:	2008      	movs	r0, #8
 800c846:	f000 ff91 	bl	800d76c <memp_free>
      break;
 800c84a:	e018      	b.n	800c87e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	6892      	ldr	r2, [r2, #8]
 800c854:	4610      	mov	r0, r2
 800c856:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	2007      	movs	r0, #7
 800c85c:	f000 ff86 	bl	800d76c <memp_free>
      break;
 800c860:	e00d      	b.n	800c87e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6892      	ldr	r2, [r2, #8]
 800c86a:	4610      	mov	r0, r2
 800c86c:	4798      	blx	r3
      break;
 800c86e:	e006      	b.n	800c87e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c870:	4b05      	ldr	r3, [pc, #20]	; (800c888 <tcpip_thread_handle_msg+0x84>)
 800c872:	22cf      	movs	r2, #207	; 0xcf
 800c874:	4905      	ldr	r1, [pc, #20]	; (800c88c <tcpip_thread_handle_msg+0x88>)
 800c876:	4806      	ldr	r0, [pc, #24]	; (800c890 <tcpip_thread_handle_msg+0x8c>)
 800c878:	f00b f98a 	bl	8017b90 <iprintf>
      break;
 800c87c:	bf00      	nop
  }
}
 800c87e:	bf00      	nop
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	0801b678 	.word	0x0801b678
 800c88c:	0801b6a8 	.word	0x0801b6a8
 800c890:	0801b6c8 	.word	0x0801b6c8

0800c894 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c8a0:	481a      	ldr	r0, [pc, #104]	; (800c90c <tcpip_inpkt+0x78>)
 800c8a2:	f00a fe57 	bl	8017554 <sys_mbox_valid>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d105      	bne.n	800c8b8 <tcpip_inpkt+0x24>
 800c8ac:	4b18      	ldr	r3, [pc, #96]	; (800c910 <tcpip_inpkt+0x7c>)
 800c8ae:	22fc      	movs	r2, #252	; 0xfc
 800c8b0:	4918      	ldr	r1, [pc, #96]	; (800c914 <tcpip_inpkt+0x80>)
 800c8b2:	4819      	ldr	r0, [pc, #100]	; (800c918 <tcpip_inpkt+0x84>)
 800c8b4:	f00b f96c 	bl	8017b90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c8b8:	2008      	movs	r0, #8
 800c8ba:	f000 fee1 	bl	800d680 <memp_malloc>
 800c8be:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d102      	bne.n	800c8cc <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8ca:	e01a      	b.n	800c902 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c8e4:	6979      	ldr	r1, [r7, #20]
 800c8e6:	4809      	ldr	r0, [pc, #36]	; (800c90c <tcpip_inpkt+0x78>)
 800c8e8:	f00a fdd2 	bl	8017490 <sys_mbox_trypost>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d006      	beq.n	800c900 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c8f2:	6979      	ldr	r1, [r7, #20]
 800c8f4:	2008      	movs	r0, #8
 800c8f6:	f000 ff39 	bl	800d76c <memp_free>
    return ERR_MEM;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8fe:	e000      	b.n	800c902 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c900:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	20009b04 	.word	0x20009b04
 800c910:	0801b678 	.word	0x0801b678
 800c914:	0801b6f0 	.word	0x0801b6f0
 800c918:	0801b6c8 	.word	0x0801b6c8

0800c91c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c92c:	f003 0318 	and.w	r3, r3, #24
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c934:	4a08      	ldr	r2, [pc, #32]	; (800c958 <tcpip_input+0x3c>)
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff ffab 	bl	800c894 <tcpip_inpkt>
 800c93e:	4603      	mov	r3, r0
 800c940:	e005      	b.n	800c94e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c942:	4a06      	ldr	r2, [pc, #24]	; (800c95c <tcpip_input+0x40>)
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff ffa4 	bl	800c894 <tcpip_inpkt>
 800c94c:	4603      	mov	r3, r0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	0801728d 	.word	0x0801728d
 800c95c:	080161a9 	.word	0x080161a9

0800c960 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c96a:	4819      	ldr	r0, [pc, #100]	; (800c9d0 <tcpip_try_callback+0x70>)
 800c96c:	f00a fdf2 	bl	8017554 <sys_mbox_valid>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <tcpip_try_callback+0x24>
 800c976:	4b17      	ldr	r3, [pc, #92]	; (800c9d4 <tcpip_try_callback+0x74>)
 800c978:	f240 125d 	movw	r2, #349	; 0x15d
 800c97c:	4916      	ldr	r1, [pc, #88]	; (800c9d8 <tcpip_try_callback+0x78>)
 800c97e:	4817      	ldr	r0, [pc, #92]	; (800c9dc <tcpip_try_callback+0x7c>)
 800c980:	f00b f906 	bl	8017b90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c984:	2007      	movs	r0, #7
 800c986:	f000 fe7b 	bl	800d680 <memp_malloc>
 800c98a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c996:	e017      	b.n	800c9c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2201      	movs	r2, #1
 800c99c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c9aa:	68f9      	ldr	r1, [r7, #12]
 800c9ac:	4808      	ldr	r0, [pc, #32]	; (800c9d0 <tcpip_try_callback+0x70>)
 800c9ae:	f00a fd6f 	bl	8017490 <sys_mbox_trypost>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d006      	beq.n	800c9c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c9b8:	68f9      	ldr	r1, [r7, #12]
 800c9ba:	2007      	movs	r0, #7
 800c9bc:	f000 fed6 	bl	800d76c <memp_free>
    return ERR_MEM;
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9c4:	e000      	b.n	800c9c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20009b04 	.word	0x20009b04
 800c9d4:	0801b678 	.word	0x0801b678
 800c9d8:	0801b6f0 	.word	0x0801b6f0
 800c9dc:	0801b6c8 	.word	0x0801b6c8

0800c9e0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c9ec:	4806      	ldr	r0, [pc, #24]	; (800ca08 <tcpip_send_msg_wait_sem+0x28>)
 800c9ee:	f00a fe7f 	bl	80176f0 <sys_mutex_lock>
  fn(apimsg);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68b8      	ldr	r0, [r7, #8]
 800c9f6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c9f8:	4803      	ldr	r0, [pc, #12]	; (800ca08 <tcpip_send_msg_wait_sem+0x28>)
 800c9fa:	f00a fe88 	bl	801770e <sys_mutex_unlock>
  return ERR_OK;
 800c9fe:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3710      	adds	r7, #16
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20009b08 	.word	0x20009b08

0800ca0c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ca16:	f000 f98b 	bl	800cd30 <lwip_init>

  tcpip_init_done = initfunc;
 800ca1a:	4a17      	ldr	r2, [pc, #92]	; (800ca78 <tcpip_init+0x6c>)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ca20:	4a16      	ldr	r2, [pc, #88]	; (800ca7c <tcpip_init+0x70>)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ca26:	2106      	movs	r1, #6
 800ca28:	4815      	ldr	r0, [pc, #84]	; (800ca80 <tcpip_init+0x74>)
 800ca2a:	f00a fd05 	bl	8017438 <sys_mbox_new>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d006      	beq.n	800ca42 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ca34:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <tcpip_init+0x78>)
 800ca36:	f240 2261 	movw	r2, #609	; 0x261
 800ca3a:	4913      	ldr	r1, [pc, #76]	; (800ca88 <tcpip_init+0x7c>)
 800ca3c:	4813      	ldr	r0, [pc, #76]	; (800ca8c <tcpip_init+0x80>)
 800ca3e:	f00b f8a7 	bl	8017b90 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ca42:	4813      	ldr	r0, [pc, #76]	; (800ca90 <tcpip_init+0x84>)
 800ca44:	f00a fe3e 	bl	80176c4 <sys_mutex_new>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d006      	beq.n	800ca5c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ca4e:	4b0d      	ldr	r3, [pc, #52]	; (800ca84 <tcpip_init+0x78>)
 800ca50:	f240 2265 	movw	r2, #613	; 0x265
 800ca54:	490f      	ldr	r1, [pc, #60]	; (800ca94 <tcpip_init+0x88>)
 800ca56:	480d      	ldr	r0, [pc, #52]	; (800ca8c <tcpip_init+0x80>)
 800ca58:	f00b f89a 	bl	8017b90 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ca5c:	2318      	movs	r3, #24
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca64:	2200      	movs	r2, #0
 800ca66:	490c      	ldr	r1, [pc, #48]	; (800ca98 <tcpip_init+0x8c>)
 800ca68:	480c      	ldr	r0, [pc, #48]	; (800ca9c <tcpip_init+0x90>)
 800ca6a:	f00a fe5d 	bl	8017728 <sys_thread_new>
}
 800ca6e:	bf00      	nop
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20009afc 	.word	0x20009afc
 800ca7c:	20009b00 	.word	0x20009b00
 800ca80:	20009b04 	.word	0x20009b04
 800ca84:	0801b678 	.word	0x0801b678
 800ca88:	0801b700 	.word	0x0801b700
 800ca8c:	0801b6c8 	.word	0x0801b6c8
 800ca90:	20009b08 	.word	0x20009b08
 800ca94:	0801b724 	.word	0x0801b724
 800ca98:	0800c79d 	.word	0x0800c79d
 800ca9c:	0801b748 	.word	0x0801b748

0800caa0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800caaa:	88fb      	ldrh	r3, [r7, #6]
 800caac:	021b      	lsls	r3, r3, #8
 800caae:	b21a      	sxth	r2, r3
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	b21b      	sxth	r3, r3
 800cab8:	4313      	orrs	r3, r2
 800caba:	b21b      	sxth	r3, r3
 800cabc:	b29b      	uxth	r3, r3
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	061a      	lsls	r2, r3, #24
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	021b      	lsls	r3, r3, #8
 800cada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cade:	431a      	orrs	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	0a1b      	lsrs	r3, r3, #8
 800cae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	0e1b      	lsrs	r3, r3, #24
 800caee:	4313      	orrs	r3, r2
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b089      	sub	sp, #36	; 0x24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	f003 0301 	and.w	r3, r3, #1
 800cb18:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00d      	beq.n	800cb3c <lwip_standard_chksum+0x40>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dd0a      	ble.n	800cb3c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cb26:	69fa      	ldr	r2, [r7, #28]
 800cb28:	1c53      	adds	r3, r2, #1
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	f107 030e 	add.w	r3, r7, #14
 800cb30:	3301      	adds	r3, #1
 800cb32:	7812      	ldrb	r2, [r2, #0]
 800cb34:	701a      	strb	r2, [r3, #0]
    len--;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cb40:	e00a      	b.n	800cb58 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	1c9a      	adds	r2, r3, #2
 800cb46:	61ba      	str	r2, [r7, #24]
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	4413      	add	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	3b02      	subs	r3, #2
 800cb56:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	dcf1      	bgt.n	800cb42 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dd04      	ble.n	800cb6e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cb64:	f107 030e 	add.w	r3, r7, #14
 800cb68:	69ba      	ldr	r2, [r7, #24]
 800cb6a:	7812      	ldrb	r2, [r2, #0]
 800cb6c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cb6e:	89fb      	ldrh	r3, [r7, #14]
 800cb70:	461a      	mov	r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	4413      	add	r3, r2
 800cb76:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	0c1a      	lsrs	r2, r3, #16
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	4413      	add	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	0c1a      	lsrs	r2, r3, #16
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	4413      	add	r3, r2
 800cb8e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d007      	beq.n	800cba6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	021b      	lsls	r3, r3, #8
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	4313      	orrs	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	b29b      	uxth	r3, r3
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3724      	adds	r7, #36	; 0x24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b086      	sub	sp, #24
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	60f8      	str	r0, [r7, #12]
 800cbbe:	607b      	str	r3, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	72fb      	strb	r3, [r7, #11]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	e02b      	b.n	800cc2a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	895b      	ldrh	r3, [r3, #10]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4610      	mov	r0, r2
 800cbde:	f7ff ff8d 	bl	800cafc <lwip_standard_chksum>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4413      	add	r3, r2
 800cbea:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	0c1a      	lsrs	r2, r3, #16
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	4413      	add	r3, r2
 800cbf6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	895b      	ldrh	r3, [r3, #10]
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00e      	beq.n	800cc24 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	bf0c      	ite	eq
 800cc0c:	2301      	moveq	r3, #1
 800cc0e:	2300      	movne	r3, #0
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	021b      	lsls	r3, r3, #8
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	0a1b      	lsrs	r3, r3, #8
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	4313      	orrs	r3, r2
 800cc22:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	617b      	str	r3, [r7, #20]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1d0      	bne.n	800cbd2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d007      	beq.n	800cc46 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	021b      	lsls	r3, r3, #8
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	0a1b      	lsrs	r3, r3, #8
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	4313      	orrs	r3, r2
 800cc44:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff ff28 	bl	800caa0 <lwip_htons>
 800cc50:	4603      	mov	r3, r0
 800cc52:	461a      	mov	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4413      	add	r3, r2
 800cc58:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800cc5a:	893b      	ldrh	r3, [r7, #8]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff ff1f 	bl	800caa0 <lwip_htons>
 800cc62:	4603      	mov	r3, r0
 800cc64:	461a      	mov	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4413      	add	r3, r2
 800cc6a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	0c1a      	lsrs	r2, r3, #16
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	4413      	add	r3, r2
 800cc76:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	0c1a      	lsrs	r2, r3, #16
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	4413      	add	r3, r2
 800cc82:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	43db      	mvns	r3, r3
 800cc8a:	b29b      	uxth	r3, r3
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	607b      	str	r3, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	72fb      	strb	r3, [r7, #11]
 800cca2:	4613      	mov	r3, r2
 800cca4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	0c1b      	lsrs	r3, r3, #16
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	4413      	add	r3, r2
 800ccba:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4413      	add	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	0c1b      	lsrs	r3, r3, #16
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	0c1a      	lsrs	r2, r3, #16
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4413      	add	r3, r2
 800cce0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	0c1a      	lsrs	r2, r3, #16
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	4413      	add	r3, r2
 800ccec:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800ccee:	893a      	ldrh	r2, [r7, #8]
 800ccf0:	7af9      	ldrb	r1, [r7, #11]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff ff5e 	bl	800cbb6 <inet_cksum_pseudo_base>
 800ccfa:	4603      	mov	r3, r0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3718      	adds	r7, #24
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	607b      	str	r3, [r7, #4]
 800cd0e:	460b      	mov	r3, r1
 800cd10:	72fb      	strb	r3, [r7, #11]
 800cd12:	4613      	mov	r3, r2
 800cd14:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800cd16:	893a      	ldrh	r2, [r7, #8]
 800cd18:	7af9      	ldrb	r1, [r7, #11]
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff ffb7 	bl	800cc94 <inet_chksum_pseudo>
 800cd26:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cd3a:	f00a fcb7 	bl	80176ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cd3e:	f000 f8d3 	bl	800cee8 <mem_init>
  memp_init();
 800cd42:	f000 fc2f 	bl	800d5a4 <memp_init>
  pbuf_init();
  netif_init();
 800cd46:	f000 fd3b 	bl	800d7c0 <netif_init>
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cd4a:	f001 fe49 	bl	800e9e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cd4e:	f007 fffd 	bl	8014d4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cd52:	bf00      	nop
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
	...

0800cd5c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cd66:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <ptr_to_mem+0x20>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	4413      	add	r3, r2
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	2000eb38 	.word	0x2000eb38

0800cd80 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cd88:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <mem_to_ptr+0x20>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	b29b      	uxth	r3, r3
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	370c      	adds	r7, #12
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	2000eb38 	.word	0x2000eb38

0800cda4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cdac:	4b45      	ldr	r3, [pc, #276]	; (800cec4 <plug_holes+0x120>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d206      	bcs.n	800cdc4 <plug_holes+0x20>
 800cdb6:	4b44      	ldr	r3, [pc, #272]	; (800cec8 <plug_holes+0x124>)
 800cdb8:	f240 12df 	movw	r2, #479	; 0x1df
 800cdbc:	4943      	ldr	r1, [pc, #268]	; (800cecc <plug_holes+0x128>)
 800cdbe:	4844      	ldr	r0, [pc, #272]	; (800ced0 <plug_holes+0x12c>)
 800cdc0:	f00a fee6 	bl	8017b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cdc4:	4b43      	ldr	r3, [pc, #268]	; (800ced4 <plug_holes+0x130>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d306      	bcc.n	800cddc <plug_holes+0x38>
 800cdce:	4b3e      	ldr	r3, [pc, #248]	; (800cec8 <plug_holes+0x124>)
 800cdd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cdd4:	4940      	ldr	r1, [pc, #256]	; (800ced8 <plug_holes+0x134>)
 800cdd6:	483e      	ldr	r0, [pc, #248]	; (800ced0 <plug_holes+0x12c>)
 800cdd8:	f00a feda 	bl	8017b90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	791b      	ldrb	r3, [r3, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d006      	beq.n	800cdf2 <plug_holes+0x4e>
 800cde4:	4b38      	ldr	r3, [pc, #224]	; (800cec8 <plug_holes+0x124>)
 800cde6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cdea:	493c      	ldr	r1, [pc, #240]	; (800cedc <plug_holes+0x138>)
 800cdec:	4838      	ldr	r0, [pc, #224]	; (800ced0 <plug_holes+0x12c>)
 800cdee:	f00a fecf 	bl	8017b90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cdfa:	d906      	bls.n	800ce0a <plug_holes+0x66>
 800cdfc:	4b32      	ldr	r3, [pc, #200]	; (800cec8 <plug_holes+0x124>)
 800cdfe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ce02:	4937      	ldr	r1, [pc, #220]	; (800cee0 <plug_holes+0x13c>)
 800ce04:	4832      	ldr	r0, [pc, #200]	; (800ced0 <plug_holes+0x12c>)
 800ce06:	f00a fec3 	bl	8017b90 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7ff ffa4 	bl	800cd5c <ptr_to_mem>
 800ce14:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d024      	beq.n	800ce68 <plug_holes+0xc4>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	791b      	ldrb	r3, [r3, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d120      	bne.n	800ce68 <plug_holes+0xc4>
 800ce26:	4b2b      	ldr	r3, [pc, #172]	; (800ced4 <plug_holes+0x130>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d01b      	beq.n	800ce68 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ce30:	4b2c      	ldr	r3, [pc, #176]	; (800cee4 <plug_holes+0x140>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d102      	bne.n	800ce40 <plug_holes+0x9c>
      lfree = mem;
 800ce3a:	4a2a      	ldr	r2, [pc, #168]	; (800cee4 <plug_holes+0x140>)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	881a      	ldrh	r2, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ce50:	d00a      	beq.n	800ce68 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	881b      	ldrh	r3, [r3, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff ff80 	bl	800cd5c <ptr_to_mem>
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7ff ff8e 	bl	800cd80 <mem_to_ptr>
 800ce64:	4603      	mov	r3, r0
 800ce66:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	885b      	ldrh	r3, [r3, #2]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff ff75 	bl	800cd5c <ptr_to_mem>
 800ce72:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d01f      	beq.n	800cebc <plug_holes+0x118>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	791b      	ldrb	r3, [r3, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d11b      	bne.n	800cebc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ce84:	4b17      	ldr	r3, [pc, #92]	; (800cee4 <plug_holes+0x140>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d102      	bne.n	800ce94 <plug_holes+0xf0>
      lfree = pmem;
 800ce8e:	4a15      	ldr	r2, [pc, #84]	; (800cee4 <plug_holes+0x140>)
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	881a      	ldrh	r2, [r3, #0]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cea4:	d00a      	beq.n	800cebc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff ff56 	bl	800cd5c <ptr_to_mem>
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	68b8      	ldr	r0, [r7, #8]
 800ceb4:	f7ff ff64 	bl	800cd80 <mem_to_ptr>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cebc:	bf00      	nop
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd90      	pop	{r4, r7, pc}
 800cec4:	2000eb38 	.word	0x2000eb38
 800cec8:	0801b758 	.word	0x0801b758
 800cecc:	0801b788 	.word	0x0801b788
 800ced0:	0801b7a0 	.word	0x0801b7a0
 800ced4:	2000eb3c 	.word	0x2000eb3c
 800ced8:	0801b7c8 	.word	0x0801b7c8
 800cedc:	0801b7e4 	.word	0x0801b7e4
 800cee0:	0801b800 	.word	0x0801b800
 800cee4:	2000eb44 	.word	0x2000eb44

0800cee8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ceee:	4b1f      	ldr	r3, [pc, #124]	; (800cf6c <mem_init+0x84>)
 800cef0:	3303      	adds	r3, #3
 800cef2:	f023 0303 	bic.w	r3, r3, #3
 800cef6:	461a      	mov	r2, r3
 800cef8:	4b1d      	ldr	r3, [pc, #116]	; (800cf70 <mem_init+0x88>)
 800cefa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cefc:	4b1c      	ldr	r3, [pc, #112]	; (800cf70 <mem_init+0x88>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800cf08:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cf16:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800cf1a:	f7ff ff1f 	bl	800cd5c <ptr_to_mem>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	4a14      	ldr	r2, [pc, #80]	; (800cf74 <mem_init+0x8c>)
 800cf22:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cf24:	4b13      	ldr	r3, [pc, #76]	; (800cf74 <mem_init+0x8c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cf2c:	4b11      	ldr	r3, [pc, #68]	; (800cf74 <mem_init+0x8c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800cf34:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <mem_init+0x8c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800cf3e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <mem_init+0x88>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a0c      	ldr	r2, [pc, #48]	; (800cf78 <mem_init+0x90>)
 800cf46:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cf48:	480c      	ldr	r0, [pc, #48]	; (800cf7c <mem_init+0x94>)
 800cf4a:	f00a fbbb 	bl	80176c4 <sys_mutex_new>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d006      	beq.n	800cf62 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cf54:	4b0a      	ldr	r3, [pc, #40]	; (800cf80 <mem_init+0x98>)
 800cf56:	f240 221f 	movw	r2, #543	; 0x21f
 800cf5a:	490a      	ldr	r1, [pc, #40]	; (800cf84 <mem_init+0x9c>)
 800cf5c:	480a      	ldr	r0, [pc, #40]	; (800cf88 <mem_init+0xa0>)
 800cf5e:	f00a fe17 	bl	8017b90 <iprintf>
  }
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20009b24 	.word	0x20009b24
 800cf70:	2000eb38 	.word	0x2000eb38
 800cf74:	2000eb3c 	.word	0x2000eb3c
 800cf78:	2000eb44 	.word	0x2000eb44
 800cf7c:	2000eb40 	.word	0x2000eb40
 800cf80:	0801b758 	.word	0x0801b758
 800cf84:	0801b82c 	.word	0x0801b82c
 800cf88:	0801b7a0 	.word	0x0801b7a0

0800cf8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff fef3 	bl	800cd80 <mem_to_ptr>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff feda 	bl	800cd5c <ptr_to_mem>
 800cfa8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	885b      	ldrh	r3, [r3, #2]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff fed4 	bl	800cd5c <ptr_to_mem>
 800cfb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cfbe:	d818      	bhi.n	800cff2 <mem_link_valid+0x66>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	885b      	ldrh	r3, [r3, #2]
 800cfc4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cfc8:	d813      	bhi.n	800cff2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cfce:	8afa      	ldrh	r2, [r7, #22]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d004      	beq.n	800cfde <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	8afa      	ldrh	r2, [r7, #22]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d109      	bne.n	800cff2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cfde:	4b08      	ldr	r3, [pc, #32]	; (800d000 <mem_link_valid+0x74>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d006      	beq.n	800cff6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	885b      	ldrh	r3, [r3, #2]
 800cfec:	8afa      	ldrh	r2, [r7, #22]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d001      	beq.n	800cff6 <mem_link_valid+0x6a>
    return 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <mem_link_valid+0x6c>
  }
  return 1;
 800cff6:	2301      	movs	r3, #1
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	2000eb3c 	.word	0x2000eb3c

0800d004 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d070      	beq.n	800d0f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f003 0303 	and.w	r3, r3, #3
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00d      	beq.n	800d038 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d01c:	4b37      	ldr	r3, [pc, #220]	; (800d0fc <mem_free+0xf8>)
 800d01e:	f240 2273 	movw	r2, #627	; 0x273
 800d022:	4937      	ldr	r1, [pc, #220]	; (800d100 <mem_free+0xfc>)
 800d024:	4837      	ldr	r0, [pc, #220]	; (800d104 <mem_free+0x100>)
 800d026:	f00a fdb3 	bl	8017b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d02a:	f00a fb9d 	bl	8017768 <sys_arch_protect>
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f00a fba7 	bl	8017784 <sys_arch_unprotect>
    return;
 800d036:	e05e      	b.n	800d0f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3b08      	subs	r3, #8
 800d03c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d03e:	4b32      	ldr	r3, [pc, #200]	; (800d108 <mem_free+0x104>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	69fa      	ldr	r2, [r7, #28]
 800d044:	429a      	cmp	r2, r3
 800d046:	d306      	bcc.n	800d056 <mem_free+0x52>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f103 020c 	add.w	r2, r3, #12
 800d04e:	4b2f      	ldr	r3, [pc, #188]	; (800d10c <mem_free+0x108>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d90d      	bls.n	800d072 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d056:	4b29      	ldr	r3, [pc, #164]	; (800d0fc <mem_free+0xf8>)
 800d058:	f240 227f 	movw	r2, #639	; 0x27f
 800d05c:	492c      	ldr	r1, [pc, #176]	; (800d110 <mem_free+0x10c>)
 800d05e:	4829      	ldr	r0, [pc, #164]	; (800d104 <mem_free+0x100>)
 800d060:	f00a fd96 	bl	8017b90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d064:	f00a fb80 	bl	8017768 <sys_arch_protect>
 800d068:	6138      	str	r0, [r7, #16]
 800d06a:	6938      	ldr	r0, [r7, #16]
 800d06c:	f00a fb8a 	bl	8017784 <sys_arch_unprotect>
    return;
 800d070:	e041      	b.n	800d0f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d072:	4828      	ldr	r0, [pc, #160]	; (800d114 <mem_free+0x110>)
 800d074:	f00a fb3c 	bl	80176f0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	791b      	ldrb	r3, [r3, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d110      	bne.n	800d0a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d080:	4b1e      	ldr	r3, [pc, #120]	; (800d0fc <mem_free+0xf8>)
 800d082:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d086:	4924      	ldr	r1, [pc, #144]	; (800d118 <mem_free+0x114>)
 800d088:	481e      	ldr	r0, [pc, #120]	; (800d104 <mem_free+0x100>)
 800d08a:	f00a fd81 	bl	8017b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d08e:	4821      	ldr	r0, [pc, #132]	; (800d114 <mem_free+0x110>)
 800d090:	f00a fb3d 	bl	801770e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d094:	f00a fb68 	bl	8017768 <sys_arch_protect>
 800d098:	6178      	str	r0, [r7, #20]
 800d09a:	6978      	ldr	r0, [r7, #20]
 800d09c:	f00a fb72 	bl	8017784 <sys_arch_unprotect>
    return;
 800d0a0:	e029      	b.n	800d0f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d0a2:	69f8      	ldr	r0, [r7, #28]
 800d0a4:	f7ff ff72 	bl	800cf8c <mem_link_valid>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d110      	bne.n	800d0d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d0ae:	4b13      	ldr	r3, [pc, #76]	; (800d0fc <mem_free+0xf8>)
 800d0b0:	f240 2295 	movw	r2, #661	; 0x295
 800d0b4:	4919      	ldr	r1, [pc, #100]	; (800d11c <mem_free+0x118>)
 800d0b6:	4813      	ldr	r0, [pc, #76]	; (800d104 <mem_free+0x100>)
 800d0b8:	f00a fd6a 	bl	8017b90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d0bc:	4815      	ldr	r0, [pc, #84]	; (800d114 <mem_free+0x110>)
 800d0be:	f00a fb26 	bl	801770e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d0c2:	f00a fb51 	bl	8017768 <sys_arch_protect>
 800d0c6:	61b8      	str	r0, [r7, #24]
 800d0c8:	69b8      	ldr	r0, [r7, #24]
 800d0ca:	f00a fb5b 	bl	8017784 <sys_arch_unprotect>
    return;
 800d0ce:	e012      	b.n	800d0f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d0d6:	4b12      	ldr	r3, [pc, #72]	; (800d120 <mem_free+0x11c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	69fa      	ldr	r2, [r7, #28]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d202      	bcs.n	800d0e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d0e0:	4a0f      	ldr	r2, [pc, #60]	; (800d120 <mem_free+0x11c>)
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d0e6:	69f8      	ldr	r0, [r7, #28]
 800d0e8:	f7ff fe5c 	bl	800cda4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d0ec:	4809      	ldr	r0, [pc, #36]	; (800d114 <mem_free+0x110>)
 800d0ee:	f00a fb0e 	bl	801770e <sys_mutex_unlock>
 800d0f2:	e000      	b.n	800d0f6 <mem_free+0xf2>
    return;
 800d0f4:	bf00      	nop
}
 800d0f6:	3720      	adds	r7, #32
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	0801b758 	.word	0x0801b758
 800d100:	0801b848 	.word	0x0801b848
 800d104:	0801b7a0 	.word	0x0801b7a0
 800d108:	2000eb38 	.word	0x2000eb38
 800d10c:	2000eb3c 	.word	0x2000eb3c
 800d110:	0801b86c 	.word	0x0801b86c
 800d114:	2000eb40 	.word	0x2000eb40
 800d118:	0801b888 	.word	0x0801b888
 800d11c:	0801b8b0 	.word	0x0801b8b0
 800d120:	2000eb44 	.word	0x2000eb44

0800d124 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b088      	sub	sp, #32
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d130:	887b      	ldrh	r3, [r7, #2]
 800d132:	3303      	adds	r3, #3
 800d134:	b29b      	uxth	r3, r3
 800d136:	f023 0303 	bic.w	r3, r3, #3
 800d13a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d13c:	8bfb      	ldrh	r3, [r7, #30]
 800d13e:	2b0b      	cmp	r3, #11
 800d140:	d801      	bhi.n	800d146 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d142:	230c      	movs	r3, #12
 800d144:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d146:	8bfb      	ldrh	r3, [r7, #30]
 800d148:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d14c:	d803      	bhi.n	800d156 <mem_trim+0x32>
 800d14e:	8bfa      	ldrh	r2, [r7, #30]
 800d150:	887b      	ldrh	r3, [r7, #2]
 800d152:	429a      	cmp	r2, r3
 800d154:	d201      	bcs.n	800d15a <mem_trim+0x36>
    return NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	e0d8      	b.n	800d30c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d15a:	4b6e      	ldr	r3, [pc, #440]	; (800d314 <mem_trim+0x1f0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	429a      	cmp	r2, r3
 800d162:	d304      	bcc.n	800d16e <mem_trim+0x4a>
 800d164:	4b6c      	ldr	r3, [pc, #432]	; (800d318 <mem_trim+0x1f4>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d306      	bcc.n	800d17c <mem_trim+0x58>
 800d16e:	4b6b      	ldr	r3, [pc, #428]	; (800d31c <mem_trim+0x1f8>)
 800d170:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d174:	496a      	ldr	r1, [pc, #424]	; (800d320 <mem_trim+0x1fc>)
 800d176:	486b      	ldr	r0, [pc, #428]	; (800d324 <mem_trim+0x200>)
 800d178:	f00a fd0a 	bl	8017b90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d17c:	4b65      	ldr	r3, [pc, #404]	; (800d314 <mem_trim+0x1f0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	429a      	cmp	r2, r3
 800d184:	d304      	bcc.n	800d190 <mem_trim+0x6c>
 800d186:	4b64      	ldr	r3, [pc, #400]	; (800d318 <mem_trim+0x1f4>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d307      	bcc.n	800d1a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d190:	f00a faea 	bl	8017768 <sys_arch_protect>
 800d194:	60b8      	str	r0, [r7, #8]
 800d196:	68b8      	ldr	r0, [r7, #8]
 800d198:	f00a faf4 	bl	8017784 <sys_arch_unprotect>
    return rmem;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	e0b5      	b.n	800d30c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3b08      	subs	r3, #8
 800d1a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d1a6:	69b8      	ldr	r0, [r7, #24]
 800d1a8:	f7ff fdea 	bl	800cd80 <mem_to_ptr>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	881a      	ldrh	r2, [r3, #0]
 800d1b4:	8afb      	ldrh	r3, [r7, #22]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	3b08      	subs	r3, #8
 800d1bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d1be:	8bfa      	ldrh	r2, [r7, #30]
 800d1c0:	8abb      	ldrh	r3, [r7, #20]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d906      	bls.n	800d1d4 <mem_trim+0xb0>
 800d1c6:	4b55      	ldr	r3, [pc, #340]	; (800d31c <mem_trim+0x1f8>)
 800d1c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d1cc:	4956      	ldr	r1, [pc, #344]	; (800d328 <mem_trim+0x204>)
 800d1ce:	4855      	ldr	r0, [pc, #340]	; (800d324 <mem_trim+0x200>)
 800d1d0:	f00a fcde 	bl	8017b90 <iprintf>
  if (newsize > size) {
 800d1d4:	8bfa      	ldrh	r2, [r7, #30]
 800d1d6:	8abb      	ldrh	r3, [r7, #20]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d901      	bls.n	800d1e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e095      	b.n	800d30c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d1e0:	8bfa      	ldrh	r2, [r7, #30]
 800d1e2:	8abb      	ldrh	r3, [r7, #20]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d101      	bne.n	800d1ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	e08f      	b.n	800d30c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d1ec:	484f      	ldr	r0, [pc, #316]	; (800d32c <mem_trim+0x208>)
 800d1ee:	f00a fa7f 	bl	80176f0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff fdb0 	bl	800cd5c <ptr_to_mem>
 800d1fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	791b      	ldrb	r3, [r3, #4]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d13f      	bne.n	800d286 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d20e:	d106      	bne.n	800d21e <mem_trim+0xfa>
 800d210:	4b42      	ldr	r3, [pc, #264]	; (800d31c <mem_trim+0x1f8>)
 800d212:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d216:	4946      	ldr	r1, [pc, #280]	; (800d330 <mem_trim+0x20c>)
 800d218:	4842      	ldr	r0, [pc, #264]	; (800d324 <mem_trim+0x200>)
 800d21a:	f00a fcb9 	bl	8017b90 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d224:	8afa      	ldrh	r2, [r7, #22]
 800d226:	8bfb      	ldrh	r3, [r7, #30]
 800d228:	4413      	add	r3, r2
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	3308      	adds	r3, #8
 800d22e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d230:	4b40      	ldr	r3, [pc, #256]	; (800d334 <mem_trim+0x210>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	429a      	cmp	r2, r3
 800d238:	d106      	bne.n	800d248 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d23a:	89fb      	ldrh	r3, [r7, #14]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff fd8d 	bl	800cd5c <ptr_to_mem>
 800d242:	4603      	mov	r3, r0
 800d244:	4a3b      	ldr	r2, [pc, #236]	; (800d334 <mem_trim+0x210>)
 800d246:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d248:	89fb      	ldrh	r3, [r7, #14]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7ff fd86 	bl	800cd5c <ptr_to_mem>
 800d250:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	2200      	movs	r2, #0
 800d256:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	89ba      	ldrh	r2, [r7, #12]
 800d25c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	8afa      	ldrh	r2, [r7, #22]
 800d262:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	89fa      	ldrh	r2, [r7, #14]
 800d268:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d272:	d047      	beq.n	800d304 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	881b      	ldrh	r3, [r3, #0]
 800d278:	4618      	mov	r0, r3
 800d27a:	f7ff fd6f 	bl	800cd5c <ptr_to_mem>
 800d27e:	4602      	mov	r2, r0
 800d280:	89fb      	ldrh	r3, [r7, #14]
 800d282:	8053      	strh	r3, [r2, #2]
 800d284:	e03e      	b.n	800d304 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d286:	8bfb      	ldrh	r3, [r7, #30]
 800d288:	f103 0214 	add.w	r2, r3, #20
 800d28c:	8abb      	ldrh	r3, [r7, #20]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d838      	bhi.n	800d304 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d292:	8afa      	ldrh	r2, [r7, #22]
 800d294:	8bfb      	ldrh	r3, [r7, #30]
 800d296:	4413      	add	r3, r2
 800d298:	b29b      	uxth	r3, r3
 800d29a:	3308      	adds	r3, #8
 800d29c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d29e:	69bb      	ldr	r3, [r7, #24]
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d2a6:	d106      	bne.n	800d2b6 <mem_trim+0x192>
 800d2a8:	4b1c      	ldr	r3, [pc, #112]	; (800d31c <mem_trim+0x1f8>)
 800d2aa:	f240 3216 	movw	r2, #790	; 0x316
 800d2ae:	4920      	ldr	r1, [pc, #128]	; (800d330 <mem_trim+0x20c>)
 800d2b0:	481c      	ldr	r0, [pc, #112]	; (800d324 <mem_trim+0x200>)
 800d2b2:	f00a fc6d 	bl	8017b90 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d2b6:	89fb      	ldrh	r3, [r7, #14]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff fd4f 	bl	800cd5c <ptr_to_mem>
 800d2be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d2c0:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <mem_trim+0x210>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	693a      	ldr	r2, [r7, #16]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d202      	bcs.n	800d2d0 <mem_trim+0x1ac>
      lfree = mem2;
 800d2ca:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <mem_trim+0x210>)
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	881a      	ldrh	r2, [r3, #0]
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	8afa      	ldrh	r2, [r7, #22]
 800d2e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	89fa      	ldrh	r2, [r7, #14]
 800d2e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d2f2:	d007      	beq.n	800d304 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fd2f 	bl	800cd5c <ptr_to_mem>
 800d2fe:	4602      	mov	r2, r0
 800d300:	89fb      	ldrh	r3, [r7, #14]
 800d302:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d304:	4809      	ldr	r0, [pc, #36]	; (800d32c <mem_trim+0x208>)
 800d306:	f00a fa02 	bl	801770e <sys_mutex_unlock>
  return rmem;
 800d30a:	687b      	ldr	r3, [r7, #4]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3720      	adds	r7, #32
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	2000eb38 	.word	0x2000eb38
 800d318:	2000eb3c 	.word	0x2000eb3c
 800d31c:	0801b758 	.word	0x0801b758
 800d320:	0801b8e4 	.word	0x0801b8e4
 800d324:	0801b7a0 	.word	0x0801b7a0
 800d328:	0801b8fc 	.word	0x0801b8fc
 800d32c:	2000eb40 	.word	0x2000eb40
 800d330:	0801b91c 	.word	0x0801b91c
 800d334:	2000eb44 	.word	0x2000eb44

0800d338 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b088      	sub	sp, #32
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d342:	88fb      	ldrh	r3, [r7, #6]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <mem_malloc+0x14>
    return NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	e0e2      	b.n	800d512 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	3303      	adds	r3, #3
 800d350:	b29b      	uxth	r3, r3
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d358:	8bbb      	ldrh	r3, [r7, #28]
 800d35a:	2b0b      	cmp	r3, #11
 800d35c:	d801      	bhi.n	800d362 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d35e:	230c      	movs	r3, #12
 800d360:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d362:	8bbb      	ldrh	r3, [r7, #28]
 800d364:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d368:	d803      	bhi.n	800d372 <mem_malloc+0x3a>
 800d36a:	8bba      	ldrh	r2, [r7, #28]
 800d36c:	88fb      	ldrh	r3, [r7, #6]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d201      	bcs.n	800d376 <mem_malloc+0x3e>
    return NULL;
 800d372:	2300      	movs	r3, #0
 800d374:	e0cd      	b.n	800d512 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d376:	4869      	ldr	r0, [pc, #420]	; (800d51c <mem_malloc+0x1e4>)
 800d378:	f00a f9ba 	bl	80176f0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d37c:	4b68      	ldr	r3, [pc, #416]	; (800d520 <mem_malloc+0x1e8>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f7ff fcfd 	bl	800cd80 <mem_to_ptr>
 800d386:	4603      	mov	r3, r0
 800d388:	83fb      	strh	r3, [r7, #30]
 800d38a:	e0b7      	b.n	800d4fc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d38c:	8bfb      	ldrh	r3, [r7, #30]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff fce4 	bl	800cd5c <ptr_to_mem>
 800d394:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	791b      	ldrb	r3, [r3, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f040 80a7 	bne.w	800d4ee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	8bfb      	ldrh	r3, [r7, #30]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	f1a3 0208 	sub.w	r2, r3, #8
 800d3ae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	f0c0 809c 	bcc.w	800d4ee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	8bfb      	ldrh	r3, [r7, #30]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	f1a3 0208 	sub.w	r2, r3, #8
 800d3c4:	8bbb      	ldrh	r3, [r7, #28]
 800d3c6:	3314      	adds	r3, #20
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d333      	bcc.n	800d434 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d3cc:	8bfa      	ldrh	r2, [r7, #30]
 800d3ce:	8bbb      	ldrh	r3, [r7, #28]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d3d8:	8a7b      	ldrh	r3, [r7, #18]
 800d3da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d3de:	d106      	bne.n	800d3ee <mem_malloc+0xb6>
 800d3e0:	4b50      	ldr	r3, [pc, #320]	; (800d524 <mem_malloc+0x1ec>)
 800d3e2:	f240 3287 	movw	r2, #903	; 0x387
 800d3e6:	4950      	ldr	r1, [pc, #320]	; (800d528 <mem_malloc+0x1f0>)
 800d3e8:	4850      	ldr	r0, [pc, #320]	; (800d52c <mem_malloc+0x1f4>)
 800d3ea:	f00a fbd1 	bl	8017b90 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d3ee:	8a7b      	ldrh	r3, [r7, #18]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fcb3 	bl	800cd5c <ptr_to_mem>
 800d3f6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	881a      	ldrh	r2, [r3, #0]
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	8bfa      	ldrh	r2, [r7, #30]
 800d40a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	8a7a      	ldrh	r2, [r7, #18]
 800d410:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2201      	movs	r2, #1
 800d416:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	881b      	ldrh	r3, [r3, #0]
 800d41c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d420:	d00b      	beq.n	800d43a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	4618      	mov	r0, r3
 800d428:	f7ff fc98 	bl	800cd5c <ptr_to_mem>
 800d42c:	4602      	mov	r2, r0
 800d42e:	8a7b      	ldrh	r3, [r7, #18]
 800d430:	8053      	strh	r3, [r2, #2]
 800d432:	e002      	b.n	800d43a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2201      	movs	r2, #1
 800d438:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d43a:	4b39      	ldr	r3, [pc, #228]	; (800d520 <mem_malloc+0x1e8>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	429a      	cmp	r2, r3
 800d442:	d127      	bne.n	800d494 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d444:	4b36      	ldr	r3, [pc, #216]	; (800d520 <mem_malloc+0x1e8>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d44a:	e005      	b.n	800d458 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fc83 	bl	800cd5c <ptr_to_mem>
 800d456:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	791b      	ldrb	r3, [r3, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <mem_malloc+0x132>
 800d460:	4b33      	ldr	r3, [pc, #204]	; (800d530 <mem_malloc+0x1f8>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	429a      	cmp	r2, r3
 800d468:	d1f0      	bne.n	800d44c <mem_malloc+0x114>
          }
          lfree = cur;
 800d46a:	4a2d      	ldr	r2, [pc, #180]	; (800d520 <mem_malloc+0x1e8>)
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d470:	4b2b      	ldr	r3, [pc, #172]	; (800d520 <mem_malloc+0x1e8>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	4b2e      	ldr	r3, [pc, #184]	; (800d530 <mem_malloc+0x1f8>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d00b      	beq.n	800d494 <mem_malloc+0x15c>
 800d47c:	4b28      	ldr	r3, [pc, #160]	; (800d520 <mem_malloc+0x1e8>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	791b      	ldrb	r3, [r3, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d006      	beq.n	800d494 <mem_malloc+0x15c>
 800d486:	4b27      	ldr	r3, [pc, #156]	; (800d524 <mem_malloc+0x1ec>)
 800d488:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d48c:	4929      	ldr	r1, [pc, #164]	; (800d534 <mem_malloc+0x1fc>)
 800d48e:	4827      	ldr	r0, [pc, #156]	; (800d52c <mem_malloc+0x1f4>)
 800d490:	f00a fb7e 	bl	8017b90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d494:	4821      	ldr	r0, [pc, #132]	; (800d51c <mem_malloc+0x1e4>)
 800d496:	f00a f93a 	bl	801770e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d49a:	8bba      	ldrh	r2, [r7, #28]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	4413      	add	r3, r2
 800d4a0:	3308      	adds	r3, #8
 800d4a2:	4a23      	ldr	r2, [pc, #140]	; (800d530 <mem_malloc+0x1f8>)
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d906      	bls.n	800d4b8 <mem_malloc+0x180>
 800d4aa:	4b1e      	ldr	r3, [pc, #120]	; (800d524 <mem_malloc+0x1ec>)
 800d4ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d4b0:	4921      	ldr	r1, [pc, #132]	; (800d538 <mem_malloc+0x200>)
 800d4b2:	481e      	ldr	r0, [pc, #120]	; (800d52c <mem_malloc+0x1f4>)
 800d4b4:	f00a fb6c 	bl	8017b90 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f003 0303 	and.w	r3, r3, #3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d006      	beq.n	800d4d0 <mem_malloc+0x198>
 800d4c2:	4b18      	ldr	r3, [pc, #96]	; (800d524 <mem_malloc+0x1ec>)
 800d4c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d4c8:	491c      	ldr	r1, [pc, #112]	; (800d53c <mem_malloc+0x204>)
 800d4ca:	4818      	ldr	r0, [pc, #96]	; (800d52c <mem_malloc+0x1f4>)
 800d4cc:	f00a fb60 	bl	8017b90 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	f003 0303 	and.w	r3, r3, #3
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d006      	beq.n	800d4e8 <mem_malloc+0x1b0>
 800d4da:	4b12      	ldr	r3, [pc, #72]	; (800d524 <mem_malloc+0x1ec>)
 800d4dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d4e0:	4917      	ldr	r1, [pc, #92]	; (800d540 <mem_malloc+0x208>)
 800d4e2:	4812      	ldr	r0, [pc, #72]	; (800d52c <mem_malloc+0x1f4>)
 800d4e4:	f00a fb54 	bl	8017b90 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	e011      	b.n	800d512 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d4ee:	8bfb      	ldrh	r3, [r7, #30]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7ff fc33 	bl	800cd5c <ptr_to_mem>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4fc:	8bfa      	ldrh	r2, [r7, #30]
 800d4fe:	8bbb      	ldrh	r3, [r7, #28]
 800d500:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800d504:	429a      	cmp	r2, r3
 800d506:	f4ff af41 	bcc.w	800d38c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d50a:	4804      	ldr	r0, [pc, #16]	; (800d51c <mem_malloc+0x1e4>)
 800d50c:	f00a f8ff 	bl	801770e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3720      	adds	r7, #32
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	2000eb40 	.word	0x2000eb40
 800d520:	2000eb44 	.word	0x2000eb44
 800d524:	0801b758 	.word	0x0801b758
 800d528:	0801b91c 	.word	0x0801b91c
 800d52c:	0801b7a0 	.word	0x0801b7a0
 800d530:	2000eb3c 	.word	0x2000eb3c
 800d534:	0801b930 	.word	0x0801b930
 800d538:	0801b94c 	.word	0x0801b94c
 800d53c:	0801b97c 	.word	0x0801b97c
 800d540:	0801b9ac 	.word	0x0801b9ac

0800d544 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	2200      	movs	r2, #0
 800d552:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	3303      	adds	r3, #3
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d560:	2300      	movs	r3, #0
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	e011      	b.n	800d58a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	461a      	mov	r2, r3
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	4413      	add	r3, r2
 800d582:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3301      	adds	r3, #1
 800d588:	60fb      	str	r3, [r7, #12]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	885b      	ldrh	r3, [r3, #2]
 800d58e:	461a      	mov	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	4293      	cmp	r3, r2
 800d594:	dbe7      	blt.n	800d566 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d596:	bf00      	nop
 800d598:	bf00      	nop
 800d59a:	3714      	adds	r7, #20
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	80fb      	strh	r3, [r7, #6]
 800d5ae:	e009      	b.n	800d5c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d5b0:	88fb      	ldrh	r3, [r7, #6]
 800d5b2:	4a08      	ldr	r2, [pc, #32]	; (800d5d4 <memp_init+0x30>)
 800d5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7ff ffc3 	bl	800d544 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d5be:	88fb      	ldrh	r3, [r7, #6]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	80fb      	strh	r3, [r7, #6]
 800d5c4:	88fb      	ldrh	r3, [r7, #6]
 800d5c6:	2b0b      	cmp	r3, #11
 800d5c8:	d9f2      	bls.n	800d5b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d5ca:	bf00      	nop
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0801df00 	.word	0x0801df00

0800d5d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d5e0:	f00a f8c2 	bl	8017768 <sys_arch_protect>
 800d5e4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d015      	beq.n	800d620 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	6812      	ldr	r2, [r2, #0]
 800d5fc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f003 0303 	and.w	r3, r3, #3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d006      	beq.n	800d616 <do_memp_malloc_pool+0x3e>
 800d608:	4b09      	ldr	r3, [pc, #36]	; (800d630 <do_memp_malloc_pool+0x58>)
 800d60a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d60e:	4909      	ldr	r1, [pc, #36]	; (800d634 <do_memp_malloc_pool+0x5c>)
 800d610:	4809      	ldr	r0, [pc, #36]	; (800d638 <do_memp_malloc_pool+0x60>)
 800d612:	f00a fabd 	bl	8017b90 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f00a f8b4 	bl	8017784 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	e003      	b.n	800d628 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f00a f8af 	bl	8017784 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	0801b9d0 	.word	0x0801b9d0
 800d634:	0801ba00 	.word	0x0801ba00
 800d638:	0801ba24 	.word	0x0801ba24

0800d63c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d106      	bne.n	800d658 <memp_malloc_pool+0x1c>
 800d64a:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <memp_malloc_pool+0x38>)
 800d64c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d650:	4909      	ldr	r1, [pc, #36]	; (800d678 <memp_malloc_pool+0x3c>)
 800d652:	480a      	ldr	r0, [pc, #40]	; (800d67c <memp_malloc_pool+0x40>)
 800d654:	f00a fa9c 	bl	8017b90 <iprintf>
  if (desc == NULL) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <memp_malloc_pool+0x26>
    return NULL;
 800d65e:	2300      	movs	r3, #0
 800d660:	e003      	b.n	800d66a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7ff ffb8 	bl	800d5d8 <do_memp_malloc_pool>
 800d668:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	0801b9d0 	.word	0x0801b9d0
 800d678:	0801ba4c 	.word	0x0801ba4c
 800d67c:	0801ba24 	.word	0x0801ba24

0800d680 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	2b0b      	cmp	r3, #11
 800d68e:	d908      	bls.n	800d6a2 <memp_malloc+0x22>
 800d690:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <memp_malloc+0x3c>)
 800d692:	f240 1257 	movw	r2, #343	; 0x157
 800d696:	490a      	ldr	r1, [pc, #40]	; (800d6c0 <memp_malloc+0x40>)
 800d698:	480a      	ldr	r0, [pc, #40]	; (800d6c4 <memp_malloc+0x44>)
 800d69a:	f00a fa79 	bl	8017b90 <iprintf>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e008      	b.n	800d6b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	4a08      	ldr	r2, [pc, #32]	; (800d6c8 <memp_malloc+0x48>)
 800d6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff ff94 	bl	800d5d8 <do_memp_malloc_pool>
 800d6b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	0801b9d0 	.word	0x0801b9d0
 800d6c0:	0801ba60 	.word	0x0801ba60
 800d6c4:	0801ba24 	.word	0x0801ba24
 800d6c8:	0801df00 	.word	0x0801df00

0800d6cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	f003 0303 	and.w	r3, r3, #3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d006      	beq.n	800d6ee <do_memp_free_pool+0x22>
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <do_memp_free_pool+0x4c>)
 800d6e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d6e6:	490d      	ldr	r1, [pc, #52]	; (800d71c <do_memp_free_pool+0x50>)
 800d6e8:	480d      	ldr	r0, [pc, #52]	; (800d720 <do_memp_free_pool+0x54>)
 800d6ea:	f00a fa51 	bl	8017b90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d6f2:	f00a f839 	bl	8017768 <sys_arch_protect>
 800d6f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d70a:	68b8      	ldr	r0, [r7, #8]
 800d70c:	f00a f83a 	bl	8017784 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d710:	bf00      	nop
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	0801b9d0 	.word	0x0801b9d0
 800d71c:	0801ba80 	.word	0x0801ba80
 800d720:	0801ba24 	.word	0x0801ba24

0800d724 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d106      	bne.n	800d742 <memp_free_pool+0x1e>
 800d734:	4b0a      	ldr	r3, [pc, #40]	; (800d760 <memp_free_pool+0x3c>)
 800d736:	f240 1295 	movw	r2, #405	; 0x195
 800d73a:	490a      	ldr	r1, [pc, #40]	; (800d764 <memp_free_pool+0x40>)
 800d73c:	480a      	ldr	r0, [pc, #40]	; (800d768 <memp_free_pool+0x44>)
 800d73e:	f00a fa27 	bl	8017b90 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d007      	beq.n	800d758 <memp_free_pool+0x34>
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d004      	beq.n	800d758 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff ffbb 	bl	800d6cc <do_memp_free_pool>
 800d756:	e000      	b.n	800d75a <memp_free_pool+0x36>
    return;
 800d758:	bf00      	nop
}
 800d75a:	3708      	adds	r7, #8
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	0801b9d0 	.word	0x0801b9d0
 800d764:	0801ba4c 	.word	0x0801ba4c
 800d768:	0801ba24 	.word	0x0801ba24

0800d76c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	6039      	str	r1, [r7, #0]
 800d776:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	2b0b      	cmp	r3, #11
 800d77c:	d907      	bls.n	800d78e <memp_free+0x22>
 800d77e:	4b0c      	ldr	r3, [pc, #48]	; (800d7b0 <memp_free+0x44>)
 800d780:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d784:	490b      	ldr	r1, [pc, #44]	; (800d7b4 <memp_free+0x48>)
 800d786:	480c      	ldr	r0, [pc, #48]	; (800d7b8 <memp_free+0x4c>)
 800d788:	f00a fa02 	bl	8017b90 <iprintf>
 800d78c:	e00c      	b.n	800d7a8 <memp_free+0x3c>

  if (mem == NULL) {
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d008      	beq.n	800d7a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d794:	79fb      	ldrb	r3, [r7, #7]
 800d796:	4a09      	ldr	r2, [pc, #36]	; (800d7bc <memp_free+0x50>)
 800d798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d79c:	6839      	ldr	r1, [r7, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff ff94 	bl	800d6cc <do_memp_free_pool>
 800d7a4:	e000      	b.n	800d7a8 <memp_free+0x3c>
    return;
 800d7a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0801b9d0 	.word	0x0801b9d0
 800d7b4:	0801baa0 	.word	0x0801baa0
 800d7b8:	0801ba24 	.word	0x0801ba24
 800d7bc:	0801df00 	.word	0x0801df00

0800d7c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d7c4:	bf00      	nop
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
	...

0800d7d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
 800d7dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d108      	bne.n	800d7f6 <netif_add+0x26>
 800d7e4:	4b57      	ldr	r3, [pc, #348]	; (800d944 <netif_add+0x174>)
 800d7e6:	f240 1227 	movw	r2, #295	; 0x127
 800d7ea:	4957      	ldr	r1, [pc, #348]	; (800d948 <netif_add+0x178>)
 800d7ec:	4857      	ldr	r0, [pc, #348]	; (800d94c <netif_add+0x17c>)
 800d7ee:	f00a f9cf 	bl	8017b90 <iprintf>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e0a2      	b.n	800d93c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d108      	bne.n	800d80e <netif_add+0x3e>
 800d7fc:	4b51      	ldr	r3, [pc, #324]	; (800d944 <netif_add+0x174>)
 800d7fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d802:	4953      	ldr	r1, [pc, #332]	; (800d950 <netif_add+0x180>)
 800d804:	4851      	ldr	r0, [pc, #324]	; (800d94c <netif_add+0x17c>)
 800d806:	f00a f9c3 	bl	8017b90 <iprintf>
 800d80a:	2300      	movs	r3, #0
 800d80c:	e096      	b.n	800d93c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d814:	4b4f      	ldr	r3, [pc, #316]	; (800d954 <netif_add+0x184>)
 800d816:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d81e:	4b4d      	ldr	r3, [pc, #308]	; (800d954 <netif_add+0x184>)
 800d820:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d101      	bne.n	800d82c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d828:	4b4a      	ldr	r3, [pc, #296]	; (800d954 <netif_add+0x184>)
 800d82a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	4a45      	ldr	r2, [pc, #276]	; (800d958 <netif_add+0x188>)
 800d842:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6a3a      	ldr	r2, [r7, #32]
 800d85c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d85e:	4b3f      	ldr	r3, [pc, #252]	; (800d95c <netif_add+0x18c>)
 800d860:	781a      	ldrb	r2, [r3, #0]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	68b9      	ldr	r1, [r7, #8]
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f90f 	bl	800da98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	4798      	blx	r3
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <netif_add+0xba>
    return NULL;
 800d886:	2300      	movs	r3, #0
 800d888:	e058      	b.n	800d93c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d890:	2bff      	cmp	r3, #255	; 0xff
 800d892:	d103      	bne.n	800d89c <netif_add+0xcc>
        netif->num = 0;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d8a0:	4b2f      	ldr	r3, [pc, #188]	; (800d960 <netif_add+0x190>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	e02b      	b.n	800d900 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d106      	bne.n	800d8be <netif_add+0xee>
 800d8b0:	4b24      	ldr	r3, [pc, #144]	; (800d944 <netif_add+0x174>)
 800d8b2:	f240 128b 	movw	r2, #395	; 0x18b
 800d8b6:	492b      	ldr	r1, [pc, #172]	; (800d964 <netif_add+0x194>)
 800d8b8:	4824      	ldr	r0, [pc, #144]	; (800d94c <netif_add+0x17c>)
 800d8ba:	f00a f969 	bl	8017b90 <iprintf>
        num_netifs++;
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	2bff      	cmp	r3, #255	; 0xff
 800d8c8:	dd06      	ble.n	800d8d8 <netif_add+0x108>
 800d8ca:	4b1e      	ldr	r3, [pc, #120]	; (800d944 <netif_add+0x174>)
 800d8cc:	f240 128d 	movw	r2, #397	; 0x18d
 800d8d0:	4925      	ldr	r1, [pc, #148]	; (800d968 <netif_add+0x198>)
 800d8d2:	481e      	ldr	r0, [pc, #120]	; (800d94c <netif_add+0x17c>)
 800d8d4:	f00a f95c 	bl	8017b90 <iprintf>
        if (netif2->num == netif->num) {
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d108      	bne.n	800d8fa <netif_add+0x12a>
          netif->num++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d8f8:	e005      	b.n	800d906 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	617b      	str	r3, [r7, #20]
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1d0      	bne.n	800d8a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1be      	bne.n	800d88a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d912:	2bfe      	cmp	r3, #254	; 0xfe
 800d914:	d103      	bne.n	800d91e <netif_add+0x14e>
    netif_num = 0;
 800d916:	4b11      	ldr	r3, [pc, #68]	; (800d95c <netif_add+0x18c>)
 800d918:	2200      	movs	r2, #0
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	e006      	b.n	800d92c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d924:	3301      	adds	r3, #1
 800d926:	b2da      	uxtb	r2, r3
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <netif_add+0x18c>)
 800d92a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d92c:	4b0c      	ldr	r3, [pc, #48]	; (800d960 <netif_add+0x190>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d934:	4a0a      	ldr	r2, [pc, #40]	; (800d960 <netif_add+0x190>)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d93a:	68fb      	ldr	r3, [r7, #12]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	0801babc 	.word	0x0801babc
 800d948:	0801bb50 	.word	0x0801bb50
 800d94c:	0801bb0c 	.word	0x0801bb0c
 800d950:	0801bb6c 	.word	0x0801bb6c
 800d954:	0801df70 	.word	0x0801df70
 800d958:	0800dd73 	.word	0x0800dd73
 800d95c:	20011b94 	.word	0x20011b94
 800d960:	20011b8c 	.word	0x20011b8c
 800d964:	0801bb90 	.word	0x0801bb90
 800d968:	0801bba4 	.word	0x0801bba4

0800d96c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d976:	6839      	ldr	r1, [r7, #0]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f002 fe99 	bl	80106b0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d97e:	bf00      	nop
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
	...

0800d988 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <netif_do_set_ipaddr+0x20>
 800d99a:	4b1d      	ldr	r3, [pc, #116]	; (800da10 <netif_do_set_ipaddr+0x88>)
 800d99c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d9a0:	491c      	ldr	r1, [pc, #112]	; (800da14 <netif_do_set_ipaddr+0x8c>)
 800d9a2:	481d      	ldr	r0, [pc, #116]	; (800da18 <netif_do_set_ipaddr+0x90>)
 800d9a4:	f00a f8f4 	bl	8017b90 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d106      	bne.n	800d9bc <netif_do_set_ipaddr+0x34>
 800d9ae:	4b18      	ldr	r3, [pc, #96]	; (800da10 <netif_do_set_ipaddr+0x88>)
 800d9b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d9b4:	4917      	ldr	r1, [pc, #92]	; (800da14 <netif_do_set_ipaddr+0x8c>)
 800d9b6:	4818      	ldr	r0, [pc, #96]	; (800da18 <netif_do_set_ipaddr+0x90>)
 800d9b8:	f00a f8ea 	bl	8017b90 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d01c      	beq.n	800da04 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d9da:	f107 0314 	add.w	r3, r7, #20
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ffc3 	bl	800d96c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <netif_do_set_ipaddr+0x6a>
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	e000      	b.n	800d9f4 <netif_do_set_ipaddr+0x6c>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 f8d2 	bl	800dba4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800da00:	2301      	movs	r3, #1
 800da02:	e000      	b.n	800da06 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	0801babc 	.word	0x0801babc
 800da14:	0801bbd4 	.word	0x0801bbd4
 800da18:	0801bb0c 	.word	0x0801bb0c

0800da1c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b085      	sub	sp, #20
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3308      	adds	r3, #8
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	429a      	cmp	r2, r3
 800da34:	d00a      	beq.n	800da4c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <netif_do_set_netmask+0x26>
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	e000      	b.n	800da44 <netif_do_set_netmask+0x28>
 800da42:	2300      	movs	r3, #0
 800da44:	68fa      	ldr	r2, [r7, #12]
 800da46:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800da48:	2301      	movs	r3, #1
 800da4a:	e000      	b.n	800da4e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3714      	adds	r7, #20
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800da5a:	b480      	push	{r7}
 800da5c:	b085      	sub	sp, #20
 800da5e:	af00      	add	r7, sp, #0
 800da60:	60f8      	str	r0, [r7, #12]
 800da62:	60b9      	str	r1, [r7, #8]
 800da64:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	330c      	adds	r3, #12
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	429a      	cmp	r2, r3
 800da72:	d00a      	beq.n	800da8a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <netif_do_set_gw+0x26>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	e000      	b.n	800da82 <netif_do_set_gw+0x28>
 800da80:	2300      	movs	r3, #0
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800da86:	2301      	movs	r3, #1
 800da88:	e000      	b.n	800da8c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b088      	sub	sp, #32
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]
 800daa4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800daaa:	2300      	movs	r3, #0
 800daac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d101      	bne.n	800dab8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dab4:	4b1c      	ldr	r3, [pc, #112]	; (800db28 <netif_set_addr+0x90>)
 800dab6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dabe:	4b1a      	ldr	r3, [pc, #104]	; (800db28 <netif_set_addr+0x90>)
 800dac0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d101      	bne.n	800dacc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dac8:	4b17      	ldr	r3, [pc, #92]	; (800db28 <netif_set_addr+0x90>)
 800daca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <netif_set_addr+0x42>
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <netif_set_addr+0x46>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <netif_set_addr+0x48>
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d006      	beq.n	800daf6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dae8:	f107 0310 	add.w	r3, r7, #16
 800daec:	461a      	mov	r2, r3
 800daee:	68b9      	ldr	r1, [r7, #8]
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f7ff ff49 	bl	800d988 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800daf6:	69fa      	ldr	r2, [r7, #28]
 800daf8:	6879      	ldr	r1, [r7, #4]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f7ff ff8e 	bl	800da1c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f7ff ffa8 	bl	800da5a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d106      	bne.n	800db1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db10:	f107 0310 	add.w	r3, r7, #16
 800db14:	461a      	mov	r2, r3
 800db16:	68b9      	ldr	r1, [r7, #8]
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f7ff ff35 	bl	800d988 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800db1e:	bf00      	nop
 800db20:	3720      	adds	r7, #32
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	0801df70 	.word	0x0801df70

0800db2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800db34:	4a04      	ldr	r2, [pc, #16]	; (800db48 <netif_set_default+0x1c>)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800db3a:	bf00      	nop
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	20011b90 	.word	0x20011b90

0800db4c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d107      	bne.n	800db6a <netif_set_up+0x1e>
 800db5a:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <netif_set_up+0x4c>)
 800db5c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800db60:	490e      	ldr	r1, [pc, #56]	; (800db9c <netif_set_up+0x50>)
 800db62:	480f      	ldr	r0, [pc, #60]	; (800dba0 <netif_set_up+0x54>)
 800db64:	f00a f814 	bl	8017b90 <iprintf>
 800db68:	e013      	b.n	800db92 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db70:	f003 0301 	and.w	r3, r3, #1
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10c      	bne.n	800db92 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db7e:	f043 0301 	orr.w	r3, r3, #1
 800db82:	b2da      	uxtb	r2, r3
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800db8a:	2103      	movs	r1, #3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 f809 	bl	800dba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	0801babc 	.word	0x0801babc
 800db9c:	0801bc44 	.word	0x0801bc44
 800dba0:	0801bb0c 	.word	0x0801bb0c

0800dba4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	460b      	mov	r3, r1
 800dbae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d106      	bne.n	800dbc4 <netif_issue_reports+0x20>
 800dbb6:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <netif_issue_reports+0x74>)
 800dbb8:	f240 326d 	movw	r2, #877	; 0x36d
 800dbbc:	4917      	ldr	r1, [pc, #92]	; (800dc1c <netif_issue_reports+0x78>)
 800dbbe:	4818      	ldr	r0, [pc, #96]	; (800dc20 <netif_issue_reports+0x7c>)
 800dbc0:	f009 ffe6 	bl	8017b90 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbca:	f003 0304 	and.w	r3, r3, #4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01e      	beq.n	800dc10 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d017      	beq.n	800dc10 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d013      	beq.n	800dc12 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	3304      	adds	r3, #4
 800dbee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbfa:	f003 0308 	and.w	r3, r3, #8
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d007      	beq.n	800dc12 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f008 f893 	bl	8015d34 <etharp_request>
 800dc0e:	e000      	b.n	800dc12 <netif_issue_reports+0x6e>
    return;
 800dc10:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	0801babc 	.word	0x0801babc
 800dc1c:	0801bc60 	.word	0x0801bc60
 800dc20:	0801bb0c 	.word	0x0801bb0c

0800dc24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d107      	bne.n	800dc42 <netif_set_down+0x1e>
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <netif_set_down+0x58>)
 800dc34:	f240 329b 	movw	r2, #923	; 0x39b
 800dc38:	4911      	ldr	r1, [pc, #68]	; (800dc80 <netif_set_down+0x5c>)
 800dc3a:	4812      	ldr	r0, [pc, #72]	; (800dc84 <netif_set_down+0x60>)
 800dc3c:	f009 ffa8 	bl	8017b90 <iprintf>
 800dc40:	e019      	b.n	800dc76 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d012      	beq.n	800dc76 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc56:	f023 0301 	bic.w	r3, r3, #1
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc68:	f003 0308 	and.w	r3, r3, #8
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f007 fc1d 	bl	80154b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	0801babc 	.word	0x0801babc
 800dc80:	0801bc84 	.word	0x0801bc84
 800dc84:	0801bb0c 	.word	0x0801bb0c

0800dc88 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d107      	bne.n	800dca6 <netif_set_link_up+0x1e>
 800dc96:	4b13      	ldr	r3, [pc, #76]	; (800dce4 <netif_set_link_up+0x5c>)
 800dc98:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dc9c:	4912      	ldr	r1, [pc, #72]	; (800dce8 <netif_set_link_up+0x60>)
 800dc9e:	4813      	ldr	r0, [pc, #76]	; (800dcec <netif_set_link_up+0x64>)
 800dca0:	f009 ff76 	bl	8017b90 <iprintf>
 800dca4:	e01b      	b.n	800dcde <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d114      	bne.n	800dcde <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcba:	f043 0304 	orr.w	r3, r3, #4
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dcc6:	2103      	movs	r1, #3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f7ff ff6b 	bl	800dba4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	69db      	ldr	r3, [r3, #28]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d003      	beq.n	800dcde <netif_set_link_up+0x56>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	0801babc 	.word	0x0801babc
 800dce8:	0801bca4 	.word	0x0801bca4
 800dcec:	0801bb0c 	.word	0x0801bb0c

0800dcf0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d107      	bne.n	800dd0e <netif_set_link_down+0x1e>
 800dcfe:	4b11      	ldr	r3, [pc, #68]	; (800dd44 <netif_set_link_down+0x54>)
 800dd00:	f240 4206 	movw	r2, #1030	; 0x406
 800dd04:	4910      	ldr	r1, [pc, #64]	; (800dd48 <netif_set_link_down+0x58>)
 800dd06:	4811      	ldr	r0, [pc, #68]	; (800dd4c <netif_set_link_down+0x5c>)
 800dd08:	f009 ff42 	bl	8017b90 <iprintf>
 800dd0c:	e017      	b.n	800dd3e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd14:	f003 0304 	and.w	r3, r3, #4
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d010      	beq.n	800dd3e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd22:	f023 0304 	bic.w	r3, r3, #4
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d003      	beq.n	800dd3e <netif_set_link_down+0x4e>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	69db      	ldr	r3, [r3, #28]
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	0801babc 	.word	0x0801babc
 800dd48:	0801bcc8 	.word	0x0801bcc8
 800dd4c:	0801bb0c 	.word	0x0801bb0c

0800dd50 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	61da      	str	r2, [r3, #28]
  }
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b085      	sub	sp, #20
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	60f8      	str	r0, [r7, #12]
 800dd7a:	60b9      	str	r1, [r7, #8]
 800dd7c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dd7e:	f06f 030b 	mvn.w	r3, #11
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3714      	adds	r7, #20
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
	...

0800dd90 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	4603      	mov	r3, r0
 800dd98:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dd9a:	79fb      	ldrb	r3, [r7, #7]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d013      	beq.n	800ddc8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dda0:	4b0d      	ldr	r3, [pc, #52]	; (800ddd8 <netif_get_by_index+0x48>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
 800dda6:	e00c      	b.n	800ddc2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddae:	3301      	adds	r3, #1
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	79fa      	ldrb	r2, [r7, #7]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d101      	bne.n	800ddbc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	e006      	b.n	800ddca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1ef      	bne.n	800dda8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3714      	adds	r7, #20
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	20011b8c 	.word	0x20011b8c

0800dddc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800dde2:	f009 fcc1 	bl	8017768 <sys_arch_protect>
 800dde6:	6038      	str	r0, [r7, #0]
 800dde8:	4b0d      	ldr	r3, [pc, #52]	; (800de20 <pbuf_free_ooseq+0x44>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	701a      	strb	r2, [r3, #0]
 800ddee:	6838      	ldr	r0, [r7, #0]
 800ddf0:	f009 fcc8 	bl	8017784 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ddf4:	4b0b      	ldr	r3, [pc, #44]	; (800de24 <pbuf_free_ooseq+0x48>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	607b      	str	r3, [r7, #4]
 800ddfa:	e00a      	b.n	800de12 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f002 fc91 	bl	801072c <tcp_free_ooseq>
      return;
 800de0a:	e005      	b.n	800de18 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	607b      	str	r3, [r7, #4]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1f1      	bne.n	800ddfc <pbuf_free_ooseq+0x20>
    }
  }
}
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20011b95 	.word	0x20011b95
 800de24:	20011ba4 	.word	0x20011ba4

0800de28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800de30:	f7ff ffd4 	bl	800dddc <pbuf_free_ooseq>
}
 800de34:	bf00      	nop
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800de42:	f009 fc91 	bl	8017768 <sys_arch_protect>
 800de46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800de48:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <pbuf_pool_is_empty+0x4c>)
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800de4e:	4b0e      	ldr	r3, [pc, #56]	; (800de88 <pbuf_pool_is_empty+0x4c>)
 800de50:	2201      	movs	r2, #1
 800de52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f009 fc95 	bl	8017784 <sys_arch_unprotect>

  if (!queued) {
 800de5a:	78fb      	ldrb	r3, [r7, #3]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10f      	bne.n	800de80 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800de60:	2100      	movs	r1, #0
 800de62:	480a      	ldr	r0, [pc, #40]	; (800de8c <pbuf_pool_is_empty+0x50>)
 800de64:	f7fe fd7c 	bl	800c960 <tcpip_try_callback>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d008      	beq.n	800de80 <pbuf_pool_is_empty+0x44>
 800de6e:	f009 fc7b 	bl	8017768 <sys_arch_protect>
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	4b04      	ldr	r3, [pc, #16]	; (800de88 <pbuf_pool_is_empty+0x4c>)
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f009 fc82 	bl	8017784 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	20011b95 	.word	0x20011b95
 800de8c:	0800de29 	.word	0x0800de29

0800de90 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4611      	mov	r1, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	460b      	mov	r3, r1
 800dea0:	80fb      	strh	r3, [r7, #6]
 800dea2:	4613      	mov	r3, r2
 800dea4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	88ba      	ldrh	r2, [r7, #4]
 800debc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800debe:	8b3b      	ldrh	r3, [r7, #24]
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	7f3a      	ldrb	r2, [r7, #28]
 800deca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2201      	movs	r2, #1
 800ded0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	73da      	strb	r2, [r3, #15]
}
 800ded8:	bf00      	nop
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08c      	sub	sp, #48	; 0x30
 800dee8:	af02      	add	r7, sp, #8
 800deea:	4603      	mov	r3, r0
 800deec:	71fb      	strb	r3, [r7, #7]
 800deee:	460b      	mov	r3, r1
 800def0:	80bb      	strh	r3, [r7, #4]
 800def2:	4613      	mov	r3, r2
 800def4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800defa:	887b      	ldrh	r3, [r7, #2]
 800defc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800df00:	d07f      	beq.n	800e002 <pbuf_alloc+0x11e>
 800df02:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800df06:	f300 80c8 	bgt.w	800e09a <pbuf_alloc+0x1b6>
 800df0a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800df0e:	d010      	beq.n	800df32 <pbuf_alloc+0x4e>
 800df10:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800df14:	f300 80c1 	bgt.w	800e09a <pbuf_alloc+0x1b6>
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d002      	beq.n	800df22 <pbuf_alloc+0x3e>
 800df1c:	2b41      	cmp	r3, #65	; 0x41
 800df1e:	f040 80bc 	bne.w	800e09a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800df22:	887a      	ldrh	r2, [r7, #2]
 800df24:	88bb      	ldrh	r3, [r7, #4]
 800df26:	4619      	mov	r1, r3
 800df28:	2000      	movs	r0, #0
 800df2a:	f000 f8d1 	bl	800e0d0 <pbuf_alloc_reference>
 800df2e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800df30:	e0bd      	b.n	800e0ae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800df32:	2300      	movs	r3, #0
 800df34:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800df3a:	88bb      	ldrh	r3, [r7, #4]
 800df3c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800df3e:	200b      	movs	r0, #11
 800df40:	f7ff fb9e 	bl	800d680 <memp_malloc>
 800df44:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d109      	bne.n	800df60 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800df4c:	f7ff ff76 	bl	800de3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800df50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df52:	2b00      	cmp	r3, #0
 800df54:	d002      	beq.n	800df5c <pbuf_alloc+0x78>
            pbuf_free(p);
 800df56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df58:	f000 faa8 	bl	800e4ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	e0a7      	b.n	800e0b0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800df60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df62:	3303      	adds	r3, #3
 800df64:	b29b      	uxth	r3, r3
 800df66:	f023 0303 	bic.w	r3, r3, #3
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800df70:	b29b      	uxth	r3, r3
 800df72:	8b7a      	ldrh	r2, [r7, #26]
 800df74:	4293      	cmp	r3, r2
 800df76:	bf28      	it	cs
 800df78:	4613      	movcs	r3, r2
 800df7a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800df7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df7e:	3310      	adds	r3, #16
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	4413      	add	r3, r2
 800df84:	3303      	adds	r3, #3
 800df86:	f023 0303 	bic.w	r3, r3, #3
 800df8a:	4618      	mov	r0, r3
 800df8c:	89f9      	ldrh	r1, [r7, #14]
 800df8e:	8b7a      	ldrh	r2, [r7, #26]
 800df90:	2300      	movs	r3, #0
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	887b      	ldrh	r3, [r7, #2]
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	460b      	mov	r3, r1
 800df9a:	4601      	mov	r1, r0
 800df9c:	6938      	ldr	r0, [r7, #16]
 800df9e:	f7ff ff77 	bl	800de90 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f003 0303 	and.w	r3, r3, #3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d006      	beq.n	800dfbc <pbuf_alloc+0xd8>
 800dfae:	4b42      	ldr	r3, [pc, #264]	; (800e0b8 <pbuf_alloc+0x1d4>)
 800dfb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfb4:	4941      	ldr	r1, [pc, #260]	; (800e0bc <pbuf_alloc+0x1d8>)
 800dfb6:	4842      	ldr	r0, [pc, #264]	; (800e0c0 <pbuf_alloc+0x1dc>)
 800dfb8:	f009 fdea 	bl	8017b90 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dfbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfbe:	3303      	adds	r3, #3
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dfc8:	d106      	bne.n	800dfd8 <pbuf_alloc+0xf4>
 800dfca:	4b3b      	ldr	r3, [pc, #236]	; (800e0b8 <pbuf_alloc+0x1d4>)
 800dfcc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800dfd0:	493c      	ldr	r1, [pc, #240]	; (800e0c4 <pbuf_alloc+0x1e0>)
 800dfd2:	483b      	ldr	r0, [pc, #236]	; (800e0c0 <pbuf_alloc+0x1dc>)
 800dfd4:	f009 fddc 	bl	8017b90 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d102      	bne.n	800dfe4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	627b      	str	r3, [r7, #36]	; 0x24
 800dfe2:	e002      	b.n	800dfea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	693a      	ldr	r2, [r7, #16]
 800dfe8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dfee:	8b7a      	ldrh	r2, [r7, #26]
 800dff0:	89fb      	ldrh	r3, [r7, #14]
 800dff2:	1ad3      	subs	r3, r2, r3
 800dff4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dffa:	8b7b      	ldrh	r3, [r7, #26]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d19e      	bne.n	800df3e <pbuf_alloc+0x5a>
      break;
 800e000:	e055      	b.n	800e0ae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e004:	3303      	adds	r3, #3
 800e006:	b29b      	uxth	r3, r3
 800e008:	f023 0303 	bic.w	r3, r3, #3
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	88bb      	ldrh	r3, [r7, #4]
 800e010:	3303      	adds	r3, #3
 800e012:	b29b      	uxth	r3, r3
 800e014:	f023 0303 	bic.w	r3, r3, #3
 800e018:	b29b      	uxth	r3, r3
 800e01a:	4413      	add	r3, r2
 800e01c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e01e:	8b3b      	ldrh	r3, [r7, #24]
 800e020:	3310      	adds	r3, #16
 800e022:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e024:	8b3a      	ldrh	r2, [r7, #24]
 800e026:	88bb      	ldrh	r3, [r7, #4]
 800e028:	3303      	adds	r3, #3
 800e02a:	f023 0303 	bic.w	r3, r3, #3
 800e02e:	429a      	cmp	r2, r3
 800e030:	d306      	bcc.n	800e040 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e032:	8afa      	ldrh	r2, [r7, #22]
 800e034:	88bb      	ldrh	r3, [r7, #4]
 800e036:	3303      	adds	r3, #3
 800e038:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d201      	bcs.n	800e044 <pbuf_alloc+0x160>
        return NULL;
 800e040:	2300      	movs	r3, #0
 800e042:	e035      	b.n	800e0b0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e044:	8afb      	ldrh	r3, [r7, #22]
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff f976 	bl	800d338 <mem_malloc>
 800e04c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <pbuf_alloc+0x174>
        return NULL;
 800e054:	2300      	movs	r3, #0
 800e056:	e02b      	b.n	800e0b0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e05a:	3310      	adds	r3, #16
 800e05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e05e:	4413      	add	r3, r2
 800e060:	3303      	adds	r3, #3
 800e062:	f023 0303 	bic.w	r3, r3, #3
 800e066:	4618      	mov	r0, r3
 800e068:	88b9      	ldrh	r1, [r7, #4]
 800e06a:	88ba      	ldrh	r2, [r7, #4]
 800e06c:	2300      	movs	r3, #0
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	887b      	ldrh	r3, [r7, #2]
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	460b      	mov	r3, r1
 800e076:	4601      	mov	r1, r0
 800e078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e07a:	f7ff ff09 	bl	800de90 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	f003 0303 	and.w	r3, r3, #3
 800e086:	2b00      	cmp	r3, #0
 800e088:	d010      	beq.n	800e0ac <pbuf_alloc+0x1c8>
 800e08a:	4b0b      	ldr	r3, [pc, #44]	; (800e0b8 <pbuf_alloc+0x1d4>)
 800e08c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e090:	490d      	ldr	r1, [pc, #52]	; (800e0c8 <pbuf_alloc+0x1e4>)
 800e092:	480b      	ldr	r0, [pc, #44]	; (800e0c0 <pbuf_alloc+0x1dc>)
 800e094:	f009 fd7c 	bl	8017b90 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e098:	e008      	b.n	800e0ac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e09a:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <pbuf_alloc+0x1d4>)
 800e09c:	f240 1227 	movw	r2, #295	; 0x127
 800e0a0:	490a      	ldr	r1, [pc, #40]	; (800e0cc <pbuf_alloc+0x1e8>)
 800e0a2:	4807      	ldr	r0, [pc, #28]	; (800e0c0 <pbuf_alloc+0x1dc>)
 800e0a4:	f009 fd74 	bl	8017b90 <iprintf>
      return NULL;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e001      	b.n	800e0b0 <pbuf_alloc+0x1cc>
      break;
 800e0ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3728      	adds	r7, #40	; 0x28
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	0801bcec 	.word	0x0801bcec
 800e0bc:	0801bd1c 	.word	0x0801bd1c
 800e0c0:	0801bd4c 	.word	0x0801bd4c
 800e0c4:	0801bd74 	.word	0x0801bd74
 800e0c8:	0801bda8 	.word	0x0801bda8
 800e0cc:	0801bdd4 	.word	0x0801bdd4

0800e0d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	807b      	strh	r3, [r7, #2]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e0e0:	883b      	ldrh	r3, [r7, #0]
 800e0e2:	2b41      	cmp	r3, #65	; 0x41
 800e0e4:	d009      	beq.n	800e0fa <pbuf_alloc_reference+0x2a>
 800e0e6:	883b      	ldrh	r3, [r7, #0]
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d006      	beq.n	800e0fa <pbuf_alloc_reference+0x2a>
 800e0ec:	4b0f      	ldr	r3, [pc, #60]	; (800e12c <pbuf_alloc_reference+0x5c>)
 800e0ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e0f2:	490f      	ldr	r1, [pc, #60]	; (800e130 <pbuf_alloc_reference+0x60>)
 800e0f4:	480f      	ldr	r0, [pc, #60]	; (800e134 <pbuf_alloc_reference+0x64>)
 800e0f6:	f009 fd4b 	bl	8017b90 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e0fa:	200a      	movs	r0, #10
 800e0fc:	f7ff fac0 	bl	800d680 <memp_malloc>
 800e100:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e108:	2300      	movs	r3, #0
 800e10a:	e00b      	b.n	800e124 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e10c:	8879      	ldrh	r1, [r7, #2]
 800e10e:	887a      	ldrh	r2, [r7, #2]
 800e110:	2300      	movs	r3, #0
 800e112:	9301      	str	r3, [sp, #4]
 800e114:	883b      	ldrh	r3, [r7, #0]
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	460b      	mov	r3, r1
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f7ff feb7 	bl	800de90 <pbuf_init_alloced_pbuf>
  return p;
 800e122:	68fb      	ldr	r3, [r7, #12]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	0801bcec 	.word	0x0801bcec
 800e130:	0801bdf0 	.word	0x0801bdf0
 800e134:	0801bd4c 	.word	0x0801bd4c

0800e138 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	607b      	str	r3, [r7, #4]
 800e140:	4603      	mov	r3, r0
 800e142:	73fb      	strb	r3, [r7, #15]
 800e144:	460b      	mov	r3, r1
 800e146:	81bb      	strh	r3, [r7, #12]
 800e148:	4613      	mov	r3, r2
 800e14a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e14c:	7bfb      	ldrb	r3, [r7, #15]
 800e14e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e150:	8a7b      	ldrh	r3, [r7, #18]
 800e152:	3303      	adds	r3, #3
 800e154:	f023 0203 	bic.w	r2, r3, #3
 800e158:	89bb      	ldrh	r3, [r7, #12]
 800e15a:	441a      	add	r2, r3
 800e15c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e15e:	429a      	cmp	r2, r3
 800e160:	d901      	bls.n	800e166 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	e018      	b.n	800e198 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e166:	6a3b      	ldr	r3, [r7, #32]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d007      	beq.n	800e17c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e16c:	8a7b      	ldrh	r3, [r7, #18]
 800e16e:	3303      	adds	r3, #3
 800e170:	f023 0303 	bic.w	r3, r3, #3
 800e174:	6a3a      	ldr	r2, [r7, #32]
 800e176:	4413      	add	r3, r2
 800e178:	617b      	str	r3, [r7, #20]
 800e17a:	e001      	b.n	800e180 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	89b9      	ldrh	r1, [r7, #12]
 800e184:	89ba      	ldrh	r2, [r7, #12]
 800e186:	2302      	movs	r3, #2
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	897b      	ldrh	r3, [r7, #10]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	460b      	mov	r3, r1
 800e190:	6979      	ldr	r1, [r7, #20]
 800e192:	f7ff fe7d 	bl	800de90 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e196:	687b      	ldr	r3, [r7, #4]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <pbuf_realloc+0x20>
 800e1b2:	4b3a      	ldr	r3, [pc, #232]	; (800e29c <pbuf_realloc+0xfc>)
 800e1b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e1b8:	4939      	ldr	r1, [pc, #228]	; (800e2a0 <pbuf_realloc+0x100>)
 800e1ba:	483a      	ldr	r0, [pc, #232]	; (800e2a4 <pbuf_realloc+0x104>)
 800e1bc:	f009 fce8 	bl	8017b90 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	891b      	ldrh	r3, [r3, #8]
 800e1c4:	887a      	ldrh	r2, [r7, #2]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d263      	bcs.n	800e292 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	891a      	ldrh	r2, [r3, #8]
 800e1ce:	887b      	ldrh	r3, [r7, #2]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e1d4:	887b      	ldrh	r3, [r7, #2]
 800e1d6:	817b      	strh	r3, [r7, #10]
  q = p;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e1dc:	e018      	b.n	800e210 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	895b      	ldrh	r3, [r3, #10]
 800e1e2:	897a      	ldrh	r2, [r7, #10]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	891a      	ldrh	r2, [r3, #8]
 800e1ec:	893b      	ldrh	r3, [r7, #8]
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <pbuf_realloc+0x70>
 800e202:	4b26      	ldr	r3, [pc, #152]	; (800e29c <pbuf_realloc+0xfc>)
 800e204:	f240 12af 	movw	r2, #431	; 0x1af
 800e208:	4927      	ldr	r1, [pc, #156]	; (800e2a8 <pbuf_realloc+0x108>)
 800e20a:	4826      	ldr	r0, [pc, #152]	; (800e2a4 <pbuf_realloc+0x104>)
 800e20c:	f009 fcc0 	bl	8017b90 <iprintf>
  while (rem_len > q->len) {
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	895b      	ldrh	r3, [r3, #10]
 800e214:	897a      	ldrh	r2, [r7, #10]
 800e216:	429a      	cmp	r2, r3
 800e218:	d8e1      	bhi.n	800e1de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	7b1b      	ldrb	r3, [r3, #12]
 800e21e:	f003 030f 	and.w	r3, r3, #15
 800e222:	2b00      	cmp	r3, #0
 800e224:	d121      	bne.n	800e26a <pbuf_realloc+0xca>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	897a      	ldrh	r2, [r7, #10]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d01c      	beq.n	800e26a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	7b5b      	ldrb	r3, [r3, #13]
 800e234:	f003 0302 	and.w	r3, r3, #2
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d116      	bne.n	800e26a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	b29a      	uxth	r2, r3
 800e246:	897b      	ldrh	r3, [r7, #10]
 800e248:	4413      	add	r3, r2
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	4619      	mov	r1, r3
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f7fe ff68 	bl	800d124 <mem_trim>
 800e254:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d106      	bne.n	800e26a <pbuf_realloc+0xca>
 800e25c:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <pbuf_realloc+0xfc>)
 800e25e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e262:	4912      	ldr	r1, [pc, #72]	; (800e2ac <pbuf_realloc+0x10c>)
 800e264:	480f      	ldr	r0, [pc, #60]	; (800e2a4 <pbuf_realloc+0x104>)
 800e266:	f009 fc93 	bl	8017b90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	897a      	ldrh	r2, [r7, #10]
 800e26e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	895a      	ldrh	r2, [r3, #10]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d004      	beq.n	800e28a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4618      	mov	r0, r3
 800e286:	f000 f911 	bl	800e4ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e000      	b.n	800e294 <pbuf_realloc+0xf4>
    return;
 800e292:	bf00      	nop

}
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	0801bcec 	.word	0x0801bcec
 800e2a0:	0801be04 	.word	0x0801be04
 800e2a4:	0801bd4c 	.word	0x0801bd4c
 800e2a8:	0801be1c 	.word	0x0801be1c
 800e2ac:	0801be34 	.word	0x0801be34

0800e2b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d106      	bne.n	800e2d2 <pbuf_add_header_impl+0x22>
 800e2c4:	4b2b      	ldr	r3, [pc, #172]	; (800e374 <pbuf_add_header_impl+0xc4>)
 800e2c6:	f240 12df 	movw	r2, #479	; 0x1df
 800e2ca:	492b      	ldr	r1, [pc, #172]	; (800e378 <pbuf_add_header_impl+0xc8>)
 800e2cc:	482b      	ldr	r0, [pc, #172]	; (800e37c <pbuf_add_header_impl+0xcc>)
 800e2ce:	f009 fc5f 	bl	8017b90 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <pbuf_add_header_impl+0x30>
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2de:	d301      	bcc.n	800e2e4 <pbuf_add_header_impl+0x34>
    return 1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e043      	b.n	800e36c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <pbuf_add_header_impl+0x3e>
    return 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e03e      	b.n	800e36c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	891a      	ldrh	r2, [r3, #8]
 800e2f6:	8a7b      	ldrh	r3, [r7, #18]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	8a7a      	ldrh	r2, [r7, #18]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d901      	bls.n	800e306 <pbuf_add_header_impl+0x56>
    return 1;
 800e302:	2301      	movs	r3, #1
 800e304:	e032      	b.n	800e36c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7b1b      	ldrb	r3, [r3, #12]
 800e30a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e30c:	8a3b      	ldrh	r3, [r7, #16]
 800e30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00c      	beq.n	800e330 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	685a      	ldr	r2, [r3, #4]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	425b      	negs	r3, r3
 800e31e:	4413      	add	r3, r2
 800e320:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3310      	adds	r3, #16
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d20d      	bcs.n	800e348 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e32c:	2301      	movs	r3, #1
 800e32e:	e01d      	b.n	800e36c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d006      	beq.n	800e344 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	685a      	ldr	r2, [r3, #4]
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	425b      	negs	r3, r3
 800e33e:	4413      	add	r3, r2
 800e340:	617b      	str	r3, [r7, #20]
 800e342:	e001      	b.n	800e348 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e344:	2301      	movs	r3, #1
 800e346:	e011      	b.n	800e36c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	895a      	ldrh	r2, [r3, #10]
 800e352:	8a7b      	ldrh	r3, [r7, #18]
 800e354:	4413      	add	r3, r2
 800e356:	b29a      	uxth	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	891a      	ldrh	r2, [r3, #8]
 800e360:	8a7b      	ldrh	r3, [r7, #18]
 800e362:	4413      	add	r3, r2
 800e364:	b29a      	uxth	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	811a      	strh	r2, [r3, #8]


  return 0;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	0801bcec 	.word	0x0801bcec
 800e378:	0801be50 	.word	0x0801be50
 800e37c:	0801bd4c 	.word	0x0801bd4c

0800e380 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e38a:	2200      	movs	r2, #0
 800e38c:	6839      	ldr	r1, [r7, #0]
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7ff ff8e 	bl	800e2b0 <pbuf_add_header_impl>
 800e394:	4603      	mov	r3, r0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d106      	bne.n	800e3be <pbuf_remove_header+0x1e>
 800e3b0:	4b20      	ldr	r3, [pc, #128]	; (800e434 <pbuf_remove_header+0x94>)
 800e3b2:	f240 224b 	movw	r2, #587	; 0x24b
 800e3b6:	4920      	ldr	r1, [pc, #128]	; (800e438 <pbuf_remove_header+0x98>)
 800e3b8:	4820      	ldr	r0, [pc, #128]	; (800e43c <pbuf_remove_header+0x9c>)
 800e3ba:	f009 fbe9 	bl	8017b90 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <pbuf_remove_header+0x2c>
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3ca:	d301      	bcc.n	800e3d0 <pbuf_remove_header+0x30>
    return 1;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e02c      	b.n	800e42a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <pbuf_remove_header+0x3a>
    return 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e027      	b.n	800e42a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	895b      	ldrh	r3, [r3, #10]
 800e3e2:	89fa      	ldrh	r2, [r7, #14]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d908      	bls.n	800e3fa <pbuf_remove_header+0x5a>
 800e3e8:	4b12      	ldr	r3, [pc, #72]	; (800e434 <pbuf_remove_header+0x94>)
 800e3ea:	f240 2255 	movw	r2, #597	; 0x255
 800e3ee:	4914      	ldr	r1, [pc, #80]	; (800e440 <pbuf_remove_header+0xa0>)
 800e3f0:	4812      	ldr	r0, [pc, #72]	; (800e43c <pbuf_remove_header+0x9c>)
 800e3f2:	f009 fbcd 	bl	8017b90 <iprintf>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e017      	b.n	800e42a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685a      	ldr	r2, [r3, #4]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	441a      	add	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	895a      	ldrh	r2, [r3, #10]
 800e410:	89fb      	ldrh	r3, [r7, #14]
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	b29a      	uxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	891a      	ldrh	r2, [r3, #8]
 800e41e:	89fb      	ldrh	r3, [r7, #14]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	b29a      	uxth	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	0801bcec 	.word	0x0801bcec
 800e438:	0801be50 	.word	0x0801be50
 800e43c:	0801bd4c 	.word	0x0801bd4c
 800e440:	0801be5c 	.word	0x0801be5c

0800e444 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	807b      	strh	r3, [r7, #2]
 800e450:	4613      	mov	r3, r2
 800e452:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	da08      	bge.n	800e46e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e45c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e460:	425b      	negs	r3, r3
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7ff ff9b 	bl	800e3a0 <pbuf_remove_header>
 800e46a:	4603      	mov	r3, r0
 800e46c:	e007      	b.n	800e47e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e46e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e472:	787a      	ldrb	r2, [r7, #1]
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff ff1a 	bl	800e2b0 <pbuf_add_header_impl>
 800e47c:	4603      	mov	r3, r0
  }
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
 800e48e:	460b      	mov	r3, r1
 800e490:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e496:	2201      	movs	r2, #1
 800e498:	4619      	mov	r1, r3
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff ffd2 	bl	800e444 <pbuf_header_impl>
 800e4a0:	4603      	mov	r3, r0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b088      	sub	sp, #32
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10b      	bne.n	800e4d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <pbuf_free+0x22>
 800e4c0:	4b3b      	ldr	r3, [pc, #236]	; (800e5b0 <pbuf_free+0x104>)
 800e4c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e4c6:	493b      	ldr	r1, [pc, #236]	; (800e5b4 <pbuf_free+0x108>)
 800e4c8:	483b      	ldr	r0, [pc, #236]	; (800e5b8 <pbuf_free+0x10c>)
 800e4ca:	f009 fb61 	bl	8017b90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e069      	b.n	800e5a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e4d6:	e062      	b.n	800e59e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e4d8:	f009 f946 	bl	8017768 <sys_arch_protect>
 800e4dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	7b9b      	ldrb	r3, [r3, #14]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d106      	bne.n	800e4f4 <pbuf_free+0x48>
 800e4e6:	4b32      	ldr	r3, [pc, #200]	; (800e5b0 <pbuf_free+0x104>)
 800e4e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e4ec:	4933      	ldr	r1, [pc, #204]	; (800e5bc <pbuf_free+0x110>)
 800e4ee:	4832      	ldr	r0, [pc, #200]	; (800e5b8 <pbuf_free+0x10c>)
 800e4f0:	f009 fb4e 	bl	8017b90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	7b9b      	ldrb	r3, [r3, #14]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	739a      	strb	r2, [r3, #14]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	7b9b      	ldrb	r3, [r3, #14]
 800e504:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e506:	69b8      	ldr	r0, [r7, #24]
 800e508:	f009 f93c 	bl	8017784 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e50c:	7dfb      	ldrb	r3, [r7, #23]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d143      	bne.n	800e59a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	7b1b      	ldrb	r3, [r3, #12]
 800e51c:	f003 030f 	and.w	r3, r3, #15
 800e520:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7b5b      	ldrb	r3, [r3, #13]
 800e526:	f003 0302 	and.w	r3, r3, #2
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d011      	beq.n	800e552 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <pbuf_free+0x9c>
 800e53a:	4b1d      	ldr	r3, [pc, #116]	; (800e5b0 <pbuf_free+0x104>)
 800e53c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e540:	491f      	ldr	r1, [pc, #124]	; (800e5c0 <pbuf_free+0x114>)
 800e542:	481d      	ldr	r0, [pc, #116]	; (800e5b8 <pbuf_free+0x10c>)
 800e544:	f009 fb24 	bl	8017b90 <iprintf>
        pc->custom_free_function(p);
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	4798      	blx	r3
 800e550:	e01d      	b.n	800e58e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d104      	bne.n	800e562 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e558:	6879      	ldr	r1, [r7, #4]
 800e55a:	200b      	movs	r0, #11
 800e55c:	f7ff f906 	bl	800d76c <memp_free>
 800e560:	e015      	b.n	800e58e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d104      	bne.n	800e572 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	200a      	movs	r0, #10
 800e56c:	f7ff f8fe 	bl	800d76c <memp_free>
 800e570:	e00d      	b.n	800e58e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <pbuf_free+0xd4>
          mem_free(p);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7fe fd43 	bl	800d004 <mem_free>
 800e57e:	e006      	b.n	800e58e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e580:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <pbuf_free+0x104>)
 800e582:	f240 320f 	movw	r2, #783	; 0x30f
 800e586:	490f      	ldr	r1, [pc, #60]	; (800e5c4 <pbuf_free+0x118>)
 800e588:	480b      	ldr	r0, [pc, #44]	; (800e5b8 <pbuf_free+0x10c>)
 800e58a:	f009 fb01 	bl	8017b90 <iprintf>
        }
      }
      count++;
 800e58e:	7ffb      	ldrb	r3, [r7, #31]
 800e590:	3301      	adds	r3, #1
 800e592:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	607b      	str	r3, [r7, #4]
 800e598:	e001      	b.n	800e59e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d199      	bne.n	800e4d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3720      	adds	r7, #32
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	0801bcec 	.word	0x0801bcec
 800e5b4:	0801be50 	.word	0x0801be50
 800e5b8:	0801bd4c 	.word	0x0801bd4c
 800e5bc:	0801be7c 	.word	0x0801be7c
 800e5c0:	0801be94 	.word	0x0801be94
 800e5c4:	0801beb8 	.word	0x0801beb8

0800e5c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e5d4:	e005      	b.n	800e5e2 <pbuf_clen+0x1a>
    ++len;
 800e5d6:	89fb      	ldrh	r3, [r7, #14]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1f6      	bne.n	800e5d6 <pbuf_clen+0xe>
  }
  return len;
 800e5e8:	89fb      	ldrh	r3, [r7, #14]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
	...

0800e5f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d016      	beq.n	800e634 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e606:	f009 f8af 	bl	8017768 <sys_arch_protect>
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7b9b      	ldrb	r3, [r3, #14]
 800e610:	3301      	adds	r3, #1
 800e612:	b2da      	uxtb	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	739a      	strb	r2, [r3, #14]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f009 f8b3 	bl	8017784 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7b9b      	ldrb	r3, [r3, #14]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <pbuf_ref+0x3c>
 800e626:	4b05      	ldr	r3, [pc, #20]	; (800e63c <pbuf_ref+0x44>)
 800e628:	f240 3242 	movw	r2, #834	; 0x342
 800e62c:	4904      	ldr	r1, [pc, #16]	; (800e640 <pbuf_ref+0x48>)
 800e62e:	4805      	ldr	r0, [pc, #20]	; (800e644 <pbuf_ref+0x4c>)
 800e630:	f009 faae 	bl	8017b90 <iprintf>
  }
}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	0801bcec 	.word	0x0801bcec
 800e640:	0801becc 	.word	0x0801becc
 800e644:	0801bd4c 	.word	0x0801bd4c

0800e648 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d002      	beq.n	800e65e <pbuf_cat+0x16>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d107      	bne.n	800e66e <pbuf_cat+0x26>
 800e65e:	4b20      	ldr	r3, [pc, #128]	; (800e6e0 <pbuf_cat+0x98>)
 800e660:	f240 3259 	movw	r2, #857	; 0x359
 800e664:	491f      	ldr	r1, [pc, #124]	; (800e6e4 <pbuf_cat+0x9c>)
 800e666:	4820      	ldr	r0, [pc, #128]	; (800e6e8 <pbuf_cat+0xa0>)
 800e668:	f009 fa92 	bl	8017b90 <iprintf>
 800e66c:	e034      	b.n	800e6d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	60fb      	str	r3, [r7, #12]
 800e672:	e00a      	b.n	800e68a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	891a      	ldrh	r2, [r3, #8]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	891b      	ldrh	r3, [r3, #8]
 800e67c:	4413      	add	r3, r2
 800e67e:	b29a      	uxth	r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	60fb      	str	r3, [r7, #12]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1f0      	bne.n	800e674 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	891a      	ldrh	r2, [r3, #8]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	895b      	ldrh	r3, [r3, #10]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d006      	beq.n	800e6ac <pbuf_cat+0x64>
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <pbuf_cat+0x98>)
 800e6a0:	f240 3262 	movw	r2, #866	; 0x362
 800e6a4:	4911      	ldr	r1, [pc, #68]	; (800e6ec <pbuf_cat+0xa4>)
 800e6a6:	4810      	ldr	r0, [pc, #64]	; (800e6e8 <pbuf_cat+0xa0>)
 800e6a8:	f009 fa72 	bl	8017b90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d006      	beq.n	800e6c2 <pbuf_cat+0x7a>
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <pbuf_cat+0x98>)
 800e6b6:	f240 3263 	movw	r2, #867	; 0x363
 800e6ba:	490d      	ldr	r1, [pc, #52]	; (800e6f0 <pbuf_cat+0xa8>)
 800e6bc:	480a      	ldr	r0, [pc, #40]	; (800e6e8 <pbuf_cat+0xa0>)
 800e6be:	f009 fa67 	bl	8017b90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	891a      	ldrh	r2, [r3, #8]
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	891b      	ldrh	r3, [r3, #8]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	0801bcec 	.word	0x0801bcec
 800e6e4:	0801bee0 	.word	0x0801bee0
 800e6e8:	0801bd4c 	.word	0x0801bd4c
 800e6ec:	0801bf18 	.word	0x0801bf18
 800e6f0:	0801bf48 	.word	0x0801bf48

0800e6f4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e6fe:	2300      	movs	r3, #0
 800e700:	617b      	str	r3, [r7, #20]
 800e702:	2300      	movs	r3, #0
 800e704:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d008      	beq.n	800e71e <pbuf_copy+0x2a>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d005      	beq.n	800e71e <pbuf_copy+0x2a>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	891a      	ldrh	r2, [r3, #8]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	891b      	ldrh	r3, [r3, #8]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d209      	bcs.n	800e732 <pbuf_copy+0x3e>
 800e71e:	4b57      	ldr	r3, [pc, #348]	; (800e87c <pbuf_copy+0x188>)
 800e720:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e724:	4956      	ldr	r1, [pc, #344]	; (800e880 <pbuf_copy+0x18c>)
 800e726:	4857      	ldr	r0, [pc, #348]	; (800e884 <pbuf_copy+0x190>)
 800e728:	f009 fa32 	bl	8017b90 <iprintf>
 800e72c:	f06f 030f 	mvn.w	r3, #15
 800e730:	e09f      	b.n	800e872 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	895b      	ldrh	r3, [r3, #10]
 800e736:	461a      	mov	r2, r3
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	1ad2      	subs	r2, r2, r3
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	895b      	ldrh	r3, [r3, #10]
 800e740:	4619      	mov	r1, r3
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	1acb      	subs	r3, r1, r3
 800e746:	429a      	cmp	r2, r3
 800e748:	d306      	bcc.n	800e758 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	895b      	ldrh	r3, [r3, #10]
 800e74e:	461a      	mov	r2, r3
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	1ad3      	subs	r3, r2, r3
 800e754:	60fb      	str	r3, [r7, #12]
 800e756:	e005      	b.n	800e764 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	895b      	ldrh	r3, [r3, #10]
 800e75c:	461a      	mov	r2, r3
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	1ad3      	subs	r3, r2, r3
 800e762:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	18d0      	adds	r0, r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	4413      	add	r3, r2
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4619      	mov	r1, r3
 800e778:	f009 f945 	bl	8017a06 <memcpy>
    offset_to += len;
 800e77c:	697a      	ldr	r2, [r7, #20]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4413      	add	r3, r2
 800e782:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	4413      	add	r3, r2
 800e78a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	895b      	ldrh	r3, [r3, #10]
 800e790:	461a      	mov	r2, r3
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	4293      	cmp	r3, r2
 800e796:	d906      	bls.n	800e7a6 <pbuf_copy+0xb2>
 800e798:	4b38      	ldr	r3, [pc, #224]	; (800e87c <pbuf_copy+0x188>)
 800e79a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e79e:	493a      	ldr	r1, [pc, #232]	; (800e888 <pbuf_copy+0x194>)
 800e7a0:	4838      	ldr	r0, [pc, #224]	; (800e884 <pbuf_copy+0x190>)
 800e7a2:	f009 f9f5 	bl	8017b90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	895b      	ldrh	r3, [r3, #10]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d906      	bls.n	800e7c0 <pbuf_copy+0xcc>
 800e7b2:	4b32      	ldr	r3, [pc, #200]	; (800e87c <pbuf_copy+0x188>)
 800e7b4:	f240 32da 	movw	r2, #986	; 0x3da
 800e7b8:	4934      	ldr	r1, [pc, #208]	; (800e88c <pbuf_copy+0x198>)
 800e7ba:	4832      	ldr	r0, [pc, #200]	; (800e884 <pbuf_copy+0x190>)
 800e7bc:	f009 f9e8 	bl	8017b90 <iprintf>
    if (offset_from >= p_from->len) {
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	895b      	ldrh	r3, [r3, #10]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d304      	bcc.n	800e7d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	895b      	ldrh	r3, [r3, #10]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d114      	bne.n	800e80c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10c      	bne.n	800e80c <pbuf_copy+0x118>
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d009      	beq.n	800e80c <pbuf_copy+0x118>
 800e7f8:	4b20      	ldr	r3, [pc, #128]	; (800e87c <pbuf_copy+0x188>)
 800e7fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e7fe:	4924      	ldr	r1, [pc, #144]	; (800e890 <pbuf_copy+0x19c>)
 800e800:	4820      	ldr	r0, [pc, #128]	; (800e884 <pbuf_copy+0x190>)
 800e802:	f009 f9c5 	bl	8017b90 <iprintf>
 800e806:	f06f 030f 	mvn.w	r3, #15
 800e80a:	e032      	b.n	800e872 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d013      	beq.n	800e83a <pbuf_copy+0x146>
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	895a      	ldrh	r2, [r3, #10]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	891b      	ldrh	r3, [r3, #8]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d10d      	bne.n	800e83a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d009      	beq.n	800e83a <pbuf_copy+0x146>
 800e826:	4b15      	ldr	r3, [pc, #84]	; (800e87c <pbuf_copy+0x188>)
 800e828:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e82c:	4919      	ldr	r1, [pc, #100]	; (800e894 <pbuf_copy+0x1a0>)
 800e82e:	4815      	ldr	r0, [pc, #84]	; (800e884 <pbuf_copy+0x190>)
 800e830:	f009 f9ae 	bl	8017b90 <iprintf>
 800e834:	f06f 0305 	mvn.w	r3, #5
 800e838:	e01b      	b.n	800e872 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d013      	beq.n	800e868 <pbuf_copy+0x174>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	895a      	ldrh	r2, [r3, #10]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	891b      	ldrh	r3, [r3, #8]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d10d      	bne.n	800e868 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d009      	beq.n	800e868 <pbuf_copy+0x174>
 800e854:	4b09      	ldr	r3, [pc, #36]	; (800e87c <pbuf_copy+0x188>)
 800e856:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e85a:	490e      	ldr	r1, [pc, #56]	; (800e894 <pbuf_copy+0x1a0>)
 800e85c:	4809      	ldr	r0, [pc, #36]	; (800e884 <pbuf_copy+0x190>)
 800e85e:	f009 f997 	bl	8017b90 <iprintf>
 800e862:	f06f 0305 	mvn.w	r3, #5
 800e866:	e004      	b.n	800e872 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f af61 	bne.w	800e732 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	0801bcec 	.word	0x0801bcec
 800e880:	0801bf94 	.word	0x0801bf94
 800e884:	0801bd4c 	.word	0x0801bd4c
 800e888:	0801bfc4 	.word	0x0801bfc4
 800e88c:	0801bfdc 	.word	0x0801bfdc
 800e890:	0801bff8 	.word	0x0801bff8
 800e894:	0801c008 	.word	0x0801c008

0800e898 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	80fb      	strh	r3, [r7, #6]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d108      	bne.n	800e8ce <pbuf_copy_partial+0x36>
 800e8bc:	4b2b      	ldr	r3, [pc, #172]	; (800e96c <pbuf_copy_partial+0xd4>)
 800e8be:	f240 420a 	movw	r2, #1034	; 0x40a
 800e8c2:	492b      	ldr	r1, [pc, #172]	; (800e970 <pbuf_copy_partial+0xd8>)
 800e8c4:	482b      	ldr	r0, [pc, #172]	; (800e974 <pbuf_copy_partial+0xdc>)
 800e8c6:	f009 f963 	bl	8017b90 <iprintf>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e04a      	b.n	800e964 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d108      	bne.n	800e8e6 <pbuf_copy_partial+0x4e>
 800e8d4:	4b25      	ldr	r3, [pc, #148]	; (800e96c <pbuf_copy_partial+0xd4>)
 800e8d6:	f240 420b 	movw	r2, #1035	; 0x40b
 800e8da:	4927      	ldr	r1, [pc, #156]	; (800e978 <pbuf_copy_partial+0xe0>)
 800e8dc:	4825      	ldr	r0, [pc, #148]	; (800e974 <pbuf_copy_partial+0xdc>)
 800e8de:	f009 f957 	bl	8017b90 <iprintf>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e03e      	b.n	800e964 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	61fb      	str	r3, [r7, #28]
 800e8ea:	e034      	b.n	800e956 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e8ec:	88bb      	ldrh	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00a      	beq.n	800e908 <pbuf_copy_partial+0x70>
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	895b      	ldrh	r3, [r3, #10]
 800e8f6:	88ba      	ldrh	r2, [r7, #4]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d305      	bcc.n	800e908 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	895b      	ldrh	r3, [r3, #10]
 800e900:	88ba      	ldrh	r2, [r7, #4]
 800e902:	1ad3      	subs	r3, r2, r3
 800e904:	80bb      	strh	r3, [r7, #4]
 800e906:	e023      	b.n	800e950 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	895a      	ldrh	r2, [r3, #10]
 800e90c:	88bb      	ldrh	r3, [r7, #4]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e912:	8b3a      	ldrh	r2, [r7, #24]
 800e914:	88fb      	ldrh	r3, [r7, #6]
 800e916:	429a      	cmp	r2, r3
 800e918:	d901      	bls.n	800e91e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e91a:	88fb      	ldrh	r3, [r7, #6]
 800e91c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e91e:	8b7b      	ldrh	r3, [r7, #26]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	18d0      	adds	r0, r2, r3
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	88bb      	ldrh	r3, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	8b3a      	ldrh	r2, [r7, #24]
 800e92e:	4619      	mov	r1, r3
 800e930:	f009 f869 	bl	8017a06 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e934:	8afa      	ldrh	r2, [r7, #22]
 800e936:	8b3b      	ldrh	r3, [r7, #24]
 800e938:	4413      	add	r3, r2
 800e93a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e93c:	8b7a      	ldrh	r2, [r7, #26]
 800e93e:	8b3b      	ldrh	r3, [r7, #24]
 800e940:	4413      	add	r3, r2
 800e942:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e944:	88fa      	ldrh	r2, [r7, #6]
 800e946:	8b3b      	ldrh	r3, [r7, #24]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	61fb      	str	r3, [r7, #28]
 800e956:	88fb      	ldrh	r3, [r7, #6]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d002      	beq.n	800e962 <pbuf_copy_partial+0xca>
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d1c4      	bne.n	800e8ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e962:	8afb      	ldrh	r3, [r7, #22]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3720      	adds	r7, #32
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	0801bcec 	.word	0x0801bcec
 800e970:	0801c034 	.word	0x0801c034
 800e974:	0801bd4c 	.word	0x0801bd4c
 800e978:	0801c054 	.word	0x0801c054

0800e97c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	4603      	mov	r3, r0
 800e984:	603a      	str	r2, [r7, #0]
 800e986:	71fb      	strb	r3, [r7, #7]
 800e988:	460b      	mov	r3, r1
 800e98a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	8919      	ldrh	r1, [r3, #8]
 800e990:	88ba      	ldrh	r2, [r7, #4]
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff faa5 	bl	800dee4 <pbuf_alloc>
 800e99a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d101      	bne.n	800e9a6 <pbuf_clone+0x2a>
    return NULL;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e011      	b.n	800e9ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f7ff fea3 	bl	800e6f4 <pbuf_copy>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e9b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d006      	beq.n	800e9c8 <pbuf_clone+0x4c>
 800e9ba:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <pbuf_clone+0x58>)
 800e9bc:	f240 5224 	movw	r2, #1316	; 0x524
 800e9c0:	4905      	ldr	r1, [pc, #20]	; (800e9d8 <pbuf_clone+0x5c>)
 800e9c2:	4806      	ldr	r0, [pc, #24]	; (800e9dc <pbuf_clone+0x60>)
 800e9c4:	f009 f8e4 	bl	8017b90 <iprintf>
  return q;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	0801bcec 	.word	0x0801bcec
 800e9d8:	0801c160 	.word	0x0801c160
 800e9dc:	0801bd4c 	.word	0x0801bd4c

0800e9e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e9e4:	f009 f8ec 	bl	8017bc0 <rand>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	4b01      	ldr	r3, [pc, #4]	; (800ea00 <tcp_init+0x20>)
 800e9fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e9fc:	bf00      	nop
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20000024 	.word	0x20000024

0800ea04 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	7d1b      	ldrb	r3, [r3, #20]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d105      	bne.n	800ea20 <tcp_free+0x1c>
 800ea14:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <tcp_free+0x2c>)
 800ea16:	22d4      	movs	r2, #212	; 0xd4
 800ea18:	4906      	ldr	r1, [pc, #24]	; (800ea34 <tcp_free+0x30>)
 800ea1a:	4807      	ldr	r0, [pc, #28]	; (800ea38 <tcp_free+0x34>)
 800ea1c:	f009 f8b8 	bl	8017b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ea20:	6879      	ldr	r1, [r7, #4]
 800ea22:	2000      	movs	r0, #0
 800ea24:	f7fe fea2 	bl	800d76c <memp_free>
}
 800ea28:	bf00      	nop
 800ea2a:	3708      	adds	r7, #8
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	0801c1ec 	.word	0x0801c1ec
 800ea34:	0801c21c 	.word	0x0801c21c
 800ea38:	0801c230 	.word	0x0801c230

0800ea3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7d1b      	ldrb	r3, [r3, #20]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d105      	bne.n	800ea58 <tcp_free_listen+0x1c>
 800ea4c:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <tcp_free_listen+0x2c>)
 800ea4e:	22df      	movs	r2, #223	; 0xdf
 800ea50:	4906      	ldr	r1, [pc, #24]	; (800ea6c <tcp_free_listen+0x30>)
 800ea52:	4807      	ldr	r0, [pc, #28]	; (800ea70 <tcp_free_listen+0x34>)
 800ea54:	f009 f89c 	bl	8017b90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	2001      	movs	r0, #1
 800ea5c:	f7fe fe86 	bl	800d76c <memp_free>
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0801c1ec 	.word	0x0801c1ec
 800ea6c:	0801c258 	.word	0x0801c258
 800ea70:	0801c230 	.word	0x0801c230

0800ea74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ea78:	f001 f8f4 	bl	800fc64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ea7c:	4b07      	ldr	r3, [pc, #28]	; (800ea9c <tcp_tmr+0x28>)
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	3301      	adds	r3, #1
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	4b05      	ldr	r3, [pc, #20]	; (800ea9c <tcp_tmr+0x28>)
 800ea86:	701a      	strb	r2, [r3, #0]
 800ea88:	4b04      	ldr	r3, [pc, #16]	; (800ea9c <tcp_tmr+0x28>)
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	f003 0301 	and.w	r3, r3, #1
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ea94:	f000 fda6 	bl	800f5e4 <tcp_slowtmr>
  }
}
 800ea98:	bf00      	nop
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	20011bad 	.word	0x20011bad

0800eaa0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d105      	bne.n	800eabc <tcp_remove_listener+0x1c>
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <tcp_remove_listener+0x48>)
 800eab2:	22ff      	movs	r2, #255	; 0xff
 800eab4:	490d      	ldr	r1, [pc, #52]	; (800eaec <tcp_remove_listener+0x4c>)
 800eab6:	480e      	ldr	r0, [pc, #56]	; (800eaf0 <tcp_remove_listener+0x50>)
 800eab8:	f009 f86a 	bl	8017b90 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60fb      	str	r3, [r7, #12]
 800eac0:	e00a      	b.n	800ead8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d102      	bne.n	800ead2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1f1      	bne.n	800eac2 <tcp_remove_listener+0x22>
    }
  }
}
 800eade:	bf00      	nop
 800eae0:	bf00      	nop
 800eae2:	3710      	adds	r7, #16
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	0801c1ec 	.word	0x0801c1ec
 800eaec:	0801c274 	.word	0x0801c274
 800eaf0:	0801c230 	.word	0x0801c230

0800eaf4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <tcp_listen_closed+0x1c>
 800eb02:	4b14      	ldr	r3, [pc, #80]	; (800eb54 <tcp_listen_closed+0x60>)
 800eb04:	f240 1211 	movw	r2, #273	; 0x111
 800eb08:	4913      	ldr	r1, [pc, #76]	; (800eb58 <tcp_listen_closed+0x64>)
 800eb0a:	4814      	ldr	r0, [pc, #80]	; (800eb5c <tcp_listen_closed+0x68>)
 800eb0c:	f009 f840 	bl	8017b90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	7d1b      	ldrb	r3, [r3, #20]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d006      	beq.n	800eb26 <tcp_listen_closed+0x32>
 800eb18:	4b0e      	ldr	r3, [pc, #56]	; (800eb54 <tcp_listen_closed+0x60>)
 800eb1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eb1e:	4910      	ldr	r1, [pc, #64]	; (800eb60 <tcp_listen_closed+0x6c>)
 800eb20:	480e      	ldr	r0, [pc, #56]	; (800eb5c <tcp_listen_closed+0x68>)
 800eb22:	f009 f835 	bl	8017b90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb26:	2301      	movs	r3, #1
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e00b      	b.n	800eb44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb2c:	4a0d      	ldr	r2, [pc, #52]	; (800eb64 <tcp_listen_closed+0x70>)
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6879      	ldr	r1, [r7, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff ffb1 	bl	800eaa0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	3301      	adds	r3, #1
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d9f0      	bls.n	800eb2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eb4a:	bf00      	nop
 800eb4c:	bf00      	nop
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	0801c1ec 	.word	0x0801c1ec
 800eb58:	0801c29c 	.word	0x0801c29c
 800eb5c:	0801c230 	.word	0x0801c230
 800eb60:	0801c2a8 	.word	0x0801c2a8
 800eb64:	0801df48 	.word	0x0801df48

0800eb68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eb68:	b5b0      	push	{r4, r5, r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af04      	add	r7, sp, #16
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	460b      	mov	r3, r1
 800eb72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d106      	bne.n	800eb88 <tcp_close_shutdown+0x20>
 800eb7a:	4b63      	ldr	r3, [pc, #396]	; (800ed08 <tcp_close_shutdown+0x1a0>)
 800eb7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eb80:	4962      	ldr	r1, [pc, #392]	; (800ed0c <tcp_close_shutdown+0x1a4>)
 800eb82:	4863      	ldr	r0, [pc, #396]	; (800ed10 <tcp_close_shutdown+0x1a8>)
 800eb84:	f009 f804 	bl	8017b90 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eb88:	78fb      	ldrb	r3, [r7, #3]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d066      	beq.n	800ec5c <tcp_close_shutdown+0xf4>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7d1b      	ldrb	r3, [r3, #20]
 800eb92:	2b04      	cmp	r3, #4
 800eb94:	d003      	beq.n	800eb9e <tcp_close_shutdown+0x36>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	2b07      	cmp	r3, #7
 800eb9c:	d15e      	bne.n	800ec5c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d104      	bne.n	800ebb0 <tcp_close_shutdown+0x48>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ebae:	d055      	beq.n	800ec5c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	8b5b      	ldrh	r3, [r3, #26]
 800ebb4:	f003 0310 	and.w	r3, r3, #16
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d106      	bne.n	800ebca <tcp_close_shutdown+0x62>
 800ebbc:	4b52      	ldr	r3, [pc, #328]	; (800ed08 <tcp_close_shutdown+0x1a0>)
 800ebbe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ebc2:	4954      	ldr	r1, [pc, #336]	; (800ed14 <tcp_close_shutdown+0x1ac>)
 800ebc4:	4852      	ldr	r0, [pc, #328]	; (800ed10 <tcp_close_shutdown+0x1a8>)
 800ebc6:	f008 ffe3 	bl	8017b90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ebd2:	687d      	ldr	r5, [r7, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	8ad2      	ldrh	r2, [r2, #22]
 800ebdc:	6879      	ldr	r1, [r7, #4]
 800ebde:	8b09      	ldrh	r1, [r1, #24]
 800ebe0:	9102      	str	r1, [sp, #8]
 800ebe2:	9201      	str	r2, [sp, #4]
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	462b      	mov	r3, r5
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4601      	mov	r1, r0
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f005 fe2b 	bl	8014848 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f001 fbe6 	bl	80103c4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ebf8:	4b47      	ldr	r3, [pc, #284]	; (800ed18 <tcp_close_shutdown+0x1b0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d105      	bne.n	800ec0e <tcp_close_shutdown+0xa6>
 800ec02:	4b45      	ldr	r3, [pc, #276]	; (800ed18 <tcp_close_shutdown+0x1b0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	4a43      	ldr	r2, [pc, #268]	; (800ed18 <tcp_close_shutdown+0x1b0>)
 800ec0a:	6013      	str	r3, [r2, #0]
 800ec0c:	e013      	b.n	800ec36 <tcp_close_shutdown+0xce>
 800ec0e:	4b42      	ldr	r3, [pc, #264]	; (800ed18 <tcp_close_shutdown+0x1b0>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e00c      	b.n	800ec30 <tcp_close_shutdown+0xc8>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	68db      	ldr	r3, [r3, #12]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d104      	bne.n	800ec2a <tcp_close_shutdown+0xc2>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68da      	ldr	r2, [r3, #12]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	60da      	str	r2, [r3, #12]
 800ec28:	e005      	b.n	800ec36 <tcp_close_shutdown+0xce>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1ef      	bne.n	800ec16 <tcp_close_shutdown+0xae>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	60da      	str	r2, [r3, #12]
 800ec3c:	4b37      	ldr	r3, [pc, #220]	; (800ed1c <tcp_close_shutdown+0x1b4>)
 800ec3e:	2201      	movs	r2, #1
 800ec40:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ec42:	4b37      	ldr	r3, [pc, #220]	; (800ed20 <tcp_close_shutdown+0x1b8>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d102      	bne.n	800ec52 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ec4c:	f004 f87e 	bl	8012d4c <tcp_trigger_input_pcb_close>
 800ec50:	e002      	b.n	800ec58 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff fed6 	bl	800ea04 <tcp_free>
      }
      return ERR_OK;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e050      	b.n	800ecfe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	7d1b      	ldrb	r3, [r3, #20]
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d03b      	beq.n	800ecdc <tcp_close_shutdown+0x174>
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	dc44      	bgt.n	800ecf2 <tcp_close_shutdown+0x18a>
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <tcp_close_shutdown+0x10a>
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d02a      	beq.n	800ecc6 <tcp_close_shutdown+0x15e>
 800ec70:	e03f      	b.n	800ecf2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8adb      	ldrh	r3, [r3, #22]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d021      	beq.n	800ecbe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec7a:	4b2a      	ldr	r3, [pc, #168]	; (800ed24 <tcp_close_shutdown+0x1bc>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d105      	bne.n	800ec90 <tcp_close_shutdown+0x128>
 800ec84:	4b27      	ldr	r3, [pc, #156]	; (800ed24 <tcp_close_shutdown+0x1bc>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	4a26      	ldr	r2, [pc, #152]	; (800ed24 <tcp_close_shutdown+0x1bc>)
 800ec8c:	6013      	str	r3, [r2, #0]
 800ec8e:	e013      	b.n	800ecb8 <tcp_close_shutdown+0x150>
 800ec90:	4b24      	ldr	r3, [pc, #144]	; (800ed24 <tcp_close_shutdown+0x1bc>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	60bb      	str	r3, [r7, #8]
 800ec96:	e00c      	b.n	800ecb2 <tcp_close_shutdown+0x14a>
 800ec98:	68bb      	ldr	r3, [r7, #8]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d104      	bne.n	800ecac <tcp_close_shutdown+0x144>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68da      	ldr	r2, [r3, #12]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	60da      	str	r2, [r3, #12]
 800ecaa:	e005      	b.n	800ecb8 <tcp_close_shutdown+0x150>
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	60bb      	str	r3, [r7, #8]
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1ef      	bne.n	800ec98 <tcp_close_shutdown+0x130>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff fea0 	bl	800ea04 <tcp_free>
      break;
 800ecc4:	e01a      	b.n	800ecfc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff ff14 	bl	800eaf4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eccc:	6879      	ldr	r1, [r7, #4]
 800ecce:	4816      	ldr	r0, [pc, #88]	; (800ed28 <tcp_close_shutdown+0x1c0>)
 800ecd0:	f001 fbc8 	bl	8010464 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7ff feb1 	bl	800ea3c <tcp_free_listen>
      break;
 800ecda:	e00f      	b.n	800ecfc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ecdc:	6879      	ldr	r1, [r7, #4]
 800ecde:	480e      	ldr	r0, [pc, #56]	; (800ed18 <tcp_close_shutdown+0x1b0>)
 800ece0:	f001 fbc0 	bl	8010464 <tcp_pcb_remove>
 800ece4:	4b0d      	ldr	r3, [pc, #52]	; (800ed1c <tcp_close_shutdown+0x1b4>)
 800ece6:	2201      	movs	r2, #1
 800ece8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff fe8a 	bl	800ea04 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ecf0:	e004      	b.n	800ecfc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f000 f81a 	bl	800ed2c <tcp_close_shutdown_fin>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	e000      	b.n	800ecfe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bdb0      	pop	{r4, r5, r7, pc}
 800ed06:	bf00      	nop
 800ed08:	0801c1ec 	.word	0x0801c1ec
 800ed0c:	0801c2c0 	.word	0x0801c2c0
 800ed10:	0801c230 	.word	0x0801c230
 800ed14:	0801c2e0 	.word	0x0801c2e0
 800ed18:	20011ba4 	.word	0x20011ba4
 800ed1c:	20011bac 	.word	0x20011bac
 800ed20:	20011be4 	.word	0x20011be4
 800ed24:	20011b9c 	.word	0x20011b9c
 800ed28:	20011ba0 	.word	0x20011ba0

0800ed2c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d106      	bne.n	800ed48 <tcp_close_shutdown_fin+0x1c>
 800ed3a:	4b2e      	ldr	r3, [pc, #184]	; (800edf4 <tcp_close_shutdown_fin+0xc8>)
 800ed3c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ed40:	492d      	ldr	r1, [pc, #180]	; (800edf8 <tcp_close_shutdown_fin+0xcc>)
 800ed42:	482e      	ldr	r0, [pc, #184]	; (800edfc <tcp_close_shutdown_fin+0xd0>)
 800ed44:	f008 ff24 	bl	8017b90 <iprintf>

  switch (pcb->state) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
 800ed4c:	2b07      	cmp	r3, #7
 800ed4e:	d020      	beq.n	800ed92 <tcp_close_shutdown_fin+0x66>
 800ed50:	2b07      	cmp	r3, #7
 800ed52:	dc2b      	bgt.n	800edac <tcp_close_shutdown_fin+0x80>
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d002      	beq.n	800ed5e <tcp_close_shutdown_fin+0x32>
 800ed58:	2b04      	cmp	r3, #4
 800ed5a:	d00d      	beq.n	800ed78 <tcp_close_shutdown_fin+0x4c>
 800ed5c:	e026      	b.n	800edac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f004 fe5e 	bl	8013a20 <tcp_send_fin>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d11f      	bne.n	800edb0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2205      	movs	r2, #5
 800ed74:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed76:	e01b      	b.n	800edb0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f004 fe51 	bl	8013a20 <tcp_send_fin>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d114      	bne.n	800edb4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2205      	movs	r2, #5
 800ed8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed90:	e010      	b.n	800edb4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f004 fe44 	bl	8013a20 <tcp_send_fin>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2209      	movs	r2, #9
 800eda8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800edaa:	e005      	b.n	800edb8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	e01c      	b.n	800edea <tcp_close_shutdown_fin+0xbe>
      break;
 800edb0:	bf00      	nop
 800edb2:	e002      	b.n	800edba <tcp_close_shutdown_fin+0x8e>
      break;
 800edb4:	bf00      	nop
 800edb6:	e000      	b.n	800edba <tcp_close_shutdown_fin+0x8e>
      break;
 800edb8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800edba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d103      	bne.n	800edca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f004 ff6a 	bl	8013c9c <tcp_output>
 800edc8:	e00d      	b.n	800ede6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800edca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edd2:	d108      	bne.n	800ede6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	8b5b      	ldrh	r3, [r3, #26]
 800edd8:	f043 0308 	orr.w	r3, r3, #8
 800eddc:	b29a      	uxth	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	e001      	b.n	800edea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ede6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	0801c1ec 	.word	0x0801c1ec
 800edf8:	0801c29c 	.word	0x0801c29c
 800edfc:	0801c230 	.word	0x0801c230

0800ee00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d109      	bne.n	800ee22 <tcp_close+0x22>
 800ee0e:	4b0f      	ldr	r3, [pc, #60]	; (800ee4c <tcp_close+0x4c>)
 800ee10:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ee14:	490e      	ldr	r1, [pc, #56]	; (800ee50 <tcp_close+0x50>)
 800ee16:	480f      	ldr	r0, [pc, #60]	; (800ee54 <tcp_close+0x54>)
 800ee18:	f008 feba 	bl	8017b90 <iprintf>
 800ee1c:	f06f 030f 	mvn.w	r3, #15
 800ee20:	e00f      	b.n	800ee42 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	7d1b      	ldrb	r3, [r3, #20]
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d006      	beq.n	800ee38 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8b5b      	ldrh	r3, [r3, #26]
 800ee2e:	f043 0310 	orr.w	r3, r3, #16
 800ee32:	b29a      	uxth	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ee38:	2101      	movs	r1, #1
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff fe94 	bl	800eb68 <tcp_close_shutdown>
 800ee40:	4603      	mov	r3, r0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	0801c1ec 	.word	0x0801c1ec
 800ee50:	0801c2fc 	.word	0x0801c2fc
 800ee54:	0801c230 	.word	0x0801c230

0800ee58 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d109      	bne.n	800ee7e <tcp_shutdown+0x26>
 800ee6a:	4b26      	ldr	r3, [pc, #152]	; (800ef04 <tcp_shutdown+0xac>)
 800ee6c:	f240 2207 	movw	r2, #519	; 0x207
 800ee70:	4925      	ldr	r1, [pc, #148]	; (800ef08 <tcp_shutdown+0xb0>)
 800ee72:	4826      	ldr	r0, [pc, #152]	; (800ef0c <tcp_shutdown+0xb4>)
 800ee74:	f008 fe8c 	bl	8017b90 <iprintf>
 800ee78:	f06f 030f 	mvn.w	r3, #15
 800ee7c:	e03d      	b.n	800eefa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d102      	bne.n	800ee8c <tcp_shutdown+0x34>
    return ERR_CONN;
 800ee86:	f06f 030a 	mvn.w	r3, #10
 800ee8a:	e036      	b.n	800eefa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d01b      	beq.n	800eeca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	8b5b      	ldrh	r3, [r3, #26]
 800ee96:	f043 0310 	orr.w	r3, r3, #16
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d005      	beq.n	800eeb2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800eea6:	2101      	movs	r1, #1
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	f7ff fe5d 	bl	800eb68 <tcp_close_shutdown>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	e023      	b.n	800eefa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d007      	beq.n	800eeca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff faf4 	bl	800e4ac <pbuf_free>
      pcb->refused_data = NULL;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2200      	movs	r2, #0
 800eec8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d013      	beq.n	800eef8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	7d1b      	ldrb	r3, [r3, #20]
 800eed4:	2b04      	cmp	r3, #4
 800eed6:	dc02      	bgt.n	800eede <tcp_shutdown+0x86>
 800eed8:	2b03      	cmp	r3, #3
 800eeda:	da02      	bge.n	800eee2 <tcp_shutdown+0x8a>
 800eedc:	e009      	b.n	800eef2 <tcp_shutdown+0x9a>
 800eede:	2b07      	cmp	r3, #7
 800eee0:	d107      	bne.n	800eef2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	4619      	mov	r1, r3
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f7ff fe3d 	bl	800eb68 <tcp_close_shutdown>
 800eeee:	4603      	mov	r3, r0
 800eef0:	e003      	b.n	800eefa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800eef2:	f06f 030a 	mvn.w	r3, #10
 800eef6:	e000      	b.n	800eefa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	0801c1ec 	.word	0x0801c1ec
 800ef08:	0801c314 	.word	0x0801c314
 800ef0c:	0801c230 	.word	0x0801c230

0800ef10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08e      	sub	sp, #56	; 0x38
 800ef14:	af04      	add	r7, sp, #16
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d107      	bne.n	800ef30 <tcp_abandon+0x20>
 800ef20:	4b52      	ldr	r3, [pc, #328]	; (800f06c <tcp_abandon+0x15c>)
 800ef22:	f240 223d 	movw	r2, #573	; 0x23d
 800ef26:	4952      	ldr	r1, [pc, #328]	; (800f070 <tcp_abandon+0x160>)
 800ef28:	4852      	ldr	r0, [pc, #328]	; (800f074 <tcp_abandon+0x164>)
 800ef2a:	f008 fe31 	bl	8017b90 <iprintf>
 800ef2e:	e099      	b.n	800f064 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	7d1b      	ldrb	r3, [r3, #20]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d106      	bne.n	800ef46 <tcp_abandon+0x36>
 800ef38:	4b4c      	ldr	r3, [pc, #304]	; (800f06c <tcp_abandon+0x15c>)
 800ef3a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ef3e:	494e      	ldr	r1, [pc, #312]	; (800f078 <tcp_abandon+0x168>)
 800ef40:	484c      	ldr	r0, [pc, #304]	; (800f074 <tcp_abandon+0x164>)
 800ef42:	f008 fe25 	bl	8017b90 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7d1b      	ldrb	r3, [r3, #20]
 800ef4a:	2b0a      	cmp	r3, #10
 800ef4c:	d107      	bne.n	800ef5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	484a      	ldr	r0, [pc, #296]	; (800f07c <tcp_abandon+0x16c>)
 800ef52:	f001 fa87 	bl	8010464 <tcp_pcb_remove>
    tcp_free(pcb);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff fd54 	bl	800ea04 <tcp_free>
 800ef5c:	e082      	b.n	800f064 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	7d1b      	ldrb	r3, [r3, #20]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d126      	bne.n	800efd6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8adb      	ldrh	r3, [r3, #22]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d02e      	beq.n	800efee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ef90:	4b3b      	ldr	r3, [pc, #236]	; (800f080 <tcp_abandon+0x170>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d105      	bne.n	800efa6 <tcp_abandon+0x96>
 800ef9a:	4b39      	ldr	r3, [pc, #228]	; (800f080 <tcp_abandon+0x170>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	4a37      	ldr	r2, [pc, #220]	; (800f080 <tcp_abandon+0x170>)
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	e013      	b.n	800efce <tcp_abandon+0xbe>
 800efa6:	4b36      	ldr	r3, [pc, #216]	; (800f080 <tcp_abandon+0x170>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	61fb      	str	r3, [r7, #28]
 800efac:	e00c      	b.n	800efc8 <tcp_abandon+0xb8>
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	687a      	ldr	r2, [r7, #4]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d104      	bne.n	800efc2 <tcp_abandon+0xb2>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68da      	ldr	r2, [r3, #12]
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	60da      	str	r2, [r3, #12]
 800efc0:	e005      	b.n	800efce <tcp_abandon+0xbe>
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	61fb      	str	r3, [r7, #28]
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1ef      	bne.n	800efae <tcp_abandon+0x9e>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	60da      	str	r2, [r3, #12]
 800efd4:	e00b      	b.n	800efee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8adb      	ldrh	r3, [r3, #22]
 800efde:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	4828      	ldr	r0, [pc, #160]	; (800f084 <tcp_abandon+0x174>)
 800efe4:	f001 fa3e 	bl	8010464 <tcp_pcb_remove>
 800efe8:	4b27      	ldr	r3, [pc, #156]	; (800f088 <tcp_abandon+0x178>)
 800efea:	2201      	movs	r2, #1
 800efec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d004      	beq.n	800f000 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800effa:	4618      	mov	r0, r3
 800effc:	f000 ff12 	bl	800fe24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f004:	2b00      	cmp	r3, #0
 800f006:	d004      	beq.n	800f012 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f00c:	4618      	mov	r0, r3
 800f00e:	f000 ff09 	bl	800fe24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f016:	2b00      	cmp	r3, #0
 800f018:	d004      	beq.n	800f024 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f01e:	4618      	mov	r0, r3
 800f020:	f000 ff00 	bl	800fe24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00e      	beq.n	800f048 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3304      	adds	r3, #4
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	8b12      	ldrh	r2, [r2, #24]
 800f034:	9202      	str	r2, [sp, #8]
 800f036:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f038:	9201      	str	r2, [sp, #4]
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	460b      	mov	r3, r1
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	69b9      	ldr	r1, [r7, #24]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f005 fc00 	bl	8014848 <tcp_rst>
    }
    last_state = pcb->state;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7ff fcd8 	bl	800ea04 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d004      	beq.n	800f064 <tcp_abandon+0x154>
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	f06f 010c 	mvn.w	r1, #12
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	4798      	blx	r3
  }
}
 800f064:	3728      	adds	r7, #40	; 0x28
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	0801c1ec 	.word	0x0801c1ec
 800f070:	0801c330 	.word	0x0801c330
 800f074:	0801c230 	.word	0x0801c230
 800f078:	0801c34c 	.word	0x0801c34c
 800f07c:	20011ba8 	.word	0x20011ba8
 800f080:	20011b9c 	.word	0x20011b9c
 800f084:	20011ba4 	.word	0x20011ba4
 800f088:	20011bac 	.word	0x20011bac

0800f08c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f094:	2101      	movs	r1, #1
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff ff3a 	bl	800ef10 <tcp_abandon>
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}

0800f0a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b088      	sub	sp, #32
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f0b2:	2304      	movs	r3, #4
 800f0b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f0bc:	4b3e      	ldr	r3, [pc, #248]	; (800f1b8 <tcp_bind+0x114>)
 800f0be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d109      	bne.n	800f0da <tcp_bind+0x36>
 800f0c6:	4b3d      	ldr	r3, [pc, #244]	; (800f1bc <tcp_bind+0x118>)
 800f0c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f0cc:	493c      	ldr	r1, [pc, #240]	; (800f1c0 <tcp_bind+0x11c>)
 800f0ce:	483d      	ldr	r0, [pc, #244]	; (800f1c4 <tcp_bind+0x120>)
 800f0d0:	f008 fd5e 	bl	8017b90 <iprintf>
 800f0d4:	f06f 030f 	mvn.w	r3, #15
 800f0d8:	e06a      	b.n	800f1b0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	7d1b      	ldrb	r3, [r3, #20]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <tcp_bind+0x52>
 800f0e2:	4b36      	ldr	r3, [pc, #216]	; (800f1bc <tcp_bind+0x118>)
 800f0e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f0e8:	4937      	ldr	r1, [pc, #220]	; (800f1c8 <tcp_bind+0x124>)
 800f0ea:	4836      	ldr	r0, [pc, #216]	; (800f1c4 <tcp_bind+0x120>)
 800f0ec:	f008 fd50 	bl	8017b90 <iprintf>
 800f0f0:	f06f 0305 	mvn.w	r3, #5
 800f0f4:	e05c      	b.n	800f1b0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f0f6:	88fb      	ldrh	r3, [r7, #6]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d109      	bne.n	800f110 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f0fc:	f000 f914 	bl	800f328 <tcp_new_port>
 800f100:	4603      	mov	r3, r0
 800f102:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f104:	88fb      	ldrh	r3, [r7, #6]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d135      	bne.n	800f176 <tcp_bind+0xd2>
      return ERR_BUF;
 800f10a:	f06f 0301 	mvn.w	r3, #1
 800f10e:	e04f      	b.n	800f1b0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f110:	2300      	movs	r3, #0
 800f112:	61fb      	str	r3, [r7, #28]
 800f114:	e02b      	b.n	800f16e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f116:	4a2d      	ldr	r2, [pc, #180]	; (800f1cc <tcp_bind+0x128>)
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	61bb      	str	r3, [r7, #24]
 800f122:	e01e      	b.n	800f162 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	8adb      	ldrh	r3, [r3, #22]
 800f128:	88fa      	ldrh	r2, [r7, #6]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d116      	bne.n	800f15c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f12e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f130:	2b00      	cmp	r3, #0
 800f132:	d010      	beq.n	800f156 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00c      	beq.n	800f156 <tcp_bind+0xb2>
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d009      	beq.n	800f156 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d005      	beq.n	800f156 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f14a:	69bb      	ldr	r3, [r7, #24]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f152:	429a      	cmp	r2, r3
 800f154:	d102      	bne.n	800f15c <tcp_bind+0xb8>
              return ERR_USE;
 800f156:	f06f 0307 	mvn.w	r3, #7
 800f15a:	e029      	b.n	800f1b0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	61bb      	str	r3, [r7, #24]
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1dd      	bne.n	800f124 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	3301      	adds	r3, #1
 800f16c:	61fb      	str	r3, [r7, #28]
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	429a      	cmp	r2, r3
 800f174:	dbcf      	blt.n	800f116 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d00c      	beq.n	800f196 <tcp_bind+0xf2>
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d008      	beq.n	800f196 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <tcp_bind+0xec>
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	e000      	b.n	800f192 <tcp_bind+0xee>
 800f190:	2300      	movs	r3, #0
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	88fa      	ldrh	r2, [r7, #6]
 800f19a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f19c:	4b0c      	ldr	r3, [pc, #48]	; (800f1d0 <tcp_bind+0x12c>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	60da      	str	r2, [r3, #12]
 800f1a4:	4a0a      	ldr	r2, [pc, #40]	; (800f1d0 <tcp_bind+0x12c>)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	f005 fd0f 	bl	8014bcc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3720      	adds	r7, #32
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	0801df70 	.word	0x0801df70
 800f1bc:	0801c1ec 	.word	0x0801c1ec
 800f1c0:	0801c380 	.word	0x0801c380
 800f1c4:	0801c230 	.word	0x0801c230
 800f1c8:	0801c398 	.word	0x0801c398
 800f1cc:	0801df48 	.word	0x0801df48
 800f1d0:	20011b9c 	.word	0x20011b9c

0800f1d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <tcp_update_rcv_ann_wnd+0x1c>
 800f1e2:	4b25      	ldr	r3, [pc, #148]	; (800f278 <tcp_update_rcv_ann_wnd+0xa4>)
 800f1e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f1e8:	4924      	ldr	r1, [pc, #144]	; (800f27c <tcp_update_rcv_ann_wnd+0xa8>)
 800f1ea:	4825      	ldr	r0, [pc, #148]	; (800f280 <tcp_update_rcv_ann_wnd+0xac>)
 800f1ec:	f008 fcd0 	bl	8017b90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f1f8:	4413      	add	r3, r2
 800f1fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f204:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f208:	bf28      	it	cs
 800f20a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f20e:	b292      	uxth	r2, r2
 800f210:	4413      	add	r3, r2
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	2b00      	cmp	r3, #0
 800f218:	db08      	blt.n	800f22c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	1ad3      	subs	r3, r2, r3
 800f22a:	e020      	b.n	800f26e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	dd03      	ble.n	800f242 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f240:	e014      	b.n	800f26c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f254:	d306      	bcc.n	800f264 <tcp_update_rcv_ann_wnd+0x90>
 800f256:	4b08      	ldr	r3, [pc, #32]	; (800f278 <tcp_update_rcv_ann_wnd+0xa4>)
 800f258:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f25c:	4909      	ldr	r1, [pc, #36]	; (800f284 <tcp_update_rcv_ann_wnd+0xb0>)
 800f25e:	4808      	ldr	r0, [pc, #32]	; (800f280 <tcp_update_rcv_ann_wnd+0xac>)
 800f260:	f008 fc96 	bl	8017b90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	b29a      	uxth	r2, r3
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f26c:	2300      	movs	r3, #0
  }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	0801c1ec 	.word	0x0801c1ec
 800f27c:	0801c448 	.word	0x0801c448
 800f280:	0801c230 	.word	0x0801c230
 800f284:	0801c46c 	.word	0x0801c46c

0800f288 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d107      	bne.n	800f2aa <tcp_recved+0x22>
 800f29a:	4b1f      	ldr	r3, [pc, #124]	; (800f318 <tcp_recved+0x90>)
 800f29c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f2a0:	491e      	ldr	r1, [pc, #120]	; (800f31c <tcp_recved+0x94>)
 800f2a2:	481f      	ldr	r0, [pc, #124]	; (800f320 <tcp_recved+0x98>)
 800f2a4:	f008 fc74 	bl	8017b90 <iprintf>
 800f2a8:	e032      	b.n	800f310 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	7d1b      	ldrb	r3, [r3, #20]
 800f2ae:	2b01      	cmp	r3, #1
 800f2b0:	d106      	bne.n	800f2c0 <tcp_recved+0x38>
 800f2b2:	4b19      	ldr	r3, [pc, #100]	; (800f318 <tcp_recved+0x90>)
 800f2b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f2b8:	491a      	ldr	r1, [pc, #104]	; (800f324 <tcp_recved+0x9c>)
 800f2ba:	4819      	ldr	r0, [pc, #100]	; (800f320 <tcp_recved+0x98>)
 800f2bc:	f008 fc68 	bl	8017b90 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2c4:	887b      	ldrh	r3, [r7, #2]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f2ca:	89fb      	ldrh	r3, [r7, #14]
 800f2cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f2d0:	d804      	bhi.n	800f2dc <tcp_recved+0x54>
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2d6:	89fa      	ldrh	r2, [r7, #14]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d204      	bcs.n	800f2e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f2e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800f2e4:	e002      	b.n	800f2ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	89fa      	ldrh	r2, [r7, #14]
 800f2ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff ff71 	bl	800f1d4 <tcp_update_rcv_ann_wnd>
 800f2f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f2fa:	d309      	bcc.n	800f310 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	8b5b      	ldrh	r3, [r3, #26]
 800f300:	f043 0302 	orr.w	r3, r3, #2
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f004 fcc6 	bl	8013c9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	0801c1ec 	.word	0x0801c1ec
 800f31c:	0801c488 	.word	0x0801c488
 800f320:	0801c230 	.word	0x0801c230
 800f324:	0801c4a0 	.word	0x0801c4a0

0800f328 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f332:	4b1e      	ldr	r3, [pc, #120]	; (800f3ac <tcp_new_port+0x84>)
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	3301      	adds	r3, #1
 800f338:	b29a      	uxth	r2, r3
 800f33a:	4b1c      	ldr	r3, [pc, #112]	; (800f3ac <tcp_new_port+0x84>)
 800f33c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f33e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ac <tcp_new_port+0x84>)
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f346:	4293      	cmp	r3, r2
 800f348:	d103      	bne.n	800f352 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f34a:	4b18      	ldr	r3, [pc, #96]	; (800f3ac <tcp_new_port+0x84>)
 800f34c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f350:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f352:	2300      	movs	r3, #0
 800f354:	71fb      	strb	r3, [r7, #7]
 800f356:	e01e      	b.n	800f396 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f358:	79fb      	ldrb	r3, [r7, #7]
 800f35a:	4a15      	ldr	r2, [pc, #84]	; (800f3b0 <tcp_new_port+0x88>)
 800f35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	603b      	str	r3, [r7, #0]
 800f364:	e011      	b.n	800f38a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	8ada      	ldrh	r2, [r3, #22]
 800f36a:	4b10      	ldr	r3, [pc, #64]	; (800f3ac <tcp_new_port+0x84>)
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d108      	bne.n	800f384 <tcp_new_port+0x5c>
        n++;
 800f372:	88bb      	ldrh	r3, [r7, #4]
 800f374:	3301      	adds	r3, #1
 800f376:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f378:	88bb      	ldrh	r3, [r7, #4]
 800f37a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f37e:	d3d8      	bcc.n	800f332 <tcp_new_port+0xa>
          return 0;
 800f380:	2300      	movs	r3, #0
 800f382:	e00d      	b.n	800f3a0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	603b      	str	r3, [r7, #0]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1ea      	bne.n	800f366 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	3301      	adds	r3, #1
 800f394:	71fb      	strb	r3, [r7, #7]
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d9dd      	bls.n	800f358 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f39c:	4b03      	ldr	r3, [pc, #12]	; (800f3ac <tcp_new_port+0x84>)
 800f39e:	881b      	ldrh	r3, [r3, #0]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	20000024 	.word	0x20000024
 800f3b0:	0801df48 	.word	0x0801df48

0800f3b4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08a      	sub	sp, #40	; 0x28
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	603b      	str	r3, [r7, #0]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d109      	bne.n	800f3e2 <tcp_connect+0x2e>
 800f3ce:	4b7d      	ldr	r3, [pc, #500]	; (800f5c4 <tcp_connect+0x210>)
 800f3d0:	f240 4235 	movw	r2, #1077	; 0x435
 800f3d4:	497c      	ldr	r1, [pc, #496]	; (800f5c8 <tcp_connect+0x214>)
 800f3d6:	487d      	ldr	r0, [pc, #500]	; (800f5cc <tcp_connect+0x218>)
 800f3d8:	f008 fbda 	bl	8017b90 <iprintf>
 800f3dc:	f06f 030f 	mvn.w	r3, #15
 800f3e0:	e0ec      	b.n	800f5bc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d109      	bne.n	800f3fc <tcp_connect+0x48>
 800f3e8:	4b76      	ldr	r3, [pc, #472]	; (800f5c4 <tcp_connect+0x210>)
 800f3ea:	f240 4236 	movw	r2, #1078	; 0x436
 800f3ee:	4978      	ldr	r1, [pc, #480]	; (800f5d0 <tcp_connect+0x21c>)
 800f3f0:	4876      	ldr	r0, [pc, #472]	; (800f5cc <tcp_connect+0x218>)
 800f3f2:	f008 fbcd 	bl	8017b90 <iprintf>
 800f3f6:	f06f 030f 	mvn.w	r3, #15
 800f3fa:	e0df      	b.n	800f5bc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	7d1b      	ldrb	r3, [r3, #20]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d009      	beq.n	800f418 <tcp_connect+0x64>
 800f404:	4b6f      	ldr	r3, [pc, #444]	; (800f5c4 <tcp_connect+0x210>)
 800f406:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800f40a:	4972      	ldr	r1, [pc, #456]	; (800f5d4 <tcp_connect+0x220>)
 800f40c:	486f      	ldr	r0, [pc, #444]	; (800f5cc <tcp_connect+0x218>)
 800f40e:	f008 fbbf 	bl	8017b90 <iprintf>
 800f412:	f06f 0309 	mvn.w	r3, #9
 800f416:	e0d1      	b.n	800f5bc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <tcp_connect+0x70>
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	e000      	b.n	800f426 <tcp_connect+0x72>
 800f424:	2300      	movs	r3, #0
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	88fa      	ldrh	r2, [r7, #6]
 800f42e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	7a1b      	ldrb	r3, [r3, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	7a1b      	ldrb	r3, [r3, #8]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fe fca7 	bl	800dd90 <netif_get_by_index>
 800f442:	6278      	str	r0, [r7, #36]	; 0x24
 800f444:	e005      	b.n	800f452 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	3304      	adds	r3, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f006 fe12 	bl	8016074 <ip4_route>
 800f450:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800f452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800f458:	f06f 0303 	mvn.w	r3, #3
 800f45c:	e0ae      	b.n	800f5bc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <tcp_connect+0xb8>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d111      	bne.n	800f490 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d002      	beq.n	800f478 <tcp_connect+0xc4>
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	3304      	adds	r3, #4
 800f476:	e000      	b.n	800f47a <tcp_connect+0xc6>
 800f478:	2300      	movs	r3, #0
 800f47a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d102      	bne.n	800f488 <tcp_connect+0xd4>
      return ERR_RTE;
 800f482:	f06f 0303 	mvn.w	r3, #3
 800f486:	e099      	b.n	800f5bc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	8adb      	ldrh	r3, [r3, #22]
 800f494:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	8adb      	ldrh	r3, [r3, #22]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10c      	bne.n	800f4b8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800f49e:	f7ff ff43 	bl	800f328 <tcp_new_port>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	8adb      	ldrh	r3, [r3, #22]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d102      	bne.n	800f4b8 <tcp_connect+0x104>
      return ERR_BUF;
 800f4b2:	f06f 0301 	mvn.w	r3, #1
 800f4b6:	e081      	b.n	800f5bc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f001 f867 	bl	801058c <tcp_next_iss>
 800f4be:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	1e5a      	subs	r2, r3, #1
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	1e5a      	subs	r2, r3, #1
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	1e5a      	subs	r2, r3, #1
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f4ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f502:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f50c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3304      	adds	r3, #4
 800f516:	461a      	mov	r2, r3
 800f518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f51a:	f001 f85d 	bl	80105d8 <tcp_eff_send_mss_netif>
 800f51e:	4603      	mov	r3, r0
 800f520:	461a      	mov	r2, r3
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2201      	movs	r2, #1
 800f52a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800f536:	2102      	movs	r1, #2
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f004 fac1 	bl	8013ac0 <tcp_enqueue_flags>
 800f53e:	4603      	mov	r3, r0
 800f540:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800f542:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d136      	bne.n	800f5b8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2202      	movs	r2, #2
 800f54e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800f550:	8b7b      	ldrh	r3, [r7, #26]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d021      	beq.n	800f59a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800f556:	4b20      	ldr	r3, [pc, #128]	; (800f5d8 <tcp_connect+0x224>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d105      	bne.n	800f56c <tcp_connect+0x1b8>
 800f560:	4b1d      	ldr	r3, [pc, #116]	; (800f5d8 <tcp_connect+0x224>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	4a1c      	ldr	r2, [pc, #112]	; (800f5d8 <tcp_connect+0x224>)
 800f568:	6013      	str	r3, [r2, #0]
 800f56a:	e013      	b.n	800f594 <tcp_connect+0x1e0>
 800f56c:	4b1a      	ldr	r3, [pc, #104]	; (800f5d8 <tcp_connect+0x224>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	623b      	str	r3, [r7, #32]
 800f572:	e00c      	b.n	800f58e <tcp_connect+0x1da>
 800f574:	6a3b      	ldr	r3, [r7, #32]
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d104      	bne.n	800f588 <tcp_connect+0x1d4>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	68da      	ldr	r2, [r3, #12]
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	60da      	str	r2, [r3, #12]
 800f586:	e005      	b.n	800f594 <tcp_connect+0x1e0>
 800f588:	6a3b      	ldr	r3, [r7, #32]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	623b      	str	r3, [r7, #32]
 800f58e:	6a3b      	ldr	r3, [r7, #32]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1ef      	bne.n	800f574 <tcp_connect+0x1c0>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2200      	movs	r2, #0
 800f598:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800f59a:	4b10      	ldr	r3, [pc, #64]	; (800f5dc <tcp_connect+0x228>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	4a0e      	ldr	r2, [pc, #56]	; (800f5dc <tcp_connect+0x228>)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	6013      	str	r3, [r2, #0]
 800f5a8:	f005 fb10 	bl	8014bcc <tcp_timer_needed>
 800f5ac:	4b0c      	ldr	r3, [pc, #48]	; (800f5e0 <tcp_connect+0x22c>)
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f004 fb72 	bl	8013c9c <tcp_output>
  }
  return ret;
 800f5b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3728      	adds	r7, #40	; 0x28
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	0801c1ec 	.word	0x0801c1ec
 800f5c8:	0801c4c8 	.word	0x0801c4c8
 800f5cc:	0801c230 	.word	0x0801c230
 800f5d0:	0801c4e4 	.word	0x0801c4e4
 800f5d4:	0801c500 	.word	0x0801c500
 800f5d8:	20011b9c 	.word	0x20011b9c
 800f5dc:	20011ba4 	.word	0x20011ba4
 800f5e0:	20011bac 	.word	0x20011bac

0800f5e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f5e4:	b5b0      	push	{r4, r5, r7, lr}
 800f5e6:	b090      	sub	sp, #64	; 0x40
 800f5e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f5f0:	4b94      	ldr	r3, [pc, #592]	; (800f844 <tcp_slowtmr+0x260>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	4a93      	ldr	r2, [pc, #588]	; (800f844 <tcp_slowtmr+0x260>)
 800f5f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f5fa:	4b93      	ldr	r3, [pc, #588]	; (800f848 <tcp_slowtmr+0x264>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	b2da      	uxtb	r2, r3
 800f602:	4b91      	ldr	r3, [pc, #580]	; (800f848 <tcp_slowtmr+0x264>)
 800f604:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f606:	2300      	movs	r3, #0
 800f608:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f60a:	4b90      	ldr	r3, [pc, #576]	; (800f84c <tcp_slowtmr+0x268>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f610:	e29d      	b.n	800fb4e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f614:	7d1b      	ldrb	r3, [r3, #20]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <tcp_slowtmr+0x44>
 800f61a:	4b8d      	ldr	r3, [pc, #564]	; (800f850 <tcp_slowtmr+0x26c>)
 800f61c:	f240 42be 	movw	r2, #1214	; 0x4be
 800f620:	498c      	ldr	r1, [pc, #560]	; (800f854 <tcp_slowtmr+0x270>)
 800f622:	488d      	ldr	r0, [pc, #564]	; (800f858 <tcp_slowtmr+0x274>)
 800f624:	f008 fab4 	bl	8017b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d106      	bne.n	800f63e <tcp_slowtmr+0x5a>
 800f630:	4b87      	ldr	r3, [pc, #540]	; (800f850 <tcp_slowtmr+0x26c>)
 800f632:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f636:	4989      	ldr	r1, [pc, #548]	; (800f85c <tcp_slowtmr+0x278>)
 800f638:	4887      	ldr	r0, [pc, #540]	; (800f858 <tcp_slowtmr+0x274>)
 800f63a:	f008 faa9 	bl	8017b90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	7d1b      	ldrb	r3, [r3, #20]
 800f642:	2b0a      	cmp	r3, #10
 800f644:	d106      	bne.n	800f654 <tcp_slowtmr+0x70>
 800f646:	4b82      	ldr	r3, [pc, #520]	; (800f850 <tcp_slowtmr+0x26c>)
 800f648:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f64c:	4984      	ldr	r1, [pc, #528]	; (800f860 <tcp_slowtmr+0x27c>)
 800f64e:	4882      	ldr	r0, [pc, #520]	; (800f858 <tcp_slowtmr+0x274>)
 800f650:	f008 fa9e 	bl	8017b90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f656:	7f9a      	ldrb	r2, [r3, #30]
 800f658:	4b7b      	ldr	r3, [pc, #492]	; (800f848 <tcp_slowtmr+0x264>)
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d105      	bne.n	800f66c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f66a:	e270      	b.n	800fb4e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f66c:	4b76      	ldr	r3, [pc, #472]	; (800f848 <tcp_slowtmr+0x264>)
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f672:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f674:	2300      	movs	r3, #0
 800f676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f682:	7d1b      	ldrb	r3, [r3, #20]
 800f684:	2b02      	cmp	r3, #2
 800f686:	d10a      	bne.n	800f69e <tcp_slowtmr+0xba>
 800f688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f68e:	2b05      	cmp	r3, #5
 800f690:	d905      	bls.n	800f69e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f696:	3301      	adds	r3, #1
 800f698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f69c:	e11e      	b.n	800f8dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6a4:	2b0b      	cmp	r3, #11
 800f6a6:	d905      	bls.n	800f6b4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6b2:	e113      	b.n	800f8dc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d075      	beq.n	800f7aa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d006      	beq.n	800f6d4 <tcp_slowtmr+0xf0>
 800f6c6:	4b62      	ldr	r3, [pc, #392]	; (800f850 <tcp_slowtmr+0x26c>)
 800f6c8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f6cc:	4965      	ldr	r1, [pc, #404]	; (800f864 <tcp_slowtmr+0x280>)
 800f6ce:	4862      	ldr	r0, [pc, #392]	; (800f858 <tcp_slowtmr+0x274>)
 800f6d0:	f008 fa5e 	bl	8017b90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d106      	bne.n	800f6ea <tcp_slowtmr+0x106>
 800f6dc:	4b5c      	ldr	r3, [pc, #368]	; (800f850 <tcp_slowtmr+0x26c>)
 800f6de:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f6e2:	4961      	ldr	r1, [pc, #388]	; (800f868 <tcp_slowtmr+0x284>)
 800f6e4:	485c      	ldr	r0, [pc, #368]	; (800f858 <tcp_slowtmr+0x274>)
 800f6e6:	f008 fa53 	bl	8017b90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f6f0:	2b0b      	cmp	r3, #11
 800f6f2:	d905      	bls.n	800f700 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6fe:	e0ed      	b.n	800f8dc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f702:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f706:	3b01      	subs	r3, #1
 800f708:	4a58      	ldr	r2, [pc, #352]	; (800f86c <tcp_slowtmr+0x288>)
 800f70a:	5cd3      	ldrb	r3, [r2, r3]
 800f70c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f714:	7c7a      	ldrb	r2, [r7, #17]
 800f716:	429a      	cmp	r2, r3
 800f718:	d907      	bls.n	800f72a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f720:	3301      	adds	r3, #1
 800f722:	b2da      	uxtb	r2, r3
 800f724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f726:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f730:	7c7a      	ldrb	r2, [r7, #17]
 800f732:	429a      	cmp	r2, r3
 800f734:	f200 80d2 	bhi.w	800f8dc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f738:	2301      	movs	r3, #1
 800f73a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f742:	2b00      	cmp	r3, #0
 800f744:	d108      	bne.n	800f758 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f748:	f005 f972 	bl	8014a30 <tcp_zero_window_probe>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d014      	beq.n	800f77c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f752:	2300      	movs	r3, #0
 800f754:	623b      	str	r3, [r7, #32]
 800f756:	e011      	b.n	800f77c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f75e:	4619      	mov	r1, r3
 800f760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f762:	f004 f815 	bl	8013790 <tcp_split_unsent_seg>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d107      	bne.n	800f77c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f76c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f76e:	f004 fa95 	bl	8013c9c <tcp_output>
 800f772:	4603      	mov	r3, r0
 800f774:	2b00      	cmp	r3, #0
 800f776:	d101      	bne.n	800f77c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f77c:	6a3b      	ldr	r3, [r7, #32]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f000 80ac 	beq.w	800f8dc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	2200      	movs	r2, #0
 800f788:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f792:	2b06      	cmp	r3, #6
 800f794:	f200 80a2 	bhi.w	800f8dc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f79e:	3301      	adds	r3, #1
 800f7a0:	b2da      	uxtb	r2, r3
 800f7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7a8:	e098      	b.n	800f8dc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	db0f      	blt.n	800f7d4 <tcp_slowtmr+0x1f0>
 800f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d008      	beq.n	800f7d4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	b21a      	sxth	r2, r3
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	db7b      	blt.n	800f8dc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f7e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7e6:	f004 fd5d 	bl	80142a4 <tcp_rexmit_rto_prepare>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d007      	beq.n	800f800 <tcp_slowtmr+0x21c>
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d171      	bne.n	800f8dc <tcp_slowtmr+0x2f8>
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d06d      	beq.n	800f8dc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	7d1b      	ldrb	r3, [r3, #20]
 800f804:	2b02      	cmp	r3, #2
 800f806:	d03a      	beq.n	800f87e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f80e:	2b0c      	cmp	r3, #12
 800f810:	bf28      	it	cs
 800f812:	230c      	movcs	r3, #12
 800f814:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f81c:	10db      	asrs	r3, r3, #3
 800f81e:	b21b      	sxth	r3, r3
 800f820:	461a      	mov	r2, r3
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f828:	4413      	add	r3, r2
 800f82a:	7efa      	ldrb	r2, [r7, #27]
 800f82c:	4910      	ldr	r1, [pc, #64]	; (800f870 <tcp_slowtmr+0x28c>)
 800f82e:	5c8a      	ldrb	r2, [r1, r2]
 800f830:	4093      	lsls	r3, r2
 800f832:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f83a:	4293      	cmp	r3, r2
 800f83c:	dc1a      	bgt.n	800f874 <tcp_slowtmr+0x290>
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	b21a      	sxth	r2, r3
 800f842:	e019      	b.n	800f878 <tcp_slowtmr+0x294>
 800f844:	20011b98 	.word	0x20011b98
 800f848:	20011bae 	.word	0x20011bae
 800f84c:	20011ba4 	.word	0x20011ba4
 800f850:	0801c1ec 	.word	0x0801c1ec
 800f854:	0801c530 	.word	0x0801c530
 800f858:	0801c230 	.word	0x0801c230
 800f85c:	0801c55c 	.word	0x0801c55c
 800f860:	0801c588 	.word	0x0801c588
 800f864:	0801c5b8 	.word	0x0801c5b8
 800f868:	0801c5ec 	.word	0x0801c5ec
 800f86c:	0801df40 	.word	0x0801df40
 800f870:	0801df30 	.word	0x0801df30
 800f874:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f87a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	2200      	movs	r2, #0
 800f882:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f886:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f890:	4293      	cmp	r3, r2
 800f892:	bf28      	it	cs
 800f894:	4613      	movcs	r3, r2
 800f896:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f898:	8a7b      	ldrh	r3, [r7, #18]
 800f89a:	085b      	lsrs	r3, r3, #1
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ae:	005b      	lsls	r3, r3, #1
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d206      	bcs.n	800f8c4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f8d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8d8:	f004 fd54 	bl	8014384 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8de:	7d1b      	ldrb	r3, [r3, #20]
 800f8e0:	2b06      	cmp	r3, #6
 800f8e2:	d111      	bne.n	800f908 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e6:	8b5b      	ldrh	r3, [r3, #26]
 800f8e8:	f003 0310 	and.w	r3, r3, #16
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00b      	beq.n	800f908 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f8f0:	4b9c      	ldr	r3, [pc, #624]	; (800fb64 <tcp_slowtmr+0x580>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	6a1b      	ldr	r3, [r3, #32]
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	2b28      	cmp	r3, #40	; 0x28
 800f8fc:	d904      	bls.n	800f908 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f902:	3301      	adds	r3, #1
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	7a5b      	ldrb	r3, [r3, #9]
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b00      	cmp	r3, #0
 800f912:	d04a      	beq.n	800f9aa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f916:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f918:	2b04      	cmp	r3, #4
 800f91a:	d003      	beq.n	800f924 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f920:	2b07      	cmp	r3, #7
 800f922:	d142      	bne.n	800f9aa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f924:	4b8f      	ldr	r3, [pc, #572]	; (800fb64 <tcp_slowtmr+0x580>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	6a1b      	ldr	r3, [r3, #32]
 800f92c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f930:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f934:	4b8c      	ldr	r3, [pc, #560]	; (800fb68 <tcp_slowtmr+0x584>)
 800f936:	440b      	add	r3, r1
 800f938:	498c      	ldr	r1, [pc, #560]	; (800fb6c <tcp_slowtmr+0x588>)
 800f93a:	fba1 1303 	umull	r1, r3, r1, r3
 800f93e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f940:	429a      	cmp	r2, r3
 800f942:	d90a      	bls.n	800f95a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f948:	3301      	adds	r3, #1
 800f94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f94e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f952:	3301      	adds	r3, #1
 800f954:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f958:	e027      	b.n	800f9aa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f95a:	4b82      	ldr	r3, [pc, #520]	; (800fb64 <tcp_slowtmr+0x580>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f970:	4618      	mov	r0, r3
 800f972:	4b7f      	ldr	r3, [pc, #508]	; (800fb70 <tcp_slowtmr+0x58c>)
 800f974:	fb00 f303 	mul.w	r3, r0, r3
 800f978:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f97a:	497c      	ldr	r1, [pc, #496]	; (800fb6c <tcp_slowtmr+0x588>)
 800f97c:	fba1 1303 	umull	r1, r3, r1, r3
 800f980:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f982:	429a      	cmp	r2, r3
 800f984:	d911      	bls.n	800f9aa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f986:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f988:	f005 f812 	bl	80149b0 <tcp_keepalive>
 800f98c:	4603      	mov	r3, r0
 800f98e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f992:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f996:	2b00      	cmp	r3, #0
 800f998:	d107      	bne.n	800f9aa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	b2da      	uxtb	r2, r3
 800f9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d011      	beq.n	800f9d6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f9b2:	4b6c      	ldr	r3, [pc, #432]	; (800fb64 <tcp_slowtmr+0x580>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	1ad2      	subs	r2, r2, r3
 800f9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	440b      	add	r3, r1
 800f9ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d302      	bcc.n	800f9d6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f9d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d2:	f000 feab 	bl	801072c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d8:	7d1b      	ldrb	r3, [r3, #20]
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d10b      	bne.n	800f9f6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9de:	4b61      	ldr	r3, [pc, #388]	; (800fb64 <tcp_slowtmr+0x580>)
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e4:	6a1b      	ldr	r3, [r3, #32]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b28      	cmp	r3, #40	; 0x28
 800f9ea:	d904      	bls.n	800f9f6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f8:	7d1b      	ldrb	r3, [r3, #20]
 800f9fa:	2b09      	cmp	r3, #9
 800f9fc:	d10b      	bne.n	800fa16 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f9fe:	4b59      	ldr	r3, [pc, #356]	; (800fb64 <tcp_slowtmr+0x580>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	2bf0      	cmp	r3, #240	; 0xf0
 800fa0a:	d904      	bls.n	800fa16 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fa0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa10:	3301      	adds	r3, #1
 800fa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d060      	beq.n	800fae0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa24:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa28:	f000 fccc 	bl	80103c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d010      	beq.n	800fa54 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa32:	4b50      	ldr	r3, [pc, #320]	; (800fb74 <tcp_slowtmr+0x590>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d106      	bne.n	800fa4a <tcp_slowtmr+0x466>
 800fa3c:	4b4e      	ldr	r3, [pc, #312]	; (800fb78 <tcp_slowtmr+0x594>)
 800fa3e:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa42:	494e      	ldr	r1, [pc, #312]	; (800fb7c <tcp_slowtmr+0x598>)
 800fa44:	484e      	ldr	r0, [pc, #312]	; (800fb80 <tcp_slowtmr+0x59c>)
 800fa46:	f008 f8a3 	bl	8017b90 <iprintf>
        prev->next = pcb->next;
 800fa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4c:	68da      	ldr	r2, [r3, #12]
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	60da      	str	r2, [r3, #12]
 800fa52:	e00f      	b.n	800fa74 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fa54:	4b47      	ldr	r3, [pc, #284]	; (800fb74 <tcp_slowtmr+0x590>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d006      	beq.n	800fa6c <tcp_slowtmr+0x488>
 800fa5e:	4b46      	ldr	r3, [pc, #280]	; (800fb78 <tcp_slowtmr+0x594>)
 800fa60:	f240 5271 	movw	r2, #1393	; 0x571
 800fa64:	4947      	ldr	r1, [pc, #284]	; (800fb84 <tcp_slowtmr+0x5a0>)
 800fa66:	4846      	ldr	r0, [pc, #280]	; (800fb80 <tcp_slowtmr+0x59c>)
 800fa68:	f008 f892 	bl	8017b90 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	4a40      	ldr	r2, [pc, #256]	; (800fb74 <tcp_slowtmr+0x590>)
 800fa72:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fa74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d013      	beq.n	800faa4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fa84:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	3304      	adds	r3, #4
 800fa8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa8c:	8ad2      	ldrh	r2, [r2, #22]
 800fa8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa90:	8b09      	ldrh	r1, [r1, #24]
 800fa92:	9102      	str	r1, [sp, #8]
 800fa94:	9201      	str	r2, [sp, #4]
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	462b      	mov	r3, r5
 800fa9a:	4622      	mov	r2, r4
 800fa9c:	4601      	mov	r1, r0
 800fa9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faa0:	f004 fed2 	bl	8014848 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800faa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa6:	691b      	ldr	r3, [r3, #16]
 800faa8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800faba:	6838      	ldr	r0, [r7, #0]
 800fabc:	f7fe ffa2 	bl	800ea04 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fac0:	4b31      	ldr	r3, [pc, #196]	; (800fb88 <tcp_slowtmr+0x5a4>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d004      	beq.n	800fad6 <tcp_slowtmr+0x4f2>
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f06f 010c 	mvn.w	r1, #12
 800fad2:	68b8      	ldr	r0, [r7, #8]
 800fad4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fad6:	4b2c      	ldr	r3, [pc, #176]	; (800fb88 <tcp_slowtmr+0x5a4>)
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d037      	beq.n	800fb4e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fade:	e592      	b.n	800f606 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faec:	7f1b      	ldrb	r3, [r3, #28]
 800faee:	3301      	adds	r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf8:	7f1a      	ldrb	r2, [r3, #28]
 800fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafc:	7f5b      	ldrb	r3, [r3, #29]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d325      	bcc.n	800fb4e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb04:	2200      	movs	r2, #0
 800fb06:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb08:	4b1f      	ldr	r3, [pc, #124]	; (800fb88 <tcp_slowtmr+0x5a4>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00b      	beq.n	800fb30 <tcp_slowtmr+0x54c>
 800fb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb20:	6912      	ldr	r2, [r2, #16]
 800fb22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb24:	4610      	mov	r0, r2
 800fb26:	4798      	blx	r3
 800fb28:	4603      	mov	r3, r0
 800fb2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb2e:	e002      	b.n	800fb36 <tcp_slowtmr+0x552>
 800fb30:	2300      	movs	r3, #0
 800fb32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb36:	4b14      	ldr	r3, [pc, #80]	; (800fb88 <tcp_slowtmr+0x5a4>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d000      	beq.n	800fb40 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fb3e:	e562      	b.n	800f606 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d102      	bne.n	800fb4e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fb48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb4a:	f004 f8a7 	bl	8013c9c <tcp_output>
  while (pcb != NULL) {
 800fb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f47f ad5e 	bne.w	800f612 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fb5a:	4b0c      	ldr	r3, [pc, #48]	; (800fb8c <tcp_slowtmr+0x5a8>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fb60:	e069      	b.n	800fc36 <tcp_slowtmr+0x652>
 800fb62:	bf00      	nop
 800fb64:	20011b98 	.word	0x20011b98
 800fb68:	000a4cb8 	.word	0x000a4cb8
 800fb6c:	10624dd3 	.word	0x10624dd3
 800fb70:	000124f8 	.word	0x000124f8
 800fb74:	20011ba4 	.word	0x20011ba4
 800fb78:	0801c1ec 	.word	0x0801c1ec
 800fb7c:	0801c624 	.word	0x0801c624
 800fb80:	0801c230 	.word	0x0801c230
 800fb84:	0801c650 	.word	0x0801c650
 800fb88:	20011bac 	.word	0x20011bac
 800fb8c:	20011ba8 	.word	0x20011ba8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb92:	7d1b      	ldrb	r3, [r3, #20]
 800fb94:	2b0a      	cmp	r3, #10
 800fb96:	d006      	beq.n	800fba6 <tcp_slowtmr+0x5c2>
 800fb98:	4b2b      	ldr	r3, [pc, #172]	; (800fc48 <tcp_slowtmr+0x664>)
 800fb9a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fb9e:	492b      	ldr	r1, [pc, #172]	; (800fc4c <tcp_slowtmr+0x668>)
 800fba0:	482b      	ldr	r0, [pc, #172]	; (800fc50 <tcp_slowtmr+0x66c>)
 800fba2:	f007 fff5 	bl	8017b90 <iprintf>
    pcb_remove = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbac:	4b29      	ldr	r3, [pc, #164]	; (800fc54 <tcp_slowtmr+0x670>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	6a1b      	ldr	r3, [r3, #32]
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	2bf0      	cmp	r3, #240	; 0xf0
 800fbb8:	d904      	bls.n	800fbc4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d02f      	beq.n	800fc2c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fbcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbce:	f000 fbf9 	bl	80103c4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d010      	beq.n	800fbfa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fbd8:	4b1f      	ldr	r3, [pc, #124]	; (800fc58 <tcp_slowtmr+0x674>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d106      	bne.n	800fbf0 <tcp_slowtmr+0x60c>
 800fbe2:	4b19      	ldr	r3, [pc, #100]	; (800fc48 <tcp_slowtmr+0x664>)
 800fbe4:	f240 52af 	movw	r2, #1455	; 0x5af
 800fbe8:	491c      	ldr	r1, [pc, #112]	; (800fc5c <tcp_slowtmr+0x678>)
 800fbea:	4819      	ldr	r0, [pc, #100]	; (800fc50 <tcp_slowtmr+0x66c>)
 800fbec:	f007 ffd0 	bl	8017b90 <iprintf>
        prev->next = pcb->next;
 800fbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf2:	68da      	ldr	r2, [r3, #12]
 800fbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf6:	60da      	str	r2, [r3, #12]
 800fbf8:	e00f      	b.n	800fc1a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fbfa:	4b17      	ldr	r3, [pc, #92]	; (800fc58 <tcp_slowtmr+0x674>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d006      	beq.n	800fc12 <tcp_slowtmr+0x62e>
 800fc04:	4b10      	ldr	r3, [pc, #64]	; (800fc48 <tcp_slowtmr+0x664>)
 800fc06:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc0a:	4915      	ldr	r1, [pc, #84]	; (800fc60 <tcp_slowtmr+0x67c>)
 800fc0c:	4810      	ldr	r0, [pc, #64]	; (800fc50 <tcp_slowtmr+0x66c>)
 800fc0e:	f007 ffbf 	bl	8017b90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	4a10      	ldr	r2, [pc, #64]	; (800fc58 <tcp_slowtmr+0x674>)
 800fc18:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc24:	69f8      	ldr	r0, [r7, #28]
 800fc26:	f7fe feed 	bl	800ea04 <tcp_free>
 800fc2a:	e004      	b.n	800fc36 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1a9      	bne.n	800fb90 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc3c:	bf00      	nop
 800fc3e:	bf00      	nop
 800fc40:	3730      	adds	r7, #48	; 0x30
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bdb0      	pop	{r4, r5, r7, pc}
 800fc46:	bf00      	nop
 800fc48:	0801c1ec 	.word	0x0801c1ec
 800fc4c:	0801c67c 	.word	0x0801c67c
 800fc50:	0801c230 	.word	0x0801c230
 800fc54:	20011b98 	.word	0x20011b98
 800fc58:	20011ba8 	.word	0x20011ba8
 800fc5c:	0801c6ac 	.word	0x0801c6ac
 800fc60:	0801c6d4 	.word	0x0801c6d4

0800fc64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fc6a:	4b2d      	ldr	r3, [pc, #180]	; (800fd20 <tcp_fasttmr+0xbc>)
 800fc6c:	781b      	ldrb	r3, [r3, #0]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	4b2b      	ldr	r3, [pc, #172]	; (800fd20 <tcp_fasttmr+0xbc>)
 800fc74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fc76:	4b2b      	ldr	r3, [pc, #172]	; (800fd24 <tcp_fasttmr+0xc0>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc7c:	e048      	b.n	800fd10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	7f9a      	ldrb	r2, [r3, #30]
 800fc82:	4b27      	ldr	r3, [pc, #156]	; (800fd20 <tcp_fasttmr+0xbc>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d03f      	beq.n	800fd0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fc8a:	4b25      	ldr	r3, [pc, #148]	; (800fd20 <tcp_fasttmr+0xbc>)
 800fc8c:	781a      	ldrb	r2, [r3, #0]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	8b5b      	ldrh	r3, [r3, #26]
 800fc96:	f003 0301 	and.w	r3, r3, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d010      	beq.n	800fcc0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	8b5b      	ldrh	r3, [r3, #26]
 800fca2:	f043 0302 	orr.w	r3, r3, #2
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f003 fff5 	bl	8013c9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	8b5b      	ldrh	r3, [r3, #26]
 800fcb6:	f023 0303 	bic.w	r3, r3, #3
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	8b5b      	ldrh	r3, [r3, #26]
 800fcc4:	f003 0308 	and.w	r3, r3, #8
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d009      	beq.n	800fce0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8b5b      	ldrh	r3, [r3, #26]
 800fcd0:	f023 0308 	bic.w	r3, r3, #8
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff f826 	bl	800ed2c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	68db      	ldr	r3, [r3, #12]
 800fce4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00a      	beq.n	800fd04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fcee:	4b0e      	ldr	r3, [pc, #56]	; (800fd28 <tcp_fasttmr+0xc4>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 f819 	bl	800fd2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fcfa:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <tcp_fasttmr+0xc4>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d000      	beq.n	800fd04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd02:	e7b8      	b.n	800fc76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	607b      	str	r3, [r7, #4]
 800fd08:	e002      	b.n	800fd10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1b3      	bne.n	800fc7e <tcp_fasttmr+0x1a>
    }
  }
}
 800fd16:	bf00      	nop
 800fd18:	bf00      	nop
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	20011bae 	.word	0x20011bae
 800fd24:	20011ba4 	.word	0x20011ba4
 800fd28:	20011bac 	.word	0x20011bac

0800fd2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd2c:	b590      	push	{r4, r7, lr}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d109      	bne.n	800fd4e <tcp_process_refused_data+0x22>
 800fd3a:	4b37      	ldr	r3, [pc, #220]	; (800fe18 <tcp_process_refused_data+0xec>)
 800fd3c:	f240 6209 	movw	r2, #1545	; 0x609
 800fd40:	4936      	ldr	r1, [pc, #216]	; (800fe1c <tcp_process_refused_data+0xf0>)
 800fd42:	4837      	ldr	r0, [pc, #220]	; (800fe20 <tcp_process_refused_data+0xf4>)
 800fd44:	f007 ff24 	bl	8017b90 <iprintf>
 800fd48:	f06f 030f 	mvn.w	r3, #15
 800fd4c:	e060      	b.n	800fe10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd52:	7b5b      	ldrb	r3, [r3, #13]
 800fd54:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd5a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00b      	beq.n	800fd84 <tcp_process_refused_data+0x58>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6918      	ldr	r0, [r3, #16]
 800fd76:	2300      	movs	r3, #0
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	47a0      	blx	r4
 800fd7e:	4603      	mov	r3, r0
 800fd80:	73fb      	strb	r3, [r7, #15]
 800fd82:	e007      	b.n	800fd94 <tcp_process_refused_data+0x68>
 800fd84:	2300      	movs	r3, #0
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	6879      	ldr	r1, [r7, #4]
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	f000 f8a4 	bl	800fed8 <tcp_recv_null>
 800fd90:	4603      	mov	r3, r0
 800fd92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fd94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d12a      	bne.n	800fdf2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fd9c:	7bbb      	ldrb	r3, [r7, #14]
 800fd9e:	f003 0320 	and.w	r3, r3, #32
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d033      	beq.n	800fe0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdae:	d005      	beq.n	800fdbc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <tcp_process_refused_data+0xb2>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6918      	ldr	r0, [r3, #16]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	6879      	ldr	r1, [r7, #4]
 800fdd6:	47a0      	blx	r4
 800fdd8:	4603      	mov	r3, r0
 800fdda:	73fb      	strb	r3, [r7, #15]
 800fddc:	e001      	b.n	800fde2 <tcp_process_refused_data+0xb6>
 800fdde:	2300      	movs	r3, #0
 800fde0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fde6:	f113 0f0d 	cmn.w	r3, #13
 800fdea:	d110      	bne.n	800fe0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fdec:	f06f 030c 	mvn.w	r3, #12
 800fdf0:	e00e      	b.n	800fe10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf6:	f113 0f0d 	cmn.w	r3, #13
 800fdfa:	d102      	bne.n	800fe02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fdfc:	f06f 030c 	mvn.w	r3, #12
 800fe00:	e006      	b.n	800fe10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe08:	f06f 0304 	mvn.w	r3, #4
 800fe0c:	e000      	b.n	800fe10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd90      	pop	{r4, r7, pc}
 800fe18:	0801c1ec 	.word	0x0801c1ec
 800fe1c:	0801c6fc 	.word	0x0801c6fc
 800fe20:	0801c230 	.word	0x0801c230

0800fe24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe2c:	e007      	b.n	800fe3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f80a 	bl	800fe4e <tcp_seg_free>
    seg = next;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d1f4      	bne.n	800fe2e <tcp_segs_free+0xa>
  }
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00c      	beq.n	800fe76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fe fb1f 	bl	800e4ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	2002      	movs	r0, #2
 800fe72:	f7fd fc7b 	bl	800d76c <memp_free>
  }
}
 800fe76:	bf00      	nop
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
	...

0800fe80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d106      	bne.n	800fe9c <tcp_seg_copy+0x1c>
 800fe8e:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <tcp_seg_copy+0x4c>)
 800fe90:	f240 6282 	movw	r2, #1666	; 0x682
 800fe94:	490e      	ldr	r1, [pc, #56]	; (800fed0 <tcp_seg_copy+0x50>)
 800fe96:	480f      	ldr	r0, [pc, #60]	; (800fed4 <tcp_seg_copy+0x54>)
 800fe98:	f007 fe7a 	bl	8017b90 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fe9c:	2002      	movs	r0, #2
 800fe9e:	f7fd fbef 	bl	800d680 <memp_malloc>
 800fea2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d101      	bne.n	800feae <tcp_seg_copy+0x2e>
    return NULL;
 800feaa:	2300      	movs	r3, #0
 800feac:	e00a      	b.n	800fec4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800feae:	2210      	movs	r2, #16
 800feb0:	6879      	ldr	r1, [r7, #4]
 800feb2:	68f8      	ldr	r0, [r7, #12]
 800feb4:	f007 fda7 	bl	8017a06 <memcpy>
  pbuf_ref(cseg->p);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	f7fe fb9b 	bl	800e5f8 <pbuf_ref>
  return cseg;
 800fec2:	68fb      	ldr	r3, [r7, #12]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	0801c1ec 	.word	0x0801c1ec
 800fed0:	0801c740 	.word	0x0801c740
 800fed4:	0801c230 	.word	0x0801c230

0800fed8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	607a      	str	r2, [r7, #4]
 800fee4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d109      	bne.n	800ff00 <tcp_recv_null+0x28>
 800feec:	4b12      	ldr	r3, [pc, #72]	; (800ff38 <tcp_recv_null+0x60>)
 800feee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fef2:	4912      	ldr	r1, [pc, #72]	; (800ff3c <tcp_recv_null+0x64>)
 800fef4:	4812      	ldr	r0, [pc, #72]	; (800ff40 <tcp_recv_null+0x68>)
 800fef6:	f007 fe4b 	bl	8017b90 <iprintf>
 800fefa:	f06f 030f 	mvn.w	r3, #15
 800fefe:	e016      	b.n	800ff2e <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	891b      	ldrh	r3, [r3, #8]
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	68b8      	ldr	r0, [r7, #8]
 800ff0e:	f7ff f9bb 	bl	800f288 <tcp_recved>
    pbuf_free(p);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7fe faca 	bl	800e4ac <pbuf_free>
 800ff18:	e008      	b.n	800ff2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d104      	bne.n	800ff2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff22:	68b8      	ldr	r0, [r7, #8]
 800ff24:	f7fe ff6c 	bl	800ee00 <tcp_close>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	e000      	b.n	800ff2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	0801c1ec 	.word	0x0801c1ec
 800ff3c:	0801c75c 	.word	0x0801c75c
 800ff40:	0801c230 	.word	0x0801c230

0800ff44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b086      	sub	sp, #24
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ff4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	db01      	blt.n	800ff5a <tcp_kill_prio+0x16>
 800ff56:	79fb      	ldrb	r3, [r7, #7]
 800ff58:	e000      	b.n	800ff5c <tcp_kill_prio+0x18>
 800ff5a:	237f      	movs	r3, #127	; 0x7f
 800ff5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ff5e:	7afb      	ldrb	r3, [r7, #11]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d034      	beq.n	800ffce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ff64:	7afb      	ldrb	r3, [r7, #11]
 800ff66:	3b01      	subs	r3, #1
 800ff68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff72:	4b19      	ldr	r3, [pc, #100]	; (800ffd8 <tcp_kill_prio+0x94>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	617b      	str	r3, [r7, #20]
 800ff78:	e01f      	b.n	800ffba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	7d5b      	ldrb	r3, [r3, #21]
 800ff7e:	7afa      	ldrb	r2, [r7, #11]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d80c      	bhi.n	800ff9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ff88:	7afa      	ldrb	r2, [r7, #11]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d112      	bne.n	800ffb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ff8e:	4b13      	ldr	r3, [pc, #76]	; (800ffdc <tcp_kill_prio+0x98>)
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	6a1b      	ldr	r3, [r3, #32]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	68fa      	ldr	r2, [r7, #12]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d80a      	bhi.n	800ffb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ff9e:	4b0f      	ldr	r3, [pc, #60]	; (800ffdc <tcp_kill_prio+0x98>)
 800ffa0:	681a      	ldr	r2, [r3, #0]
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	7d5b      	ldrb	r3, [r3, #21]
 800ffb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	617b      	str	r3, [r7, #20]
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1dc      	bne.n	800ff7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d004      	beq.n	800ffd0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ffc6:	6938      	ldr	r0, [r7, #16]
 800ffc8:	f7ff f860 	bl	800f08c <tcp_abort>
 800ffcc:	e000      	b.n	800ffd0 <tcp_kill_prio+0x8c>
    return;
 800ffce:	bf00      	nop
  }
}
 800ffd0:	3718      	adds	r7, #24
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20011ba4 	.word	0x20011ba4
 800ffdc:	20011b98 	.word	0x20011b98

0800ffe0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	2b08      	cmp	r3, #8
 800ffee:	d009      	beq.n	8010004 <tcp_kill_state+0x24>
 800fff0:	79fb      	ldrb	r3, [r7, #7]
 800fff2:	2b09      	cmp	r3, #9
 800fff4:	d006      	beq.n	8010004 <tcp_kill_state+0x24>
 800fff6:	4b1a      	ldr	r3, [pc, #104]	; (8010060 <tcp_kill_state+0x80>)
 800fff8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fffc:	4919      	ldr	r1, [pc, #100]	; (8010064 <tcp_kill_state+0x84>)
 800fffe:	481a      	ldr	r0, [pc, #104]	; (8010068 <tcp_kill_state+0x88>)
 8010000:	f007 fdc6 	bl	8017b90 <iprintf>

  inactivity = 0;
 8010004:	2300      	movs	r3, #0
 8010006:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010008:	2300      	movs	r3, #0
 801000a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801000c:	4b17      	ldr	r3, [pc, #92]	; (801006c <tcp_kill_state+0x8c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	617b      	str	r3, [r7, #20]
 8010012:	e017      	b.n	8010044 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	7d1b      	ldrb	r3, [r3, #20]
 8010018:	79fa      	ldrb	r2, [r7, #7]
 801001a:	429a      	cmp	r2, r3
 801001c:	d10f      	bne.n	801003e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801001e:	4b14      	ldr	r3, [pc, #80]	; (8010070 <tcp_kill_state+0x90>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	6a1b      	ldr	r3, [r3, #32]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	68fa      	ldr	r2, [r7, #12]
 801002a:	429a      	cmp	r2, r3
 801002c:	d807      	bhi.n	801003e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801002e:	4b10      	ldr	r3, [pc, #64]	; (8010070 <tcp_kill_state+0x90>)
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	6a1b      	ldr	r3, [r3, #32]
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	617b      	str	r3, [r7, #20]
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e4      	bne.n	8010014 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d003      	beq.n	8010058 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010050:	2100      	movs	r1, #0
 8010052:	6938      	ldr	r0, [r7, #16]
 8010054:	f7fe ff5c 	bl	800ef10 <tcp_abandon>
  }
}
 8010058:	bf00      	nop
 801005a:	3718      	adds	r7, #24
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	0801c1ec 	.word	0x0801c1ec
 8010064:	0801c778 	.word	0x0801c778
 8010068:	0801c230 	.word	0x0801c230
 801006c:	20011ba4 	.word	0x20011ba4
 8010070:	20011b98 	.word	0x20011b98

08010074 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801007a:	2300      	movs	r3, #0
 801007c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801007e:	2300      	movs	r3, #0
 8010080:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010082:	4b12      	ldr	r3, [pc, #72]	; (80100cc <tcp_kill_timewait+0x58>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	e012      	b.n	80100b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801008a:	4b11      	ldr	r3, [pc, #68]	; (80100d0 <tcp_kill_timewait+0x5c>)
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6a1b      	ldr	r3, [r3, #32]
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	429a      	cmp	r2, r3
 8010098:	d807      	bhi.n	80100aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801009a:	4b0d      	ldr	r3, [pc, #52]	; (80100d0 <tcp_kill_timewait+0x5c>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	60fb      	str	r3, [r7, #12]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1e9      	bne.n	801008a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80100bc:	68b8      	ldr	r0, [r7, #8]
 80100be:	f7fe ffe5 	bl	800f08c <tcp_abort>
  }
}
 80100c2:	bf00      	nop
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	20011ba8 	.word	0x20011ba8
 80100d0:	20011b98 	.word	0x20011b98

080100d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80100da:	4b10      	ldr	r3, [pc, #64]	; (801011c <tcp_handle_closepend+0x48>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80100e0:	e014      	b.n	801010c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	8b5b      	ldrh	r3, [r3, #26]
 80100ec:	f003 0308 	and.w	r3, r3, #8
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d009      	beq.n	8010108 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	8b5b      	ldrh	r3, [r3, #26]
 80100f8:	f023 0308 	bic.w	r3, r3, #8
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7fe fe12 	bl	800ed2c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1e7      	bne.n	80100e2 <tcp_handle_closepend+0xe>
  }
}
 8010112:	bf00      	nop
 8010114:	bf00      	nop
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	20011ba4 	.word	0x20011ba4

08010120 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	4603      	mov	r3, r0
 8010128:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801012a:	2000      	movs	r0, #0
 801012c:	f7fd faa8 	bl	800d680 <memp_malloc>
 8010130:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d126      	bne.n	8010186 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010138:	f7ff ffcc 	bl	80100d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801013c:	f7ff ff9a 	bl	8010074 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010140:	2000      	movs	r0, #0
 8010142:	f7fd fa9d 	bl	800d680 <memp_malloc>
 8010146:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d11b      	bne.n	8010186 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801014e:	2009      	movs	r0, #9
 8010150:	f7ff ff46 	bl	800ffe0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010154:	2000      	movs	r0, #0
 8010156:	f7fd fa93 	bl	800d680 <memp_malloc>
 801015a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d111      	bne.n	8010186 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010162:	2008      	movs	r0, #8
 8010164:	f7ff ff3c 	bl	800ffe0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010168:	2000      	movs	r0, #0
 801016a:	f7fd fa89 	bl	800d680 <memp_malloc>
 801016e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d107      	bne.n	8010186 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010176:	79fb      	ldrb	r3, [r7, #7]
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fee3 	bl	800ff44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801017e:	2000      	movs	r0, #0
 8010180:	f7fd fa7e 	bl	800d680 <memp_malloc>
 8010184:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d03f      	beq.n	801020c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801018c:	229c      	movs	r2, #156	; 0x9c
 801018e:	2100      	movs	r1, #0
 8010190:	68f8      	ldr	r0, [r7, #12]
 8010192:	f007 fc60 	bl	8017a56 <memset>
    pcb->prio = prio;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	79fa      	ldrb	r2, [r7, #7]
 801019a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80101ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	22ff      	movs	r2, #255	; 0xff
 80101ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	f44f 7206 	mov.w	r2, #536	; 0x218
 80101c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2206      	movs	r2, #6
 80101c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2206      	movs	r2, #6
 80101d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2201      	movs	r2, #1
 80101de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80101e2:	4b0d      	ldr	r3, [pc, #52]	; (8010218 <tcp_alloc+0xf8>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80101ea:	4b0c      	ldr	r3, [pc, #48]	; (801021c <tcp_alloc+0xfc>)
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4a08      	ldr	r2, [pc, #32]	; (8010220 <tcp_alloc+0x100>)
 8010200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4a07      	ldr	r2, [pc, #28]	; (8010224 <tcp_alloc+0x104>)
 8010208:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801020c:	68fb      	ldr	r3, [r7, #12]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	20011b98 	.word	0x20011b98
 801021c:	20011bae 	.word	0x20011bae
 8010220:	0800fed9 	.word	0x0800fed9
 8010224:	006ddd00 	.word	0x006ddd00

08010228 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010232:	2040      	movs	r0, #64	; 0x40
 8010234:	f7ff ff74 	bl	8010120 <tcp_alloc>
 8010238:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801023a:	68fb      	ldr	r3, [r7, #12]
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d002      	beq.n	801025a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	611a      	str	r2, [r3, #16]
  }
}
 801025a:	bf00      	nop
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr
	...

08010268 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00e      	beq.n	8010296 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	7d1b      	ldrb	r3, [r3, #20]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d106      	bne.n	801028e <tcp_recv+0x26>
 8010280:	4b07      	ldr	r3, [pc, #28]	; (80102a0 <tcp_recv+0x38>)
 8010282:	f240 72df 	movw	r2, #2015	; 0x7df
 8010286:	4907      	ldr	r1, [pc, #28]	; (80102a4 <tcp_recv+0x3c>)
 8010288:	4807      	ldr	r0, [pc, #28]	; (80102a8 <tcp_recv+0x40>)
 801028a:	f007 fc81 	bl	8017b90 <iprintf>
    pcb->recv = recv;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010296:	bf00      	nop
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	0801c1ec 	.word	0x0801c1ec
 80102a4:	0801c788 	.word	0x0801c788
 80102a8:	0801c230 	.word	0x0801c230

080102ac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00e      	beq.n	80102da <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	7d1b      	ldrb	r3, [r3, #20]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d106      	bne.n	80102d2 <tcp_sent+0x26>
 80102c4:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <tcp_sent+0x38>)
 80102c6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80102ca:	4907      	ldr	r1, [pc, #28]	; (80102e8 <tcp_sent+0x3c>)
 80102cc:	4807      	ldr	r0, [pc, #28]	; (80102ec <tcp_sent+0x40>)
 80102ce:	f007 fc5f 	bl	8017b90 <iprintf>
    pcb->sent = sent;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	683a      	ldr	r2, [r7, #0]
 80102d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80102da:	bf00      	nop
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	0801c1ec 	.word	0x0801c1ec
 80102e8:	0801c7b0 	.word	0x0801c7b0
 80102ec:	0801c230 	.word	0x0801c230

080102f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00e      	beq.n	801031e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	7d1b      	ldrb	r3, [r3, #20]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d106      	bne.n	8010316 <tcp_err+0x26>
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <tcp_err+0x38>)
 801030a:	f640 020d 	movw	r2, #2061	; 0x80d
 801030e:	4907      	ldr	r1, [pc, #28]	; (801032c <tcp_err+0x3c>)
 8010310:	4807      	ldr	r0, [pc, #28]	; (8010330 <tcp_err+0x40>)
 8010312:	f007 fc3d 	bl	8017b90 <iprintf>
    pcb->errf = err;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	683a      	ldr	r2, [r7, #0]
 801031a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801031e:	bf00      	nop
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	0801c1ec 	.word	0x0801c1ec
 801032c:	0801c7d8 	.word	0x0801c7d8
 8010330:	0801c230 	.word	0x0801c230

08010334 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d008      	beq.n	8010356 <tcp_accept+0x22>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	7d1b      	ldrb	r3, [r3, #20]
 8010348:	2b01      	cmp	r3, #1
 801034a:	d104      	bne.n	8010356 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	683a      	ldr	r2, [r7, #0]
 8010354:	619a      	str	r2, [r3, #24]
  }
}
 8010356:	bf00      	nop
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	4613      	mov	r3, r2
 8010370:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d107      	bne.n	8010388 <tcp_poll+0x24>
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <tcp_poll+0x50>)
 801037a:	f640 023d 	movw	r2, #2109	; 0x83d
 801037e:	490e      	ldr	r1, [pc, #56]	; (80103b8 <tcp_poll+0x54>)
 8010380:	480e      	ldr	r0, [pc, #56]	; (80103bc <tcp_poll+0x58>)
 8010382:	f007 fc05 	bl	8017b90 <iprintf>
 8010386:	e011      	b.n	80103ac <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	7d1b      	ldrb	r3, [r3, #20]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d106      	bne.n	801039e <tcp_poll+0x3a>
 8010390:	4b08      	ldr	r3, [pc, #32]	; (80103b4 <tcp_poll+0x50>)
 8010392:	f640 023e 	movw	r2, #2110	; 0x83e
 8010396:	490a      	ldr	r1, [pc, #40]	; (80103c0 <tcp_poll+0x5c>)
 8010398:	4808      	ldr	r0, [pc, #32]	; (80103bc <tcp_poll+0x58>)
 801039a:	f007 fbf9 	bl	8017b90 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	79fa      	ldrb	r2, [r7, #7]
 80103aa:	775a      	strb	r2, [r3, #29]
}
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	0801c1ec 	.word	0x0801c1ec
 80103b8:	0801c800 	.word	0x0801c800
 80103bc:	0801c230 	.word	0x0801c230
 80103c0:	0801c818 	.word	0x0801c818

080103c4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d107      	bne.n	80103e2 <tcp_pcb_purge+0x1e>
 80103d2:	4b21      	ldr	r3, [pc, #132]	; (8010458 <tcp_pcb_purge+0x94>)
 80103d4:	f640 0251 	movw	r2, #2129	; 0x851
 80103d8:	4920      	ldr	r1, [pc, #128]	; (801045c <tcp_pcb_purge+0x98>)
 80103da:	4821      	ldr	r0, [pc, #132]	; (8010460 <tcp_pcb_purge+0x9c>)
 80103dc:	f007 fbd8 	bl	8017b90 <iprintf>
 80103e0:	e037      	b.n	8010452 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	7d1b      	ldrb	r3, [r3, #20]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d033      	beq.n	8010452 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80103ee:	2b0a      	cmp	r3, #10
 80103f0:	d02f      	beq.n	8010452 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80103f6:	2b01      	cmp	r3, #1
 80103f8:	d02b      	beq.n	8010452 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d007      	beq.n	8010412 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010406:	4618      	mov	r0, r3
 8010408:	f7fe f850 	bl	800e4ac <pbuf_free>
      pcb->refused_data = NULL;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010416:	2b00      	cmp	r3, #0
 8010418:	d002      	beq.n	8010420 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f986 	bl	801072c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010426:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fcf9 	bl	800fe24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fcf4 	bl	800fe24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	66da      	str	r2, [r3, #108]	; 0x6c
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2200      	movs	r2, #0
 801044e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	0801c1ec 	.word	0x0801c1ec
 801045c:	0801c838 	.word	0x0801c838
 8010460:	0801c230 	.word	0x0801c230

08010464 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d106      	bne.n	8010482 <tcp_pcb_remove+0x1e>
 8010474:	4b3e      	ldr	r3, [pc, #248]	; (8010570 <tcp_pcb_remove+0x10c>)
 8010476:	f640 0283 	movw	r2, #2179	; 0x883
 801047a:	493e      	ldr	r1, [pc, #248]	; (8010574 <tcp_pcb_remove+0x110>)
 801047c:	483e      	ldr	r0, [pc, #248]	; (8010578 <tcp_pcb_remove+0x114>)
 801047e:	f007 fb87 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d106      	bne.n	8010496 <tcp_pcb_remove+0x32>
 8010488:	4b39      	ldr	r3, [pc, #228]	; (8010570 <tcp_pcb_remove+0x10c>)
 801048a:	f640 0284 	movw	r2, #2180	; 0x884
 801048e:	493b      	ldr	r1, [pc, #236]	; (801057c <tcp_pcb_remove+0x118>)
 8010490:	4839      	ldr	r0, [pc, #228]	; (8010578 <tcp_pcb_remove+0x114>)
 8010492:	f007 fb7d 	bl	8017b90 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	429a      	cmp	r2, r3
 801049e:	d105      	bne.n	80104ac <tcp_pcb_remove+0x48>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68da      	ldr	r2, [r3, #12]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	601a      	str	r2, [r3, #0]
 80104aa:	e013      	b.n	80104d4 <tcp_pcb_remove+0x70>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	60fb      	str	r3, [r7, #12]
 80104b2:	e00c      	b.n	80104ce <tcp_pcb_remove+0x6a>
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	683a      	ldr	r2, [r7, #0]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d104      	bne.n	80104c8 <tcp_pcb_remove+0x64>
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	68da      	ldr	r2, [r3, #12]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	60da      	str	r2, [r3, #12]
 80104c6:	e005      	b.n	80104d4 <tcp_pcb_remove+0x70>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	60fb      	str	r3, [r7, #12]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1ef      	bne.n	80104b4 <tcp_pcb_remove+0x50>
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2200      	movs	r2, #0
 80104d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80104da:	6838      	ldr	r0, [r7, #0]
 80104dc:	f7ff ff72 	bl	80103c4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	7d1b      	ldrb	r3, [r3, #20]
 80104e4:	2b0a      	cmp	r3, #10
 80104e6:	d013      	beq.n	8010510 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d00f      	beq.n	8010510 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	8b5b      	ldrh	r3, [r3, #26]
 80104f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d009      	beq.n	8010510 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	8b5b      	ldrh	r3, [r3, #26]
 8010500:	f043 0302 	orr.w	r3, r3, #2
 8010504:	b29a      	uxth	r2, r3
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801050a:	6838      	ldr	r0, [r7, #0]
 801050c:	f003 fbc6 	bl	8013c9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	7d1b      	ldrb	r3, [r3, #20]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d020      	beq.n	801055a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d006      	beq.n	801052e <tcp_pcb_remove+0xca>
 8010520:	4b13      	ldr	r3, [pc, #76]	; (8010570 <tcp_pcb_remove+0x10c>)
 8010522:	f640 0293 	movw	r2, #2195	; 0x893
 8010526:	4916      	ldr	r1, [pc, #88]	; (8010580 <tcp_pcb_remove+0x11c>)
 8010528:	4813      	ldr	r0, [pc, #76]	; (8010578 <tcp_pcb_remove+0x114>)
 801052a:	f007 fb31 	bl	8017b90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010532:	2b00      	cmp	r3, #0
 8010534:	d006      	beq.n	8010544 <tcp_pcb_remove+0xe0>
 8010536:	4b0e      	ldr	r3, [pc, #56]	; (8010570 <tcp_pcb_remove+0x10c>)
 8010538:	f640 0294 	movw	r2, #2196	; 0x894
 801053c:	4911      	ldr	r1, [pc, #68]	; (8010584 <tcp_pcb_remove+0x120>)
 801053e:	480e      	ldr	r0, [pc, #56]	; (8010578 <tcp_pcb_remove+0x114>)
 8010540:	f007 fb26 	bl	8017b90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010548:	2b00      	cmp	r3, #0
 801054a:	d006      	beq.n	801055a <tcp_pcb_remove+0xf6>
 801054c:	4b08      	ldr	r3, [pc, #32]	; (8010570 <tcp_pcb_remove+0x10c>)
 801054e:	f640 0296 	movw	r2, #2198	; 0x896
 8010552:	490d      	ldr	r1, [pc, #52]	; (8010588 <tcp_pcb_remove+0x124>)
 8010554:	4808      	ldr	r0, [pc, #32]	; (8010578 <tcp_pcb_remove+0x114>)
 8010556:	f007 fb1b 	bl	8017b90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	2200      	movs	r2, #0
 801055e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	2200      	movs	r2, #0
 8010564:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010566:	bf00      	nop
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	0801c1ec 	.word	0x0801c1ec
 8010574:	0801c854 	.word	0x0801c854
 8010578:	0801c230 	.word	0x0801c230
 801057c:	0801c870 	.word	0x0801c870
 8010580:	0801c890 	.word	0x0801c890
 8010584:	0801c8a8 	.word	0x0801c8a8
 8010588:	0801c8c4 	.word	0x0801c8c4

0801058c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d106      	bne.n	80105a8 <tcp_next_iss+0x1c>
 801059a:	4b0a      	ldr	r3, [pc, #40]	; (80105c4 <tcp_next_iss+0x38>)
 801059c:	f640 02af 	movw	r2, #2223	; 0x8af
 80105a0:	4909      	ldr	r1, [pc, #36]	; (80105c8 <tcp_next_iss+0x3c>)
 80105a2:	480a      	ldr	r0, [pc, #40]	; (80105cc <tcp_next_iss+0x40>)
 80105a4:	f007 faf4 	bl	8017b90 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80105a8:	4b09      	ldr	r3, [pc, #36]	; (80105d0 <tcp_next_iss+0x44>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	4b09      	ldr	r3, [pc, #36]	; (80105d4 <tcp_next_iss+0x48>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4413      	add	r3, r2
 80105b2:	4a07      	ldr	r2, [pc, #28]	; (80105d0 <tcp_next_iss+0x44>)
 80105b4:	6013      	str	r3, [r2, #0]
  return iss;
 80105b6:	4b06      	ldr	r3, [pc, #24]	; (80105d0 <tcp_next_iss+0x44>)
 80105b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	0801c1ec 	.word	0x0801c1ec
 80105c8:	0801c8dc 	.word	0x0801c8dc
 80105cc:	0801c230 	.word	0x0801c230
 80105d0:	20000028 	.word	0x20000028
 80105d4:	20011b98 	.word	0x20011b98

080105d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	4603      	mov	r3, r0
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d106      	bne.n	80105fa <tcp_eff_send_mss_netif+0x22>
 80105ec:	4b14      	ldr	r3, [pc, #80]	; (8010640 <tcp_eff_send_mss_netif+0x68>)
 80105ee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80105f2:	4914      	ldr	r1, [pc, #80]	; (8010644 <tcp_eff_send_mss_netif+0x6c>)
 80105f4:	4814      	ldr	r0, [pc, #80]	; (8010648 <tcp_eff_send_mss_netif+0x70>)
 80105f6:	f007 facb 	bl	8017b90 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d101      	bne.n	8010604 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010600:	89fb      	ldrh	r3, [r7, #14]
 8010602:	e019      	b.n	8010638 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010608:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801060a:	8afb      	ldrh	r3, [r7, #22]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d012      	beq.n	8010636 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010610:	2328      	movs	r3, #40	; 0x28
 8010612:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010614:	8afa      	ldrh	r2, [r7, #22]
 8010616:	8abb      	ldrh	r3, [r7, #20]
 8010618:	429a      	cmp	r2, r3
 801061a:	d904      	bls.n	8010626 <tcp_eff_send_mss_netif+0x4e>
 801061c:	8afa      	ldrh	r2, [r7, #22]
 801061e:	8abb      	ldrh	r3, [r7, #20]
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	b29b      	uxth	r3, r3
 8010624:	e000      	b.n	8010628 <tcp_eff_send_mss_netif+0x50>
 8010626:	2300      	movs	r3, #0
 8010628:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801062a:	8a7a      	ldrh	r2, [r7, #18]
 801062c:	89fb      	ldrh	r3, [r7, #14]
 801062e:	4293      	cmp	r3, r2
 8010630:	bf28      	it	cs
 8010632:	4613      	movcs	r3, r2
 8010634:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010636:	89fb      	ldrh	r3, [r7, #14]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3718      	adds	r7, #24
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	0801c1ec 	.word	0x0801c1ec
 8010644:	0801c8f8 	.word	0x0801c8f8
 8010648:	0801c230 	.word	0x0801c230

0801064c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d119      	bne.n	8010694 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010660:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010662:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010666:	4910      	ldr	r1, [pc, #64]	; (80106a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010668:	4810      	ldr	r0, [pc, #64]	; (80106ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801066a:	f007 fa91 	bl	8017b90 <iprintf>

  while (pcb != NULL) {
 801066e:	e011      	b.n	8010694 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	429a      	cmp	r2, r3
 801067a:	d108      	bne.n	801068e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010682:	68f8      	ldr	r0, [r7, #12]
 8010684:	f7fe fd02 	bl	800f08c <tcp_abort>
      pcb = next;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	e002      	b.n	8010694 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1ea      	bne.n	8010670 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801069a:	bf00      	nop
 801069c:	bf00      	nop
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	0801c1ec 	.word	0x0801c1ec
 80106a8:	0801c920 	.word	0x0801c920
 80106ac:	0801c230 	.word	0x0801c230

080106b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b084      	sub	sp, #16
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d02a      	beq.n	8010716 <tcp_netif_ip_addr_changed+0x66>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d026      	beq.n	8010716 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80106c8:	4b15      	ldr	r3, [pc, #84]	; (8010720 <tcp_netif_ip_addr_changed+0x70>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff ffbc 	bl	801064c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80106d4:	4b13      	ldr	r3, [pc, #76]	; (8010724 <tcp_netif_ip_addr_changed+0x74>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff ffb6 	bl	801064c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d017      	beq.n	8010716 <tcp_netif_ip_addr_changed+0x66>
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d013      	beq.n	8010716 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106ee:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <tcp_netif_ip_addr_changed+0x78>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	e00c      	b.n	8010710 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d103      	bne.n	801070a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d1ef      	bne.n	80106f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20011ba4 	.word	0x20011ba4
 8010724:	20011b9c 	.word	0x20011b9c
 8010728:	20011ba0 	.word	0x20011ba0

0801072c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010738:	2b00      	cmp	r3, #0
 801073a:	d007      	beq.n	801074c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff fb6f 	bl	800fe24 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801074c:	bf00      	nop
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010754:	b590      	push	{r4, r7, lr}
 8010756:	b08d      	sub	sp, #52	; 0x34
 8010758:	af04      	add	r7, sp, #16
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <tcp_input+0x1c>
 8010764:	4b9b      	ldr	r3, [pc, #620]	; (80109d4 <tcp_input+0x280>)
 8010766:	2283      	movs	r2, #131	; 0x83
 8010768:	499b      	ldr	r1, [pc, #620]	; (80109d8 <tcp_input+0x284>)
 801076a:	489c      	ldr	r0, [pc, #624]	; (80109dc <tcp_input+0x288>)
 801076c:	f007 fa10 	bl	8017b90 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	4a9a      	ldr	r2, [pc, #616]	; (80109e0 <tcp_input+0x28c>)
 8010776:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	895b      	ldrh	r3, [r3, #10]
 801077c:	2b13      	cmp	r3, #19
 801077e:	f240 83d1 	bls.w	8010f24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010782:	4b98      	ldr	r3, [pc, #608]	; (80109e4 <tcp_input+0x290>)
 8010784:	695b      	ldr	r3, [r3, #20]
 8010786:	4a97      	ldr	r2, [pc, #604]	; (80109e4 <tcp_input+0x290>)
 8010788:	6812      	ldr	r2, [r2, #0]
 801078a:	4611      	mov	r1, r2
 801078c:	4618      	mov	r0, r3
 801078e:	f005 fefd 	bl	801658c <ip4_addr_isbroadcast_u32>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	f040 83c7 	bne.w	8010f28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801079a:	4b92      	ldr	r3, [pc, #584]	; (80109e4 <tcp_input+0x290>)
 801079c:	695b      	ldr	r3, [r3, #20]
 801079e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80107a2:	2be0      	cmp	r3, #224	; 0xe0
 80107a4:	f000 83c0 	beq.w	8010f28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80107a8:	4b8d      	ldr	r3, [pc, #564]	; (80109e0 <tcp_input+0x28c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	899b      	ldrh	r3, [r3, #12]
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7fc f975 	bl	800caa0 <lwip_htons>
 80107b6:	4603      	mov	r3, r0
 80107b8:	0b1b      	lsrs	r3, r3, #12
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80107c2:	7cbb      	ldrb	r3, [r7, #18]
 80107c4:	2b13      	cmp	r3, #19
 80107c6:	f240 83b1 	bls.w	8010f2c <tcp_input+0x7d8>
 80107ca:	7cbb      	ldrb	r3, [r7, #18]
 80107cc:	b29a      	uxth	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	891b      	ldrh	r3, [r3, #8]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	f200 83aa 	bhi.w	8010f2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80107d8:	7cbb      	ldrb	r3, [r7, #18]
 80107da:	b29b      	uxth	r3, r3
 80107dc:	3b14      	subs	r3, #20
 80107de:	b29a      	uxth	r2, r3
 80107e0:	4b81      	ldr	r3, [pc, #516]	; (80109e8 <tcp_input+0x294>)
 80107e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80107e4:	4b81      	ldr	r3, [pc, #516]	; (80109ec <tcp_input+0x298>)
 80107e6:	2200      	movs	r2, #0
 80107e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	895a      	ldrh	r2, [r3, #10]
 80107ee:	7cbb      	ldrb	r3, [r7, #18]
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d309      	bcc.n	801080a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80107f6:	4b7c      	ldr	r3, [pc, #496]	; (80109e8 <tcp_input+0x294>)
 80107f8:	881a      	ldrh	r2, [r3, #0]
 80107fa:	4b7d      	ldr	r3, [pc, #500]	; (80109f0 <tcp_input+0x29c>)
 80107fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80107fe:	7cbb      	ldrb	r3, [r7, #18]
 8010800:	4619      	mov	r1, r3
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f7fd fdcc 	bl	800e3a0 <pbuf_remove_header>
 8010808:	e04e      	b.n	80108a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d105      	bne.n	801081e <tcp_input+0xca>
 8010812:	4b70      	ldr	r3, [pc, #448]	; (80109d4 <tcp_input+0x280>)
 8010814:	22c2      	movs	r2, #194	; 0xc2
 8010816:	4977      	ldr	r1, [pc, #476]	; (80109f4 <tcp_input+0x2a0>)
 8010818:	4870      	ldr	r0, [pc, #448]	; (80109dc <tcp_input+0x288>)
 801081a:	f007 f9b9 	bl	8017b90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801081e:	2114      	movs	r1, #20
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7fd fdbd 	bl	800e3a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	895a      	ldrh	r2, [r3, #10]
 801082a:	4b71      	ldr	r3, [pc, #452]	; (80109f0 <tcp_input+0x29c>)
 801082c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801082e:	4b6e      	ldr	r3, [pc, #440]	; (80109e8 <tcp_input+0x294>)
 8010830:	881a      	ldrh	r2, [r3, #0]
 8010832:	4b6f      	ldr	r3, [pc, #444]	; (80109f0 <tcp_input+0x29c>)
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801083a:	4b6d      	ldr	r3, [pc, #436]	; (80109f0 <tcp_input+0x29c>)
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	4619      	mov	r1, r3
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7fd fdad 	bl	800e3a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	895b      	ldrh	r3, [r3, #10]
 801084c:	8a3a      	ldrh	r2, [r7, #16]
 801084e:	429a      	cmp	r2, r3
 8010850:	f200 836e 	bhi.w	8010f30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	4a64      	ldr	r2, [pc, #400]	; (80109ec <tcp_input+0x298>)
 801085c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	8a3a      	ldrh	r2, [r7, #16]
 8010864:	4611      	mov	r1, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7fd fd9a 	bl	800e3a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	891a      	ldrh	r2, [r3, #8]
 8010870:	8a3b      	ldrh	r3, [r7, #16]
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	895b      	ldrh	r3, [r3, #10]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d005      	beq.n	801088e <tcp_input+0x13a>
 8010882:	4b54      	ldr	r3, [pc, #336]	; (80109d4 <tcp_input+0x280>)
 8010884:	22df      	movs	r2, #223	; 0xdf
 8010886:	495c      	ldr	r1, [pc, #368]	; (80109f8 <tcp_input+0x2a4>)
 8010888:	4854      	ldr	r0, [pc, #336]	; (80109dc <tcp_input+0x288>)
 801088a:	f007 f981 	bl	8017b90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	891a      	ldrh	r2, [r3, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	891b      	ldrh	r3, [r3, #8]
 8010898:	429a      	cmp	r2, r3
 801089a:	d005      	beq.n	80108a8 <tcp_input+0x154>
 801089c:	4b4d      	ldr	r3, [pc, #308]	; (80109d4 <tcp_input+0x280>)
 801089e:	22e0      	movs	r2, #224	; 0xe0
 80108a0:	4956      	ldr	r1, [pc, #344]	; (80109fc <tcp_input+0x2a8>)
 80108a2:	484e      	ldr	r0, [pc, #312]	; (80109dc <tcp_input+0x288>)
 80108a4:	f007 f974 	bl	8017b90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80108a8:	4b4d      	ldr	r3, [pc, #308]	; (80109e0 <tcp_input+0x28c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	4a4b      	ldr	r2, [pc, #300]	; (80109e0 <tcp_input+0x28c>)
 80108b2:	6814      	ldr	r4, [r2, #0]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fc f8f3 	bl	800caa0 <lwip_htons>
 80108ba:	4603      	mov	r3, r0
 80108bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80108be:	4b48      	ldr	r3, [pc, #288]	; (80109e0 <tcp_input+0x28c>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	885b      	ldrh	r3, [r3, #2]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	4a46      	ldr	r2, [pc, #280]	; (80109e0 <tcp_input+0x28c>)
 80108c8:	6814      	ldr	r4, [r2, #0]
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fc f8e8 	bl	800caa0 <lwip_htons>
 80108d0:	4603      	mov	r3, r0
 80108d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80108d4:	4b42      	ldr	r3, [pc, #264]	; (80109e0 <tcp_input+0x28c>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	4a41      	ldr	r2, [pc, #260]	; (80109e0 <tcp_input+0x28c>)
 80108dc:	6814      	ldr	r4, [r2, #0]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fc f8f3 	bl	800caca <lwip_htonl>
 80108e4:	4603      	mov	r3, r0
 80108e6:	6063      	str	r3, [r4, #4]
 80108e8:	6863      	ldr	r3, [r4, #4]
 80108ea:	4a45      	ldr	r2, [pc, #276]	; (8010a00 <tcp_input+0x2ac>)
 80108ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80108ee:	4b3c      	ldr	r3, [pc, #240]	; (80109e0 <tcp_input+0x28c>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	4a3a      	ldr	r2, [pc, #232]	; (80109e0 <tcp_input+0x28c>)
 80108f6:	6814      	ldr	r4, [r2, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fc f8e6 	bl	800caca <lwip_htonl>
 80108fe:	4603      	mov	r3, r0
 8010900:	60a3      	str	r3, [r4, #8]
 8010902:	68a3      	ldr	r3, [r4, #8]
 8010904:	4a3f      	ldr	r2, [pc, #252]	; (8010a04 <tcp_input+0x2b0>)
 8010906:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010908:	4b35      	ldr	r3, [pc, #212]	; (80109e0 <tcp_input+0x28c>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	89db      	ldrh	r3, [r3, #14]
 801090e:	b29b      	uxth	r3, r3
 8010910:	4a33      	ldr	r2, [pc, #204]	; (80109e0 <tcp_input+0x28c>)
 8010912:	6814      	ldr	r4, [r2, #0]
 8010914:	4618      	mov	r0, r3
 8010916:	f7fc f8c3 	bl	800caa0 <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801091e:	4b30      	ldr	r3, [pc, #192]	; (80109e0 <tcp_input+0x28c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	899b      	ldrh	r3, [r3, #12]
 8010924:	b29b      	uxth	r3, r3
 8010926:	4618      	mov	r0, r3
 8010928:	f7fc f8ba 	bl	800caa0 <lwip_htons>
 801092c:	4603      	mov	r3, r0
 801092e:	b2db      	uxtb	r3, r3
 8010930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010934:	b2da      	uxtb	r2, r3
 8010936:	4b34      	ldr	r3, [pc, #208]	; (8010a08 <tcp_input+0x2b4>)
 8010938:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	891a      	ldrh	r2, [r3, #8]
 801093e:	4b33      	ldr	r3, [pc, #204]	; (8010a0c <tcp_input+0x2b8>)
 8010940:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010942:	4b31      	ldr	r3, [pc, #196]	; (8010a08 <tcp_input+0x2b4>)
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	f003 0303 	and.w	r3, r3, #3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00c      	beq.n	8010968 <tcp_input+0x214>
    tcplen++;
 801094e:	4b2f      	ldr	r3, [pc, #188]	; (8010a0c <tcp_input+0x2b8>)
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	3301      	adds	r3, #1
 8010954:	b29a      	uxth	r2, r3
 8010956:	4b2d      	ldr	r3, [pc, #180]	; (8010a0c <tcp_input+0x2b8>)
 8010958:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	891a      	ldrh	r2, [r3, #8]
 801095e:	4b2b      	ldr	r3, [pc, #172]	; (8010a0c <tcp_input+0x2b8>)
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	429a      	cmp	r2, r3
 8010964:	f200 82e6 	bhi.w	8010f34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010968:	2300      	movs	r3, #0
 801096a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801096c:	4b28      	ldr	r3, [pc, #160]	; (8010a10 <tcp_input+0x2bc>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	61fb      	str	r3, [r7, #28]
 8010972:	e09d      	b.n	8010ab0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	7d1b      	ldrb	r3, [r3, #20]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d105      	bne.n	8010988 <tcp_input+0x234>
 801097c:	4b15      	ldr	r3, [pc, #84]	; (80109d4 <tcp_input+0x280>)
 801097e:	22fb      	movs	r2, #251	; 0xfb
 8010980:	4924      	ldr	r1, [pc, #144]	; (8010a14 <tcp_input+0x2c0>)
 8010982:	4816      	ldr	r0, [pc, #88]	; (80109dc <tcp_input+0x288>)
 8010984:	f007 f904 	bl	8017b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	7d1b      	ldrb	r3, [r3, #20]
 801098c:	2b0a      	cmp	r3, #10
 801098e:	d105      	bne.n	801099c <tcp_input+0x248>
 8010990:	4b10      	ldr	r3, [pc, #64]	; (80109d4 <tcp_input+0x280>)
 8010992:	22fc      	movs	r2, #252	; 0xfc
 8010994:	4920      	ldr	r1, [pc, #128]	; (8010a18 <tcp_input+0x2c4>)
 8010996:	4811      	ldr	r0, [pc, #68]	; (80109dc <tcp_input+0x288>)
 8010998:	f007 f8fa 	bl	8017b90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	7d1b      	ldrb	r3, [r3, #20]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d105      	bne.n	80109b0 <tcp_input+0x25c>
 80109a4:	4b0b      	ldr	r3, [pc, #44]	; (80109d4 <tcp_input+0x280>)
 80109a6:	22fd      	movs	r2, #253	; 0xfd
 80109a8:	491c      	ldr	r1, [pc, #112]	; (8010a1c <tcp_input+0x2c8>)
 80109aa:	480c      	ldr	r0, [pc, #48]	; (80109dc <tcp_input+0x288>)
 80109ac:	f007 f8f0 	bl	8017b90 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109b0:	69fb      	ldr	r3, [r7, #28]
 80109b2:	7a1b      	ldrb	r3, [r3, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d033      	beq.n	8010a20 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	7a1a      	ldrb	r2, [r3, #8]
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <tcp_input+0x290>)
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109c4:	3301      	adds	r3, #1
 80109c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d029      	beq.n	8010a20 <tcp_input+0x2cc>
      prev = pcb;
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	61bb      	str	r3, [r7, #24]
      continue;
 80109d0:	e06b      	b.n	8010aaa <tcp_input+0x356>
 80109d2:	bf00      	nop
 80109d4:	0801c954 	.word	0x0801c954
 80109d8:	0801c988 	.word	0x0801c988
 80109dc:	0801c9a0 	.word	0x0801c9a0
 80109e0:	20011bc0 	.word	0x20011bc0
 80109e4:	20009b0c 	.word	0x20009b0c
 80109e8:	20011bc4 	.word	0x20011bc4
 80109ec:	20011bc8 	.word	0x20011bc8
 80109f0:	20011bc6 	.word	0x20011bc6
 80109f4:	0801c9c8 	.word	0x0801c9c8
 80109f8:	0801c9d8 	.word	0x0801c9d8
 80109fc:	0801c9e4 	.word	0x0801c9e4
 8010a00:	20011bd0 	.word	0x20011bd0
 8010a04:	20011bd4 	.word	0x20011bd4
 8010a08:	20011bdc 	.word	0x20011bdc
 8010a0c:	20011bda 	.word	0x20011bda
 8010a10:	20011ba4 	.word	0x20011ba4
 8010a14:	0801ca04 	.word	0x0801ca04
 8010a18:	0801ca2c 	.word	0x0801ca2c
 8010a1c:	0801ca58 	.word	0x0801ca58
    }

    if (pcb->remote_port == tcphdr->src &&
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	8b1a      	ldrh	r2, [r3, #24]
 8010a24:	4b72      	ldr	r3, [pc, #456]	; (8010bf0 <tcp_input+0x49c>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d13a      	bne.n	8010aa6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	8ada      	ldrh	r2, [r3, #22]
 8010a34:	4b6e      	ldr	r3, [pc, #440]	; (8010bf0 <tcp_input+0x49c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	885b      	ldrh	r3, [r3, #2]
 8010a3a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d132      	bne.n	8010aa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	4b6b      	ldr	r3, [pc, #428]	; (8010bf4 <tcp_input+0x4a0>)
 8010a46:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d12c      	bne.n	8010aa6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	4b68      	ldr	r3, [pc, #416]	; (8010bf4 <tcp_input+0x4a0>)
 8010a52:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d126      	bne.n	8010aa6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010a58:	69fb      	ldr	r3, [r7, #28]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	69fa      	ldr	r2, [r7, #28]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d106      	bne.n	8010a70 <tcp_input+0x31c>
 8010a62:	4b65      	ldr	r3, [pc, #404]	; (8010bf8 <tcp_input+0x4a4>)
 8010a64:	f240 120d 	movw	r2, #269	; 0x10d
 8010a68:	4964      	ldr	r1, [pc, #400]	; (8010bfc <tcp_input+0x4a8>)
 8010a6a:	4865      	ldr	r0, [pc, #404]	; (8010c00 <tcp_input+0x4ac>)
 8010a6c:	f007 f890 	bl	8017b90 <iprintf>
      if (prev != NULL) {
 8010a70:	69bb      	ldr	r3, [r7, #24]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00a      	beq.n	8010a8c <tcp_input+0x338>
        prev->next = pcb->next;
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	68da      	ldr	r2, [r3, #12]
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010a7e:	4b61      	ldr	r3, [pc, #388]	; (8010c04 <tcp_input+0x4b0>)
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010a86:	4a5f      	ldr	r2, [pc, #380]	; (8010c04 <tcp_input+0x4b0>)
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	69fa      	ldr	r2, [r7, #28]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d111      	bne.n	8010aba <tcp_input+0x366>
 8010a96:	4b58      	ldr	r3, [pc, #352]	; (8010bf8 <tcp_input+0x4a4>)
 8010a98:	f240 1215 	movw	r2, #277	; 0x115
 8010a9c:	495a      	ldr	r1, [pc, #360]	; (8010c08 <tcp_input+0x4b4>)
 8010a9e:	4858      	ldr	r0, [pc, #352]	; (8010c00 <tcp_input+0x4ac>)
 8010aa0:	f007 f876 	bl	8017b90 <iprintf>
      break;
 8010aa4:	e009      	b.n	8010aba <tcp_input+0x366>
    }
    prev = pcb;
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	61fb      	str	r3, [r7, #28]
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f47f af5e 	bne.w	8010974 <tcp_input+0x220>
 8010ab8:	e000      	b.n	8010abc <tcp_input+0x368>
      break;
 8010aba:	bf00      	nop
  }

  if (pcb == NULL) {
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f040 80aa 	bne.w	8010c18 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ac4:	4b51      	ldr	r3, [pc, #324]	; (8010c0c <tcp_input+0x4b8>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	61fb      	str	r3, [r7, #28]
 8010aca:	e03f      	b.n	8010b4c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010acc:	69fb      	ldr	r3, [r7, #28]
 8010ace:	7d1b      	ldrb	r3, [r3, #20]
 8010ad0:	2b0a      	cmp	r3, #10
 8010ad2:	d006      	beq.n	8010ae2 <tcp_input+0x38e>
 8010ad4:	4b48      	ldr	r3, [pc, #288]	; (8010bf8 <tcp_input+0x4a4>)
 8010ad6:	f240 121f 	movw	r2, #287	; 0x11f
 8010ada:	494d      	ldr	r1, [pc, #308]	; (8010c10 <tcp_input+0x4bc>)
 8010adc:	4848      	ldr	r0, [pc, #288]	; (8010c00 <tcp_input+0x4ac>)
 8010ade:	f007 f857 	bl	8017b90 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	7a1b      	ldrb	r3, [r3, #8]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d009      	beq.n	8010afe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	7a1a      	ldrb	r2, [r3, #8]
 8010aee:	4b41      	ldr	r3, [pc, #260]	; (8010bf4 <tcp_input+0x4a0>)
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010af6:	3301      	adds	r3, #1
 8010af8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d122      	bne.n	8010b44 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	8b1a      	ldrh	r2, [r3, #24]
 8010b02:	4b3b      	ldr	r3, [pc, #236]	; (8010bf0 <tcp_input+0x49c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	881b      	ldrh	r3, [r3, #0]
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d11b      	bne.n	8010b46 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	8ada      	ldrh	r2, [r3, #22]
 8010b12:	4b37      	ldr	r3, [pc, #220]	; (8010bf0 <tcp_input+0x49c>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	885b      	ldrh	r3, [r3, #2]
 8010b18:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d113      	bne.n	8010b46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	685a      	ldr	r2, [r3, #4]
 8010b22:	4b34      	ldr	r3, [pc, #208]	; (8010bf4 <tcp_input+0x4a0>)
 8010b24:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d10d      	bne.n	8010b46 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	4b31      	ldr	r3, [pc, #196]	; (8010bf4 <tcp_input+0x4a0>)
 8010b30:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d107      	bne.n	8010b46 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010b36:	69f8      	ldr	r0, [r7, #28]
 8010b38:	f000 fb56 	bl	80111e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f7fd fcb5 	bl	800e4ac <pbuf_free>
        return;
 8010b42:	e1fd      	b.n	8010f40 <tcp_input+0x7ec>
        continue;
 8010b44:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	68db      	ldr	r3, [r3, #12]
 8010b4a:	61fb      	str	r3, [r7, #28]
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d1bc      	bne.n	8010acc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010b52:	2300      	movs	r3, #0
 8010b54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b56:	4b2f      	ldr	r3, [pc, #188]	; (8010c14 <tcp_input+0x4c0>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	617b      	str	r3, [r7, #20]
 8010b5c:	e02a      	b.n	8010bb4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	7a1b      	ldrb	r3, [r3, #8]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00c      	beq.n	8010b80 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b66:	697b      	ldr	r3, [r7, #20]
 8010b68:	7a1a      	ldrb	r2, [r3, #8]
 8010b6a:	4b22      	ldr	r3, [pc, #136]	; (8010bf4 <tcp_input+0x4a0>)
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b72:	3301      	adds	r3, #1
 8010b74:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d002      	beq.n	8010b80 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	61bb      	str	r3, [r7, #24]
        continue;
 8010b7e:	e016      	b.n	8010bae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	8ada      	ldrh	r2, [r3, #22]
 8010b84:	4b1a      	ldr	r3, [pc, #104]	; (8010bf0 <tcp_input+0x49c>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	885b      	ldrh	r3, [r3, #2]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d10c      	bne.n	8010baa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	4b17      	ldr	r3, [pc, #92]	; (8010bf4 <tcp_input+0x4a0>)
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d00f      	beq.n	8010bbc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00d      	beq.n	8010bbe <tcp_input+0x46a>
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d009      	beq.n	8010bbe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	617b      	str	r3, [r7, #20]
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d1d1      	bne.n	8010b5e <tcp_input+0x40a>
 8010bba:	e000      	b.n	8010bbe <tcp_input+0x46a>
            break;
 8010bbc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d029      	beq.n	8010c18 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00a      	beq.n	8010be0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	68da      	ldr	r2, [r3, #12]
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010bd2:	4b10      	ldr	r3, [pc, #64]	; (8010c14 <tcp_input+0x4c0>)
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010bda:	4a0e      	ldr	r2, [pc, #56]	; (8010c14 <tcp_input+0x4c0>)
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010be0:	6978      	ldr	r0, [r7, #20]
 8010be2:	f000 fa03 	bl	8010fec <tcp_listen_input>
      }
      pbuf_free(p);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7fd fc60 	bl	800e4ac <pbuf_free>
      return;
 8010bec:	e1a8      	b.n	8010f40 <tcp_input+0x7ec>
 8010bee:	bf00      	nop
 8010bf0:	20011bc0 	.word	0x20011bc0
 8010bf4:	20009b0c 	.word	0x20009b0c
 8010bf8:	0801c954 	.word	0x0801c954
 8010bfc:	0801ca80 	.word	0x0801ca80
 8010c00:	0801c9a0 	.word	0x0801c9a0
 8010c04:	20011ba4 	.word	0x20011ba4
 8010c08:	0801caac 	.word	0x0801caac
 8010c0c:	20011ba8 	.word	0x20011ba8
 8010c10:	0801cad8 	.word	0x0801cad8
 8010c14:	20011ba0 	.word	0x20011ba0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 8158 	beq.w	8010ed0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010c20:	4b95      	ldr	r3, [pc, #596]	; (8010e78 <tcp_input+0x724>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	891a      	ldrh	r2, [r3, #8]
 8010c2a:	4b93      	ldr	r3, [pc, #588]	; (8010e78 <tcp_input+0x724>)
 8010c2c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010c2e:	4a92      	ldr	r2, [pc, #584]	; (8010e78 <tcp_input+0x724>)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010c34:	4b91      	ldr	r3, [pc, #580]	; (8010e7c <tcp_input+0x728>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a8f      	ldr	r2, [pc, #572]	; (8010e78 <tcp_input+0x724>)
 8010c3a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010c3c:	4b90      	ldr	r3, [pc, #576]	; (8010e80 <tcp_input+0x72c>)
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010c42:	4b90      	ldr	r3, [pc, #576]	; (8010e84 <tcp_input+0x730>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010c48:	4b8f      	ldr	r3, [pc, #572]	; (8010e88 <tcp_input+0x734>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010c4e:	4b8f      	ldr	r3, [pc, #572]	; (8010e8c <tcp_input+0x738>)
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	f003 0308 	and.w	r3, r3, #8
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d006      	beq.n	8010c68 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	7b5b      	ldrb	r3, [r3, #13]
 8010c5e:	f043 0301 	orr.w	r3, r3, #1
 8010c62:	b2da      	uxtb	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d017      	beq.n	8010ca0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c70:	69f8      	ldr	r0, [r7, #28]
 8010c72:	f7ff f85b 	bl	800fd2c <tcp_process_refused_data>
 8010c76:	4603      	mov	r3, r0
 8010c78:	f113 0f0d 	cmn.w	r3, #13
 8010c7c:	d007      	beq.n	8010c8e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00c      	beq.n	8010ca0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c86:	4b82      	ldr	r3, [pc, #520]	; (8010e90 <tcp_input+0x73c>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d008      	beq.n	8010ca0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f040 80e3 	bne.w	8010e5e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010c98:	69f8      	ldr	r0, [r7, #28]
 8010c9a:	f003 fe27 	bl	80148ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010c9e:	e0de      	b.n	8010e5e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010ca0:	4a7c      	ldr	r2, [pc, #496]	; (8010e94 <tcp_input+0x740>)
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010ca6:	69f8      	ldr	r0, [r7, #28]
 8010ca8:	f000 fb18 	bl	80112dc <tcp_process>
 8010cac:	4603      	mov	r3, r0
 8010cae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010cb4:	f113 0f0d 	cmn.w	r3, #13
 8010cb8:	f000 80d3 	beq.w	8010e62 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010cbc:	4b71      	ldr	r3, [pc, #452]	; (8010e84 <tcp_input+0x730>)
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	f003 0308 	and.w	r3, r3, #8
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d015      	beq.n	8010cf4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d008      	beq.n	8010ce4 <tcp_input+0x590>
 8010cd2:	69fb      	ldr	r3, [r7, #28]
 8010cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	6912      	ldr	r2, [r2, #16]
 8010cdc:	f06f 010d 	mvn.w	r1, #13
 8010ce0:	4610      	mov	r0, r2
 8010ce2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010ce4:	69f9      	ldr	r1, [r7, #28]
 8010ce6:	486c      	ldr	r0, [pc, #432]	; (8010e98 <tcp_input+0x744>)
 8010ce8:	f7ff fbbc 	bl	8010464 <tcp_pcb_remove>
        tcp_free(pcb);
 8010cec:	69f8      	ldr	r0, [r7, #28]
 8010cee:	f7fd fe89 	bl	800ea04 <tcp_free>
 8010cf2:	e0da      	b.n	8010eaa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010cf8:	4b63      	ldr	r3, [pc, #396]	; (8010e88 <tcp_input+0x734>)
 8010cfa:	881b      	ldrh	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d01d      	beq.n	8010d3c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010d00:	4b61      	ldr	r3, [pc, #388]	; (8010e88 <tcp_input+0x734>)
 8010d02:	881b      	ldrh	r3, [r3, #0]
 8010d04:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00a      	beq.n	8010d26 <tcp_input+0x5d2>
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d16:	69fa      	ldr	r2, [r7, #28]
 8010d18:	6910      	ldr	r0, [r2, #16]
 8010d1a:	89fa      	ldrh	r2, [r7, #14]
 8010d1c:	69f9      	ldr	r1, [r7, #28]
 8010d1e:	4798      	blx	r3
 8010d20:	4603      	mov	r3, r0
 8010d22:	74fb      	strb	r3, [r7, #19]
 8010d24:	e001      	b.n	8010d2a <tcp_input+0x5d6>
 8010d26:	2300      	movs	r3, #0
 8010d28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d2e:	f113 0f0d 	cmn.w	r3, #13
 8010d32:	f000 8098 	beq.w	8010e66 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010d36:	4b54      	ldr	r3, [pc, #336]	; (8010e88 <tcp_input+0x734>)
 8010d38:	2200      	movs	r2, #0
 8010d3a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010d3c:	69f8      	ldr	r0, [r7, #28]
 8010d3e:	f000 f915 	bl	8010f6c <tcp_input_delayed_close>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f040 8090 	bne.w	8010e6a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010d4a:	4b4d      	ldr	r3, [pc, #308]	; (8010e80 <tcp_input+0x72c>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d041      	beq.n	8010dd6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d006      	beq.n	8010d68 <tcp_input+0x614>
 8010d5a:	4b50      	ldr	r3, [pc, #320]	; (8010e9c <tcp_input+0x748>)
 8010d5c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010d60:	494f      	ldr	r1, [pc, #316]	; (8010ea0 <tcp_input+0x74c>)
 8010d62:	4850      	ldr	r0, [pc, #320]	; (8010ea4 <tcp_input+0x750>)
 8010d64:	f006 ff14 	bl	8017b90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	8b5b      	ldrh	r3, [r3, #26]
 8010d6c:	f003 0310 	and.w	r3, r3, #16
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d008      	beq.n	8010d86 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010d74:	4b42      	ldr	r3, [pc, #264]	; (8010e80 <tcp_input+0x72c>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fd fb97 	bl	800e4ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010d7e:	69f8      	ldr	r0, [r7, #28]
 8010d80:	f7fe f984 	bl	800f08c <tcp_abort>
            goto aborted;
 8010d84:	e091      	b.n	8010eaa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00c      	beq.n	8010daa <tcp_input+0x656>
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	6918      	ldr	r0, [r3, #16]
 8010d9a:	4b39      	ldr	r3, [pc, #228]	; (8010e80 <tcp_input+0x72c>)
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	2300      	movs	r3, #0
 8010da0:	69f9      	ldr	r1, [r7, #28]
 8010da2:	47a0      	blx	r4
 8010da4:	4603      	mov	r3, r0
 8010da6:	74fb      	strb	r3, [r7, #19]
 8010da8:	e008      	b.n	8010dbc <tcp_input+0x668>
 8010daa:	4b35      	ldr	r3, [pc, #212]	; (8010e80 <tcp_input+0x72c>)
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	2300      	movs	r3, #0
 8010db0:	69f9      	ldr	r1, [r7, #28]
 8010db2:	2000      	movs	r0, #0
 8010db4:	f7ff f890 	bl	800fed8 <tcp_recv_null>
 8010db8:	4603      	mov	r3, r0
 8010dba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010dbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dc0:	f113 0f0d 	cmn.w	r3, #13
 8010dc4:	d053      	beq.n	8010e6e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010dc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010dce:	4b2c      	ldr	r3, [pc, #176]	; (8010e80 <tcp_input+0x72c>)
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010dd6:	4b2b      	ldr	r3, [pc, #172]	; (8010e84 <tcp_input+0x730>)
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	f003 0320 	and.w	r3, r3, #32
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d030      	beq.n	8010e44 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d009      	beq.n	8010dfe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dee:	7b5a      	ldrb	r2, [r3, #13]
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010df4:	f042 0220 	orr.w	r2, r2, #32
 8010df8:	b2d2      	uxtb	r2, r2
 8010dfa:	735a      	strb	r2, [r3, #13]
 8010dfc:	e022      	b.n	8010e44 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010e06:	d005      	beq.n	8010e14 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00b      	beq.n	8010e36 <tcp_input+0x6e2>
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	6918      	ldr	r0, [r3, #16]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	69f9      	ldr	r1, [r7, #28]
 8010e2e:	47a0      	blx	r4
 8010e30:	4603      	mov	r3, r0
 8010e32:	74fb      	strb	r3, [r7, #19]
 8010e34:	e001      	b.n	8010e3a <tcp_input+0x6e6>
 8010e36:	2300      	movs	r3, #0
 8010e38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e3e:	f113 0f0d 	cmn.w	r3, #13
 8010e42:	d016      	beq.n	8010e72 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010e44:	4b13      	ldr	r3, [pc, #76]	; (8010e94 <tcp_input+0x740>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010e4a:	69f8      	ldr	r0, [r7, #28]
 8010e4c:	f000 f88e 	bl	8010f6c <tcp_input_delayed_close>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d128      	bne.n	8010ea8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010e56:	69f8      	ldr	r0, [r7, #28]
 8010e58:	f002 ff20 	bl	8013c9c <tcp_output>
 8010e5c:	e025      	b.n	8010eaa <tcp_input+0x756>
        goto aborted;
 8010e5e:	bf00      	nop
 8010e60:	e023      	b.n	8010eaa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010e62:	bf00      	nop
 8010e64:	e021      	b.n	8010eaa <tcp_input+0x756>
              goto aborted;
 8010e66:	bf00      	nop
 8010e68:	e01f      	b.n	8010eaa <tcp_input+0x756>
          goto aborted;
 8010e6a:	bf00      	nop
 8010e6c:	e01d      	b.n	8010eaa <tcp_input+0x756>
            goto aborted;
 8010e6e:	bf00      	nop
 8010e70:	e01b      	b.n	8010eaa <tcp_input+0x756>
              goto aborted;
 8010e72:	bf00      	nop
 8010e74:	e019      	b.n	8010eaa <tcp_input+0x756>
 8010e76:	bf00      	nop
 8010e78:	20011bb0 	.word	0x20011bb0
 8010e7c:	20011bc0 	.word	0x20011bc0
 8010e80:	20011be0 	.word	0x20011be0
 8010e84:	20011bdd 	.word	0x20011bdd
 8010e88:	20011bd8 	.word	0x20011bd8
 8010e8c:	20011bdc 	.word	0x20011bdc
 8010e90:	20011bda 	.word	0x20011bda
 8010e94:	20011be4 	.word	0x20011be4
 8010e98:	20011ba4 	.word	0x20011ba4
 8010e9c:	0801c954 	.word	0x0801c954
 8010ea0:	0801cb08 	.word	0x0801cb08
 8010ea4:	0801c9a0 	.word	0x0801c9a0
          goto aborted;
 8010ea8:	bf00      	nop
    tcp_input_pcb = NULL;
 8010eaa:	4b27      	ldr	r3, [pc, #156]	; (8010f48 <tcp_input+0x7f4>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010eb0:	4b26      	ldr	r3, [pc, #152]	; (8010f4c <tcp_input+0x7f8>)
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010eb6:	4b26      	ldr	r3, [pc, #152]	; (8010f50 <tcp_input+0x7fc>)
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d03f      	beq.n	8010f3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010ebe:	4b24      	ldr	r3, [pc, #144]	; (8010f50 <tcp_input+0x7fc>)
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fd faf2 	bl	800e4ac <pbuf_free>
      inseg.p = NULL;
 8010ec8:	4b21      	ldr	r3, [pc, #132]	; (8010f50 <tcp_input+0x7fc>)
 8010eca:	2200      	movs	r2, #0
 8010ecc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010ece:	e036      	b.n	8010f3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010ed0:	4b20      	ldr	r3, [pc, #128]	; (8010f54 <tcp_input+0x800>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	899b      	ldrh	r3, [r3, #12]
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7fb fde1 	bl	800caa0 <lwip_htons>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	f003 0304 	and.w	r3, r3, #4
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d118      	bne.n	8010f1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010eea:	4b1b      	ldr	r3, [pc, #108]	; (8010f58 <tcp_input+0x804>)
 8010eec:	6819      	ldr	r1, [r3, #0]
 8010eee:	4b1b      	ldr	r3, [pc, #108]	; (8010f5c <tcp_input+0x808>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4b1a      	ldr	r3, [pc, #104]	; (8010f60 <tcp_input+0x80c>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010efa:	4b16      	ldr	r3, [pc, #88]	; (8010f54 <tcp_input+0x800>)
 8010efc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010efe:	885b      	ldrh	r3, [r3, #2]
 8010f00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f02:	4a14      	ldr	r2, [pc, #80]	; (8010f54 <tcp_input+0x800>)
 8010f04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f06:	8812      	ldrh	r2, [r2, #0]
 8010f08:	b292      	uxth	r2, r2
 8010f0a:	9202      	str	r2, [sp, #8]
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <tcp_input+0x810>)
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	4b15      	ldr	r3, [pc, #84]	; (8010f68 <tcp_input+0x814>)
 8010f14:	4602      	mov	r2, r0
 8010f16:	2000      	movs	r0, #0
 8010f18:	f003 fc96 	bl	8014848 <tcp_rst>
    pbuf_free(p);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7fd fac5 	bl	800e4ac <pbuf_free>
  return;
 8010f22:	e00c      	b.n	8010f3e <tcp_input+0x7ea>
    goto dropped;
 8010f24:	bf00      	nop
 8010f26:	e006      	b.n	8010f36 <tcp_input+0x7e2>
    goto dropped;
 8010f28:	bf00      	nop
 8010f2a:	e004      	b.n	8010f36 <tcp_input+0x7e2>
    goto dropped;
 8010f2c:	bf00      	nop
 8010f2e:	e002      	b.n	8010f36 <tcp_input+0x7e2>
      goto dropped;
 8010f30:	bf00      	nop
 8010f32:	e000      	b.n	8010f36 <tcp_input+0x7e2>
      goto dropped;
 8010f34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f7fd fab8 	bl	800e4ac <pbuf_free>
 8010f3c:	e000      	b.n	8010f40 <tcp_input+0x7ec>
  return;
 8010f3e:	bf00      	nop
}
 8010f40:	3724      	adds	r7, #36	; 0x24
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd90      	pop	{r4, r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20011be4 	.word	0x20011be4
 8010f4c:	20011be0 	.word	0x20011be0
 8010f50:	20011bb0 	.word	0x20011bb0
 8010f54:	20011bc0 	.word	0x20011bc0
 8010f58:	20011bd4 	.word	0x20011bd4
 8010f5c:	20011bda 	.word	0x20011bda
 8010f60:	20011bd0 	.word	0x20011bd0
 8010f64:	20009b1c 	.word	0x20009b1c
 8010f68:	20009b20 	.word	0x20009b20

08010f6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d106      	bne.n	8010f88 <tcp_input_delayed_close+0x1c>
 8010f7a:	4b17      	ldr	r3, [pc, #92]	; (8010fd8 <tcp_input_delayed_close+0x6c>)
 8010f7c:	f240 225a 	movw	r2, #602	; 0x25a
 8010f80:	4916      	ldr	r1, [pc, #88]	; (8010fdc <tcp_input_delayed_close+0x70>)
 8010f82:	4817      	ldr	r0, [pc, #92]	; (8010fe0 <tcp_input_delayed_close+0x74>)
 8010f84:	f006 fe04 	bl	8017b90 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010f88:	4b16      	ldr	r3, [pc, #88]	; (8010fe4 <tcp_input_delayed_close+0x78>)
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	f003 0310 	and.w	r3, r3, #16
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d01c      	beq.n	8010fce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	8b5b      	ldrh	r3, [r3, #26]
 8010f98:	f003 0310 	and.w	r3, r3, #16
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10d      	bne.n	8010fbc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d008      	beq.n	8010fbc <tcp_input_delayed_close+0x50>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	6912      	ldr	r2, [r2, #16]
 8010fb4:	f06f 010e 	mvn.w	r1, #14
 8010fb8:	4610      	mov	r0, r2
 8010fba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	480a      	ldr	r0, [pc, #40]	; (8010fe8 <tcp_input_delayed_close+0x7c>)
 8010fc0:	f7ff fa50 	bl	8010464 <tcp_pcb_remove>
    tcp_free(pcb);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7fd fd1d 	bl	800ea04 <tcp_free>
    return 1;
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e000      	b.n	8010fd0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	0801c954 	.word	0x0801c954
 8010fdc:	0801cb24 	.word	0x0801cb24
 8010fe0:	0801c9a0 	.word	0x0801c9a0
 8010fe4:	20011bdd 	.word	0x20011bdd
 8010fe8:	20011ba4 	.word	0x20011ba4

08010fec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010fec:	b590      	push	{r4, r7, lr}
 8010fee:	b08b      	sub	sp, #44	; 0x2c
 8010ff0:	af04      	add	r7, sp, #16
 8010ff2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010ff4:	4b6f      	ldr	r3, [pc, #444]	; (80111b4 <tcp_listen_input+0x1c8>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	f003 0304 	and.w	r3, r3, #4
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f040 80d2 	bne.w	80111a6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d106      	bne.n	8011016 <tcp_listen_input+0x2a>
 8011008:	4b6b      	ldr	r3, [pc, #428]	; (80111b8 <tcp_listen_input+0x1cc>)
 801100a:	f240 2281 	movw	r2, #641	; 0x281
 801100e:	496b      	ldr	r1, [pc, #428]	; (80111bc <tcp_listen_input+0x1d0>)
 8011010:	486b      	ldr	r0, [pc, #428]	; (80111c0 <tcp_listen_input+0x1d4>)
 8011012:	f006 fdbd 	bl	8017b90 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011016:	4b67      	ldr	r3, [pc, #412]	; (80111b4 <tcp_listen_input+0x1c8>)
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	f003 0310 	and.w	r3, r3, #16
 801101e:	2b00      	cmp	r3, #0
 8011020:	d019      	beq.n	8011056 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011022:	4b68      	ldr	r3, [pc, #416]	; (80111c4 <tcp_listen_input+0x1d8>)
 8011024:	6819      	ldr	r1, [r3, #0]
 8011026:	4b68      	ldr	r3, [pc, #416]	; (80111c8 <tcp_listen_input+0x1dc>)
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	461a      	mov	r2, r3
 801102c:	4b67      	ldr	r3, [pc, #412]	; (80111cc <tcp_listen_input+0x1e0>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011032:	4b67      	ldr	r3, [pc, #412]	; (80111d0 <tcp_listen_input+0x1e4>)
 8011034:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011036:	885b      	ldrh	r3, [r3, #2]
 8011038:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801103a:	4a65      	ldr	r2, [pc, #404]	; (80111d0 <tcp_listen_input+0x1e4>)
 801103c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801103e:	8812      	ldrh	r2, [r2, #0]
 8011040:	b292      	uxth	r2, r2
 8011042:	9202      	str	r2, [sp, #8]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	4b63      	ldr	r3, [pc, #396]	; (80111d4 <tcp_listen_input+0x1e8>)
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	4b63      	ldr	r3, [pc, #396]	; (80111d8 <tcp_listen_input+0x1ec>)
 801104c:	4602      	mov	r2, r0
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f003 fbfa 	bl	8014848 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011054:	e0a9      	b.n	80111aa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011056:	4b57      	ldr	r3, [pc, #348]	; (80111b4 <tcp_listen_input+0x1c8>)
 8011058:	781b      	ldrb	r3, [r3, #0]
 801105a:	f003 0302 	and.w	r3, r3, #2
 801105e:	2b00      	cmp	r3, #0
 8011060:	f000 80a3 	beq.w	80111aa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	7d5b      	ldrb	r3, [r3, #21]
 8011068:	4618      	mov	r0, r3
 801106a:	f7ff f859 	bl	8010120 <tcp_alloc>
 801106e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d111      	bne.n	801109a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	699b      	ldr	r3, [r3, #24]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00a      	beq.n	8011094 <tcp_listen_input+0xa8>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	6910      	ldr	r0, [r2, #16]
 8011086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801108a:	2100      	movs	r1, #0
 801108c:	4798      	blx	r3
 801108e:	4603      	mov	r3, r0
 8011090:	73bb      	strb	r3, [r7, #14]
      return;
 8011092:	e08b      	b.n	80111ac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011094:	23f0      	movs	r3, #240	; 0xf0
 8011096:	73bb      	strb	r3, [r7, #14]
      return;
 8011098:	e088      	b.n	80111ac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801109a:	4b50      	ldr	r3, [pc, #320]	; (80111dc <tcp_listen_input+0x1f0>)
 801109c:	695a      	ldr	r2, [r3, #20]
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80110a2:	4b4e      	ldr	r3, [pc, #312]	; (80111dc <tcp_listen_input+0x1f0>)
 80110a4:	691a      	ldr	r2, [r3, #16]
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8ada      	ldrh	r2, [r3, #22]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80110b2:	4b47      	ldr	r3, [pc, #284]	; (80111d0 <tcp_listen_input+0x1e4>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	2203      	movs	r2, #3
 80110c2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80110c4:	4b41      	ldr	r3, [pc, #260]	; (80111cc <tcp_listen_input+0x1e0>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	1c5a      	adds	r2, r3, #1
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80110d6:	6978      	ldr	r0, [r7, #20]
 80110d8:	f7ff fa58 	bl	801058c <tcp_next_iss>
 80110dc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	693a      	ldr	r2, [r7, #16]
 80110e2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	693a      	ldr	r2, [r7, #16]
 80110f4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80110f6:	4b35      	ldr	r3, [pc, #212]	; (80111cc <tcp_listen_input+0x1e0>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	1e5a      	subs	r2, r3, #1
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	691a      	ldr	r2, [r3, #16]
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	687a      	ldr	r2, [r7, #4]
 801110c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7a5b      	ldrb	r3, [r3, #9]
 8011112:	f003 030c 	and.w	r3, r3, #12
 8011116:	b2da      	uxtb	r2, r3
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	7a1a      	ldrb	r2, [r3, #8]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011124:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <tcp_listen_input+0x1f4>)
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	60da      	str	r2, [r3, #12]
 801112c:	4a2c      	ldr	r2, [pc, #176]	; (80111e0 <tcp_listen_input+0x1f4>)
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	6013      	str	r3, [r2, #0]
 8011132:	f003 fd4b 	bl	8014bcc <tcp_timer_needed>
 8011136:	4b2b      	ldr	r3, [pc, #172]	; (80111e4 <tcp_listen_input+0x1f8>)
 8011138:	2201      	movs	r2, #1
 801113a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801113c:	6978      	ldr	r0, [r7, #20]
 801113e:	f001 fd8f 	bl	8012c60 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011142:	4b23      	ldr	r3, [pc, #140]	; (80111d0 <tcp_listen_input+0x1e4>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	89db      	ldrh	r3, [r3, #14]
 8011148:	b29a      	uxth	r2, r3
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	3304      	adds	r3, #4
 8011164:	4618      	mov	r0, r3
 8011166:	f004 ff85 	bl	8016074 <ip4_route>
 801116a:	4601      	mov	r1, r0
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	3304      	adds	r3, #4
 8011170:	461a      	mov	r2, r3
 8011172:	4620      	mov	r0, r4
 8011174:	f7ff fa30 	bl	80105d8 <tcp_eff_send_mss_netif>
 8011178:	4603      	mov	r3, r0
 801117a:	461a      	mov	r2, r3
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011180:	2112      	movs	r1, #18
 8011182:	6978      	ldr	r0, [r7, #20]
 8011184:	f002 fc9c 	bl	8013ac0 <tcp_enqueue_flags>
 8011188:	4603      	mov	r3, r0
 801118a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d004      	beq.n	801119e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011194:	2100      	movs	r1, #0
 8011196:	6978      	ldr	r0, [r7, #20]
 8011198:	f7fd feba 	bl	800ef10 <tcp_abandon>
      return;
 801119c:	e006      	b.n	80111ac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801119e:	6978      	ldr	r0, [r7, #20]
 80111a0:	f002 fd7c 	bl	8013c9c <tcp_output>
  return;
 80111a4:	e001      	b.n	80111aa <tcp_listen_input+0x1be>
    return;
 80111a6:	bf00      	nop
 80111a8:	e000      	b.n	80111ac <tcp_listen_input+0x1c0>
  return;
 80111aa:	bf00      	nop
}
 80111ac:	371c      	adds	r7, #28
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd90      	pop	{r4, r7, pc}
 80111b2:	bf00      	nop
 80111b4:	20011bdc 	.word	0x20011bdc
 80111b8:	0801c954 	.word	0x0801c954
 80111bc:	0801cb4c 	.word	0x0801cb4c
 80111c0:	0801c9a0 	.word	0x0801c9a0
 80111c4:	20011bd4 	.word	0x20011bd4
 80111c8:	20011bda 	.word	0x20011bda
 80111cc:	20011bd0 	.word	0x20011bd0
 80111d0:	20011bc0 	.word	0x20011bc0
 80111d4:	20009b1c 	.word	0x20009b1c
 80111d8:	20009b20 	.word	0x20009b20
 80111dc:	20009b0c 	.word	0x20009b0c
 80111e0:	20011ba4 	.word	0x20011ba4
 80111e4:	20011bac 	.word	0x20011bac

080111e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af04      	add	r7, sp, #16
 80111ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80111f0:	4b2f      	ldr	r3, [pc, #188]	; (80112b0 <tcp_timewait_input+0xc8>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	f003 0304 	and.w	r3, r3, #4
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d153      	bne.n	80112a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d106      	bne.n	8011210 <tcp_timewait_input+0x28>
 8011202:	4b2c      	ldr	r3, [pc, #176]	; (80112b4 <tcp_timewait_input+0xcc>)
 8011204:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011208:	492b      	ldr	r1, [pc, #172]	; (80112b8 <tcp_timewait_input+0xd0>)
 801120a:	482c      	ldr	r0, [pc, #176]	; (80112bc <tcp_timewait_input+0xd4>)
 801120c:	f006 fcc0 	bl	8017b90 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011210:	4b27      	ldr	r3, [pc, #156]	; (80112b0 <tcp_timewait_input+0xc8>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	f003 0302 	and.w	r3, r3, #2
 8011218:	2b00      	cmp	r3, #0
 801121a:	d02a      	beq.n	8011272 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801121c:	4b28      	ldr	r3, [pc, #160]	; (80112c0 <tcp_timewait_input+0xd8>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011224:	1ad3      	subs	r3, r2, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	db2d      	blt.n	8011286 <tcp_timewait_input+0x9e>
 801122a:	4b25      	ldr	r3, [pc, #148]	; (80112c0 <tcp_timewait_input+0xd8>)
 801122c:	681a      	ldr	r2, [r3, #0]
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011232:	6879      	ldr	r1, [r7, #4]
 8011234:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011236:	440b      	add	r3, r1
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	2b00      	cmp	r3, #0
 801123c:	dc23      	bgt.n	8011286 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801123e:	4b21      	ldr	r3, [pc, #132]	; (80112c4 <tcp_timewait_input+0xdc>)
 8011240:	6819      	ldr	r1, [r3, #0]
 8011242:	4b21      	ldr	r3, [pc, #132]	; (80112c8 <tcp_timewait_input+0xe0>)
 8011244:	881b      	ldrh	r3, [r3, #0]
 8011246:	461a      	mov	r2, r3
 8011248:	4b1d      	ldr	r3, [pc, #116]	; (80112c0 <tcp_timewait_input+0xd8>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801124e:	4b1f      	ldr	r3, [pc, #124]	; (80112cc <tcp_timewait_input+0xe4>)
 8011250:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011252:	885b      	ldrh	r3, [r3, #2]
 8011254:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011256:	4a1d      	ldr	r2, [pc, #116]	; (80112cc <tcp_timewait_input+0xe4>)
 8011258:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801125a:	8812      	ldrh	r2, [r2, #0]
 801125c:	b292      	uxth	r2, r2
 801125e:	9202      	str	r2, [sp, #8]
 8011260:	9301      	str	r3, [sp, #4]
 8011262:	4b1b      	ldr	r3, [pc, #108]	; (80112d0 <tcp_timewait_input+0xe8>)
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	4b1b      	ldr	r3, [pc, #108]	; (80112d4 <tcp_timewait_input+0xec>)
 8011268:	4602      	mov	r2, r0
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f003 faec 	bl	8014848 <tcp_rst>
      return;
 8011270:	e01b      	b.n	80112aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011272:	4b0f      	ldr	r3, [pc, #60]	; (80112b0 <tcp_timewait_input+0xc8>)
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	f003 0301 	and.w	r3, r3, #1
 801127a:	2b00      	cmp	r3, #0
 801127c:	d003      	beq.n	8011286 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801127e:	4b16      	ldr	r3, [pc, #88]	; (80112d8 <tcp_timewait_input+0xf0>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011286:	4b10      	ldr	r3, [pc, #64]	; (80112c8 <tcp_timewait_input+0xe0>)
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00c      	beq.n	80112a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	8b5b      	ldrh	r3, [r3, #26]
 8011292:	f043 0302 	orr.w	r3, r3, #2
 8011296:	b29a      	uxth	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f002 fcfd 	bl	8013c9c <tcp_output>
  }
  return;
 80112a2:	e001      	b.n	80112a8 <tcp_timewait_input+0xc0>
    return;
 80112a4:	bf00      	nop
 80112a6:	e000      	b.n	80112aa <tcp_timewait_input+0xc2>
  return;
 80112a8:	bf00      	nop
}
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	20011bdc 	.word	0x20011bdc
 80112b4:	0801c954 	.word	0x0801c954
 80112b8:	0801cb6c 	.word	0x0801cb6c
 80112bc:	0801c9a0 	.word	0x0801c9a0
 80112c0:	20011bd0 	.word	0x20011bd0
 80112c4:	20011bd4 	.word	0x20011bd4
 80112c8:	20011bda 	.word	0x20011bda
 80112cc:	20011bc0 	.word	0x20011bc0
 80112d0:	20009b1c 	.word	0x20009b1c
 80112d4:	20009b20 	.word	0x20009b20
 80112d8:	20011b98 	.word	0x20011b98

080112dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80112dc:	b590      	push	{r4, r7, lr}
 80112de:	b08d      	sub	sp, #52	; 0x34
 80112e0:	af04      	add	r7, sp, #16
 80112e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80112e4:	2300      	movs	r3, #0
 80112e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_process+0x24>
 80112f2:	4b9d      	ldr	r3, [pc, #628]	; (8011568 <tcp_process+0x28c>)
 80112f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80112f8:	499c      	ldr	r1, [pc, #624]	; (801156c <tcp_process+0x290>)
 80112fa:	489d      	ldr	r0, [pc, #628]	; (8011570 <tcp_process+0x294>)
 80112fc:	f006 fc48 	bl	8017b90 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011300:	4b9c      	ldr	r3, [pc, #624]	; (8011574 <tcp_process+0x298>)
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	f003 0304 	and.w	r3, r3, #4
 8011308:	2b00      	cmp	r3, #0
 801130a:	d04e      	beq.n	80113aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	7d1b      	ldrb	r3, [r3, #20]
 8011310:	2b02      	cmp	r3, #2
 8011312:	d108      	bne.n	8011326 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011318:	4b97      	ldr	r3, [pc, #604]	; (8011578 <tcp_process+0x29c>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	429a      	cmp	r2, r3
 801131e:	d123      	bne.n	8011368 <tcp_process+0x8c>
        acceptable = 1;
 8011320:	2301      	movs	r3, #1
 8011322:	76fb      	strb	r3, [r7, #27]
 8011324:	e020      	b.n	8011368 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801132a:	4b94      	ldr	r3, [pc, #592]	; (801157c <tcp_process+0x2a0>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d102      	bne.n	8011338 <tcp_process+0x5c>
        acceptable = 1;
 8011332:	2301      	movs	r3, #1
 8011334:	76fb      	strb	r3, [r7, #27]
 8011336:	e017      	b.n	8011368 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011338:	4b90      	ldr	r3, [pc, #576]	; (801157c <tcp_process+0x2a0>)
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011340:	1ad3      	subs	r3, r2, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	db10      	blt.n	8011368 <tcp_process+0x8c>
 8011346:	4b8d      	ldr	r3, [pc, #564]	; (801157c <tcp_process+0x2a0>)
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134e:	6879      	ldr	r1, [r7, #4]
 8011350:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011352:	440b      	add	r3, r1
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	2b00      	cmp	r3, #0
 8011358:	dc06      	bgt.n	8011368 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	8b5b      	ldrh	r3, [r3, #26]
 801135e:	f043 0302 	orr.w	r3, r3, #2
 8011362:	b29a      	uxth	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011368:	7efb      	ldrb	r3, [r7, #27]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d01b      	beq.n	80113a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	7d1b      	ldrb	r3, [r3, #20]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d106      	bne.n	8011384 <tcp_process+0xa8>
 8011376:	4b7c      	ldr	r3, [pc, #496]	; (8011568 <tcp_process+0x28c>)
 8011378:	f44f 724e 	mov.w	r2, #824	; 0x338
 801137c:	4980      	ldr	r1, [pc, #512]	; (8011580 <tcp_process+0x2a4>)
 801137e:	487c      	ldr	r0, [pc, #496]	; (8011570 <tcp_process+0x294>)
 8011380:	f006 fc06 	bl	8017b90 <iprintf>
      recv_flags |= TF_RESET;
 8011384:	4b7f      	ldr	r3, [pc, #508]	; (8011584 <tcp_process+0x2a8>)
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	f043 0308 	orr.w	r3, r3, #8
 801138c:	b2da      	uxtb	r2, r3
 801138e:	4b7d      	ldr	r3, [pc, #500]	; (8011584 <tcp_process+0x2a8>)
 8011390:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	8b5b      	ldrh	r3, [r3, #26]
 8011396:	f023 0301 	bic.w	r3, r3, #1
 801139a:	b29a      	uxth	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80113a0:	f06f 030d 	mvn.w	r3, #13
 80113a4:	e37a      	b.n	8011a9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	e378      	b.n	8011a9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80113aa:	4b72      	ldr	r3, [pc, #456]	; (8011574 <tcp_process+0x298>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	f003 0302 	and.w	r3, r3, #2
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d010      	beq.n	80113d8 <tcp_process+0xfc>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	7d1b      	ldrb	r3, [r3, #20]
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	d00c      	beq.n	80113d8 <tcp_process+0xfc>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	7d1b      	ldrb	r3, [r3, #20]
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d008      	beq.n	80113d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	8b5b      	ldrh	r3, [r3, #26]
 80113ca:	f043 0302 	orr.w	r3, r3, #2
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80113d4:	2300      	movs	r3, #0
 80113d6:	e361      	b.n	8011a9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	8b5b      	ldrh	r3, [r3, #26]
 80113dc:	f003 0310 	and.w	r3, r3, #16
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d103      	bne.n	80113ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80113e4:	4b68      	ldr	r3, [pc, #416]	; (8011588 <tcp_process+0x2ac>)
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f001 fc2f 	bl	8012c60 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	7d1b      	ldrb	r3, [r3, #20]
 8011406:	3b02      	subs	r3, #2
 8011408:	2b07      	cmp	r3, #7
 801140a:	f200 8337 	bhi.w	8011a7c <tcp_process+0x7a0>
 801140e:	a201      	add	r2, pc, #4	; (adr r2, 8011414 <tcp_process+0x138>)
 8011410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011414:	08011435 	.word	0x08011435
 8011418:	08011665 	.word	0x08011665
 801141c:	080117dd 	.word	0x080117dd
 8011420:	08011807 	.word	0x08011807
 8011424:	0801192b 	.word	0x0801192b
 8011428:	080117dd 	.word	0x080117dd
 801142c:	080119b7 	.word	0x080119b7
 8011430:	08011a47 	.word	0x08011a47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011434:	4b4f      	ldr	r3, [pc, #316]	; (8011574 <tcp_process+0x298>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f003 0310 	and.w	r3, r3, #16
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 80e4 	beq.w	801160a <tcp_process+0x32e>
 8011442:	4b4c      	ldr	r3, [pc, #304]	; (8011574 <tcp_process+0x298>)
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 0302 	and.w	r3, r3, #2
 801144a:	2b00      	cmp	r3, #0
 801144c:	f000 80dd 	beq.w	801160a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011454:	1c5a      	adds	r2, r3, #1
 8011456:	4b48      	ldr	r3, [pc, #288]	; (8011578 <tcp_process+0x29c>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	429a      	cmp	r2, r3
 801145c:	f040 80d5 	bne.w	801160a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011460:	4b46      	ldr	r3, [pc, #280]	; (801157c <tcp_process+0x2a0>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	1c5a      	adds	r2, r3, #1
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011472:	4b41      	ldr	r3, [pc, #260]	; (8011578 <tcp_process+0x29c>)
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801147a:	4b44      	ldr	r3, [pc, #272]	; (801158c <tcp_process+0x2b0>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	89db      	ldrh	r3, [r3, #14]
 8011480:	b29a      	uxth	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011494:	4b39      	ldr	r3, [pc, #228]	; (801157c <tcp_process+0x2a0>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	1e5a      	subs	r2, r3, #1
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2204      	movs	r2, #4
 80114a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	3304      	adds	r3, #4
 80114ac:	4618      	mov	r0, r3
 80114ae:	f004 fde1 	bl	8016074 <ip4_route>
 80114b2:	4601      	mov	r1, r0
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3304      	adds	r3, #4
 80114b8:	461a      	mov	r2, r3
 80114ba:	4620      	mov	r0, r4
 80114bc:	f7ff f88c 	bl	80105d8 <tcp_eff_send_mss_netif>
 80114c0:	4603      	mov	r3, r0
 80114c2:	461a      	mov	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114cc:	009a      	lsls	r2, r3, #2
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80114d8:	428b      	cmp	r3, r1
 80114da:	bf38      	it	cc
 80114dc:	460b      	movcc	r3, r1
 80114de:	429a      	cmp	r2, r3
 80114e0:	d204      	bcs.n	80114ec <tcp_process+0x210>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	e00d      	b.n	8011508 <tcp_process+0x22c>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d904      	bls.n	8011504 <tcp_process+0x228>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114fe:	005b      	lsls	r3, r3, #1
 8011500:	b29b      	uxth	r3, r3
 8011502:	e001      	b.n	8011508 <tcp_process+0x22c>
 8011504:	f241 131c 	movw	r3, #4380	; 0x111c
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011514:	2b00      	cmp	r3, #0
 8011516:	d106      	bne.n	8011526 <tcp_process+0x24a>
 8011518:	4b13      	ldr	r3, [pc, #76]	; (8011568 <tcp_process+0x28c>)
 801151a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801151e:	491c      	ldr	r1, [pc, #112]	; (8011590 <tcp_process+0x2b4>)
 8011520:	4813      	ldr	r0, [pc, #76]	; (8011570 <tcp_process+0x294>)
 8011522:	f006 fb35 	bl	8017b90 <iprintf>
        --pcb->snd_queuelen;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801152c:	3b01      	subs	r3, #1
 801152e:	b29a      	uxth	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801153a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d12a      	bne.n	8011598 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011546:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d106      	bne.n	801155c <tcp_process+0x280>
 801154e:	4b06      	ldr	r3, [pc, #24]	; (8011568 <tcp_process+0x28c>)
 8011550:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011554:	490f      	ldr	r1, [pc, #60]	; (8011594 <tcp_process+0x2b8>)
 8011556:	4806      	ldr	r0, [pc, #24]	; (8011570 <tcp_process+0x294>)
 8011558:	f006 fb1a 	bl	8017b90 <iprintf>
          pcb->unsent = rseg->next;
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	66da      	str	r2, [r3, #108]	; 0x6c
 8011564:	e01c      	b.n	80115a0 <tcp_process+0x2c4>
 8011566:	bf00      	nop
 8011568:	0801c954 	.word	0x0801c954
 801156c:	0801cb8c 	.word	0x0801cb8c
 8011570:	0801c9a0 	.word	0x0801c9a0
 8011574:	20011bdc 	.word	0x20011bdc
 8011578:	20011bd4 	.word	0x20011bd4
 801157c:	20011bd0 	.word	0x20011bd0
 8011580:	0801cba8 	.word	0x0801cba8
 8011584:	20011bdd 	.word	0x20011bdd
 8011588:	20011b98 	.word	0x20011b98
 801158c:	20011bc0 	.word	0x20011bc0
 8011590:	0801cbc8 	.word	0x0801cbc8
 8011594:	0801cbe0 	.word	0x0801cbe0
        } else {
          pcb->unacked = rseg->next;
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80115a0:	69f8      	ldr	r0, [r7, #28]
 80115a2:	f7fe fc54 	bl	800fe4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d104      	bne.n	80115b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80115b6:	e006      	b.n	80115c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2200      	movs	r2, #0
 80115bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d00a      	beq.n	80115e6 <tcp_process+0x30a>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	6910      	ldr	r0, [r2, #16]
 80115da:	2200      	movs	r2, #0
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	4798      	blx	r3
 80115e0:	4603      	mov	r3, r0
 80115e2:	76bb      	strb	r3, [r7, #26]
 80115e4:	e001      	b.n	80115ea <tcp_process+0x30e>
 80115e6:	2300      	movs	r3, #0
 80115e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80115ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80115ee:	f113 0f0d 	cmn.w	r3, #13
 80115f2:	d102      	bne.n	80115fa <tcp_process+0x31e>
          return ERR_ABRT;
 80115f4:	f06f 030c 	mvn.w	r3, #12
 80115f8:	e250      	b.n	8011a9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	8b5b      	ldrh	r3, [r3, #26]
 80115fe:	f043 0302 	orr.w	r3, r3, #2
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011608:	e23a      	b.n	8011a80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801160a:	4b98      	ldr	r3, [pc, #608]	; (801186c <tcp_process+0x590>)
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	f003 0310 	and.w	r3, r3, #16
 8011612:	2b00      	cmp	r3, #0
 8011614:	f000 8234 	beq.w	8011a80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011618:	4b95      	ldr	r3, [pc, #596]	; (8011870 <tcp_process+0x594>)
 801161a:	6819      	ldr	r1, [r3, #0]
 801161c:	4b95      	ldr	r3, [pc, #596]	; (8011874 <tcp_process+0x598>)
 801161e:	881b      	ldrh	r3, [r3, #0]
 8011620:	461a      	mov	r2, r3
 8011622:	4b95      	ldr	r3, [pc, #596]	; (8011878 <tcp_process+0x59c>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011628:	4b94      	ldr	r3, [pc, #592]	; (801187c <tcp_process+0x5a0>)
 801162a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801162c:	885b      	ldrh	r3, [r3, #2]
 801162e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011630:	4a92      	ldr	r2, [pc, #584]	; (801187c <tcp_process+0x5a0>)
 8011632:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011634:	8812      	ldrh	r2, [r2, #0]
 8011636:	b292      	uxth	r2, r2
 8011638:	9202      	str	r2, [sp, #8]
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	4b90      	ldr	r3, [pc, #576]	; (8011880 <tcp_process+0x5a4>)
 801163e:	9300      	str	r3, [sp, #0]
 8011640:	4b90      	ldr	r3, [pc, #576]	; (8011884 <tcp_process+0x5a8>)
 8011642:	4602      	mov	r2, r0
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f003 f8ff 	bl	8014848 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011650:	2b05      	cmp	r3, #5
 8011652:	f200 8215 	bhi.w	8011a80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f002 feb9 	bl	80143d4 <tcp_rexmit_rto>
      break;
 8011662:	e20d      	b.n	8011a80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011664:	4b81      	ldr	r3, [pc, #516]	; (801186c <tcp_process+0x590>)
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	f003 0310 	and.w	r3, r3, #16
 801166c:	2b00      	cmp	r3, #0
 801166e:	f000 80a1 	beq.w	80117b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011672:	4b7f      	ldr	r3, [pc, #508]	; (8011870 <tcp_process+0x594>)
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801167a:	1ad3      	subs	r3, r2, r3
 801167c:	3b01      	subs	r3, #1
 801167e:	2b00      	cmp	r3, #0
 8011680:	db7e      	blt.n	8011780 <tcp_process+0x4a4>
 8011682:	4b7b      	ldr	r3, [pc, #492]	; (8011870 <tcp_process+0x594>)
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	dc77      	bgt.n	8011780 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2204      	movs	r2, #4
 8011694:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801169e:	23fa      	movs	r3, #250	; 0xfa
 80116a0:	76bb      	strb	r3, [r7, #26]
 80116a2:	e01d      	b.n	80116e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d106      	bne.n	80116bc <tcp_process+0x3e0>
 80116ae:	4b76      	ldr	r3, [pc, #472]	; (8011888 <tcp_process+0x5ac>)
 80116b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80116b4:	4975      	ldr	r1, [pc, #468]	; (801188c <tcp_process+0x5b0>)
 80116b6:	4876      	ldr	r0, [pc, #472]	; (8011890 <tcp_process+0x5b4>)
 80116b8:	f006 fa6a 	bl	8017b90 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116c0:	699b      	ldr	r3, [r3, #24]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00a      	beq.n	80116dc <tcp_process+0x400>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116ca:	699b      	ldr	r3, [r3, #24]
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	6910      	ldr	r0, [r2, #16]
 80116d0:	2200      	movs	r2, #0
 80116d2:	6879      	ldr	r1, [r7, #4]
 80116d4:	4798      	blx	r3
 80116d6:	4603      	mov	r3, r0
 80116d8:	76bb      	strb	r3, [r7, #26]
 80116da:	e001      	b.n	80116e0 <tcp_process+0x404>
 80116dc:	23f0      	movs	r3, #240	; 0xf0
 80116de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80116e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00a      	beq.n	80116fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80116e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116ec:	f113 0f0d 	cmn.w	r3, #13
 80116f0:	d002      	beq.n	80116f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7fd fcca 	bl	800f08c <tcp_abort>
            }
            return ERR_ABRT;
 80116f8:	f06f 030c 	mvn.w	r3, #12
 80116fc:	e1ce      	b.n	8011a9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 fae0 	bl	8011cc4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011704:	4b63      	ldr	r3, [pc, #396]	; (8011894 <tcp_process+0x5b8>)
 8011706:	881b      	ldrh	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d005      	beq.n	8011718 <tcp_process+0x43c>
            recv_acked--;
 801170c:	4b61      	ldr	r3, [pc, #388]	; (8011894 <tcp_process+0x5b8>)
 801170e:	881b      	ldrh	r3, [r3, #0]
 8011710:	3b01      	subs	r3, #1
 8011712:	b29a      	uxth	r2, r3
 8011714:	4b5f      	ldr	r3, [pc, #380]	; (8011894 <tcp_process+0x5b8>)
 8011716:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801171c:	009a      	lsls	r2, r3, #2
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	f241 111c 	movw	r1, #4380	; 0x111c
 8011728:	428b      	cmp	r3, r1
 801172a:	bf38      	it	cc
 801172c:	460b      	movcc	r3, r1
 801172e:	429a      	cmp	r2, r3
 8011730:	d204      	bcs.n	801173c <tcp_process+0x460>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	b29b      	uxth	r3, r3
 801173a:	e00d      	b.n	8011758 <tcp_process+0x47c>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011740:	005b      	lsls	r3, r3, #1
 8011742:	f241 121c 	movw	r2, #4380	; 0x111c
 8011746:	4293      	cmp	r3, r2
 8011748:	d904      	bls.n	8011754 <tcp_process+0x478>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	b29b      	uxth	r3, r3
 8011752:	e001      	b.n	8011758 <tcp_process+0x47c>
 8011754:	f241 131c 	movw	r3, #4380	; 0x111c
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801175e:	4b4e      	ldr	r3, [pc, #312]	; (8011898 <tcp_process+0x5bc>)
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	f003 0320 	and.w	r3, r3, #32
 8011766:	2b00      	cmp	r3, #0
 8011768:	d037      	beq.n	80117da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8b5b      	ldrh	r3, [r3, #26]
 801176e:	f043 0302 	orr.w	r3, r3, #2
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2207      	movs	r2, #7
 801177c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801177e:	e02c      	b.n	80117da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011780:	4b3b      	ldr	r3, [pc, #236]	; (8011870 <tcp_process+0x594>)
 8011782:	6819      	ldr	r1, [r3, #0]
 8011784:	4b3b      	ldr	r3, [pc, #236]	; (8011874 <tcp_process+0x598>)
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	461a      	mov	r2, r3
 801178a:	4b3b      	ldr	r3, [pc, #236]	; (8011878 <tcp_process+0x59c>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011790:	4b3a      	ldr	r3, [pc, #232]	; (801187c <tcp_process+0x5a0>)
 8011792:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011794:	885b      	ldrh	r3, [r3, #2]
 8011796:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011798:	4a38      	ldr	r2, [pc, #224]	; (801187c <tcp_process+0x5a0>)
 801179a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801179c:	8812      	ldrh	r2, [r2, #0]
 801179e:	b292      	uxth	r2, r2
 80117a0:	9202      	str	r2, [sp, #8]
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	4b36      	ldr	r3, [pc, #216]	; (8011880 <tcp_process+0x5a4>)
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4b36      	ldr	r3, [pc, #216]	; (8011884 <tcp_process+0x5a8>)
 80117aa:	4602      	mov	r2, r0
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f003 f84b 	bl	8014848 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80117b2:	e167      	b.n	8011a84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80117b4:	4b2d      	ldr	r3, [pc, #180]	; (801186c <tcp_process+0x590>)
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	f003 0302 	and.w	r3, r3, #2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f000 8161 	beq.w	8011a84 <tcp_process+0x7a8>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c6:	1e5a      	subs	r2, r3, #1
 80117c8:	4b2b      	ldr	r3, [pc, #172]	; (8011878 <tcp_process+0x59c>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	f040 8159 	bne.w	8011a84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f002 fe20 	bl	8014418 <tcp_rexmit>
      break;
 80117d8:	e154      	b.n	8011a84 <tcp_process+0x7a8>
 80117da:	e153      	b.n	8011a84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 fa71 	bl	8011cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80117e2:	4b2d      	ldr	r3, [pc, #180]	; (8011898 <tcp_process+0x5bc>)
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	f003 0320 	and.w	r3, r3, #32
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f000 814c 	beq.w	8011a88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	8b5b      	ldrh	r3, [r3, #26]
 80117f4:	f043 0302 	orr.w	r3, r3, #2
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2207      	movs	r2, #7
 8011802:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011804:	e140      	b.n	8011a88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 fa5c 	bl	8011cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801180c:	4b22      	ldr	r3, [pc, #136]	; (8011898 <tcp_process+0x5bc>)
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	f003 0320 	and.w	r3, r3, #32
 8011814:	2b00      	cmp	r3, #0
 8011816:	d071      	beq.n	80118fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011818:	4b14      	ldr	r3, [pc, #80]	; (801186c <tcp_process+0x590>)
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	f003 0310 	and.w	r3, r3, #16
 8011820:	2b00      	cmp	r3, #0
 8011822:	d060      	beq.n	80118e6 <tcp_process+0x60a>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011828:	4b11      	ldr	r3, [pc, #68]	; (8011870 <tcp_process+0x594>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	429a      	cmp	r2, r3
 801182e:	d15a      	bne.n	80118e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011834:	2b00      	cmp	r3, #0
 8011836:	d156      	bne.n	80118e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f043 0302 	orr.w	r3, r3, #2
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f7fe fdbc 	bl	80103c4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801184c:	4b13      	ldr	r3, [pc, #76]	; (801189c <tcp_process+0x5c0>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	429a      	cmp	r2, r3
 8011854:	d105      	bne.n	8011862 <tcp_process+0x586>
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <tcp_process+0x5c0>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	4a0f      	ldr	r2, [pc, #60]	; (801189c <tcp_process+0x5c0>)
 801185e:	6013      	str	r3, [r2, #0]
 8011860:	e02e      	b.n	80118c0 <tcp_process+0x5e4>
 8011862:	4b0e      	ldr	r3, [pc, #56]	; (801189c <tcp_process+0x5c0>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	617b      	str	r3, [r7, #20]
 8011868:	e027      	b.n	80118ba <tcp_process+0x5de>
 801186a:	bf00      	nop
 801186c:	20011bdc 	.word	0x20011bdc
 8011870:	20011bd4 	.word	0x20011bd4
 8011874:	20011bda 	.word	0x20011bda
 8011878:	20011bd0 	.word	0x20011bd0
 801187c:	20011bc0 	.word	0x20011bc0
 8011880:	20009b1c 	.word	0x20009b1c
 8011884:	20009b20 	.word	0x20009b20
 8011888:	0801c954 	.word	0x0801c954
 801188c:	0801cbf4 	.word	0x0801cbf4
 8011890:	0801c9a0 	.word	0x0801c9a0
 8011894:	20011bd8 	.word	0x20011bd8
 8011898:	20011bdd 	.word	0x20011bdd
 801189c:	20011ba4 	.word	0x20011ba4
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d104      	bne.n	80118b4 <tcp_process+0x5d8>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	68da      	ldr	r2, [r3, #12]
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	60da      	str	r2, [r3, #12]
 80118b2:	e005      	b.n	80118c0 <tcp_process+0x5e4>
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	617b      	str	r3, [r7, #20]
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1ef      	bne.n	80118a0 <tcp_process+0x5c4>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	60da      	str	r2, [r3, #12]
 80118c6:	4b77      	ldr	r3, [pc, #476]	; (8011aa4 <tcp_process+0x7c8>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	220a      	movs	r2, #10
 80118d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80118d2:	4b75      	ldr	r3, [pc, #468]	; (8011aa8 <tcp_process+0x7cc>)
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	4a73      	ldr	r2, [pc, #460]	; (8011aa8 <tcp_process+0x7cc>)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6013      	str	r3, [r2, #0]
 80118e0:	f003 f974 	bl	8014bcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80118e4:	e0d2      	b.n	8011a8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	8b5b      	ldrh	r3, [r3, #26]
 80118ea:	f043 0302 	orr.w	r3, r3, #2
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2208      	movs	r2, #8
 80118f8:	751a      	strb	r2, [r3, #20]
      break;
 80118fa:	e0c7      	b.n	8011a8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118fc:	4b6b      	ldr	r3, [pc, #428]	; (8011aac <tcp_process+0x7d0>)
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	f003 0310 	and.w	r3, r3, #16
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 80c1 	beq.w	8011a8c <tcp_process+0x7b0>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801190e:	4b68      	ldr	r3, [pc, #416]	; (8011ab0 <tcp_process+0x7d4>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	429a      	cmp	r2, r3
 8011914:	f040 80ba 	bne.w	8011a8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801191c:	2b00      	cmp	r3, #0
 801191e:	f040 80b5 	bne.w	8011a8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2206      	movs	r2, #6
 8011926:	751a      	strb	r2, [r3, #20]
      break;
 8011928:	e0b0      	b.n	8011a8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 f9ca 	bl	8011cc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011930:	4b60      	ldr	r3, [pc, #384]	; (8011ab4 <tcp_process+0x7d8>)
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f003 0320 	and.w	r3, r3, #32
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 80a9 	beq.w	8011a90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0302 	orr.w	r3, r3, #2
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7fe fd39 	bl	80103c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011952:	4b59      	ldr	r3, [pc, #356]	; (8011ab8 <tcp_process+0x7dc>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	687a      	ldr	r2, [r7, #4]
 8011958:	429a      	cmp	r2, r3
 801195a:	d105      	bne.n	8011968 <tcp_process+0x68c>
 801195c:	4b56      	ldr	r3, [pc, #344]	; (8011ab8 <tcp_process+0x7dc>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	68db      	ldr	r3, [r3, #12]
 8011962:	4a55      	ldr	r2, [pc, #340]	; (8011ab8 <tcp_process+0x7dc>)
 8011964:	6013      	str	r3, [r2, #0]
 8011966:	e013      	b.n	8011990 <tcp_process+0x6b4>
 8011968:	4b53      	ldr	r3, [pc, #332]	; (8011ab8 <tcp_process+0x7dc>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	613b      	str	r3, [r7, #16]
 801196e:	e00c      	b.n	801198a <tcp_process+0x6ae>
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	429a      	cmp	r2, r3
 8011978:	d104      	bne.n	8011984 <tcp_process+0x6a8>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68da      	ldr	r2, [r3, #12]
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	60da      	str	r2, [r3, #12]
 8011982:	e005      	b.n	8011990 <tcp_process+0x6b4>
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	68db      	ldr	r3, [r3, #12]
 8011988:	613b      	str	r3, [r7, #16]
 801198a:	693b      	ldr	r3, [r7, #16]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1ef      	bne.n	8011970 <tcp_process+0x694>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	60da      	str	r2, [r3, #12]
 8011996:	4b43      	ldr	r3, [pc, #268]	; (8011aa4 <tcp_process+0x7c8>)
 8011998:	2201      	movs	r2, #1
 801199a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	220a      	movs	r2, #10
 80119a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80119a2:	4b41      	ldr	r3, [pc, #260]	; (8011aa8 <tcp_process+0x7cc>)
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	60da      	str	r2, [r3, #12]
 80119aa:	4a3f      	ldr	r2, [pc, #252]	; (8011aa8 <tcp_process+0x7cc>)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6013      	str	r3, [r2, #0]
 80119b0:	f003 f90c 	bl	8014bcc <tcp_timer_needed>
      }
      break;
 80119b4:	e06c      	b.n	8011a90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 f984 	bl	8011cc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80119bc:	4b3b      	ldr	r3, [pc, #236]	; (8011aac <tcp_process+0x7d0>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	f003 0310 	and.w	r3, r3, #16
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d065      	beq.n	8011a94 <tcp_process+0x7b8>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119cc:	4b38      	ldr	r3, [pc, #224]	; (8011ab0 <tcp_process+0x7d4>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d15f      	bne.n	8011a94 <tcp_process+0x7b8>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d15b      	bne.n	8011a94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7fe fcf1 	bl	80103c4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119e2:	4b35      	ldr	r3, [pc, #212]	; (8011ab8 <tcp_process+0x7dc>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d105      	bne.n	80119f8 <tcp_process+0x71c>
 80119ec:	4b32      	ldr	r3, [pc, #200]	; (8011ab8 <tcp_process+0x7dc>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	4a31      	ldr	r2, [pc, #196]	; (8011ab8 <tcp_process+0x7dc>)
 80119f4:	6013      	str	r3, [r2, #0]
 80119f6:	e013      	b.n	8011a20 <tcp_process+0x744>
 80119f8:	4b2f      	ldr	r3, [pc, #188]	; (8011ab8 <tcp_process+0x7dc>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60fb      	str	r3, [r7, #12]
 80119fe:	e00c      	b.n	8011a1a <tcp_process+0x73e>
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d104      	bne.n	8011a14 <tcp_process+0x738>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	68da      	ldr	r2, [r3, #12]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	60da      	str	r2, [r3, #12]
 8011a12:	e005      	b.n	8011a20 <tcp_process+0x744>
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	60fb      	str	r3, [r7, #12]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1ef      	bne.n	8011a00 <tcp_process+0x724>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	60da      	str	r2, [r3, #12]
 8011a26:	4b1f      	ldr	r3, [pc, #124]	; (8011aa4 <tcp_process+0x7c8>)
 8011a28:	2201      	movs	r2, #1
 8011a2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	220a      	movs	r2, #10
 8011a30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a32:	4b1d      	ldr	r3, [pc, #116]	; (8011aa8 <tcp_process+0x7cc>)
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	60da      	str	r2, [r3, #12]
 8011a3a:	4a1b      	ldr	r2, [pc, #108]	; (8011aa8 <tcp_process+0x7cc>)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6013      	str	r3, [r2, #0]
 8011a40:	f003 f8c4 	bl	8014bcc <tcp_timer_needed>
      }
      break;
 8011a44:	e026      	b.n	8011a94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011a46:	6878      	ldr	r0, [r7, #4]
 8011a48:	f000 f93c 	bl	8011cc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a4c:	4b17      	ldr	r3, [pc, #92]	; (8011aac <tcp_process+0x7d0>)
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	f003 0310 	and.w	r3, r3, #16
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d01f      	beq.n	8011a98 <tcp_process+0x7bc>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a5c:	4b14      	ldr	r3, [pc, #80]	; (8011ab0 <tcp_process+0x7d4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d119      	bne.n	8011a98 <tcp_process+0x7bc>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d115      	bne.n	8011a98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011a6c:	4b11      	ldr	r3, [pc, #68]	; (8011ab4 <tcp_process+0x7d8>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	f043 0310 	orr.w	r3, r3, #16
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	4b0f      	ldr	r3, [pc, #60]	; (8011ab4 <tcp_process+0x7d8>)
 8011a78:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011a7a:	e00d      	b.n	8011a98 <tcp_process+0x7bc>
    default:
      break;
 8011a7c:	bf00      	nop
 8011a7e:	e00c      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a80:	bf00      	nop
 8011a82:	e00a      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a84:	bf00      	nop
 8011a86:	e008      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a88:	bf00      	nop
 8011a8a:	e006      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a8c:	bf00      	nop
 8011a8e:	e004      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a90:	bf00      	nop
 8011a92:	e002      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a94:	bf00      	nop
 8011a96:	e000      	b.n	8011a9a <tcp_process+0x7be>
      break;
 8011a98:	bf00      	nop
  }
  return ERR_OK;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3724      	adds	r7, #36	; 0x24
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd90      	pop	{r4, r7, pc}
 8011aa4:	20011bac 	.word	0x20011bac
 8011aa8:	20011ba8 	.word	0x20011ba8
 8011aac:	20011bdc 	.word	0x20011bdc
 8011ab0:	20011bd4 	.word	0x20011bd4
 8011ab4:	20011bdd 	.word	0x20011bdd
 8011ab8:	20011ba4 	.word	0x20011ba4

08011abc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011abc:	b590      	push	{r4, r7, lr}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d106      	bne.n	8011ada <tcp_oos_insert_segment+0x1e>
 8011acc:	4b3b      	ldr	r3, [pc, #236]	; (8011bbc <tcp_oos_insert_segment+0x100>)
 8011ace:	f240 421f 	movw	r2, #1055	; 0x41f
 8011ad2:	493b      	ldr	r1, [pc, #236]	; (8011bc0 <tcp_oos_insert_segment+0x104>)
 8011ad4:	483b      	ldr	r0, [pc, #236]	; (8011bc4 <tcp_oos_insert_segment+0x108>)
 8011ad6:	f006 f85b 	bl	8017b90 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	b29b      	uxth	r3, r3
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fa ffdc 	bl	800caa0 <lwip_htons>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	f003 0301 	and.w	r3, r3, #1
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d028      	beq.n	8011b46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011af4:	6838      	ldr	r0, [r7, #0]
 8011af6:	f7fe f995 	bl	800fe24 <tcp_segs_free>
    next = NULL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	603b      	str	r3, [r7, #0]
 8011afe:	e056      	b.n	8011bae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	899b      	ldrh	r3, [r3, #12]
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fa ffc9 	bl	800caa0 <lwip_htons>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	f003 0301 	and.w	r3, r3, #1
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d00d      	beq.n	8011b36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	899b      	ldrh	r3, [r3, #12]
 8011b20:	b29c      	uxth	r4, r3
 8011b22:	2001      	movs	r0, #1
 8011b24:	f7fa ffbc 	bl	800caa0 <lwip_htons>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	4322      	orrs	r2, r4
 8011b32:	b292      	uxth	r2, r2
 8011b34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f7fe f984 	bl	800fe4e <tcp_seg_free>
    while (next &&
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d00e      	beq.n	8011b6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	891b      	ldrh	r3, [r3, #8]
 8011b50:	461a      	mov	r2, r3
 8011b52:	4b1d      	ldr	r3, [pc, #116]	; (8011bc8 <tcp_oos_insert_segment+0x10c>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	441a      	add	r2, r3
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	6839      	ldr	r1, [r7, #0]
 8011b60:	8909      	ldrh	r1, [r1, #8]
 8011b62:	440b      	add	r3, r1
 8011b64:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	daca      	bge.n	8011b00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d01e      	beq.n	8011bae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	891b      	ldrh	r3, [r3, #8]
 8011b74:	461a      	mov	r2, r3
 8011b76:	4b14      	ldr	r3, [pc, #80]	; (8011bc8 <tcp_oos_insert_segment+0x10c>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	441a      	add	r2, r3
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	dd12      	ble.n	8011bae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	68db      	ldr	r3, [r3, #12]
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	4b0d      	ldr	r3, [pc, #52]	; (8011bc8 <tcp_oos_insert_segment+0x10c>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	685a      	ldr	r2, [r3, #4]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	891b      	ldrh	r3, [r3, #8]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	4610      	mov	r0, r2
 8011baa:	f7fc faf9 	bl	800e1a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	601a      	str	r2, [r3, #0]
}
 8011bb4:	bf00      	nop
 8011bb6:	3714      	adds	r7, #20
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd90      	pop	{r4, r7, pc}
 8011bbc:	0801c954 	.word	0x0801c954
 8011bc0:	0801cc14 	.word	0x0801cc14
 8011bc4:	0801c9a0 	.word	0x0801c9a0
 8011bc8:	20011bd0 	.word	0x20011bd0

08011bcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011bcc:	b5b0      	push	{r4, r5, r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
 8011bd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011bda:	e03e      	b.n	8011c5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fc fcec 	bl	800e5c8 <pbuf_clen>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bfa:	8a7a      	ldrh	r2, [r7, #18]
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d906      	bls.n	8011c0e <tcp_free_acked_segments+0x42>
 8011c00:	4b2a      	ldr	r3, [pc, #168]	; (8011cac <tcp_free_acked_segments+0xe0>)
 8011c02:	f240 4257 	movw	r2, #1111	; 0x457
 8011c06:	492a      	ldr	r1, [pc, #168]	; (8011cb0 <tcp_free_acked_segments+0xe4>)
 8011c08:	482a      	ldr	r0, [pc, #168]	; (8011cb4 <tcp_free_acked_segments+0xe8>)
 8011c0a:	f005 ffc1 	bl	8017b90 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011c14:	8a7b      	ldrh	r3, [r7, #18]
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	891a      	ldrh	r2, [r3, #8]
 8011c24:	4b24      	ldr	r3, [pc, #144]	; (8011cb8 <tcp_free_acked_segments+0xec>)
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	4413      	add	r3, r2
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	4b22      	ldr	r3, [pc, #136]	; (8011cb8 <tcp_free_acked_segments+0xec>)
 8011c2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011c30:	6978      	ldr	r0, [r7, #20]
 8011c32:	f7fe f90c 	bl	800fe4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00c      	beq.n	8011c5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d109      	bne.n	8011c5a <tcp_free_acked_segments+0x8e>
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d106      	bne.n	8011c5a <tcp_free_acked_segments+0x8e>
 8011c4c:	4b17      	ldr	r3, [pc, #92]	; (8011cac <tcp_free_acked_segments+0xe0>)
 8011c4e:	f240 4261 	movw	r2, #1121	; 0x461
 8011c52:	491a      	ldr	r1, [pc, #104]	; (8011cbc <tcp_free_acked_segments+0xf0>)
 8011c54:	4817      	ldr	r0, [pc, #92]	; (8011cb4 <tcp_free_acked_segments+0xe8>)
 8011c56:	f005 ff9b 	bl	8017b90 <iprintf>
  while (seg_list != NULL &&
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d020      	beq.n	8011ca2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	68db      	ldr	r3, [r3, #12]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fa ff2f 	bl	800caca <lwip_htonl>
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	891b      	ldrh	r3, [r3, #8]
 8011c72:	461d      	mov	r5, r3
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fa ff0f 	bl	800caa0 <lwip_htons>
 8011c82:	4603      	mov	r3, r0
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	f003 0303 	and.w	r3, r3, #3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <tcp_free_acked_segments+0xc6>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	e000      	b.n	8011c94 <tcp_free_acked_segments+0xc8>
 8011c92:	2300      	movs	r3, #0
 8011c94:	442b      	add	r3, r5
 8011c96:	18e2      	adds	r2, r4, r3
 8011c98:	4b09      	ldr	r3, [pc, #36]	; (8011cc0 <tcp_free_acked_segments+0xf4>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	dd9c      	ble.n	8011bdc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011ca2:	68bb      	ldr	r3, [r7, #8]
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3718      	adds	r7, #24
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bdb0      	pop	{r4, r5, r7, pc}
 8011cac:	0801c954 	.word	0x0801c954
 8011cb0:	0801cc3c 	.word	0x0801cc3c
 8011cb4:	0801c9a0 	.word	0x0801c9a0
 8011cb8:	20011bd8 	.word	0x20011bd8
 8011cbc:	0801cc64 	.word	0x0801cc64
 8011cc0:	20011bd4 	.word	0x20011bd4

08011cc4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011cc4:	b5b0      	push	{r4, r5, r7, lr}
 8011cc6:	b094      	sub	sp, #80	; 0x50
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <tcp_receive+0x20>
 8011cd6:	4b91      	ldr	r3, [pc, #580]	; (8011f1c <tcp_receive+0x258>)
 8011cd8:	f240 427b 	movw	r2, #1147	; 0x47b
 8011cdc:	4990      	ldr	r1, [pc, #576]	; (8011f20 <tcp_receive+0x25c>)
 8011cde:	4891      	ldr	r0, [pc, #580]	; (8011f24 <tcp_receive+0x260>)
 8011ce0:	f005 ff56 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7d1b      	ldrb	r3, [r3, #20]
 8011ce8:	2b03      	cmp	r3, #3
 8011cea:	d806      	bhi.n	8011cfa <tcp_receive+0x36>
 8011cec:	4b8b      	ldr	r3, [pc, #556]	; (8011f1c <tcp_receive+0x258>)
 8011cee:	f240 427c 	movw	r2, #1148	; 0x47c
 8011cf2:	498d      	ldr	r1, [pc, #564]	; (8011f28 <tcp_receive+0x264>)
 8011cf4:	488b      	ldr	r0, [pc, #556]	; (8011f24 <tcp_receive+0x260>)
 8011cf6:	f005 ff4b 	bl	8017b90 <iprintf>

  if (flags & TCP_ACK) {
 8011cfa:	4b8c      	ldr	r3, [pc, #560]	; (8011f2c <tcp_receive+0x268>)
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	f003 0310 	and.w	r3, r3, #16
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 8264 	beq.w	80121d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d0e:	461a      	mov	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d14:	4413      	add	r3, r2
 8011d16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d1c:	4b84      	ldr	r3, [pc, #528]	; (8011f30 <tcp_receive+0x26c>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	db1b      	blt.n	8011d5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d2a:	4b81      	ldr	r3, [pc, #516]	; (8011f30 <tcp_receive+0x26c>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d106      	bne.n	8011d40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d36:	4b7f      	ldr	r3, [pc, #508]	; (8011f34 <tcp_receive+0x270>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	db0e      	blt.n	8011d5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d44:	4b7b      	ldr	r3, [pc, #492]	; (8011f34 <tcp_receive+0x270>)
 8011d46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d125      	bne.n	8011d98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d4c:	4b7a      	ldr	r3, [pc, #488]	; (8011f38 <tcp_receive+0x274>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	89db      	ldrh	r3, [r3, #14]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d91c      	bls.n	8011d98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011d5e:	4b76      	ldr	r3, [pc, #472]	; (8011f38 <tcp_receive+0x274>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	89db      	ldrh	r3, [r3, #14]
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d205      	bcs.n	8011d88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011d88:	4b69      	ldr	r3, [pc, #420]	; (8011f30 <tcp_receive+0x26c>)
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011d90:	4b68      	ldr	r3, [pc, #416]	; (8011f34 <tcp_receive+0x270>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011d98:	4b66      	ldr	r3, [pc, #408]	; (8011f34 <tcp_receive+0x270>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011da0:	1ad3      	subs	r3, r2, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	dc58      	bgt.n	8011e58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011da6:	4b65      	ldr	r3, [pc, #404]	; (8011f3c <tcp_receive+0x278>)
 8011da8:	881b      	ldrh	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d14b      	bne.n	8011e46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011db8:	4413      	add	r3, r2
 8011dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d142      	bne.n	8011e46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	db3d      	blt.n	8011e46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dce:	4b59      	ldr	r3, [pc, #356]	; (8011f34 <tcp_receive+0x270>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d137      	bne.n	8011e46 <tcp_receive+0x182>
              found_dupack = 1;
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011de0:	2bff      	cmp	r3, #255	; 0xff
 8011de2:	d007      	beq.n	8011df4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dea:	3301      	adds	r3, #1
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dfa:	2b03      	cmp	r3, #3
 8011dfc:	d91b      	bls.n	8011e36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d30a      	bcc.n	8011e2c <tcp_receive+0x168>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e20:	4413      	add	r3, r2
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e2a:	e004      	b.n	8011e36 <tcp_receive+0x172>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	d902      	bls.n	8011e46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f002 fb55 	bl	80144f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f040 8161 	bne.w	8012110 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2200      	movs	r2, #0
 8011e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e56:	e15b      	b.n	8012110 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e58:	4b36      	ldr	r3, [pc, #216]	; (8011f34 <tcp_receive+0x270>)
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e60:	1ad3      	subs	r3, r2, r3
 8011e62:	3b01      	subs	r3, #1
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f2c0 814e 	blt.w	8012106 <tcp_receive+0x442>
 8011e6a:	4b32      	ldr	r3, [pc, #200]	; (8011f34 <tcp_receive+0x270>)
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f300 8146 	bgt.w	8012106 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	8b5b      	ldrh	r3, [r3, #26]
 8011e7e:	f003 0304 	and.w	r3, r3, #4
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d010      	beq.n	8011ea8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	8b5b      	ldrh	r3, [r3, #26]
 8011e8a:	f023 0304 	bic.w	r3, r3, #4
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011eb6:	10db      	asrs	r3, r3, #3
 8011eb8:	b21b      	sxth	r3, r3
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	4413      	add	r3, r2
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	b21a      	sxth	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011ed0:	4b18      	ldr	r3, [pc, #96]	; (8011f34 <tcp_receive+0x270>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	b29a      	uxth	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011ee8:	4b12      	ldr	r3, [pc, #72]	; (8011f34 <tcp_receive+0x270>)
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	7d1b      	ldrb	r3, [r3, #20]
 8011ef4:	2b03      	cmp	r3, #3
 8011ef6:	f240 8097 	bls.w	8012028 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d245      	bcs.n	8011f96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8b5b      	ldrh	r3, [r3, #26]
 8011f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d014      	beq.n	8011f40 <tcp_receive+0x27c>
 8011f16:	2301      	movs	r3, #1
 8011f18:	e013      	b.n	8011f42 <tcp_receive+0x27e>
 8011f1a:	bf00      	nop
 8011f1c:	0801c954 	.word	0x0801c954
 8011f20:	0801cc84 	.word	0x0801cc84
 8011f24:	0801c9a0 	.word	0x0801c9a0
 8011f28:	0801cca0 	.word	0x0801cca0
 8011f2c:	20011bdc 	.word	0x20011bdc
 8011f30:	20011bd0 	.word	0x20011bd0
 8011f34:	20011bd4 	.word	0x20011bd4
 8011f38:	20011bc0 	.word	0x20011bc0
 8011f3c:	20011bda 	.word	0x20011bda
 8011f40:	2302      	movs	r3, #2
 8011f42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011f46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f4a:	b29a      	uxth	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f50:	fb12 f303 	smulbb	r3, r2, r3
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	bf28      	it	cs
 8011f5c:	4613      	movcs	r3, r2
 8011f5e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f68:	4413      	add	r3, r2
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d309      	bcc.n	8011f8a <tcp_receive+0x2c6>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f7e:	4413      	add	r3, r2
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f88:	e04e      	b.n	8012028 <tcp_receive+0x364>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f94:	e048      	b.n	8012028 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f9e:	4413      	add	r3, r2
 8011fa0:	b29a      	uxth	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d309      	bcc.n	8011fc0 <tcp_receive+0x2fc>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011fb4:	4413      	add	r3, r2
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011fbe:	e004      	b.n	8011fca <tcp_receive+0x306>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d326      	bcc.n	8012028 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ffa:	4413      	add	r3, r2
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012004:	429a      	cmp	r2, r3
 8012006:	d30a      	bcc.n	801201e <tcp_receive+0x35a>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012012:	4413      	add	r3, r2
 8012014:	b29a      	uxth	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801201c:	e004      	b.n	8012028 <tcp_receive+0x364>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012024:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012030:	4a98      	ldr	r2, [pc, #608]	; (8012294 <tcp_receive+0x5d0>)
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff fdca 	bl	8011bcc <tcp_free_acked_segments>
 8012038:	4602      	mov	r2, r0
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012046:	4a94      	ldr	r2, [pc, #592]	; (8012298 <tcp_receive+0x5d4>)
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f7ff fdbf 	bl	8011bcc <tcp_free_acked_segments>
 801204e:	4602      	mov	r2, r0
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012058:	2b00      	cmp	r3, #0
 801205a:	d104      	bne.n	8012066 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012062:	861a      	strh	r2, [r3, #48]	; 0x30
 8012064:	e002      	b.n	801206c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012076:	2b00      	cmp	r3, #0
 8012078:	d103      	bne.n	8012082 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012088:	4b84      	ldr	r3, [pc, #528]	; (801229c <tcp_receive+0x5d8>)
 801208a:	881b      	ldrh	r3, [r3, #0]
 801208c:	4413      	add	r3, r2
 801208e:	b29a      	uxth	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	8b5b      	ldrh	r3, [r3, #26]
 801209a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d035      	beq.n	801210e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d118      	bne.n	80120dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00c      	beq.n	80120cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fa fd03 	bl	800caca <lwip_htonl>
 80120c4:	4603      	mov	r3, r0
 80120c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	dc20      	bgt.n	801210e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	8b5b      	ldrh	r3, [r3, #26]
 80120d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120da:	e018      	b.n	801210e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fa fcee 	bl	800caca <lwip_htonl>
 80120ee:	4603      	mov	r3, r0
 80120f0:	1ae3      	subs	r3, r4, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	dc0b      	bgt.n	801210e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	8b5b      	ldrh	r3, [r3, #26]
 80120fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120fe:	b29a      	uxth	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012104:	e003      	b.n	801210e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f002 fbf0 	bl	80148ec <tcp_send_empty_ack>
 801210c:	e000      	b.n	8012110 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801210e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012114:	2b00      	cmp	r3, #0
 8012116:	d05b      	beq.n	80121d0 <tcp_receive+0x50c>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801211c:	4b60      	ldr	r3, [pc, #384]	; (80122a0 <tcp_receive+0x5dc>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	2b00      	cmp	r3, #0
 8012124:	da54      	bge.n	80121d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012126:	4b5f      	ldr	r3, [pc, #380]	; (80122a4 <tcp_receive+0x5e0>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	b29a      	uxth	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012130:	b29b      	uxth	r3, r3
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	b29b      	uxth	r3, r3
 8012136:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801213a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012144:	10db      	asrs	r3, r3, #3
 8012146:	b21b      	sxth	r3, r3
 8012148:	b29b      	uxth	r3, r3
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	b29b      	uxth	r3, r3
 801214e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012158:	b29a      	uxth	r2, r3
 801215a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801215e:	4413      	add	r3, r2
 8012160:	b29b      	uxth	r3, r3
 8012162:	b21a      	sxth	r2, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012168:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801216c:	2b00      	cmp	r3, #0
 801216e:	da05      	bge.n	801217c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012174:	425b      	negs	r3, r3
 8012176:	b29b      	uxth	r3, r3
 8012178:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801217c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012186:	109b      	asrs	r3, r3, #2
 8012188:	b21b      	sxth	r3, r3
 801218a:	b29b      	uxth	r3, r3
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	b29b      	uxth	r3, r3
 8012190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801219a:	b29a      	uxth	r2, r3
 801219c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121a0:	4413      	add	r3, r2
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	b21a      	sxth	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121b0:	10db      	asrs	r3, r3, #3
 80121b2:	b21b      	sxth	r3, r3
 80121b4:	b29a      	uxth	r2, r3
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121bc:	b29b      	uxth	r3, r3
 80121be:	4413      	add	r3, r2
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	b21a      	sxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2200      	movs	r2, #0
 80121ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80121d0:	4b35      	ldr	r3, [pc, #212]	; (80122a8 <tcp_receive+0x5e4>)
 80121d2:	881b      	ldrh	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 84e2 	beq.w	8012b9e <tcp_receive+0xeda>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7d1b      	ldrb	r3, [r3, #20]
 80121de:	2b06      	cmp	r3, #6
 80121e0:	f200 84dd 	bhi.w	8012b9e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121e8:	4b30      	ldr	r3, [pc, #192]	; (80122ac <tcp_receive+0x5e8>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	3b01      	subs	r3, #1
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f2c0 808f 	blt.w	8012314 <tcp_receive+0x650>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121fa:	4b2b      	ldr	r3, [pc, #172]	; (80122a8 <tcp_receive+0x5e4>)
 80121fc:	881b      	ldrh	r3, [r3, #0]
 80121fe:	4619      	mov	r1, r3
 8012200:	4b2a      	ldr	r3, [pc, #168]	; (80122ac <tcp_receive+0x5e8>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	440b      	add	r3, r1
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	3301      	adds	r3, #1
 801220a:	2b00      	cmp	r3, #0
 801220c:	f300 8082 	bgt.w	8012314 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012210:	4b27      	ldr	r3, [pc, #156]	; (80122b0 <tcp_receive+0x5ec>)
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801221a:	4b24      	ldr	r3, [pc, #144]	; (80122ac <tcp_receive+0x5e8>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012222:	4b23      	ldr	r3, [pc, #140]	; (80122b0 <tcp_receive+0x5ec>)
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d106      	bne.n	8012238 <tcp_receive+0x574>
 801222a:	4b22      	ldr	r3, [pc, #136]	; (80122b4 <tcp_receive+0x5f0>)
 801222c:	f240 5294 	movw	r2, #1428	; 0x594
 8012230:	4921      	ldr	r1, [pc, #132]	; (80122b8 <tcp_receive+0x5f4>)
 8012232:	4822      	ldr	r0, [pc, #136]	; (80122bc <tcp_receive+0x5f8>)
 8012234:	f005 fcac 	bl	8017b90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801223e:	4293      	cmp	r3, r2
 8012240:	d906      	bls.n	8012250 <tcp_receive+0x58c>
 8012242:	4b1c      	ldr	r3, [pc, #112]	; (80122b4 <tcp_receive+0x5f0>)
 8012244:	f240 5295 	movw	r2, #1429	; 0x595
 8012248:	491d      	ldr	r1, [pc, #116]	; (80122c0 <tcp_receive+0x5fc>)
 801224a:	481c      	ldr	r0, [pc, #112]	; (80122bc <tcp_receive+0x5f8>)
 801224c:	f005 fca0 	bl	8017b90 <iprintf>
      off = (u16_t)off32;
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012256:	4b16      	ldr	r3, [pc, #88]	; (80122b0 <tcp_receive+0x5ec>)
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	891b      	ldrh	r3, [r3, #8]
 801225c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012260:	429a      	cmp	r2, r3
 8012262:	d906      	bls.n	8012272 <tcp_receive+0x5ae>
 8012264:	4b13      	ldr	r3, [pc, #76]	; (80122b4 <tcp_receive+0x5f0>)
 8012266:	f240 5297 	movw	r2, #1431	; 0x597
 801226a:	4916      	ldr	r1, [pc, #88]	; (80122c4 <tcp_receive+0x600>)
 801226c:	4813      	ldr	r0, [pc, #76]	; (80122bc <tcp_receive+0x5f8>)
 801226e:	f005 fc8f 	bl	8017b90 <iprintf>
      inseg.len -= off;
 8012272:	4b0f      	ldr	r3, [pc, #60]	; (80122b0 <tcp_receive+0x5ec>)
 8012274:	891a      	ldrh	r2, [r3, #8]
 8012276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	b29a      	uxth	r2, r3
 801227e:	4b0c      	ldr	r3, [pc, #48]	; (80122b0 <tcp_receive+0x5ec>)
 8012280:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012282:	4b0b      	ldr	r3, [pc, #44]	; (80122b0 <tcp_receive+0x5ec>)
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	891a      	ldrh	r2, [r3, #8]
 8012288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012290:	e02a      	b.n	80122e8 <tcp_receive+0x624>
 8012292:	bf00      	nop
 8012294:	0801ccbc 	.word	0x0801ccbc
 8012298:	0801ccc4 	.word	0x0801ccc4
 801229c:	20011bd8 	.word	0x20011bd8
 80122a0:	20011bd4 	.word	0x20011bd4
 80122a4:	20011b98 	.word	0x20011b98
 80122a8:	20011bda 	.word	0x20011bda
 80122ac:	20011bd0 	.word	0x20011bd0
 80122b0:	20011bb0 	.word	0x20011bb0
 80122b4:	0801c954 	.word	0x0801c954
 80122b8:	0801cccc 	.word	0x0801cccc
 80122bc:	0801c9a0 	.word	0x0801c9a0
 80122c0:	0801ccdc 	.word	0x0801ccdc
 80122c4:	0801ccec 	.word	0x0801ccec
        off -= p->len;
 80122c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ca:	895b      	ldrh	r3, [r3, #10]
 80122cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80122d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80122da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80122dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122de:	2200      	movs	r2, #0
 80122e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80122e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80122e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ea:	895b      	ldrh	r3, [r3, #10]
 80122ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d8e9      	bhi.n	80122c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80122f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122f8:	4619      	mov	r1, r3
 80122fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80122fc:	f7fc f850 	bl	800e3a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012304:	4a91      	ldr	r2, [pc, #580]	; (801254c <tcp_receive+0x888>)
 8012306:	6013      	str	r3, [r2, #0]
 8012308:	4b91      	ldr	r3, [pc, #580]	; (8012550 <tcp_receive+0x88c>)
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	4a8f      	ldr	r2, [pc, #572]	; (801254c <tcp_receive+0x888>)
 801230e:	6812      	ldr	r2, [r2, #0]
 8012310:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012312:	e00d      	b.n	8012330 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012314:	4b8d      	ldr	r3, [pc, #564]	; (801254c <tcp_receive+0x888>)
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	da06      	bge.n	8012330 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	8b5b      	ldrh	r3, [r3, #26]
 8012326:	f043 0302 	orr.w	r3, r3, #2
 801232a:	b29a      	uxth	r2, r3
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012330:	4b86      	ldr	r3, [pc, #536]	; (801254c <tcp_receive+0x888>)
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	2b00      	cmp	r3, #0
 801233c:	f2c0 842a 	blt.w	8012b94 <tcp_receive+0xed0>
 8012340:	4b82      	ldr	r3, [pc, #520]	; (801254c <tcp_receive+0x888>)
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012348:	6879      	ldr	r1, [r7, #4]
 801234a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801234c:	440b      	add	r3, r1
 801234e:	1ad3      	subs	r3, r2, r3
 8012350:	3301      	adds	r3, #1
 8012352:	2b00      	cmp	r3, #0
 8012354:	f300 841e 	bgt.w	8012b94 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801235c:	4b7b      	ldr	r3, [pc, #492]	; (801254c <tcp_receive+0x888>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	f040 829a 	bne.w	801289a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012366:	4b7a      	ldr	r3, [pc, #488]	; (8012550 <tcp_receive+0x88c>)
 8012368:	891c      	ldrh	r4, [r3, #8]
 801236a:	4b79      	ldr	r3, [pc, #484]	; (8012550 <tcp_receive+0x88c>)
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	899b      	ldrh	r3, [r3, #12]
 8012370:	b29b      	uxth	r3, r3
 8012372:	4618      	mov	r0, r3
 8012374:	f7fa fb94 	bl	800caa0 <lwip_htons>
 8012378:	4603      	mov	r3, r0
 801237a:	b2db      	uxtb	r3, r3
 801237c:	f003 0303 	and.w	r3, r3, #3
 8012380:	2b00      	cmp	r3, #0
 8012382:	d001      	beq.n	8012388 <tcp_receive+0x6c4>
 8012384:	2301      	movs	r3, #1
 8012386:	e000      	b.n	801238a <tcp_receive+0x6c6>
 8012388:	2300      	movs	r3, #0
 801238a:	4423      	add	r3, r4
 801238c:	b29a      	uxth	r2, r3
 801238e:	4b71      	ldr	r3, [pc, #452]	; (8012554 <tcp_receive+0x890>)
 8012390:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012396:	4b6f      	ldr	r3, [pc, #444]	; (8012554 <tcp_receive+0x890>)
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	429a      	cmp	r2, r3
 801239c:	d275      	bcs.n	801248a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801239e:	4b6c      	ldr	r3, [pc, #432]	; (8012550 <tcp_receive+0x88c>)
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	899b      	ldrh	r3, [r3, #12]
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fa fb7a 	bl	800caa0 <lwip_htons>
 80123ac:	4603      	mov	r3, r0
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	f003 0301 	and.w	r3, r3, #1
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d01f      	beq.n	80123f8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80123b8:	4b65      	ldr	r3, [pc, #404]	; (8012550 <tcp_receive+0x88c>)
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	899b      	ldrh	r3, [r3, #12]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	b21b      	sxth	r3, r3
 80123c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80123c6:	b21c      	sxth	r4, r3
 80123c8:	4b61      	ldr	r3, [pc, #388]	; (8012550 <tcp_receive+0x88c>)
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	899b      	ldrh	r3, [r3, #12]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7fa fb65 	bl	800caa0 <lwip_htons>
 80123d6:	4603      	mov	r3, r0
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	b29b      	uxth	r3, r3
 80123dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fa fb5c 	bl	800caa0 <lwip_htons>
 80123e8:	4603      	mov	r3, r0
 80123ea:	b21b      	sxth	r3, r3
 80123ec:	4323      	orrs	r3, r4
 80123ee:	b21a      	sxth	r2, r3
 80123f0:	4b57      	ldr	r3, [pc, #348]	; (8012550 <tcp_receive+0x88c>)
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	b292      	uxth	r2, r2
 80123f6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123fc:	4b54      	ldr	r3, [pc, #336]	; (8012550 <tcp_receive+0x88c>)
 80123fe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012400:	4b53      	ldr	r3, [pc, #332]	; (8012550 <tcp_receive+0x88c>)
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	899b      	ldrh	r3, [r3, #12]
 8012406:	b29b      	uxth	r3, r3
 8012408:	4618      	mov	r0, r3
 801240a:	f7fa fb49 	bl	800caa0 <lwip_htons>
 801240e:	4603      	mov	r3, r0
 8012410:	b2db      	uxtb	r3, r3
 8012412:	f003 0302 	and.w	r3, r3, #2
 8012416:	2b00      	cmp	r3, #0
 8012418:	d005      	beq.n	8012426 <tcp_receive+0x762>
            inseg.len -= 1;
 801241a:	4b4d      	ldr	r3, [pc, #308]	; (8012550 <tcp_receive+0x88c>)
 801241c:	891b      	ldrh	r3, [r3, #8]
 801241e:	3b01      	subs	r3, #1
 8012420:	b29a      	uxth	r2, r3
 8012422:	4b4b      	ldr	r3, [pc, #300]	; (8012550 <tcp_receive+0x88c>)
 8012424:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012426:	4b4a      	ldr	r3, [pc, #296]	; (8012550 <tcp_receive+0x88c>)
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4a49      	ldr	r2, [pc, #292]	; (8012550 <tcp_receive+0x88c>)
 801242c:	8912      	ldrh	r2, [r2, #8]
 801242e:	4611      	mov	r1, r2
 8012430:	4618      	mov	r0, r3
 8012432:	f7fb feb5 	bl	800e1a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012436:	4b46      	ldr	r3, [pc, #280]	; (8012550 <tcp_receive+0x88c>)
 8012438:	891c      	ldrh	r4, [r3, #8]
 801243a:	4b45      	ldr	r3, [pc, #276]	; (8012550 <tcp_receive+0x88c>)
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	899b      	ldrh	r3, [r3, #12]
 8012440:	b29b      	uxth	r3, r3
 8012442:	4618      	mov	r0, r3
 8012444:	f7fa fb2c 	bl	800caa0 <lwip_htons>
 8012448:	4603      	mov	r3, r0
 801244a:	b2db      	uxtb	r3, r3
 801244c:	f003 0303 	and.w	r3, r3, #3
 8012450:	2b00      	cmp	r3, #0
 8012452:	d001      	beq.n	8012458 <tcp_receive+0x794>
 8012454:	2301      	movs	r3, #1
 8012456:	e000      	b.n	801245a <tcp_receive+0x796>
 8012458:	2300      	movs	r3, #0
 801245a:	4423      	add	r3, r4
 801245c:	b29a      	uxth	r2, r3
 801245e:	4b3d      	ldr	r3, [pc, #244]	; (8012554 <tcp_receive+0x890>)
 8012460:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012462:	4b3c      	ldr	r3, [pc, #240]	; (8012554 <tcp_receive+0x890>)
 8012464:	881b      	ldrh	r3, [r3, #0]
 8012466:	461a      	mov	r2, r3
 8012468:	4b38      	ldr	r3, [pc, #224]	; (801254c <tcp_receive+0x888>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	441a      	add	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012472:	6879      	ldr	r1, [r7, #4]
 8012474:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012476:	440b      	add	r3, r1
 8012478:	429a      	cmp	r2, r3
 801247a:	d006      	beq.n	801248a <tcp_receive+0x7c6>
 801247c:	4b36      	ldr	r3, [pc, #216]	; (8012558 <tcp_receive+0x894>)
 801247e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012482:	4936      	ldr	r1, [pc, #216]	; (801255c <tcp_receive+0x898>)
 8012484:	4836      	ldr	r0, [pc, #216]	; (8012560 <tcp_receive+0x89c>)
 8012486:	f005 fb83 	bl	8017b90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801248e:	2b00      	cmp	r3, #0
 8012490:	f000 80e7 	beq.w	8012662 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012494:	4b2e      	ldr	r3, [pc, #184]	; (8012550 <tcp_receive+0x88c>)
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	899b      	ldrh	r3, [r3, #12]
 801249a:	b29b      	uxth	r3, r3
 801249c:	4618      	mov	r0, r3
 801249e:	f7fa faff 	bl	800caa0 <lwip_htons>
 80124a2:	4603      	mov	r3, r0
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	f003 0301 	and.w	r3, r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d010      	beq.n	80124d0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80124ae:	e00a      	b.n	80124c6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124b4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f7fd fcc4 	bl	800fe4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d1f0      	bne.n	80124b0 <tcp_receive+0x7ec>
 80124ce:	e0c8      	b.n	8012662 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124d4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80124d6:	e052      	b.n	801257e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80124d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	899b      	ldrh	r3, [r3, #12]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7fa fadd 	bl	800caa0 <lwip_htons>
 80124e6:	4603      	mov	r3, r0
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	f003 0301 	and.w	r3, r3, #1
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d03d      	beq.n	801256e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80124f2:	4b17      	ldr	r3, [pc, #92]	; (8012550 <tcp_receive+0x88c>)
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	899b      	ldrh	r3, [r3, #12]
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fa fad0 	bl	800caa0 <lwip_htons>
 8012500:	4603      	mov	r3, r0
 8012502:	b2db      	uxtb	r3, r3
 8012504:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012508:	2b00      	cmp	r3, #0
 801250a:	d130      	bne.n	801256e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801250c:	4b10      	ldr	r3, [pc, #64]	; (8012550 <tcp_receive+0x88c>)
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	899b      	ldrh	r3, [r3, #12]
 8012512:	b29c      	uxth	r4, r3
 8012514:	2001      	movs	r0, #1
 8012516:	f7fa fac3 	bl	800caa0 <lwip_htons>
 801251a:	4603      	mov	r3, r0
 801251c:	461a      	mov	r2, r3
 801251e:	4b0c      	ldr	r3, [pc, #48]	; (8012550 <tcp_receive+0x88c>)
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	4322      	orrs	r2, r4
 8012524:	b292      	uxth	r2, r2
 8012526:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012528:	4b09      	ldr	r3, [pc, #36]	; (8012550 <tcp_receive+0x88c>)
 801252a:	891c      	ldrh	r4, [r3, #8]
 801252c:	4b08      	ldr	r3, [pc, #32]	; (8012550 <tcp_receive+0x88c>)
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	899b      	ldrh	r3, [r3, #12]
 8012532:	b29b      	uxth	r3, r3
 8012534:	4618      	mov	r0, r3
 8012536:	f7fa fab3 	bl	800caa0 <lwip_htons>
 801253a:	4603      	mov	r3, r0
 801253c:	b2db      	uxtb	r3, r3
 801253e:	f003 0303 	and.w	r3, r3, #3
 8012542:	2b00      	cmp	r3, #0
 8012544:	d00e      	beq.n	8012564 <tcp_receive+0x8a0>
 8012546:	2301      	movs	r3, #1
 8012548:	e00d      	b.n	8012566 <tcp_receive+0x8a2>
 801254a:	bf00      	nop
 801254c:	20011bd0 	.word	0x20011bd0
 8012550:	20011bb0 	.word	0x20011bb0
 8012554:	20011bda 	.word	0x20011bda
 8012558:	0801c954 	.word	0x0801c954
 801255c:	0801ccfc 	.word	0x0801ccfc
 8012560:	0801c9a0 	.word	0x0801c9a0
 8012564:	2300      	movs	r3, #0
 8012566:	4423      	add	r3, r4
 8012568:	b29a      	uxth	r2, r3
 801256a:	4b98      	ldr	r3, [pc, #608]	; (80127cc <tcp_receive+0xb08>)
 801256c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012570:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012578:	6938      	ldr	r0, [r7, #16]
 801257a:	f7fd fc68 	bl	800fe4e <tcp_seg_free>
            while (next &&
 801257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012580:	2b00      	cmp	r3, #0
 8012582:	d00e      	beq.n	80125a2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012584:	4b91      	ldr	r3, [pc, #580]	; (80127cc <tcp_receive+0xb08>)
 8012586:	881b      	ldrh	r3, [r3, #0]
 8012588:	461a      	mov	r2, r3
 801258a:	4b91      	ldr	r3, [pc, #580]	; (80127d0 <tcp_receive+0xb0c>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	441a      	add	r2, r3
 8012590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012598:	8909      	ldrh	r1, [r1, #8]
 801259a:	440b      	add	r3, r1
 801259c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801259e:	2b00      	cmp	r3, #0
 80125a0:	da9a      	bge.n	80124d8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80125a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d059      	beq.n	801265c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80125a8:	4b88      	ldr	r3, [pc, #544]	; (80127cc <tcp_receive+0xb08>)
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	461a      	mov	r2, r3
 80125ae:	4b88      	ldr	r3, [pc, #544]	; (80127d0 <tcp_receive+0xb0c>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	441a      	add	r2, r3
 80125b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80125bc:	2b00      	cmp	r3, #0
 80125be:	dd4d      	ble.n	801265c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80125c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	4b81      	ldr	r3, [pc, #516]	; (80127d0 <tcp_receive+0xb0c>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	1ad3      	subs	r3, r2, r3
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	4b80      	ldr	r3, [pc, #512]	; (80127d4 <tcp_receive+0xb10>)
 80125d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80125d6:	4b7f      	ldr	r3, [pc, #508]	; (80127d4 <tcp_receive+0xb10>)
 80125d8:	68db      	ldr	r3, [r3, #12]
 80125da:	899b      	ldrh	r3, [r3, #12]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	4618      	mov	r0, r3
 80125e0:	f7fa fa5e 	bl	800caa0 <lwip_htons>
 80125e4:	4603      	mov	r3, r0
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	f003 0302 	and.w	r3, r3, #2
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d005      	beq.n	80125fc <tcp_receive+0x938>
                inseg.len -= 1;
 80125f0:	4b78      	ldr	r3, [pc, #480]	; (80127d4 <tcp_receive+0xb10>)
 80125f2:	891b      	ldrh	r3, [r3, #8]
 80125f4:	3b01      	subs	r3, #1
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	4b76      	ldr	r3, [pc, #472]	; (80127d4 <tcp_receive+0xb10>)
 80125fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80125fc:	4b75      	ldr	r3, [pc, #468]	; (80127d4 <tcp_receive+0xb10>)
 80125fe:	685b      	ldr	r3, [r3, #4]
 8012600:	4a74      	ldr	r2, [pc, #464]	; (80127d4 <tcp_receive+0xb10>)
 8012602:	8912      	ldrh	r2, [r2, #8]
 8012604:	4611      	mov	r1, r2
 8012606:	4618      	mov	r0, r3
 8012608:	f7fb fdca 	bl	800e1a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801260c:	4b71      	ldr	r3, [pc, #452]	; (80127d4 <tcp_receive+0xb10>)
 801260e:	891c      	ldrh	r4, [r3, #8]
 8012610:	4b70      	ldr	r3, [pc, #448]	; (80127d4 <tcp_receive+0xb10>)
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	899b      	ldrh	r3, [r3, #12]
 8012616:	b29b      	uxth	r3, r3
 8012618:	4618      	mov	r0, r3
 801261a:	f7fa fa41 	bl	800caa0 <lwip_htons>
 801261e:	4603      	mov	r3, r0
 8012620:	b2db      	uxtb	r3, r3
 8012622:	f003 0303 	and.w	r3, r3, #3
 8012626:	2b00      	cmp	r3, #0
 8012628:	d001      	beq.n	801262e <tcp_receive+0x96a>
 801262a:	2301      	movs	r3, #1
 801262c:	e000      	b.n	8012630 <tcp_receive+0x96c>
 801262e:	2300      	movs	r3, #0
 8012630:	4423      	add	r3, r4
 8012632:	b29a      	uxth	r2, r3
 8012634:	4b65      	ldr	r3, [pc, #404]	; (80127cc <tcp_receive+0xb08>)
 8012636:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012638:	4b64      	ldr	r3, [pc, #400]	; (80127cc <tcp_receive+0xb08>)
 801263a:	881b      	ldrh	r3, [r3, #0]
 801263c:	461a      	mov	r2, r3
 801263e:	4b64      	ldr	r3, [pc, #400]	; (80127d0 <tcp_receive+0xb0c>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	441a      	add	r2, r3
 8012644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	429a      	cmp	r2, r3
 801264c:	d006      	beq.n	801265c <tcp_receive+0x998>
 801264e:	4b62      	ldr	r3, [pc, #392]	; (80127d8 <tcp_receive+0xb14>)
 8012650:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012654:	4961      	ldr	r1, [pc, #388]	; (80127dc <tcp_receive+0xb18>)
 8012656:	4862      	ldr	r0, [pc, #392]	; (80127e0 <tcp_receive+0xb1c>)
 8012658:	f005 fa9a 	bl	8017b90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012660:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012662:	4b5a      	ldr	r3, [pc, #360]	; (80127cc <tcp_receive+0xb08>)
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	461a      	mov	r2, r3
 8012668:	4b59      	ldr	r3, [pc, #356]	; (80127d0 <tcp_receive+0xb0c>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	441a      	add	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012676:	4b55      	ldr	r3, [pc, #340]	; (80127cc <tcp_receive+0xb08>)
 8012678:	881b      	ldrh	r3, [r3, #0]
 801267a:	429a      	cmp	r2, r3
 801267c:	d206      	bcs.n	801268c <tcp_receive+0x9c8>
 801267e:	4b56      	ldr	r3, [pc, #344]	; (80127d8 <tcp_receive+0xb14>)
 8012680:	f240 6207 	movw	r2, #1543	; 0x607
 8012684:	4957      	ldr	r1, [pc, #348]	; (80127e4 <tcp_receive+0xb20>)
 8012686:	4856      	ldr	r0, [pc, #344]	; (80127e0 <tcp_receive+0xb1c>)
 8012688:	f005 fa82 	bl	8017b90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012690:	4b4e      	ldr	r3, [pc, #312]	; (80127cc <tcp_receive+0xb08>)
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	b29a      	uxth	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f7fc fd99 	bl	800f1d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80126a2:	4b4c      	ldr	r3, [pc, #304]	; (80127d4 <tcp_receive+0xb10>)
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	891b      	ldrh	r3, [r3, #8]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d006      	beq.n	80126ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80126ac:	4b49      	ldr	r3, [pc, #292]	; (80127d4 <tcp_receive+0xb10>)
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	4a4d      	ldr	r2, [pc, #308]	; (80127e8 <tcp_receive+0xb24>)
 80126b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80126b4:	4b47      	ldr	r3, [pc, #284]	; (80127d4 <tcp_receive+0xb10>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126ba:	4b46      	ldr	r3, [pc, #280]	; (80127d4 <tcp_receive+0xb10>)
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	899b      	ldrh	r3, [r3, #12]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fa f9ec 	bl	800caa0 <lwip_htons>
 80126c8:	4603      	mov	r3, r0
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	f003 0301 	and.w	r3, r3, #1
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 80b8 	beq.w	8012846 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80126d6:	4b45      	ldr	r3, [pc, #276]	; (80127ec <tcp_receive+0xb28>)
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	f043 0320 	orr.w	r3, r3, #32
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	4b42      	ldr	r3, [pc, #264]	; (80127ec <tcp_receive+0xb28>)
 80126e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80126e4:	e0af      	b.n	8012846 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	4a36      	ldr	r2, [pc, #216]	; (80127d0 <tcp_receive+0xb0c>)
 80126f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	891b      	ldrh	r3, [r3, #8]
 80126fc:	461c      	mov	r4, r3
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	899b      	ldrh	r3, [r3, #12]
 8012704:	b29b      	uxth	r3, r3
 8012706:	4618      	mov	r0, r3
 8012708:	f7fa f9ca 	bl	800caa0 <lwip_htons>
 801270c:	4603      	mov	r3, r0
 801270e:	b2db      	uxtb	r3, r3
 8012710:	f003 0303 	and.w	r3, r3, #3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <tcp_receive+0xa58>
 8012718:	2301      	movs	r3, #1
 801271a:	e000      	b.n	801271e <tcp_receive+0xa5a>
 801271c:	2300      	movs	r3, #0
 801271e:	191a      	adds	r2, r3, r4
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012724:	441a      	add	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801272e:	461c      	mov	r4, r3
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	891b      	ldrh	r3, [r3, #8]
 8012734:	461d      	mov	r5, r3
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	899b      	ldrh	r3, [r3, #12]
 801273c:	b29b      	uxth	r3, r3
 801273e:	4618      	mov	r0, r3
 8012740:	f7fa f9ae 	bl	800caa0 <lwip_htons>
 8012744:	4603      	mov	r3, r0
 8012746:	b2db      	uxtb	r3, r3
 8012748:	f003 0303 	and.w	r3, r3, #3
 801274c:	2b00      	cmp	r3, #0
 801274e:	d001      	beq.n	8012754 <tcp_receive+0xa90>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <tcp_receive+0xa92>
 8012754:	2300      	movs	r3, #0
 8012756:	442b      	add	r3, r5
 8012758:	429c      	cmp	r4, r3
 801275a:	d206      	bcs.n	801276a <tcp_receive+0xaa6>
 801275c:	4b1e      	ldr	r3, [pc, #120]	; (80127d8 <tcp_receive+0xb14>)
 801275e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012762:	4923      	ldr	r1, [pc, #140]	; (80127f0 <tcp_receive+0xb2c>)
 8012764:	481e      	ldr	r0, [pc, #120]	; (80127e0 <tcp_receive+0xb1c>)
 8012766:	f005 fa13 	bl	8017b90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	891b      	ldrh	r3, [r3, #8]
 801276e:	461c      	mov	r4, r3
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	68db      	ldr	r3, [r3, #12]
 8012774:	899b      	ldrh	r3, [r3, #12]
 8012776:	b29b      	uxth	r3, r3
 8012778:	4618      	mov	r0, r3
 801277a:	f7fa f991 	bl	800caa0 <lwip_htons>
 801277e:	4603      	mov	r3, r0
 8012780:	b2db      	uxtb	r3, r3
 8012782:	f003 0303 	and.w	r3, r3, #3
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <tcp_receive+0xaca>
 801278a:	2301      	movs	r3, #1
 801278c:	e000      	b.n	8012790 <tcp_receive+0xacc>
 801278e:	2300      	movs	r3, #0
 8012790:	1919      	adds	r1, r3, r4
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012796:	b28b      	uxth	r3, r1
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	b29a      	uxth	r2, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7fc fd17 	bl	800f1d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	685b      	ldr	r3, [r3, #4]
 80127aa:	891b      	ldrh	r3, [r3, #8]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d028      	beq.n	8012802 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80127b0:	4b0d      	ldr	r3, [pc, #52]	; (80127e8 <tcp_receive+0xb24>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01d      	beq.n	80127f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80127b8:	4b0b      	ldr	r3, [pc, #44]	; (80127e8 <tcp_receive+0xb24>)
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	4619      	mov	r1, r3
 80127c2:	4610      	mov	r0, r2
 80127c4:	f7fb ff40 	bl	800e648 <pbuf_cat>
 80127c8:	e018      	b.n	80127fc <tcp_receive+0xb38>
 80127ca:	bf00      	nop
 80127cc:	20011bda 	.word	0x20011bda
 80127d0:	20011bd0 	.word	0x20011bd0
 80127d4:	20011bb0 	.word	0x20011bb0
 80127d8:	0801c954 	.word	0x0801c954
 80127dc:	0801cd34 	.word	0x0801cd34
 80127e0:	0801c9a0 	.word	0x0801c9a0
 80127e4:	0801cd70 	.word	0x0801cd70
 80127e8:	20011be0 	.word	0x20011be0
 80127ec:	20011bdd 	.word	0x20011bdd
 80127f0:	0801cd90 	.word	0x0801cd90
            } else {
              recv_data = cseg->p;
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	4a70      	ldr	r2, [pc, #448]	; (80129bc <tcp_receive+0xcf8>)
 80127fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	2200      	movs	r2, #0
 8012800:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	899b      	ldrh	r3, [r3, #12]
 8012808:	b29b      	uxth	r3, r3
 801280a:	4618      	mov	r0, r3
 801280c:	f7fa f948 	bl	800caa0 <lwip_htons>
 8012810:	4603      	mov	r3, r0
 8012812:	b2db      	uxtb	r3, r3
 8012814:	f003 0301 	and.w	r3, r3, #1
 8012818:	2b00      	cmp	r3, #0
 801281a:	d00d      	beq.n	8012838 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801281c:	4b68      	ldr	r3, [pc, #416]	; (80129c0 <tcp_receive+0xcfc>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	f043 0320 	orr.w	r3, r3, #32
 8012824:	b2da      	uxtb	r2, r3
 8012826:	4b66      	ldr	r3, [pc, #408]	; (80129c0 <tcp_receive+0xcfc>)
 8012828:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	7d1b      	ldrb	r3, [r3, #20]
 801282e:	2b04      	cmp	r3, #4
 8012830:	d102      	bne.n	8012838 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2207      	movs	r2, #7
 8012836:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012840:	68b8      	ldr	r0, [r7, #8]
 8012842:	f7fd fb04 	bl	800fe4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801284a:	2b00      	cmp	r3, #0
 801284c:	d008      	beq.n	8012860 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012852:	68db      	ldr	r3, [r3, #12]
 8012854:	685a      	ldr	r2, [r3, #4]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801285a:	429a      	cmp	r2, r3
 801285c:	f43f af43 	beq.w	80126e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f003 0301 	and.w	r3, r3, #1
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00e      	beq.n	801288a <tcp_receive+0xbc6>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	8b5b      	ldrh	r3, [r3, #26]
 8012870:	f023 0301 	bic.w	r3, r3, #1
 8012874:	b29a      	uxth	r2, r3
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	835a      	strh	r2, [r3, #26]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	8b5b      	ldrh	r3, [r3, #26]
 801287e:	f043 0302 	orr.w	r3, r3, #2
 8012882:	b29a      	uxth	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012888:	e188      	b.n	8012b9c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	8b5b      	ldrh	r3, [r3, #26]
 801288e:	f043 0301 	orr.w	r3, r3, #1
 8012892:	b29a      	uxth	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012898:	e180      	b.n	8012b9c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80128a2:	4848      	ldr	r0, [pc, #288]	; (80129c4 <tcp_receive+0xd00>)
 80128a4:	f7fd faec 	bl	800fe80 <tcp_seg_copy>
 80128a8:	4602      	mov	r2, r0
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	675a      	str	r2, [r3, #116]	; 0x74
 80128ae:	e16d      	b.n	8012b8c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80128b0:	2300      	movs	r3, #0
 80128b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80128ba:	e157      	b.n	8012b6c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	68db      	ldr	r3, [r3, #12]
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	4b41      	ldr	r3, [pc, #260]	; (80129c8 <tcp_receive+0xd04>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d11d      	bne.n	8012906 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80128ca:	4b3e      	ldr	r3, [pc, #248]	; (80129c4 <tcp_receive+0xd00>)
 80128cc:	891a      	ldrh	r2, [r3, #8]
 80128ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d0:	891b      	ldrh	r3, [r3, #8]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	f240 814f 	bls.w	8012b76 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80128d8:	483a      	ldr	r0, [pc, #232]	; (80129c4 <tcp_receive+0xd00>)
 80128da:	f7fd fad1 	bl	800fe80 <tcp_seg_copy>
 80128de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	f000 8149 	beq.w	8012b7a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80128e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d003      	beq.n	80128f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80128ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128f0:	697a      	ldr	r2, [r7, #20]
 80128f2:	601a      	str	r2, [r3, #0]
 80128f4:	e002      	b.n	80128fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	697a      	ldr	r2, [r7, #20]
 80128fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80128fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128fe:	6978      	ldr	r0, [r7, #20]
 8012900:	f7ff f8dc 	bl	8011abc <tcp_oos_insert_segment>
                }
                break;
 8012904:	e139      	b.n	8012b7a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012908:	2b00      	cmp	r3, #0
 801290a:	d117      	bne.n	801293c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801290c:	4b2e      	ldr	r3, [pc, #184]	; (80129c8 <tcp_receive+0xd04>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	1ad3      	subs	r3, r2, r3
 8012918:	2b00      	cmp	r3, #0
 801291a:	da57      	bge.n	80129cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801291c:	4829      	ldr	r0, [pc, #164]	; (80129c4 <tcp_receive+0xd00>)
 801291e:	f7fd faaf 	bl	800fe80 <tcp_seg_copy>
 8012922:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012924:	69bb      	ldr	r3, [r7, #24]
 8012926:	2b00      	cmp	r3, #0
 8012928:	f000 8129 	beq.w	8012b7e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	69ba      	ldr	r2, [r7, #24]
 8012930:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012934:	69b8      	ldr	r0, [r7, #24]
 8012936:	f7ff f8c1 	bl	8011abc <tcp_oos_insert_segment>
                  }
                  break;
 801293a:	e120      	b.n	8012b7e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801293c:	4b22      	ldr	r3, [pc, #136]	; (80129c8 <tcp_receive+0xd04>)
 801293e:	681a      	ldr	r2, [r3, #0]
 8012940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	3b01      	subs	r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	db3e      	blt.n	80129cc <tcp_receive+0xd08>
 801294e:	4b1e      	ldr	r3, [pc, #120]	; (80129c8 <tcp_receive+0xd04>)
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	3301      	adds	r3, #1
 801295c:	2b00      	cmp	r3, #0
 801295e:	dc35      	bgt.n	80129cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012960:	4818      	ldr	r0, [pc, #96]	; (80129c4 <tcp_receive+0xd00>)
 8012962:	f7fd fa8d 	bl	800fe80 <tcp_seg_copy>
 8012966:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	2b00      	cmp	r3, #0
 801296c:	f000 8109 	beq.w	8012b82 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012978:	8912      	ldrh	r2, [r2, #8]
 801297a:	441a      	add	r2, r3
 801297c:	4b12      	ldr	r3, [pc, #72]	; (80129c8 <tcp_receive+0xd04>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	2b00      	cmp	r3, #0
 8012984:	dd12      	ble.n	80129ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012986:	4b10      	ldr	r3, [pc, #64]	; (80129c8 <tcp_receive+0xd04>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	b29a      	uxth	r2, r3
 801298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	b29b      	uxth	r3, r3
 8012994:	1ad3      	subs	r3, r2, r3
 8012996:	b29a      	uxth	r2, r3
 8012998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801299a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a2:	891b      	ldrh	r3, [r3, #8]
 80129a4:	4619      	mov	r1, r3
 80129a6:	4610      	mov	r0, r2
 80129a8:	f7fb fbfa 	bl	800e1a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80129ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ae:	69fa      	ldr	r2, [r7, #28]
 80129b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80129b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129b4:	69f8      	ldr	r0, [r7, #28]
 80129b6:	f7ff f881 	bl	8011abc <tcp_oos_insert_segment>
                  }
                  break;
 80129ba:	e0e2      	b.n	8012b82 <tcp_receive+0xebe>
 80129bc:	20011be0 	.word	0x20011be0
 80129c0:	20011bdd 	.word	0x20011bdd
 80129c4:	20011bb0 	.word	0x20011bb0
 80129c8:	20011bd0 	.word	0x20011bd0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80129cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	f040 80c6 	bne.w	8012b66 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80129da:	4b80      	ldr	r3, [pc, #512]	; (8012bdc <tcp_receive+0xf18>)
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f340 80bd 	ble.w	8012b66 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80129ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fa f853 	bl	800caa0 <lwip_htons>
 80129fa:	4603      	mov	r3, r0
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	f003 0301 	and.w	r3, r3, #1
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	f040 80bf 	bne.w	8012b86 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a08:	4875      	ldr	r0, [pc, #468]	; (8012be0 <tcp_receive+0xf1c>)
 8012a0a:	f7fd fa39 	bl	800fe80 <tcp_seg_copy>
 8012a0e:	4602      	mov	r2, r0
 8012a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a12:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 80b6 	beq.w	8012b8a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a26:	8912      	ldrh	r2, [r2, #8]
 8012a28:	441a      	add	r2, r3
 8012a2a:	4b6c      	ldr	r3, [pc, #432]	; (8012bdc <tcp_receive+0xf18>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	dd12      	ble.n	8012a5a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012a34:	4b69      	ldr	r3, [pc, #420]	; (8012bdc <tcp_receive+0xf18>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	b29a      	uxth	r2, r3
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	1ad3      	subs	r3, r2, r3
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a48:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	685a      	ldr	r2, [r3, #4]
 8012a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a50:	891b      	ldrh	r3, [r3, #8]
 8012a52:	4619      	mov	r1, r3
 8012a54:	4610      	mov	r0, r2
 8012a56:	f7fb fba3 	bl	800e1a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012a5a:	4b62      	ldr	r3, [pc, #392]	; (8012be4 <tcp_receive+0xf20>)
 8012a5c:	881b      	ldrh	r3, [r3, #0]
 8012a5e:	461a      	mov	r2, r3
 8012a60:	4b5e      	ldr	r3, [pc, #376]	; (8012bdc <tcp_receive+0xf18>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	441a      	add	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a6a:	6879      	ldr	r1, [r7, #4]
 8012a6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a6e:	440b      	add	r3, r1
 8012a70:	1ad3      	subs	r3, r2, r3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f340 8089 	ble.w	8012b8a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	899b      	ldrh	r3, [r3, #12]
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fa f80c 	bl	800caa0 <lwip_htons>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	f003 0301 	and.w	r3, r3, #1
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d022      	beq.n	8012ada <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	899b      	ldrh	r3, [r3, #12]
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	b21b      	sxth	r3, r3
 8012aa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012aa4:	b21c      	sxth	r4, r3
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	68db      	ldr	r3, [r3, #12]
 8012aac:	899b      	ldrh	r3, [r3, #12]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f9 fff5 	bl	800caa0 <lwip_htons>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	b2db      	uxtb	r3, r3
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7f9 ffec 	bl	800caa0 <lwip_htons>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	b21b      	sxth	r3, r3
 8012acc:	4323      	orrs	r3, r4
 8012ace:	b21a      	sxth	r2, r3
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	68db      	ldr	r3, [r3, #12]
 8012ad6:	b292      	uxth	r2, r2
 8012ad8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ae4:	4413      	add	r3, r2
 8012ae6:	b299      	uxth	r1, r3
 8012ae8:	4b3c      	ldr	r3, [pc, #240]	; (8012bdc <tcp_receive+0xf18>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	1a8a      	subs	r2, r1, r2
 8012af4:	b292      	uxth	r2, r2
 8012af6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	685a      	ldr	r2, [r3, #4]
 8012afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	891b      	ldrh	r3, [r3, #8]
 8012b04:	4619      	mov	r1, r3
 8012b06:	4610      	mov	r0, r2
 8012b08:	f7fb fb4a 	bl	800e1a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	891c      	ldrh	r4, [r3, #8]
 8012b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	899b      	ldrh	r3, [r3, #12]
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7f9 ffbf 	bl	800caa0 <lwip_htons>
 8012b22:	4603      	mov	r3, r0
 8012b24:	b2db      	uxtb	r3, r3
 8012b26:	f003 0303 	and.w	r3, r3, #3
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <tcp_receive+0xe6e>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e000      	b.n	8012b34 <tcp_receive+0xe70>
 8012b32:	2300      	movs	r3, #0
 8012b34:	4423      	add	r3, r4
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	4b2a      	ldr	r3, [pc, #168]	; (8012be4 <tcp_receive+0xf20>)
 8012b3a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012b3c:	4b29      	ldr	r3, [pc, #164]	; (8012be4 <tcp_receive+0xf20>)
 8012b3e:	881b      	ldrh	r3, [r3, #0]
 8012b40:	461a      	mov	r2, r3
 8012b42:	4b26      	ldr	r3, [pc, #152]	; (8012bdc <tcp_receive+0xf18>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	441a      	add	r2, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4c:	6879      	ldr	r1, [r7, #4]
 8012b4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b50:	440b      	add	r3, r1
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d019      	beq.n	8012b8a <tcp_receive+0xec6>
 8012b56:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <tcp_receive+0xf24>)
 8012b58:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012b5c:	4923      	ldr	r1, [pc, #140]	; (8012bec <tcp_receive+0xf28>)
 8012b5e:	4824      	ldr	r0, [pc, #144]	; (8012bf0 <tcp_receive+0xf2c>)
 8012b60:	f005 f816 	bl	8017b90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012b64:	e011      	b.n	8012b8a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f47f aea4 	bne.w	80128bc <tcp_receive+0xbf8>
 8012b74:	e00a      	b.n	8012b8c <tcp_receive+0xec8>
                break;
 8012b76:	bf00      	nop
 8012b78:	e008      	b.n	8012b8c <tcp_receive+0xec8>
                break;
 8012b7a:	bf00      	nop
 8012b7c:	e006      	b.n	8012b8c <tcp_receive+0xec8>
                  break;
 8012b7e:	bf00      	nop
 8012b80:	e004      	b.n	8012b8c <tcp_receive+0xec8>
                  break;
 8012b82:	bf00      	nop
 8012b84:	e002      	b.n	8012b8c <tcp_receive+0xec8>
                  break;
 8012b86:	bf00      	nop
 8012b88:	e000      	b.n	8012b8c <tcp_receive+0xec8>
                break;
 8012b8a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f001 fead 	bl	80148ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012b92:	e003      	b.n	8012b9c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f001 fea9 	bl	80148ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012b9a:	e01a      	b.n	8012bd2 <tcp_receive+0xf0e>
 8012b9c:	e019      	b.n	8012bd2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012b9e:	4b0f      	ldr	r3, [pc, #60]	; (8012bdc <tcp_receive+0xf18>)
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	db0a      	blt.n	8012bc2 <tcp_receive+0xefe>
 8012bac:	4b0b      	ldr	r3, [pc, #44]	; (8012bdc <tcp_receive+0xf18>)
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb4:	6879      	ldr	r1, [r7, #4]
 8012bb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bb8:	440b      	add	r3, r1
 8012bba:	1ad3      	subs	r3, r2, r3
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	dd07      	ble.n	8012bd2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	8b5b      	ldrh	r3, [r3, #26]
 8012bc6:	f043 0302 	orr.w	r3, r3, #2
 8012bca:	b29a      	uxth	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012bd0:	e7ff      	b.n	8012bd2 <tcp_receive+0xf0e>
 8012bd2:	bf00      	nop
 8012bd4:	3750      	adds	r7, #80	; 0x50
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	20011bd0 	.word	0x20011bd0
 8012be0:	20011bb0 	.word	0x20011bb0
 8012be4:	20011bda 	.word	0x20011bda
 8012be8:	0801c954 	.word	0x0801c954
 8012bec:	0801ccfc 	.word	0x0801ccfc
 8012bf0:	0801c9a0 	.word	0x0801c9a0

08012bf4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012bfa:	4b15      	ldr	r3, [pc, #84]	; (8012c50 <tcp_get_next_optbyte+0x5c>)
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	b291      	uxth	r1, r2
 8012c02:	4a13      	ldr	r2, [pc, #76]	; (8012c50 <tcp_get_next_optbyte+0x5c>)
 8012c04:	8011      	strh	r1, [r2, #0]
 8012c06:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c08:	4b12      	ldr	r3, [pc, #72]	; (8012c54 <tcp_get_next_optbyte+0x60>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d004      	beq.n	8012c1a <tcp_get_next_optbyte+0x26>
 8012c10:	4b11      	ldr	r3, [pc, #68]	; (8012c58 <tcp_get_next_optbyte+0x64>)
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	88fa      	ldrh	r2, [r7, #6]
 8012c16:	429a      	cmp	r2, r3
 8012c18:	d208      	bcs.n	8012c2c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c1a:	4b10      	ldr	r3, [pc, #64]	; (8012c5c <tcp_get_next_optbyte+0x68>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	3314      	adds	r3, #20
 8012c20:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012c22:	88fb      	ldrh	r3, [r7, #6]
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	4413      	add	r3, r2
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	e00b      	b.n	8012c44 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c2c:	88fb      	ldrh	r3, [r7, #6]
 8012c2e:	b2da      	uxtb	r2, r3
 8012c30:	4b09      	ldr	r3, [pc, #36]	; (8012c58 <tcp_get_next_optbyte+0x64>)
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012c3a:	4b06      	ldr	r3, [pc, #24]	; (8012c54 <tcp_get_next_optbyte+0x60>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	797b      	ldrb	r3, [r7, #5]
 8012c40:	4413      	add	r3, r2
 8012c42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	20011bcc 	.word	0x20011bcc
 8012c54:	20011bc8 	.word	0x20011bc8
 8012c58:	20011bc6 	.word	0x20011bc6
 8012c5c:	20011bc0 	.word	0x20011bc0

08012c60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d106      	bne.n	8012c7c <tcp_parseopt+0x1c>
 8012c6e:	4b32      	ldr	r3, [pc, #200]	; (8012d38 <tcp_parseopt+0xd8>)
 8012c70:	f240 727d 	movw	r2, #1917	; 0x77d
 8012c74:	4931      	ldr	r1, [pc, #196]	; (8012d3c <tcp_parseopt+0xdc>)
 8012c76:	4832      	ldr	r0, [pc, #200]	; (8012d40 <tcp_parseopt+0xe0>)
 8012c78:	f004 ff8a 	bl	8017b90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012c7c:	4b31      	ldr	r3, [pc, #196]	; (8012d44 <tcp_parseopt+0xe4>)
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d055      	beq.n	8012d30 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c84:	4b30      	ldr	r3, [pc, #192]	; (8012d48 <tcp_parseopt+0xe8>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	801a      	strh	r2, [r3, #0]
 8012c8a:	e045      	b.n	8012d18 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012c8c:	f7ff ffb2 	bl	8012bf4 <tcp_get_next_optbyte>
 8012c90:	4603      	mov	r3, r0
 8012c92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012c94:	7bfb      	ldrb	r3, [r7, #15]
 8012c96:	2b02      	cmp	r3, #2
 8012c98:	d006      	beq.n	8012ca8 <tcp_parseopt+0x48>
 8012c9a:	2b02      	cmp	r3, #2
 8012c9c:	dc2b      	bgt.n	8012cf6 <tcp_parseopt+0x96>
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d041      	beq.n	8012d26 <tcp_parseopt+0xc6>
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d127      	bne.n	8012cf6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012ca6:	e037      	b.n	8012d18 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012ca8:	f7ff ffa4 	bl	8012bf4 <tcp_get_next_optbyte>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b04      	cmp	r3, #4
 8012cb0:	d13b      	bne.n	8012d2a <tcp_parseopt+0xca>
 8012cb2:	4b25      	ldr	r3, [pc, #148]	; (8012d48 <tcp_parseopt+0xe8>)
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	4a22      	ldr	r2, [pc, #136]	; (8012d44 <tcp_parseopt+0xe4>)
 8012cba:	8812      	ldrh	r2, [r2, #0]
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	da34      	bge.n	8012d2a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012cc0:	f7ff ff98 	bl	8012bf4 <tcp_get_next_optbyte>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	021b      	lsls	r3, r3, #8
 8012cca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012ccc:	f7ff ff92 	bl	8012bf4 <tcp_get_next_optbyte>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	89bb      	ldrh	r3, [r7, #12]
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012cda:	89bb      	ldrh	r3, [r7, #12]
 8012cdc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012ce0:	d804      	bhi.n	8012cec <tcp_parseopt+0x8c>
 8012ce2:	89bb      	ldrh	r3, [r7, #12]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <tcp_parseopt+0x8c>
 8012ce8:	89ba      	ldrh	r2, [r7, #12]
 8012cea:	e001      	b.n	8012cf0 <tcp_parseopt+0x90>
 8012cec:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012cf4:	e010      	b.n	8012d18 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012cf6:	f7ff ff7d 	bl	8012bf4 <tcp_get_next_optbyte>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012cfe:	7afb      	ldrb	r3, [r7, #11]
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d914      	bls.n	8012d2e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012d04:	7afb      	ldrb	r3, [r7, #11]
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	4b0f      	ldr	r3, [pc, #60]	; (8012d48 <tcp_parseopt+0xe8>)
 8012d0a:	881b      	ldrh	r3, [r3, #0]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	3b02      	subs	r3, #2
 8012d12:	b29a      	uxth	r2, r3
 8012d14:	4b0c      	ldr	r3, [pc, #48]	; (8012d48 <tcp_parseopt+0xe8>)
 8012d16:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d18:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <tcp_parseopt+0xe8>)
 8012d1a:	881a      	ldrh	r2, [r3, #0]
 8012d1c:	4b09      	ldr	r3, [pc, #36]	; (8012d44 <tcp_parseopt+0xe4>)
 8012d1e:	881b      	ldrh	r3, [r3, #0]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d3b3      	bcc.n	8012c8c <tcp_parseopt+0x2c>
 8012d24:	e004      	b.n	8012d30 <tcp_parseopt+0xd0>
          return;
 8012d26:	bf00      	nop
 8012d28:	e002      	b.n	8012d30 <tcp_parseopt+0xd0>
            return;
 8012d2a:	bf00      	nop
 8012d2c:	e000      	b.n	8012d30 <tcp_parseopt+0xd0>
            return;
 8012d2e:	bf00      	nop
      }
    }
  }
}
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	0801c954 	.word	0x0801c954
 8012d3c:	0801cdb8 	.word	0x0801cdb8
 8012d40:	0801c9a0 	.word	0x0801c9a0
 8012d44:	20011bc4 	.word	0x20011bc4
 8012d48:	20011bcc 	.word	0x20011bcc

08012d4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012d50:	4b05      	ldr	r3, [pc, #20]	; (8012d68 <tcp_trigger_input_pcb_close+0x1c>)
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	f043 0310 	orr.w	r3, r3, #16
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	4b03      	ldr	r3, [pc, #12]	; (8012d68 <tcp_trigger_input_pcb_close+0x1c>)
 8012d5c:	701a      	strb	r2, [r3, #0]
}
 8012d5e:	bf00      	nop
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	20011bdd 	.word	0x20011bdd

08012d6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d00a      	beq.n	8012d94 <tcp_route+0x28>
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	7a1b      	ldrb	r3, [r3, #8]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d006      	beq.n	8012d94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	7a1b      	ldrb	r3, [r3, #8]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7fb f800 	bl	800dd90 <netif_get_by_index>
 8012d90:	4603      	mov	r3, r0
 8012d92:	e003      	b.n	8012d9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f003 f96d 	bl	8016074 <ip4_route>
 8012d9a:	4603      	mov	r3, r0
  }
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3710      	adds	r7, #16
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012da4:	b590      	push	{r4, r7, lr}
 8012da6:	b087      	sub	sp, #28
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	603b      	str	r3, [r7, #0]
 8012db0:	4613      	mov	r3, r2
 8012db2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d105      	bne.n	8012dc6 <tcp_create_segment+0x22>
 8012dba:	4b44      	ldr	r3, [pc, #272]	; (8012ecc <tcp_create_segment+0x128>)
 8012dbc:	22a3      	movs	r2, #163	; 0xa3
 8012dbe:	4944      	ldr	r1, [pc, #272]	; (8012ed0 <tcp_create_segment+0x12c>)
 8012dc0:	4844      	ldr	r0, [pc, #272]	; (8012ed4 <tcp_create_segment+0x130>)
 8012dc2:	f004 fee5 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d105      	bne.n	8012dd8 <tcp_create_segment+0x34>
 8012dcc:	4b3f      	ldr	r3, [pc, #252]	; (8012ecc <tcp_create_segment+0x128>)
 8012dce:	22a4      	movs	r2, #164	; 0xa4
 8012dd0:	4941      	ldr	r1, [pc, #260]	; (8012ed8 <tcp_create_segment+0x134>)
 8012dd2:	4840      	ldr	r0, [pc, #256]	; (8012ed4 <tcp_create_segment+0x130>)
 8012dd4:	f004 fedc 	bl	8017b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	f003 0304 	and.w	r3, r3, #4
 8012de4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012de6:	2002      	movs	r0, #2
 8012de8:	f7fa fc4a 	bl	800d680 <memp_malloc>
 8012dec:	6138      	str	r0, [r7, #16]
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d104      	bne.n	8012dfe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012df4:	68b8      	ldr	r0, [r7, #8]
 8012df6:	f7fb fb59 	bl	800e4ac <pbuf_free>
    return NULL;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e061      	b.n	8012ec2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e04:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	2200      	movs	r2, #0
 8012e0a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	68ba      	ldr	r2, [r7, #8]
 8012e10:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	891a      	ldrh	r2, [r3, #8]
 8012e16:	7dfb      	ldrb	r3, [r7, #23]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d205      	bcs.n	8012e2a <tcp_create_segment+0x86>
 8012e1e:	4b2b      	ldr	r3, [pc, #172]	; (8012ecc <tcp_create_segment+0x128>)
 8012e20:	22b0      	movs	r2, #176	; 0xb0
 8012e22:	492e      	ldr	r1, [pc, #184]	; (8012edc <tcp_create_segment+0x138>)
 8012e24:	482b      	ldr	r0, [pc, #172]	; (8012ed4 <tcp_create_segment+0x130>)
 8012e26:	f004 feb3 	bl	8017b90 <iprintf>
  seg->len = p->tot_len - optlen;
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	891a      	ldrh	r2, [r3, #8]
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	b29b      	uxth	r3, r3
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012e3a:	2114      	movs	r1, #20
 8012e3c:	68b8      	ldr	r0, [r7, #8]
 8012e3e:	f7fb fa9f 	bl	800e380 <pbuf_add_header>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d004      	beq.n	8012e52 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012e48:	6938      	ldr	r0, [r7, #16]
 8012e4a:	f7fd f800 	bl	800fe4e <tcp_seg_free>
    return NULL;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	e037      	b.n	8012ec2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	685a      	ldr	r2, [r3, #4]
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	8ada      	ldrh	r2, [r3, #22]
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	68dc      	ldr	r4, [r3, #12]
 8012e64:	4610      	mov	r0, r2
 8012e66:	f7f9 fe1b 	bl	800caa0 <lwip_htons>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	8b1a      	ldrh	r2, [r3, #24]
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	68dc      	ldr	r4, [r3, #12]
 8012e76:	4610      	mov	r0, r2
 8012e78:	f7f9 fe12 	bl	800caa0 <lwip_htons>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	68dc      	ldr	r4, [r3, #12]
 8012e84:	6838      	ldr	r0, [r7, #0]
 8012e86:	f7f9 fe20 	bl	800caca <lwip_htonl>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012e8e:	7dfb      	ldrb	r3, [r7, #23]
 8012e90:	089b      	lsrs	r3, r3, #2
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	3305      	adds	r3, #5
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	031b      	lsls	r3, r3, #12
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	79fb      	ldrb	r3, [r7, #7]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	4313      	orrs	r3, r2
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	68dc      	ldr	r4, [r3, #12]
 8012eaa:	4610      	mov	r0, r2
 8012eac:	f7f9 fdf8 	bl	800caa0 <lwip_htons>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	749a      	strb	r2, [r3, #18]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	74da      	strb	r2, [r3, #19]
  return seg;
 8012ec0:	693b      	ldr	r3, [r7, #16]
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	371c      	adds	r7, #28
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd90      	pop	{r4, r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	0801cdd4 	.word	0x0801cdd4
 8012ed0:	0801ce08 	.word	0x0801ce08
 8012ed4:	0801ce28 	.word	0x0801ce28
 8012ed8:	0801ce50 	.word	0x0801ce50
 8012edc:	0801ce74 	.word	0x0801ce74

08012ee0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	607b      	str	r3, [r7, #4]
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]
 8012eec:	460b      	mov	r3, r1
 8012eee:	81bb      	strh	r3, [r7, #12]
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012ef4:	89bb      	ldrh	r3, [r7, #12]
 8012ef6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d105      	bne.n	8012f0a <tcp_pbuf_prealloc+0x2a>
 8012efe:	4b30      	ldr	r3, [pc, #192]	; (8012fc0 <tcp_pbuf_prealloc+0xe0>)
 8012f00:	22e8      	movs	r2, #232	; 0xe8
 8012f02:	4930      	ldr	r1, [pc, #192]	; (8012fc4 <tcp_pbuf_prealloc+0xe4>)
 8012f04:	4830      	ldr	r0, [pc, #192]	; (8012fc8 <tcp_pbuf_prealloc+0xe8>)
 8012f06:	f004 fe43 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012f0a:	6a3b      	ldr	r3, [r7, #32]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d105      	bne.n	8012f1c <tcp_pbuf_prealloc+0x3c>
 8012f10:	4b2b      	ldr	r3, [pc, #172]	; (8012fc0 <tcp_pbuf_prealloc+0xe0>)
 8012f12:	22e9      	movs	r2, #233	; 0xe9
 8012f14:	492d      	ldr	r1, [pc, #180]	; (8012fcc <tcp_pbuf_prealloc+0xec>)
 8012f16:	482c      	ldr	r0, [pc, #176]	; (8012fc8 <tcp_pbuf_prealloc+0xe8>)
 8012f18:	f004 fe3a 	bl	8017b90 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012f1c:	89ba      	ldrh	r2, [r7, #12]
 8012f1e:	897b      	ldrh	r3, [r7, #10]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d221      	bcs.n	8012f68 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f28:	f003 0302 	and.w	r3, r3, #2
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d111      	bne.n	8012f54 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012f30:	6a3b      	ldr	r3, [r7, #32]
 8012f32:	8b5b      	ldrh	r3, [r3, #26]
 8012f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d115      	bne.n	8012f68 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012f3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d007      	beq.n	8012f54 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d103      	bne.n	8012f54 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012f4c:	6a3b      	ldr	r3, [r7, #32]
 8012f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d009      	beq.n	8012f68 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012f54:	89bb      	ldrh	r3, [r7, #12]
 8012f56:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012f5a:	f023 0203 	bic.w	r2, r3, #3
 8012f5e:	897b      	ldrh	r3, [r7, #10]
 8012f60:	4293      	cmp	r3, r2
 8012f62:	bf28      	it	cs
 8012f64:	4613      	movcs	r3, r2
 8012f66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012f68:	8af9      	ldrh	r1, [r7, #22]
 8012f6a:	7bfb      	ldrb	r3, [r7, #15]
 8012f6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fa ffb7 	bl	800dee4 <pbuf_alloc>
 8012f76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	e019      	b.n	8012fb6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d006      	beq.n	8012f98 <tcp_pbuf_prealloc+0xb8>
 8012f8a:	4b0d      	ldr	r3, [pc, #52]	; (8012fc0 <tcp_pbuf_prealloc+0xe0>)
 8012f8c:	f240 120b 	movw	r2, #267	; 0x10b
 8012f90:	490f      	ldr	r1, [pc, #60]	; (8012fd0 <tcp_pbuf_prealloc+0xf0>)
 8012f92:	480d      	ldr	r0, [pc, #52]	; (8012fc8 <tcp_pbuf_prealloc+0xe8>)
 8012f94:	f004 fdfc 	bl	8017b90 <iprintf>
  *oversize = p->len - length;
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	895a      	ldrh	r2, [r3, #10]
 8012f9c:	89bb      	ldrh	r3, [r7, #12]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	89ba      	ldrh	r2, [r7, #12]
 8012faa:	811a      	strh	r2, [r3, #8]
 8012fac:	693b      	ldr	r3, [r7, #16]
 8012fae:	891a      	ldrh	r2, [r3, #8]
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	815a      	strh	r2, [r3, #10]
  return p;
 8012fb4:	693b      	ldr	r3, [r7, #16]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	0801cdd4 	.word	0x0801cdd4
 8012fc4:	0801ce8c 	.word	0x0801ce8c
 8012fc8:	0801ce28 	.word	0x0801ce28
 8012fcc:	0801ceb0 	.word	0x0801ceb0
 8012fd0:	0801ced0 	.word	0x0801ced0

08012fd4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	460b      	mov	r3, r1
 8012fde:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d106      	bne.n	8012ff4 <tcp_write_checks+0x20>
 8012fe6:	4b33      	ldr	r3, [pc, #204]	; (80130b4 <tcp_write_checks+0xe0>)
 8012fe8:	f240 1233 	movw	r2, #307	; 0x133
 8012fec:	4932      	ldr	r1, [pc, #200]	; (80130b8 <tcp_write_checks+0xe4>)
 8012fee:	4833      	ldr	r0, [pc, #204]	; (80130bc <tcp_write_checks+0xe8>)
 8012ff0:	f004 fdce 	bl	8017b90 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	7d1b      	ldrb	r3, [r3, #20]
 8012ff8:	2b04      	cmp	r3, #4
 8012ffa:	d00e      	beq.n	801301a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013000:	2b07      	cmp	r3, #7
 8013002:	d00a      	beq.n	801301a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013008:	2b02      	cmp	r3, #2
 801300a:	d006      	beq.n	801301a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013010:	2b03      	cmp	r3, #3
 8013012:	d002      	beq.n	801301a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013014:	f06f 030a 	mvn.w	r3, #10
 8013018:	e048      	b.n	80130ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801301a:	887b      	ldrh	r3, [r7, #2]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d101      	bne.n	8013024 <tcp_write_checks+0x50>
    return ERR_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	e043      	b.n	80130ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801302a:	887a      	ldrh	r2, [r7, #2]
 801302c:	429a      	cmp	r2, r3
 801302e:	d909      	bls.n	8013044 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8b5b      	ldrh	r3, [r3, #26]
 8013034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013038:	b29a      	uxth	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013042:	e033      	b.n	80130ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801304a:	2b08      	cmp	r3, #8
 801304c:	d909      	bls.n	8013062 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	8b5b      	ldrh	r3, [r3, #26]
 8013052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013056:	b29a      	uxth	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801305c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013060:	e024      	b.n	80130ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00f      	beq.n	801308c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013070:	2b00      	cmp	r3, #0
 8013072:	d11a      	bne.n	80130aa <tcp_write_checks+0xd6>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013078:	2b00      	cmp	r3, #0
 801307a:	d116      	bne.n	80130aa <tcp_write_checks+0xd6>
 801307c:	4b0d      	ldr	r3, [pc, #52]	; (80130b4 <tcp_write_checks+0xe0>)
 801307e:	f240 1255 	movw	r2, #341	; 0x155
 8013082:	490f      	ldr	r1, [pc, #60]	; (80130c0 <tcp_write_checks+0xec>)
 8013084:	480d      	ldr	r0, [pc, #52]	; (80130bc <tcp_write_checks+0xe8>)
 8013086:	f004 fd83 	bl	8017b90 <iprintf>
 801308a:	e00e      	b.n	80130aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013090:	2b00      	cmp	r3, #0
 8013092:	d103      	bne.n	801309c <tcp_write_checks+0xc8>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <tcp_write_checks+0xd6>
 801309c:	4b05      	ldr	r3, [pc, #20]	; (80130b4 <tcp_write_checks+0xe0>)
 801309e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80130a2:	4908      	ldr	r1, [pc, #32]	; (80130c4 <tcp_write_checks+0xf0>)
 80130a4:	4805      	ldr	r0, [pc, #20]	; (80130bc <tcp_write_checks+0xe8>)
 80130a6:	f004 fd73 	bl	8017b90 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	0801cdd4 	.word	0x0801cdd4
 80130b8:	0801cee4 	.word	0x0801cee4
 80130bc:	0801ce28 	.word	0x0801ce28
 80130c0:	0801cf04 	.word	0x0801cf04
 80130c4:	0801cf40 	.word	0x0801cf40

080130c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80130c8:	b590      	push	{r4, r7, lr}
 80130ca:	b09b      	sub	sp, #108	; 0x6c
 80130cc:	af04      	add	r7, sp, #16
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	4611      	mov	r1, r2
 80130d4:	461a      	mov	r2, r3
 80130d6:	460b      	mov	r3, r1
 80130d8:	80fb      	strh	r3, [r7, #6]
 80130da:	4613      	mov	r3, r2
 80130dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80130de:	2300      	movs	r3, #0
 80130e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80130e2:	2300      	movs	r3, #0
 80130e4:	653b      	str	r3, [r7, #80]	; 0x50
 80130e6:	2300      	movs	r3, #0
 80130e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80130ea:	2300      	movs	r3, #0
 80130ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80130ee:	2300      	movs	r3, #0
 80130f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80130f2:	2300      	movs	r3, #0
 80130f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80130f8:	2300      	movs	r3, #0
 80130fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013102:	2300      	movs	r3, #0
 8013104:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d109      	bne.n	8013124 <tcp_write+0x5c>
 8013110:	4ba4      	ldr	r3, [pc, #656]	; (80133a4 <tcp_write+0x2dc>)
 8013112:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013116:	49a4      	ldr	r1, [pc, #656]	; (80133a8 <tcp_write+0x2e0>)
 8013118:	48a4      	ldr	r0, [pc, #656]	; (80133ac <tcp_write+0x2e4>)
 801311a:	f004 fd39 	bl	8017b90 <iprintf>
 801311e:	f06f 030f 	mvn.w	r3, #15
 8013122:	e32a      	b.n	801377a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801312a:	085b      	lsrs	r3, r3, #1
 801312c:	b29a      	uxth	r2, r3
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013132:	4293      	cmp	r3, r2
 8013134:	bf28      	it	cs
 8013136:	4613      	movcs	r3, r2
 8013138:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801313a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801313c:	2b00      	cmp	r3, #0
 801313e:	d102      	bne.n	8013146 <tcp_write+0x7e>
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013144:	e000      	b.n	8013148 <tcp_write+0x80>
 8013146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013148:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d109      	bne.n	8013164 <tcp_write+0x9c>
 8013150:	4b94      	ldr	r3, [pc, #592]	; (80133a4 <tcp_write+0x2dc>)
 8013152:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013156:	4996      	ldr	r1, [pc, #600]	; (80133b0 <tcp_write+0x2e8>)
 8013158:	4894      	ldr	r0, [pc, #592]	; (80133ac <tcp_write+0x2e4>)
 801315a:	f004 fd19 	bl	8017b90 <iprintf>
 801315e:	f06f 030f 	mvn.w	r3, #15
 8013162:	e30a      	b.n	801377a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013164:	88fb      	ldrh	r3, [r7, #6]
 8013166:	4619      	mov	r1, r3
 8013168:	68f8      	ldr	r0, [r7, #12]
 801316a:	f7ff ff33 	bl	8012fd4 <tcp_write_checks>
 801316e:	4603      	mov	r3, r0
 8013170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013174:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013178:	2b00      	cmp	r3, #0
 801317a:	d002      	beq.n	8013182 <tcp_write+0xba>
    return err;
 801317c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013180:	e2fb      	b.n	801377a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801318c:	2300      	movs	r3, #0
 801318e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 80f6 	beq.w	8013388 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a0:	653b      	str	r3, [r7, #80]	; 0x50
 80131a2:	e002      	b.n	80131aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80131a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80131aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d1f8      	bne.n	80131a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80131b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131b4:	7a9b      	ldrb	r3, [r3, #10]
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	f003 0304 	and.w	r3, r3, #4
 80131be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80131c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80131c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c4:	891b      	ldrh	r3, [r3, #8]
 80131c6:	4619      	mov	r1, r3
 80131c8:	8c3b      	ldrh	r3, [r7, #32]
 80131ca:	440b      	add	r3, r1
 80131cc:	429a      	cmp	r2, r3
 80131ce:	da06      	bge.n	80131de <tcp_write+0x116>
 80131d0:	4b74      	ldr	r3, [pc, #464]	; (80133a4 <tcp_write+0x2dc>)
 80131d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80131d6:	4977      	ldr	r1, [pc, #476]	; (80133b4 <tcp_write+0x2ec>)
 80131d8:	4874      	ldr	r0, [pc, #464]	; (80133ac <tcp_write+0x2e4>)
 80131da:	f004 fcd9 	bl	8017b90 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80131de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e0:	891a      	ldrh	r2, [r3, #8]
 80131e2:	8c3b      	ldrh	r3, [r7, #32]
 80131e4:	4413      	add	r3, r2
 80131e6:	b29b      	uxth	r3, r3
 80131e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80131ea:	1ad3      	subs	r3, r2, r3
 80131ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80131f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80131f6:	8a7b      	ldrh	r3, [r7, #18]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d026      	beq.n	801324a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80131fc:	8a7b      	ldrh	r3, [r7, #18]
 80131fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013200:	429a      	cmp	r2, r3
 8013202:	d206      	bcs.n	8013212 <tcp_write+0x14a>
 8013204:	4b67      	ldr	r3, [pc, #412]	; (80133a4 <tcp_write+0x2dc>)
 8013206:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801320a:	496b      	ldr	r1, [pc, #428]	; (80133b8 <tcp_write+0x2f0>)
 801320c:	4867      	ldr	r0, [pc, #412]	; (80133ac <tcp_write+0x2e4>)
 801320e:	f004 fcbf 	bl	8017b90 <iprintf>
      seg = last_unsent;
 8013212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013214:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013216:	8a7b      	ldrh	r3, [r7, #18]
 8013218:	88fa      	ldrh	r2, [r7, #6]
 801321a:	4293      	cmp	r3, r2
 801321c:	bf28      	it	cs
 801321e:	4613      	movcs	r3, r2
 8013220:	b29b      	uxth	r3, r3
 8013222:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013224:	4293      	cmp	r3, r2
 8013226:	bf28      	it	cs
 8013228:	4613      	movcs	r3, r2
 801322a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801322c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013232:	4413      	add	r3, r2
 8013234:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013238:	8a7a      	ldrh	r2, [r7, #18]
 801323a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	b29b      	uxth	r3, r3
 8013240:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013242:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801324a:	8a7b      	ldrh	r3, [r7, #18]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00b      	beq.n	8013268 <tcp_write+0x1a0>
 8013250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013254:	88fb      	ldrh	r3, [r7, #6]
 8013256:	429a      	cmp	r2, r3
 8013258:	d006      	beq.n	8013268 <tcp_write+0x1a0>
 801325a:	4b52      	ldr	r3, [pc, #328]	; (80133a4 <tcp_write+0x2dc>)
 801325c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013260:	4956      	ldr	r1, [pc, #344]	; (80133bc <tcp_write+0x2f4>)
 8013262:	4852      	ldr	r0, [pc, #328]	; (80133ac <tcp_write+0x2e4>)
 8013264:	f004 fc94 	bl	8017b90 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013268:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801326c:	88fb      	ldrh	r3, [r7, #6]
 801326e:	429a      	cmp	r2, r3
 8013270:	f080 8167 	bcs.w	8013542 <tcp_write+0x47a>
 8013274:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013276:	2b00      	cmp	r3, #0
 8013278:	f000 8163 	beq.w	8013542 <tcp_write+0x47a>
 801327c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801327e:	891b      	ldrh	r3, [r3, #8]
 8013280:	2b00      	cmp	r3, #0
 8013282:	f000 815e 	beq.w	8013542 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013286:	88fa      	ldrh	r2, [r7, #6]
 8013288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801328c:	1ad2      	subs	r2, r2, r3
 801328e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013290:	4293      	cmp	r3, r2
 8013292:	bfa8      	it	ge
 8013294:	4613      	movge	r3, r2
 8013296:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801329a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801329c:	797b      	ldrb	r3, [r7, #5]
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d027      	beq.n	80132f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80132a6:	f107 0012 	add.w	r0, r7, #18
 80132aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80132ac:	8bf9      	ldrh	r1, [r7, #30]
 80132ae:	2301      	movs	r3, #1
 80132b0:	9302      	str	r3, [sp, #8]
 80132b2:	797b      	ldrb	r3, [r7, #5]
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	4603      	mov	r3, r0
 80132bc:	2000      	movs	r0, #0
 80132be:	f7ff fe0f 	bl	8012ee0 <tcp_pbuf_prealloc>
 80132c2:	6578      	str	r0, [r7, #84]	; 0x54
 80132c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	f000 8225 	beq.w	8013716 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80132cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132ce:	6858      	ldr	r0, [r3, #4]
 80132d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132d4:	68ba      	ldr	r2, [r7, #8]
 80132d6:	4413      	add	r3, r2
 80132d8:	8bfa      	ldrh	r2, [r7, #30]
 80132da:	4619      	mov	r1, r3
 80132dc:	f004 fb93 	bl	8017a06 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80132e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80132e2:	f7fb f971 	bl	800e5c8 <pbuf_clen>
 80132e6:	4603      	mov	r3, r0
 80132e8:	461a      	mov	r2, r3
 80132ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80132ee:	4413      	add	r3, r2
 80132f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80132f4:	e041      	b.n	801337a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80132f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	637b      	str	r3, [r7, #52]	; 0x34
 80132fc:	e002      	b.n	8013304 <tcp_write+0x23c>
 80132fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	637b      	str	r3, [r7, #52]	; 0x34
 8013304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d1f8      	bne.n	80132fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330e:	7b1b      	ldrb	r3, [r3, #12]
 8013310:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013314:	2b00      	cmp	r3, #0
 8013316:	d115      	bne.n	8013344 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801331e:	8952      	ldrh	r2, [r2, #10]
 8013320:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	429a      	cmp	r2, r3
 8013326:	d10d      	bne.n	8013344 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801332c:	2b00      	cmp	r3, #0
 801332e:	d006      	beq.n	801333e <tcp_write+0x276>
 8013330:	4b1c      	ldr	r3, [pc, #112]	; (80133a4 <tcp_write+0x2dc>)
 8013332:	f240 2231 	movw	r2, #561	; 0x231
 8013336:	4922      	ldr	r1, [pc, #136]	; (80133c0 <tcp_write+0x2f8>)
 8013338:	481c      	ldr	r0, [pc, #112]	; (80133ac <tcp_write+0x2e4>)
 801333a:	f004 fc29 	bl	8017b90 <iprintf>
          extendlen = seglen;
 801333e:	8bfb      	ldrh	r3, [r7, #30]
 8013340:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013342:	e01a      	b.n	801337a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013344:	8bfb      	ldrh	r3, [r7, #30]
 8013346:	2201      	movs	r2, #1
 8013348:	4619      	mov	r1, r3
 801334a:	2000      	movs	r0, #0
 801334c:	f7fa fdca 	bl	800dee4 <pbuf_alloc>
 8013350:	6578      	str	r0, [r7, #84]	; 0x54
 8013352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013354:	2b00      	cmp	r3, #0
 8013356:	f000 81e0 	beq.w	801371a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801335a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801335e:	68ba      	ldr	r2, [r7, #8]
 8013360:	441a      	add	r2, r3
 8013362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013364:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013366:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013368:	f7fb f92e 	bl	800e5c8 <pbuf_clen>
 801336c:	4603      	mov	r3, r0
 801336e:	461a      	mov	r2, r3
 8013370:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013374:	4413      	add	r3, r2
 8013376:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801337a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801337e:	8bfb      	ldrh	r3, [r7, #30]
 8013380:	4413      	add	r3, r2
 8013382:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013386:	e0dc      	b.n	8013542 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801338e:	2b00      	cmp	r3, #0
 8013390:	f000 80d7 	beq.w	8013542 <tcp_write+0x47a>
 8013394:	4b03      	ldr	r3, [pc, #12]	; (80133a4 <tcp_write+0x2dc>)
 8013396:	f240 224a 	movw	r2, #586	; 0x24a
 801339a:	490a      	ldr	r1, [pc, #40]	; (80133c4 <tcp_write+0x2fc>)
 801339c:	4803      	ldr	r0, [pc, #12]	; (80133ac <tcp_write+0x2e4>)
 801339e:	f004 fbf7 	bl	8017b90 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80133a2:	e0ce      	b.n	8013542 <tcp_write+0x47a>
 80133a4:	0801cdd4 	.word	0x0801cdd4
 80133a8:	0801cf74 	.word	0x0801cf74
 80133ac:	0801ce28 	.word	0x0801ce28
 80133b0:	0801cf8c 	.word	0x0801cf8c
 80133b4:	0801cfc0 	.word	0x0801cfc0
 80133b8:	0801cfd8 	.word	0x0801cfd8
 80133bc:	0801cff8 	.word	0x0801cff8
 80133c0:	0801d018 	.word	0x0801d018
 80133c4:	0801d044 	.word	0x0801d044
    struct pbuf *p;
    u16_t left = len - pos;
 80133c8:	88fa      	ldrh	r2, [r7, #6]
 80133ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80133d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133da:	1ad3      	subs	r3, r2, r3
 80133dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80133de:	8b7a      	ldrh	r2, [r7, #26]
 80133e0:	8bbb      	ldrh	r3, [r7, #28]
 80133e2:	4293      	cmp	r3, r2
 80133e4:	bf28      	it	cs
 80133e6:	4613      	movcs	r3, r2
 80133e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80133ea:	797b      	ldrb	r3, [r7, #5]
 80133ec:	f003 0301 	and.w	r3, r3, #1
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d036      	beq.n	8013462 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80133f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80133f8:	b29a      	uxth	r2, r3
 80133fa:	8b3b      	ldrh	r3, [r7, #24]
 80133fc:	4413      	add	r3, r2
 80133fe:	b299      	uxth	r1, r3
 8013400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013402:	2b00      	cmp	r3, #0
 8013404:	bf0c      	ite	eq
 8013406:	2301      	moveq	r3, #1
 8013408:	2300      	movne	r3, #0
 801340a:	b2db      	uxtb	r3, r3
 801340c:	f107 0012 	add.w	r0, r7, #18
 8013410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013412:	9302      	str	r3, [sp, #8]
 8013414:	797b      	ldrb	r3, [r7, #5]
 8013416:	9301      	str	r3, [sp, #4]
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	9300      	str	r3, [sp, #0]
 801341c:	4603      	mov	r3, r0
 801341e:	2036      	movs	r0, #54	; 0x36
 8013420:	f7ff fd5e 	bl	8012ee0 <tcp_pbuf_prealloc>
 8013424:	6338      	str	r0, [r7, #48]	; 0x30
 8013426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013428:	2b00      	cmp	r3, #0
 801342a:	f000 8178 	beq.w	801371e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013430:	895b      	ldrh	r3, [r3, #10]
 8013432:	8b3a      	ldrh	r2, [r7, #24]
 8013434:	429a      	cmp	r2, r3
 8013436:	d906      	bls.n	8013446 <tcp_write+0x37e>
 8013438:	4b8c      	ldr	r3, [pc, #560]	; (801366c <tcp_write+0x5a4>)
 801343a:	f240 2266 	movw	r2, #614	; 0x266
 801343e:	498c      	ldr	r1, [pc, #560]	; (8013670 <tcp_write+0x5a8>)
 8013440:	488c      	ldr	r0, [pc, #560]	; (8013674 <tcp_write+0x5ac>)
 8013442:	f004 fba5 	bl	8017b90 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013448:	685a      	ldr	r2, [r3, #4]
 801344a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801344e:	18d0      	adds	r0, r2, r3
 8013450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013454:	68ba      	ldr	r2, [r7, #8]
 8013456:	4413      	add	r3, r2
 8013458:	8b3a      	ldrh	r2, [r7, #24]
 801345a:	4619      	mov	r1, r3
 801345c:	f004 fad3 	bl	8017a06 <memcpy>
 8013460:	e02f      	b.n	80134c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013462:	8a7b      	ldrh	r3, [r7, #18]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d006      	beq.n	8013476 <tcp_write+0x3ae>
 8013468:	4b80      	ldr	r3, [pc, #512]	; (801366c <tcp_write+0x5a4>)
 801346a:	f240 2271 	movw	r2, #625	; 0x271
 801346e:	4982      	ldr	r1, [pc, #520]	; (8013678 <tcp_write+0x5b0>)
 8013470:	4880      	ldr	r0, [pc, #512]	; (8013674 <tcp_write+0x5ac>)
 8013472:	f004 fb8d 	bl	8017b90 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013476:	8b3b      	ldrh	r3, [r7, #24]
 8013478:	2201      	movs	r2, #1
 801347a:	4619      	mov	r1, r3
 801347c:	2036      	movs	r0, #54	; 0x36
 801347e:	f7fa fd31 	bl	800dee4 <pbuf_alloc>
 8013482:	6178      	str	r0, [r7, #20]
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 814b 	beq.w	8013722 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801348c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013490:	68ba      	ldr	r2, [r7, #8]
 8013492:	441a      	add	r2, r3
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013498:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801349c:	b29b      	uxth	r3, r3
 801349e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134a2:	4619      	mov	r1, r3
 80134a4:	2036      	movs	r0, #54	; 0x36
 80134a6:	f7fa fd1d 	bl	800dee4 <pbuf_alloc>
 80134aa:	6338      	str	r0, [r7, #48]	; 0x30
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d103      	bne.n	80134ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80134b2:	6978      	ldr	r0, [r7, #20]
 80134b4:	f7fa fffa 	bl	800e4ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80134b8:	e136      	b.n	8013728 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80134ba:	6979      	ldr	r1, [r7, #20]
 80134bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134be:	f7fb f8c3 	bl	800e648 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80134c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134c4:	f7fb f880 	bl	800e5c8 <pbuf_clen>
 80134c8:	4603      	mov	r3, r0
 80134ca:	461a      	mov	r2, r3
 80134cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134d0:	4413      	add	r3, r2
 80134d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80134d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134da:	2b09      	cmp	r3, #9
 80134dc:	d903      	bls.n	80134e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80134de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134e0:	f7fa ffe4 	bl	800e4ac <pbuf_free>
      goto memerr;
 80134e4:	e120      	b.n	8013728 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80134ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134ee:	441a      	add	r2, r3
 80134f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	4613      	mov	r3, r2
 80134f8:	2200      	movs	r2, #0
 80134fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f7ff fc51 	bl	8012da4 <tcp_create_segment>
 8013502:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 810d 	beq.w	8013726 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801350c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801350e:	2b00      	cmp	r3, #0
 8013510:	d102      	bne.n	8013518 <tcp_write+0x450>
      queue = seg;
 8013512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013514:	647b      	str	r3, [r7, #68]	; 0x44
 8013516:	e00c      	b.n	8013532 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801351a:	2b00      	cmp	r3, #0
 801351c:	d106      	bne.n	801352c <tcp_write+0x464>
 801351e:	4b53      	ldr	r3, [pc, #332]	; (801366c <tcp_write+0x5a4>)
 8013520:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013524:	4955      	ldr	r1, [pc, #340]	; (801367c <tcp_write+0x5b4>)
 8013526:	4853      	ldr	r0, [pc, #332]	; (8013674 <tcp_write+0x5ac>)
 8013528:	f004 fb32 	bl	8017b90 <iprintf>
      prev_seg->next = seg;
 801352c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801352e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013530:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013534:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801353a:	8b3b      	ldrh	r3, [r7, #24]
 801353c:	4413      	add	r3, r2
 801353e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013542:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013546:	88fb      	ldrh	r3, [r7, #6]
 8013548:	429a      	cmp	r2, r3
 801354a:	f4ff af3d 	bcc.w	80133c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801354e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013550:	2b00      	cmp	r3, #0
 8013552:	d02c      	beq.n	80135ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013556:	685b      	ldr	r3, [r3, #4]
 8013558:	62fb      	str	r3, [r7, #44]	; 0x2c
 801355a:	e01e      	b.n	801359a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355e:	891a      	ldrh	r2, [r3, #8]
 8013560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013562:	4413      	add	r3, r2
 8013564:	b29a      	uxth	r2, r3
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d110      	bne.n	8013594 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013578:	8952      	ldrh	r2, [r2, #10]
 801357a:	4413      	add	r3, r2
 801357c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801357e:	68b9      	ldr	r1, [r7, #8]
 8013580:	4618      	mov	r0, r3
 8013582:	f004 fa40 	bl	8017a06 <memcpy>
        p->len += oversize_used;
 8013586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013588:	895a      	ldrh	r2, [r3, #10]
 801358a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801358c:	4413      	add	r3, r2
 801358e:	b29a      	uxth	r2, r3
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359c:	2b00      	cmp	r3, #0
 801359e:	d1dd      	bne.n	801355c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80135a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a2:	891a      	ldrh	r2, [r3, #8]
 80135a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135a6:	4413      	add	r3, r2
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80135ae:	8a7a      	ldrh	r2, [r7, #18]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80135b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d018      	beq.n	80135ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80135bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d106      	bne.n	80135d0 <tcp_write+0x508>
 80135c2:	4b2a      	ldr	r3, [pc, #168]	; (801366c <tcp_write+0x5a4>)
 80135c4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80135c8:	492d      	ldr	r1, [pc, #180]	; (8013680 <tcp_write+0x5b8>)
 80135ca:	482a      	ldr	r0, [pc, #168]	; (8013674 <tcp_write+0x5ac>)
 80135cc:	f004 fae0 	bl	8017b90 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80135d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fb f836 	bl	800e648 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80135dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135de:	891a      	ldrh	r2, [r3, #8]
 80135e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135e2:	891b      	ldrh	r3, [r3, #8]
 80135e4:	4413      	add	r3, r2
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ea:	811a      	strh	r2, [r3, #8]
 80135ec:	e037      	b.n	801365e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80135ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d034      	beq.n	801365e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80135f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d003      	beq.n	8013602 <tcp_write+0x53a>
 80135fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d106      	bne.n	8013610 <tcp_write+0x548>
 8013602:	4b1a      	ldr	r3, [pc, #104]	; (801366c <tcp_write+0x5a4>)
 8013604:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013608:	491e      	ldr	r1, [pc, #120]	; (8013684 <tcp_write+0x5bc>)
 801360a:	481a      	ldr	r0, [pc, #104]	; (8013674 <tcp_write+0x5ac>)
 801360c:	f004 fac0 	bl	8017b90 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	62bb      	str	r3, [r7, #40]	; 0x28
 8013616:	e009      	b.n	801362c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361a:	891a      	ldrh	r2, [r3, #8]
 801361c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801361e:	4413      	add	r3, r2
 8013620:	b29a      	uxth	r2, r3
 8013622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013624:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	62bb      	str	r3, [r7, #40]	; 0x28
 801362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1f1      	bne.n	8013618 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013636:	891a      	ldrh	r2, [r3, #8]
 8013638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801363a:	4413      	add	r3, r2
 801363c:	b29a      	uxth	r2, r3
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013644:	895a      	ldrh	r2, [r3, #10]
 8013646:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013648:	4413      	add	r3, r2
 801364a:	b29a      	uxth	r2, r3
 801364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013652:	891a      	ldrh	r2, [r3, #8]
 8013654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013656:	4413      	add	r3, r2
 8013658:	b29a      	uxth	r2, r3
 801365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801365c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013660:	2b00      	cmp	r3, #0
 8013662:	d111      	bne.n	8013688 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013668:	66da      	str	r2, [r3, #108]	; 0x6c
 801366a:	e010      	b.n	801368e <tcp_write+0x5c6>
 801366c:	0801cdd4 	.word	0x0801cdd4
 8013670:	0801d074 	.word	0x0801d074
 8013674:	0801ce28 	.word	0x0801ce28
 8013678:	0801d0b4 	.word	0x0801d0b4
 801367c:	0801d0c4 	.word	0x0801d0c4
 8013680:	0801d0d8 	.word	0x0801d0d8
 8013684:	0801d110 	.word	0x0801d110
  } else {
    last_unsent->next = queue;
 8013688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801368a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801368c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013692:	88fb      	ldrh	r3, [r7, #6]
 8013694:	441a      	add	r2, r3
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80136a0:	88fb      	ldrh	r3, [r7, #6]
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80136b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00e      	beq.n	80136de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d10a      	bne.n	80136de <tcp_write+0x616>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d106      	bne.n	80136de <tcp_write+0x616>
 80136d0:	4b2c      	ldr	r3, [pc, #176]	; (8013784 <tcp_write+0x6bc>)
 80136d2:	f240 3212 	movw	r2, #786	; 0x312
 80136d6:	492c      	ldr	r1, [pc, #176]	; (8013788 <tcp_write+0x6c0>)
 80136d8:	482c      	ldr	r0, [pc, #176]	; (801378c <tcp_write+0x6c4>)
 80136da:	f004 fa59 	bl	8017b90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80136de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d016      	beq.n	8013712 <tcp_write+0x64a>
 80136e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136e6:	68db      	ldr	r3, [r3, #12]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d012      	beq.n	8013712 <tcp_write+0x64a>
 80136ec:	797b      	ldrb	r3, [r7, #5]
 80136ee:	f003 0302 	and.w	r3, r3, #2
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d10d      	bne.n	8013712 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80136f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	899b      	ldrh	r3, [r3, #12]
 80136fc:	b29c      	uxth	r4, r3
 80136fe:	2008      	movs	r0, #8
 8013700:	f7f9 f9ce 	bl	800caa0 <lwip_htons>
 8013704:	4603      	mov	r3, r0
 8013706:	461a      	mov	r2, r3
 8013708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	4322      	orrs	r2, r4
 801370e:	b292      	uxth	r2, r2
 8013710:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013712:	2300      	movs	r3, #0
 8013714:	e031      	b.n	801377a <tcp_write+0x6b2>
          goto memerr;
 8013716:	bf00      	nop
 8013718:	e006      	b.n	8013728 <tcp_write+0x660>
            goto memerr;
 801371a:	bf00      	nop
 801371c:	e004      	b.n	8013728 <tcp_write+0x660>
        goto memerr;
 801371e:	bf00      	nop
 8013720:	e002      	b.n	8013728 <tcp_write+0x660>
        goto memerr;
 8013722:	bf00      	nop
 8013724:	e000      	b.n	8013728 <tcp_write+0x660>
      goto memerr;
 8013726:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	8b5b      	ldrh	r3, [r3, #26]
 801372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013730:	b29a      	uxth	r2, r3
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013738:	2b00      	cmp	r3, #0
 801373a:	d002      	beq.n	8013742 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801373c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801373e:	f7fa feb5 	bl	800e4ac <pbuf_free>
  }
  if (queue != NULL) {
 8013742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013744:	2b00      	cmp	r3, #0
 8013746:	d002      	beq.n	801374e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013748:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801374a:	f7fc fb6b 	bl	800fe24 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00e      	beq.n	8013776 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10a      	bne.n	8013776 <tcp_write+0x6ae>
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013764:	2b00      	cmp	r3, #0
 8013766:	d106      	bne.n	8013776 <tcp_write+0x6ae>
 8013768:	4b06      	ldr	r3, [pc, #24]	; (8013784 <tcp_write+0x6bc>)
 801376a:	f240 3227 	movw	r2, #807	; 0x327
 801376e:	4906      	ldr	r1, [pc, #24]	; (8013788 <tcp_write+0x6c0>)
 8013770:	4806      	ldr	r0, [pc, #24]	; (801378c <tcp_write+0x6c4>)
 8013772:	f004 fa0d 	bl	8017b90 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801377a:	4618      	mov	r0, r3
 801377c:	375c      	adds	r7, #92	; 0x5c
 801377e:	46bd      	mov	sp, r7
 8013780:	bd90      	pop	{r4, r7, pc}
 8013782:	bf00      	nop
 8013784:	0801cdd4 	.word	0x0801cdd4
 8013788:	0801d148 	.word	0x0801d148
 801378c:	0801ce28 	.word	0x0801ce28

08013790 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	b08b      	sub	sp, #44	; 0x2c
 8013794:	af02      	add	r7, sp, #8
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	460b      	mov	r3, r1
 801379a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801379c:	2300      	movs	r3, #0
 801379e:	61fb      	str	r3, [r7, #28]
 80137a0:	2300      	movs	r3, #0
 80137a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80137a4:	2300      	movs	r3, #0
 80137a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d106      	bne.n	80137bc <tcp_split_unsent_seg+0x2c>
 80137ae:	4b95      	ldr	r3, [pc, #596]	; (8013a04 <tcp_split_unsent_seg+0x274>)
 80137b0:	f240 324b 	movw	r2, #843	; 0x34b
 80137b4:	4994      	ldr	r1, [pc, #592]	; (8013a08 <tcp_split_unsent_seg+0x278>)
 80137b6:	4895      	ldr	r0, [pc, #596]	; (8013a0c <tcp_split_unsent_seg+0x27c>)
 80137b8:	f004 f9ea 	bl	8017b90 <iprintf>

  useg = pcb->unsent;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d102      	bne.n	80137ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80137c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137cc:	e116      	b.n	80139fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80137ce:	887b      	ldrh	r3, [r7, #2]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d109      	bne.n	80137e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80137d4:	4b8b      	ldr	r3, [pc, #556]	; (8013a04 <tcp_split_unsent_seg+0x274>)
 80137d6:	f240 3253 	movw	r2, #851	; 0x353
 80137da:	498d      	ldr	r1, [pc, #564]	; (8013a10 <tcp_split_unsent_seg+0x280>)
 80137dc:	488b      	ldr	r0, [pc, #556]	; (8013a0c <tcp_split_unsent_seg+0x27c>)
 80137de:	f004 f9d7 	bl	8017b90 <iprintf>
    return ERR_VAL;
 80137e2:	f06f 0305 	mvn.w	r3, #5
 80137e6:	e109      	b.n	80139fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	891b      	ldrh	r3, [r3, #8]
 80137ec:	887a      	ldrh	r2, [r7, #2]
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d301      	bcc.n	80137f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	e102      	b.n	80139fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137fa:	887a      	ldrh	r2, [r7, #2]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d906      	bls.n	801380e <tcp_split_unsent_seg+0x7e>
 8013800:	4b80      	ldr	r3, [pc, #512]	; (8013a04 <tcp_split_unsent_seg+0x274>)
 8013802:	f240 325b 	movw	r2, #859	; 0x35b
 8013806:	4983      	ldr	r1, [pc, #524]	; (8013a14 <tcp_split_unsent_seg+0x284>)
 8013808:	4880      	ldr	r0, [pc, #512]	; (8013a0c <tcp_split_unsent_seg+0x27c>)
 801380a:	f004 f9c1 	bl	8017b90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	891b      	ldrh	r3, [r3, #8]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d106      	bne.n	8013824 <tcp_split_unsent_seg+0x94>
 8013816:	4b7b      	ldr	r3, [pc, #492]	; (8013a04 <tcp_split_unsent_seg+0x274>)
 8013818:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801381c:	497e      	ldr	r1, [pc, #504]	; (8013a18 <tcp_split_unsent_seg+0x288>)
 801381e:	487b      	ldr	r0, [pc, #492]	; (8013a0c <tcp_split_unsent_seg+0x27c>)
 8013820:	f004 f9b6 	bl	8017b90 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	7a9b      	ldrb	r3, [r3, #10]
 8013828:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801382a:	7bfb      	ldrb	r3, [r7, #15]
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	b2db      	uxtb	r3, r3
 8013830:	f003 0304 	and.w	r3, r3, #4
 8013834:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	891a      	ldrh	r2, [r3, #8]
 801383a:	887b      	ldrh	r3, [r7, #2]
 801383c:	1ad3      	subs	r3, r2, r3
 801383e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013840:	7bbb      	ldrb	r3, [r7, #14]
 8013842:	b29a      	uxth	r2, r3
 8013844:	89bb      	ldrh	r3, [r7, #12]
 8013846:	4413      	add	r3, r2
 8013848:	b29b      	uxth	r3, r3
 801384a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801384e:	4619      	mov	r1, r3
 8013850:	2036      	movs	r0, #54	; 0x36
 8013852:	f7fa fb47 	bl	800dee4 <pbuf_alloc>
 8013856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	2b00      	cmp	r3, #0
 801385c:	f000 80b7 	beq.w	80139ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	891a      	ldrh	r2, [r3, #8]
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	891b      	ldrh	r3, [r3, #8]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	b29a      	uxth	r2, r3
 801386e:	887b      	ldrh	r3, [r7, #2]
 8013870:	4413      	add	r3, r2
 8013872:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	6858      	ldr	r0, [r3, #4]
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	685a      	ldr	r2, [r3, #4]
 801387c:	7bbb      	ldrb	r3, [r7, #14]
 801387e:	18d1      	adds	r1, r2, r3
 8013880:	897b      	ldrh	r3, [r7, #10]
 8013882:	89ba      	ldrh	r2, [r7, #12]
 8013884:	f7fb f808 	bl	800e898 <pbuf_copy_partial>
 8013888:	4603      	mov	r3, r0
 801388a:	461a      	mov	r2, r3
 801388c:	89bb      	ldrh	r3, [r7, #12]
 801388e:	4293      	cmp	r3, r2
 8013890:	f040 809f 	bne.w	80139d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	899b      	ldrh	r3, [r3, #12]
 801389a:	b29b      	uxth	r3, r3
 801389c:	4618      	mov	r0, r3
 801389e:	f7f9 f8ff 	bl	800caa0 <lwip_htons>
 80138a2:	4603      	mov	r3, r0
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80138ac:	2300      	movs	r3, #0
 80138ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80138b0:	7efb      	ldrb	r3, [r7, #27]
 80138b2:	f003 0308 	and.w	r3, r3, #8
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d007      	beq.n	80138ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80138ba:	7efb      	ldrb	r3, [r7, #27]
 80138bc:	f023 0308 	bic.w	r3, r3, #8
 80138c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80138c2:	7ebb      	ldrb	r3, [r7, #26]
 80138c4:	f043 0308 	orr.w	r3, r3, #8
 80138c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80138ca:	7efb      	ldrb	r3, [r7, #27]
 80138cc:	f003 0301 	and.w	r3, r3, #1
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d007      	beq.n	80138e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80138d4:	7efb      	ldrb	r3, [r7, #27]
 80138d6:	f023 0301 	bic.w	r3, r3, #1
 80138da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80138dc:	7ebb      	ldrb	r3, [r7, #26]
 80138de:	f043 0301 	orr.w	r3, r3, #1
 80138e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f9 f8ed 	bl	800caca <lwip_htonl>
 80138f0:	4602      	mov	r2, r0
 80138f2:	887b      	ldrh	r3, [r7, #2]
 80138f4:	18d1      	adds	r1, r2, r3
 80138f6:	7eba      	ldrb	r2, [r7, #26]
 80138f8:	7bfb      	ldrb	r3, [r7, #15]
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	460b      	mov	r3, r1
 80138fe:	6939      	ldr	r1, [r7, #16]
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7ff fa4f 	bl	8012da4 <tcp_create_segment>
 8013906:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d063      	beq.n	80139d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	685b      	ldr	r3, [r3, #4]
 8013912:	4618      	mov	r0, r3
 8013914:	f7fa fe58 	bl	800e5c8 <pbuf_clen>
 8013918:	4603      	mov	r3, r0
 801391a:	461a      	mov	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013922:	1a9b      	subs	r3, r3, r2
 8013924:	b29a      	uxth	r2, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	6858      	ldr	r0, [r3, #4]
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	891a      	ldrh	r2, [r3, #8]
 8013936:	89bb      	ldrh	r3, [r7, #12]
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	b29b      	uxth	r3, r3
 801393c:	4619      	mov	r1, r3
 801393e:	f7fa fc2f 	bl	800e1a0 <pbuf_realloc>
  useg->len -= remainder;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	891a      	ldrh	r2, [r3, #8]
 8013946:	89bb      	ldrh	r3, [r7, #12]
 8013948:	1ad3      	subs	r3, r2, r3
 801394a:	b29a      	uxth	r2, r3
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	68db      	ldr	r3, [r3, #12]
 8013954:	899b      	ldrh	r3, [r3, #12]
 8013956:	b29c      	uxth	r4, r3
 8013958:	7efb      	ldrb	r3, [r7, #27]
 801395a:	b29b      	uxth	r3, r3
 801395c:	4618      	mov	r0, r3
 801395e:	f7f9 f89f 	bl	800caa0 <lwip_htons>
 8013962:	4603      	mov	r3, r0
 8013964:	461a      	mov	r2, r3
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	4322      	orrs	r2, r4
 801396c:	b292      	uxth	r2, r2
 801396e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	4618      	mov	r0, r3
 8013976:	f7fa fe27 	bl	800e5c8 <pbuf_clen>
 801397a:	4603      	mov	r3, r0
 801397c:	461a      	mov	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013984:	4413      	add	r3, r2
 8013986:	b29a      	uxth	r2, r3
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	4618      	mov	r0, r3
 8013994:	f7fa fe18 	bl	800e5c8 <pbuf_clen>
 8013998:	4603      	mov	r3, r0
 801399a:	461a      	mov	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139a2:	4413      	add	r3, r2
 80139a4:	b29a      	uxth	r2, r3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	681a      	ldr	r2, [r3, #0]
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	69fa      	ldr	r2, [r7, #28]
 80139b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d103      	bne.n	80139ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	e016      	b.n	80139fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80139ce:	bf00      	nop
 80139d0:	e002      	b.n	80139d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139d2:	bf00      	nop
 80139d4:	e000      	b.n	80139d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d006      	beq.n	80139ec <tcp_split_unsent_seg+0x25c>
 80139de:	4b09      	ldr	r3, [pc, #36]	; (8013a04 <tcp_split_unsent_seg+0x274>)
 80139e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80139e4:	490d      	ldr	r1, [pc, #52]	; (8013a1c <tcp_split_unsent_seg+0x28c>)
 80139e6:	4809      	ldr	r0, [pc, #36]	; (8013a0c <tcp_split_unsent_seg+0x27c>)
 80139e8:	f004 f8d2 	bl	8017b90 <iprintf>
  if (p != NULL) {
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d002      	beq.n	80139f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80139f2:	6938      	ldr	r0, [r7, #16]
 80139f4:	f7fa fd5a 	bl	800e4ac <pbuf_free>
  }

  return ERR_MEM;
 80139f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3724      	adds	r7, #36	; 0x24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd90      	pop	{r4, r7, pc}
 8013a04:	0801cdd4 	.word	0x0801cdd4
 8013a08:	0801d168 	.word	0x0801d168
 8013a0c:	0801ce28 	.word	0x0801ce28
 8013a10:	0801d18c 	.word	0x0801d18c
 8013a14:	0801d1b0 	.word	0x0801d1b0
 8013a18:	0801d1c0 	.word	0x0801d1c0
 8013a1c:	0801d1d0 	.word	0x0801d1d0

08013a20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013a20:	b590      	push	{r4, r7, lr}
 8013a22:	b085      	sub	sp, #20
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d106      	bne.n	8013a3c <tcp_send_fin+0x1c>
 8013a2e:	4b21      	ldr	r3, [pc, #132]	; (8013ab4 <tcp_send_fin+0x94>)
 8013a30:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013a34:	4920      	ldr	r1, [pc, #128]	; (8013ab8 <tcp_send_fin+0x98>)
 8013a36:	4821      	ldr	r0, [pc, #132]	; (8013abc <tcp_send_fin+0x9c>)
 8013a38:	f004 f8aa 	bl	8017b90 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d02e      	beq.n	8013aa2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a48:	60fb      	str	r3, [r7, #12]
 8013a4a:	e002      	b.n	8013a52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1f8      	bne.n	8013a4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	899b      	ldrh	r3, [r3, #12]
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7f9 f81c 	bl	800caa0 <lwip_htons>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	f003 0307 	and.w	r3, r3, #7
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d116      	bne.n	8013aa2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	899b      	ldrh	r3, [r3, #12]
 8013a7a:	b29c      	uxth	r4, r3
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	f7f9 f80f 	bl	800caa0 <lwip_htons>
 8013a82:	4603      	mov	r3, r0
 8013a84:	461a      	mov	r2, r3
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	4322      	orrs	r2, r4
 8013a8c:	b292      	uxth	r2, r2
 8013a8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	8b5b      	ldrh	r3, [r3, #26]
 8013a94:	f043 0320 	orr.w	r3, r3, #32
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e004      	b.n	8013aac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013aa2:	2101      	movs	r1, #1
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 f80b 	bl	8013ac0 <tcp_enqueue_flags>
 8013aaa:	4603      	mov	r3, r0
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3714      	adds	r7, #20
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd90      	pop	{r4, r7, pc}
 8013ab4:	0801cdd4 	.word	0x0801cdd4
 8013ab8:	0801d1dc 	.word	0x0801d1dc
 8013abc:	0801ce28 	.word	0x0801ce28

08013ac0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b08a      	sub	sp, #40	; 0x28
 8013ac4:	af02      	add	r7, sp, #8
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013acc:	2300      	movs	r3, #0
 8013ace:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ad4:	78fb      	ldrb	r3, [r7, #3]
 8013ad6:	f003 0303 	and.w	r3, r3, #3
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d106      	bne.n	8013aec <tcp_enqueue_flags+0x2c>
 8013ade:	4b67      	ldr	r3, [pc, #412]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013ae0:	f240 4211 	movw	r2, #1041	; 0x411
 8013ae4:	4966      	ldr	r1, [pc, #408]	; (8013c80 <tcp_enqueue_flags+0x1c0>)
 8013ae6:	4867      	ldr	r0, [pc, #412]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013ae8:	f004 f852 	bl	8017b90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d106      	bne.n	8013b00 <tcp_enqueue_flags+0x40>
 8013af2:	4b62      	ldr	r3, [pc, #392]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013af4:	f240 4213 	movw	r2, #1043	; 0x413
 8013af8:	4963      	ldr	r1, [pc, #396]	; (8013c88 <tcp_enqueue_flags+0x1c8>)
 8013afa:	4862      	ldr	r0, [pc, #392]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013afc:	f004 f848 	bl	8017b90 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013b00:	78fb      	ldrb	r3, [r7, #3]
 8013b02:	f003 0302 	and.w	r3, r3, #2
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b0e:	7ffb      	ldrb	r3, [r7, #31]
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	f003 0304 	and.w	r3, r3, #4
 8013b18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b1a:	7dfb      	ldrb	r3, [r7, #23]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b22:	4619      	mov	r1, r3
 8013b24:	2036      	movs	r0, #54	; 0x36
 8013b26:	f7fa f9dd 	bl	800dee4 <pbuf_alloc>
 8013b2a:	6138      	str	r0, [r7, #16]
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d109      	bne.n	8013b46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	8b5b      	ldrh	r3, [r3, #26]
 8013b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b3a:	b29a      	uxth	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b44:	e095      	b.n	8013c72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	895a      	ldrh	r2, [r3, #10]
 8013b4a:	7dfb      	ldrb	r3, [r7, #23]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d206      	bcs.n	8013b60 <tcp_enqueue_flags+0xa0>
 8013b52:	4b4a      	ldr	r3, [pc, #296]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013b54:	f240 4239 	movw	r2, #1081	; 0x439
 8013b58:	494c      	ldr	r1, [pc, #304]	; (8013c8c <tcp_enqueue_flags+0x1cc>)
 8013b5a:	484a      	ldr	r0, [pc, #296]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013b5c:	f004 f818 	bl	8017b90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013b64:	78fa      	ldrb	r2, [r7, #3]
 8013b66:	7ffb      	ldrb	r3, [r7, #31]
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	6939      	ldr	r1, [r7, #16]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7ff f918 	bl	8012da4 <tcp_create_segment>
 8013b74:	60f8      	str	r0, [r7, #12]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d109      	bne.n	8013b90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	8b5b      	ldrh	r3, [r3, #26]
 8013b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b8e:	e070      	b.n	8013c72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	f003 0303 	and.w	r3, r3, #3
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d006      	beq.n	8013baa <tcp_enqueue_flags+0xea>
 8013b9c:	4b37      	ldr	r3, [pc, #220]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013b9e:	f240 4242 	movw	r2, #1090	; 0x442
 8013ba2:	493b      	ldr	r1, [pc, #236]	; (8013c90 <tcp_enqueue_flags+0x1d0>)
 8013ba4:	4837      	ldr	r0, [pc, #220]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013ba6:	f003 fff3 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	891b      	ldrh	r3, [r3, #8]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d006      	beq.n	8013bc0 <tcp_enqueue_flags+0x100>
 8013bb2:	4b32      	ldr	r3, [pc, #200]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013bb4:	f240 4243 	movw	r2, #1091	; 0x443
 8013bb8:	4936      	ldr	r1, [pc, #216]	; (8013c94 <tcp_enqueue_flags+0x1d4>)
 8013bba:	4832      	ldr	r0, [pc, #200]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013bbc:	f003 ffe8 	bl	8017b90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d103      	bne.n	8013bd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	68fa      	ldr	r2, [r7, #12]
 8013bcc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013bce:	e00d      	b.n	8013bec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bd4:	61bb      	str	r3, [r7, #24]
 8013bd6:	e002      	b.n	8013bde <tcp_enqueue_flags+0x11e>
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	61bb      	str	r3, [r7, #24]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1f8      	bne.n	8013bd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013bf4:	78fb      	ldrb	r3, [r7, #3]
 8013bf6:	f003 0302 	and.w	r3, r3, #2
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d104      	bne.n	8013c08 <tcp_enqueue_flags+0x148>
 8013bfe:	78fb      	ldrb	r3, [r7, #3]
 8013c00:	f003 0301 	and.w	r3, r3, #1
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d004      	beq.n	8013c12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c0c:	1c5a      	adds	r2, r3, #1
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c12:	78fb      	ldrb	r3, [r7, #3]
 8013c14:	f003 0301 	and.w	r3, r3, #1
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d006      	beq.n	8013c2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	8b5b      	ldrh	r3, [r3, #26]
 8013c20:	f043 0320 	orr.w	r3, r3, #32
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7fa fcca 	bl	800e5c8 <pbuf_clen>
 8013c34:	4603      	mov	r3, r0
 8013c36:	461a      	mov	r2, r3
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c3e:	4413      	add	r3, r2
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d00e      	beq.n	8013c70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d10a      	bne.n	8013c70 <tcp_enqueue_flags+0x1b0>
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d106      	bne.n	8013c70 <tcp_enqueue_flags+0x1b0>
 8013c62:	4b06      	ldr	r3, [pc, #24]	; (8013c7c <tcp_enqueue_flags+0x1bc>)
 8013c64:	f240 4265 	movw	r2, #1125	; 0x465
 8013c68:	490b      	ldr	r1, [pc, #44]	; (8013c98 <tcp_enqueue_flags+0x1d8>)
 8013c6a:	4806      	ldr	r0, [pc, #24]	; (8013c84 <tcp_enqueue_flags+0x1c4>)
 8013c6c:	f003 ff90 	bl	8017b90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013c70:	2300      	movs	r3, #0
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3720      	adds	r7, #32
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	0801cdd4 	.word	0x0801cdd4
 8013c80:	0801d1f8 	.word	0x0801d1f8
 8013c84:	0801ce28 	.word	0x0801ce28
 8013c88:	0801d250 	.word	0x0801d250
 8013c8c:	0801d270 	.word	0x0801d270
 8013c90:	0801d2ac 	.word	0x0801d2ac
 8013c94:	0801d2c4 	.word	0x0801d2c4
 8013c98:	0801d2f0 	.word	0x0801d2f0

08013c9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013c9c:	b5b0      	push	{r4, r5, r7, lr}
 8013c9e:	b08a      	sub	sp, #40	; 0x28
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d106      	bne.n	8013cb8 <tcp_output+0x1c>
 8013caa:	4b8a      	ldr	r3, [pc, #552]	; (8013ed4 <tcp_output+0x238>)
 8013cac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013cb0:	4989      	ldr	r1, [pc, #548]	; (8013ed8 <tcp_output+0x23c>)
 8013cb2:	488a      	ldr	r0, [pc, #552]	; (8013edc <tcp_output+0x240>)
 8013cb4:	f003 ff6c 	bl	8017b90 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	7d1b      	ldrb	r3, [r3, #20]
 8013cbc:	2b01      	cmp	r3, #1
 8013cbe:	d106      	bne.n	8013cce <tcp_output+0x32>
 8013cc0:	4b84      	ldr	r3, [pc, #528]	; (8013ed4 <tcp_output+0x238>)
 8013cc2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013cc6:	4986      	ldr	r1, [pc, #536]	; (8013ee0 <tcp_output+0x244>)
 8013cc8:	4884      	ldr	r0, [pc, #528]	; (8013edc <tcp_output+0x240>)
 8013cca:	f003 ff61 	bl	8017b90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013cce:	4b85      	ldr	r3, [pc, #532]	; (8013ee4 <tcp_output+0x248>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d101      	bne.n	8013cdc <tcp_output+0x40>
    return ERR_OK;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e1ce      	b.n	801407a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	bf28      	it	cs
 8013cec:	4613      	movcs	r3, r2
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d10b      	bne.n	8013d16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8b5b      	ldrh	r3, [r3, #26]
 8013d02:	f003 0302 	and.w	r3, r3, #2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f000 81aa 	beq.w	8014060 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 fded 	bl	80148ec <tcp_send_empty_ack>
 8013d12:	4603      	mov	r3, r0
 8013d14:	e1b1      	b.n	801407a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013d16:	6879      	ldr	r1, [r7, #4]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	3304      	adds	r3, #4
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f7ff f824 	bl	8012d6c <tcp_route>
 8013d24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d102      	bne.n	8013d32 <tcp_output+0x96>
    return ERR_RTE;
 8013d2c:	f06f 0303 	mvn.w	r3, #3
 8013d30:	e1a3      	b.n	801407a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d003      	beq.n	8013d40 <tcp_output+0xa4>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d111      	bne.n	8013d64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d002      	beq.n	8013d4c <tcp_output+0xb0>
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	3304      	adds	r3, #4
 8013d4a:	e000      	b.n	8013d4e <tcp_output+0xb2>
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d102      	bne.n	8013d5c <tcp_output+0xc0>
      return ERR_RTE;
 8013d56:	f06f 0303 	mvn.w	r3, #3
 8013d5a:	e18e      	b.n	801407a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f8 fead 	bl	800caca <lwip_htonl>
 8013d70:	4602      	mov	r2, r0
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d76:	1ad3      	subs	r3, r2, r3
 8013d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d7a:	8912      	ldrh	r2, [r2, #8]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	69ba      	ldr	r2, [r7, #24]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d227      	bcs.n	8013dd4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	69bb      	ldr	r3, [r7, #24]
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	d114      	bne.n	8013dbc <tcp_output+0x120>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d110      	bne.n	8013dbc <tcp_output+0x120>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d10b      	bne.n	8013dbc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2200      	movs	r2, #0
 8013da8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2201      	movs	r2, #1
 8013db0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2200      	movs	r2, #0
 8013db8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	8b5b      	ldrh	r3, [r3, #26]
 8013dc0:	f003 0302 	and.w	r3, r3, #2
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	f000 814d 	beq.w	8014064 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 fd8e 	bl	80148ec <tcp_send_empty_ack>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	e152      	b.n	801407a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013de0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013de2:	6a3b      	ldr	r3, [r7, #32]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	f000 811c 	beq.w	8014022 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013dea:	e002      	b.n	8013df2 <tcp_output+0x156>
 8013dec:	6a3b      	ldr	r3, [r7, #32]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	623b      	str	r3, [r7, #32]
 8013df2:	6a3b      	ldr	r3, [r7, #32]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d1f8      	bne.n	8013dec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013dfa:	e112      	b.n	8014022 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	899b      	ldrh	r3, [r3, #12]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f8 fe4b 	bl	800caa0 <lwip_htons>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	f003 0304 	and.w	r3, r3, #4
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d006      	beq.n	8013e24 <tcp_output+0x188>
 8013e16:	4b2f      	ldr	r3, [pc, #188]	; (8013ed4 <tcp_output+0x238>)
 8013e18:	f240 5236 	movw	r2, #1334	; 0x536
 8013e1c:	4932      	ldr	r1, [pc, #200]	; (8013ee8 <tcp_output+0x24c>)
 8013e1e:	482f      	ldr	r0, [pc, #188]	; (8013edc <tcp_output+0x240>)
 8013e20:	f003 feb6 	bl	8017b90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d01f      	beq.n	8013e6c <tcp_output+0x1d0>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8b5b      	ldrh	r3, [r3, #26]
 8013e30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d119      	bne.n	8013e6c <tcp_output+0x1d0>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00b      	beq.n	8013e58 <tcp_output+0x1bc>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d110      	bne.n	8013e6c <tcp_output+0x1d0>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e4e:	891a      	ldrh	r2, [r3, #8]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d209      	bcs.n	8013e6c <tcp_output+0x1d0>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d004      	beq.n	8013e6c <tcp_output+0x1d0>
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e68:	2b08      	cmp	r3, #8
 8013e6a:	d901      	bls.n	8013e70 <tcp_output+0x1d4>
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e000      	b.n	8013e72 <tcp_output+0x1d6>
 8013e70:	2300      	movs	r3, #0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d106      	bne.n	8013e84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	8b5b      	ldrh	r3, [r3, #26]
 8013e7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	f000 80e4 	beq.w	801404c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	7d1b      	ldrb	r3, [r3, #20]
 8013e88:	2b02      	cmp	r3, #2
 8013e8a:	d00d      	beq.n	8013ea8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	899b      	ldrh	r3, [r3, #12]
 8013e92:	b29c      	uxth	r4, r3
 8013e94:	2010      	movs	r0, #16
 8013e96:	f7f8 fe03 	bl	800caa0 <lwip_htons>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	4322      	orrs	r2, r4
 8013ea4:	b292      	uxth	r2, r2
 8013ea6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013ea8:	697a      	ldr	r2, [r7, #20]
 8013eaa:	6879      	ldr	r1, [r7, #4]
 8013eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013eae:	f000 f909 	bl	80140c4 <tcp_output_segment>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d016      	beq.n	8013eec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	8b5b      	ldrh	r3, [r3, #26]
 8013ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	835a      	strh	r2, [r3, #26]
      return err;
 8013ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ed0:	e0d3      	b.n	801407a <tcp_output+0x3de>
 8013ed2:	bf00      	nop
 8013ed4:	0801cdd4 	.word	0x0801cdd4
 8013ed8:	0801d318 	.word	0x0801d318
 8013edc:	0801ce28 	.word	0x0801ce28
 8013ee0:	0801d330 	.word	0x0801d330
 8013ee4:	20011be4 	.word	0x20011be4
 8013ee8:	0801d358 	.word	0x0801d358
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	7d1b      	ldrb	r3, [r3, #20]
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	d006      	beq.n	8013f0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f023 0303 	bic.w	r3, r3, #3
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7f8 fdda 	bl	800caca <lwip_htonl>
 8013f16:	4604      	mov	r4, r0
 8013f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1a:	891b      	ldrh	r3, [r3, #8]
 8013f1c:	461d      	mov	r5, r3
 8013f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	899b      	ldrh	r3, [r3, #12]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7f8 fdba 	bl	800caa0 <lwip_htons>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	f003 0303 	and.w	r3, r3, #3
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d001      	beq.n	8013f3c <tcp_output+0x2a0>
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e000      	b.n	8013f3e <tcp_output+0x2a2>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	442b      	add	r3, r5
 8013f40:	4423      	add	r3, r4
 8013f42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	da02      	bge.n	8013f56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68ba      	ldr	r2, [r7, #8]
 8013f54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f58:	891b      	ldrh	r3, [r3, #8]
 8013f5a:	461c      	mov	r4, r3
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	68db      	ldr	r3, [r3, #12]
 8013f60:	899b      	ldrh	r3, [r3, #12]
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7f8 fd9b 	bl	800caa0 <lwip_htons>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	f003 0303 	and.w	r3, r3, #3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <tcp_output+0x2de>
 8013f76:	2301      	movs	r3, #1
 8013f78:	e000      	b.n	8013f7c <tcp_output+0x2e0>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	4423      	add	r3, r4
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d049      	beq.n	8014016 <tcp_output+0x37a>
      seg->next = NULL;
 8013f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f84:	2200      	movs	r2, #0
 8013f86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d105      	bne.n	8013f9c <tcp_output+0x300>
        pcb->unacked = seg;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f98:	623b      	str	r3, [r7, #32]
 8013f9a:	e03f      	b.n	801401c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7f8 fd91 	bl	800caca <lwip_htonl>
 8013fa8:	4604      	mov	r4, r0
 8013faa:	6a3b      	ldr	r3, [r7, #32]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7f8 fd8a 	bl	800caca <lwip_htonl>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	1ae3      	subs	r3, r4, r3
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	da24      	bge.n	8014008 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	3370      	adds	r3, #112	; 0x70
 8013fc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013fc4:	e002      	b.n	8013fcc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d011      	beq.n	8013ff8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	68db      	ldr	r3, [r3, #12]
 8013fda:	685b      	ldr	r3, [r3, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7f8 fd74 	bl	800caca <lwip_htonl>
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7f8 fd6d 	bl	800caca <lwip_htonl>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dbe6      	blt.n	8013fc6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014000:	69fb      	ldr	r3, [r7, #28]
 8014002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	e009      	b.n	801401c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014008:	6a3b      	ldr	r3, [r7, #32]
 801400a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801400c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	623b      	str	r3, [r7, #32]
 8014014:	e002      	b.n	801401c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014018:	f7fb ff19 	bl	800fe4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014020:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	2b00      	cmp	r3, #0
 8014026:	d012      	beq.n	801404e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	4618      	mov	r0, r3
 8014030:	f7f8 fd4b 	bl	800caca <lwip_htonl>
 8014034:	4602      	mov	r2, r0
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801403e:	8912      	ldrh	r2, [r2, #8]
 8014040:	4413      	add	r3, r2
  while (seg != NULL &&
 8014042:	69ba      	ldr	r2, [r7, #24]
 8014044:	429a      	cmp	r2, r3
 8014046:	f4bf aed9 	bcs.w	8013dfc <tcp_output+0x160>
 801404a:	e000      	b.n	801404e <tcp_output+0x3b2>
      break;
 801404c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014052:	2b00      	cmp	r3, #0
 8014054:	d108      	bne.n	8014068 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	2200      	movs	r2, #0
 801405a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801405e:	e004      	b.n	801406a <tcp_output+0x3ce>
    goto output_done;
 8014060:	bf00      	nop
 8014062:	e002      	b.n	801406a <tcp_output+0x3ce>
    goto output_done;
 8014064:	bf00      	nop
 8014066:	e000      	b.n	801406a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014068:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	8b5b      	ldrh	r3, [r3, #26]
 801406e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014072:	b29a      	uxth	r2, r3
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014078:	2300      	movs	r3, #0
}
 801407a:	4618      	mov	r0, r3
 801407c:	3728      	adds	r7, #40	; 0x28
 801407e:	46bd      	mov	sp, r7
 8014080:	bdb0      	pop	{r4, r5, r7, pc}
 8014082:	bf00      	nop

08014084 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d106      	bne.n	80140a0 <tcp_output_segment_busy+0x1c>
 8014092:	4b09      	ldr	r3, [pc, #36]	; (80140b8 <tcp_output_segment_busy+0x34>)
 8014094:	f240 529a 	movw	r2, #1434	; 0x59a
 8014098:	4908      	ldr	r1, [pc, #32]	; (80140bc <tcp_output_segment_busy+0x38>)
 801409a:	4809      	ldr	r0, [pc, #36]	; (80140c0 <tcp_output_segment_busy+0x3c>)
 801409c:	f003 fd78 	bl	8017b90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	685b      	ldr	r3, [r3, #4]
 80140a4:	7b9b      	ldrb	r3, [r3, #14]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d001      	beq.n	80140ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80140aa:	2301      	movs	r3, #1
 80140ac:	e000      	b.n	80140b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3708      	adds	r7, #8
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	0801cdd4 	.word	0x0801cdd4
 80140bc:	0801d370 	.word	0x0801d370
 80140c0:	0801ce28 	.word	0x0801ce28

080140c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80140c4:	b5b0      	push	{r4, r5, r7, lr}
 80140c6:	b08c      	sub	sp, #48	; 0x30
 80140c8:	af04      	add	r7, sp, #16
 80140ca:	60f8      	str	r0, [r7, #12]
 80140cc:	60b9      	str	r1, [r7, #8]
 80140ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <tcp_output_segment+0x20>
 80140d6:	4b6c      	ldr	r3, [pc, #432]	; (8014288 <tcp_output_segment+0x1c4>)
 80140d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80140dc:	496b      	ldr	r1, [pc, #428]	; (801428c <tcp_output_segment+0x1c8>)
 80140de:	486c      	ldr	r0, [pc, #432]	; (8014290 <tcp_output_segment+0x1cc>)
 80140e0:	f003 fd56 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d106      	bne.n	80140f8 <tcp_output_segment+0x34>
 80140ea:	4b67      	ldr	r3, [pc, #412]	; (8014288 <tcp_output_segment+0x1c4>)
 80140ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80140f0:	4968      	ldr	r1, [pc, #416]	; (8014294 <tcp_output_segment+0x1d0>)
 80140f2:	4867      	ldr	r0, [pc, #412]	; (8014290 <tcp_output_segment+0x1cc>)
 80140f4:	f003 fd4c 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d106      	bne.n	801410c <tcp_output_segment+0x48>
 80140fe:	4b62      	ldr	r3, [pc, #392]	; (8014288 <tcp_output_segment+0x1c4>)
 8014100:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014104:	4964      	ldr	r1, [pc, #400]	; (8014298 <tcp_output_segment+0x1d4>)
 8014106:	4862      	ldr	r0, [pc, #392]	; (8014290 <tcp_output_segment+0x1cc>)
 8014108:	f003 fd42 	bl	8017b90 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801410c:	68f8      	ldr	r0, [r7, #12]
 801410e:	f7ff ffb9 	bl	8014084 <tcp_output_segment_busy>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	d001      	beq.n	801411c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014118:	2300      	movs	r3, #0
 801411a:	e0b1      	b.n	8014280 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	68dc      	ldr	r4, [r3, #12]
 8014124:	4610      	mov	r0, r2
 8014126:	f7f8 fcd0 	bl	800caca <lwip_htonl>
 801412a:	4603      	mov	r3, r0
 801412c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	68dc      	ldr	r4, [r3, #12]
 8014136:	4610      	mov	r0, r2
 8014138:	f7f8 fcb2 	bl	800caa0 <lwip_htons>
 801413c:	4603      	mov	r3, r0
 801413e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014144:	68ba      	ldr	r2, [r7, #8]
 8014146:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014148:	441a      	add	r2, r3
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	3314      	adds	r3, #20
 8014154:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	7a9b      	ldrb	r3, [r3, #10]
 801415a:	f003 0301 	and.w	r3, r3, #1
 801415e:	2b00      	cmp	r3, #0
 8014160:	d015      	beq.n	801418e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	3304      	adds	r3, #4
 8014166:	461a      	mov	r2, r3
 8014168:	6879      	ldr	r1, [r7, #4]
 801416a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801416e:	f7fc fa33 	bl	80105d8 <tcp_eff_send_mss_netif>
 8014172:	4603      	mov	r3, r0
 8014174:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014176:	8b7b      	ldrh	r3, [r7, #26]
 8014178:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801417c:	4618      	mov	r0, r3
 801417e:	f7f8 fca4 	bl	800caca <lwip_htonl>
 8014182:	4602      	mov	r2, r0
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	3304      	adds	r3, #4
 801418c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801418e:	68bb      	ldr	r3, [r7, #8]
 8014190:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014194:	2b00      	cmp	r3, #0
 8014196:	da02      	bge.n	801419e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	2200      	movs	r2, #0
 801419c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d10c      	bne.n	80141c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80141a6:	4b3d      	ldr	r3, [pc, #244]	; (801429c <tcp_output_segment+0x1d8>)
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7f8 fc88 	bl	800caca <lwip_htonl>
 80141ba:	4602      	mov	r2, r0
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	68da      	ldr	r2, [r3, #12]
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	1ad3      	subs	r3, r2, r3
 80141cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	8959      	ldrh	r1, [r3, #10]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	8b3a      	ldrh	r2, [r7, #24]
 80141da:	1a8a      	subs	r2, r1, r2
 80141dc:	b292      	uxth	r2, r2
 80141de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	8919      	ldrh	r1, [r3, #8]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	8b3a      	ldrh	r2, [r7, #24]
 80141ec:	1a8a      	subs	r2, r1, r2
 80141ee:	b292      	uxth	r2, r2
 80141f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	68d2      	ldr	r2, [r2, #12]
 80141fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	2200      	movs	r2, #0
 8014202:	741a      	strb	r2, [r3, #16]
 8014204:	2200      	movs	r2, #0
 8014206:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	f103 0214 	add.w	r2, r3, #20
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	7a9b      	ldrb	r3, [r3, #10]
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	f003 0304 	and.w	r3, r3, #4
 801421a:	4413      	add	r3, r2
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	429a      	cmp	r2, r3
 8014220:	d006      	beq.n	8014230 <tcp_output_segment+0x16c>
 8014222:	4b19      	ldr	r3, [pc, #100]	; (8014288 <tcp_output_segment+0x1c4>)
 8014224:	f240 621c 	movw	r2, #1564	; 0x61c
 8014228:	491d      	ldr	r1, [pc, #116]	; (80142a0 <tcp_output_segment+0x1dc>)
 801422a:	4819      	ldr	r0, [pc, #100]	; (8014290 <tcp_output_segment+0x1cc>)
 801422c:	f003 fcb0 	bl	8017b90 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014238:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801423a:	68bd      	ldr	r5, [r7, #8]
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014240:	68fa      	ldr	r2, [r7, #12]
 8014242:	68d4      	ldr	r4, [r2, #12]
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	462b      	mov	r3, r5
 8014248:	460a      	mov	r2, r1
 801424a:	2106      	movs	r1, #6
 801424c:	f7f8 fd5a 	bl	800cd04 <ip_chksum_pseudo>
 8014250:	4603      	mov	r3, r0
 8014252:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6858      	ldr	r0, [r3, #4]
 8014258:	68b9      	ldr	r1, [r7, #8]
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	1d1c      	adds	r4, r3, #4
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	7add      	ldrb	r5, [r3, #11]
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	7a9b      	ldrb	r3, [r3, #10]
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	9202      	str	r2, [sp, #8]
 801426a:	2206      	movs	r2, #6
 801426c:	9201      	str	r2, [sp, #4]
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	462b      	mov	r3, r5
 8014272:	4622      	mov	r2, r4
 8014274:	f002 f8b2 	bl	80163dc <ip4_output_if>
 8014278:	4603      	mov	r3, r0
 801427a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801427c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3720      	adds	r7, #32
 8014284:	46bd      	mov	sp, r7
 8014286:	bdb0      	pop	{r4, r5, r7, pc}
 8014288:	0801cdd4 	.word	0x0801cdd4
 801428c:	0801d398 	.word	0x0801d398
 8014290:	0801ce28 	.word	0x0801ce28
 8014294:	0801d3b8 	.word	0x0801d3b8
 8014298:	0801d3d8 	.word	0x0801d3d8
 801429c:	20011b98 	.word	0x20011b98
 80142a0:	0801d3fc 	.word	0x0801d3fc

080142a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80142a4:	b5b0      	push	{r4, r5, r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d106      	bne.n	80142c0 <tcp_rexmit_rto_prepare+0x1c>
 80142b2:	4b31      	ldr	r3, [pc, #196]	; (8014378 <tcp_rexmit_rto_prepare+0xd4>)
 80142b4:	f240 6263 	movw	r2, #1635	; 0x663
 80142b8:	4930      	ldr	r1, [pc, #192]	; (801437c <tcp_rexmit_rto_prepare+0xd8>)
 80142ba:	4831      	ldr	r0, [pc, #196]	; (8014380 <tcp_rexmit_rto_prepare+0xdc>)
 80142bc:	f003 fc68 	bl	8017b90 <iprintf>

  if (pcb->unacked == NULL) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d102      	bne.n	80142ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80142c8:	f06f 0305 	mvn.w	r3, #5
 80142cc:	e050      	b.n	8014370 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142d2:	60fb      	str	r3, [r7, #12]
 80142d4:	e00b      	b.n	80142ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80142d6:	68f8      	ldr	r0, [r7, #12]
 80142d8:	f7ff fed4 	bl	8014084 <tcp_output_segment_busy>
 80142dc:	4603      	mov	r3, r0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d002      	beq.n	80142e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80142e2:	f06f 0305 	mvn.w	r3, #5
 80142e6:	e043      	b.n	8014370 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	60fb      	str	r3, [r7, #12]
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d1ef      	bne.n	80142d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff fec4 	bl	8014084 <tcp_output_segment_busy>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d002      	beq.n	8014308 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014302:	f06f 0305 	mvn.w	r3, #5
 8014306:	e033      	b.n	8014370 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	8b5b      	ldrh	r3, [r3, #26]
 8014322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014326:	b29a      	uxth	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	4618      	mov	r0, r3
 8014334:	f7f8 fbc9 	bl	800caca <lwip_htonl>
 8014338:	4604      	mov	r4, r0
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	891b      	ldrh	r3, [r3, #8]
 801433e:	461d      	mov	r5, r3
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	899b      	ldrh	r3, [r3, #12]
 8014346:	b29b      	uxth	r3, r3
 8014348:	4618      	mov	r0, r3
 801434a:	f7f8 fba9 	bl	800caa0 <lwip_htons>
 801434e:	4603      	mov	r3, r0
 8014350:	b2db      	uxtb	r3, r3
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <tcp_rexmit_rto_prepare+0xba>
 801435a:	2301      	movs	r3, #1
 801435c:	e000      	b.n	8014360 <tcp_rexmit_rto_prepare+0xbc>
 801435e:	2300      	movs	r3, #0
 8014360:	442b      	add	r3, r5
 8014362:	18e2      	adds	r2, r4, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801436e:	2300      	movs	r3, #0
}
 8014370:	4618      	mov	r0, r3
 8014372:	3710      	adds	r7, #16
 8014374:	46bd      	mov	sp, r7
 8014376:	bdb0      	pop	{r4, r5, r7, pc}
 8014378:	0801cdd4 	.word	0x0801cdd4
 801437c:	0801d410 	.word	0x0801d410
 8014380:	0801ce28 	.word	0x0801ce28

08014384 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d106      	bne.n	80143a0 <tcp_rexmit_rto_commit+0x1c>
 8014392:	4b0d      	ldr	r3, [pc, #52]	; (80143c8 <tcp_rexmit_rto_commit+0x44>)
 8014394:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014398:	490c      	ldr	r1, [pc, #48]	; (80143cc <tcp_rexmit_rto_commit+0x48>)
 801439a:	480d      	ldr	r0, [pc, #52]	; (80143d0 <tcp_rexmit_rto_commit+0x4c>)
 801439c:	f003 fbf8 	bl	8017b90 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143a6:	2bff      	cmp	r3, #255	; 0xff
 80143a8:	d007      	beq.n	80143ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143b0:	3301      	adds	r3, #1
 80143b2:	b2da      	uxtb	r2, r3
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f7ff fc6e 	bl	8013c9c <tcp_output>
}
 80143c0:	bf00      	nop
 80143c2:	3708      	adds	r7, #8
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	0801cdd4 	.word	0x0801cdd4
 80143cc:	0801d434 	.word	0x0801d434
 80143d0:	0801ce28 	.word	0x0801ce28

080143d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <tcp_rexmit_rto+0x1c>
 80143e2:	4b0a      	ldr	r3, [pc, #40]	; (801440c <tcp_rexmit_rto+0x38>)
 80143e4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80143e8:	4909      	ldr	r1, [pc, #36]	; (8014410 <tcp_rexmit_rto+0x3c>)
 80143ea:	480a      	ldr	r0, [pc, #40]	; (8014414 <tcp_rexmit_rto+0x40>)
 80143ec:	f003 fbd0 	bl	8017b90 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ff ff57 	bl	80142a4 <tcp_rexmit_rto_prepare>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d102      	bne.n	8014402 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ff ffc1 	bl	8014384 <tcp_rexmit_rto_commit>
  }
}
 8014402:	bf00      	nop
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	0801cdd4 	.word	0x0801cdd4
 8014410:	0801d458 	.word	0x0801d458
 8014414:	0801ce28 	.word	0x0801ce28

08014418 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014418:	b590      	push	{r4, r7, lr}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <tcp_rexmit+0x1c>
 8014426:	4b2f      	ldr	r3, [pc, #188]	; (80144e4 <tcp_rexmit+0xcc>)
 8014428:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801442c:	492e      	ldr	r1, [pc, #184]	; (80144e8 <tcp_rexmit+0xd0>)
 801442e:	482f      	ldr	r0, [pc, #188]	; (80144ec <tcp_rexmit+0xd4>)
 8014430:	f003 fbae 	bl	8017b90 <iprintf>

  if (pcb->unacked == NULL) {
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014438:	2b00      	cmp	r3, #0
 801443a:	d102      	bne.n	8014442 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801443c:	f06f 0305 	mvn.w	r3, #5
 8014440:	e04c      	b.n	80144dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014446:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014448:	68b8      	ldr	r0, [r7, #8]
 801444a:	f7ff fe1b 	bl	8014084 <tcp_output_segment_busy>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d002      	beq.n	801445a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014454:	f06f 0305 	mvn.w	r3, #5
 8014458:	e040      	b.n	80144dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	336c      	adds	r3, #108	; 0x6c
 8014466:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014468:	e002      	b.n	8014470 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d011      	beq.n	801449c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	68db      	ldr	r3, [r3, #12]
 801447e:	685b      	ldr	r3, [r3, #4]
 8014480:	4618      	mov	r0, r3
 8014482:	f7f8 fb22 	bl	800caca <lwip_htonl>
 8014486:	4604      	mov	r4, r0
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	4618      	mov	r0, r3
 8014490:	f7f8 fb1b 	bl	800caca <lwip_htonl>
 8014494:	4603      	mov	r3, r0
 8014496:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014498:	2b00      	cmp	r3, #0
 801449a:	dbe6      	blt.n	801446a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d103      	bne.n	80144ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2200      	movs	r2, #0
 80144b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144c0:	2bff      	cmp	r3, #255	; 0xff
 80144c2:	d007      	beq.n	80144d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80144ca:	3301      	adds	r3, #1
 80144cc:	b2da      	uxtb	r2, r3
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2200      	movs	r2, #0
 80144d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3714      	adds	r7, #20
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd90      	pop	{r4, r7, pc}
 80144e4:	0801cdd4 	.word	0x0801cdd4
 80144e8:	0801d474 	.word	0x0801d474
 80144ec:	0801ce28 	.word	0x0801ce28

080144f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <tcp_rexmit_fast+0x1c>
 80144fe:	4b2a      	ldr	r3, [pc, #168]	; (80145a8 <tcp_rexmit_fast+0xb8>)
 8014500:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014504:	4929      	ldr	r1, [pc, #164]	; (80145ac <tcp_rexmit_fast+0xbc>)
 8014506:	482a      	ldr	r0, [pc, #168]	; (80145b0 <tcp_rexmit_fast+0xc0>)
 8014508:	f003 fb42 	bl	8017b90 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014510:	2b00      	cmp	r3, #0
 8014512:	d045      	beq.n	80145a0 <tcp_rexmit_fast+0xb0>
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	8b5b      	ldrh	r3, [r3, #26]
 8014518:	f003 0304 	and.w	r3, r3, #4
 801451c:	2b00      	cmp	r3, #0
 801451e:	d13f      	bne.n	80145a0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7ff ff79 	bl	8014418 <tcp_rexmit>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d139      	bne.n	80145a0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014538:	4293      	cmp	r3, r2
 801453a:	bf28      	it	cs
 801453c:	4613      	movcs	r3, r2
 801453e:	b29b      	uxth	r3, r3
 8014540:	2b00      	cmp	r3, #0
 8014542:	da00      	bge.n	8014546 <tcp_rexmit_fast+0x56>
 8014544:	3301      	adds	r3, #1
 8014546:	105b      	asrs	r3, r3, #1
 8014548:	b29a      	uxth	r2, r3
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014556:	461a      	mov	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	429a      	cmp	r2, r3
 8014560:	d206      	bcs.n	8014570 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	b29a      	uxth	r2, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801457a:	4619      	mov	r1, r3
 801457c:	0049      	lsls	r1, r1, #1
 801457e:	440b      	add	r3, r1
 8014580:	b29b      	uxth	r3, r3
 8014582:	4413      	add	r3, r2
 8014584:	b29a      	uxth	r2, r3
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	8b5b      	ldrh	r3, [r3, #26]
 8014590:	f043 0304 	orr.w	r3, r3, #4
 8014594:	b29a      	uxth	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80145a0:	bf00      	nop
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	0801cdd4 	.word	0x0801cdd4
 80145ac:	0801d48c 	.word	0x0801d48c
 80145b0:	0801ce28 	.word	0x0801ce28

080145b4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b086      	sub	sp, #24
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	60f8      	str	r0, [r7, #12]
 80145bc:	607b      	str	r3, [r7, #4]
 80145be:	460b      	mov	r3, r1
 80145c0:	817b      	strh	r3, [r7, #10]
 80145c2:	4613      	mov	r3, r2
 80145c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80145c6:	897a      	ldrh	r2, [r7, #10]
 80145c8:	893b      	ldrh	r3, [r7, #8]
 80145ca:	4413      	add	r3, r2
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	3314      	adds	r3, #20
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145d6:	4619      	mov	r1, r3
 80145d8:	2022      	movs	r0, #34	; 0x22
 80145da:	f7f9 fc83 	bl	800dee4 <pbuf_alloc>
 80145de:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d04d      	beq.n	8014682 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80145e6:	897b      	ldrh	r3, [r7, #10]
 80145e8:	3313      	adds	r3, #19
 80145ea:	697a      	ldr	r2, [r7, #20]
 80145ec:	8952      	ldrh	r2, [r2, #10]
 80145ee:	4293      	cmp	r3, r2
 80145f0:	db06      	blt.n	8014600 <tcp_output_alloc_header_common+0x4c>
 80145f2:	4b26      	ldr	r3, [pc, #152]	; (801468c <tcp_output_alloc_header_common+0xd8>)
 80145f4:	f240 7223 	movw	r2, #1827	; 0x723
 80145f8:	4925      	ldr	r1, [pc, #148]	; (8014690 <tcp_output_alloc_header_common+0xdc>)
 80145fa:	4826      	ldr	r0, [pc, #152]	; (8014694 <tcp_output_alloc_header_common+0xe0>)
 80145fc:	f003 fac8 	bl	8017b90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014606:	8c3b      	ldrh	r3, [r7, #32]
 8014608:	4618      	mov	r0, r3
 801460a:	f7f8 fa49 	bl	800caa0 <lwip_htons>
 801460e:	4603      	mov	r3, r0
 8014610:	461a      	mov	r2, r3
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014618:	4618      	mov	r0, r3
 801461a:	f7f8 fa41 	bl	800caa0 <lwip_htons>
 801461e:	4603      	mov	r3, r0
 8014620:	461a      	mov	r2, r3
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f7f8 fa4c 	bl	800caca <lwip_htonl>
 8014632:	4602      	mov	r2, r0
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014638:	897b      	ldrh	r3, [r7, #10]
 801463a:	089b      	lsrs	r3, r3, #2
 801463c:	b29b      	uxth	r3, r3
 801463e:	3305      	adds	r3, #5
 8014640:	b29b      	uxth	r3, r3
 8014642:	031b      	lsls	r3, r3, #12
 8014644:	b29a      	uxth	r2, r3
 8014646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801464a:	b29b      	uxth	r3, r3
 801464c:	4313      	orrs	r3, r2
 801464e:	b29b      	uxth	r3, r3
 8014650:	4618      	mov	r0, r3
 8014652:	f7f8 fa25 	bl	800caa0 <lwip_htons>
 8014656:	4603      	mov	r3, r0
 8014658:	461a      	mov	r2, r3
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801465e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014660:	4618      	mov	r0, r3
 8014662:	f7f8 fa1d 	bl	800caa0 <lwip_htons>
 8014666:	4603      	mov	r3, r0
 8014668:	461a      	mov	r2, r3
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	2200      	movs	r2, #0
 8014672:	741a      	strb	r2, [r3, #16]
 8014674:	2200      	movs	r2, #0
 8014676:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	2200      	movs	r2, #0
 801467c:	749a      	strb	r2, [r3, #18]
 801467e:	2200      	movs	r2, #0
 8014680:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014682:	697b      	ldr	r3, [r7, #20]
}
 8014684:	4618      	mov	r0, r3
 8014686:	3718      	adds	r7, #24
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}
 801468c:	0801cdd4 	.word	0x0801cdd4
 8014690:	0801d4ac 	.word	0x0801d4ac
 8014694:	0801ce28 	.word	0x0801ce28

08014698 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014698:	b5b0      	push	{r4, r5, r7, lr}
 801469a:	b08a      	sub	sp, #40	; 0x28
 801469c:	af04      	add	r7, sp, #16
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	607b      	str	r3, [r7, #4]
 80146a2:	460b      	mov	r3, r1
 80146a4:	817b      	strh	r3, [r7, #10]
 80146a6:	4613      	mov	r3, r2
 80146a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d106      	bne.n	80146be <tcp_output_alloc_header+0x26>
 80146b0:	4b15      	ldr	r3, [pc, #84]	; (8014708 <tcp_output_alloc_header+0x70>)
 80146b2:	f240 7242 	movw	r2, #1858	; 0x742
 80146b6:	4915      	ldr	r1, [pc, #84]	; (801470c <tcp_output_alloc_header+0x74>)
 80146b8:	4815      	ldr	r0, [pc, #84]	; (8014710 <tcp_output_alloc_header+0x78>)
 80146ba:	f003 fa69 	bl	8017b90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	8adb      	ldrh	r3, [r3, #22]
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	8b12      	ldrh	r2, [r2, #24]
 80146ca:	68f9      	ldr	r1, [r7, #12]
 80146cc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80146ce:	893d      	ldrh	r5, [r7, #8]
 80146d0:	897c      	ldrh	r4, [r7, #10]
 80146d2:	9103      	str	r1, [sp, #12]
 80146d4:	2110      	movs	r1, #16
 80146d6:	9102      	str	r1, [sp, #8]
 80146d8:	9201      	str	r2, [sp, #4]
 80146da:	9300      	str	r3, [sp, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	462a      	mov	r2, r5
 80146e0:	4621      	mov	r1, r4
 80146e2:	f7ff ff67 	bl	80145b4 <tcp_output_alloc_header_common>
 80146e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d006      	beq.n	80146fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146f2:	68fa      	ldr	r2, [r7, #12]
 80146f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146f6:	441a      	add	r2, r3
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80146fc:	697b      	ldr	r3, [r7, #20]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3718      	adds	r7, #24
 8014702:	46bd      	mov	sp, r7
 8014704:	bdb0      	pop	{r4, r5, r7, pc}
 8014706:	bf00      	nop
 8014708:	0801cdd4 	.word	0x0801cdd4
 801470c:	0801d4dc 	.word	0x0801d4dc
 8014710:	0801ce28 	.word	0x0801ce28

08014714 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b088      	sub	sp, #32
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	4611      	mov	r1, r2
 8014720:	461a      	mov	r2, r3
 8014722:	460b      	mov	r3, r1
 8014724:	71fb      	strb	r3, [r7, #7]
 8014726:	4613      	mov	r3, r2
 8014728:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801472a:	2300      	movs	r3, #0
 801472c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d106      	bne.n	8014742 <tcp_output_fill_options+0x2e>
 8014734:	4b13      	ldr	r3, [pc, #76]	; (8014784 <tcp_output_fill_options+0x70>)
 8014736:	f240 7256 	movw	r2, #1878	; 0x756
 801473a:	4913      	ldr	r1, [pc, #76]	; (8014788 <tcp_output_fill_options+0x74>)
 801473c:	4813      	ldr	r0, [pc, #76]	; (801478c <tcp_output_fill_options+0x78>)
 801473e:	f003 fa27 	bl	8017b90 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	3314      	adds	r3, #20
 801474c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	f103 0214 	add.w	r2, r3, #20
 8014754:	8bfb      	ldrh	r3, [r7, #30]
 8014756:	009b      	lsls	r3, r3, #2
 8014758:	4619      	mov	r1, r3
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	f003 0304 	and.w	r3, r3, #4
 8014762:	440b      	add	r3, r1
 8014764:	4413      	add	r3, r2
 8014766:	697a      	ldr	r2, [r7, #20]
 8014768:	429a      	cmp	r2, r3
 801476a:	d006      	beq.n	801477a <tcp_output_fill_options+0x66>
 801476c:	4b05      	ldr	r3, [pc, #20]	; (8014784 <tcp_output_fill_options+0x70>)
 801476e:	f240 7275 	movw	r2, #1909	; 0x775
 8014772:	4907      	ldr	r1, [pc, #28]	; (8014790 <tcp_output_fill_options+0x7c>)
 8014774:	4805      	ldr	r0, [pc, #20]	; (801478c <tcp_output_fill_options+0x78>)
 8014776:	f003 fa0b 	bl	8017b90 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801477a:	bf00      	nop
 801477c:	3720      	adds	r7, #32
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	0801cdd4 	.word	0x0801cdd4
 8014788:	0801d504 	.word	0x0801d504
 801478c:	0801ce28 	.word	0x0801ce28
 8014790:	0801d3fc 	.word	0x0801d3fc

08014794 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b08c      	sub	sp, #48	; 0x30
 8014798:	af04      	add	r7, sp, #16
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d106      	bne.n	80147b6 <tcp_output_control_segment+0x22>
 80147a8:	4b24      	ldr	r3, [pc, #144]	; (801483c <tcp_output_control_segment+0xa8>)
 80147aa:	f240 7287 	movw	r2, #1927	; 0x787
 80147ae:	4924      	ldr	r1, [pc, #144]	; (8014840 <tcp_output_control_segment+0xac>)
 80147b0:	4824      	ldr	r0, [pc, #144]	; (8014844 <tcp_output_control_segment+0xb0>)
 80147b2:	f003 f9ed 	bl	8017b90 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80147b6:	683a      	ldr	r2, [r7, #0]
 80147b8:	6879      	ldr	r1, [r7, #4]
 80147ba:	68f8      	ldr	r0, [r7, #12]
 80147bc:	f7fe fad6 	bl	8012d6c <tcp_route>
 80147c0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80147c2:	69bb      	ldr	r3, [r7, #24]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80147c8:	23fc      	movs	r3, #252	; 0xfc
 80147ca:	77fb      	strb	r3, [r7, #31]
 80147cc:	e02c      	b.n	8014828 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	891a      	ldrh	r2, [r3, #8]
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	9300      	str	r3, [sp, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2106      	movs	r1, #6
 80147e0:	68b8      	ldr	r0, [r7, #8]
 80147e2:	f7f8 fa8f 	bl	800cd04 <ip_chksum_pseudo>
 80147e6:	4603      	mov	r3, r0
 80147e8:	461a      	mov	r2, r3
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d006      	beq.n	8014802 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	7adb      	ldrb	r3, [r3, #11]
 80147f8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	7a9b      	ldrb	r3, [r3, #10]
 80147fe:	777b      	strb	r3, [r7, #29]
 8014800:	e003      	b.n	801480a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014802:	23ff      	movs	r3, #255	; 0xff
 8014804:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801480a:	7fba      	ldrb	r2, [r7, #30]
 801480c:	69bb      	ldr	r3, [r7, #24]
 801480e:	9302      	str	r3, [sp, #8]
 8014810:	2306      	movs	r3, #6
 8014812:	9301      	str	r3, [sp, #4]
 8014814:	7f7b      	ldrb	r3, [r7, #29]
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	4613      	mov	r3, r2
 801481a:	683a      	ldr	r2, [r7, #0]
 801481c:	6879      	ldr	r1, [r7, #4]
 801481e:	68b8      	ldr	r0, [r7, #8]
 8014820:	f001 fddc 	bl	80163dc <ip4_output_if>
 8014824:	4603      	mov	r3, r0
 8014826:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014828:	68b8      	ldr	r0, [r7, #8]
 801482a:	f7f9 fe3f 	bl	800e4ac <pbuf_free>
  return err;
 801482e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014832:	4618      	mov	r0, r3
 8014834:	3720      	adds	r7, #32
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	0801cdd4 	.word	0x0801cdd4
 8014840:	0801d52c 	.word	0x0801d52c
 8014844:	0801ce28 	.word	0x0801ce28

08014848 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014848:	b590      	push	{r4, r7, lr}
 801484a:	b08b      	sub	sp, #44	; 0x2c
 801484c:	af04      	add	r7, sp, #16
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d106      	bne.n	801486a <tcp_rst+0x22>
 801485c:	4b1f      	ldr	r3, [pc, #124]	; (80148dc <tcp_rst+0x94>)
 801485e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014862:	491f      	ldr	r1, [pc, #124]	; (80148e0 <tcp_rst+0x98>)
 8014864:	481f      	ldr	r0, [pc, #124]	; (80148e4 <tcp_rst+0x9c>)
 8014866:	f003 f993 	bl	8017b90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	2b00      	cmp	r3, #0
 801486e:	d106      	bne.n	801487e <tcp_rst+0x36>
 8014870:	4b1a      	ldr	r3, [pc, #104]	; (80148dc <tcp_rst+0x94>)
 8014872:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014876:	491c      	ldr	r1, [pc, #112]	; (80148e8 <tcp_rst+0xa0>)
 8014878:	481a      	ldr	r0, [pc, #104]	; (80148e4 <tcp_rst+0x9c>)
 801487a:	f003 f989 	bl	8017b90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801487e:	2300      	movs	r3, #0
 8014880:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014882:	f246 0308 	movw	r3, #24584	; 0x6008
 8014886:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014888:	7dfb      	ldrb	r3, [r7, #23]
 801488a:	b29c      	uxth	r4, r3
 801488c:	68b8      	ldr	r0, [r7, #8]
 801488e:	f7f8 f91c 	bl	800caca <lwip_htonl>
 8014892:	4602      	mov	r2, r0
 8014894:	8abb      	ldrh	r3, [r7, #20]
 8014896:	9303      	str	r3, [sp, #12]
 8014898:	2314      	movs	r3, #20
 801489a:	9302      	str	r3, [sp, #8]
 801489c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	4613      	mov	r3, r2
 80148a6:	2200      	movs	r2, #0
 80148a8:	4621      	mov	r1, r4
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f7ff fe82 	bl	80145b4 <tcp_output_alloc_header_common>
 80148b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80148b2:	693b      	ldr	r3, [r7, #16]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d00c      	beq.n	80148d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148b8:	7dfb      	ldrb	r3, [r7, #23]
 80148ba:	2200      	movs	r2, #0
 80148bc:	6939      	ldr	r1, [r7, #16]
 80148be:	68f8      	ldr	r0, [r7, #12]
 80148c0:	f7ff ff28 	bl	8014714 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80148c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	6939      	ldr	r1, [r7, #16]
 80148ca:	68f8      	ldr	r0, [r7, #12]
 80148cc:	f7ff ff62 	bl	8014794 <tcp_output_control_segment>
 80148d0:	e000      	b.n	80148d4 <tcp_rst+0x8c>
    return;
 80148d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80148d4:	371c      	adds	r7, #28
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd90      	pop	{r4, r7, pc}
 80148da:	bf00      	nop
 80148dc:	0801cdd4 	.word	0x0801cdd4
 80148e0:	0801d558 	.word	0x0801d558
 80148e4:	0801ce28 	.word	0x0801ce28
 80148e8:	0801d574 	.word	0x0801d574

080148ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b087      	sub	sp, #28
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80148f4:	2300      	movs	r3, #0
 80148f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80148f8:	2300      	movs	r3, #0
 80148fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d106      	bne.n	8014910 <tcp_send_empty_ack+0x24>
 8014902:	4b28      	ldr	r3, [pc, #160]	; (80149a4 <tcp_send_empty_ack+0xb8>)
 8014904:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014908:	4927      	ldr	r1, [pc, #156]	; (80149a8 <tcp_send_empty_ack+0xbc>)
 801490a:	4828      	ldr	r0, [pc, #160]	; (80149ac <tcp_send_empty_ack+0xc0>)
 801490c:	f003 f940 	bl	8017b90 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014910:	7dfb      	ldrb	r3, [r7, #23]
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	b2db      	uxtb	r3, r3
 8014916:	f003 0304 	and.w	r3, r3, #4
 801491a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801491c:	7d7b      	ldrb	r3, [r7, #21]
 801491e:	b29c      	uxth	r4, r3
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014924:	4618      	mov	r0, r3
 8014926:	f7f8 f8d0 	bl	800caca <lwip_htonl>
 801492a:	4603      	mov	r3, r0
 801492c:	2200      	movs	r2, #0
 801492e:	4621      	mov	r1, r4
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f7ff feb1 	bl	8014698 <tcp_output_alloc_header>
 8014936:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d109      	bne.n	8014952 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	8b5b      	ldrh	r3, [r3, #26]
 8014942:	f043 0303 	orr.w	r3, r3, #3
 8014946:	b29a      	uxth	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801494c:	f06f 0301 	mvn.w	r3, #1
 8014950:	e023      	b.n	801499a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014952:	7dbb      	ldrb	r3, [r7, #22]
 8014954:	7dfa      	ldrb	r2, [r7, #23]
 8014956:	6939      	ldr	r1, [r7, #16]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f7ff fedb 	bl	8014714 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	3304      	adds	r3, #4
 8014964:	6939      	ldr	r1, [r7, #16]
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f7ff ff14 	bl	8014794 <tcp_output_control_segment>
 801496c:	4603      	mov	r3, r0
 801496e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d007      	beq.n	8014988 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	8b5b      	ldrh	r3, [r3, #26]
 801497c:	f043 0303 	orr.w	r3, r3, #3
 8014980:	b29a      	uxth	r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	835a      	strh	r2, [r3, #26]
 8014986:	e006      	b.n	8014996 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	8b5b      	ldrh	r3, [r3, #26]
 801498c:	f023 0303 	bic.w	r3, r3, #3
 8014990:	b29a      	uxth	r2, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801499a:	4618      	mov	r0, r3
 801499c:	371c      	adds	r7, #28
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd90      	pop	{r4, r7, pc}
 80149a2:	bf00      	nop
 80149a4:	0801cdd4 	.word	0x0801cdd4
 80149a8:	0801d590 	.word	0x0801d590
 80149ac:	0801ce28 	.word	0x0801ce28

080149b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80149b0:	b590      	push	{r4, r7, lr}
 80149b2:	b087      	sub	sp, #28
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149b8:	2300      	movs	r3, #0
 80149ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <tcp_keepalive+0x20>
 80149c2:	4b18      	ldr	r3, [pc, #96]	; (8014a24 <tcp_keepalive+0x74>)
 80149c4:	f640 0224 	movw	r2, #2084	; 0x824
 80149c8:	4917      	ldr	r1, [pc, #92]	; (8014a28 <tcp_keepalive+0x78>)
 80149ca:	4818      	ldr	r0, [pc, #96]	; (8014a2c <tcp_keepalive+0x7c>)
 80149cc:	f003 f8e0 	bl	8017b90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80149d0:	7dfb      	ldrb	r3, [r7, #23]
 80149d2:	b29c      	uxth	r4, r3
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149d8:	3b01      	subs	r3, #1
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f8 f875 	bl	800caca <lwip_htonl>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2200      	movs	r2, #0
 80149e4:	4621      	mov	r1, r4
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f7ff fe56 	bl	8014698 <tcp_output_alloc_header>
 80149ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d102      	bne.n	80149fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80149f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149f8:	e010      	b.n	8014a1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
 80149fc:	2200      	movs	r2, #0
 80149fe:	6939      	ldr	r1, [r7, #16]
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7ff fe87 	bl	8014714 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a06:	687a      	ldr	r2, [r7, #4]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	3304      	adds	r3, #4
 8014a0c:	6939      	ldr	r1, [r7, #16]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff fec0 	bl	8014794 <tcp_output_control_segment>
 8014a14:	4603      	mov	r3, r0
 8014a16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	371c      	adds	r7, #28
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd90      	pop	{r4, r7, pc}
 8014a24:	0801cdd4 	.word	0x0801cdd4
 8014a28:	0801d5b0 	.word	0x0801d5b0
 8014a2c:	0801ce28 	.word	0x0801ce28

08014a30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014a30:	b590      	push	{r4, r7, lr}
 8014a32:	b08b      	sub	sp, #44	; 0x2c
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a38:	2300      	movs	r3, #0
 8014a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d106      	bne.n	8014a52 <tcp_zero_window_probe+0x22>
 8014a44:	4b4c      	ldr	r3, [pc, #304]	; (8014b78 <tcp_zero_window_probe+0x148>)
 8014a46:	f640 024f 	movw	r2, #2127	; 0x84f
 8014a4a:	494c      	ldr	r1, [pc, #304]	; (8014b7c <tcp_zero_window_probe+0x14c>)
 8014a4c:	484c      	ldr	r0, [pc, #304]	; (8014b80 <tcp_zero_window_probe+0x150>)
 8014a4e:	f003 f89f 	bl	8017b90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a58:	6a3b      	ldr	r3, [r7, #32]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d101      	bne.n	8014a62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e086      	b.n	8014b70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a68:	2bff      	cmp	r3, #255	; 0xff
 8014a6a:	d007      	beq.n	8014a7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a72:	3301      	adds	r3, #1
 8014a74:	b2da      	uxtb	r2, r3
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014a7c:	6a3b      	ldr	r3, [r7, #32]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	899b      	ldrh	r3, [r3, #12]
 8014a82:	b29b      	uxth	r3, r3
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7f8 f80b 	bl	800caa0 <lwip_htons>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d005      	beq.n	8014aa2 <tcp_zero_window_probe+0x72>
 8014a96:	6a3b      	ldr	r3, [r7, #32]
 8014a98:	891b      	ldrh	r3, [r3, #8]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d101      	bne.n	8014aa2 <tcp_zero_window_probe+0x72>
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	e000      	b.n	8014aa4 <tcp_zero_window_probe+0x74>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014aa6:	7ffb      	ldrb	r3, [r7, #31]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	bf0c      	ite	eq
 8014aac:	2301      	moveq	r3, #1
 8014aae:	2300      	movne	r3, #0
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ab8:	b299      	uxth	r1, r3
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	68db      	ldr	r3, [r3, #12]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	8bba      	ldrh	r2, [r7, #28]
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f7ff fde8 	bl	8014698 <tcp_output_alloc_header>
 8014ac8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d102      	bne.n	8014ad6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ad4:	e04c      	b.n	8014b70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014ad6:	69bb      	ldr	r3, [r7, #24]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014adc:	7ffb      	ldrb	r3, [r7, #31]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d011      	beq.n	8014b06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	b21b      	sxth	r3, r3
 8014aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014aee:	b21c      	sxth	r4, r3
 8014af0:	2011      	movs	r0, #17
 8014af2:	f7f7 ffd5 	bl	800caa0 <lwip_htons>
 8014af6:	4603      	mov	r3, r0
 8014af8:	b21b      	sxth	r3, r3
 8014afa:	4323      	orrs	r3, r4
 8014afc:	b21b      	sxth	r3, r3
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	819a      	strh	r2, [r3, #12]
 8014b04:	e010      	b.n	8014b28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014b06:	69bb      	ldr	r3, [r7, #24]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	3314      	adds	r3, #20
 8014b0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014b0e:	6a3b      	ldr	r3, [r7, #32]
 8014b10:	6858      	ldr	r0, [r3, #4]
 8014b12:	6a3b      	ldr	r3, [r7, #32]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	891a      	ldrh	r2, [r3, #8]
 8014b18:	6a3b      	ldr	r3, [r7, #32]
 8014b1a:	891b      	ldrh	r3, [r3, #8]
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	2201      	movs	r2, #1
 8014b22:	6939      	ldr	r1, [r7, #16]
 8014b24:	f7f9 feb8 	bl	800e898 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014b28:	6a3b      	ldr	r3, [r7, #32]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7f7 ffcb 	bl	800caca <lwip_htonl>
 8014b34:	4603      	mov	r3, r0
 8014b36:	3301      	adds	r3, #1
 8014b38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	1ad3      	subs	r3, r2, r3
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	da02      	bge.n	8014b4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	68fa      	ldr	r2, [r7, #12]
 8014b4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b50:	2200      	movs	r2, #0
 8014b52:	69b9      	ldr	r1, [r7, #24]
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f7ff fddd 	bl	8014714 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	3304      	adds	r3, #4
 8014b60:	69b9      	ldr	r1, [r7, #24]
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7ff fe16 	bl	8014794 <tcp_output_control_segment>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	372c      	adds	r7, #44	; 0x2c
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd90      	pop	{r4, r7, pc}
 8014b78:	0801cdd4 	.word	0x0801cdd4
 8014b7c:	0801d5cc 	.word	0x0801d5cc
 8014b80:	0801ce28 	.word	0x0801ce28

08014b84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014b8c:	f7f9 ff72 	bl	800ea74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014b90:	4b0a      	ldr	r3, [pc, #40]	; (8014bbc <tcpip_tcp_timer+0x38>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d103      	bne.n	8014ba0 <tcpip_tcp_timer+0x1c>
 8014b98:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <tcpip_tcp_timer+0x3c>)
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d005      	beq.n	8014bac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	4908      	ldr	r1, [pc, #32]	; (8014bc4 <tcpip_tcp_timer+0x40>)
 8014ba4:	20fa      	movs	r0, #250	; 0xfa
 8014ba6:	f000 f8f3 	bl	8014d90 <sys_timeout>
 8014baa:	e003      	b.n	8014bb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014bac:	4b06      	ldr	r3, [pc, #24]	; (8014bc8 <tcpip_tcp_timer+0x44>)
 8014bae:	2200      	movs	r2, #0
 8014bb0:	601a      	str	r2, [r3, #0]
  }
}
 8014bb2:	bf00      	nop
 8014bb4:	bf00      	nop
 8014bb6:	3708      	adds	r7, #8
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	20011ba4 	.word	0x20011ba4
 8014bc0:	20011ba8 	.word	0x20011ba8
 8014bc4:	08014b85 	.word	0x08014b85
 8014bc8:	20011bf0 	.word	0x20011bf0

08014bcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014bd0:	4b0a      	ldr	r3, [pc, #40]	; (8014bfc <tcp_timer_needed+0x30>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d10f      	bne.n	8014bf8 <tcp_timer_needed+0x2c>
 8014bd8:	4b09      	ldr	r3, [pc, #36]	; (8014c00 <tcp_timer_needed+0x34>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d103      	bne.n	8014be8 <tcp_timer_needed+0x1c>
 8014be0:	4b08      	ldr	r3, [pc, #32]	; (8014c04 <tcp_timer_needed+0x38>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d007      	beq.n	8014bf8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014be8:	4b04      	ldr	r3, [pc, #16]	; (8014bfc <tcp_timer_needed+0x30>)
 8014bea:	2201      	movs	r2, #1
 8014bec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014bee:	2200      	movs	r2, #0
 8014bf0:	4905      	ldr	r1, [pc, #20]	; (8014c08 <tcp_timer_needed+0x3c>)
 8014bf2:	20fa      	movs	r0, #250	; 0xfa
 8014bf4:	f000 f8cc 	bl	8014d90 <sys_timeout>
  }
}
 8014bf8:	bf00      	nop
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20011bf0 	.word	0x20011bf0
 8014c00:	20011ba4 	.word	0x20011ba4
 8014c04:	20011ba8 	.word	0x20011ba8
 8014c08:	08014b85 	.word	0x08014b85

08014c0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b086      	sub	sp, #24
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014c18:	2009      	movs	r0, #9
 8014c1a:	f7f8 fd31 	bl	800d680 <memp_malloc>
 8014c1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d109      	bne.n	8014c3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d151      	bne.n	8014cd0 <sys_timeout_abs+0xc4>
 8014c2c:	4b2a      	ldr	r3, [pc, #168]	; (8014cd8 <sys_timeout_abs+0xcc>)
 8014c2e:	22be      	movs	r2, #190	; 0xbe
 8014c30:	492a      	ldr	r1, [pc, #168]	; (8014cdc <sys_timeout_abs+0xd0>)
 8014c32:	482b      	ldr	r0, [pc, #172]	; (8014ce0 <sys_timeout_abs+0xd4>)
 8014c34:	f002 ffac 	bl	8017b90 <iprintf>
    return;
 8014c38:	e04a      	b.n	8014cd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014c3a:	693b      	ldr	r3, [r7, #16]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	68ba      	ldr	r2, [r7, #8]
 8014c44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	68fa      	ldr	r2, [r7, #12]
 8014c50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014c52:	4b24      	ldr	r3, [pc, #144]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d103      	bne.n	8014c62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014c5a:	4a22      	ldr	r2, [pc, #136]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	6013      	str	r3, [r2, #0]
    return;
 8014c60:	e037      	b.n	8014cd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	685a      	ldr	r2, [r3, #4]
 8014c66:	4b1f      	ldr	r3, [pc, #124]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	1ad3      	subs	r3, r2, r3
 8014c6e:	0fdb      	lsrs	r3, r3, #31
 8014c70:	f003 0301 	and.w	r3, r3, #1
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d007      	beq.n	8014c8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014c7a:	4b1a      	ldr	r3, [pc, #104]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014c82:	4a18      	ldr	r2, [pc, #96]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	6013      	str	r3, [r2, #0]
 8014c88:	e023      	b.n	8014cd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c8a:	4b16      	ldr	r3, [pc, #88]	; (8014ce4 <sys_timeout_abs+0xd8>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	617b      	str	r3, [r7, #20]
 8014c90:	e01a      	b.n	8014cc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d00b      	beq.n	8014cb2 <sys_timeout_abs+0xa6>
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	685a      	ldr	r2, [r3, #4]
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	0fdb      	lsrs	r3, r3, #31
 8014ca8:	f003 0301 	and.w	r3, r3, #1
 8014cac:	b2db      	uxtb	r3, r3
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d007      	beq.n	8014cc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014cba:	697b      	ldr	r3, [r7, #20]
 8014cbc:	693a      	ldr	r2, [r7, #16]
 8014cbe:	601a      	str	r2, [r3, #0]
        break;
 8014cc0:	e007      	b.n	8014cd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014cc2:	697b      	ldr	r3, [r7, #20]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	617b      	str	r3, [r7, #20]
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d1e1      	bne.n	8014c92 <sys_timeout_abs+0x86>
 8014cce:	e000      	b.n	8014cd2 <sys_timeout_abs+0xc6>
    return;
 8014cd0:	bf00      	nop
      }
    }
  }
}
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	0801d5f0 	.word	0x0801d5f0
 8014cdc:	0801d624 	.word	0x0801d624
 8014ce0:	0801d664 	.word	0x0801d664
 8014ce4:	20011be8 	.word	0x20011be8

08014ce8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b086      	sub	sp, #24
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	4798      	blx	r3

  now = sys_now();
 8014cfa:	f7f1 fb35 	bl	8006368 <sys_now>
 8014cfe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	4b0f      	ldr	r3, [pc, #60]	; (8014d44 <lwip_cyclic_timer+0x5c>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	4413      	add	r3, r2
 8014d0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	1ad3      	subs	r3, r2, r3
 8014d12:	0fdb      	lsrs	r3, r3, #31
 8014d14:	f003 0301 	and.w	r3, r3, #1
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d009      	beq.n	8014d32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	4413      	add	r3, r2
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	4907      	ldr	r1, [pc, #28]	; (8014d48 <lwip_cyclic_timer+0x60>)
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7ff ff6e 	bl	8014c0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014d30:	e004      	b.n	8014d3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014d32:	687a      	ldr	r2, [r7, #4]
 8014d34:	4904      	ldr	r1, [pc, #16]	; (8014d48 <lwip_cyclic_timer+0x60>)
 8014d36:	68f8      	ldr	r0, [r7, #12]
 8014d38:	f7ff ff68 	bl	8014c0c <sys_timeout_abs>
}
 8014d3c:	bf00      	nop
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}
 8014d44:	20011bec 	.word	0x20011bec
 8014d48:	08014ce9 	.word	0x08014ce9

08014d4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b082      	sub	sp, #8
 8014d50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d52:	2301      	movs	r3, #1
 8014d54:	607b      	str	r3, [r7, #4]
 8014d56:	e00e      	b.n	8014d76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014d58:	4a0b      	ldr	r2, [pc, #44]	; (8014d88 <sys_timeouts_init+0x3c>)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	4a08      	ldr	r2, [pc, #32]	; (8014d88 <sys_timeouts_init+0x3c>)
 8014d66:	4413      	add	r3, r2
 8014d68:	461a      	mov	r2, r3
 8014d6a:	4908      	ldr	r1, [pc, #32]	; (8014d8c <sys_timeouts_init+0x40>)
 8014d6c:	f000 f810 	bl	8014d90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	3301      	adds	r3, #1
 8014d74:	607b      	str	r3, [r7, #4]
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2b02      	cmp	r3, #2
 8014d7a:	d9ed      	bls.n	8014d58 <sys_timeouts_init+0xc>
  }
}
 8014d7c:	bf00      	nop
 8014d7e:	bf00      	nop
 8014d80:	3708      	adds	r7, #8
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}
 8014d86:	bf00      	nop
 8014d88:	0801df58 	.word	0x0801df58
 8014d8c:	08014ce9 	.word	0x08014ce9

08014d90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	60b9      	str	r1, [r7, #8]
 8014d9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014da2:	d306      	bcc.n	8014db2 <sys_timeout+0x22>
 8014da4:	4b0a      	ldr	r3, [pc, #40]	; (8014dd0 <sys_timeout+0x40>)
 8014da6:	f240 1229 	movw	r2, #297	; 0x129
 8014daa:	490a      	ldr	r1, [pc, #40]	; (8014dd4 <sys_timeout+0x44>)
 8014dac:	480a      	ldr	r0, [pc, #40]	; (8014dd8 <sys_timeout+0x48>)
 8014dae:	f002 feef 	bl	8017b90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014db2:	f7f1 fad9 	bl	8006368 <sys_now>
 8014db6:	4602      	mov	r2, r0
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	4413      	add	r3, r2
 8014dbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014dbe:	687a      	ldr	r2, [r7, #4]
 8014dc0:	68b9      	ldr	r1, [r7, #8]
 8014dc2:	6978      	ldr	r0, [r7, #20]
 8014dc4:	f7ff ff22 	bl	8014c0c <sys_timeout_abs>
#endif
}
 8014dc8:	bf00      	nop
 8014dca:	3718      	adds	r7, #24
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}
 8014dd0:	0801d5f0 	.word	0x0801d5f0
 8014dd4:	0801d68c 	.word	0x0801d68c
 8014dd8:	0801d664 	.word	0x0801d664

08014ddc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014de2:	f7f1 fac1 	bl	8006368 <sys_now>
 8014de6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014de8:	4b17      	ldr	r3, [pc, #92]	; (8014e48 <sys_check_timeouts+0x6c>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d022      	beq.n	8014e3a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	68fa      	ldr	r2, [r7, #12]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	0fdb      	lsrs	r3, r3, #31
 8014dfe:	f003 0301 	and.w	r3, r3, #1
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d11a      	bne.n	8014e3e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	4a0e      	ldr	r2, [pc, #56]	; (8014e48 <sys_check_timeouts+0x6c>)
 8014e0e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	689b      	ldr	r3, [r3, #8]
 8014e14:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	68db      	ldr	r3, [r3, #12]
 8014e1a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	4a0a      	ldr	r2, [pc, #40]	; (8014e4c <sys_check_timeouts+0x70>)
 8014e22:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014e24:	68b9      	ldr	r1, [r7, #8]
 8014e26:	2009      	movs	r0, #9
 8014e28:	f7f8 fca0 	bl	800d76c <memp_free>
    if (handler != NULL) {
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d0da      	beq.n	8014de8 <sys_check_timeouts+0xc>
      handler(arg);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6838      	ldr	r0, [r7, #0]
 8014e36:	4798      	blx	r3
  do {
 8014e38:	e7d6      	b.n	8014de8 <sys_check_timeouts+0xc>
      return;
 8014e3a:	bf00      	nop
 8014e3c:	e000      	b.n	8014e40 <sys_check_timeouts+0x64>
      return;
 8014e3e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014e40:	3710      	adds	r7, #16
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}
 8014e46:	bf00      	nop
 8014e48:	20011be8 	.word	0x20011be8
 8014e4c:	20011bec 	.word	0x20011bec

08014e50 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014e56:	4b16      	ldr	r3, [pc, #88]	; (8014eb0 <sys_timeouts_sleeptime+0x60>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d102      	bne.n	8014e64 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e62:	e020      	b.n	8014ea6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014e64:	f7f1 fa80 	bl	8006368 <sys_now>
 8014e68:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014e6a:	4b11      	ldr	r3, [pc, #68]	; (8014eb0 <sys_timeouts_sleeptime+0x60>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	685a      	ldr	r2, [r3, #4]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	1ad3      	subs	r3, r2, r3
 8014e74:	0fdb      	lsrs	r3, r3, #31
 8014e76:	f003 0301 	and.w	r3, r3, #1
 8014e7a:	b2db      	uxtb	r3, r3
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d001      	beq.n	8014e84 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014e80:	2300      	movs	r3, #0
 8014e82:	e010      	b.n	8014ea6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014e84:	4b0a      	ldr	r3, [pc, #40]	; (8014eb0 <sys_timeouts_sleeptime+0x60>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	685a      	ldr	r2, [r3, #4]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	1ad3      	subs	r3, r2, r3
 8014e8e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	da06      	bge.n	8014ea4 <sys_timeouts_sleeptime+0x54>
 8014e96:	4b07      	ldr	r3, [pc, #28]	; (8014eb4 <sys_timeouts_sleeptime+0x64>)
 8014e98:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014e9c:	4906      	ldr	r1, [pc, #24]	; (8014eb8 <sys_timeouts_sleeptime+0x68>)
 8014e9e:	4807      	ldr	r0, [pc, #28]	; (8014ebc <sys_timeouts_sleeptime+0x6c>)
 8014ea0:	f002 fe76 	bl	8017b90 <iprintf>
    return ret;
 8014ea4:	683b      	ldr	r3, [r7, #0]
  }
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	20011be8 	.word	0x20011be8
 8014eb4:	0801d5f0 	.word	0x0801d5f0
 8014eb8:	0801d6c4 	.word	0x0801d6c4
 8014ebc:	0801d664 	.word	0x0801d664

08014ec0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ec8:	4915      	ldr	r1, [pc, #84]	; (8014f20 <etharp_free_entry+0x60>)
 8014eca:	687a      	ldr	r2, [r7, #4]
 8014ecc:	4613      	mov	r3, r2
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	440b      	add	r3, r1
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d013      	beq.n	8014f04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014edc:	4910      	ldr	r1, [pc, #64]	; (8014f20 <etharp_free_entry+0x60>)
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	4613      	mov	r3, r2
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	4413      	add	r3, r2
 8014ee6:	00db      	lsls	r3, r3, #3
 8014ee8:	440b      	add	r3, r1
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7f9 fadd 	bl	800e4ac <pbuf_free>
    arp_table[i].q = NULL;
 8014ef2:	490b      	ldr	r1, [pc, #44]	; (8014f20 <etharp_free_entry+0x60>)
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	005b      	lsls	r3, r3, #1
 8014efa:	4413      	add	r3, r2
 8014efc:	00db      	lsls	r3, r3, #3
 8014efe:	440b      	add	r3, r1
 8014f00:	2200      	movs	r2, #0
 8014f02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014f04:	4906      	ldr	r1, [pc, #24]	; (8014f20 <etharp_free_entry+0x60>)
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	4613      	mov	r3, r2
 8014f0a:	005b      	lsls	r3, r3, #1
 8014f0c:	4413      	add	r3, r2
 8014f0e:	00db      	lsls	r3, r3, #3
 8014f10:	440b      	add	r3, r1
 8014f12:	3314      	adds	r3, #20
 8014f14:	2200      	movs	r2, #0
 8014f16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	20011bf4 	.word	0x20011bf4

08014f24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	607b      	str	r3, [r7, #4]
 8014f2e:	e096      	b.n	801505e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014f30:	494f      	ldr	r1, [pc, #316]	; (8015070 <etharp_tmr+0x14c>)
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	4613      	mov	r3, r2
 8014f36:	005b      	lsls	r3, r3, #1
 8014f38:	4413      	add	r3, r2
 8014f3a:	00db      	lsls	r3, r3, #3
 8014f3c:	440b      	add	r3, r1
 8014f3e:	3314      	adds	r3, #20
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014f44:	78fb      	ldrb	r3, [r7, #3]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	f000 8086 	beq.w	8015058 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014f4c:	4948      	ldr	r1, [pc, #288]	; (8015070 <etharp_tmr+0x14c>)
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	3312      	adds	r3, #18
 8014f5c:	881b      	ldrh	r3, [r3, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	b298      	uxth	r0, r3
 8014f62:	4943      	ldr	r1, [pc, #268]	; (8015070 <etharp_tmr+0x14c>)
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	4613      	mov	r3, r2
 8014f68:	005b      	lsls	r3, r3, #1
 8014f6a:	4413      	add	r3, r2
 8014f6c:	00db      	lsls	r3, r3, #3
 8014f6e:	440b      	add	r3, r1
 8014f70:	3312      	adds	r3, #18
 8014f72:	4602      	mov	r2, r0
 8014f74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014f76:	493e      	ldr	r1, [pc, #248]	; (8015070 <etharp_tmr+0x14c>)
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	005b      	lsls	r3, r3, #1
 8014f7e:	4413      	add	r3, r2
 8014f80:	00db      	lsls	r3, r3, #3
 8014f82:	440b      	add	r3, r1
 8014f84:	3312      	adds	r3, #18
 8014f86:	881b      	ldrh	r3, [r3, #0]
 8014f88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014f8c:	d215      	bcs.n	8014fba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014f8e:	4938      	ldr	r1, [pc, #224]	; (8015070 <etharp_tmr+0x14c>)
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	4613      	mov	r3, r2
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	4413      	add	r3, r2
 8014f98:	00db      	lsls	r3, r3, #3
 8014f9a:	440b      	add	r3, r1
 8014f9c:	3314      	adds	r3, #20
 8014f9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d10e      	bne.n	8014fc2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014fa4:	4932      	ldr	r1, [pc, #200]	; (8015070 <etharp_tmr+0x14c>)
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	4613      	mov	r3, r2
 8014faa:	005b      	lsls	r3, r3, #1
 8014fac:	4413      	add	r3, r2
 8014fae:	00db      	lsls	r3, r3, #3
 8014fb0:	440b      	add	r3, r1
 8014fb2:	3312      	adds	r3, #18
 8014fb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014fb6:	2b04      	cmp	r3, #4
 8014fb8:	d903      	bls.n	8014fc2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f7ff ff80 	bl	8014ec0 <etharp_free_entry>
 8014fc0:	e04a      	b.n	8015058 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014fc2:	492b      	ldr	r1, [pc, #172]	; (8015070 <etharp_tmr+0x14c>)
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	4613      	mov	r3, r2
 8014fc8:	005b      	lsls	r3, r3, #1
 8014fca:	4413      	add	r3, r2
 8014fcc:	00db      	lsls	r3, r3, #3
 8014fce:	440b      	add	r3, r1
 8014fd0:	3314      	adds	r3, #20
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	2b03      	cmp	r3, #3
 8014fd6:	d10a      	bne.n	8014fee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014fd8:	4925      	ldr	r1, [pc, #148]	; (8015070 <etharp_tmr+0x14c>)
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	4613      	mov	r3, r2
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	4413      	add	r3, r2
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	440b      	add	r3, r1
 8014fe6:	3314      	adds	r3, #20
 8014fe8:	2204      	movs	r2, #4
 8014fea:	701a      	strb	r2, [r3, #0]
 8014fec:	e034      	b.n	8015058 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014fee:	4920      	ldr	r1, [pc, #128]	; (8015070 <etharp_tmr+0x14c>)
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	005b      	lsls	r3, r3, #1
 8014ff6:	4413      	add	r3, r2
 8014ff8:	00db      	lsls	r3, r3, #3
 8014ffa:	440b      	add	r3, r1
 8014ffc:	3314      	adds	r3, #20
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	2b04      	cmp	r3, #4
 8015002:	d10a      	bne.n	801501a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015004:	491a      	ldr	r1, [pc, #104]	; (8015070 <etharp_tmr+0x14c>)
 8015006:	687a      	ldr	r2, [r7, #4]
 8015008:	4613      	mov	r3, r2
 801500a:	005b      	lsls	r3, r3, #1
 801500c:	4413      	add	r3, r2
 801500e:	00db      	lsls	r3, r3, #3
 8015010:	440b      	add	r3, r1
 8015012:	3314      	adds	r3, #20
 8015014:	2202      	movs	r2, #2
 8015016:	701a      	strb	r2, [r3, #0]
 8015018:	e01e      	b.n	8015058 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801501a:	4915      	ldr	r1, [pc, #84]	; (8015070 <etharp_tmr+0x14c>)
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	4613      	mov	r3, r2
 8015020:	005b      	lsls	r3, r3, #1
 8015022:	4413      	add	r3, r2
 8015024:	00db      	lsls	r3, r3, #3
 8015026:	440b      	add	r3, r1
 8015028:	3314      	adds	r3, #20
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	2b01      	cmp	r3, #1
 801502e:	d113      	bne.n	8015058 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015030:	490f      	ldr	r1, [pc, #60]	; (8015070 <etharp_tmr+0x14c>)
 8015032:	687a      	ldr	r2, [r7, #4]
 8015034:	4613      	mov	r3, r2
 8015036:	005b      	lsls	r3, r3, #1
 8015038:	4413      	add	r3, r2
 801503a:	00db      	lsls	r3, r3, #3
 801503c:	440b      	add	r3, r1
 801503e:	3308      	adds	r3, #8
 8015040:	6818      	ldr	r0, [r3, #0]
 8015042:	687a      	ldr	r2, [r7, #4]
 8015044:	4613      	mov	r3, r2
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	4413      	add	r3, r2
 801504a:	00db      	lsls	r3, r3, #3
 801504c:	4a08      	ldr	r2, [pc, #32]	; (8015070 <etharp_tmr+0x14c>)
 801504e:	4413      	add	r3, r2
 8015050:	3304      	adds	r3, #4
 8015052:	4619      	mov	r1, r3
 8015054:	f000 fe6e 	bl	8015d34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3301      	adds	r3, #1
 801505c:	607b      	str	r3, [r7, #4]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2b09      	cmp	r3, #9
 8015062:	f77f af65 	ble.w	8014f30 <etharp_tmr+0xc>
      }
    }
  }
}
 8015066:	bf00      	nop
 8015068:	bf00      	nop
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	20011bf4 	.word	0x20011bf4

08015074 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b08a      	sub	sp, #40	; 0x28
 8015078:	af00      	add	r7, sp, #0
 801507a:	60f8      	str	r0, [r7, #12]
 801507c:	460b      	mov	r3, r1
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015082:	230a      	movs	r3, #10
 8015084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015086:	230a      	movs	r3, #10
 8015088:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801508a:	230a      	movs	r3, #10
 801508c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801508e:	2300      	movs	r3, #0
 8015090:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015092:	230a      	movs	r3, #10
 8015094:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015096:	2300      	movs	r3, #0
 8015098:	83bb      	strh	r3, [r7, #28]
 801509a:	2300      	movs	r3, #0
 801509c:	837b      	strh	r3, [r7, #26]
 801509e:	2300      	movs	r3, #0
 80150a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150a2:	2300      	movs	r3, #0
 80150a4:	843b      	strh	r3, [r7, #32]
 80150a6:	e0ae      	b.n	8015206 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80150a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150ac:	49a6      	ldr	r1, [pc, #664]	; (8015348 <etharp_find_entry+0x2d4>)
 80150ae:	4613      	mov	r3, r2
 80150b0:	005b      	lsls	r3, r3, #1
 80150b2:	4413      	add	r3, r2
 80150b4:	00db      	lsls	r3, r3, #3
 80150b6:	440b      	add	r3, r1
 80150b8:	3314      	adds	r3, #20
 80150ba:	781b      	ldrb	r3, [r3, #0]
 80150bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80150be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80150c2:	2b0a      	cmp	r3, #10
 80150c4:	d105      	bne.n	80150d2 <etharp_find_entry+0x5e>
 80150c6:	7dfb      	ldrb	r3, [r7, #23]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d102      	bne.n	80150d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80150cc:	8c3b      	ldrh	r3, [r7, #32]
 80150ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80150d0:	e095      	b.n	80151fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80150d2:	7dfb      	ldrb	r3, [r7, #23]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f000 8092 	beq.w	80151fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80150da:	7dfb      	ldrb	r3, [r7, #23]
 80150dc:	2b01      	cmp	r3, #1
 80150de:	d009      	beq.n	80150f4 <etharp_find_entry+0x80>
 80150e0:	7dfb      	ldrb	r3, [r7, #23]
 80150e2:	2b01      	cmp	r3, #1
 80150e4:	d806      	bhi.n	80150f4 <etharp_find_entry+0x80>
 80150e6:	4b99      	ldr	r3, [pc, #612]	; (801534c <etharp_find_entry+0x2d8>)
 80150e8:	f240 1223 	movw	r2, #291	; 0x123
 80150ec:	4998      	ldr	r1, [pc, #608]	; (8015350 <etharp_find_entry+0x2dc>)
 80150ee:	4899      	ldr	r0, [pc, #612]	; (8015354 <etharp_find_entry+0x2e0>)
 80150f0:	f002 fd4e 	bl	8017b90 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d020      	beq.n	801513c <etharp_find_entry+0xc8>
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	6819      	ldr	r1, [r3, #0]
 80150fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015102:	4891      	ldr	r0, [pc, #580]	; (8015348 <etharp_find_entry+0x2d4>)
 8015104:	4613      	mov	r3, r2
 8015106:	005b      	lsls	r3, r3, #1
 8015108:	4413      	add	r3, r2
 801510a:	00db      	lsls	r3, r3, #3
 801510c:	4403      	add	r3, r0
 801510e:	3304      	adds	r3, #4
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	4299      	cmp	r1, r3
 8015114:	d112      	bne.n	801513c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d00c      	beq.n	8015136 <etharp_find_entry+0xc2>
 801511c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015120:	4989      	ldr	r1, [pc, #548]	; (8015348 <etharp_find_entry+0x2d4>)
 8015122:	4613      	mov	r3, r2
 8015124:	005b      	lsls	r3, r3, #1
 8015126:	4413      	add	r3, r2
 8015128:	00db      	lsls	r3, r3, #3
 801512a:	440b      	add	r3, r1
 801512c:	3308      	adds	r3, #8
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	429a      	cmp	r2, r3
 8015134:	d102      	bne.n	801513c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015136:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801513a:	e100      	b.n	801533e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801513c:	7dfb      	ldrb	r3, [r7, #23]
 801513e:	2b01      	cmp	r3, #1
 8015140:	d140      	bne.n	80151c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015142:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015146:	4980      	ldr	r1, [pc, #512]	; (8015348 <etharp_find_entry+0x2d4>)
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d01a      	beq.n	801518e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015158:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801515c:	497a      	ldr	r1, [pc, #488]	; (8015348 <etharp_find_entry+0x2d4>)
 801515e:	4613      	mov	r3, r2
 8015160:	005b      	lsls	r3, r3, #1
 8015162:	4413      	add	r3, r2
 8015164:	00db      	lsls	r3, r3, #3
 8015166:	440b      	add	r3, r1
 8015168:	3312      	adds	r3, #18
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	8bba      	ldrh	r2, [r7, #28]
 801516e:	429a      	cmp	r2, r3
 8015170:	d845      	bhi.n	80151fe <etharp_find_entry+0x18a>
            old_queue = i;
 8015172:	8c3b      	ldrh	r3, [r7, #32]
 8015174:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015176:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801517a:	4973      	ldr	r1, [pc, #460]	; (8015348 <etharp_find_entry+0x2d4>)
 801517c:	4613      	mov	r3, r2
 801517e:	005b      	lsls	r3, r3, #1
 8015180:	4413      	add	r3, r2
 8015182:	00db      	lsls	r3, r3, #3
 8015184:	440b      	add	r3, r1
 8015186:	3312      	adds	r3, #18
 8015188:	881b      	ldrh	r3, [r3, #0]
 801518a:	83bb      	strh	r3, [r7, #28]
 801518c:	e037      	b.n	80151fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801518e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015192:	496d      	ldr	r1, [pc, #436]	; (8015348 <etharp_find_entry+0x2d4>)
 8015194:	4613      	mov	r3, r2
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	4413      	add	r3, r2
 801519a:	00db      	lsls	r3, r3, #3
 801519c:	440b      	add	r3, r1
 801519e:	3312      	adds	r3, #18
 80151a0:	881b      	ldrh	r3, [r3, #0]
 80151a2:	8b7a      	ldrh	r2, [r7, #26]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d82a      	bhi.n	80151fe <etharp_find_entry+0x18a>
            old_pending = i;
 80151a8:	8c3b      	ldrh	r3, [r7, #32]
 80151aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80151ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151b0:	4965      	ldr	r1, [pc, #404]	; (8015348 <etharp_find_entry+0x2d4>)
 80151b2:	4613      	mov	r3, r2
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	4413      	add	r3, r2
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	440b      	add	r3, r1
 80151bc:	3312      	adds	r3, #18
 80151be:	881b      	ldrh	r3, [r3, #0]
 80151c0:	837b      	strh	r3, [r7, #26]
 80151c2:	e01c      	b.n	80151fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80151c4:	7dfb      	ldrb	r3, [r7, #23]
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	d919      	bls.n	80151fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80151ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ce:	495e      	ldr	r1, [pc, #376]	; (8015348 <etharp_find_entry+0x2d4>)
 80151d0:	4613      	mov	r3, r2
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	4413      	add	r3, r2
 80151d6:	00db      	lsls	r3, r3, #3
 80151d8:	440b      	add	r3, r1
 80151da:	3312      	adds	r3, #18
 80151dc:	881b      	ldrh	r3, [r3, #0]
 80151de:	8b3a      	ldrh	r2, [r7, #24]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d80c      	bhi.n	80151fe <etharp_find_entry+0x18a>
            old_stable = i;
 80151e4:	8c3b      	ldrh	r3, [r7, #32]
 80151e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80151e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80151ec:	4956      	ldr	r1, [pc, #344]	; (8015348 <etharp_find_entry+0x2d4>)
 80151ee:	4613      	mov	r3, r2
 80151f0:	005b      	lsls	r3, r3, #1
 80151f2:	4413      	add	r3, r2
 80151f4:	00db      	lsls	r3, r3, #3
 80151f6:	440b      	add	r3, r1
 80151f8:	3312      	adds	r3, #18
 80151fa:	881b      	ldrh	r3, [r3, #0]
 80151fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151fe:	8c3b      	ldrh	r3, [r7, #32]
 8015200:	3301      	adds	r3, #1
 8015202:	b29b      	uxth	r3, r3
 8015204:	843b      	strh	r3, [r7, #32]
 8015206:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801520a:	2b09      	cmp	r3, #9
 801520c:	f77f af4c 	ble.w	80150a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015210:	7afb      	ldrb	r3, [r7, #11]
 8015212:	f003 0302 	and.w	r3, r3, #2
 8015216:	2b00      	cmp	r3, #0
 8015218:	d108      	bne.n	801522c <etharp_find_entry+0x1b8>
 801521a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801521e:	2b0a      	cmp	r3, #10
 8015220:	d107      	bne.n	8015232 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015222:	7afb      	ldrb	r3, [r7, #11]
 8015224:	f003 0301 	and.w	r3, r3, #1
 8015228:	2b00      	cmp	r3, #0
 801522a:	d102      	bne.n	8015232 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801522c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015230:	e085      	b.n	801533e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015232:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015236:	2b09      	cmp	r3, #9
 8015238:	dc02      	bgt.n	8015240 <etharp_find_entry+0x1cc>
    i = empty;
 801523a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801523c:	843b      	strh	r3, [r7, #32]
 801523e:	e039      	b.n	80152b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015240:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015244:	2b09      	cmp	r3, #9
 8015246:	dc14      	bgt.n	8015272 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801524a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801524c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015250:	493d      	ldr	r1, [pc, #244]	; (8015348 <etharp_find_entry+0x2d4>)
 8015252:	4613      	mov	r3, r2
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	4413      	add	r3, r2
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	440b      	add	r3, r1
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d018      	beq.n	8015294 <etharp_find_entry+0x220>
 8015262:	4b3a      	ldr	r3, [pc, #232]	; (801534c <etharp_find_entry+0x2d8>)
 8015264:	f240 126d 	movw	r2, #365	; 0x16d
 8015268:	493b      	ldr	r1, [pc, #236]	; (8015358 <etharp_find_entry+0x2e4>)
 801526a:	483a      	ldr	r0, [pc, #232]	; (8015354 <etharp_find_entry+0x2e0>)
 801526c:	f002 fc90 	bl	8017b90 <iprintf>
 8015270:	e010      	b.n	8015294 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015272:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015276:	2b09      	cmp	r3, #9
 8015278:	dc02      	bgt.n	8015280 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801527a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801527c:	843b      	strh	r3, [r7, #32]
 801527e:	e009      	b.n	8015294 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015280:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015284:	2b09      	cmp	r3, #9
 8015286:	dc02      	bgt.n	801528e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015288:	8bfb      	ldrh	r3, [r7, #30]
 801528a:	843b      	strh	r3, [r7, #32]
 801528c:	e002      	b.n	8015294 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801528e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015292:	e054      	b.n	801533e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015294:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015298:	2b09      	cmp	r3, #9
 801529a:	dd06      	ble.n	80152aa <etharp_find_entry+0x236>
 801529c:	4b2b      	ldr	r3, [pc, #172]	; (801534c <etharp_find_entry+0x2d8>)
 801529e:	f240 127f 	movw	r2, #383	; 0x17f
 80152a2:	492e      	ldr	r1, [pc, #184]	; (801535c <etharp_find_entry+0x2e8>)
 80152a4:	482b      	ldr	r0, [pc, #172]	; (8015354 <etharp_find_entry+0x2e0>)
 80152a6:	f002 fc73 	bl	8017b90 <iprintf>
    etharp_free_entry(i);
 80152aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7ff fe06 	bl	8014ec0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80152b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152b8:	2b09      	cmp	r3, #9
 80152ba:	dd06      	ble.n	80152ca <etharp_find_entry+0x256>
 80152bc:	4b23      	ldr	r3, [pc, #140]	; (801534c <etharp_find_entry+0x2d8>)
 80152be:	f240 1283 	movw	r2, #387	; 0x183
 80152c2:	4926      	ldr	r1, [pc, #152]	; (801535c <etharp_find_entry+0x2e8>)
 80152c4:	4823      	ldr	r0, [pc, #140]	; (8015354 <etharp_find_entry+0x2e0>)
 80152c6:	f002 fc63 	bl	8017b90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80152ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152ce:	491e      	ldr	r1, [pc, #120]	; (8015348 <etharp_find_entry+0x2d4>)
 80152d0:	4613      	mov	r3, r2
 80152d2:	005b      	lsls	r3, r3, #1
 80152d4:	4413      	add	r3, r2
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	440b      	add	r3, r1
 80152da:	3314      	adds	r3, #20
 80152dc:	781b      	ldrb	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d006      	beq.n	80152f0 <etharp_find_entry+0x27c>
 80152e2:	4b1a      	ldr	r3, [pc, #104]	; (801534c <etharp_find_entry+0x2d8>)
 80152e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80152e8:	491d      	ldr	r1, [pc, #116]	; (8015360 <etharp_find_entry+0x2ec>)
 80152ea:	481a      	ldr	r0, [pc, #104]	; (8015354 <etharp_find_entry+0x2e0>)
 80152ec:	f002 fc50 	bl	8017b90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00b      	beq.n	801530e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80152f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	6819      	ldr	r1, [r3, #0]
 80152fe:	4812      	ldr	r0, [pc, #72]	; (8015348 <etharp_find_entry+0x2d4>)
 8015300:	4613      	mov	r3, r2
 8015302:	005b      	lsls	r3, r3, #1
 8015304:	4413      	add	r3, r2
 8015306:	00db      	lsls	r3, r3, #3
 8015308:	4403      	add	r3, r0
 801530a:	3304      	adds	r3, #4
 801530c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801530e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015312:	490d      	ldr	r1, [pc, #52]	; (8015348 <etharp_find_entry+0x2d4>)
 8015314:	4613      	mov	r3, r2
 8015316:	005b      	lsls	r3, r3, #1
 8015318:	4413      	add	r3, r2
 801531a:	00db      	lsls	r3, r3, #3
 801531c:	440b      	add	r3, r1
 801531e:	3312      	adds	r3, #18
 8015320:	2200      	movs	r2, #0
 8015322:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015328:	4907      	ldr	r1, [pc, #28]	; (8015348 <etharp_find_entry+0x2d4>)
 801532a:	4613      	mov	r3, r2
 801532c:	005b      	lsls	r3, r3, #1
 801532e:	4413      	add	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	440b      	add	r3, r1
 8015334:	3308      	adds	r3, #8
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801533a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3728      	adds	r7, #40	; 0x28
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	20011bf4 	.word	0x20011bf4
 801534c:	0801d6d8 	.word	0x0801d6d8
 8015350:	0801d710 	.word	0x0801d710
 8015354:	0801d750 	.word	0x0801d750
 8015358:	0801d778 	.word	0x0801d778
 801535c:	0801d790 	.word	0x0801d790
 8015360:	0801d7a4 	.word	0x0801d7a4

08015364 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b088      	sub	sp, #32
 8015368:	af02      	add	r7, sp, #8
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
 8015370:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015378:	2b06      	cmp	r3, #6
 801537a:	d006      	beq.n	801538a <etharp_update_arp_entry+0x26>
 801537c:	4b48      	ldr	r3, [pc, #288]	; (80154a0 <etharp_update_arp_entry+0x13c>)
 801537e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015382:	4948      	ldr	r1, [pc, #288]	; (80154a4 <etharp_update_arp_entry+0x140>)
 8015384:	4848      	ldr	r0, [pc, #288]	; (80154a8 <etharp_update_arp_entry+0x144>)
 8015386:	f002 fc03 	bl	8017b90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d012      	beq.n	80153b6 <etharp_update_arp_entry+0x52>
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00e      	beq.n	80153b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	68f9      	ldr	r1, [r7, #12]
 801539e:	4618      	mov	r0, r3
 80153a0:	f001 f8f4 	bl	801658c <ip4_addr_isbroadcast_u32>
 80153a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d105      	bne.n	80153b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80153aa:	68bb      	ldr	r3, [r7, #8]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80153b2:	2be0      	cmp	r3, #224	; 0xe0
 80153b4:	d102      	bne.n	80153bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80153b6:	f06f 030f 	mvn.w	r3, #15
 80153ba:	e06c      	b.n	8015496 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80153bc:	78fb      	ldrb	r3, [r7, #3]
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	4619      	mov	r1, r3
 80153c2:	68b8      	ldr	r0, [r7, #8]
 80153c4:	f7ff fe56 	bl	8015074 <etharp_find_entry>
 80153c8:	4603      	mov	r3, r0
 80153ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80153cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	da02      	bge.n	80153da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80153d4:	8afb      	ldrh	r3, [r7, #22]
 80153d6:	b25b      	sxtb	r3, r3
 80153d8:	e05d      	b.n	8015496 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80153da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153de:	4933      	ldr	r1, [pc, #204]	; (80154ac <etharp_update_arp_entry+0x148>)
 80153e0:	4613      	mov	r3, r2
 80153e2:	005b      	lsls	r3, r3, #1
 80153e4:	4413      	add	r3, r2
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	440b      	add	r3, r1
 80153ea:	3314      	adds	r3, #20
 80153ec:	2202      	movs	r2, #2
 80153ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80153f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80153f4:	492d      	ldr	r1, [pc, #180]	; (80154ac <etharp_update_arp_entry+0x148>)
 80153f6:	4613      	mov	r3, r2
 80153f8:	005b      	lsls	r3, r3, #1
 80153fa:	4413      	add	r3, r2
 80153fc:	00db      	lsls	r3, r3, #3
 80153fe:	440b      	add	r3, r1
 8015400:	3308      	adds	r3, #8
 8015402:	68fa      	ldr	r2, [r7, #12]
 8015404:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015406:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801540a:	4613      	mov	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	3308      	adds	r3, #8
 8015414:	4a25      	ldr	r2, [pc, #148]	; (80154ac <etharp_update_arp_entry+0x148>)
 8015416:	4413      	add	r3, r2
 8015418:	3304      	adds	r3, #4
 801541a:	2206      	movs	r2, #6
 801541c:	6879      	ldr	r1, [r7, #4]
 801541e:	4618      	mov	r0, r3
 8015420:	f002 faf1 	bl	8017a06 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015428:	4920      	ldr	r1, [pc, #128]	; (80154ac <etharp_update_arp_entry+0x148>)
 801542a:	4613      	mov	r3, r2
 801542c:	005b      	lsls	r3, r3, #1
 801542e:	4413      	add	r3, r2
 8015430:	00db      	lsls	r3, r3, #3
 8015432:	440b      	add	r3, r1
 8015434:	3312      	adds	r3, #18
 8015436:	2200      	movs	r2, #0
 8015438:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801543a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801543e:	491b      	ldr	r1, [pc, #108]	; (80154ac <etharp_update_arp_entry+0x148>)
 8015440:	4613      	mov	r3, r2
 8015442:	005b      	lsls	r3, r3, #1
 8015444:	4413      	add	r3, r2
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	440b      	add	r3, r1
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d021      	beq.n	8015494 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015450:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015454:	4915      	ldr	r1, [pc, #84]	; (80154ac <etharp_update_arp_entry+0x148>)
 8015456:	4613      	mov	r3, r2
 8015458:	005b      	lsls	r3, r3, #1
 801545a:	4413      	add	r3, r2
 801545c:	00db      	lsls	r3, r3, #3
 801545e:	440b      	add	r3, r1
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015464:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015468:	4910      	ldr	r1, [pc, #64]	; (80154ac <etharp_update_arp_entry+0x148>)
 801546a:	4613      	mov	r3, r2
 801546c:	005b      	lsls	r3, r3, #1
 801546e:	4413      	add	r3, r2
 8015470:	00db      	lsls	r3, r3, #3
 8015472:	440b      	add	r3, r1
 8015474:	2200      	movs	r2, #0
 8015476:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801547e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015482:	9300      	str	r3, [sp, #0]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6939      	ldr	r1, [r7, #16]
 8015488:	68f8      	ldr	r0, [r7, #12]
 801548a:	f001 ff8d 	bl	80173a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801548e:	6938      	ldr	r0, [r7, #16]
 8015490:	f7f9 f80c 	bl	800e4ac <pbuf_free>
  }
  return ERR_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	0801d6d8 	.word	0x0801d6d8
 80154a4:	0801d7d0 	.word	0x0801d7d0
 80154a8:	0801d750 	.word	0x0801d750
 80154ac:	20011bf4 	.word	0x20011bf4

080154b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154b8:	2300      	movs	r3, #0
 80154ba:	60fb      	str	r3, [r7, #12]
 80154bc:	e01e      	b.n	80154fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80154be:	4913      	ldr	r1, [pc, #76]	; (801550c <etharp_cleanup_netif+0x5c>)
 80154c0:	68fa      	ldr	r2, [r7, #12]
 80154c2:	4613      	mov	r3, r2
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	4413      	add	r3, r2
 80154c8:	00db      	lsls	r3, r3, #3
 80154ca:	440b      	add	r3, r1
 80154cc:	3314      	adds	r3, #20
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80154d2:	7afb      	ldrb	r3, [r7, #11]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d00e      	beq.n	80154f6 <etharp_cleanup_netif+0x46>
 80154d8:	490c      	ldr	r1, [pc, #48]	; (801550c <etharp_cleanup_netif+0x5c>)
 80154da:	68fa      	ldr	r2, [r7, #12]
 80154dc:	4613      	mov	r3, r2
 80154de:	005b      	lsls	r3, r3, #1
 80154e0:	4413      	add	r3, r2
 80154e2:	00db      	lsls	r3, r3, #3
 80154e4:	440b      	add	r3, r1
 80154e6:	3308      	adds	r3, #8
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d102      	bne.n	80154f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80154f0:	68f8      	ldr	r0, [r7, #12]
 80154f2:	f7ff fce5 	bl	8014ec0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	3301      	adds	r3, #1
 80154fa:	60fb      	str	r3, [r7, #12]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b09      	cmp	r3, #9
 8015500:	dddd      	ble.n	80154be <etharp_cleanup_netif+0xe>
    }
  }
}
 8015502:	bf00      	nop
 8015504:	bf00      	nop
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	20011bf4 	.word	0x20011bf4

08015510 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015510:	b5b0      	push	{r4, r5, r7, lr}
 8015512:	b08a      	sub	sp, #40	; 0x28
 8015514:	af04      	add	r7, sp, #16
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d107      	bne.n	8015530 <etharp_input+0x20>
 8015520:	4b3d      	ldr	r3, [pc, #244]	; (8015618 <etharp_input+0x108>)
 8015522:	f240 228a 	movw	r2, #650	; 0x28a
 8015526:	493d      	ldr	r1, [pc, #244]	; (801561c <etharp_input+0x10c>)
 8015528:	483d      	ldr	r0, [pc, #244]	; (8015620 <etharp_input+0x110>)
 801552a:	f002 fb31 	bl	8017b90 <iprintf>
 801552e:	e06f      	b.n	8015610 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	881b      	ldrh	r3, [r3, #0]
 801553a:	b29b      	uxth	r3, r3
 801553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015540:	d10c      	bne.n	801555c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015546:	2b06      	cmp	r3, #6
 8015548:	d108      	bne.n	801555c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801554e:	2b04      	cmp	r3, #4
 8015550:	d104      	bne.n	801555c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	885b      	ldrh	r3, [r3, #2]
 8015556:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015558:	2b08      	cmp	r3, #8
 801555a:	d003      	beq.n	8015564 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f7f8 ffa5 	bl	800e4ac <pbuf_free>
    return;
 8015562:	e055      	b.n	8015610 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	330e      	adds	r3, #14
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	3318      	adds	r3, #24
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	3304      	adds	r3, #4
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d102      	bne.n	8015584 <etharp_input+0x74>
    for_us = 0;
 801557e:	2300      	movs	r3, #0
 8015580:	75fb      	strb	r3, [r7, #23]
 8015582:	e009      	b.n	8015598 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015584:	68ba      	ldr	r2, [r7, #8]
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	3304      	adds	r3, #4
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	429a      	cmp	r2, r3
 801558e:	bf0c      	ite	eq
 8015590:	2301      	moveq	r3, #1
 8015592:	2300      	movne	r3, #0
 8015594:	b2db      	uxtb	r3, r3
 8015596:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	f103 0208 	add.w	r2, r3, #8
 801559e:	7dfb      	ldrb	r3, [r7, #23]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d001      	beq.n	80155a8 <etharp_input+0x98>
 80155a4:	2301      	movs	r3, #1
 80155a6:	e000      	b.n	80155aa <etharp_input+0x9a>
 80155a8:	2302      	movs	r3, #2
 80155aa:	f107 010c 	add.w	r1, r7, #12
 80155ae:	6838      	ldr	r0, [r7, #0]
 80155b0:	f7ff fed8 	bl	8015364 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	88db      	ldrh	r3, [r3, #6]
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80155be:	d003      	beq.n	80155c8 <etharp_input+0xb8>
 80155c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80155c4:	d01e      	beq.n	8015604 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80155c6:	e020      	b.n	801560a <etharp_input+0xfa>
      if (for_us) {
 80155c8:	7dfb      	ldrb	r3, [r7, #23]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d01c      	beq.n	8015608 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80155e4:	693a      	ldr	r2, [r7, #16]
 80155e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80155e8:	2102      	movs	r1, #2
 80155ea:	9103      	str	r1, [sp, #12]
 80155ec:	f107 010c 	add.w	r1, r7, #12
 80155f0:	9102      	str	r1, [sp, #8]
 80155f2:	9201      	str	r2, [sp, #4]
 80155f4:	9300      	str	r3, [sp, #0]
 80155f6:	462b      	mov	r3, r5
 80155f8:	4622      	mov	r2, r4
 80155fa:	4601      	mov	r1, r0
 80155fc:	6838      	ldr	r0, [r7, #0]
 80155fe:	f000 faeb 	bl	8015bd8 <etharp_raw>
      break;
 8015602:	e001      	b.n	8015608 <etharp_input+0xf8>
      break;
 8015604:	bf00      	nop
 8015606:	e000      	b.n	801560a <etharp_input+0xfa>
      break;
 8015608:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7f8 ff4e 	bl	800e4ac <pbuf_free>
}
 8015610:	3718      	adds	r7, #24
 8015612:	46bd      	mov	sp, r7
 8015614:	bdb0      	pop	{r4, r5, r7, pc}
 8015616:	bf00      	nop
 8015618:	0801d6d8 	.word	0x0801d6d8
 801561c:	0801d828 	.word	0x0801d828
 8015620:	0801d750 	.word	0x0801d750

08015624 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b086      	sub	sp, #24
 8015628:	af02      	add	r7, sp, #8
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	4613      	mov	r3, r2
 8015630:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015632:	79fa      	ldrb	r2, [r7, #7]
 8015634:	4944      	ldr	r1, [pc, #272]	; (8015748 <etharp_output_to_arp_index+0x124>)
 8015636:	4613      	mov	r3, r2
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	4413      	add	r3, r2
 801563c:	00db      	lsls	r3, r3, #3
 801563e:	440b      	add	r3, r1
 8015640:	3314      	adds	r3, #20
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	2b01      	cmp	r3, #1
 8015646:	d806      	bhi.n	8015656 <etharp_output_to_arp_index+0x32>
 8015648:	4b40      	ldr	r3, [pc, #256]	; (801574c <etharp_output_to_arp_index+0x128>)
 801564a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801564e:	4940      	ldr	r1, [pc, #256]	; (8015750 <etharp_output_to_arp_index+0x12c>)
 8015650:	4840      	ldr	r0, [pc, #256]	; (8015754 <etharp_output_to_arp_index+0x130>)
 8015652:	f002 fa9d 	bl	8017b90 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015656:	79fa      	ldrb	r2, [r7, #7]
 8015658:	493b      	ldr	r1, [pc, #236]	; (8015748 <etharp_output_to_arp_index+0x124>)
 801565a:	4613      	mov	r3, r2
 801565c:	005b      	lsls	r3, r3, #1
 801565e:	4413      	add	r3, r2
 8015660:	00db      	lsls	r3, r3, #3
 8015662:	440b      	add	r3, r1
 8015664:	3314      	adds	r3, #20
 8015666:	781b      	ldrb	r3, [r3, #0]
 8015668:	2b02      	cmp	r3, #2
 801566a:	d153      	bne.n	8015714 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801566c:	79fa      	ldrb	r2, [r7, #7]
 801566e:	4936      	ldr	r1, [pc, #216]	; (8015748 <etharp_output_to_arp_index+0x124>)
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	3312      	adds	r3, #18
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015682:	d919      	bls.n	80156b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015684:	79fa      	ldrb	r2, [r7, #7]
 8015686:	4613      	mov	r3, r2
 8015688:	005b      	lsls	r3, r3, #1
 801568a:	4413      	add	r3, r2
 801568c:	00db      	lsls	r3, r3, #3
 801568e:	4a2e      	ldr	r2, [pc, #184]	; (8015748 <etharp_output_to_arp_index+0x124>)
 8015690:	4413      	add	r3, r2
 8015692:	3304      	adds	r3, #4
 8015694:	4619      	mov	r1, r3
 8015696:	68f8      	ldr	r0, [r7, #12]
 8015698:	f000 fb4c 	bl	8015d34 <etharp_request>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d138      	bne.n	8015714 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80156a2:	79fa      	ldrb	r2, [r7, #7]
 80156a4:	4928      	ldr	r1, [pc, #160]	; (8015748 <etharp_output_to_arp_index+0x124>)
 80156a6:	4613      	mov	r3, r2
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	4413      	add	r3, r2
 80156ac:	00db      	lsls	r3, r3, #3
 80156ae:	440b      	add	r3, r1
 80156b0:	3314      	adds	r3, #20
 80156b2:	2203      	movs	r2, #3
 80156b4:	701a      	strb	r2, [r3, #0]
 80156b6:	e02d      	b.n	8015714 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80156b8:	79fa      	ldrb	r2, [r7, #7]
 80156ba:	4923      	ldr	r1, [pc, #140]	; (8015748 <etharp_output_to_arp_index+0x124>)
 80156bc:	4613      	mov	r3, r2
 80156be:	005b      	lsls	r3, r3, #1
 80156c0:	4413      	add	r3, r2
 80156c2:	00db      	lsls	r3, r3, #3
 80156c4:	440b      	add	r3, r1
 80156c6:	3312      	adds	r3, #18
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80156ce:	d321      	bcc.n	8015714 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80156d0:	79fa      	ldrb	r2, [r7, #7]
 80156d2:	4613      	mov	r3, r2
 80156d4:	005b      	lsls	r3, r3, #1
 80156d6:	4413      	add	r3, r2
 80156d8:	00db      	lsls	r3, r3, #3
 80156da:	4a1b      	ldr	r2, [pc, #108]	; (8015748 <etharp_output_to_arp_index+0x124>)
 80156dc:	4413      	add	r3, r2
 80156de:	1d19      	adds	r1, r3, #4
 80156e0:	79fa      	ldrb	r2, [r7, #7]
 80156e2:	4613      	mov	r3, r2
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	4413      	add	r3, r2
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	3308      	adds	r3, #8
 80156ec:	4a16      	ldr	r2, [pc, #88]	; (8015748 <etharp_output_to_arp_index+0x124>)
 80156ee:	4413      	add	r3, r2
 80156f0:	3304      	adds	r3, #4
 80156f2:	461a      	mov	r2, r3
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	f000 fafb 	bl	8015cf0 <etharp_request_dst>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d109      	bne.n	8015714 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015700:	79fa      	ldrb	r2, [r7, #7]
 8015702:	4911      	ldr	r1, [pc, #68]	; (8015748 <etharp_output_to_arp_index+0x124>)
 8015704:	4613      	mov	r3, r2
 8015706:	005b      	lsls	r3, r3, #1
 8015708:	4413      	add	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	440b      	add	r3, r1
 801570e:	3314      	adds	r3, #20
 8015710:	2203      	movs	r2, #3
 8015712:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801571a:	79fa      	ldrb	r2, [r7, #7]
 801571c:	4613      	mov	r3, r2
 801571e:	005b      	lsls	r3, r3, #1
 8015720:	4413      	add	r3, r2
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	3308      	adds	r3, #8
 8015726:	4a08      	ldr	r2, [pc, #32]	; (8015748 <etharp_output_to_arp_index+0x124>)
 8015728:	4413      	add	r3, r2
 801572a:	3304      	adds	r3, #4
 801572c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015730:	9200      	str	r2, [sp, #0]
 8015732:	460a      	mov	r2, r1
 8015734:	68b9      	ldr	r1, [r7, #8]
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f001 fe36 	bl	80173a8 <ethernet_output>
 801573c:	4603      	mov	r3, r0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3710      	adds	r7, #16
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	20011bf4 	.word	0x20011bf4
 801574c:	0801d6d8 	.word	0x0801d6d8
 8015750:	0801d848 	.word	0x0801d848
 8015754:	0801d750 	.word	0x0801d750

08015758 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b08a      	sub	sp, #40	; 0x28
 801575c:	af02      	add	r7, sp, #8
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <etharp_output+0x24>
 801576e:	4b73      	ldr	r3, [pc, #460]	; (801593c <etharp_output+0x1e4>)
 8015770:	f240 321e 	movw	r2, #798	; 0x31e
 8015774:	4972      	ldr	r1, [pc, #456]	; (8015940 <etharp_output+0x1e8>)
 8015776:	4873      	ldr	r0, [pc, #460]	; (8015944 <etharp_output+0x1ec>)
 8015778:	f002 fa0a 	bl	8017b90 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d106      	bne.n	8015790 <etharp_output+0x38>
 8015782:	4b6e      	ldr	r3, [pc, #440]	; (801593c <etharp_output+0x1e4>)
 8015784:	f240 321f 	movw	r2, #799	; 0x31f
 8015788:	496f      	ldr	r1, [pc, #444]	; (8015948 <etharp_output+0x1f0>)
 801578a:	486e      	ldr	r0, [pc, #440]	; (8015944 <etharp_output+0x1ec>)
 801578c:	f002 fa00 	bl	8017b90 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d106      	bne.n	80157a4 <etharp_output+0x4c>
 8015796:	4b69      	ldr	r3, [pc, #420]	; (801593c <etharp_output+0x1e4>)
 8015798:	f44f 7248 	mov.w	r2, #800	; 0x320
 801579c:	496b      	ldr	r1, [pc, #428]	; (801594c <etharp_output+0x1f4>)
 801579e:	4869      	ldr	r0, [pc, #420]	; (8015944 <etharp_output+0x1ec>)
 80157a0:	f002 f9f6 	bl	8017b90 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	68f9      	ldr	r1, [r7, #12]
 80157aa:	4618      	mov	r0, r3
 80157ac:	f000 feee 	bl	801658c <ip4_addr_isbroadcast_u32>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d002      	beq.n	80157bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80157b6:	4b66      	ldr	r3, [pc, #408]	; (8015950 <etharp_output+0x1f8>)
 80157b8:	61fb      	str	r3, [r7, #28]
 80157ba:	e0af      	b.n	801591c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80157c4:	2be0      	cmp	r3, #224	; 0xe0
 80157c6:	d118      	bne.n	80157fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80157c8:	2301      	movs	r3, #1
 80157ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80157cc:	2300      	movs	r3, #0
 80157ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80157d0:	235e      	movs	r3, #94	; 0x5e
 80157d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	3301      	adds	r3, #1
 80157d8:	781b      	ldrb	r3, [r3, #0]
 80157da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	3302      	adds	r3, #2
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	3303      	adds	r3, #3
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80157f2:	f107 0310 	add.w	r3, r7, #16
 80157f6:	61fb      	str	r3, [r7, #28]
 80157f8:	e090      	b.n	801591c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	3304      	adds	r3, #4
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	405a      	eors	r2, r3
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	3308      	adds	r3, #8
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	4013      	ands	r3, r2
 801580e:	2b00      	cmp	r3, #0
 8015810:	d012      	beq.n	8015838 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015818:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801581c:	4293      	cmp	r3, r2
 801581e:	d00b      	beq.n	8015838 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	330c      	adds	r3, #12
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d003      	beq.n	8015832 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	330c      	adds	r3, #12
 801582e:	61bb      	str	r3, [r7, #24]
 8015830:	e002      	b.n	8015838 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015832:	f06f 0303 	mvn.w	r3, #3
 8015836:	e07d      	b.n	8015934 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015838:	4b46      	ldr	r3, [pc, #280]	; (8015954 <etharp_output+0x1fc>)
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	4619      	mov	r1, r3
 801583e:	4a46      	ldr	r2, [pc, #280]	; (8015958 <etharp_output+0x200>)
 8015840:	460b      	mov	r3, r1
 8015842:	005b      	lsls	r3, r3, #1
 8015844:	440b      	add	r3, r1
 8015846:	00db      	lsls	r3, r3, #3
 8015848:	4413      	add	r3, r2
 801584a:	3314      	adds	r3, #20
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	2b01      	cmp	r3, #1
 8015850:	d925      	bls.n	801589e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015852:	4b40      	ldr	r3, [pc, #256]	; (8015954 <etharp_output+0x1fc>)
 8015854:	781b      	ldrb	r3, [r3, #0]
 8015856:	4619      	mov	r1, r3
 8015858:	4a3f      	ldr	r2, [pc, #252]	; (8015958 <etharp_output+0x200>)
 801585a:	460b      	mov	r3, r1
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	440b      	add	r3, r1
 8015860:	00db      	lsls	r3, r3, #3
 8015862:	4413      	add	r3, r2
 8015864:	3308      	adds	r3, #8
 8015866:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	429a      	cmp	r2, r3
 801586c:	d117      	bne.n	801589e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	681a      	ldr	r2, [r3, #0]
 8015872:	4b38      	ldr	r3, [pc, #224]	; (8015954 <etharp_output+0x1fc>)
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	4618      	mov	r0, r3
 8015878:	4937      	ldr	r1, [pc, #220]	; (8015958 <etharp_output+0x200>)
 801587a:	4603      	mov	r3, r0
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	4403      	add	r3, r0
 8015880:	00db      	lsls	r3, r3, #3
 8015882:	440b      	add	r3, r1
 8015884:	3304      	adds	r3, #4
 8015886:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015888:	429a      	cmp	r2, r3
 801588a:	d108      	bne.n	801589e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801588c:	4b31      	ldr	r3, [pc, #196]	; (8015954 <etharp_output+0x1fc>)
 801588e:	781b      	ldrb	r3, [r3, #0]
 8015890:	461a      	mov	r2, r3
 8015892:	68b9      	ldr	r1, [r7, #8]
 8015894:	68f8      	ldr	r0, [r7, #12]
 8015896:	f7ff fec5 	bl	8015624 <etharp_output_to_arp_index>
 801589a:	4603      	mov	r3, r0
 801589c:	e04a      	b.n	8015934 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801589e:	2300      	movs	r3, #0
 80158a0:	75fb      	strb	r3, [r7, #23]
 80158a2:	e031      	b.n	8015908 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80158a4:	7dfa      	ldrb	r2, [r7, #23]
 80158a6:	492c      	ldr	r1, [pc, #176]	; (8015958 <etharp_output+0x200>)
 80158a8:	4613      	mov	r3, r2
 80158aa:	005b      	lsls	r3, r3, #1
 80158ac:	4413      	add	r3, r2
 80158ae:	00db      	lsls	r3, r3, #3
 80158b0:	440b      	add	r3, r1
 80158b2:	3314      	adds	r3, #20
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	2b01      	cmp	r3, #1
 80158b8:	d923      	bls.n	8015902 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80158ba:	7dfa      	ldrb	r2, [r7, #23]
 80158bc:	4926      	ldr	r1, [pc, #152]	; (8015958 <etharp_output+0x200>)
 80158be:	4613      	mov	r3, r2
 80158c0:	005b      	lsls	r3, r3, #1
 80158c2:	4413      	add	r3, r2
 80158c4:	00db      	lsls	r3, r3, #3
 80158c6:	440b      	add	r3, r1
 80158c8:	3308      	adds	r3, #8
 80158ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d117      	bne.n	8015902 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	6819      	ldr	r1, [r3, #0]
 80158d6:	7dfa      	ldrb	r2, [r7, #23]
 80158d8:	481f      	ldr	r0, [pc, #124]	; (8015958 <etharp_output+0x200>)
 80158da:	4613      	mov	r3, r2
 80158dc:	005b      	lsls	r3, r3, #1
 80158de:	4413      	add	r3, r2
 80158e0:	00db      	lsls	r3, r3, #3
 80158e2:	4403      	add	r3, r0
 80158e4:	3304      	adds	r3, #4
 80158e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80158e8:	4299      	cmp	r1, r3
 80158ea:	d10a      	bne.n	8015902 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80158ec:	4a19      	ldr	r2, [pc, #100]	; (8015954 <etharp_output+0x1fc>)
 80158ee:	7dfb      	ldrb	r3, [r7, #23]
 80158f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80158f2:	7dfb      	ldrb	r3, [r7, #23]
 80158f4:	461a      	mov	r2, r3
 80158f6:	68b9      	ldr	r1, [r7, #8]
 80158f8:	68f8      	ldr	r0, [r7, #12]
 80158fa:	f7ff fe93 	bl	8015624 <etharp_output_to_arp_index>
 80158fe:	4603      	mov	r3, r0
 8015900:	e018      	b.n	8015934 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015902:	7dfb      	ldrb	r3, [r7, #23]
 8015904:	3301      	adds	r3, #1
 8015906:	75fb      	strb	r3, [r7, #23]
 8015908:	7dfb      	ldrb	r3, [r7, #23]
 801590a:	2b09      	cmp	r3, #9
 801590c:	d9ca      	bls.n	80158a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801590e:	68ba      	ldr	r2, [r7, #8]
 8015910:	69b9      	ldr	r1, [r7, #24]
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f000 f822 	bl	801595c <etharp_query>
 8015918:	4603      	mov	r3, r0
 801591a:	e00b      	b.n	8015934 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015922:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	68b9      	ldr	r1, [r7, #8]
 801592c:	68f8      	ldr	r0, [r7, #12]
 801592e:	f001 fd3b 	bl	80173a8 <ethernet_output>
 8015932:	4603      	mov	r3, r0
}
 8015934:	4618      	mov	r0, r3
 8015936:	3720      	adds	r7, #32
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}
 801593c:	0801d6d8 	.word	0x0801d6d8
 8015940:	0801d828 	.word	0x0801d828
 8015944:	0801d750 	.word	0x0801d750
 8015948:	0801d878 	.word	0x0801d878
 801594c:	0801d818 	.word	0x0801d818
 8015950:	0801df74 	.word	0x0801df74
 8015954:	20011ce4 	.word	0x20011ce4
 8015958:	20011bf4 	.word	0x20011bf4

0801595c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801595c:	b580      	push	{r7, lr}
 801595e:	b08c      	sub	sp, #48	; 0x30
 8015960:	af02      	add	r7, sp, #8
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	3326      	adds	r3, #38	; 0x26
 801596c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801596e:	23ff      	movs	r3, #255	; 0xff
 8015970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015974:	2300      	movs	r3, #0
 8015976:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	68f9      	ldr	r1, [r7, #12]
 801597e:	4618      	mov	r0, r3
 8015980:	f000 fe04 	bl	801658c <ip4_addr_isbroadcast_u32>
 8015984:	4603      	mov	r3, r0
 8015986:	2b00      	cmp	r3, #0
 8015988:	d10c      	bne.n	80159a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015992:	2be0      	cmp	r3, #224	; 0xe0
 8015994:	d006      	beq.n	80159a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d003      	beq.n	80159a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d102      	bne.n	80159aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80159a4:	f06f 030f 	mvn.w	r3, #15
 80159a8:	e101      	b.n	8015bae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	2101      	movs	r1, #1
 80159ae:	68b8      	ldr	r0, [r7, #8]
 80159b0:	f7ff fb60 	bl	8015074 <etharp_find_entry>
 80159b4:	4603      	mov	r3, r0
 80159b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80159b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	da02      	bge.n	80159c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80159c0:	8a7b      	ldrh	r3, [r7, #18]
 80159c2:	b25b      	sxtb	r3, r3
 80159c4:	e0f3      	b.n	8015bae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80159c6:	8a7b      	ldrh	r3, [r7, #18]
 80159c8:	2b7e      	cmp	r3, #126	; 0x7e
 80159ca:	d906      	bls.n	80159da <etharp_query+0x7e>
 80159cc:	4b7a      	ldr	r3, [pc, #488]	; (8015bb8 <etharp_query+0x25c>)
 80159ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 80159d2:	497a      	ldr	r1, [pc, #488]	; (8015bbc <etharp_query+0x260>)
 80159d4:	487a      	ldr	r0, [pc, #488]	; (8015bc0 <etharp_query+0x264>)
 80159d6:	f002 f8db 	bl	8017b90 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80159da:	8a7b      	ldrh	r3, [r7, #18]
 80159dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80159de:	7c7a      	ldrb	r2, [r7, #17]
 80159e0:	4978      	ldr	r1, [pc, #480]	; (8015bc4 <etharp_query+0x268>)
 80159e2:	4613      	mov	r3, r2
 80159e4:	005b      	lsls	r3, r3, #1
 80159e6:	4413      	add	r3, r2
 80159e8:	00db      	lsls	r3, r3, #3
 80159ea:	440b      	add	r3, r1
 80159ec:	3314      	adds	r3, #20
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d115      	bne.n	8015a20 <etharp_query+0xc4>
    is_new_entry = 1;
 80159f4:	2301      	movs	r3, #1
 80159f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80159f8:	7c7a      	ldrb	r2, [r7, #17]
 80159fa:	4972      	ldr	r1, [pc, #456]	; (8015bc4 <etharp_query+0x268>)
 80159fc:	4613      	mov	r3, r2
 80159fe:	005b      	lsls	r3, r3, #1
 8015a00:	4413      	add	r3, r2
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	440b      	add	r3, r1
 8015a06:	3314      	adds	r3, #20
 8015a08:	2201      	movs	r2, #1
 8015a0a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015a0c:	7c7a      	ldrb	r2, [r7, #17]
 8015a0e:	496d      	ldr	r1, [pc, #436]	; (8015bc4 <etharp_query+0x268>)
 8015a10:	4613      	mov	r3, r2
 8015a12:	005b      	lsls	r3, r3, #1
 8015a14:	4413      	add	r3, r2
 8015a16:	00db      	lsls	r3, r3, #3
 8015a18:	440b      	add	r3, r1
 8015a1a:	3308      	adds	r3, #8
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015a20:	7c7a      	ldrb	r2, [r7, #17]
 8015a22:	4968      	ldr	r1, [pc, #416]	; (8015bc4 <etharp_query+0x268>)
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	00db      	lsls	r3, r3, #3
 8015a2c:	440b      	add	r3, r1
 8015a2e:	3314      	adds	r3, #20
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	2b01      	cmp	r3, #1
 8015a34:	d011      	beq.n	8015a5a <etharp_query+0xfe>
 8015a36:	7c7a      	ldrb	r2, [r7, #17]
 8015a38:	4962      	ldr	r1, [pc, #392]	; (8015bc4 <etharp_query+0x268>)
 8015a3a:	4613      	mov	r3, r2
 8015a3c:	005b      	lsls	r3, r3, #1
 8015a3e:	4413      	add	r3, r2
 8015a40:	00db      	lsls	r3, r3, #3
 8015a42:	440b      	add	r3, r1
 8015a44:	3314      	adds	r3, #20
 8015a46:	781b      	ldrb	r3, [r3, #0]
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d806      	bhi.n	8015a5a <etharp_query+0xfe>
 8015a4c:	4b5a      	ldr	r3, [pc, #360]	; (8015bb8 <etharp_query+0x25c>)
 8015a4e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015a52:	495d      	ldr	r1, [pc, #372]	; (8015bc8 <etharp_query+0x26c>)
 8015a54:	485a      	ldr	r0, [pc, #360]	; (8015bc0 <etharp_query+0x264>)
 8015a56:	f002 f89b 	bl	8017b90 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d102      	bne.n	8015a66 <etharp_query+0x10a>
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d10c      	bne.n	8015a80 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015a66:	68b9      	ldr	r1, [r7, #8]
 8015a68:	68f8      	ldr	r0, [r7, #12]
 8015a6a:	f000 f963 	bl	8015d34 <etharp_request>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d102      	bne.n	8015a80 <etharp_query+0x124>
      return result;
 8015a7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015a7e:	e096      	b.n	8015bae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d106      	bne.n	8015a94 <etharp_query+0x138>
 8015a86:	4b4c      	ldr	r3, [pc, #304]	; (8015bb8 <etharp_query+0x25c>)
 8015a88:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015a8c:	494f      	ldr	r1, [pc, #316]	; (8015bcc <etharp_query+0x270>)
 8015a8e:	484c      	ldr	r0, [pc, #304]	; (8015bc0 <etharp_query+0x264>)
 8015a90:	f002 f87e 	bl	8017b90 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015a94:	7c7a      	ldrb	r2, [r7, #17]
 8015a96:	494b      	ldr	r1, [pc, #300]	; (8015bc4 <etharp_query+0x268>)
 8015a98:	4613      	mov	r3, r2
 8015a9a:	005b      	lsls	r3, r3, #1
 8015a9c:	4413      	add	r3, r2
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	440b      	add	r3, r1
 8015aa2:	3314      	adds	r3, #20
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d917      	bls.n	8015ada <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015aaa:	4a49      	ldr	r2, [pc, #292]	; (8015bd0 <etharp_query+0x274>)
 8015aac:	7c7b      	ldrb	r3, [r7, #17]
 8015aae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015ab0:	7c7a      	ldrb	r2, [r7, #17]
 8015ab2:	4613      	mov	r3, r2
 8015ab4:	005b      	lsls	r3, r3, #1
 8015ab6:	4413      	add	r3, r2
 8015ab8:	00db      	lsls	r3, r3, #3
 8015aba:	3308      	adds	r3, #8
 8015abc:	4a41      	ldr	r2, [pc, #260]	; (8015bc4 <etharp_query+0x268>)
 8015abe:	4413      	add	r3, r2
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ac6:	9200      	str	r2, [sp, #0]
 8015ac8:	697a      	ldr	r2, [r7, #20]
 8015aca:	6879      	ldr	r1, [r7, #4]
 8015acc:	68f8      	ldr	r0, [r7, #12]
 8015ace:	f001 fc6b 	bl	80173a8 <ethernet_output>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ad8:	e067      	b.n	8015baa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015ada:	7c7a      	ldrb	r2, [r7, #17]
 8015adc:	4939      	ldr	r1, [pc, #228]	; (8015bc4 <etharp_query+0x268>)
 8015ade:	4613      	mov	r3, r2
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	4413      	add	r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	440b      	add	r3, r1
 8015ae8:	3314      	adds	r3, #20
 8015aea:	781b      	ldrb	r3, [r3, #0]
 8015aec:	2b01      	cmp	r3, #1
 8015aee:	d15c      	bne.n	8015baa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015af0:	2300      	movs	r3, #0
 8015af2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015af8:	e01c      	b.n	8015b34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	895a      	ldrh	r2, [r3, #10]
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	891b      	ldrh	r3, [r3, #8]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d10a      	bne.n	8015b1c <etharp_query+0x1c0>
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d006      	beq.n	8015b1c <etharp_query+0x1c0>
 8015b0e:	4b2a      	ldr	r3, [pc, #168]	; (8015bb8 <etharp_query+0x25c>)
 8015b10:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015b14:	492f      	ldr	r1, [pc, #188]	; (8015bd4 <etharp_query+0x278>)
 8015b16:	482a      	ldr	r0, [pc, #168]	; (8015bc0 <etharp_query+0x264>)
 8015b18:	f002 f83a 	bl	8017b90 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	7b1b      	ldrb	r3, [r3, #12]
 8015b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d002      	beq.n	8015b2e <etharp_query+0x1d2>
        copy_needed = 1;
 8015b28:	2301      	movs	r3, #1
 8015b2a:	61bb      	str	r3, [r7, #24]
        break;
 8015b2c:	e005      	b.n	8015b3a <etharp_query+0x1de>
      }
      p = p->next;
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d1df      	bne.n	8015afa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d007      	beq.n	8015b50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015b40:	687a      	ldr	r2, [r7, #4]
 8015b42:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015b46:	200e      	movs	r0, #14
 8015b48:	f7f8 ff18 	bl	800e97c <pbuf_clone>
 8015b4c:	61f8      	str	r0, [r7, #28]
 8015b4e:	e004      	b.n	8015b5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015b54:	69f8      	ldr	r0, [r7, #28]
 8015b56:	f7f8 fd4f 	bl	800e5f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d021      	beq.n	8015ba4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015b60:	7c7a      	ldrb	r2, [r7, #17]
 8015b62:	4918      	ldr	r1, [pc, #96]	; (8015bc4 <etharp_query+0x268>)
 8015b64:	4613      	mov	r3, r2
 8015b66:	005b      	lsls	r3, r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	00db      	lsls	r3, r3, #3
 8015b6c:	440b      	add	r3, r1
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d00a      	beq.n	8015b8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015b74:	7c7a      	ldrb	r2, [r7, #17]
 8015b76:	4913      	ldr	r1, [pc, #76]	; (8015bc4 <etharp_query+0x268>)
 8015b78:	4613      	mov	r3, r2
 8015b7a:	005b      	lsls	r3, r3, #1
 8015b7c:	4413      	add	r3, r2
 8015b7e:	00db      	lsls	r3, r3, #3
 8015b80:	440b      	add	r3, r1
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f8 fc91 	bl	800e4ac <pbuf_free>
      }
      arp_table[i].q = p;
 8015b8a:	7c7a      	ldrb	r2, [r7, #17]
 8015b8c:	490d      	ldr	r1, [pc, #52]	; (8015bc4 <etharp_query+0x268>)
 8015b8e:	4613      	mov	r3, r2
 8015b90:	005b      	lsls	r3, r3, #1
 8015b92:	4413      	add	r3, r2
 8015b94:	00db      	lsls	r3, r3, #3
 8015b96:	440b      	add	r3, r1
 8015b98:	69fa      	ldr	r2, [r7, #28]
 8015b9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ba2:	e002      	b.n	8015baa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015ba4:	23ff      	movs	r3, #255	; 0xff
 8015ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3728      	adds	r7, #40	; 0x28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	0801d6d8 	.word	0x0801d6d8
 8015bbc:	0801d884 	.word	0x0801d884
 8015bc0:	0801d750 	.word	0x0801d750
 8015bc4:	20011bf4 	.word	0x20011bf4
 8015bc8:	0801d894 	.word	0x0801d894
 8015bcc:	0801d878 	.word	0x0801d878
 8015bd0:	20011ce4 	.word	0x20011ce4
 8015bd4:	0801d8bc 	.word	0x0801d8bc

08015bd8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b08a      	sub	sp, #40	; 0x28
 8015bdc:	af02      	add	r7, sp, #8
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
 8015be4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015be6:	2300      	movs	r3, #0
 8015be8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d106      	bne.n	8015bfe <etharp_raw+0x26>
 8015bf0:	4b3a      	ldr	r3, [pc, #232]	; (8015cdc <etharp_raw+0x104>)
 8015bf2:	f240 4257 	movw	r2, #1111	; 0x457
 8015bf6:	493a      	ldr	r1, [pc, #232]	; (8015ce0 <etharp_raw+0x108>)
 8015bf8:	483a      	ldr	r0, [pc, #232]	; (8015ce4 <etharp_raw+0x10c>)
 8015bfa:	f001 ffc9 	bl	8017b90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015bfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c02:	211c      	movs	r1, #28
 8015c04:	200e      	movs	r0, #14
 8015c06:	f7f8 f96d 	bl	800dee4 <pbuf_alloc>
 8015c0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015c0c:	69bb      	ldr	r3, [r7, #24]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d102      	bne.n	8015c18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c16:	e05d      	b.n	8015cd4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015c18:	69bb      	ldr	r3, [r7, #24]
 8015c1a:	895b      	ldrh	r3, [r3, #10]
 8015c1c:	2b1b      	cmp	r3, #27
 8015c1e:	d806      	bhi.n	8015c2e <etharp_raw+0x56>
 8015c20:	4b2e      	ldr	r3, [pc, #184]	; (8015cdc <etharp_raw+0x104>)
 8015c22:	f240 4262 	movw	r2, #1122	; 0x462
 8015c26:	4930      	ldr	r1, [pc, #192]	; (8015ce8 <etharp_raw+0x110>)
 8015c28:	482e      	ldr	r0, [pc, #184]	; (8015ce4 <etharp_raw+0x10c>)
 8015c2a:	f001 ffb1 	bl	8017b90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015c2e:	69bb      	ldr	r3, [r7, #24]
 8015c30:	685b      	ldr	r3, [r3, #4]
 8015c32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015c34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f6 ff32 	bl	800caa0 <lwip_htons>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	461a      	mov	r2, r3
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c4a:	2b06      	cmp	r3, #6
 8015c4c:	d006      	beq.n	8015c5c <etharp_raw+0x84>
 8015c4e:	4b23      	ldr	r3, [pc, #140]	; (8015cdc <etharp_raw+0x104>)
 8015c50:	f240 4269 	movw	r2, #1129	; 0x469
 8015c54:	4925      	ldr	r1, [pc, #148]	; (8015cec <etharp_raw+0x114>)
 8015c56:	4823      	ldr	r0, [pc, #140]	; (8015ce4 <etharp_raw+0x10c>)
 8015c58:	f001 ff9a 	bl	8017b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	3308      	adds	r3, #8
 8015c60:	2206      	movs	r2, #6
 8015c62:	6839      	ldr	r1, [r7, #0]
 8015c64:	4618      	mov	r0, r3
 8015c66:	f001 fece 	bl	8017a06 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	3312      	adds	r3, #18
 8015c6e:	2206      	movs	r2, #6
 8015c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015c72:	4618      	mov	r0, r3
 8015c74:	f001 fec7 	bl	8017a06 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	330e      	adds	r3, #14
 8015c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c7e:	6812      	ldr	r2, [r2, #0]
 8015c80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015c82:	697b      	ldr	r3, [r7, #20]
 8015c84:	3318      	adds	r3, #24
 8015c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c88:	6812      	ldr	r2, [r2, #0]
 8015c8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	701a      	strb	r2, [r3, #0]
 8015c92:	2200      	movs	r2, #0
 8015c94:	f042 0201 	orr.w	r2, r2, #1
 8015c98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	f042 0208 	orr.w	r2, r2, #8
 8015ca2:	709a      	strb	r2, [r3, #2]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015ca8:	697b      	ldr	r3, [r7, #20]
 8015caa:	2206      	movs	r2, #6
 8015cac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	2204      	movs	r2, #4
 8015cb2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015cb4:	f640 0306 	movw	r3, #2054	; 0x806
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	69b9      	ldr	r1, [r7, #24]
 8015cc0:	68f8      	ldr	r0, [r7, #12]
 8015cc2:	f001 fb71 	bl	80173a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015cc6:	69b8      	ldr	r0, [r7, #24]
 8015cc8:	f7f8 fbf0 	bl	800e4ac <pbuf_free>
  p = NULL;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015cd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3720      	adds	r7, #32
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	0801d6d8 	.word	0x0801d6d8
 8015ce0:	0801d828 	.word	0x0801d828
 8015ce4:	0801d750 	.word	0x0801d750
 8015ce8:	0801d8d8 	.word	0x0801d8d8
 8015cec:	0801d90c 	.word	0x0801d90c

08015cf0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b088      	sub	sp, #32
 8015cf4:	af04      	add	r7, sp, #16
 8015cf6:	60f8      	str	r0, [r7, #12]
 8015cf8:	60b9      	str	r1, [r7, #8]
 8015cfa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015d0c:	2201      	movs	r2, #1
 8015d0e:	9203      	str	r2, [sp, #12]
 8015d10:	68ba      	ldr	r2, [r7, #8]
 8015d12:	9202      	str	r2, [sp, #8]
 8015d14:	4a06      	ldr	r2, [pc, #24]	; (8015d30 <etharp_request_dst+0x40>)
 8015d16:	9201      	str	r2, [sp, #4]
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	f7ff ff5a 	bl	8015bd8 <etharp_raw>
 8015d24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3710      	adds	r7, #16
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	0801df7c 	.word	0x0801df7c

08015d34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015d3e:	4a05      	ldr	r2, [pc, #20]	; (8015d54 <etharp_request+0x20>)
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f7ff ffd4 	bl	8015cf0 <etharp_request_dst>
 8015d48:	4603      	mov	r3, r0
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3708      	adds	r7, #8
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	0801df74 	.word	0x0801df74

08015d58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b08e      	sub	sp, #56	; 0x38
 8015d5c:	af04      	add	r7, sp, #16
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015d62:	4b79      	ldr	r3, [pc, #484]	; (8015f48 <icmp_input+0x1f0>)
 8015d64:	689b      	ldr	r3, [r3, #8]
 8015d66:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	f003 030f 	and.w	r3, r3, #15
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	009b      	lsls	r3, r3, #2
 8015d74:	b2db      	uxtb	r3, r3
 8015d76:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d7a:	2b13      	cmp	r3, #19
 8015d7c:	f240 80cd 	bls.w	8015f1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	895b      	ldrh	r3, [r3, #10]
 8015d84:	2b03      	cmp	r3, #3
 8015d86:	f240 80ca 	bls.w	8015f1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015d94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	f000 80b7 	beq.w	8015f0c <icmp_input+0x1b4>
 8015d9e:	2b08      	cmp	r3, #8
 8015da0:	f040 80b7 	bne.w	8015f12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015da4:	4b69      	ldr	r3, [pc, #420]	; (8015f4c <icmp_input+0x1f4>)
 8015da6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015da8:	4b67      	ldr	r3, [pc, #412]	; (8015f48 <icmp_input+0x1f0>)
 8015daa:	695b      	ldr	r3, [r3, #20]
 8015dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015db0:	2be0      	cmp	r3, #224	; 0xe0
 8015db2:	f000 80bb 	beq.w	8015f2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015db6:	4b64      	ldr	r3, [pc, #400]	; (8015f48 <icmp_input+0x1f0>)
 8015db8:	695b      	ldr	r3, [r3, #20]
 8015dba:	4a63      	ldr	r2, [pc, #396]	; (8015f48 <icmp_input+0x1f0>)
 8015dbc:	6812      	ldr	r2, [r2, #0]
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f000 fbe3 	bl	801658c <ip4_addr_isbroadcast_u32>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	f040 80b1 	bne.w	8015f30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	891b      	ldrh	r3, [r3, #8]
 8015dd2:	2b07      	cmp	r3, #7
 8015dd4:	f240 80a5 	bls.w	8015f22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dda:	330e      	adds	r3, #14
 8015ddc:	4619      	mov	r1, r3
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7f8 face 	bl	800e380 <pbuf_add_header>
 8015de4:	4603      	mov	r3, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d04b      	beq.n	8015e82 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	891a      	ldrh	r2, [r3, #8]
 8015dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015df0:	4413      	add	r3, r2
 8015df2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	891b      	ldrh	r3, [r3, #8]
 8015df8:	8b7a      	ldrh	r2, [r7, #26]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	f0c0 809a 	bcc.w	8015f34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015e00:	8b7b      	ldrh	r3, [r7, #26]
 8015e02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e06:	4619      	mov	r1, r3
 8015e08:	200e      	movs	r0, #14
 8015e0a:	f7f8 f86b 	bl	800dee4 <pbuf_alloc>
 8015e0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	f000 8090 	beq.w	8015f38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	895b      	ldrh	r3, [r3, #10]
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e20:	3308      	adds	r3, #8
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d203      	bcs.n	8015e2e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015e26:	6978      	ldr	r0, [r7, #20]
 8015e28:	f7f8 fb40 	bl	800e4ac <pbuf_free>
          goto icmperr;
 8015e2c:	e085      	b.n	8015f3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e36:	4618      	mov	r0, r3
 8015e38:	f001 fde5 	bl	8017a06 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e3e:	4619      	mov	r1, r3
 8015e40:	6978      	ldr	r0, [r7, #20]
 8015e42:	f7f8 faad 	bl	800e3a0 <pbuf_remove_header>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d009      	beq.n	8015e60 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015e4c:	4b40      	ldr	r3, [pc, #256]	; (8015f50 <icmp_input+0x1f8>)
 8015e4e:	22b6      	movs	r2, #182	; 0xb6
 8015e50:	4940      	ldr	r1, [pc, #256]	; (8015f54 <icmp_input+0x1fc>)
 8015e52:	4841      	ldr	r0, [pc, #260]	; (8015f58 <icmp_input+0x200>)
 8015e54:	f001 fe9c 	bl	8017b90 <iprintf>
          pbuf_free(r);
 8015e58:	6978      	ldr	r0, [r7, #20]
 8015e5a:	f7f8 fb27 	bl	800e4ac <pbuf_free>
          goto icmperr;
 8015e5e:	e06c      	b.n	8015f3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015e60:	6879      	ldr	r1, [r7, #4]
 8015e62:	6978      	ldr	r0, [r7, #20]
 8015e64:	f7f8 fc46 	bl	800e6f4 <pbuf_copy>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d003      	beq.n	8015e76 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015e6e:	6978      	ldr	r0, [r7, #20]
 8015e70:	f7f8 fb1c 	bl	800e4ac <pbuf_free>
          goto icmperr;
 8015e74:	e061      	b.n	8015f3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7f8 fb18 	bl	800e4ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	607b      	str	r3, [r7, #4]
 8015e80:	e00f      	b.n	8015ea2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015e82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015e84:	330e      	adds	r3, #14
 8015e86:	4619      	mov	r1, r3
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7f8 fa89 	bl	800e3a0 <pbuf_remove_header>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d006      	beq.n	8015ea2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015e94:	4b2e      	ldr	r3, [pc, #184]	; (8015f50 <icmp_input+0x1f8>)
 8015e96:	22c7      	movs	r2, #199	; 0xc7
 8015e98:	4930      	ldr	r1, [pc, #192]	; (8015f5c <icmp_input+0x204>)
 8015e9a:	482f      	ldr	r0, [pc, #188]	; (8015f58 <icmp_input+0x200>)
 8015e9c:	f001 fe78 	bl	8017b90 <iprintf>
          goto icmperr;
 8015ea0:	e04b      	b.n	8015f3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015eaa:	4619      	mov	r1, r3
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7f8 fa67 	bl	800e380 <pbuf_add_header>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d12b      	bne.n	8015f10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015ebe:	69fb      	ldr	r3, [r7, #28]
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015ec6:	4b20      	ldr	r3, [pc, #128]	; (8015f48 <icmp_input+0x1f0>)
 8015ec8:	691a      	ldr	r2, [r3, #16]
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015ed4:	693b      	ldr	r3, [r7, #16]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	709a      	strb	r2, [r3, #2]
 8015eda:	2200      	movs	r2, #0
 8015edc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	22ff      	movs	r2, #255	; 0xff
 8015ee2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	729a      	strb	r2, [r3, #10]
 8015eea:	2200      	movs	r2, #0
 8015eec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	9302      	str	r3, [sp, #8]
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	9301      	str	r3, [sp, #4]
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	23ff      	movs	r3, #255	; 0xff
 8015efc:	2200      	movs	r2, #0
 8015efe:	69f9      	ldr	r1, [r7, #28]
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 fa6b 	bl	80163dc <ip4_output_if>
 8015f06:	4603      	mov	r3, r0
 8015f08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015f0a:	e001      	b.n	8015f10 <icmp_input+0x1b8>
      break;
 8015f0c:	bf00      	nop
 8015f0e:	e000      	b.n	8015f12 <icmp_input+0x1ba>
      break;
 8015f10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f7f8 faca 	bl	800e4ac <pbuf_free>
  return;
 8015f18:	e013      	b.n	8015f42 <icmp_input+0x1ea>
    goto lenerr;
 8015f1a:	bf00      	nop
 8015f1c:	e002      	b.n	8015f24 <icmp_input+0x1cc>
    goto lenerr;
 8015f1e:	bf00      	nop
 8015f20:	e000      	b.n	8015f24 <icmp_input+0x1cc>
        goto lenerr;
 8015f22:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f7f8 fac1 	bl	800e4ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f2a:	e00a      	b.n	8015f42 <icmp_input+0x1ea>
        goto icmperr;
 8015f2c:	bf00      	nop
 8015f2e:	e004      	b.n	8015f3a <icmp_input+0x1e2>
        goto icmperr;
 8015f30:	bf00      	nop
 8015f32:	e002      	b.n	8015f3a <icmp_input+0x1e2>
          goto icmperr;
 8015f34:	bf00      	nop
 8015f36:	e000      	b.n	8015f3a <icmp_input+0x1e2>
          goto icmperr;
 8015f38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f7f8 fab6 	bl	800e4ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015f40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015f42:	3728      	adds	r7, #40	; 0x28
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}
 8015f48:	20009b0c 	.word	0x20009b0c
 8015f4c:	20009b20 	.word	0x20009b20
 8015f50:	0801d950 	.word	0x0801d950
 8015f54:	0801d988 	.word	0x0801d988
 8015f58:	0801d9c0 	.word	0x0801d9c0
 8015f5c:	0801d9e8 	.word	0x0801d9e8

08015f60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015f6c:	78fb      	ldrb	r3, [r7, #3]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	2103      	movs	r1, #3
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f000 f814 	bl	8015fa0 <icmp_send_response>
}
 8015f78:	bf00      	nop
 8015f7a:	3708      	adds	r7, #8
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	460b      	mov	r3, r1
 8015f8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015f8c:	78fb      	ldrb	r3, [r7, #3]
 8015f8e:	461a      	mov	r2, r3
 8015f90:	210b      	movs	r1, #11
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 f804 	bl	8015fa0 <icmp_send_response>
}
 8015f98:	bf00      	nop
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}

08015fa0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b08c      	sub	sp, #48	; 0x30
 8015fa4:	af04      	add	r7, sp, #16
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	460b      	mov	r3, r1
 8015faa:	70fb      	strb	r3, [r7, #3]
 8015fac:	4613      	mov	r3, r2
 8015fae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015fb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fb4:	2124      	movs	r1, #36	; 0x24
 8015fb6:	2022      	movs	r0, #34	; 0x22
 8015fb8:	f7f7 ff94 	bl	800dee4 <pbuf_alloc>
 8015fbc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d04c      	beq.n	801605e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	895b      	ldrh	r3, [r3, #10]
 8015fc8:	2b23      	cmp	r3, #35	; 0x23
 8015fca:	d806      	bhi.n	8015fda <icmp_send_response+0x3a>
 8015fcc:	4b26      	ldr	r3, [pc, #152]	; (8016068 <icmp_send_response+0xc8>)
 8015fce:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015fd2:	4926      	ldr	r1, [pc, #152]	; (801606c <icmp_send_response+0xcc>)
 8015fd4:	4826      	ldr	r0, [pc, #152]	; (8016070 <icmp_send_response+0xd0>)
 8015fd6:	f001 fddb 	bl	8017b90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	78fa      	ldrb	r2, [r7, #3]
 8015fea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	78ba      	ldrb	r2, [r7, #2]
 8015ff0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	711a      	strb	r2, [r3, #4]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	2200      	movs	r2, #0
 8016000:	719a      	strb	r2, [r3, #6]
 8016002:	2200      	movs	r2, #0
 8016004:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	f103 0008 	add.w	r0, r3, #8
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	221c      	movs	r2, #28
 8016014:	4619      	mov	r1, r3
 8016016:	f001 fcf6 	bl	8017a06 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016020:	f107 030c 	add.w	r3, r7, #12
 8016024:	4618      	mov	r0, r3
 8016026:	f000 f825 	bl	8016074 <ip4_route>
 801602a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d011      	beq.n	8016056 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	2200      	movs	r2, #0
 8016036:	709a      	strb	r2, [r3, #2]
 8016038:	2200      	movs	r2, #0
 801603a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801603c:	f107 020c 	add.w	r2, r7, #12
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	9302      	str	r3, [sp, #8]
 8016044:	2301      	movs	r3, #1
 8016046:	9301      	str	r3, [sp, #4]
 8016048:	2300      	movs	r3, #0
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	23ff      	movs	r3, #255	; 0xff
 801604e:	2100      	movs	r1, #0
 8016050:	69f8      	ldr	r0, [r7, #28]
 8016052:	f000 f9c3 	bl	80163dc <ip4_output_if>
  }
  pbuf_free(q);
 8016056:	69f8      	ldr	r0, [r7, #28]
 8016058:	f7f8 fa28 	bl	800e4ac <pbuf_free>
 801605c:	e000      	b.n	8016060 <icmp_send_response+0xc0>
    return;
 801605e:	bf00      	nop
}
 8016060:	3720      	adds	r7, #32
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	0801d950 	.word	0x0801d950
 801606c:	0801da1c 	.word	0x0801da1c
 8016070:	0801d9c0 	.word	0x0801d9c0

08016074 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801607c:	4b33      	ldr	r3, [pc, #204]	; (801614c <ip4_route+0xd8>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	60fb      	str	r3, [r7, #12]
 8016082:	e036      	b.n	80160f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801608a:	f003 0301 	and.w	r3, r3, #1
 801608e:	b2db      	uxtb	r3, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	d02b      	beq.n	80160ec <ip4_route+0x78>
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801609a:	089b      	lsrs	r3, r3, #2
 801609c:	f003 0301 	and.w	r3, r3, #1
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d022      	beq.n	80160ec <ip4_route+0x78>
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	3304      	adds	r3, #4
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d01d      	beq.n	80160ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681a      	ldr	r2, [r3, #0]
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	3304      	adds	r3, #4
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	405a      	eors	r2, r3
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	3308      	adds	r3, #8
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	4013      	ands	r3, r2
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d101      	bne.n	80160cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	e038      	b.n	801613e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160d2:	f003 0302 	and.w	r3, r3, #2
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d108      	bne.n	80160ec <ip4_route+0x78>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681a      	ldr	r2, [r3, #0]
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	330c      	adds	r3, #12
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d101      	bne.n	80160ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	e028      	b.n	801613e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	60fb      	str	r3, [r7, #12]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d1c5      	bne.n	8016084 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80160f8:	4b15      	ldr	r3, [pc, #84]	; (8016150 <ip4_route+0xdc>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d01a      	beq.n	8016136 <ip4_route+0xc2>
 8016100:	4b13      	ldr	r3, [pc, #76]	; (8016150 <ip4_route+0xdc>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016108:	f003 0301 	and.w	r3, r3, #1
 801610c:	2b00      	cmp	r3, #0
 801610e:	d012      	beq.n	8016136 <ip4_route+0xc2>
 8016110:	4b0f      	ldr	r3, [pc, #60]	; (8016150 <ip4_route+0xdc>)
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016118:	f003 0304 	and.w	r3, r3, #4
 801611c:	2b00      	cmp	r3, #0
 801611e:	d00a      	beq.n	8016136 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016120:	4b0b      	ldr	r3, [pc, #44]	; (8016150 <ip4_route+0xdc>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	3304      	adds	r3, #4
 8016126:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016128:	2b00      	cmp	r3, #0
 801612a:	d004      	beq.n	8016136 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	b2db      	uxtb	r3, r3
 8016132:	2b7f      	cmp	r3, #127	; 0x7f
 8016134:	d101      	bne.n	801613a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016136:	2300      	movs	r3, #0
 8016138:	e001      	b.n	801613e <ip4_route+0xca>
  }

  return netif_default;
 801613a:	4b05      	ldr	r3, [pc, #20]	; (8016150 <ip4_route+0xdc>)
 801613c:	681b      	ldr	r3, [r3, #0]
}
 801613e:	4618      	mov	r0, r3
 8016140:	3714      	adds	r7, #20
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	20011b8c 	.word	0x20011b8c
 8016150:	20011b90 	.word	0x20011b90

08016154 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016162:	f003 0301 	and.w	r3, r3, #1
 8016166:	b2db      	uxtb	r3, r3
 8016168:	2b00      	cmp	r3, #0
 801616a:	d016      	beq.n	801619a <ip4_input_accept+0x46>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	3304      	adds	r3, #4
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d011      	beq.n	801619a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016176:	4b0b      	ldr	r3, [pc, #44]	; (80161a4 <ip4_input_accept+0x50>)
 8016178:	695a      	ldr	r2, [r3, #20]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	3304      	adds	r3, #4
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	429a      	cmp	r2, r3
 8016182:	d008      	beq.n	8016196 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016184:	4b07      	ldr	r3, [pc, #28]	; (80161a4 <ip4_input_accept+0x50>)
 8016186:	695b      	ldr	r3, [r3, #20]
 8016188:	6879      	ldr	r1, [r7, #4]
 801618a:	4618      	mov	r0, r3
 801618c:	f000 f9fe 	bl	801658c <ip4_addr_isbroadcast_u32>
 8016190:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016192:	2b00      	cmp	r3, #0
 8016194:	d001      	beq.n	801619a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016196:	2301      	movs	r3, #1
 8016198:	e000      	b.n	801619c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801619a:	2300      	movs	r3, #0
}
 801619c:	4618      	mov	r0, r3
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	20009b0c 	.word	0x20009b0c

080161a8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b086      	sub	sp, #24
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	091b      	lsrs	r3, r3, #4
 80161be:	b2db      	uxtb	r3, r3
 80161c0:	2b04      	cmp	r3, #4
 80161c2:	d004      	beq.n	80161ce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7f8 f971 	bl	800e4ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80161ca:	2300      	movs	r3, #0
 80161cc:	e0fd      	b.n	80163ca <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	781b      	ldrb	r3, [r3, #0]
 80161d2:	f003 030f 	and.w	r3, r3, #15
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	009b      	lsls	r3, r3, #2
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	885b      	ldrh	r3, [r3, #2]
 80161e2:	b29b      	uxth	r3, r3
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f6 fc5b 	bl	800caa0 <lwip_htons>
 80161ea:	4603      	mov	r3, r0
 80161ec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	891b      	ldrh	r3, [r3, #8]
 80161f2:	89ba      	ldrh	r2, [r7, #12]
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d204      	bcs.n	8016202 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80161f8:	89bb      	ldrh	r3, [r7, #12]
 80161fa:	4619      	mov	r1, r3
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7f7 ffcf 	bl	800e1a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	895b      	ldrh	r3, [r3, #10]
 8016206:	89fa      	ldrh	r2, [r7, #14]
 8016208:	429a      	cmp	r2, r3
 801620a:	d807      	bhi.n	801621c <ip4_input+0x74>
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	891b      	ldrh	r3, [r3, #8]
 8016210:	89ba      	ldrh	r2, [r7, #12]
 8016212:	429a      	cmp	r2, r3
 8016214:	d802      	bhi.n	801621c <ip4_input+0x74>
 8016216:	89fb      	ldrh	r3, [r7, #14]
 8016218:	2b13      	cmp	r3, #19
 801621a:	d804      	bhi.n	8016226 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f7f8 f945 	bl	800e4ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016222:	2300      	movs	r3, #0
 8016224:	e0d1      	b.n	80163ca <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	691b      	ldr	r3, [r3, #16]
 801622a:	4a6a      	ldr	r2, [pc, #424]	; (80163d4 <ip4_input+0x22c>)
 801622c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	68db      	ldr	r3, [r3, #12]
 8016232:	4a68      	ldr	r2, [pc, #416]	; (80163d4 <ip4_input+0x22c>)
 8016234:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016236:	4b67      	ldr	r3, [pc, #412]	; (80163d4 <ip4_input+0x22c>)
 8016238:	695b      	ldr	r3, [r3, #20]
 801623a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801623e:	2be0      	cmp	r3, #224	; 0xe0
 8016240:	d112      	bne.n	8016268 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016248:	f003 0301 	and.w	r3, r3, #1
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b00      	cmp	r3, #0
 8016250:	d007      	beq.n	8016262 <ip4_input+0xba>
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	3304      	adds	r3, #4
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d002      	beq.n	8016262 <ip4_input+0xba>
      netif = inp;
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	613b      	str	r3, [r7, #16]
 8016260:	e02a      	b.n	80162b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016262:	2300      	movs	r3, #0
 8016264:	613b      	str	r3, [r7, #16]
 8016266:	e027      	b.n	80162b8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016268:	6838      	ldr	r0, [r7, #0]
 801626a:	f7ff ff73 	bl	8016154 <ip4_input_accept>
 801626e:	4603      	mov	r3, r0
 8016270:	2b00      	cmp	r3, #0
 8016272:	d002      	beq.n	801627a <ip4_input+0xd2>
      netif = inp;
 8016274:	683b      	ldr	r3, [r7, #0]
 8016276:	613b      	str	r3, [r7, #16]
 8016278:	e01e      	b.n	80162b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801627a:	2300      	movs	r3, #0
 801627c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801627e:	4b55      	ldr	r3, [pc, #340]	; (80163d4 <ip4_input+0x22c>)
 8016280:	695b      	ldr	r3, [r3, #20]
 8016282:	b2db      	uxtb	r3, r3
 8016284:	2b7f      	cmp	r3, #127	; 0x7f
 8016286:	d017      	beq.n	80162b8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016288:	4b53      	ldr	r3, [pc, #332]	; (80163d8 <ip4_input+0x230>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	613b      	str	r3, [r7, #16]
 801628e:	e00e      	b.n	80162ae <ip4_input+0x106>
          if (netif == inp) {
 8016290:	693a      	ldr	r2, [r7, #16]
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	429a      	cmp	r2, r3
 8016296:	d006      	beq.n	80162a6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016298:	6938      	ldr	r0, [r7, #16]
 801629a:	f7ff ff5b 	bl	8016154 <ip4_input_accept>
 801629e:	4603      	mov	r3, r0
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d108      	bne.n	80162b6 <ip4_input+0x10e>
 80162a4:	e000      	b.n	80162a8 <ip4_input+0x100>
            continue;
 80162a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80162a8:	693b      	ldr	r3, [r7, #16]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	613b      	str	r3, [r7, #16]
 80162ae:	693b      	ldr	r3, [r7, #16]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d1ed      	bne.n	8016290 <ip4_input+0xe8>
 80162b4:	e000      	b.n	80162b8 <ip4_input+0x110>
            break;
 80162b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80162b8:	4b46      	ldr	r3, [pc, #280]	; (80163d4 <ip4_input+0x22c>)
 80162ba:	691b      	ldr	r3, [r3, #16]
 80162bc:	6839      	ldr	r1, [r7, #0]
 80162be:	4618      	mov	r0, r3
 80162c0:	f000 f964 	bl	801658c <ip4_addr_isbroadcast_u32>
 80162c4:	4603      	mov	r3, r0
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d105      	bne.n	80162d6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80162ca:	4b42      	ldr	r3, [pc, #264]	; (80163d4 <ip4_input+0x22c>)
 80162cc:	691b      	ldr	r3, [r3, #16]
 80162ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80162d2:	2be0      	cmp	r3, #224	; 0xe0
 80162d4:	d104      	bne.n	80162e0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f7f8 f8e8 	bl	800e4ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80162dc:	2300      	movs	r3, #0
 80162de:	e074      	b.n	80163ca <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d104      	bne.n	80162f0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f7f8 f8e0 	bl	800e4ac <pbuf_free>
    return ERR_OK;
 80162ec:	2300      	movs	r3, #0
 80162ee:	e06c      	b.n	80163ca <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	88db      	ldrh	r3, [r3, #6]
 80162f4:	b29b      	uxth	r3, r3
 80162f6:	461a      	mov	r2, r3
 80162f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80162fc:	4013      	ands	r3, r2
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00b      	beq.n	801631a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016302:	6878      	ldr	r0, [r7, #4]
 8016304:	f000 fc88 	bl	8016c18 <ip4_reass>
 8016308:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d101      	bne.n	8016314 <ip4_input+0x16c>
      return ERR_OK;
 8016310:	2300      	movs	r3, #0
 8016312:	e05a      	b.n	80163ca <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801631a:	4a2e      	ldr	r2, [pc, #184]	; (80163d4 <ip4_input+0x22c>)
 801631c:	693b      	ldr	r3, [r7, #16]
 801631e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016320:	4a2c      	ldr	r2, [pc, #176]	; (80163d4 <ip4_input+0x22c>)
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016326:	4a2b      	ldr	r2, [pc, #172]	; (80163d4 <ip4_input+0x22c>)
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	f003 030f 	and.w	r3, r3, #15
 8016334:	b2db      	uxtb	r3, r3
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	b2db      	uxtb	r3, r3
 801633a:	b29a      	uxth	r2, r3
 801633c:	4b25      	ldr	r3, [pc, #148]	; (80163d4 <ip4_input+0x22c>)
 801633e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016340:	89fb      	ldrh	r3, [r7, #14]
 8016342:	4619      	mov	r1, r3
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7f8 f82b 	bl	800e3a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	7a5b      	ldrb	r3, [r3, #9]
 801634e:	2b01      	cmp	r3, #1
 8016350:	d006      	beq.n	8016360 <ip4_input+0x1b8>
 8016352:	2b06      	cmp	r3, #6
 8016354:	d109      	bne.n	801636a <ip4_input+0x1c2>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7fa f9fb 	bl	8010754 <tcp_input>
        break;
 801635e:	e021      	b.n	80163a4 <ip4_input+0x1fc>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016360:	6839      	ldr	r1, [r7, #0]
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7ff fcf8 	bl	8015d58 <icmp_input>
        break;
 8016368:	e01c      	b.n	80163a4 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801636a:	4b1a      	ldr	r3, [pc, #104]	; (80163d4 <ip4_input+0x22c>)
 801636c:	695b      	ldr	r3, [r3, #20]
 801636e:	6939      	ldr	r1, [r7, #16]
 8016370:	4618      	mov	r0, r3
 8016372:	f000 f90b 	bl	801658c <ip4_addr_isbroadcast_u32>
 8016376:	4603      	mov	r3, r0
 8016378:	2b00      	cmp	r3, #0
 801637a:	d10f      	bne.n	801639c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801637c:	4b15      	ldr	r3, [pc, #84]	; (80163d4 <ip4_input+0x22c>)
 801637e:	695b      	ldr	r3, [r3, #20]
 8016380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016384:	2be0      	cmp	r3, #224	; 0xe0
 8016386:	d009      	beq.n	801639c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801638c:	4619      	mov	r1, r3
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f7f8 f879 	bl	800e486 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016394:	2102      	movs	r1, #2
 8016396:	6878      	ldr	r0, [r7, #4]
 8016398:	f7ff fde2 	bl	8015f60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f7f8 f885 	bl	800e4ac <pbuf_free>
        break;
 80163a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80163a4:	4b0b      	ldr	r3, [pc, #44]	; (80163d4 <ip4_input+0x22c>)
 80163a6:	2200      	movs	r2, #0
 80163a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80163aa:	4b0a      	ldr	r3, [pc, #40]	; (80163d4 <ip4_input+0x22c>)
 80163ac:	2200      	movs	r2, #0
 80163ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80163b0:	4b08      	ldr	r3, [pc, #32]	; (80163d4 <ip4_input+0x22c>)
 80163b2:	2200      	movs	r2, #0
 80163b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80163b6:	4b07      	ldr	r3, [pc, #28]	; (80163d4 <ip4_input+0x22c>)
 80163b8:	2200      	movs	r2, #0
 80163ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80163bc:	4b05      	ldr	r3, [pc, #20]	; (80163d4 <ip4_input+0x22c>)
 80163be:	2200      	movs	r2, #0
 80163c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80163c2:	4b04      	ldr	r3, [pc, #16]	; (80163d4 <ip4_input+0x22c>)
 80163c4:	2200      	movs	r2, #0
 80163c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	20009b0c 	.word	0x20009b0c
 80163d8:	20011b8c 	.word	0x20011b8c

080163dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b08a      	sub	sp, #40	; 0x28
 80163e0:	af04      	add	r7, sp, #16
 80163e2:	60f8      	str	r0, [r7, #12]
 80163e4:	60b9      	str	r1, [r7, #8]
 80163e6:	607a      	str	r2, [r7, #4]
 80163e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d009      	beq.n	8016408 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d003      	beq.n	8016402 <ip4_output_if+0x26>
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d102      	bne.n	8016408 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016404:	3304      	adds	r3, #4
 8016406:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016408:	78fa      	ldrb	r2, [r7, #3]
 801640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801640c:	9302      	str	r3, [sp, #8]
 801640e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016412:	9301      	str	r3, [sp, #4]
 8016414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016418:	9300      	str	r3, [sp, #0]
 801641a:	4613      	mov	r3, r2
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	6979      	ldr	r1, [r7, #20]
 8016420:	68f8      	ldr	r0, [r7, #12]
 8016422:	f000 f805 	bl	8016430 <ip4_output_if_src>
 8016426:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016428:	4618      	mov	r0, r3
 801642a:	3718      	adds	r7, #24
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}

08016430 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b088      	sub	sp, #32
 8016434:	af00      	add	r7, sp, #0
 8016436:	60f8      	str	r0, [r7, #12]
 8016438:	60b9      	str	r1, [r7, #8]
 801643a:	607a      	str	r2, [r7, #4]
 801643c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	7b9b      	ldrb	r3, [r3, #14]
 8016442:	2b01      	cmp	r3, #1
 8016444:	d006      	beq.n	8016454 <ip4_output_if_src+0x24>
 8016446:	4b4b      	ldr	r3, [pc, #300]	; (8016574 <ip4_output_if_src+0x144>)
 8016448:	f44f 7255 	mov.w	r2, #852	; 0x354
 801644c:	494a      	ldr	r1, [pc, #296]	; (8016578 <ip4_output_if_src+0x148>)
 801644e:	484b      	ldr	r0, [pc, #300]	; (801657c <ip4_output_if_src+0x14c>)
 8016450:	f001 fb9e 	bl	8017b90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d060      	beq.n	801651c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801645a:	2314      	movs	r3, #20
 801645c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801645e:	2114      	movs	r1, #20
 8016460:	68f8      	ldr	r0, [r7, #12]
 8016462:	f7f7 ff8d 	bl	800e380 <pbuf_add_header>
 8016466:	4603      	mov	r3, r0
 8016468:	2b00      	cmp	r3, #0
 801646a:	d002      	beq.n	8016472 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801646c:	f06f 0301 	mvn.w	r3, #1
 8016470:	e07c      	b.n	801656c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	685b      	ldr	r3, [r3, #4]
 8016476:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	895b      	ldrh	r3, [r3, #10]
 801647c:	2b13      	cmp	r3, #19
 801647e:	d806      	bhi.n	801648e <ip4_output_if_src+0x5e>
 8016480:	4b3c      	ldr	r3, [pc, #240]	; (8016574 <ip4_output_if_src+0x144>)
 8016482:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016486:	493e      	ldr	r1, [pc, #248]	; (8016580 <ip4_output_if_src+0x150>)
 8016488:	483c      	ldr	r0, [pc, #240]	; (801657c <ip4_output_if_src+0x14c>)
 801648a:	f001 fb81 	bl	8017b90 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801648e:	69fb      	ldr	r3, [r7, #28]
 8016490:	78fa      	ldrb	r2, [r7, #3]
 8016492:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801649a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80164a4:	8b7b      	ldrh	r3, [r7, #26]
 80164a6:	089b      	lsrs	r3, r3, #2
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164b0:	b2da      	uxtb	r2, r3
 80164b2:	69fb      	ldr	r3, [r7, #28]
 80164b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80164bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	891b      	ldrh	r3, [r3, #8]
 80164c2:	4618      	mov	r0, r3
 80164c4:	f7f6 faec 	bl	800caa0 <lwip_htons>
 80164c8:	4603      	mov	r3, r0
 80164ca:	461a      	mov	r2, r3
 80164cc:	69fb      	ldr	r3, [r7, #28]
 80164ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	2200      	movs	r2, #0
 80164d4:	719a      	strb	r2, [r3, #6]
 80164d6:	2200      	movs	r2, #0
 80164d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80164da:	4b2a      	ldr	r3, [pc, #168]	; (8016584 <ip4_output_if_src+0x154>)
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f6 fade 	bl	800caa0 <lwip_htons>
 80164e4:	4603      	mov	r3, r0
 80164e6:	461a      	mov	r2, r3
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80164ec:	4b25      	ldr	r3, [pc, #148]	; (8016584 <ip4_output_if_src+0x154>)
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	3301      	adds	r3, #1
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	4b23      	ldr	r3, [pc, #140]	; (8016584 <ip4_output_if_src+0x154>)
 80164f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d104      	bne.n	8016508 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80164fe:	4b22      	ldr	r3, [pc, #136]	; (8016588 <ip4_output_if_src+0x158>)
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	60da      	str	r2, [r3, #12]
 8016506:	e003      	b.n	8016510 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	681a      	ldr	r2, [r3, #0]
 801650c:	69fb      	ldr	r3, [r7, #28]
 801650e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016510:	69fb      	ldr	r3, [r7, #28]
 8016512:	2200      	movs	r2, #0
 8016514:	729a      	strb	r2, [r3, #10]
 8016516:	2200      	movs	r2, #0
 8016518:	72da      	strb	r2, [r3, #11]
 801651a:	e00f      	b.n	801653c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	895b      	ldrh	r3, [r3, #10]
 8016520:	2b13      	cmp	r3, #19
 8016522:	d802      	bhi.n	801652a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016524:	f06f 0301 	mvn.w	r3, #1
 8016528:	e020      	b.n	801656c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016530:	69fb      	ldr	r3, [r7, #28]
 8016532:	691b      	ldr	r3, [r3, #16]
 8016534:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016536:	f107 0314 	add.w	r3, r7, #20
 801653a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801653e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00c      	beq.n	801655e <ip4_output_if_src+0x12e>
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	891a      	ldrh	r2, [r3, #8]
 8016548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801654c:	429a      	cmp	r2, r3
 801654e:	d906      	bls.n	801655e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016550:	687a      	ldr	r2, [r7, #4]
 8016552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016554:	68f8      	ldr	r0, [r7, #12]
 8016556:	f000 fd53 	bl	8017000 <ip4_frag>
 801655a:	4603      	mov	r3, r0
 801655c:	e006      	b.n	801656c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016560:	695b      	ldr	r3, [r3, #20]
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	68f9      	ldr	r1, [r7, #12]
 8016566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016568:	4798      	blx	r3
 801656a:	4603      	mov	r3, r0
}
 801656c:	4618      	mov	r0, r3
 801656e:	3720      	adds	r7, #32
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	0801da48 	.word	0x0801da48
 8016578:	0801da7c 	.word	0x0801da7c
 801657c:	0801da88 	.word	0x0801da88
 8016580:	0801dab0 	.word	0x0801dab0
 8016584:	20011ce6 	.word	0x20011ce6
 8016588:	0801df70 	.word	0x0801df70

0801658c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801658c:	b480      	push	{r7}
 801658e:	b085      	sub	sp, #20
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165a0:	d002      	beq.n	80165a8 <ip4_addr_isbroadcast_u32+0x1c>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d101      	bne.n	80165ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80165a8:	2301      	movs	r3, #1
 80165aa:	e02a      	b.n	8016602 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80165b2:	f003 0302 	and.w	r3, r3, #2
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d101      	bne.n	80165be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80165ba:	2300      	movs	r3, #0
 80165bc:	e021      	b.n	8016602 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	3304      	adds	r3, #4
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d101      	bne.n	80165ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80165ca:	2300      	movs	r3, #0
 80165cc:	e019      	b.n	8016602 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80165ce:	68fa      	ldr	r2, [r7, #12]
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	3304      	adds	r3, #4
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	405a      	eors	r2, r3
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	3308      	adds	r3, #8
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4013      	ands	r3, r2
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d10d      	bne.n	8016600 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	3308      	adds	r3, #8
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	43da      	mvns	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	3308      	adds	r3, #8
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d101      	bne.n	8016600 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80165fc:	2301      	movs	r3, #1
 80165fe:	e000      	b.n	8016602 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016600:	2300      	movs	r3, #0
  }
}
 8016602:	4618      	mov	r0, r3
 8016604:	3714      	adds	r7, #20
 8016606:	46bd      	mov	sp, r7
 8016608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660c:	4770      	bx	lr
	...

08016610 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b084      	sub	sp, #16
 8016614:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016616:	2300      	movs	r3, #0
 8016618:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801661a:	4b12      	ldr	r3, [pc, #72]	; (8016664 <ip_reass_tmr+0x54>)
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016620:	e018      	b.n	8016654 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	7fdb      	ldrb	r3, [r3, #31]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d00b      	beq.n	8016642 <ip_reass_tmr+0x32>
      r->timer--;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	7fdb      	ldrb	r3, [r3, #31]
 801662e:	3b01      	subs	r3, #1
 8016630:	b2da      	uxtb	r2, r3
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	60fb      	str	r3, [r7, #12]
 8016640:	e008      	b.n	8016654 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801664c:	68b9      	ldr	r1, [r7, #8]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 f80a 	bl	8016668 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d1e3      	bne.n	8016622 <ip_reass_tmr+0x12>
    }
  }
}
 801665a:	bf00      	nop
 801665c:	bf00      	nop
 801665e:	3710      	adds	r7, #16
 8016660:	46bd      	mov	sp, r7
 8016662:	bd80      	pop	{r7, pc}
 8016664:	20011ce8 	.word	0x20011ce8

08016668 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b088      	sub	sp, #32
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016672:	2300      	movs	r3, #0
 8016674:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016676:	683a      	ldr	r2, [r7, #0]
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	429a      	cmp	r2, r3
 801667c:	d105      	bne.n	801668a <ip_reass_free_complete_datagram+0x22>
 801667e:	4b45      	ldr	r3, [pc, #276]	; (8016794 <ip_reass_free_complete_datagram+0x12c>)
 8016680:	22ab      	movs	r2, #171	; 0xab
 8016682:	4945      	ldr	r1, [pc, #276]	; (8016798 <ip_reass_free_complete_datagram+0x130>)
 8016684:	4845      	ldr	r0, [pc, #276]	; (801679c <ip_reass_free_complete_datagram+0x134>)
 8016686:	f001 fa83 	bl	8017b90 <iprintf>
  if (prev != NULL) {
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d00a      	beq.n	80166a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	687a      	ldr	r2, [r7, #4]
 8016696:	429a      	cmp	r2, r3
 8016698:	d005      	beq.n	80166a6 <ip_reass_free_complete_datagram+0x3e>
 801669a:	4b3e      	ldr	r3, [pc, #248]	; (8016794 <ip_reass_free_complete_datagram+0x12c>)
 801669c:	22ad      	movs	r2, #173	; 0xad
 801669e:	4940      	ldr	r1, [pc, #256]	; (80167a0 <ip_reass_free_complete_datagram+0x138>)
 80166a0:	483e      	ldr	r0, [pc, #248]	; (801679c <ip_reass_free_complete_datagram+0x134>)
 80166a2:	f001 fa75 	bl	8017b90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	889b      	ldrh	r3, [r3, #4]
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d12a      	bne.n	801670e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	6858      	ldr	r0, [r3, #4]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	3308      	adds	r3, #8
 80166ce:	2214      	movs	r2, #20
 80166d0:	4619      	mov	r1, r3
 80166d2:	f001 f998 	bl	8017a06 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80166d6:	2101      	movs	r1, #1
 80166d8:	69b8      	ldr	r0, [r7, #24]
 80166da:	f7ff fc51 	bl	8015f80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80166de:	69b8      	ldr	r0, [r7, #24]
 80166e0:	f7f7 ff72 	bl	800e5c8 <pbuf_clen>
 80166e4:	4603      	mov	r3, r0
 80166e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80166e8:	8bfa      	ldrh	r2, [r7, #30]
 80166ea:	8a7b      	ldrh	r3, [r7, #18]
 80166ec:	4413      	add	r3, r2
 80166ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166f2:	db05      	blt.n	8016700 <ip_reass_free_complete_datagram+0x98>
 80166f4:	4b27      	ldr	r3, [pc, #156]	; (8016794 <ip_reass_free_complete_datagram+0x12c>)
 80166f6:	22bc      	movs	r2, #188	; 0xbc
 80166f8:	492a      	ldr	r1, [pc, #168]	; (80167a4 <ip_reass_free_complete_datagram+0x13c>)
 80166fa:	4828      	ldr	r0, [pc, #160]	; (801679c <ip_reass_free_complete_datagram+0x134>)
 80166fc:	f001 fa48 	bl	8017b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016700:	8bfa      	ldrh	r2, [r7, #30]
 8016702:	8a7b      	ldrh	r3, [r7, #18]
 8016704:	4413      	add	r3, r2
 8016706:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016708:	69b8      	ldr	r0, [r7, #24]
 801670a:	f7f7 fecf 	bl	800e4ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016714:	e01f      	b.n	8016756 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016716:	69bb      	ldr	r3, [r7, #24]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801671c:	69bb      	ldr	r3, [r7, #24]
 801671e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016726:	68f8      	ldr	r0, [r7, #12]
 8016728:	f7f7 ff4e 	bl	800e5c8 <pbuf_clen>
 801672c:	4603      	mov	r3, r0
 801672e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016730:	8bfa      	ldrh	r2, [r7, #30]
 8016732:	8a7b      	ldrh	r3, [r7, #18]
 8016734:	4413      	add	r3, r2
 8016736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801673a:	db05      	blt.n	8016748 <ip_reass_free_complete_datagram+0xe0>
 801673c:	4b15      	ldr	r3, [pc, #84]	; (8016794 <ip_reass_free_complete_datagram+0x12c>)
 801673e:	22cc      	movs	r2, #204	; 0xcc
 8016740:	4918      	ldr	r1, [pc, #96]	; (80167a4 <ip_reass_free_complete_datagram+0x13c>)
 8016742:	4816      	ldr	r0, [pc, #88]	; (801679c <ip_reass_free_complete_datagram+0x134>)
 8016744:	f001 fa24 	bl	8017b90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016748:	8bfa      	ldrh	r2, [r7, #30]
 801674a:	8a7b      	ldrh	r3, [r7, #18]
 801674c:	4413      	add	r3, r2
 801674e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f7f7 feab 	bl	800e4ac <pbuf_free>
  while (p != NULL) {
 8016756:	69bb      	ldr	r3, [r7, #24]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d1dc      	bne.n	8016716 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801675c:	6839      	ldr	r1, [r7, #0]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f8c2 	bl	80168e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016764:	4b10      	ldr	r3, [pc, #64]	; (80167a8 <ip_reass_free_complete_datagram+0x140>)
 8016766:	881b      	ldrh	r3, [r3, #0]
 8016768:	8bfa      	ldrh	r2, [r7, #30]
 801676a:	429a      	cmp	r2, r3
 801676c:	d905      	bls.n	801677a <ip_reass_free_complete_datagram+0x112>
 801676e:	4b09      	ldr	r3, [pc, #36]	; (8016794 <ip_reass_free_complete_datagram+0x12c>)
 8016770:	22d2      	movs	r2, #210	; 0xd2
 8016772:	490e      	ldr	r1, [pc, #56]	; (80167ac <ip_reass_free_complete_datagram+0x144>)
 8016774:	4809      	ldr	r0, [pc, #36]	; (801679c <ip_reass_free_complete_datagram+0x134>)
 8016776:	f001 fa0b 	bl	8017b90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801677a:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <ip_reass_free_complete_datagram+0x140>)
 801677c:	881a      	ldrh	r2, [r3, #0]
 801677e:	8bfb      	ldrh	r3, [r7, #30]
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	b29a      	uxth	r2, r3
 8016784:	4b08      	ldr	r3, [pc, #32]	; (80167a8 <ip_reass_free_complete_datagram+0x140>)
 8016786:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016788:	8bfb      	ldrh	r3, [r7, #30]
}
 801678a:	4618      	mov	r0, r3
 801678c:	3720      	adds	r7, #32
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	0801dae0 	.word	0x0801dae0
 8016798:	0801db1c 	.word	0x0801db1c
 801679c:	0801db28 	.word	0x0801db28
 80167a0:	0801db50 	.word	0x0801db50
 80167a4:	0801db64 	.word	0x0801db64
 80167a8:	20011cec 	.word	0x20011cec
 80167ac:	0801db84 	.word	0x0801db84

080167b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b08a      	sub	sp, #40	; 0x28
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
 80167b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80167ba:	2300      	movs	r3, #0
 80167bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80167be:	2300      	movs	r3, #0
 80167c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80167c2:	2300      	movs	r3, #0
 80167c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80167c6:	2300      	movs	r3, #0
 80167c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80167ca:	2300      	movs	r3, #0
 80167cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80167ce:	4b28      	ldr	r3, [pc, #160]	; (8016870 <ip_reass_remove_oldest_datagram+0xc0>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80167d4:	e030      	b.n	8016838 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80167d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d8:	695a      	ldr	r2, [r3, #20]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d10c      	bne.n	80167fc <ip_reass_remove_oldest_datagram+0x4c>
 80167e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e4:	699a      	ldr	r2, [r3, #24]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	691b      	ldr	r3, [r3, #16]
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d106      	bne.n	80167fc <ip_reass_remove_oldest_datagram+0x4c>
 80167ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f0:	899a      	ldrh	r2, [r3, #12]
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	889b      	ldrh	r3, [r3, #4]
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d014      	beq.n	8016826 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	3301      	adds	r3, #1
 8016800:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016802:	6a3b      	ldr	r3, [r7, #32]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d104      	bne.n	8016812 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	61bb      	str	r3, [r7, #24]
 8016810:	e009      	b.n	8016826 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016814:	7fda      	ldrb	r2, [r3, #31]
 8016816:	6a3b      	ldr	r3, [r7, #32]
 8016818:	7fdb      	ldrb	r3, [r3, #31]
 801681a:	429a      	cmp	r2, r3
 801681c:	d803      	bhi.n	8016826 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016820:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016822:	69fb      	ldr	r3, [r7, #28]
 8016824:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d001      	beq.n	8016832 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016830:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801683a:	2b00      	cmp	r3, #0
 801683c:	d1cb      	bne.n	80167d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801683e:	6a3b      	ldr	r3, [r7, #32]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d008      	beq.n	8016856 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016844:	69b9      	ldr	r1, [r7, #24]
 8016846:	6a38      	ldr	r0, [r7, #32]
 8016848:	f7ff ff0e 	bl	8016668 <ip_reass_free_complete_datagram>
 801684c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801684e:	697a      	ldr	r2, [r7, #20]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4413      	add	r3, r2
 8016854:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016856:	697a      	ldr	r2, [r7, #20]
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	429a      	cmp	r2, r3
 801685c:	da02      	bge.n	8016864 <ip_reass_remove_oldest_datagram+0xb4>
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	2b01      	cmp	r3, #1
 8016862:	dcac      	bgt.n	80167be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016864:	697b      	ldr	r3, [r7, #20]
}
 8016866:	4618      	mov	r0, r3
 8016868:	3728      	adds	r7, #40	; 0x28
 801686a:	46bd      	mov	sp, r7
 801686c:	bd80      	pop	{r7, pc}
 801686e:	bf00      	nop
 8016870:	20011ce8 	.word	0x20011ce8

08016874 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b084      	sub	sp, #16
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801687e:	2003      	movs	r0, #3
 8016880:	f7f6 fefe 	bl	800d680 <memp_malloc>
 8016884:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d110      	bne.n	80168ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801688c:	6839      	ldr	r1, [r7, #0]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f7ff ff8e 	bl	80167b0 <ip_reass_remove_oldest_datagram>
 8016894:	4602      	mov	r2, r0
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	4293      	cmp	r3, r2
 801689a:	dc03      	bgt.n	80168a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801689c:	2003      	movs	r0, #3
 801689e:	f7f6 feef 	bl	800d680 <memp_malloc>
 80168a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d101      	bne.n	80168ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80168aa:	2300      	movs	r3, #0
 80168ac:	e016      	b.n	80168dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80168ae:	2220      	movs	r2, #32
 80168b0:	2100      	movs	r1, #0
 80168b2:	68f8      	ldr	r0, [r7, #12]
 80168b4:	f001 f8cf 	bl	8017a56 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	220f      	movs	r2, #15
 80168bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80168be:	4b09      	ldr	r3, [pc, #36]	; (80168e4 <ip_reass_enqueue_new_datagram+0x70>)
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80168c6:	4a07      	ldr	r2, [pc, #28]	; (80168e4 <ip_reass_enqueue_new_datagram+0x70>)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	3308      	adds	r3, #8
 80168d0:	2214      	movs	r2, #20
 80168d2:	6879      	ldr	r1, [r7, #4]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f001 f896 	bl	8017a06 <memcpy>
  return ipr;
 80168da:	68fb      	ldr	r3, [r7, #12]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	20011ce8 	.word	0x20011ce8

080168e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80168f2:	4b10      	ldr	r3, [pc, #64]	; (8016934 <ip_reass_dequeue_datagram+0x4c>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d104      	bne.n	8016906 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	4a0c      	ldr	r2, [pc, #48]	; (8016934 <ip_reass_dequeue_datagram+0x4c>)
 8016902:	6013      	str	r3, [r2, #0]
 8016904:	e00d      	b.n	8016922 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d106      	bne.n	801691a <ip_reass_dequeue_datagram+0x32>
 801690c:	4b0a      	ldr	r3, [pc, #40]	; (8016938 <ip_reass_dequeue_datagram+0x50>)
 801690e:	f240 1245 	movw	r2, #325	; 0x145
 8016912:	490a      	ldr	r1, [pc, #40]	; (801693c <ip_reass_dequeue_datagram+0x54>)
 8016914:	480a      	ldr	r0, [pc, #40]	; (8016940 <ip_reass_dequeue_datagram+0x58>)
 8016916:	f001 f93b 	bl	8017b90 <iprintf>
    prev->next = ipr->next;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016922:	6879      	ldr	r1, [r7, #4]
 8016924:	2003      	movs	r0, #3
 8016926:	f7f6 ff21 	bl	800d76c <memp_free>
}
 801692a:	bf00      	nop
 801692c:	3708      	adds	r7, #8
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	20011ce8 	.word	0x20011ce8
 8016938:	0801dae0 	.word	0x0801dae0
 801693c:	0801dba8 	.word	0x0801dba8
 8016940:	0801db28 	.word	0x0801db28

08016944 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b08c      	sub	sp, #48	; 0x30
 8016948:	af00      	add	r7, sp, #0
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016950:	2300      	movs	r3, #0
 8016952:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016954:	2301      	movs	r3, #1
 8016956:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801695e:	69fb      	ldr	r3, [r7, #28]
 8016960:	885b      	ldrh	r3, [r3, #2]
 8016962:	b29b      	uxth	r3, r3
 8016964:	4618      	mov	r0, r3
 8016966:	f7f6 f89b 	bl	800caa0 <lwip_htons>
 801696a:	4603      	mov	r3, r0
 801696c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801696e:	69fb      	ldr	r3, [r7, #28]
 8016970:	781b      	ldrb	r3, [r3, #0]
 8016972:	f003 030f 	and.w	r3, r3, #15
 8016976:	b2db      	uxtb	r3, r3
 8016978:	009b      	lsls	r3, r3, #2
 801697a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801697c:	7e7b      	ldrb	r3, [r7, #25]
 801697e:	b29b      	uxth	r3, r3
 8016980:	8b7a      	ldrh	r2, [r7, #26]
 8016982:	429a      	cmp	r2, r3
 8016984:	d202      	bcs.n	801698c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801698a:	e135      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801698c:	7e7b      	ldrb	r3, [r7, #25]
 801698e:	b29b      	uxth	r3, r3
 8016990:	8b7a      	ldrh	r2, [r7, #26]
 8016992:	1ad3      	subs	r3, r2, r3
 8016994:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	88db      	ldrh	r3, [r3, #6]
 801699a:	b29b      	uxth	r3, r3
 801699c:	4618      	mov	r0, r3
 801699e:	f7f6 f87f 	bl	800caa0 <lwip_htons>
 80169a2:	4603      	mov	r3, r0
 80169a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	00db      	lsls	r3, r3, #3
 80169ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	685b      	ldr	r3, [r3, #4]
 80169b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80169b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b6:	2200      	movs	r2, #0
 80169b8:	701a      	strb	r2, [r3, #0]
 80169ba:	2200      	movs	r2, #0
 80169bc:	705a      	strb	r2, [r3, #1]
 80169be:	2200      	movs	r2, #0
 80169c0:	709a      	strb	r2, [r3, #2]
 80169c2:	2200      	movs	r2, #0
 80169c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80169c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c8:	8afa      	ldrh	r2, [r7, #22]
 80169ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80169cc:	8afa      	ldrh	r2, [r7, #22]
 80169ce:	8b7b      	ldrh	r3, [r7, #26]
 80169d0:	4413      	add	r3, r2
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80169d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169da:	88db      	ldrh	r3, [r3, #6]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	8afa      	ldrh	r2, [r7, #22]
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d902      	bls.n	80169ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169e8:	e106      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	627b      	str	r3, [r7, #36]	; 0x24
 80169f0:	e068      	b.n	8016ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80169f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80169f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169fa:	889b      	ldrh	r3, [r3, #4]
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	889b      	ldrh	r3, [r3, #4]
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d235      	bcs.n	8016a74 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a0c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d020      	beq.n	8016a56 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a16:	889b      	ldrh	r3, [r3, #4]
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a1c:	88db      	ldrh	r3, [r3, #6]
 8016a1e:	b29b      	uxth	r3, r3
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d307      	bcc.n	8016a34 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a26:	88db      	ldrh	r3, [r3, #6]
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	889b      	ldrh	r3, [r3, #4]
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d902      	bls.n	8016a3a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a38:	e0de      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3c:	68ba      	ldr	r2, [r7, #8]
 8016a3e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a42:	88db      	ldrh	r3, [r3, #6]
 8016a44:	b29a      	uxth	r2, r3
 8016a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a48:	889b      	ldrh	r3, [r3, #4]
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d03d      	beq.n	8016acc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016a50:	2300      	movs	r3, #0
 8016a52:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016a54:	e03a      	b.n	8016acc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a58:	88db      	ldrh	r3, [r3, #6]
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	693b      	ldr	r3, [r7, #16]
 8016a5e:	889b      	ldrh	r3, [r3, #4]
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	429a      	cmp	r2, r3
 8016a64:	d902      	bls.n	8016a6c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a6a:	e0c5      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	605a      	str	r2, [r3, #4]
      break;
 8016a72:	e02b      	b.n	8016acc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a76:	889b      	ldrh	r3, [r3, #4]
 8016a78:	b29a      	uxth	r2, r3
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	889b      	ldrh	r3, [r3, #4]
 8016a7e:	b29b      	uxth	r3, r3
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d102      	bne.n	8016a8a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a88:	e0b6      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a8c:	889b      	ldrh	r3, [r3, #4]
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	88db      	ldrh	r3, [r3, #6]
 8016a94:	b29b      	uxth	r3, r3
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d202      	bcs.n	8016aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a9e:	e0ab      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d009      	beq.n	8016aba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa8:	88db      	ldrh	r3, [r3, #6]
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	889b      	ldrh	r3, [r3, #4]
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d001      	beq.n	8016aba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d193      	bne.n	80169f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016aca:	e000      	b.n	8016ace <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016acc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d12d      	bne.n	8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d01c      	beq.n	8016b14 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016adc:	88db      	ldrh	r3, [r3, #6]
 8016ade:	b29a      	uxth	r2, r3
 8016ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae2:	889b      	ldrh	r3, [r3, #4]
 8016ae4:	b29b      	uxth	r3, r3
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d906      	bls.n	8016af8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016aea:	4b45      	ldr	r3, [pc, #276]	; (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016aec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016af0:	4944      	ldr	r1, [pc, #272]	; (8016c04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016af2:	4845      	ldr	r0, [pc, #276]	; (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016af4:	f001 f84c 	bl	8017b90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afa:	68ba      	ldr	r2, [r7, #8]
 8016afc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b00:	88db      	ldrh	r3, [r3, #6]
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b06:	889b      	ldrh	r3, [r3, #4]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d010      	beq.n	8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	623b      	str	r3, [r7, #32]
 8016b12:	e00d      	b.n	8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	685b      	ldr	r3, [r3, #4]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016b1c:	4b38      	ldr	r3, [pc, #224]	; (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016b1e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016b22:	493a      	ldr	r1, [pc, #232]	; (8016c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016b24:	4838      	ldr	r0, [pc, #224]	; (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016b26:	f001 f833 	bl	8017b90 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	68ba      	ldr	r2, [r7, #8]
 8016b2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d105      	bne.n	8016b42 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	7f9b      	ldrb	r3, [r3, #30]
 8016b3a:	f003 0301 	and.w	r3, r3, #1
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d059      	beq.n	8016bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016b42:	6a3b      	ldr	r3, [r7, #32]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d04f      	beq.n	8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d006      	beq.n	8016b5e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	889b      	ldrh	r3, [r3, #4]
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d002      	beq.n	8016b64 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	623b      	str	r3, [r7, #32]
 8016b62:	e041      	b.n	8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b66:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b6e:	e012      	b.n	8016b96 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b72:	685b      	ldr	r3, [r3, #4]
 8016b74:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b78:	88db      	ldrh	r3, [r3, #6]
 8016b7a:	b29a      	uxth	r2, r3
 8016b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7e:	889b      	ldrh	r3, [r3, #4]
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d002      	beq.n	8016b8c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016b86:	2300      	movs	r3, #0
 8016b88:	623b      	str	r3, [r7, #32]
            break;
 8016b8a:	e007      	b.n	8016b9c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b8e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1e9      	bne.n	8016b70 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016b9c:	6a3b      	ldr	r3, [r7, #32]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d022      	beq.n	8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d106      	bne.n	8016bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016baa:	4b15      	ldr	r3, [pc, #84]	; (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bac:	f240 12df 	movw	r2, #479	; 0x1df
 8016bb0:	4917      	ldr	r1, [pc, #92]	; (8016c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016bb2:	4815      	ldr	r0, [pc, #84]	; (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bb4:	f000 ffec 	bl	8017b90 <iprintf>
          LWIP_ASSERT("sanity check",
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	685b      	ldr	r3, [r3, #4]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	d106      	bne.n	8016bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016bc4:	4b0e      	ldr	r3, [pc, #56]	; (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016bca:	4911      	ldr	r1, [pc, #68]	; (8016c10 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016bcc:	480e      	ldr	r0, [pc, #56]	; (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016bce:	f000 ffdf 	bl	8017b90 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d006      	beq.n	8016be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016bda:	4b09      	ldr	r3, [pc, #36]	; (8016c00 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016bdc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016be0:	490c      	ldr	r1, [pc, #48]	; (8016c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016be2:	4809      	ldr	r0, [pc, #36]	; (8016c08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016be4:	f000 ffd4 	bl	8017b90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016be8:	6a3b      	ldr	r3, [r7, #32]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	bf14      	ite	ne
 8016bee:	2301      	movne	r3, #1
 8016bf0:	2300      	moveq	r3, #0
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	e000      	b.n	8016bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016bf6:	2300      	movs	r3, #0
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3730      	adds	r7, #48	; 0x30
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}
 8016c00:	0801dae0 	.word	0x0801dae0
 8016c04:	0801dbc4 	.word	0x0801dbc4
 8016c08:	0801db28 	.word	0x0801db28
 8016c0c:	0801dbe4 	.word	0x0801dbe4
 8016c10:	0801dc1c 	.word	0x0801dc1c
 8016c14:	0801dc2c 	.word	0x0801dc2c

08016c18 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b08e      	sub	sp, #56	; 0x38
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	f003 030f 	and.w	r3, r3, #15
 8016c2e:	b2db      	uxtb	r3, r3
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	2b14      	cmp	r3, #20
 8016c36:	f040 8171 	bne.w	8016f1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c3c:	88db      	ldrh	r3, [r3, #6]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7f5 ff2d 	bl	800caa0 <lwip_htons>
 8016c46:	4603      	mov	r3, r0
 8016c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	00db      	lsls	r3, r3, #3
 8016c50:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c54:	885b      	ldrh	r3, [r3, #2]
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7f5 ff21 	bl	800caa0 <lwip_htons>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c64:	781b      	ldrb	r3, [r3, #0]
 8016c66:	f003 030f 	and.w	r3, r3, #15
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	009b      	lsls	r3, r3, #2
 8016c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016c72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	f0c0 8150 	bcc.w	8016f20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016c88:	1ad3      	subs	r3, r2, r3
 8016c8a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f7f7 fc9b 	bl	800e5c8 <pbuf_clen>
 8016c92:	4603      	mov	r3, r0
 8016c94:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016c96:	4b8c      	ldr	r3, [pc, #560]	; (8016ec8 <ip4_reass+0x2b0>)
 8016c98:	881b      	ldrh	r3, [r3, #0]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	8c3b      	ldrh	r3, [r7, #32]
 8016c9e:	4413      	add	r3, r2
 8016ca0:	2b0a      	cmp	r3, #10
 8016ca2:	dd10      	ble.n	8016cc6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016ca4:	8c3b      	ldrh	r3, [r7, #32]
 8016ca6:	4619      	mov	r1, r3
 8016ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016caa:	f7ff fd81 	bl	80167b0 <ip_reass_remove_oldest_datagram>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	f000 8137 	beq.w	8016f24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016cb6:	4b84      	ldr	r3, [pc, #528]	; (8016ec8 <ip4_reass+0x2b0>)
 8016cb8:	881b      	ldrh	r3, [r3, #0]
 8016cba:	461a      	mov	r2, r3
 8016cbc:	8c3b      	ldrh	r3, [r7, #32]
 8016cbe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016cc0:	2b0a      	cmp	r3, #10
 8016cc2:	f300 812f 	bgt.w	8016f24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016cc6:	4b81      	ldr	r3, [pc, #516]	; (8016ecc <ip4_reass+0x2b4>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	633b      	str	r3, [r7, #48]	; 0x30
 8016ccc:	e015      	b.n	8016cfa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd0:	695a      	ldr	r2, [r3, #20]
 8016cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd4:	68db      	ldr	r3, [r3, #12]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d10c      	bne.n	8016cf4 <ip4_reass+0xdc>
 8016cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cdc:	699a      	ldr	r2, [r3, #24]
 8016cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce0:	691b      	ldr	r3, [r3, #16]
 8016ce2:	429a      	cmp	r2, r3
 8016ce4:	d106      	bne.n	8016cf4 <ip4_reass+0xdc>
 8016ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ce8:	899a      	ldrh	r2, [r3, #12]
 8016cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cec:	889b      	ldrh	r3, [r3, #4]
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d006      	beq.n	8016d02 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d1e6      	bne.n	8016cce <ip4_reass+0xb6>
 8016d00:	e000      	b.n	8016d04 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016d02:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d109      	bne.n	8016d1e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016d0a:	8c3b      	ldrh	r3, [r7, #32]
 8016d0c:	4619      	mov	r1, r3
 8016d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016d10:	f7ff fdb0 	bl	8016874 <ip_reass_enqueue_new_datagram>
 8016d14:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d11c      	bne.n	8016d56 <ip4_reass+0x13e>
      goto nullreturn;
 8016d1c:	e105      	b.n	8016f2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d20:	88db      	ldrh	r3, [r3, #6]
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f5 febb 	bl	800caa0 <lwip_htons>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d110      	bne.n	8016d56 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d36:	89db      	ldrh	r3, [r3, #14]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7f5 feb1 	bl	800caa0 <lwip_htons>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d006      	beq.n	8016d56 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d4a:	3308      	adds	r3, #8
 8016d4c:	2214      	movs	r2, #20
 8016d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d50:	4618      	mov	r0, r3
 8016d52:	f000 fe58 	bl	8017a06 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d58:	88db      	ldrh	r3, [r3, #6]
 8016d5a:	b29b      	uxth	r3, r3
 8016d5c:	f003 0320 	and.w	r3, r3, #32
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	bf0c      	ite	eq
 8016d64:	2301      	moveq	r3, #1
 8016d66:	2300      	movne	r3, #0
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d00e      	beq.n	8016d90 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016d76:	4413      	add	r3, r2
 8016d78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016d7a:	8b7a      	ldrh	r2, [r7, #26]
 8016d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d7e:	429a      	cmp	r2, r3
 8016d80:	f0c0 80a0 	bcc.w	8016ec4 <ip4_reass+0x2ac>
 8016d84:	8b7b      	ldrh	r3, [r7, #26]
 8016d86:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016d8a:	4293      	cmp	r3, r2
 8016d8c:	f200 809a 	bhi.w	8016ec4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016d90:	69fa      	ldr	r2, [r7, #28]
 8016d92:	6879      	ldr	r1, [r7, #4]
 8016d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d96:	f7ff fdd5 	bl	8016944 <ip_reass_chain_frag_into_datagram_and_validate>
 8016d9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016da2:	f000 809b 	beq.w	8016edc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016da6:	4b48      	ldr	r3, [pc, #288]	; (8016ec8 <ip4_reass+0x2b0>)
 8016da8:	881a      	ldrh	r2, [r3, #0]
 8016daa:	8c3b      	ldrh	r3, [r7, #32]
 8016dac:	4413      	add	r3, r2
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	4b45      	ldr	r3, [pc, #276]	; (8016ec8 <ip4_reass+0x2b0>)
 8016db2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d00d      	beq.n	8016dd6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016dba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016dbe:	4413      	add	r3, r2
 8016dc0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dc4:	8a7a      	ldrh	r2, [r7, #18]
 8016dc6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dca:	7f9b      	ldrb	r3, [r3, #30]
 8016dcc:	f043 0301 	orr.w	r3, r3, #1
 8016dd0:	b2da      	uxtb	r2, r3
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d171      	bne.n	8016ec0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dde:	8b9b      	ldrh	r3, [r3, #28]
 8016de0:	3314      	adds	r3, #20
 8016de2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df0:	685b      	ldr	r3, [r3, #4]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df8:	3308      	adds	r3, #8
 8016dfa:	2214      	movs	r2, #20
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e00:	f000 fe01 	bl	8017a06 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016e04:	8a3b      	ldrh	r3, [r7, #16]
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7f5 fe4a 	bl	800caa0 <lwip_htons>
 8016e0c:	4603      	mov	r3, r0
 8016e0e:	461a      	mov	r2, r3
 8016e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e16:	2200      	movs	r2, #0
 8016e18:	719a      	strb	r2, [r3, #6]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e20:	2200      	movs	r2, #0
 8016e22:	729a      	strb	r2, [r3, #10]
 8016e24:	2200      	movs	r2, #0
 8016e26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e2a:	685b      	ldr	r3, [r3, #4]
 8016e2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016e2e:	e00d      	b.n	8016e4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016e36:	2114      	movs	r1, #20
 8016e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016e3a:	f7f7 fab1 	bl	800e3a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016e3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f7f7 fc01 	bl	800e648 <pbuf_cat>
      r = iprh->next_pbuf;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d1ee      	bne.n	8016e30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016e52:	4b1e      	ldr	r3, [pc, #120]	; (8016ecc <ip4_reass+0x2b4>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	d102      	bne.n	8016e62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e60:	e010      	b.n	8016e84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e62:	4b1a      	ldr	r3, [pc, #104]	; (8016ecc <ip4_reass+0x2b4>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e68:	e007      	b.n	8016e7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d006      	beq.n	8016e82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d1f4      	bne.n	8016e6a <ip4_reass+0x252>
 8016e80:	e000      	b.n	8016e84 <ip4_reass+0x26c>
          break;
 8016e82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016e88:	f7ff fd2e 	bl	80168e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f7f7 fb9b 	bl	800e5c8 <pbuf_clen>
 8016e92:	4603      	mov	r3, r0
 8016e94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016e96:	4b0c      	ldr	r3, [pc, #48]	; (8016ec8 <ip4_reass+0x2b0>)
 8016e98:	881b      	ldrh	r3, [r3, #0]
 8016e9a:	8c3a      	ldrh	r2, [r7, #32]
 8016e9c:	429a      	cmp	r2, r3
 8016e9e:	d906      	bls.n	8016eae <ip4_reass+0x296>
 8016ea0:	4b0b      	ldr	r3, [pc, #44]	; (8016ed0 <ip4_reass+0x2b8>)
 8016ea2:	f240 229b 	movw	r2, #667	; 0x29b
 8016ea6:	490b      	ldr	r1, [pc, #44]	; (8016ed4 <ip4_reass+0x2bc>)
 8016ea8:	480b      	ldr	r0, [pc, #44]	; (8016ed8 <ip4_reass+0x2c0>)
 8016eaa:	f000 fe71 	bl	8017b90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016eae:	4b06      	ldr	r3, [pc, #24]	; (8016ec8 <ip4_reass+0x2b0>)
 8016eb0:	881a      	ldrh	r2, [r3, #0]
 8016eb2:	8c3b      	ldrh	r3, [r7, #32]
 8016eb4:	1ad3      	subs	r3, r2, r3
 8016eb6:	b29a      	uxth	r2, r3
 8016eb8:	4b03      	ldr	r3, [pc, #12]	; (8016ec8 <ip4_reass+0x2b0>)
 8016eba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	e038      	b.n	8016f32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	e036      	b.n	8016f32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016ec4:	bf00      	nop
 8016ec6:	e00a      	b.n	8016ede <ip4_reass+0x2c6>
 8016ec8:	20011cec 	.word	0x20011cec
 8016ecc:	20011ce8 	.word	0x20011ce8
 8016ed0:	0801dae0 	.word	0x0801dae0
 8016ed4:	0801dc50 	.word	0x0801dc50
 8016ed8:	0801db28 	.word	0x0801db28
    goto nullreturn_ipr;
 8016edc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d106      	bne.n	8016ef2 <ip4_reass+0x2da>
 8016ee4:	4b15      	ldr	r3, [pc, #84]	; (8016f3c <ip4_reass+0x324>)
 8016ee6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016eea:	4915      	ldr	r1, [pc, #84]	; (8016f40 <ip4_reass+0x328>)
 8016eec:	4815      	ldr	r0, [pc, #84]	; (8016f44 <ip4_reass+0x32c>)
 8016eee:	f000 fe4f 	bl	8017b90 <iprintf>
  if (ipr->p == NULL) {
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d116      	bne.n	8016f28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016efa:	4b13      	ldr	r3, [pc, #76]	; (8016f48 <ip4_reass+0x330>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d006      	beq.n	8016f12 <ip4_reass+0x2fa>
 8016f04:	4b0d      	ldr	r3, [pc, #52]	; (8016f3c <ip4_reass+0x324>)
 8016f06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016f0a:	4910      	ldr	r1, [pc, #64]	; (8016f4c <ip4_reass+0x334>)
 8016f0c:	480d      	ldr	r0, [pc, #52]	; (8016f44 <ip4_reass+0x32c>)
 8016f0e:	f000 fe3f 	bl	8017b90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016f12:	2100      	movs	r1, #0
 8016f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f16:	f7ff fce7 	bl	80168e8 <ip_reass_dequeue_datagram>
 8016f1a:	e006      	b.n	8016f2a <ip4_reass+0x312>
    goto nullreturn;
 8016f1c:	bf00      	nop
 8016f1e:	e004      	b.n	8016f2a <ip4_reass+0x312>
    goto nullreturn;
 8016f20:	bf00      	nop
 8016f22:	e002      	b.n	8016f2a <ip4_reass+0x312>
      goto nullreturn;
 8016f24:	bf00      	nop
 8016f26:	e000      	b.n	8016f2a <ip4_reass+0x312>
  }

nullreturn:
 8016f28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f7f7 fabe 	bl	800e4ac <pbuf_free>
  return NULL;
 8016f30:	2300      	movs	r3, #0
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3738      	adds	r7, #56	; 0x38
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}
 8016f3a:	bf00      	nop
 8016f3c:	0801dae0 	.word	0x0801dae0
 8016f40:	0801dc6c 	.word	0x0801dc6c
 8016f44:	0801db28 	.word	0x0801db28
 8016f48:	20011ce8 	.word	0x20011ce8
 8016f4c:	0801dc78 	.word	0x0801dc78

08016f50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016f54:	2004      	movs	r0, #4
 8016f56:	f7f6 fb93 	bl	800d680 <memp_malloc>
 8016f5a:	4603      	mov	r3, r0
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	bd80      	pop	{r7, pc}

08016f60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d106      	bne.n	8016f7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8016f6e:	4b07      	ldr	r3, [pc, #28]	; (8016f8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016f70:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016f74:	4906      	ldr	r1, [pc, #24]	; (8016f90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016f76:	4807      	ldr	r0, [pc, #28]	; (8016f94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016f78:	f000 fe0a 	bl	8017b90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016f7c:	6879      	ldr	r1, [r7, #4]
 8016f7e:	2004      	movs	r0, #4
 8016f80:	f7f6 fbf4 	bl	800d76c <memp_free>
}
 8016f84:	bf00      	nop
 8016f86:	3708      	adds	r7, #8
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	0801dae0 	.word	0x0801dae0
 8016f90:	0801dc98 	.word	0x0801dc98
 8016f94:	0801db28 	.word	0x0801db28

08016f98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d106      	bne.n	8016fb8 <ipfrag_free_pbuf_custom+0x20>
 8016faa:	4b11      	ldr	r3, [pc, #68]	; (8016ff0 <ipfrag_free_pbuf_custom+0x58>)
 8016fac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016fb0:	4910      	ldr	r1, [pc, #64]	; (8016ff4 <ipfrag_free_pbuf_custom+0x5c>)
 8016fb2:	4811      	ldr	r0, [pc, #68]	; (8016ff8 <ipfrag_free_pbuf_custom+0x60>)
 8016fb4:	f000 fdec 	bl	8017b90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d006      	beq.n	8016fce <ipfrag_free_pbuf_custom+0x36>
 8016fc0:	4b0b      	ldr	r3, [pc, #44]	; (8016ff0 <ipfrag_free_pbuf_custom+0x58>)
 8016fc2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016fc6:	490d      	ldr	r1, [pc, #52]	; (8016ffc <ipfrag_free_pbuf_custom+0x64>)
 8016fc8:	480b      	ldr	r0, [pc, #44]	; (8016ff8 <ipfrag_free_pbuf_custom+0x60>)
 8016fca:	f000 fde1 	bl	8017b90 <iprintf>
  if (pcr->original != NULL) {
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	695b      	ldr	r3, [r3, #20]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d004      	beq.n	8016fe0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	695b      	ldr	r3, [r3, #20]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7f7 fa66 	bl	800e4ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016fe0:	68f8      	ldr	r0, [r7, #12]
 8016fe2:	f7ff ffbd 	bl	8016f60 <ip_frag_free_pbuf_custom_ref>
}
 8016fe6:	bf00      	nop
 8016fe8:	3710      	adds	r7, #16
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	0801dae0 	.word	0x0801dae0
 8016ff4:	0801dca4 	.word	0x0801dca4
 8016ff8:	0801db28 	.word	0x0801db28
 8016ffc:	0801dcb0 	.word	0x0801dcb0

08017000 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b094      	sub	sp, #80	; 0x50
 8017004:	af02      	add	r7, sp, #8
 8017006:	60f8      	str	r0, [r7, #12]
 8017008:	60b9      	str	r1, [r7, #8]
 801700a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801700c:	2300      	movs	r3, #0
 801700e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017016:	3b14      	subs	r3, #20
 8017018:	2b00      	cmp	r3, #0
 801701a:	da00      	bge.n	801701e <ip4_frag+0x1e>
 801701c:	3307      	adds	r3, #7
 801701e:	10db      	asrs	r3, r3, #3
 8017020:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017022:	2314      	movs	r3, #20
 8017024:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	685b      	ldr	r3, [r3, #4]
 801702a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801702e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	f003 030f 	and.w	r3, r3, #15
 8017038:	b2db      	uxtb	r3, r3
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	b2db      	uxtb	r3, r3
 801703e:	2b14      	cmp	r3, #20
 8017040:	d002      	beq.n	8017048 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017042:	f06f 0305 	mvn.w	r3, #5
 8017046:	e110      	b.n	801726a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	895b      	ldrh	r3, [r3, #10]
 801704c:	2b13      	cmp	r3, #19
 801704e:	d809      	bhi.n	8017064 <ip4_frag+0x64>
 8017050:	4b88      	ldr	r3, [pc, #544]	; (8017274 <ip4_frag+0x274>)
 8017052:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017056:	4988      	ldr	r1, [pc, #544]	; (8017278 <ip4_frag+0x278>)
 8017058:	4888      	ldr	r0, [pc, #544]	; (801727c <ip4_frag+0x27c>)
 801705a:	f000 fd99 	bl	8017b90 <iprintf>
 801705e:	f06f 0305 	mvn.w	r3, #5
 8017062:	e102      	b.n	801726a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017066:	88db      	ldrh	r3, [r3, #6]
 8017068:	b29b      	uxth	r3, r3
 801706a:	4618      	mov	r0, r3
 801706c:	f7f5 fd18 	bl	800caa0 <lwip_htons>
 8017070:	4603      	mov	r3, r0
 8017072:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017074:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801707a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801707e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017084:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	891b      	ldrh	r3, [r3, #8]
 801708a:	3b14      	subs	r3, #20
 801708c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017090:	e0e1      	b.n	8017256 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017092:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017094:	00db      	lsls	r3, r3, #3
 8017096:	b29b      	uxth	r3, r3
 8017098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801709c:	4293      	cmp	r3, r2
 801709e:	bf28      	it	cs
 80170a0:	4613      	movcs	r3, r2
 80170a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80170a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80170a8:	2114      	movs	r1, #20
 80170aa:	200e      	movs	r0, #14
 80170ac:	f7f6 ff1a 	bl	800dee4 <pbuf_alloc>
 80170b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80170b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	f000 80d5 	beq.w	8017264 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80170ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170bc:	895b      	ldrh	r3, [r3, #10]
 80170be:	2b13      	cmp	r3, #19
 80170c0:	d806      	bhi.n	80170d0 <ip4_frag+0xd0>
 80170c2:	4b6c      	ldr	r3, [pc, #432]	; (8017274 <ip4_frag+0x274>)
 80170c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80170c8:	496d      	ldr	r1, [pc, #436]	; (8017280 <ip4_frag+0x280>)
 80170ca:	486c      	ldr	r0, [pc, #432]	; (801727c <ip4_frag+0x27c>)
 80170cc:	f000 fd60 	bl	8017b90 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80170d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d2:	685b      	ldr	r3, [r3, #4]
 80170d4:	2214      	movs	r2, #20
 80170d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80170d8:	4618      	mov	r0, r3
 80170da:	f000 fc94 	bl	8017a06 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80170de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e0:	685b      	ldr	r3, [r3, #4]
 80170e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80170e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80170e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80170ea:	e064      	b.n	80171b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	895a      	ldrh	r2, [r3, #10]
 80170f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	895b      	ldrh	r3, [r3, #10]
 80170fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d906      	bls.n	801710e <ip4_frag+0x10e>
 8017100:	4b5c      	ldr	r3, [pc, #368]	; (8017274 <ip4_frag+0x274>)
 8017102:	f240 322d 	movw	r2, #813	; 0x32d
 8017106:	495f      	ldr	r1, [pc, #380]	; (8017284 <ip4_frag+0x284>)
 8017108:	485c      	ldr	r0, [pc, #368]	; (801727c <ip4_frag+0x27c>)
 801710a:	f000 fd41 	bl	8017b90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801710e:	8bfa      	ldrh	r2, [r7, #30]
 8017110:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017114:	4293      	cmp	r3, r2
 8017116:	bf28      	it	cs
 8017118:	4613      	movcs	r3, r2
 801711a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801711e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017122:	2b00      	cmp	r3, #0
 8017124:	d105      	bne.n	8017132 <ip4_frag+0x132>
        poff = 0;
 8017126:	2300      	movs	r3, #0
 8017128:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	60fb      	str	r3, [r7, #12]
        continue;
 8017130:	e041      	b.n	80171b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017132:	f7ff ff0d 	bl	8016f50 <ip_frag_alloc_pbuf_custom_ref>
 8017136:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017138:	69bb      	ldr	r3, [r7, #24]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d103      	bne.n	8017146 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801713e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017140:	f7f7 f9b4 	bl	800e4ac <pbuf_free>
        goto memerr;
 8017144:	e08f      	b.n	8017266 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017146:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801714c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801714e:	4413      	add	r3, r2
 8017150:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017154:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017158:	9201      	str	r2, [sp, #4]
 801715a:	9300      	str	r3, [sp, #0]
 801715c:	4603      	mov	r3, r0
 801715e:	2241      	movs	r2, #65	; 0x41
 8017160:	2000      	movs	r0, #0
 8017162:	f7f6 ffe9 	bl	800e138 <pbuf_alloced_custom>
 8017166:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d106      	bne.n	801717c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801716e:	69b8      	ldr	r0, [r7, #24]
 8017170:	f7ff fef6 	bl	8016f60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017176:	f7f7 f999 	bl	800e4ac <pbuf_free>
        goto memerr;
 801717a:	e074      	b.n	8017266 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f7f7 fa3b 	bl	800e5f8 <pbuf_ref>
      pcr->original = p;
 8017182:	69bb      	ldr	r3, [r7, #24]
 8017184:	68fa      	ldr	r2, [r7, #12]
 8017186:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017188:	69bb      	ldr	r3, [r7, #24]
 801718a:	4a3f      	ldr	r2, [pc, #252]	; (8017288 <ip4_frag+0x288>)
 801718c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801718e:	6979      	ldr	r1, [r7, #20]
 8017190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017192:	f7f7 fa59 	bl	800e648 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017196:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801719a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80171a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d004      	beq.n	80171b6 <ip4_frag+0x1b6>
        poff = 0;
 80171ac:	2300      	movs	r3, #0
 80171ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80171b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d196      	bne.n	80170ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80171be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80171c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80171c4:	4413      	add	r3, r2
 80171c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80171cc:	f1a3 0213 	sub.w	r2, r3, #19
 80171d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80171d4:	429a      	cmp	r2, r3
 80171d6:	bfcc      	ite	gt
 80171d8:	2301      	movgt	r3, #1
 80171da:	2300      	movle	r3, #0
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80171e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80171e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80171ea:	6a3b      	ldr	r3, [r7, #32]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d002      	beq.n	80171f6 <ip4_frag+0x1f6>
 80171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d003      	beq.n	80171fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80171f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80171fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80171fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017200:	4618      	mov	r0, r3
 8017202:	f7f5 fc4d 	bl	800caa0 <lwip_htons>
 8017206:	4603      	mov	r3, r0
 8017208:	461a      	mov	r2, r3
 801720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801720c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801720e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017210:	3314      	adds	r3, #20
 8017212:	b29b      	uxth	r3, r3
 8017214:	4618      	mov	r0, r3
 8017216:	f7f5 fc43 	bl	800caa0 <lwip_htons>
 801721a:	4603      	mov	r3, r0
 801721c:	461a      	mov	r2, r3
 801721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017220:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017224:	2200      	movs	r2, #0
 8017226:	729a      	strb	r2, [r3, #10]
 8017228:	2200      	movs	r2, #0
 801722a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	695b      	ldr	r3, [r3, #20]
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017234:	68b8      	ldr	r0, [r7, #8]
 8017236:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801723a:	f7f7 f937 	bl	800e4ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801723e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017244:	1ad3      	subs	r3, r2, r3
 8017246:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801724a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801724e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017250:	4413      	add	r3, r2
 8017252:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017256:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801725a:	2b00      	cmp	r3, #0
 801725c:	f47f af19 	bne.w	8017092 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017260:	2300      	movs	r3, #0
 8017262:	e002      	b.n	801726a <ip4_frag+0x26a>
      goto memerr;
 8017264:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801726a:	4618      	mov	r0, r3
 801726c:	3748      	adds	r7, #72	; 0x48
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	0801dae0 	.word	0x0801dae0
 8017278:	0801dcbc 	.word	0x0801dcbc
 801727c:	0801db28 	.word	0x0801db28
 8017280:	0801dcd8 	.word	0x0801dcd8
 8017284:	0801dcf8 	.word	0x0801dcf8
 8017288:	08016f99 	.word	0x08016f99

0801728c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017296:	230e      	movs	r3, #14
 8017298:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	895b      	ldrh	r3, [r3, #10]
 801729e:	2b0e      	cmp	r3, #14
 80172a0:	d96e      	bls.n	8017380 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	7bdb      	ldrb	r3, [r3, #15]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d106      	bne.n	80172b8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80172b0:	3301      	adds	r3, #1
 80172b2:	b2da      	uxtb	r2, r3
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80172be:	693b      	ldr	r3, [r7, #16]
 80172c0:	7b1a      	ldrb	r2, [r3, #12]
 80172c2:	7b5b      	ldrb	r3, [r3, #13]
 80172c4:	021b      	lsls	r3, r3, #8
 80172c6:	4313      	orrs	r3, r2
 80172c8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80172ca:	693b      	ldr	r3, [r7, #16]
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	f003 0301 	and.w	r3, r3, #1
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d023      	beq.n	801731e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	2b01      	cmp	r3, #1
 80172dc:	d10f      	bne.n	80172fe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172de:	693b      	ldr	r3, [r7, #16]
 80172e0:	785b      	ldrb	r3, [r3, #1]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d11b      	bne.n	801731e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80172e6:	693b      	ldr	r3, [r7, #16]
 80172e8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80172ea:	2b5e      	cmp	r3, #94	; 0x5e
 80172ec:	d117      	bne.n	801731e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	7b5b      	ldrb	r3, [r3, #13]
 80172f2:	f043 0310 	orr.w	r3, r3, #16
 80172f6:	b2da      	uxtb	r2, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	735a      	strb	r2, [r3, #13]
 80172fc:	e00f      	b.n	801731e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80172fe:	693b      	ldr	r3, [r7, #16]
 8017300:	2206      	movs	r2, #6
 8017302:	4928      	ldr	r1, [pc, #160]	; (80173a4 <ethernet_input+0x118>)
 8017304:	4618      	mov	r0, r3
 8017306:	f000 fb6e 	bl	80179e6 <memcmp>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	d106      	bne.n	801731e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	7b5b      	ldrb	r3, [r3, #13]
 8017314:	f043 0308 	orr.w	r3, r3, #8
 8017318:	b2da      	uxtb	r2, r3
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801731e:	89fb      	ldrh	r3, [r7, #14]
 8017320:	2b08      	cmp	r3, #8
 8017322:	d003      	beq.n	801732c <ethernet_input+0xa0>
 8017324:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017328:	d014      	beq.n	8017354 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801732a:	e032      	b.n	8017392 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017332:	f003 0308 	and.w	r3, r3, #8
 8017336:	2b00      	cmp	r3, #0
 8017338:	d024      	beq.n	8017384 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801733a:	8afb      	ldrh	r3, [r7, #22]
 801733c:	4619      	mov	r1, r3
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f7f7 f82e 	bl	800e3a0 <pbuf_remove_header>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d11e      	bne.n	8017388 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801734a:	6839      	ldr	r1, [r7, #0]
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7fe ff2b 	bl	80161a8 <ip4_input>
      break;
 8017352:	e013      	b.n	801737c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801735a:	f003 0308 	and.w	r3, r3, #8
 801735e:	2b00      	cmp	r3, #0
 8017360:	d014      	beq.n	801738c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017362:	8afb      	ldrh	r3, [r7, #22]
 8017364:	4619      	mov	r1, r3
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f7 f81a 	bl	800e3a0 <pbuf_remove_header>
 801736c:	4603      	mov	r3, r0
 801736e:	2b00      	cmp	r3, #0
 8017370:	d10e      	bne.n	8017390 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017372:	6839      	ldr	r1, [r7, #0]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7fe f8cb 	bl	8015510 <etharp_input>
      break;
 801737a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801737c:	2300      	movs	r3, #0
 801737e:	e00c      	b.n	801739a <ethernet_input+0x10e>
    goto free_and_return;
 8017380:	bf00      	nop
 8017382:	e006      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017384:	bf00      	nop
 8017386:	e004      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017388:	bf00      	nop
 801738a:	e002      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 801738c:	bf00      	nop
 801738e:	e000      	b.n	8017392 <ethernet_input+0x106>
        goto free_and_return;
 8017390:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017392:	6878      	ldr	r0, [r7, #4]
 8017394:	f7f7 f88a 	bl	800e4ac <pbuf_free>
  return ERR_OK;
 8017398:	2300      	movs	r3, #0
}
 801739a:	4618      	mov	r0, r3
 801739c:	3718      	adds	r7, #24
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	0801df74 	.word	0x0801df74

080173a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
 80173b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80173b6:	8c3b      	ldrh	r3, [r7, #32]
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7f5 fb71 	bl	800caa0 <lwip_htons>
 80173be:	4603      	mov	r3, r0
 80173c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80173c2:	210e      	movs	r1, #14
 80173c4:	68b8      	ldr	r0, [r7, #8]
 80173c6:	f7f6 ffdb 	bl	800e380 <pbuf_add_header>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d125      	bne.n	801741c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	685b      	ldr	r3, [r3, #4]
 80173d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80173d6:	693b      	ldr	r3, [r7, #16]
 80173d8:	8afa      	ldrh	r2, [r7, #22]
 80173da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80173dc:	693b      	ldr	r3, [r7, #16]
 80173de:	2206      	movs	r2, #6
 80173e0:	6839      	ldr	r1, [r7, #0]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f000 fb0f 	bl	8017a06 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	3306      	adds	r3, #6
 80173ec:	2206      	movs	r2, #6
 80173ee:	6879      	ldr	r1, [r7, #4]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 fb08 	bl	8017a06 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80173fc:	2b06      	cmp	r3, #6
 80173fe:	d006      	beq.n	801740e <ethernet_output+0x66>
 8017400:	4b0a      	ldr	r3, [pc, #40]	; (801742c <ethernet_output+0x84>)
 8017402:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017406:	490a      	ldr	r1, [pc, #40]	; (8017430 <ethernet_output+0x88>)
 8017408:	480a      	ldr	r0, [pc, #40]	; (8017434 <ethernet_output+0x8c>)
 801740a:	f000 fbc1 	bl	8017b90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	699b      	ldr	r3, [r3, #24]
 8017412:	68b9      	ldr	r1, [r7, #8]
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	4798      	blx	r3
 8017418:	4603      	mov	r3, r0
 801741a:	e002      	b.n	8017422 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801741c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801741e:	f06f 0301 	mvn.w	r3, #1
}
 8017422:	4618      	mov	r0, r3
 8017424:	3718      	adds	r7, #24
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	0801dd08 	.word	0x0801dd08
 8017430:	0801dd40 	.word	0x0801dd40
 8017434:	0801dd74 	.word	0x0801dd74

08017438 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b082      	sub	sp, #8
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
 8017440:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	2200      	movs	r2, #0
 8017446:	2104      	movs	r1, #4
 8017448:	4618      	mov	r0, r3
 801744a:	f7ef fdf3 	bl	8007034 <osMessageQueueNew>
 801744e:	4602      	mov	r2, r0
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d102      	bne.n	8017462 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801745c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017460:	e000      	b.n	8017464 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017462:	2300      	movs	r3, #0
}
 8017464:	4618      	mov	r0, r3
 8017466:	3708      	adds	r7, #8
 8017468:	46bd      	mov	sp, r7
 801746a:	bd80      	pop	{r7, pc}

0801746c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b082      	sub	sp, #8
 8017470:	af00      	add	r7, sp, #0
 8017472:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	4618      	mov	r0, r3
 801747a:	f7ef ff47 	bl	800730c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	4618      	mov	r0, r3
 8017484:	f7ef ff74 	bl	8007370 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017488:	bf00      	nop
 801748a:	3708      	adds	r7, #8
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b084      	sub	sp, #16
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
 8017498:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6818      	ldr	r0, [r3, #0]
 801749e:	4639      	mov	r1, r7
 80174a0:	2300      	movs	r3, #0
 80174a2:	2200      	movs	r2, #0
 80174a4:	f7ef fe4c 	bl	8007140 <osMessageQueuePut>
 80174a8:	4603      	mov	r3, r0
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d102      	bne.n	80174b4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80174ae:	2300      	movs	r3, #0
 80174b0:	73fb      	strb	r3, [r7, #15]
 80174b2:	e001      	b.n	80174b8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80174b4:	23ff      	movs	r3, #255	; 0xff
 80174b6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80174b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174bc:	4618      	mov	r0, r3
 80174be:	3710      	adds	r7, #16
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b086      	sub	sp, #24
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	60f8      	str	r0, [r7, #12]
 80174cc:	60b9      	str	r1, [r7, #8]
 80174ce:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80174d0:	f7ef f9dc 	bl	800688c <osKernelGetTickCount>
 80174d4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d013      	beq.n	8017504 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	6818      	ldr	r0, [r3, #0]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2200      	movs	r2, #0
 80174e4:	68b9      	ldr	r1, [r7, #8]
 80174e6:	f7ef fe9f 	bl	8007228 <osMessageQueueGet>
 80174ea:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d105      	bne.n	80174fe <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80174f2:	f7ef f9cb 	bl	800688c <osKernelGetTickCount>
 80174f6:	4602      	mov	r2, r0
 80174f8:	697b      	ldr	r3, [r7, #20]
 80174fa:	1ad3      	subs	r3, r2, r3
 80174fc:	e00f      	b.n	801751e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80174fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017502:	e00c      	b.n	801751e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	6818      	ldr	r0, [r3, #0]
 8017508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801750c:	2200      	movs	r2, #0
 801750e:	68b9      	ldr	r1, [r7, #8]
 8017510:	f7ef fe8a 	bl	8007228 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017514:	f7ef f9ba 	bl	800688c <osKernelGetTickCount>
 8017518:	4602      	mov	r2, r0
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801751e:	4618      	mov	r0, r3
 8017520:	3718      	adds	r7, #24
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}

08017526 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017526:	b580      	push	{r7, lr}
 8017528:	b082      	sub	sp, #8
 801752a:	af00      	add	r7, sp, #0
 801752c:	6078      	str	r0, [r7, #4]
 801752e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6818      	ldr	r0, [r3, #0]
 8017534:	2300      	movs	r3, #0
 8017536:	2200      	movs	r2, #0
 8017538:	6839      	ldr	r1, [r7, #0]
 801753a:	f7ef fe75 	bl	8007228 <osMessageQueueGet>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d101      	bne.n	8017548 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017544:	2300      	movs	r3, #0
 8017546:	e001      	b.n	801754c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801754c:	4618      	mov	r0, r3
 801754e:	3708      	adds	r7, #8
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017554:	b480      	push	{r7}
 8017556:	b083      	sub	sp, #12
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d101      	bne.n	8017568 <sys_mbox_valid+0x14>
    return 0;
 8017564:	2300      	movs	r3, #0
 8017566:	e000      	b.n	801756a <sys_mbox_valid+0x16>
  else
    return 1;
 8017568:	2301      	movs	r3, #1
}
 801756a:	4618      	mov	r0, r3
 801756c:	370c      	adds	r7, #12
 801756e:	46bd      	mov	sp, r7
 8017570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017574:	4770      	bx	lr

08017576 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017576:	b480      	push	{r7}
 8017578:	b083      	sub	sp, #12
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2200      	movs	r2, #0
 8017582:	601a      	str	r2, [r3, #0]
}
 8017584:	bf00      	nop
 8017586:	370c      	adds	r7, #12
 8017588:	46bd      	mov	sp, r7
 801758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758e:	4770      	bx	lr

08017590 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	460b      	mov	r3, r1
 801759a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801759c:	78fb      	ldrb	r3, [r7, #3]
 801759e:	2200      	movs	r2, #0
 80175a0:	4619      	mov	r1, r3
 80175a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80175a6:	f7ef fbb5 	bl	8006d14 <osSemaphoreNew>
 80175aa:	4602      	mov	r2, r0
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d102      	bne.n	80175be <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80175b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80175bc:	e009      	b.n	80175d2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80175be:	78fb      	ldrb	r3, [r7, #3]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d105      	bne.n	80175d0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2100      	movs	r1, #0
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7ef fc3e 	bl	8006e4c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80175d0:	2300      	movs	r3, #0
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3708      	adds	r7, #8
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}

080175da <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80175da:	b580      	push	{r7, lr}
 80175dc:	b084      	sub	sp, #16
 80175de:	af00      	add	r7, sp, #0
 80175e0:	6078      	str	r0, [r7, #4]
 80175e2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80175e4:	f7ef f952 	bl	800688c <osKernelGetTickCount>
 80175e8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80175ea:	683b      	ldr	r3, [r7, #0]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d011      	beq.n	8017614 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	6839      	ldr	r1, [r7, #0]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7ef fc28 	bl	8006e4c <osSemaphoreAcquire>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d105      	bne.n	801760e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8017602:	f7ef f943 	bl	800688c <osKernelGetTickCount>
 8017606:	4602      	mov	r2, r0
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	e012      	b.n	8017634 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801760e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017612:	e00f      	b.n	8017634 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8017614:	bf00      	nop
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801761e:	4618      	mov	r0, r3
 8017620:	f7ef fc14 	bl	8006e4c <osSemaphoreAcquire>
 8017624:	4603      	mov	r3, r0
 8017626:	2b00      	cmp	r3, #0
 8017628:	d1f5      	bne.n	8017616 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801762a:	f7ef f92f 	bl	800688c <osKernelGetTickCount>
 801762e:	4602      	mov	r2, r0
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017634:	4618      	mov	r0, r3
 8017636:	3710      	adds	r7, #16
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}

0801763c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	4618      	mov	r0, r3
 801764a:	f7ef fc65 	bl	8006f18 <osSemaphoreRelease>
}
 801764e:	bf00      	nop
 8017650:	3708      	adds	r7, #8
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}

08017656 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017656:	b580      	push	{r7, lr}
 8017658:	b082      	sub	sp, #8
 801765a:	af00      	add	r7, sp, #0
 801765c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	4618      	mov	r0, r3
 8017664:	f7ef fcb0 	bl	8006fc8 <osSemaphoreDelete>
}
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017670:	b480      	push	{r7}
 8017672:	b083      	sub	sp, #12
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d101      	bne.n	8017684 <sys_sem_valid+0x14>
    return 0;
 8017680:	2300      	movs	r3, #0
 8017682:	e000      	b.n	8017686 <sys_sem_valid+0x16>
  else
    return 1;
 8017684:	2301      	movs	r3, #1
}
 8017686:	4618      	mov	r0, r3
 8017688:	370c      	adds	r7, #12
 801768a:	46bd      	mov	sp, r7
 801768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017690:	4770      	bx	lr

08017692 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017692:	b480      	push	{r7}
 8017694:	b083      	sub	sp, #12
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2200      	movs	r2, #0
 801769e:	601a      	str	r2, [r3, #0]
}
 80176a0:	bf00      	nop
 80176a2:	370c      	adds	r7, #12
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80176b0:	2000      	movs	r0, #0
 80176b2:	f7ef f9e7 	bl	8006a84 <osMutexNew>
 80176b6:	4603      	mov	r3, r0
 80176b8:	4a01      	ldr	r2, [pc, #4]	; (80176c0 <sys_init+0x14>)
 80176ba:	6013      	str	r3, [r2, #0]
#endif
}
 80176bc:	bf00      	nop
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	20011cf0 	.word	0x20011cf0

080176c4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80176cc:	2000      	movs	r0, #0
 80176ce:	f7ef f9d9 	bl	8006a84 <osMutexNew>
 80176d2:	4602      	mov	r2, r0
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d102      	bne.n	80176e6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80176e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176e4:	e000      	b.n	80176e8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80176e6:	2300      	movs	r3, #0
}
 80176e8:	4618      	mov	r0, r3
 80176ea:	3708      	adds	r7, #8
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017700:	4618      	mov	r0, r3
 8017702:	f7ef fa59 	bl	8006bb8 <osMutexAcquire>
#endif
}
 8017706:	bf00      	nop
 8017708:	3708      	adds	r7, #8
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b082      	sub	sp, #8
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	4618      	mov	r0, r3
 801771c:	f7ef faaa 	bl	8006c74 <osMutexRelease>
}
 8017720:	bf00      	nop
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b08e      	sub	sp, #56	; 0x38
 801772c:	af00      	add	r7, sp, #0
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017736:	f107 0314 	add.w	r3, r7, #20
 801773a:	2224      	movs	r2, #36	; 0x24
 801773c:	2100      	movs	r1, #0
 801773e:	4618      	mov	r0, r3
 8017740:	f000 f989 	bl	8017a56 <memset>
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	617b      	str	r3, [r7, #20]
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	62bb      	str	r3, [r7, #40]	; 0x28
 801774c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801774e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017750:	f107 0314 	add.w	r3, r7, #20
 8017754:	461a      	mov	r2, r3
 8017756:	6879      	ldr	r1, [r7, #4]
 8017758:	68b8      	ldr	r0, [r7, #8]
 801775a:	f7ef f8bf 	bl	80068dc <osThreadNew>
 801775e:	4603      	mov	r3, r0
#endif
}
 8017760:	4618      	mov	r0, r3
 8017762:	3738      	adds	r7, #56	; 0x38
 8017764:	46bd      	mov	sp, r7
 8017766:	bd80      	pop	{r7, pc}

08017768 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801776c:	4b04      	ldr	r3, [pc, #16]	; (8017780 <sys_arch_protect+0x18>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017774:	4618      	mov	r0, r3
 8017776:	f7ef fa1f 	bl	8006bb8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801777a:	2301      	movs	r3, #1
}
 801777c:	4618      	mov	r0, r3
 801777e:	bd80      	pop	{r7, pc}
 8017780:	20011cf0 	.word	0x20011cf0

08017784 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801778c:	4b04      	ldr	r3, [pc, #16]	; (80177a0 <sys_arch_unprotect+0x1c>)
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	4618      	mov	r0, r3
 8017792:	f7ef fa6f 	bl	8006c74 <osMutexRelease>
}
 8017796:	bf00      	nop
 8017798:	3708      	adds	r7, #8
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}
 801779e:	bf00      	nop
 80177a0:	20011cf0 	.word	0x20011cf0

080177a4 <atof>:
 80177a4:	2100      	movs	r1, #0
 80177a6:	f001 b971 	b.w	8018a8c <strtod>
	...

080177ac <std>:
 80177ac:	2300      	movs	r3, #0
 80177ae:	b510      	push	{r4, lr}
 80177b0:	4604      	mov	r4, r0
 80177b2:	e9c0 3300 	strd	r3, r3, [r0]
 80177b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177ba:	6083      	str	r3, [r0, #8]
 80177bc:	8181      	strh	r1, [r0, #12]
 80177be:	6643      	str	r3, [r0, #100]	; 0x64
 80177c0:	81c2      	strh	r2, [r0, #14]
 80177c2:	6183      	str	r3, [r0, #24]
 80177c4:	4619      	mov	r1, r3
 80177c6:	2208      	movs	r2, #8
 80177c8:	305c      	adds	r0, #92	; 0x5c
 80177ca:	f000 f944 	bl	8017a56 <memset>
 80177ce:	4b05      	ldr	r3, [pc, #20]	; (80177e4 <std+0x38>)
 80177d0:	6263      	str	r3, [r4, #36]	; 0x24
 80177d2:	4b05      	ldr	r3, [pc, #20]	; (80177e8 <std+0x3c>)
 80177d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80177d6:	4b05      	ldr	r3, [pc, #20]	; (80177ec <std+0x40>)
 80177d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80177da:	4b05      	ldr	r3, [pc, #20]	; (80177f0 <std+0x44>)
 80177dc:	6224      	str	r4, [r4, #32]
 80177de:	6323      	str	r3, [r4, #48]	; 0x30
 80177e0:	bd10      	pop	{r4, pc}
 80177e2:	bf00      	nop
 80177e4:	08017d71 	.word	0x08017d71
 80177e8:	08017d93 	.word	0x08017d93
 80177ec:	08017dcb 	.word	0x08017dcb
 80177f0:	08017def 	.word	0x08017def

080177f4 <_cleanup_r>:
 80177f4:	4901      	ldr	r1, [pc, #4]	; (80177fc <_cleanup_r+0x8>)
 80177f6:	f000 b8af 	b.w	8017958 <_fwalk_reent>
 80177fa:	bf00      	nop
 80177fc:	08018ce9 	.word	0x08018ce9

08017800 <__sfmoreglue>:
 8017800:	b570      	push	{r4, r5, r6, lr}
 8017802:	2268      	movs	r2, #104	; 0x68
 8017804:	1e4d      	subs	r5, r1, #1
 8017806:	4355      	muls	r5, r2
 8017808:	460e      	mov	r6, r1
 801780a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801780e:	f000 f94b 	bl	8017aa8 <_malloc_r>
 8017812:	4604      	mov	r4, r0
 8017814:	b140      	cbz	r0, 8017828 <__sfmoreglue+0x28>
 8017816:	2100      	movs	r1, #0
 8017818:	e9c0 1600 	strd	r1, r6, [r0]
 801781c:	300c      	adds	r0, #12
 801781e:	60a0      	str	r0, [r4, #8]
 8017820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017824:	f000 f917 	bl	8017a56 <memset>
 8017828:	4620      	mov	r0, r4
 801782a:	bd70      	pop	{r4, r5, r6, pc}

0801782c <__sfp_lock_acquire>:
 801782c:	4801      	ldr	r0, [pc, #4]	; (8017834 <__sfp_lock_acquire+0x8>)
 801782e:	f000 b8d8 	b.w	80179e2 <__retarget_lock_acquire_recursive>
 8017832:	bf00      	nop
 8017834:	20011cf5 	.word	0x20011cf5

08017838 <__sfp_lock_release>:
 8017838:	4801      	ldr	r0, [pc, #4]	; (8017840 <__sfp_lock_release+0x8>)
 801783a:	f000 b8d3 	b.w	80179e4 <__retarget_lock_release_recursive>
 801783e:	bf00      	nop
 8017840:	20011cf5 	.word	0x20011cf5

08017844 <__sinit_lock_acquire>:
 8017844:	4801      	ldr	r0, [pc, #4]	; (801784c <__sinit_lock_acquire+0x8>)
 8017846:	f000 b8cc 	b.w	80179e2 <__retarget_lock_acquire_recursive>
 801784a:	bf00      	nop
 801784c:	20011cf6 	.word	0x20011cf6

08017850 <__sinit_lock_release>:
 8017850:	4801      	ldr	r0, [pc, #4]	; (8017858 <__sinit_lock_release+0x8>)
 8017852:	f000 b8c7 	b.w	80179e4 <__retarget_lock_release_recursive>
 8017856:	bf00      	nop
 8017858:	20011cf6 	.word	0x20011cf6

0801785c <__sinit>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	f7ff fff0 	bl	8017844 <__sinit_lock_acquire>
 8017864:	69a3      	ldr	r3, [r4, #24]
 8017866:	b11b      	cbz	r3, 8017870 <__sinit+0x14>
 8017868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801786c:	f7ff bff0 	b.w	8017850 <__sinit_lock_release>
 8017870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017874:	6523      	str	r3, [r4, #80]	; 0x50
 8017876:	4b13      	ldr	r3, [pc, #76]	; (80178c4 <__sinit+0x68>)
 8017878:	4a13      	ldr	r2, [pc, #76]	; (80178c8 <__sinit+0x6c>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	62a2      	str	r2, [r4, #40]	; 0x28
 801787e:	42a3      	cmp	r3, r4
 8017880:	bf04      	itt	eq
 8017882:	2301      	moveq	r3, #1
 8017884:	61a3      	streq	r3, [r4, #24]
 8017886:	4620      	mov	r0, r4
 8017888:	f000 f820 	bl	80178cc <__sfp>
 801788c:	6060      	str	r0, [r4, #4]
 801788e:	4620      	mov	r0, r4
 8017890:	f000 f81c 	bl	80178cc <__sfp>
 8017894:	60a0      	str	r0, [r4, #8]
 8017896:	4620      	mov	r0, r4
 8017898:	f000 f818 	bl	80178cc <__sfp>
 801789c:	2200      	movs	r2, #0
 801789e:	60e0      	str	r0, [r4, #12]
 80178a0:	2104      	movs	r1, #4
 80178a2:	6860      	ldr	r0, [r4, #4]
 80178a4:	f7ff ff82 	bl	80177ac <std>
 80178a8:	68a0      	ldr	r0, [r4, #8]
 80178aa:	2201      	movs	r2, #1
 80178ac:	2109      	movs	r1, #9
 80178ae:	f7ff ff7d 	bl	80177ac <std>
 80178b2:	68e0      	ldr	r0, [r4, #12]
 80178b4:	2202      	movs	r2, #2
 80178b6:	2112      	movs	r1, #18
 80178b8:	f7ff ff78 	bl	80177ac <std>
 80178bc:	2301      	movs	r3, #1
 80178be:	61a3      	str	r3, [r4, #24]
 80178c0:	e7d2      	b.n	8017868 <__sinit+0xc>
 80178c2:	bf00      	nop
 80178c4:	0801e0e4 	.word	0x0801e0e4
 80178c8:	080177f5 	.word	0x080177f5

080178cc <__sfp>:
 80178cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178ce:	4607      	mov	r7, r0
 80178d0:	f7ff ffac 	bl	801782c <__sfp_lock_acquire>
 80178d4:	4b1e      	ldr	r3, [pc, #120]	; (8017950 <__sfp+0x84>)
 80178d6:	681e      	ldr	r6, [r3, #0]
 80178d8:	69b3      	ldr	r3, [r6, #24]
 80178da:	b913      	cbnz	r3, 80178e2 <__sfp+0x16>
 80178dc:	4630      	mov	r0, r6
 80178de:	f7ff ffbd 	bl	801785c <__sinit>
 80178e2:	3648      	adds	r6, #72	; 0x48
 80178e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80178e8:	3b01      	subs	r3, #1
 80178ea:	d503      	bpl.n	80178f4 <__sfp+0x28>
 80178ec:	6833      	ldr	r3, [r6, #0]
 80178ee:	b30b      	cbz	r3, 8017934 <__sfp+0x68>
 80178f0:	6836      	ldr	r6, [r6, #0]
 80178f2:	e7f7      	b.n	80178e4 <__sfp+0x18>
 80178f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80178f8:	b9d5      	cbnz	r5, 8017930 <__sfp+0x64>
 80178fa:	4b16      	ldr	r3, [pc, #88]	; (8017954 <__sfp+0x88>)
 80178fc:	60e3      	str	r3, [r4, #12]
 80178fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017902:	6665      	str	r5, [r4, #100]	; 0x64
 8017904:	f000 f86c 	bl	80179e0 <__retarget_lock_init_recursive>
 8017908:	f7ff ff96 	bl	8017838 <__sfp_lock_release>
 801790c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017914:	6025      	str	r5, [r4, #0]
 8017916:	61a5      	str	r5, [r4, #24]
 8017918:	2208      	movs	r2, #8
 801791a:	4629      	mov	r1, r5
 801791c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017920:	f000 f899 	bl	8017a56 <memset>
 8017924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801792c:	4620      	mov	r0, r4
 801792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017930:	3468      	adds	r4, #104	; 0x68
 8017932:	e7d9      	b.n	80178e8 <__sfp+0x1c>
 8017934:	2104      	movs	r1, #4
 8017936:	4638      	mov	r0, r7
 8017938:	f7ff ff62 	bl	8017800 <__sfmoreglue>
 801793c:	4604      	mov	r4, r0
 801793e:	6030      	str	r0, [r6, #0]
 8017940:	2800      	cmp	r0, #0
 8017942:	d1d5      	bne.n	80178f0 <__sfp+0x24>
 8017944:	f7ff ff78 	bl	8017838 <__sfp_lock_release>
 8017948:	230c      	movs	r3, #12
 801794a:	603b      	str	r3, [r7, #0]
 801794c:	e7ee      	b.n	801792c <__sfp+0x60>
 801794e:	bf00      	nop
 8017950:	0801e0e4 	.word	0x0801e0e4
 8017954:	ffff0001 	.word	0xffff0001

08017958 <_fwalk_reent>:
 8017958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801795c:	4606      	mov	r6, r0
 801795e:	4688      	mov	r8, r1
 8017960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017964:	2700      	movs	r7, #0
 8017966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801796a:	f1b9 0901 	subs.w	r9, r9, #1
 801796e:	d505      	bpl.n	801797c <_fwalk_reent+0x24>
 8017970:	6824      	ldr	r4, [r4, #0]
 8017972:	2c00      	cmp	r4, #0
 8017974:	d1f7      	bne.n	8017966 <_fwalk_reent+0xe>
 8017976:	4638      	mov	r0, r7
 8017978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801797c:	89ab      	ldrh	r3, [r5, #12]
 801797e:	2b01      	cmp	r3, #1
 8017980:	d907      	bls.n	8017992 <_fwalk_reent+0x3a>
 8017982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017986:	3301      	adds	r3, #1
 8017988:	d003      	beq.n	8017992 <_fwalk_reent+0x3a>
 801798a:	4629      	mov	r1, r5
 801798c:	4630      	mov	r0, r6
 801798e:	47c0      	blx	r8
 8017990:	4307      	orrs	r7, r0
 8017992:	3568      	adds	r5, #104	; 0x68
 8017994:	e7e9      	b.n	801796a <_fwalk_reent+0x12>
	...

08017998 <__libc_init_array>:
 8017998:	b570      	push	{r4, r5, r6, lr}
 801799a:	4d0d      	ldr	r5, [pc, #52]	; (80179d0 <__libc_init_array+0x38>)
 801799c:	4c0d      	ldr	r4, [pc, #52]	; (80179d4 <__libc_init_array+0x3c>)
 801799e:	1b64      	subs	r4, r4, r5
 80179a0:	10a4      	asrs	r4, r4, #2
 80179a2:	2600      	movs	r6, #0
 80179a4:	42a6      	cmp	r6, r4
 80179a6:	d109      	bne.n	80179bc <__libc_init_array+0x24>
 80179a8:	4d0b      	ldr	r5, [pc, #44]	; (80179d8 <__libc_init_array+0x40>)
 80179aa:	4c0c      	ldr	r4, [pc, #48]	; (80179dc <__libc_init_array+0x44>)
 80179ac:	f003 f8f4 	bl	801ab98 <_init>
 80179b0:	1b64      	subs	r4, r4, r5
 80179b2:	10a4      	asrs	r4, r4, #2
 80179b4:	2600      	movs	r6, #0
 80179b6:	42a6      	cmp	r6, r4
 80179b8:	d105      	bne.n	80179c6 <__libc_init_array+0x2e>
 80179ba:	bd70      	pop	{r4, r5, r6, pc}
 80179bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80179c0:	4798      	blx	r3
 80179c2:	3601      	adds	r6, #1
 80179c4:	e7ee      	b.n	80179a4 <__libc_init_array+0xc>
 80179c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80179ca:	4798      	blx	r3
 80179cc:	3601      	adds	r6, #1
 80179ce:	e7f2      	b.n	80179b6 <__libc_init_array+0x1e>
 80179d0:	0801e470 	.word	0x0801e470
 80179d4:	0801e470 	.word	0x0801e470
 80179d8:	0801e470 	.word	0x0801e470
 80179dc:	0801e474 	.word	0x0801e474

080179e0 <__retarget_lock_init_recursive>:
 80179e0:	4770      	bx	lr

080179e2 <__retarget_lock_acquire_recursive>:
 80179e2:	4770      	bx	lr

080179e4 <__retarget_lock_release_recursive>:
 80179e4:	4770      	bx	lr

080179e6 <memcmp>:
 80179e6:	b510      	push	{r4, lr}
 80179e8:	3901      	subs	r1, #1
 80179ea:	4402      	add	r2, r0
 80179ec:	4290      	cmp	r0, r2
 80179ee:	d101      	bne.n	80179f4 <memcmp+0xe>
 80179f0:	2000      	movs	r0, #0
 80179f2:	e005      	b.n	8017a00 <memcmp+0x1a>
 80179f4:	7803      	ldrb	r3, [r0, #0]
 80179f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179fa:	42a3      	cmp	r3, r4
 80179fc:	d001      	beq.n	8017a02 <memcmp+0x1c>
 80179fe:	1b18      	subs	r0, r3, r4
 8017a00:	bd10      	pop	{r4, pc}
 8017a02:	3001      	adds	r0, #1
 8017a04:	e7f2      	b.n	80179ec <memcmp+0x6>

08017a06 <memcpy>:
 8017a06:	440a      	add	r2, r1
 8017a08:	4291      	cmp	r1, r2
 8017a0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017a0e:	d100      	bne.n	8017a12 <memcpy+0xc>
 8017a10:	4770      	bx	lr
 8017a12:	b510      	push	{r4, lr}
 8017a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017a1c:	4291      	cmp	r1, r2
 8017a1e:	d1f9      	bne.n	8017a14 <memcpy+0xe>
 8017a20:	bd10      	pop	{r4, pc}

08017a22 <memmove>:
 8017a22:	4288      	cmp	r0, r1
 8017a24:	b510      	push	{r4, lr}
 8017a26:	eb01 0402 	add.w	r4, r1, r2
 8017a2a:	d902      	bls.n	8017a32 <memmove+0x10>
 8017a2c:	4284      	cmp	r4, r0
 8017a2e:	4623      	mov	r3, r4
 8017a30:	d807      	bhi.n	8017a42 <memmove+0x20>
 8017a32:	1e43      	subs	r3, r0, #1
 8017a34:	42a1      	cmp	r1, r4
 8017a36:	d008      	beq.n	8017a4a <memmove+0x28>
 8017a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a40:	e7f8      	b.n	8017a34 <memmove+0x12>
 8017a42:	4402      	add	r2, r0
 8017a44:	4601      	mov	r1, r0
 8017a46:	428a      	cmp	r2, r1
 8017a48:	d100      	bne.n	8017a4c <memmove+0x2a>
 8017a4a:	bd10      	pop	{r4, pc}
 8017a4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a54:	e7f7      	b.n	8017a46 <memmove+0x24>

08017a56 <memset>:
 8017a56:	4402      	add	r2, r0
 8017a58:	4603      	mov	r3, r0
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d100      	bne.n	8017a60 <memset+0xa>
 8017a5e:	4770      	bx	lr
 8017a60:	f803 1b01 	strb.w	r1, [r3], #1
 8017a64:	e7f9      	b.n	8017a5a <memset+0x4>
	...

08017a68 <sbrk_aligned>:
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	4e0e      	ldr	r6, [pc, #56]	; (8017aa4 <sbrk_aligned+0x3c>)
 8017a6c:	460c      	mov	r4, r1
 8017a6e:	6831      	ldr	r1, [r6, #0]
 8017a70:	4605      	mov	r5, r0
 8017a72:	b911      	cbnz	r1, 8017a7a <sbrk_aligned+0x12>
 8017a74:	f000 f94c 	bl	8017d10 <_sbrk_r>
 8017a78:	6030      	str	r0, [r6, #0]
 8017a7a:	4621      	mov	r1, r4
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	f000 f947 	bl	8017d10 <_sbrk_r>
 8017a82:	1c43      	adds	r3, r0, #1
 8017a84:	d00a      	beq.n	8017a9c <sbrk_aligned+0x34>
 8017a86:	1cc4      	adds	r4, r0, #3
 8017a88:	f024 0403 	bic.w	r4, r4, #3
 8017a8c:	42a0      	cmp	r0, r4
 8017a8e:	d007      	beq.n	8017aa0 <sbrk_aligned+0x38>
 8017a90:	1a21      	subs	r1, r4, r0
 8017a92:	4628      	mov	r0, r5
 8017a94:	f000 f93c 	bl	8017d10 <_sbrk_r>
 8017a98:	3001      	adds	r0, #1
 8017a9a:	d101      	bne.n	8017aa0 <sbrk_aligned+0x38>
 8017a9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	bd70      	pop	{r4, r5, r6, pc}
 8017aa4:	20011cfc 	.word	0x20011cfc

08017aa8 <_malloc_r>:
 8017aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aac:	1ccd      	adds	r5, r1, #3
 8017aae:	f025 0503 	bic.w	r5, r5, #3
 8017ab2:	3508      	adds	r5, #8
 8017ab4:	2d0c      	cmp	r5, #12
 8017ab6:	bf38      	it	cc
 8017ab8:	250c      	movcc	r5, #12
 8017aba:	2d00      	cmp	r5, #0
 8017abc:	4607      	mov	r7, r0
 8017abe:	db01      	blt.n	8017ac4 <_malloc_r+0x1c>
 8017ac0:	42a9      	cmp	r1, r5
 8017ac2:	d905      	bls.n	8017ad0 <_malloc_r+0x28>
 8017ac4:	230c      	movs	r3, #12
 8017ac6:	603b      	str	r3, [r7, #0]
 8017ac8:	2600      	movs	r6, #0
 8017aca:	4630      	mov	r0, r6
 8017acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad0:	4e2e      	ldr	r6, [pc, #184]	; (8017b8c <_malloc_r+0xe4>)
 8017ad2:	f001 fcf3 	bl	80194bc <__malloc_lock>
 8017ad6:	6833      	ldr	r3, [r6, #0]
 8017ad8:	461c      	mov	r4, r3
 8017ada:	bb34      	cbnz	r4, 8017b2a <_malloc_r+0x82>
 8017adc:	4629      	mov	r1, r5
 8017ade:	4638      	mov	r0, r7
 8017ae0:	f7ff ffc2 	bl	8017a68 <sbrk_aligned>
 8017ae4:	1c43      	adds	r3, r0, #1
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	d14d      	bne.n	8017b86 <_malloc_r+0xde>
 8017aea:	6834      	ldr	r4, [r6, #0]
 8017aec:	4626      	mov	r6, r4
 8017aee:	2e00      	cmp	r6, #0
 8017af0:	d140      	bne.n	8017b74 <_malloc_r+0xcc>
 8017af2:	6823      	ldr	r3, [r4, #0]
 8017af4:	4631      	mov	r1, r6
 8017af6:	4638      	mov	r0, r7
 8017af8:	eb04 0803 	add.w	r8, r4, r3
 8017afc:	f000 f908 	bl	8017d10 <_sbrk_r>
 8017b00:	4580      	cmp	r8, r0
 8017b02:	d13a      	bne.n	8017b7a <_malloc_r+0xd2>
 8017b04:	6821      	ldr	r1, [r4, #0]
 8017b06:	3503      	adds	r5, #3
 8017b08:	1a6d      	subs	r5, r5, r1
 8017b0a:	f025 0503 	bic.w	r5, r5, #3
 8017b0e:	3508      	adds	r5, #8
 8017b10:	2d0c      	cmp	r5, #12
 8017b12:	bf38      	it	cc
 8017b14:	250c      	movcc	r5, #12
 8017b16:	4629      	mov	r1, r5
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f7ff ffa5 	bl	8017a68 <sbrk_aligned>
 8017b1e:	3001      	adds	r0, #1
 8017b20:	d02b      	beq.n	8017b7a <_malloc_r+0xd2>
 8017b22:	6823      	ldr	r3, [r4, #0]
 8017b24:	442b      	add	r3, r5
 8017b26:	6023      	str	r3, [r4, #0]
 8017b28:	e00e      	b.n	8017b48 <_malloc_r+0xa0>
 8017b2a:	6822      	ldr	r2, [r4, #0]
 8017b2c:	1b52      	subs	r2, r2, r5
 8017b2e:	d41e      	bmi.n	8017b6e <_malloc_r+0xc6>
 8017b30:	2a0b      	cmp	r2, #11
 8017b32:	d916      	bls.n	8017b62 <_malloc_r+0xba>
 8017b34:	1961      	adds	r1, r4, r5
 8017b36:	42a3      	cmp	r3, r4
 8017b38:	6025      	str	r5, [r4, #0]
 8017b3a:	bf18      	it	ne
 8017b3c:	6059      	strne	r1, [r3, #4]
 8017b3e:	6863      	ldr	r3, [r4, #4]
 8017b40:	bf08      	it	eq
 8017b42:	6031      	streq	r1, [r6, #0]
 8017b44:	5162      	str	r2, [r4, r5]
 8017b46:	604b      	str	r3, [r1, #4]
 8017b48:	4638      	mov	r0, r7
 8017b4a:	f104 060b 	add.w	r6, r4, #11
 8017b4e:	f001 fcbb 	bl	80194c8 <__malloc_unlock>
 8017b52:	f026 0607 	bic.w	r6, r6, #7
 8017b56:	1d23      	adds	r3, r4, #4
 8017b58:	1af2      	subs	r2, r6, r3
 8017b5a:	d0b6      	beq.n	8017aca <_malloc_r+0x22>
 8017b5c:	1b9b      	subs	r3, r3, r6
 8017b5e:	50a3      	str	r3, [r4, r2]
 8017b60:	e7b3      	b.n	8017aca <_malloc_r+0x22>
 8017b62:	6862      	ldr	r2, [r4, #4]
 8017b64:	42a3      	cmp	r3, r4
 8017b66:	bf0c      	ite	eq
 8017b68:	6032      	streq	r2, [r6, #0]
 8017b6a:	605a      	strne	r2, [r3, #4]
 8017b6c:	e7ec      	b.n	8017b48 <_malloc_r+0xa0>
 8017b6e:	4623      	mov	r3, r4
 8017b70:	6864      	ldr	r4, [r4, #4]
 8017b72:	e7b2      	b.n	8017ada <_malloc_r+0x32>
 8017b74:	4634      	mov	r4, r6
 8017b76:	6876      	ldr	r6, [r6, #4]
 8017b78:	e7b9      	b.n	8017aee <_malloc_r+0x46>
 8017b7a:	230c      	movs	r3, #12
 8017b7c:	603b      	str	r3, [r7, #0]
 8017b7e:	4638      	mov	r0, r7
 8017b80:	f001 fca2 	bl	80194c8 <__malloc_unlock>
 8017b84:	e7a1      	b.n	8017aca <_malloc_r+0x22>
 8017b86:	6025      	str	r5, [r4, #0]
 8017b88:	e7de      	b.n	8017b48 <_malloc_r+0xa0>
 8017b8a:	bf00      	nop
 8017b8c:	20011cf8 	.word	0x20011cf8

08017b90 <iprintf>:
 8017b90:	b40f      	push	{r0, r1, r2, r3}
 8017b92:	4b0a      	ldr	r3, [pc, #40]	; (8017bbc <iprintf+0x2c>)
 8017b94:	b513      	push	{r0, r1, r4, lr}
 8017b96:	681c      	ldr	r4, [r3, #0]
 8017b98:	b124      	cbz	r4, 8017ba4 <iprintf+0x14>
 8017b9a:	69a3      	ldr	r3, [r4, #24]
 8017b9c:	b913      	cbnz	r3, 8017ba4 <iprintf+0x14>
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f7ff fe5c 	bl	801785c <__sinit>
 8017ba4:	ab05      	add	r3, sp, #20
 8017ba6:	9a04      	ldr	r2, [sp, #16]
 8017ba8:	68a1      	ldr	r1, [r4, #8]
 8017baa:	9301      	str	r3, [sp, #4]
 8017bac:	4620      	mov	r0, r4
 8017bae:	f002 fb3b 	bl	801a228 <_vfiprintf_r>
 8017bb2:	b002      	add	sp, #8
 8017bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bb8:	b004      	add	sp, #16
 8017bba:	4770      	bx	lr
 8017bbc:	2000002c 	.word	0x2000002c

08017bc0 <rand>:
 8017bc0:	4b16      	ldr	r3, [pc, #88]	; (8017c1c <rand+0x5c>)
 8017bc2:	b510      	push	{r4, lr}
 8017bc4:	681c      	ldr	r4, [r3, #0]
 8017bc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017bc8:	b9b3      	cbnz	r3, 8017bf8 <rand+0x38>
 8017bca:	2018      	movs	r0, #24
 8017bcc:	f001 fc5c 	bl	8019488 <malloc>
 8017bd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8017bd2:	b928      	cbnz	r0, 8017be0 <rand+0x20>
 8017bd4:	4602      	mov	r2, r0
 8017bd6:	4b12      	ldr	r3, [pc, #72]	; (8017c20 <rand+0x60>)
 8017bd8:	4812      	ldr	r0, [pc, #72]	; (8017c24 <rand+0x64>)
 8017bda:	214e      	movs	r1, #78	; 0x4e
 8017bdc:	f000 ffd0 	bl	8018b80 <__assert_func>
 8017be0:	4a11      	ldr	r2, [pc, #68]	; (8017c28 <rand+0x68>)
 8017be2:	4b12      	ldr	r3, [pc, #72]	; (8017c2c <rand+0x6c>)
 8017be4:	e9c0 2300 	strd	r2, r3, [r0]
 8017be8:	4b11      	ldr	r3, [pc, #68]	; (8017c30 <rand+0x70>)
 8017bea:	6083      	str	r3, [r0, #8]
 8017bec:	230b      	movs	r3, #11
 8017bee:	8183      	strh	r3, [r0, #12]
 8017bf0:	2201      	movs	r2, #1
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017bf8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017bfa:	4a0e      	ldr	r2, [pc, #56]	; (8017c34 <rand+0x74>)
 8017bfc:	6920      	ldr	r0, [r4, #16]
 8017bfe:	6963      	ldr	r3, [r4, #20]
 8017c00:	490d      	ldr	r1, [pc, #52]	; (8017c38 <rand+0x78>)
 8017c02:	4342      	muls	r2, r0
 8017c04:	fb01 2203 	mla	r2, r1, r3, r2
 8017c08:	fba0 0101 	umull	r0, r1, r0, r1
 8017c0c:	1c43      	adds	r3, r0, #1
 8017c0e:	eb42 0001 	adc.w	r0, r2, r1
 8017c12:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017c16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017c1a:	bd10      	pop	{r4, pc}
 8017c1c:	2000002c 	.word	0x2000002c
 8017c20:	0801e0e8 	.word	0x0801e0e8
 8017c24:	0801e0ff 	.word	0x0801e0ff
 8017c28:	abcd330e 	.word	0xabcd330e
 8017c2c:	e66d1234 	.word	0xe66d1234
 8017c30:	0005deec 	.word	0x0005deec
 8017c34:	5851f42d 	.word	0x5851f42d
 8017c38:	4c957f2d 	.word	0x4c957f2d

08017c3c <cleanup_glue>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	460c      	mov	r4, r1
 8017c40:	6809      	ldr	r1, [r1, #0]
 8017c42:	4605      	mov	r5, r0
 8017c44:	b109      	cbz	r1, 8017c4a <cleanup_glue+0xe>
 8017c46:	f7ff fff9 	bl	8017c3c <cleanup_glue>
 8017c4a:	4621      	mov	r1, r4
 8017c4c:	4628      	mov	r0, r5
 8017c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c52:	f002 b917 	b.w	8019e84 <_free_r>
	...

08017c58 <_reclaim_reent>:
 8017c58:	4b2c      	ldr	r3, [pc, #176]	; (8017d0c <_reclaim_reent+0xb4>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	4283      	cmp	r3, r0
 8017c5e:	b570      	push	{r4, r5, r6, lr}
 8017c60:	4604      	mov	r4, r0
 8017c62:	d051      	beq.n	8017d08 <_reclaim_reent+0xb0>
 8017c64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017c66:	b143      	cbz	r3, 8017c7a <_reclaim_reent+0x22>
 8017c68:	68db      	ldr	r3, [r3, #12]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d14a      	bne.n	8017d04 <_reclaim_reent+0xac>
 8017c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017c70:	6819      	ldr	r1, [r3, #0]
 8017c72:	b111      	cbz	r1, 8017c7a <_reclaim_reent+0x22>
 8017c74:	4620      	mov	r0, r4
 8017c76:	f002 f905 	bl	8019e84 <_free_r>
 8017c7a:	6961      	ldr	r1, [r4, #20]
 8017c7c:	b111      	cbz	r1, 8017c84 <_reclaim_reent+0x2c>
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f002 f900 	bl	8019e84 <_free_r>
 8017c84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017c86:	b111      	cbz	r1, 8017c8e <_reclaim_reent+0x36>
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f002 f8fb 	bl	8019e84 <_free_r>
 8017c8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c90:	b111      	cbz	r1, 8017c98 <_reclaim_reent+0x40>
 8017c92:	4620      	mov	r0, r4
 8017c94:	f002 f8f6 	bl	8019e84 <_free_r>
 8017c98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017c9a:	b111      	cbz	r1, 8017ca2 <_reclaim_reent+0x4a>
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	f002 f8f1 	bl	8019e84 <_free_r>
 8017ca2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017ca4:	b111      	cbz	r1, 8017cac <_reclaim_reent+0x54>
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f002 f8ec 	bl	8019e84 <_free_r>
 8017cac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017cae:	b111      	cbz	r1, 8017cb6 <_reclaim_reent+0x5e>
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	f002 f8e7 	bl	8019e84 <_free_r>
 8017cb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017cb8:	b111      	cbz	r1, 8017cc0 <_reclaim_reent+0x68>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f002 f8e2 	bl	8019e84 <_free_r>
 8017cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cc2:	b111      	cbz	r1, 8017cca <_reclaim_reent+0x72>
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f002 f8dd 	bl	8019e84 <_free_r>
 8017cca:	69a3      	ldr	r3, [r4, #24]
 8017ccc:	b1e3      	cbz	r3, 8017d08 <_reclaim_reent+0xb0>
 8017cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	4798      	blx	r3
 8017cd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017cd6:	b1b9      	cbz	r1, 8017d08 <_reclaim_reent+0xb0>
 8017cd8:	4620      	mov	r0, r4
 8017cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cde:	f7ff bfad 	b.w	8017c3c <cleanup_glue>
 8017ce2:	5949      	ldr	r1, [r1, r5]
 8017ce4:	b941      	cbnz	r1, 8017cf8 <_reclaim_reent+0xa0>
 8017ce6:	3504      	adds	r5, #4
 8017ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cea:	2d80      	cmp	r5, #128	; 0x80
 8017cec:	68d9      	ldr	r1, [r3, #12]
 8017cee:	d1f8      	bne.n	8017ce2 <_reclaim_reent+0x8a>
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f002 f8c7 	bl	8019e84 <_free_r>
 8017cf6:	e7ba      	b.n	8017c6e <_reclaim_reent+0x16>
 8017cf8:	680e      	ldr	r6, [r1, #0]
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f002 f8c2 	bl	8019e84 <_free_r>
 8017d00:	4631      	mov	r1, r6
 8017d02:	e7ef      	b.n	8017ce4 <_reclaim_reent+0x8c>
 8017d04:	2500      	movs	r5, #0
 8017d06:	e7ef      	b.n	8017ce8 <_reclaim_reent+0x90>
 8017d08:	bd70      	pop	{r4, r5, r6, pc}
 8017d0a:	bf00      	nop
 8017d0c:	2000002c 	.word	0x2000002c

08017d10 <_sbrk_r>:
 8017d10:	b538      	push	{r3, r4, r5, lr}
 8017d12:	4d06      	ldr	r5, [pc, #24]	; (8017d2c <_sbrk_r+0x1c>)
 8017d14:	2300      	movs	r3, #0
 8017d16:	4604      	mov	r4, r0
 8017d18:	4608      	mov	r0, r1
 8017d1a:	602b      	str	r3, [r5, #0]
 8017d1c:	f7e9 ff04 	bl	8001b28 <_sbrk>
 8017d20:	1c43      	adds	r3, r0, #1
 8017d22:	d102      	bne.n	8017d2a <_sbrk_r+0x1a>
 8017d24:	682b      	ldr	r3, [r5, #0]
 8017d26:	b103      	cbz	r3, 8017d2a <_sbrk_r+0x1a>
 8017d28:	6023      	str	r3, [r4, #0]
 8017d2a:	bd38      	pop	{r3, r4, r5, pc}
 8017d2c:	20011d00 	.word	0x20011d00

08017d30 <siprintf>:
 8017d30:	b40e      	push	{r1, r2, r3}
 8017d32:	b500      	push	{lr}
 8017d34:	b09c      	sub	sp, #112	; 0x70
 8017d36:	ab1d      	add	r3, sp, #116	; 0x74
 8017d38:	9002      	str	r0, [sp, #8]
 8017d3a:	9006      	str	r0, [sp, #24]
 8017d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d40:	4809      	ldr	r0, [pc, #36]	; (8017d68 <siprintf+0x38>)
 8017d42:	9107      	str	r1, [sp, #28]
 8017d44:	9104      	str	r1, [sp, #16]
 8017d46:	4909      	ldr	r1, [pc, #36]	; (8017d6c <siprintf+0x3c>)
 8017d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d4c:	9105      	str	r1, [sp, #20]
 8017d4e:	6800      	ldr	r0, [r0, #0]
 8017d50:	9301      	str	r3, [sp, #4]
 8017d52:	a902      	add	r1, sp, #8
 8017d54:	f002 f93e 	bl	8019fd4 <_svfiprintf_r>
 8017d58:	9b02      	ldr	r3, [sp, #8]
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	701a      	strb	r2, [r3, #0]
 8017d5e:	b01c      	add	sp, #112	; 0x70
 8017d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d64:	b003      	add	sp, #12
 8017d66:	4770      	bx	lr
 8017d68:	2000002c 	.word	0x2000002c
 8017d6c:	ffff0208 	.word	0xffff0208

08017d70 <__sread>:
 8017d70:	b510      	push	{r4, lr}
 8017d72:	460c      	mov	r4, r1
 8017d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d78:	f002 fd1a 	bl	801a7b0 <_read_r>
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	bfab      	itete	ge
 8017d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017d82:	89a3      	ldrhlt	r3, [r4, #12]
 8017d84:	181b      	addge	r3, r3, r0
 8017d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017d8a:	bfac      	ite	ge
 8017d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8017d8e:	81a3      	strhlt	r3, [r4, #12]
 8017d90:	bd10      	pop	{r4, pc}

08017d92 <__swrite>:
 8017d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d96:	461f      	mov	r7, r3
 8017d98:	898b      	ldrh	r3, [r1, #12]
 8017d9a:	05db      	lsls	r3, r3, #23
 8017d9c:	4605      	mov	r5, r0
 8017d9e:	460c      	mov	r4, r1
 8017da0:	4616      	mov	r6, r2
 8017da2:	d505      	bpl.n	8017db0 <__swrite+0x1e>
 8017da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017da8:	2302      	movs	r3, #2
 8017daa:	2200      	movs	r2, #0
 8017dac:	f001 fb5a 	bl	8019464 <_lseek_r>
 8017db0:	89a3      	ldrh	r3, [r4, #12]
 8017db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017dba:	81a3      	strh	r3, [r4, #12]
 8017dbc:	4632      	mov	r2, r6
 8017dbe:	463b      	mov	r3, r7
 8017dc0:	4628      	mov	r0, r5
 8017dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017dc6:	f000 bec9 	b.w	8018b5c <_write_r>

08017dca <__sseek>:
 8017dca:	b510      	push	{r4, lr}
 8017dcc:	460c      	mov	r4, r1
 8017dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dd2:	f001 fb47 	bl	8019464 <_lseek_r>
 8017dd6:	1c43      	adds	r3, r0, #1
 8017dd8:	89a3      	ldrh	r3, [r4, #12]
 8017dda:	bf15      	itete	ne
 8017ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017de6:	81a3      	strheq	r3, [r4, #12]
 8017de8:	bf18      	it	ne
 8017dea:	81a3      	strhne	r3, [r4, #12]
 8017dec:	bd10      	pop	{r4, pc}

08017dee <__sclose>:
 8017dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017df2:	f000 bee3 	b.w	8018bbc <_close_r>

08017df6 <strncmp>:
 8017df6:	b510      	push	{r4, lr}
 8017df8:	b17a      	cbz	r2, 8017e1a <strncmp+0x24>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	3901      	subs	r1, #1
 8017dfe:	1884      	adds	r4, r0, r2
 8017e00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017e04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017e08:	4290      	cmp	r0, r2
 8017e0a:	d101      	bne.n	8017e10 <strncmp+0x1a>
 8017e0c:	42a3      	cmp	r3, r4
 8017e0e:	d101      	bne.n	8017e14 <strncmp+0x1e>
 8017e10:	1a80      	subs	r0, r0, r2
 8017e12:	bd10      	pop	{r4, pc}
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d1f3      	bne.n	8017e00 <strncmp+0xa>
 8017e18:	e7fa      	b.n	8017e10 <strncmp+0x1a>
 8017e1a:	4610      	mov	r0, r2
 8017e1c:	e7f9      	b.n	8017e12 <strncmp+0x1c>

08017e1e <strncpy>:
 8017e1e:	b510      	push	{r4, lr}
 8017e20:	3901      	subs	r1, #1
 8017e22:	4603      	mov	r3, r0
 8017e24:	b132      	cbz	r2, 8017e34 <strncpy+0x16>
 8017e26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017e2a:	f803 4b01 	strb.w	r4, [r3], #1
 8017e2e:	3a01      	subs	r2, #1
 8017e30:	2c00      	cmp	r4, #0
 8017e32:	d1f7      	bne.n	8017e24 <strncpy+0x6>
 8017e34:	441a      	add	r2, r3
 8017e36:	2100      	movs	r1, #0
 8017e38:	4293      	cmp	r3, r2
 8017e3a:	d100      	bne.n	8017e3e <strncpy+0x20>
 8017e3c:	bd10      	pop	{r4, pc}
 8017e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8017e42:	e7f9      	b.n	8017e38 <strncpy+0x1a>

08017e44 <sulp>:
 8017e44:	b570      	push	{r4, r5, r6, lr}
 8017e46:	4604      	mov	r4, r0
 8017e48:	460d      	mov	r5, r1
 8017e4a:	ec45 4b10 	vmov	d0, r4, r5
 8017e4e:	4616      	mov	r6, r2
 8017e50:	f001 feb2 	bl	8019bb8 <__ulp>
 8017e54:	ec51 0b10 	vmov	r0, r1, d0
 8017e58:	b17e      	cbz	r6, 8017e7a <sulp+0x36>
 8017e5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017e5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	dd09      	ble.n	8017e7a <sulp+0x36>
 8017e66:	051b      	lsls	r3, r3, #20
 8017e68:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017e6c:	2400      	movs	r4, #0
 8017e6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017e72:	4622      	mov	r2, r4
 8017e74:	462b      	mov	r3, r5
 8017e76:	f7e8 fbdf 	bl	8000638 <__aeabi_dmul>
 8017e7a:	bd70      	pop	{r4, r5, r6, pc}
 8017e7c:	0000      	movs	r0, r0
	...

08017e80 <_strtod_l>:
 8017e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e84:	ed2d 8b02 	vpush	{d8}
 8017e88:	b09d      	sub	sp, #116	; 0x74
 8017e8a:	461f      	mov	r7, r3
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	9318      	str	r3, [sp, #96]	; 0x60
 8017e90:	4ba2      	ldr	r3, [pc, #648]	; (801811c <_strtod_l+0x29c>)
 8017e92:	9213      	str	r2, [sp, #76]	; 0x4c
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	9305      	str	r3, [sp, #20]
 8017e98:	4604      	mov	r4, r0
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	4688      	mov	r8, r1
 8017e9e:	f7e8 f9b7 	bl	8000210 <strlen>
 8017ea2:	f04f 0a00 	mov.w	sl, #0
 8017ea6:	4605      	mov	r5, r0
 8017ea8:	f04f 0b00 	mov.w	fp, #0
 8017eac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017eb2:	781a      	ldrb	r2, [r3, #0]
 8017eb4:	2a2b      	cmp	r2, #43	; 0x2b
 8017eb6:	d04e      	beq.n	8017f56 <_strtod_l+0xd6>
 8017eb8:	d83b      	bhi.n	8017f32 <_strtod_l+0xb2>
 8017eba:	2a0d      	cmp	r2, #13
 8017ebc:	d834      	bhi.n	8017f28 <_strtod_l+0xa8>
 8017ebe:	2a08      	cmp	r2, #8
 8017ec0:	d834      	bhi.n	8017f2c <_strtod_l+0xac>
 8017ec2:	2a00      	cmp	r2, #0
 8017ec4:	d03e      	beq.n	8017f44 <_strtod_l+0xc4>
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8017eca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017ecc:	7833      	ldrb	r3, [r6, #0]
 8017ece:	2b30      	cmp	r3, #48	; 0x30
 8017ed0:	f040 80b0 	bne.w	8018034 <_strtod_l+0x1b4>
 8017ed4:	7873      	ldrb	r3, [r6, #1]
 8017ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017eda:	2b58      	cmp	r3, #88	; 0x58
 8017edc:	d168      	bne.n	8017fb0 <_strtod_l+0x130>
 8017ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ee0:	9301      	str	r3, [sp, #4]
 8017ee2:	ab18      	add	r3, sp, #96	; 0x60
 8017ee4:	9702      	str	r7, [sp, #8]
 8017ee6:	9300      	str	r3, [sp, #0]
 8017ee8:	4a8d      	ldr	r2, [pc, #564]	; (8018120 <_strtod_l+0x2a0>)
 8017eea:	ab19      	add	r3, sp, #100	; 0x64
 8017eec:	a917      	add	r1, sp, #92	; 0x5c
 8017eee:	4620      	mov	r0, r4
 8017ef0:	f000 ffb0 	bl	8018e54 <__gethex>
 8017ef4:	f010 0707 	ands.w	r7, r0, #7
 8017ef8:	4605      	mov	r5, r0
 8017efa:	d005      	beq.n	8017f08 <_strtod_l+0x88>
 8017efc:	2f06      	cmp	r7, #6
 8017efe:	d12c      	bne.n	8017f5a <_strtod_l+0xda>
 8017f00:	3601      	adds	r6, #1
 8017f02:	2300      	movs	r3, #0
 8017f04:	9617      	str	r6, [sp, #92]	; 0x5c
 8017f06:	930a      	str	r3, [sp, #40]	; 0x28
 8017f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	f040 8590 	bne.w	8018a30 <_strtod_l+0xbb0>
 8017f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f12:	b1eb      	cbz	r3, 8017f50 <_strtod_l+0xd0>
 8017f14:	4652      	mov	r2, sl
 8017f16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017f1a:	ec43 2b10 	vmov	d0, r2, r3
 8017f1e:	b01d      	add	sp, #116	; 0x74
 8017f20:	ecbd 8b02 	vpop	{d8}
 8017f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f28:	2a20      	cmp	r2, #32
 8017f2a:	d1cc      	bne.n	8017ec6 <_strtod_l+0x46>
 8017f2c:	3301      	adds	r3, #1
 8017f2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017f30:	e7be      	b.n	8017eb0 <_strtod_l+0x30>
 8017f32:	2a2d      	cmp	r2, #45	; 0x2d
 8017f34:	d1c7      	bne.n	8017ec6 <_strtod_l+0x46>
 8017f36:	2201      	movs	r2, #1
 8017f38:	920a      	str	r2, [sp, #40]	; 0x28
 8017f3a:	1c5a      	adds	r2, r3, #1
 8017f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8017f3e:	785b      	ldrb	r3, [r3, #1]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d1c2      	bne.n	8017eca <_strtod_l+0x4a>
 8017f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	f040 856e 	bne.w	8018a2c <_strtod_l+0xbac>
 8017f50:	4652      	mov	r2, sl
 8017f52:	465b      	mov	r3, fp
 8017f54:	e7e1      	b.n	8017f1a <_strtod_l+0x9a>
 8017f56:	2200      	movs	r2, #0
 8017f58:	e7ee      	b.n	8017f38 <_strtod_l+0xb8>
 8017f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017f5c:	b13a      	cbz	r2, 8017f6e <_strtod_l+0xee>
 8017f5e:	2135      	movs	r1, #53	; 0x35
 8017f60:	a81a      	add	r0, sp, #104	; 0x68
 8017f62:	f001 ff34 	bl	8019dce <__copybits>
 8017f66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f001 faf3 	bl	8019554 <_Bfree>
 8017f6e:	3f01      	subs	r7, #1
 8017f70:	2f04      	cmp	r7, #4
 8017f72:	d806      	bhi.n	8017f82 <_strtod_l+0x102>
 8017f74:	e8df f007 	tbb	[pc, r7]
 8017f78:	1714030a 	.word	0x1714030a
 8017f7c:	0a          	.byte	0x0a
 8017f7d:	00          	.byte	0x00
 8017f7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8017f82:	0728      	lsls	r0, r5, #28
 8017f84:	d5c0      	bpl.n	8017f08 <_strtod_l+0x88>
 8017f86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017f8a:	e7bd      	b.n	8017f08 <_strtod_l+0x88>
 8017f8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8017f90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017f92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017f96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017f9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8017f9e:	e7f0      	b.n	8017f82 <_strtod_l+0x102>
 8017fa0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8018124 <_strtod_l+0x2a4>
 8017fa4:	e7ed      	b.n	8017f82 <_strtod_l+0x102>
 8017fa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017faa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017fae:	e7e8      	b.n	8017f82 <_strtod_l+0x102>
 8017fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017fb2:	1c5a      	adds	r2, r3, #1
 8017fb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8017fb6:	785b      	ldrb	r3, [r3, #1]
 8017fb8:	2b30      	cmp	r3, #48	; 0x30
 8017fba:	d0f9      	beq.n	8017fb0 <_strtod_l+0x130>
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d0a3      	beq.n	8017f08 <_strtod_l+0x88>
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	f04f 0900 	mov.w	r9, #0
 8017fc6:	9304      	str	r3, [sp, #16]
 8017fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017fca:	9308      	str	r3, [sp, #32]
 8017fcc:	f8cd 901c 	str.w	r9, [sp, #28]
 8017fd0:	464f      	mov	r7, r9
 8017fd2:	220a      	movs	r2, #10
 8017fd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8017fd6:	7806      	ldrb	r6, [r0, #0]
 8017fd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017fdc:	b2d9      	uxtb	r1, r3
 8017fde:	2909      	cmp	r1, #9
 8017fe0:	d92a      	bls.n	8018038 <_strtod_l+0x1b8>
 8017fe2:	9905      	ldr	r1, [sp, #20]
 8017fe4:	462a      	mov	r2, r5
 8017fe6:	f7ff ff06 	bl	8017df6 <strncmp>
 8017fea:	b398      	cbz	r0, 8018054 <_strtod_l+0x1d4>
 8017fec:	2000      	movs	r0, #0
 8017fee:	4632      	mov	r2, r6
 8017ff0:	463d      	mov	r5, r7
 8017ff2:	9005      	str	r0, [sp, #20]
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	2a65      	cmp	r2, #101	; 0x65
 8017ff8:	d001      	beq.n	8017ffe <_strtod_l+0x17e>
 8017ffa:	2a45      	cmp	r2, #69	; 0x45
 8017ffc:	d118      	bne.n	8018030 <_strtod_l+0x1b0>
 8017ffe:	b91d      	cbnz	r5, 8018008 <_strtod_l+0x188>
 8018000:	9a04      	ldr	r2, [sp, #16]
 8018002:	4302      	orrs	r2, r0
 8018004:	d09e      	beq.n	8017f44 <_strtod_l+0xc4>
 8018006:	2500      	movs	r5, #0
 8018008:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801800c:	f108 0201 	add.w	r2, r8, #1
 8018010:	9217      	str	r2, [sp, #92]	; 0x5c
 8018012:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018016:	2a2b      	cmp	r2, #43	; 0x2b
 8018018:	d075      	beq.n	8018106 <_strtod_l+0x286>
 801801a:	2a2d      	cmp	r2, #45	; 0x2d
 801801c:	d07b      	beq.n	8018116 <_strtod_l+0x296>
 801801e:	f04f 0c00 	mov.w	ip, #0
 8018022:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018026:	2909      	cmp	r1, #9
 8018028:	f240 8082 	bls.w	8018130 <_strtod_l+0x2b0>
 801802c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8018030:	2600      	movs	r6, #0
 8018032:	e09d      	b.n	8018170 <_strtod_l+0x2f0>
 8018034:	2300      	movs	r3, #0
 8018036:	e7c4      	b.n	8017fc2 <_strtod_l+0x142>
 8018038:	2f08      	cmp	r7, #8
 801803a:	bfd8      	it	le
 801803c:	9907      	ldrle	r1, [sp, #28]
 801803e:	f100 0001 	add.w	r0, r0, #1
 8018042:	bfda      	itte	le
 8018044:	fb02 3301 	mlale	r3, r2, r1, r3
 8018048:	9307      	strle	r3, [sp, #28]
 801804a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801804e:	3701      	adds	r7, #1
 8018050:	9017      	str	r0, [sp, #92]	; 0x5c
 8018052:	e7bf      	b.n	8017fd4 <_strtod_l+0x154>
 8018054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018056:	195a      	adds	r2, r3, r5
 8018058:	9217      	str	r2, [sp, #92]	; 0x5c
 801805a:	5d5a      	ldrb	r2, [r3, r5]
 801805c:	2f00      	cmp	r7, #0
 801805e:	d037      	beq.n	80180d0 <_strtod_l+0x250>
 8018060:	9005      	str	r0, [sp, #20]
 8018062:	463d      	mov	r5, r7
 8018064:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8018068:	2b09      	cmp	r3, #9
 801806a:	d912      	bls.n	8018092 <_strtod_l+0x212>
 801806c:	2301      	movs	r3, #1
 801806e:	e7c2      	b.n	8017ff6 <_strtod_l+0x176>
 8018070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018072:	1c5a      	adds	r2, r3, #1
 8018074:	9217      	str	r2, [sp, #92]	; 0x5c
 8018076:	785a      	ldrb	r2, [r3, #1]
 8018078:	3001      	adds	r0, #1
 801807a:	2a30      	cmp	r2, #48	; 0x30
 801807c:	d0f8      	beq.n	8018070 <_strtod_l+0x1f0>
 801807e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018082:	2b08      	cmp	r3, #8
 8018084:	f200 84d9 	bhi.w	8018a3a <_strtod_l+0xbba>
 8018088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801808a:	9005      	str	r0, [sp, #20]
 801808c:	2000      	movs	r0, #0
 801808e:	9308      	str	r3, [sp, #32]
 8018090:	4605      	mov	r5, r0
 8018092:	3a30      	subs	r2, #48	; 0x30
 8018094:	f100 0301 	add.w	r3, r0, #1
 8018098:	d014      	beq.n	80180c4 <_strtod_l+0x244>
 801809a:	9905      	ldr	r1, [sp, #20]
 801809c:	4419      	add	r1, r3
 801809e:	9105      	str	r1, [sp, #20]
 80180a0:	462b      	mov	r3, r5
 80180a2:	eb00 0e05 	add.w	lr, r0, r5
 80180a6:	210a      	movs	r1, #10
 80180a8:	4573      	cmp	r3, lr
 80180aa:	d113      	bne.n	80180d4 <_strtod_l+0x254>
 80180ac:	182b      	adds	r3, r5, r0
 80180ae:	2b08      	cmp	r3, #8
 80180b0:	f105 0501 	add.w	r5, r5, #1
 80180b4:	4405      	add	r5, r0
 80180b6:	dc1c      	bgt.n	80180f2 <_strtod_l+0x272>
 80180b8:	9907      	ldr	r1, [sp, #28]
 80180ba:	230a      	movs	r3, #10
 80180bc:	fb03 2301 	mla	r3, r3, r1, r2
 80180c0:	9307      	str	r3, [sp, #28]
 80180c2:	2300      	movs	r3, #0
 80180c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80180c6:	1c51      	adds	r1, r2, #1
 80180c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80180ca:	7852      	ldrb	r2, [r2, #1]
 80180cc:	4618      	mov	r0, r3
 80180ce:	e7c9      	b.n	8018064 <_strtod_l+0x1e4>
 80180d0:	4638      	mov	r0, r7
 80180d2:	e7d2      	b.n	801807a <_strtod_l+0x1fa>
 80180d4:	2b08      	cmp	r3, #8
 80180d6:	dc04      	bgt.n	80180e2 <_strtod_l+0x262>
 80180d8:	9e07      	ldr	r6, [sp, #28]
 80180da:	434e      	muls	r6, r1
 80180dc:	9607      	str	r6, [sp, #28]
 80180de:	3301      	adds	r3, #1
 80180e0:	e7e2      	b.n	80180a8 <_strtod_l+0x228>
 80180e2:	f103 0c01 	add.w	ip, r3, #1
 80180e6:	f1bc 0f10 	cmp.w	ip, #16
 80180ea:	bfd8      	it	le
 80180ec:	fb01 f909 	mulle.w	r9, r1, r9
 80180f0:	e7f5      	b.n	80180de <_strtod_l+0x25e>
 80180f2:	2d10      	cmp	r5, #16
 80180f4:	bfdc      	itt	le
 80180f6:	230a      	movle	r3, #10
 80180f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80180fc:	e7e1      	b.n	80180c2 <_strtod_l+0x242>
 80180fe:	2300      	movs	r3, #0
 8018100:	9305      	str	r3, [sp, #20]
 8018102:	2301      	movs	r3, #1
 8018104:	e77c      	b.n	8018000 <_strtod_l+0x180>
 8018106:	f04f 0c00 	mov.w	ip, #0
 801810a:	f108 0202 	add.w	r2, r8, #2
 801810e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018110:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018114:	e785      	b.n	8018022 <_strtod_l+0x1a2>
 8018116:	f04f 0c01 	mov.w	ip, #1
 801811a:	e7f6      	b.n	801810a <_strtod_l+0x28a>
 801811c:	0801e2c8 	.word	0x0801e2c8
 8018120:	0801e168 	.word	0x0801e168
 8018124:	7ff00000 	.word	0x7ff00000
 8018128:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801812a:	1c51      	adds	r1, r2, #1
 801812c:	9117      	str	r1, [sp, #92]	; 0x5c
 801812e:	7852      	ldrb	r2, [r2, #1]
 8018130:	2a30      	cmp	r2, #48	; 0x30
 8018132:	d0f9      	beq.n	8018128 <_strtod_l+0x2a8>
 8018134:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018138:	2908      	cmp	r1, #8
 801813a:	f63f af79 	bhi.w	8018030 <_strtod_l+0x1b0>
 801813e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8018142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018144:	9206      	str	r2, [sp, #24]
 8018146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018148:	1c51      	adds	r1, r2, #1
 801814a:	9117      	str	r1, [sp, #92]	; 0x5c
 801814c:	7852      	ldrb	r2, [r2, #1]
 801814e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8018152:	2e09      	cmp	r6, #9
 8018154:	d937      	bls.n	80181c6 <_strtod_l+0x346>
 8018156:	9e06      	ldr	r6, [sp, #24]
 8018158:	1b89      	subs	r1, r1, r6
 801815a:	2908      	cmp	r1, #8
 801815c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8018160:	dc02      	bgt.n	8018168 <_strtod_l+0x2e8>
 8018162:	4576      	cmp	r6, lr
 8018164:	bfa8      	it	ge
 8018166:	4676      	movge	r6, lr
 8018168:	f1bc 0f00 	cmp.w	ip, #0
 801816c:	d000      	beq.n	8018170 <_strtod_l+0x2f0>
 801816e:	4276      	negs	r6, r6
 8018170:	2d00      	cmp	r5, #0
 8018172:	d14d      	bne.n	8018210 <_strtod_l+0x390>
 8018174:	9904      	ldr	r1, [sp, #16]
 8018176:	4301      	orrs	r1, r0
 8018178:	f47f aec6 	bne.w	8017f08 <_strtod_l+0x88>
 801817c:	2b00      	cmp	r3, #0
 801817e:	f47f aee1 	bne.w	8017f44 <_strtod_l+0xc4>
 8018182:	2a69      	cmp	r2, #105	; 0x69
 8018184:	d027      	beq.n	80181d6 <_strtod_l+0x356>
 8018186:	dc24      	bgt.n	80181d2 <_strtod_l+0x352>
 8018188:	2a49      	cmp	r2, #73	; 0x49
 801818a:	d024      	beq.n	80181d6 <_strtod_l+0x356>
 801818c:	2a4e      	cmp	r2, #78	; 0x4e
 801818e:	f47f aed9 	bne.w	8017f44 <_strtod_l+0xc4>
 8018192:	499f      	ldr	r1, [pc, #636]	; (8018410 <_strtod_l+0x590>)
 8018194:	a817      	add	r0, sp, #92	; 0x5c
 8018196:	f001 f8b5 	bl	8019304 <__match>
 801819a:	2800      	cmp	r0, #0
 801819c:	f43f aed2 	beq.w	8017f44 <_strtod_l+0xc4>
 80181a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181a2:	781b      	ldrb	r3, [r3, #0]
 80181a4:	2b28      	cmp	r3, #40	; 0x28
 80181a6:	d12d      	bne.n	8018204 <_strtod_l+0x384>
 80181a8:	499a      	ldr	r1, [pc, #616]	; (8018414 <_strtod_l+0x594>)
 80181aa:	aa1a      	add	r2, sp, #104	; 0x68
 80181ac:	a817      	add	r0, sp, #92	; 0x5c
 80181ae:	f001 f8bd 	bl	801932c <__hexnan>
 80181b2:	2805      	cmp	r0, #5
 80181b4:	d126      	bne.n	8018204 <_strtod_l+0x384>
 80181b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80181b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80181bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80181c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80181c4:	e6a0      	b.n	8017f08 <_strtod_l+0x88>
 80181c6:	210a      	movs	r1, #10
 80181c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80181cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80181d0:	e7b9      	b.n	8018146 <_strtod_l+0x2c6>
 80181d2:	2a6e      	cmp	r2, #110	; 0x6e
 80181d4:	e7db      	b.n	801818e <_strtod_l+0x30e>
 80181d6:	4990      	ldr	r1, [pc, #576]	; (8018418 <_strtod_l+0x598>)
 80181d8:	a817      	add	r0, sp, #92	; 0x5c
 80181da:	f001 f893 	bl	8019304 <__match>
 80181de:	2800      	cmp	r0, #0
 80181e0:	f43f aeb0 	beq.w	8017f44 <_strtod_l+0xc4>
 80181e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181e6:	498d      	ldr	r1, [pc, #564]	; (801841c <_strtod_l+0x59c>)
 80181e8:	3b01      	subs	r3, #1
 80181ea:	a817      	add	r0, sp, #92	; 0x5c
 80181ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80181ee:	f001 f889 	bl	8019304 <__match>
 80181f2:	b910      	cbnz	r0, 80181fa <_strtod_l+0x37a>
 80181f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80181f6:	3301      	adds	r3, #1
 80181f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80181fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 801842c <_strtod_l+0x5ac>
 80181fe:	f04f 0a00 	mov.w	sl, #0
 8018202:	e681      	b.n	8017f08 <_strtod_l+0x88>
 8018204:	4886      	ldr	r0, [pc, #536]	; (8018420 <_strtod_l+0x5a0>)
 8018206:	f002 fae7 	bl	801a7d8 <nan>
 801820a:	ec5b ab10 	vmov	sl, fp, d0
 801820e:	e67b      	b.n	8017f08 <_strtod_l+0x88>
 8018210:	9b05      	ldr	r3, [sp, #20]
 8018212:	9807      	ldr	r0, [sp, #28]
 8018214:	1af3      	subs	r3, r6, r3
 8018216:	2f00      	cmp	r7, #0
 8018218:	bf08      	it	eq
 801821a:	462f      	moveq	r7, r5
 801821c:	2d10      	cmp	r5, #16
 801821e:	9306      	str	r3, [sp, #24]
 8018220:	46a8      	mov	r8, r5
 8018222:	bfa8      	it	ge
 8018224:	f04f 0810 	movge.w	r8, #16
 8018228:	f7e8 f98c 	bl	8000544 <__aeabi_ui2d>
 801822c:	2d09      	cmp	r5, #9
 801822e:	4682      	mov	sl, r0
 8018230:	468b      	mov	fp, r1
 8018232:	dd13      	ble.n	801825c <_strtod_l+0x3dc>
 8018234:	4b7b      	ldr	r3, [pc, #492]	; (8018424 <_strtod_l+0x5a4>)
 8018236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801823a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801823e:	f7e8 f9fb 	bl	8000638 <__aeabi_dmul>
 8018242:	4682      	mov	sl, r0
 8018244:	4648      	mov	r0, r9
 8018246:	468b      	mov	fp, r1
 8018248:	f7e8 f97c 	bl	8000544 <__aeabi_ui2d>
 801824c:	4602      	mov	r2, r0
 801824e:	460b      	mov	r3, r1
 8018250:	4650      	mov	r0, sl
 8018252:	4659      	mov	r1, fp
 8018254:	f7e8 f83a 	bl	80002cc <__adddf3>
 8018258:	4682      	mov	sl, r0
 801825a:	468b      	mov	fp, r1
 801825c:	2d0f      	cmp	r5, #15
 801825e:	dc38      	bgt.n	80182d2 <_strtod_l+0x452>
 8018260:	9b06      	ldr	r3, [sp, #24]
 8018262:	2b00      	cmp	r3, #0
 8018264:	f43f ae50 	beq.w	8017f08 <_strtod_l+0x88>
 8018268:	dd24      	ble.n	80182b4 <_strtod_l+0x434>
 801826a:	2b16      	cmp	r3, #22
 801826c:	dc0b      	bgt.n	8018286 <_strtod_l+0x406>
 801826e:	496d      	ldr	r1, [pc, #436]	; (8018424 <_strtod_l+0x5a4>)
 8018270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018278:	4652      	mov	r2, sl
 801827a:	465b      	mov	r3, fp
 801827c:	f7e8 f9dc 	bl	8000638 <__aeabi_dmul>
 8018280:	4682      	mov	sl, r0
 8018282:	468b      	mov	fp, r1
 8018284:	e640      	b.n	8017f08 <_strtod_l+0x88>
 8018286:	9a06      	ldr	r2, [sp, #24]
 8018288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801828c:	4293      	cmp	r3, r2
 801828e:	db20      	blt.n	80182d2 <_strtod_l+0x452>
 8018290:	4c64      	ldr	r4, [pc, #400]	; (8018424 <_strtod_l+0x5a4>)
 8018292:	f1c5 050f 	rsb	r5, r5, #15
 8018296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801829a:	4652      	mov	r2, sl
 801829c:	465b      	mov	r3, fp
 801829e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182a2:	f7e8 f9c9 	bl	8000638 <__aeabi_dmul>
 80182a6:	9b06      	ldr	r3, [sp, #24]
 80182a8:	1b5d      	subs	r5, r3, r5
 80182aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80182ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80182b2:	e7e3      	b.n	801827c <_strtod_l+0x3fc>
 80182b4:	9b06      	ldr	r3, [sp, #24]
 80182b6:	3316      	adds	r3, #22
 80182b8:	db0b      	blt.n	80182d2 <_strtod_l+0x452>
 80182ba:	9b05      	ldr	r3, [sp, #20]
 80182bc:	1b9e      	subs	r6, r3, r6
 80182be:	4b59      	ldr	r3, [pc, #356]	; (8018424 <_strtod_l+0x5a4>)
 80182c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80182c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80182c8:	4650      	mov	r0, sl
 80182ca:	4659      	mov	r1, fp
 80182cc:	f7e8 fade 	bl	800088c <__aeabi_ddiv>
 80182d0:	e7d6      	b.n	8018280 <_strtod_l+0x400>
 80182d2:	9b06      	ldr	r3, [sp, #24]
 80182d4:	eba5 0808 	sub.w	r8, r5, r8
 80182d8:	4498      	add	r8, r3
 80182da:	f1b8 0f00 	cmp.w	r8, #0
 80182de:	dd74      	ble.n	80183ca <_strtod_l+0x54a>
 80182e0:	f018 030f 	ands.w	r3, r8, #15
 80182e4:	d00a      	beq.n	80182fc <_strtod_l+0x47c>
 80182e6:	494f      	ldr	r1, [pc, #316]	; (8018424 <_strtod_l+0x5a4>)
 80182e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80182ec:	4652      	mov	r2, sl
 80182ee:	465b      	mov	r3, fp
 80182f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80182f4:	f7e8 f9a0 	bl	8000638 <__aeabi_dmul>
 80182f8:	4682      	mov	sl, r0
 80182fa:	468b      	mov	fp, r1
 80182fc:	f038 080f 	bics.w	r8, r8, #15
 8018300:	d04f      	beq.n	80183a2 <_strtod_l+0x522>
 8018302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8018306:	dd22      	ble.n	801834e <_strtod_l+0x4ce>
 8018308:	2500      	movs	r5, #0
 801830a:	462e      	mov	r6, r5
 801830c:	9507      	str	r5, [sp, #28]
 801830e:	9505      	str	r5, [sp, #20]
 8018310:	2322      	movs	r3, #34	; 0x22
 8018312:	f8df b118 	ldr.w	fp, [pc, #280]	; 801842c <_strtod_l+0x5ac>
 8018316:	6023      	str	r3, [r4, #0]
 8018318:	f04f 0a00 	mov.w	sl, #0
 801831c:	9b07      	ldr	r3, [sp, #28]
 801831e:	2b00      	cmp	r3, #0
 8018320:	f43f adf2 	beq.w	8017f08 <_strtod_l+0x88>
 8018324:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018326:	4620      	mov	r0, r4
 8018328:	f001 f914 	bl	8019554 <_Bfree>
 801832c:	9905      	ldr	r1, [sp, #20]
 801832e:	4620      	mov	r0, r4
 8018330:	f001 f910 	bl	8019554 <_Bfree>
 8018334:	4631      	mov	r1, r6
 8018336:	4620      	mov	r0, r4
 8018338:	f001 f90c 	bl	8019554 <_Bfree>
 801833c:	9907      	ldr	r1, [sp, #28]
 801833e:	4620      	mov	r0, r4
 8018340:	f001 f908 	bl	8019554 <_Bfree>
 8018344:	4629      	mov	r1, r5
 8018346:	4620      	mov	r0, r4
 8018348:	f001 f904 	bl	8019554 <_Bfree>
 801834c:	e5dc      	b.n	8017f08 <_strtod_l+0x88>
 801834e:	4b36      	ldr	r3, [pc, #216]	; (8018428 <_strtod_l+0x5a8>)
 8018350:	9304      	str	r3, [sp, #16]
 8018352:	2300      	movs	r3, #0
 8018354:	ea4f 1828 	mov.w	r8, r8, asr #4
 8018358:	4650      	mov	r0, sl
 801835a:	4659      	mov	r1, fp
 801835c:	4699      	mov	r9, r3
 801835e:	f1b8 0f01 	cmp.w	r8, #1
 8018362:	dc21      	bgt.n	80183a8 <_strtod_l+0x528>
 8018364:	b10b      	cbz	r3, 801836a <_strtod_l+0x4ea>
 8018366:	4682      	mov	sl, r0
 8018368:	468b      	mov	fp, r1
 801836a:	4b2f      	ldr	r3, [pc, #188]	; (8018428 <_strtod_l+0x5a8>)
 801836c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8018370:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8018374:	4652      	mov	r2, sl
 8018376:	465b      	mov	r3, fp
 8018378:	e9d9 0100 	ldrd	r0, r1, [r9]
 801837c:	f7e8 f95c 	bl	8000638 <__aeabi_dmul>
 8018380:	4b2a      	ldr	r3, [pc, #168]	; (801842c <_strtod_l+0x5ac>)
 8018382:	460a      	mov	r2, r1
 8018384:	400b      	ands	r3, r1
 8018386:	492a      	ldr	r1, [pc, #168]	; (8018430 <_strtod_l+0x5b0>)
 8018388:	428b      	cmp	r3, r1
 801838a:	4682      	mov	sl, r0
 801838c:	d8bc      	bhi.n	8018308 <_strtod_l+0x488>
 801838e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018392:	428b      	cmp	r3, r1
 8018394:	bf86      	itte	hi
 8018396:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8018434 <_strtod_l+0x5b4>
 801839a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801839e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80183a2:	2300      	movs	r3, #0
 80183a4:	9304      	str	r3, [sp, #16]
 80183a6:	e084      	b.n	80184b2 <_strtod_l+0x632>
 80183a8:	f018 0f01 	tst.w	r8, #1
 80183ac:	d005      	beq.n	80183ba <_strtod_l+0x53a>
 80183ae:	9b04      	ldr	r3, [sp, #16]
 80183b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b4:	f7e8 f940 	bl	8000638 <__aeabi_dmul>
 80183b8:	2301      	movs	r3, #1
 80183ba:	9a04      	ldr	r2, [sp, #16]
 80183bc:	3208      	adds	r2, #8
 80183be:	f109 0901 	add.w	r9, r9, #1
 80183c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80183c6:	9204      	str	r2, [sp, #16]
 80183c8:	e7c9      	b.n	801835e <_strtod_l+0x4de>
 80183ca:	d0ea      	beq.n	80183a2 <_strtod_l+0x522>
 80183cc:	f1c8 0800 	rsb	r8, r8, #0
 80183d0:	f018 020f 	ands.w	r2, r8, #15
 80183d4:	d00a      	beq.n	80183ec <_strtod_l+0x56c>
 80183d6:	4b13      	ldr	r3, [pc, #76]	; (8018424 <_strtod_l+0x5a4>)
 80183d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183dc:	4650      	mov	r0, sl
 80183de:	4659      	mov	r1, fp
 80183e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e4:	f7e8 fa52 	bl	800088c <__aeabi_ddiv>
 80183e8:	4682      	mov	sl, r0
 80183ea:	468b      	mov	fp, r1
 80183ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80183f0:	d0d7      	beq.n	80183a2 <_strtod_l+0x522>
 80183f2:	f1b8 0f1f 	cmp.w	r8, #31
 80183f6:	dd1f      	ble.n	8018438 <_strtod_l+0x5b8>
 80183f8:	2500      	movs	r5, #0
 80183fa:	462e      	mov	r6, r5
 80183fc:	9507      	str	r5, [sp, #28]
 80183fe:	9505      	str	r5, [sp, #20]
 8018400:	2322      	movs	r3, #34	; 0x22
 8018402:	f04f 0a00 	mov.w	sl, #0
 8018406:	f04f 0b00 	mov.w	fp, #0
 801840a:	6023      	str	r3, [r4, #0]
 801840c:	e786      	b.n	801831c <_strtod_l+0x49c>
 801840e:	bf00      	nop
 8018410:	0801e163 	.word	0x0801e163
 8018414:	0801e17c 	.word	0x0801e17c
 8018418:	0801e15a 	.word	0x0801e15a
 801841c:	0801e15d 	.word	0x0801e15d
 8018420:	0801e250 	.word	0x0801e250
 8018424:	0801e360 	.word	0x0801e360
 8018428:	0801e338 	.word	0x0801e338
 801842c:	7ff00000 	.word	0x7ff00000
 8018430:	7ca00000 	.word	0x7ca00000
 8018434:	7fefffff 	.word	0x7fefffff
 8018438:	f018 0310 	ands.w	r3, r8, #16
 801843c:	bf18      	it	ne
 801843e:	236a      	movne	r3, #106	; 0x6a
 8018440:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80187f0 <_strtod_l+0x970>
 8018444:	9304      	str	r3, [sp, #16]
 8018446:	4650      	mov	r0, sl
 8018448:	4659      	mov	r1, fp
 801844a:	2300      	movs	r3, #0
 801844c:	f018 0f01 	tst.w	r8, #1
 8018450:	d004      	beq.n	801845c <_strtod_l+0x5dc>
 8018452:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018456:	f7e8 f8ef 	bl	8000638 <__aeabi_dmul>
 801845a:	2301      	movs	r3, #1
 801845c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8018460:	f109 0908 	add.w	r9, r9, #8
 8018464:	d1f2      	bne.n	801844c <_strtod_l+0x5cc>
 8018466:	b10b      	cbz	r3, 801846c <_strtod_l+0x5ec>
 8018468:	4682      	mov	sl, r0
 801846a:	468b      	mov	fp, r1
 801846c:	9b04      	ldr	r3, [sp, #16]
 801846e:	b1c3      	cbz	r3, 80184a2 <_strtod_l+0x622>
 8018470:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8018474:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018478:	2b00      	cmp	r3, #0
 801847a:	4659      	mov	r1, fp
 801847c:	dd11      	ble.n	80184a2 <_strtod_l+0x622>
 801847e:	2b1f      	cmp	r3, #31
 8018480:	f340 8124 	ble.w	80186cc <_strtod_l+0x84c>
 8018484:	2b34      	cmp	r3, #52	; 0x34
 8018486:	bfde      	ittt	le
 8018488:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801848c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8018490:	fa03 f202 	lslle.w	r2, r3, r2
 8018494:	f04f 0a00 	mov.w	sl, #0
 8018498:	bfcc      	ite	gt
 801849a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801849e:	ea02 0b01 	andle.w	fp, r2, r1
 80184a2:	2200      	movs	r2, #0
 80184a4:	2300      	movs	r3, #0
 80184a6:	4650      	mov	r0, sl
 80184a8:	4659      	mov	r1, fp
 80184aa:	f7e8 fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 80184ae:	2800      	cmp	r0, #0
 80184b0:	d1a2      	bne.n	80183f8 <_strtod_l+0x578>
 80184b2:	9b07      	ldr	r3, [sp, #28]
 80184b4:	9300      	str	r3, [sp, #0]
 80184b6:	9908      	ldr	r1, [sp, #32]
 80184b8:	462b      	mov	r3, r5
 80184ba:	463a      	mov	r2, r7
 80184bc:	4620      	mov	r0, r4
 80184be:	f001 f8b1 	bl	8019624 <__s2b>
 80184c2:	9007      	str	r0, [sp, #28]
 80184c4:	2800      	cmp	r0, #0
 80184c6:	f43f af1f 	beq.w	8018308 <_strtod_l+0x488>
 80184ca:	9b05      	ldr	r3, [sp, #20]
 80184cc:	1b9e      	subs	r6, r3, r6
 80184ce:	9b06      	ldr	r3, [sp, #24]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	bfb4      	ite	lt
 80184d4:	4633      	movlt	r3, r6
 80184d6:	2300      	movge	r3, #0
 80184d8:	930c      	str	r3, [sp, #48]	; 0x30
 80184da:	9b06      	ldr	r3, [sp, #24]
 80184dc:	2500      	movs	r5, #0
 80184de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184e2:	9312      	str	r3, [sp, #72]	; 0x48
 80184e4:	462e      	mov	r6, r5
 80184e6:	9b07      	ldr	r3, [sp, #28]
 80184e8:	4620      	mov	r0, r4
 80184ea:	6859      	ldr	r1, [r3, #4]
 80184ec:	f000 fff2 	bl	80194d4 <_Balloc>
 80184f0:	9005      	str	r0, [sp, #20]
 80184f2:	2800      	cmp	r0, #0
 80184f4:	f43f af0c 	beq.w	8018310 <_strtod_l+0x490>
 80184f8:	9b07      	ldr	r3, [sp, #28]
 80184fa:	691a      	ldr	r2, [r3, #16]
 80184fc:	3202      	adds	r2, #2
 80184fe:	f103 010c 	add.w	r1, r3, #12
 8018502:	0092      	lsls	r2, r2, #2
 8018504:	300c      	adds	r0, #12
 8018506:	f7ff fa7e 	bl	8017a06 <memcpy>
 801850a:	ec4b ab10 	vmov	d0, sl, fp
 801850e:	aa1a      	add	r2, sp, #104	; 0x68
 8018510:	a919      	add	r1, sp, #100	; 0x64
 8018512:	4620      	mov	r0, r4
 8018514:	f001 fbcc 	bl	8019cb0 <__d2b>
 8018518:	ec4b ab18 	vmov	d8, sl, fp
 801851c:	9018      	str	r0, [sp, #96]	; 0x60
 801851e:	2800      	cmp	r0, #0
 8018520:	f43f aef6 	beq.w	8018310 <_strtod_l+0x490>
 8018524:	2101      	movs	r1, #1
 8018526:	4620      	mov	r0, r4
 8018528:	f001 f916 	bl	8019758 <__i2b>
 801852c:	4606      	mov	r6, r0
 801852e:	2800      	cmp	r0, #0
 8018530:	f43f aeee 	beq.w	8018310 <_strtod_l+0x490>
 8018534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018536:	9904      	ldr	r1, [sp, #16]
 8018538:	2b00      	cmp	r3, #0
 801853a:	bfab      	itete	ge
 801853c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801853e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8018540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8018542:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8018546:	bfac      	ite	ge
 8018548:	eb03 0902 	addge.w	r9, r3, r2
 801854c:	1ad7      	sublt	r7, r2, r3
 801854e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018550:	eba3 0801 	sub.w	r8, r3, r1
 8018554:	4490      	add	r8, r2
 8018556:	4ba1      	ldr	r3, [pc, #644]	; (80187dc <_strtod_l+0x95c>)
 8018558:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801855c:	4598      	cmp	r8, r3
 801855e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018562:	f280 80c7 	bge.w	80186f4 <_strtod_l+0x874>
 8018566:	eba3 0308 	sub.w	r3, r3, r8
 801856a:	2b1f      	cmp	r3, #31
 801856c:	eba2 0203 	sub.w	r2, r2, r3
 8018570:	f04f 0101 	mov.w	r1, #1
 8018574:	f300 80b1 	bgt.w	80186da <_strtod_l+0x85a>
 8018578:	fa01 f303 	lsl.w	r3, r1, r3
 801857c:	930d      	str	r3, [sp, #52]	; 0x34
 801857e:	2300      	movs	r3, #0
 8018580:	9308      	str	r3, [sp, #32]
 8018582:	eb09 0802 	add.w	r8, r9, r2
 8018586:	9b04      	ldr	r3, [sp, #16]
 8018588:	45c1      	cmp	r9, r8
 801858a:	4417      	add	r7, r2
 801858c:	441f      	add	r7, r3
 801858e:	464b      	mov	r3, r9
 8018590:	bfa8      	it	ge
 8018592:	4643      	movge	r3, r8
 8018594:	42bb      	cmp	r3, r7
 8018596:	bfa8      	it	ge
 8018598:	463b      	movge	r3, r7
 801859a:	2b00      	cmp	r3, #0
 801859c:	bfc2      	ittt	gt
 801859e:	eba8 0803 	subgt.w	r8, r8, r3
 80185a2:	1aff      	subgt	r7, r7, r3
 80185a4:	eba9 0903 	subgt.w	r9, r9, r3
 80185a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	dd17      	ble.n	80185de <_strtod_l+0x75e>
 80185ae:	4631      	mov	r1, r6
 80185b0:	461a      	mov	r2, r3
 80185b2:	4620      	mov	r0, r4
 80185b4:	f001 f990 	bl	80198d8 <__pow5mult>
 80185b8:	4606      	mov	r6, r0
 80185ba:	2800      	cmp	r0, #0
 80185bc:	f43f aea8 	beq.w	8018310 <_strtod_l+0x490>
 80185c0:	4601      	mov	r1, r0
 80185c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80185c4:	4620      	mov	r0, r4
 80185c6:	f001 f8dd 	bl	8019784 <__multiply>
 80185ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80185cc:	2800      	cmp	r0, #0
 80185ce:	f43f ae9f 	beq.w	8018310 <_strtod_l+0x490>
 80185d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80185d4:	4620      	mov	r0, r4
 80185d6:	f000 ffbd 	bl	8019554 <_Bfree>
 80185da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185dc:	9318      	str	r3, [sp, #96]	; 0x60
 80185de:	f1b8 0f00 	cmp.w	r8, #0
 80185e2:	f300 808c 	bgt.w	80186fe <_strtod_l+0x87e>
 80185e6:	9b06      	ldr	r3, [sp, #24]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	dd08      	ble.n	80185fe <_strtod_l+0x77e>
 80185ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185ee:	9905      	ldr	r1, [sp, #20]
 80185f0:	4620      	mov	r0, r4
 80185f2:	f001 f971 	bl	80198d8 <__pow5mult>
 80185f6:	9005      	str	r0, [sp, #20]
 80185f8:	2800      	cmp	r0, #0
 80185fa:	f43f ae89 	beq.w	8018310 <_strtod_l+0x490>
 80185fe:	2f00      	cmp	r7, #0
 8018600:	dd08      	ble.n	8018614 <_strtod_l+0x794>
 8018602:	9905      	ldr	r1, [sp, #20]
 8018604:	463a      	mov	r2, r7
 8018606:	4620      	mov	r0, r4
 8018608:	f001 f9c0 	bl	801998c <__lshift>
 801860c:	9005      	str	r0, [sp, #20]
 801860e:	2800      	cmp	r0, #0
 8018610:	f43f ae7e 	beq.w	8018310 <_strtod_l+0x490>
 8018614:	f1b9 0f00 	cmp.w	r9, #0
 8018618:	dd08      	ble.n	801862c <_strtod_l+0x7ac>
 801861a:	4631      	mov	r1, r6
 801861c:	464a      	mov	r2, r9
 801861e:	4620      	mov	r0, r4
 8018620:	f001 f9b4 	bl	801998c <__lshift>
 8018624:	4606      	mov	r6, r0
 8018626:	2800      	cmp	r0, #0
 8018628:	f43f ae72 	beq.w	8018310 <_strtod_l+0x490>
 801862c:	9a05      	ldr	r2, [sp, #20]
 801862e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018630:	4620      	mov	r0, r4
 8018632:	f001 fa37 	bl	8019aa4 <__mdiff>
 8018636:	4605      	mov	r5, r0
 8018638:	2800      	cmp	r0, #0
 801863a:	f43f ae69 	beq.w	8018310 <_strtod_l+0x490>
 801863e:	68c3      	ldr	r3, [r0, #12]
 8018640:	930b      	str	r3, [sp, #44]	; 0x2c
 8018642:	2300      	movs	r3, #0
 8018644:	60c3      	str	r3, [r0, #12]
 8018646:	4631      	mov	r1, r6
 8018648:	f001 fa10 	bl	8019a6c <__mcmp>
 801864c:	2800      	cmp	r0, #0
 801864e:	da60      	bge.n	8018712 <_strtod_l+0x892>
 8018650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018652:	ea53 030a 	orrs.w	r3, r3, sl
 8018656:	f040 8082 	bne.w	801875e <_strtod_l+0x8de>
 801865a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801865e:	2b00      	cmp	r3, #0
 8018660:	d17d      	bne.n	801875e <_strtod_l+0x8de>
 8018662:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018666:	0d1b      	lsrs	r3, r3, #20
 8018668:	051b      	lsls	r3, r3, #20
 801866a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801866e:	d976      	bls.n	801875e <_strtod_l+0x8de>
 8018670:	696b      	ldr	r3, [r5, #20]
 8018672:	b913      	cbnz	r3, 801867a <_strtod_l+0x7fa>
 8018674:	692b      	ldr	r3, [r5, #16]
 8018676:	2b01      	cmp	r3, #1
 8018678:	dd71      	ble.n	801875e <_strtod_l+0x8de>
 801867a:	4629      	mov	r1, r5
 801867c:	2201      	movs	r2, #1
 801867e:	4620      	mov	r0, r4
 8018680:	f001 f984 	bl	801998c <__lshift>
 8018684:	4631      	mov	r1, r6
 8018686:	4605      	mov	r5, r0
 8018688:	f001 f9f0 	bl	8019a6c <__mcmp>
 801868c:	2800      	cmp	r0, #0
 801868e:	dd66      	ble.n	801875e <_strtod_l+0x8de>
 8018690:	9904      	ldr	r1, [sp, #16]
 8018692:	4a53      	ldr	r2, [pc, #332]	; (80187e0 <_strtod_l+0x960>)
 8018694:	465b      	mov	r3, fp
 8018696:	2900      	cmp	r1, #0
 8018698:	f000 8081 	beq.w	801879e <_strtod_l+0x91e>
 801869c:	ea02 010b 	and.w	r1, r2, fp
 80186a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80186a4:	dc7b      	bgt.n	801879e <_strtod_l+0x91e>
 80186a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80186aa:	f77f aea9 	ble.w	8018400 <_strtod_l+0x580>
 80186ae:	4b4d      	ldr	r3, [pc, #308]	; (80187e4 <_strtod_l+0x964>)
 80186b0:	4650      	mov	r0, sl
 80186b2:	4659      	mov	r1, fp
 80186b4:	2200      	movs	r2, #0
 80186b6:	f7e7 ffbf 	bl	8000638 <__aeabi_dmul>
 80186ba:	460b      	mov	r3, r1
 80186bc:	4303      	orrs	r3, r0
 80186be:	bf08      	it	eq
 80186c0:	2322      	moveq	r3, #34	; 0x22
 80186c2:	4682      	mov	sl, r0
 80186c4:	468b      	mov	fp, r1
 80186c6:	bf08      	it	eq
 80186c8:	6023      	streq	r3, [r4, #0]
 80186ca:	e62b      	b.n	8018324 <_strtod_l+0x4a4>
 80186cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80186d0:	fa02 f303 	lsl.w	r3, r2, r3
 80186d4:	ea03 0a0a 	and.w	sl, r3, sl
 80186d8:	e6e3      	b.n	80184a2 <_strtod_l+0x622>
 80186da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80186de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80186e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80186e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80186ea:	fa01 f308 	lsl.w	r3, r1, r8
 80186ee:	9308      	str	r3, [sp, #32]
 80186f0:	910d      	str	r1, [sp, #52]	; 0x34
 80186f2:	e746      	b.n	8018582 <_strtod_l+0x702>
 80186f4:	2300      	movs	r3, #0
 80186f6:	9308      	str	r3, [sp, #32]
 80186f8:	2301      	movs	r3, #1
 80186fa:	930d      	str	r3, [sp, #52]	; 0x34
 80186fc:	e741      	b.n	8018582 <_strtod_l+0x702>
 80186fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018700:	4642      	mov	r2, r8
 8018702:	4620      	mov	r0, r4
 8018704:	f001 f942 	bl	801998c <__lshift>
 8018708:	9018      	str	r0, [sp, #96]	; 0x60
 801870a:	2800      	cmp	r0, #0
 801870c:	f47f af6b 	bne.w	80185e6 <_strtod_l+0x766>
 8018710:	e5fe      	b.n	8018310 <_strtod_l+0x490>
 8018712:	465f      	mov	r7, fp
 8018714:	d16e      	bne.n	80187f4 <_strtod_l+0x974>
 8018716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801871c:	b342      	cbz	r2, 8018770 <_strtod_l+0x8f0>
 801871e:	4a32      	ldr	r2, [pc, #200]	; (80187e8 <_strtod_l+0x968>)
 8018720:	4293      	cmp	r3, r2
 8018722:	d128      	bne.n	8018776 <_strtod_l+0x8f6>
 8018724:	9b04      	ldr	r3, [sp, #16]
 8018726:	4651      	mov	r1, sl
 8018728:	b1eb      	cbz	r3, 8018766 <_strtod_l+0x8e6>
 801872a:	4b2d      	ldr	r3, [pc, #180]	; (80187e0 <_strtod_l+0x960>)
 801872c:	403b      	ands	r3, r7
 801872e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018736:	d819      	bhi.n	801876c <_strtod_l+0x8ec>
 8018738:	0d1b      	lsrs	r3, r3, #20
 801873a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801873e:	fa02 f303 	lsl.w	r3, r2, r3
 8018742:	4299      	cmp	r1, r3
 8018744:	d117      	bne.n	8018776 <_strtod_l+0x8f6>
 8018746:	4b29      	ldr	r3, [pc, #164]	; (80187ec <_strtod_l+0x96c>)
 8018748:	429f      	cmp	r7, r3
 801874a:	d102      	bne.n	8018752 <_strtod_l+0x8d2>
 801874c:	3101      	adds	r1, #1
 801874e:	f43f addf 	beq.w	8018310 <_strtod_l+0x490>
 8018752:	4b23      	ldr	r3, [pc, #140]	; (80187e0 <_strtod_l+0x960>)
 8018754:	403b      	ands	r3, r7
 8018756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801875a:	f04f 0a00 	mov.w	sl, #0
 801875e:	9b04      	ldr	r3, [sp, #16]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d1a4      	bne.n	80186ae <_strtod_l+0x82e>
 8018764:	e5de      	b.n	8018324 <_strtod_l+0x4a4>
 8018766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801876a:	e7ea      	b.n	8018742 <_strtod_l+0x8c2>
 801876c:	4613      	mov	r3, r2
 801876e:	e7e8      	b.n	8018742 <_strtod_l+0x8c2>
 8018770:	ea53 030a 	orrs.w	r3, r3, sl
 8018774:	d08c      	beq.n	8018690 <_strtod_l+0x810>
 8018776:	9b08      	ldr	r3, [sp, #32]
 8018778:	b1db      	cbz	r3, 80187b2 <_strtod_l+0x932>
 801877a:	423b      	tst	r3, r7
 801877c:	d0ef      	beq.n	801875e <_strtod_l+0x8de>
 801877e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018780:	9a04      	ldr	r2, [sp, #16]
 8018782:	4650      	mov	r0, sl
 8018784:	4659      	mov	r1, fp
 8018786:	b1c3      	cbz	r3, 80187ba <_strtod_l+0x93a>
 8018788:	f7ff fb5c 	bl	8017e44 <sulp>
 801878c:	4602      	mov	r2, r0
 801878e:	460b      	mov	r3, r1
 8018790:	ec51 0b18 	vmov	r0, r1, d8
 8018794:	f7e7 fd9a 	bl	80002cc <__adddf3>
 8018798:	4682      	mov	sl, r0
 801879a:	468b      	mov	fp, r1
 801879c:	e7df      	b.n	801875e <_strtod_l+0x8de>
 801879e:	4013      	ands	r3, r2
 80187a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80187a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80187a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80187ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80187b0:	e7d5      	b.n	801875e <_strtod_l+0x8de>
 80187b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187b4:	ea13 0f0a 	tst.w	r3, sl
 80187b8:	e7e0      	b.n	801877c <_strtod_l+0x8fc>
 80187ba:	f7ff fb43 	bl	8017e44 <sulp>
 80187be:	4602      	mov	r2, r0
 80187c0:	460b      	mov	r3, r1
 80187c2:	ec51 0b18 	vmov	r0, r1, d8
 80187c6:	f7e7 fd7f 	bl	80002c8 <__aeabi_dsub>
 80187ca:	2200      	movs	r2, #0
 80187cc:	2300      	movs	r3, #0
 80187ce:	4682      	mov	sl, r0
 80187d0:	468b      	mov	fp, r1
 80187d2:	f7e8 f999 	bl	8000b08 <__aeabi_dcmpeq>
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d0c1      	beq.n	801875e <_strtod_l+0x8de>
 80187da:	e611      	b.n	8018400 <_strtod_l+0x580>
 80187dc:	fffffc02 	.word	0xfffffc02
 80187e0:	7ff00000 	.word	0x7ff00000
 80187e4:	39500000 	.word	0x39500000
 80187e8:	000fffff 	.word	0x000fffff
 80187ec:	7fefffff 	.word	0x7fefffff
 80187f0:	0801e190 	.word	0x0801e190
 80187f4:	4631      	mov	r1, r6
 80187f6:	4628      	mov	r0, r5
 80187f8:	f001 fab6 	bl	8019d68 <__ratio>
 80187fc:	ec59 8b10 	vmov	r8, r9, d0
 8018800:	ee10 0a10 	vmov	r0, s0
 8018804:	2200      	movs	r2, #0
 8018806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801880a:	4649      	mov	r1, r9
 801880c:	f7e8 f990 	bl	8000b30 <__aeabi_dcmple>
 8018810:	2800      	cmp	r0, #0
 8018812:	d07a      	beq.n	801890a <_strtod_l+0xa8a>
 8018814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018816:	2b00      	cmp	r3, #0
 8018818:	d04a      	beq.n	80188b0 <_strtod_l+0xa30>
 801881a:	4b95      	ldr	r3, [pc, #596]	; (8018a70 <_strtod_l+0xbf0>)
 801881c:	2200      	movs	r2, #0
 801881e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018a70 <_strtod_l+0xbf0>
 8018826:	f04f 0800 	mov.w	r8, #0
 801882a:	4b92      	ldr	r3, [pc, #584]	; (8018a74 <_strtod_l+0xbf4>)
 801882c:	403b      	ands	r3, r7
 801882e:	930d      	str	r3, [sp, #52]	; 0x34
 8018830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018832:	4b91      	ldr	r3, [pc, #580]	; (8018a78 <_strtod_l+0xbf8>)
 8018834:	429a      	cmp	r2, r3
 8018836:	f040 80b0 	bne.w	801899a <_strtod_l+0xb1a>
 801883a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801883e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8018842:	ec4b ab10 	vmov	d0, sl, fp
 8018846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801884a:	f001 f9b5 	bl	8019bb8 <__ulp>
 801884e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018852:	ec53 2b10 	vmov	r2, r3, d0
 8018856:	f7e7 feef 	bl	8000638 <__aeabi_dmul>
 801885a:	4652      	mov	r2, sl
 801885c:	465b      	mov	r3, fp
 801885e:	f7e7 fd35 	bl	80002cc <__adddf3>
 8018862:	460b      	mov	r3, r1
 8018864:	4983      	ldr	r1, [pc, #524]	; (8018a74 <_strtod_l+0xbf4>)
 8018866:	4a85      	ldr	r2, [pc, #532]	; (8018a7c <_strtod_l+0xbfc>)
 8018868:	4019      	ands	r1, r3
 801886a:	4291      	cmp	r1, r2
 801886c:	4682      	mov	sl, r0
 801886e:	d960      	bls.n	8018932 <_strtod_l+0xab2>
 8018870:	ee18 3a90 	vmov	r3, s17
 8018874:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018878:	4293      	cmp	r3, r2
 801887a:	d104      	bne.n	8018886 <_strtod_l+0xa06>
 801887c:	ee18 3a10 	vmov	r3, s16
 8018880:	3301      	adds	r3, #1
 8018882:	f43f ad45 	beq.w	8018310 <_strtod_l+0x490>
 8018886:	f8df b200 	ldr.w	fp, [pc, #512]	; 8018a88 <_strtod_l+0xc08>
 801888a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801888e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018890:	4620      	mov	r0, r4
 8018892:	f000 fe5f 	bl	8019554 <_Bfree>
 8018896:	9905      	ldr	r1, [sp, #20]
 8018898:	4620      	mov	r0, r4
 801889a:	f000 fe5b 	bl	8019554 <_Bfree>
 801889e:	4631      	mov	r1, r6
 80188a0:	4620      	mov	r0, r4
 80188a2:	f000 fe57 	bl	8019554 <_Bfree>
 80188a6:	4629      	mov	r1, r5
 80188a8:	4620      	mov	r0, r4
 80188aa:	f000 fe53 	bl	8019554 <_Bfree>
 80188ae:	e61a      	b.n	80184e6 <_strtod_l+0x666>
 80188b0:	f1ba 0f00 	cmp.w	sl, #0
 80188b4:	d11b      	bne.n	80188ee <_strtod_l+0xa6e>
 80188b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80188ba:	b9f3      	cbnz	r3, 80188fa <_strtod_l+0xa7a>
 80188bc:	4b6c      	ldr	r3, [pc, #432]	; (8018a70 <_strtod_l+0xbf0>)
 80188be:	2200      	movs	r2, #0
 80188c0:	4640      	mov	r0, r8
 80188c2:	4649      	mov	r1, r9
 80188c4:	f7e8 f92a 	bl	8000b1c <__aeabi_dcmplt>
 80188c8:	b9d0      	cbnz	r0, 8018900 <_strtod_l+0xa80>
 80188ca:	4640      	mov	r0, r8
 80188cc:	4649      	mov	r1, r9
 80188ce:	4b6c      	ldr	r3, [pc, #432]	; (8018a80 <_strtod_l+0xc00>)
 80188d0:	2200      	movs	r2, #0
 80188d2:	f7e7 feb1 	bl	8000638 <__aeabi_dmul>
 80188d6:	4680      	mov	r8, r0
 80188d8:	4689      	mov	r9, r1
 80188da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80188de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80188e2:	9315      	str	r3, [sp, #84]	; 0x54
 80188e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80188e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80188ec:	e79d      	b.n	801882a <_strtod_l+0x9aa>
 80188ee:	f1ba 0f01 	cmp.w	sl, #1
 80188f2:	d102      	bne.n	80188fa <_strtod_l+0xa7a>
 80188f4:	2f00      	cmp	r7, #0
 80188f6:	f43f ad83 	beq.w	8018400 <_strtod_l+0x580>
 80188fa:	4b62      	ldr	r3, [pc, #392]	; (8018a84 <_strtod_l+0xc04>)
 80188fc:	2200      	movs	r2, #0
 80188fe:	e78e      	b.n	801881e <_strtod_l+0x99e>
 8018900:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8018a80 <_strtod_l+0xc00>
 8018904:	f04f 0800 	mov.w	r8, #0
 8018908:	e7e7      	b.n	80188da <_strtod_l+0xa5a>
 801890a:	4b5d      	ldr	r3, [pc, #372]	; (8018a80 <_strtod_l+0xc00>)
 801890c:	4640      	mov	r0, r8
 801890e:	4649      	mov	r1, r9
 8018910:	2200      	movs	r2, #0
 8018912:	f7e7 fe91 	bl	8000638 <__aeabi_dmul>
 8018916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018918:	4680      	mov	r8, r0
 801891a:	4689      	mov	r9, r1
 801891c:	b933      	cbnz	r3, 801892c <_strtod_l+0xaac>
 801891e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018922:	900e      	str	r0, [sp, #56]	; 0x38
 8018924:	930f      	str	r3, [sp, #60]	; 0x3c
 8018926:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801892a:	e7dd      	b.n	80188e8 <_strtod_l+0xa68>
 801892c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8018930:	e7f9      	b.n	8018926 <_strtod_l+0xaa6>
 8018932:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8018936:	9b04      	ldr	r3, [sp, #16]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d1a8      	bne.n	801888e <_strtod_l+0xa0e>
 801893c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018942:	0d1b      	lsrs	r3, r3, #20
 8018944:	051b      	lsls	r3, r3, #20
 8018946:	429a      	cmp	r2, r3
 8018948:	d1a1      	bne.n	801888e <_strtod_l+0xa0e>
 801894a:	4640      	mov	r0, r8
 801894c:	4649      	mov	r1, r9
 801894e:	f7e8 f995 	bl	8000c7c <__aeabi_d2lz>
 8018952:	f7e7 fe43 	bl	80005dc <__aeabi_l2d>
 8018956:	4602      	mov	r2, r0
 8018958:	460b      	mov	r3, r1
 801895a:	4640      	mov	r0, r8
 801895c:	4649      	mov	r1, r9
 801895e:	f7e7 fcb3 	bl	80002c8 <__aeabi_dsub>
 8018962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018968:	ea43 030a 	orr.w	r3, r3, sl
 801896c:	4313      	orrs	r3, r2
 801896e:	4680      	mov	r8, r0
 8018970:	4689      	mov	r9, r1
 8018972:	d055      	beq.n	8018a20 <_strtod_l+0xba0>
 8018974:	a336      	add	r3, pc, #216	; (adr r3, 8018a50 <_strtod_l+0xbd0>)
 8018976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801897a:	f7e8 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 801897e:	2800      	cmp	r0, #0
 8018980:	f47f acd0 	bne.w	8018324 <_strtod_l+0x4a4>
 8018984:	a334      	add	r3, pc, #208	; (adr r3, 8018a58 <_strtod_l+0xbd8>)
 8018986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801898a:	4640      	mov	r0, r8
 801898c:	4649      	mov	r1, r9
 801898e:	f7e8 f8e3 	bl	8000b58 <__aeabi_dcmpgt>
 8018992:	2800      	cmp	r0, #0
 8018994:	f43f af7b 	beq.w	801888e <_strtod_l+0xa0e>
 8018998:	e4c4      	b.n	8018324 <_strtod_l+0x4a4>
 801899a:	9b04      	ldr	r3, [sp, #16]
 801899c:	b333      	cbz	r3, 80189ec <_strtod_l+0xb6c>
 801899e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80189a4:	d822      	bhi.n	80189ec <_strtod_l+0xb6c>
 80189a6:	a32e      	add	r3, pc, #184	; (adr r3, 8018a60 <_strtod_l+0xbe0>)
 80189a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ac:	4640      	mov	r0, r8
 80189ae:	4649      	mov	r1, r9
 80189b0:	f7e8 f8be 	bl	8000b30 <__aeabi_dcmple>
 80189b4:	b1a0      	cbz	r0, 80189e0 <_strtod_l+0xb60>
 80189b6:	4649      	mov	r1, r9
 80189b8:	4640      	mov	r0, r8
 80189ba:	f7e8 f8d7 	bl	8000b6c <__aeabi_d2uiz>
 80189be:	2801      	cmp	r0, #1
 80189c0:	bf38      	it	cc
 80189c2:	2001      	movcc	r0, #1
 80189c4:	f7e7 fdbe 	bl	8000544 <__aeabi_ui2d>
 80189c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189ca:	4680      	mov	r8, r0
 80189cc:	4689      	mov	r9, r1
 80189ce:	bb23      	cbnz	r3, 8018a1a <_strtod_l+0xb9a>
 80189d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80189d4:	9010      	str	r0, [sp, #64]	; 0x40
 80189d6:	9311      	str	r3, [sp, #68]	; 0x44
 80189d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80189dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80189e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80189e8:	1a9b      	subs	r3, r3, r2
 80189ea:	9309      	str	r3, [sp, #36]	; 0x24
 80189ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80189f0:	eeb0 0a48 	vmov.f32	s0, s16
 80189f4:	eef0 0a68 	vmov.f32	s1, s17
 80189f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80189fc:	f001 f8dc 	bl	8019bb8 <__ulp>
 8018a00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018a04:	ec53 2b10 	vmov	r2, r3, d0
 8018a08:	f7e7 fe16 	bl	8000638 <__aeabi_dmul>
 8018a0c:	ec53 2b18 	vmov	r2, r3, d8
 8018a10:	f7e7 fc5c 	bl	80002cc <__adddf3>
 8018a14:	4682      	mov	sl, r0
 8018a16:	468b      	mov	fp, r1
 8018a18:	e78d      	b.n	8018936 <_strtod_l+0xab6>
 8018a1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8018a1e:	e7db      	b.n	80189d8 <_strtod_l+0xb58>
 8018a20:	a311      	add	r3, pc, #68	; (adr r3, 8018a68 <_strtod_l+0xbe8>)
 8018a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a26:	f7e8 f879 	bl	8000b1c <__aeabi_dcmplt>
 8018a2a:	e7b2      	b.n	8018992 <_strtod_l+0xb12>
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8018a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018a34:	6013      	str	r3, [r2, #0]
 8018a36:	f7ff ba6b 	b.w	8017f10 <_strtod_l+0x90>
 8018a3a:	2a65      	cmp	r2, #101	; 0x65
 8018a3c:	f43f ab5f 	beq.w	80180fe <_strtod_l+0x27e>
 8018a40:	2a45      	cmp	r2, #69	; 0x45
 8018a42:	f43f ab5c 	beq.w	80180fe <_strtod_l+0x27e>
 8018a46:	2301      	movs	r3, #1
 8018a48:	f7ff bb94 	b.w	8018174 <_strtod_l+0x2f4>
 8018a4c:	f3af 8000 	nop.w
 8018a50:	94a03595 	.word	0x94a03595
 8018a54:	3fdfffff 	.word	0x3fdfffff
 8018a58:	35afe535 	.word	0x35afe535
 8018a5c:	3fe00000 	.word	0x3fe00000
 8018a60:	ffc00000 	.word	0xffc00000
 8018a64:	41dfffff 	.word	0x41dfffff
 8018a68:	94a03595 	.word	0x94a03595
 8018a6c:	3fcfffff 	.word	0x3fcfffff
 8018a70:	3ff00000 	.word	0x3ff00000
 8018a74:	7ff00000 	.word	0x7ff00000
 8018a78:	7fe00000 	.word	0x7fe00000
 8018a7c:	7c9fffff 	.word	0x7c9fffff
 8018a80:	3fe00000 	.word	0x3fe00000
 8018a84:	bff00000 	.word	0xbff00000
 8018a88:	7fefffff 	.word	0x7fefffff

08018a8c <strtod>:
 8018a8c:	460a      	mov	r2, r1
 8018a8e:	4601      	mov	r1, r0
 8018a90:	4802      	ldr	r0, [pc, #8]	; (8018a9c <strtod+0x10>)
 8018a92:	4b03      	ldr	r3, [pc, #12]	; (8018aa0 <strtod+0x14>)
 8018a94:	6800      	ldr	r0, [r0, #0]
 8018a96:	f7ff b9f3 	b.w	8017e80 <_strtod_l>
 8018a9a:	bf00      	nop
 8018a9c:	2000002c 	.word	0x2000002c
 8018aa0:	20000094 	.word	0x20000094

08018aa4 <strtok>:
 8018aa4:	4b16      	ldr	r3, [pc, #88]	; (8018b00 <strtok+0x5c>)
 8018aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018aa8:	681e      	ldr	r6, [r3, #0]
 8018aaa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018aac:	4605      	mov	r5, r0
 8018aae:	b9fc      	cbnz	r4, 8018af0 <strtok+0x4c>
 8018ab0:	2050      	movs	r0, #80	; 0x50
 8018ab2:	9101      	str	r1, [sp, #4]
 8018ab4:	f000 fce8 	bl	8019488 <malloc>
 8018ab8:	9901      	ldr	r1, [sp, #4]
 8018aba:	65b0      	str	r0, [r6, #88]	; 0x58
 8018abc:	4602      	mov	r2, r0
 8018abe:	b920      	cbnz	r0, 8018aca <strtok+0x26>
 8018ac0:	4b10      	ldr	r3, [pc, #64]	; (8018b04 <strtok+0x60>)
 8018ac2:	4811      	ldr	r0, [pc, #68]	; (8018b08 <strtok+0x64>)
 8018ac4:	2157      	movs	r1, #87	; 0x57
 8018ac6:	f000 f85b 	bl	8018b80 <__assert_func>
 8018aca:	e9c0 4400 	strd	r4, r4, [r0]
 8018ace:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018ad2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018ad6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018ada:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018ade:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018ae2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018ae6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018aea:	6184      	str	r4, [r0, #24]
 8018aec:	7704      	strb	r4, [r0, #28]
 8018aee:	6244      	str	r4, [r0, #36]	; 0x24
 8018af0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018af2:	2301      	movs	r3, #1
 8018af4:	4628      	mov	r0, r5
 8018af6:	b002      	add	sp, #8
 8018af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018afc:	f000 b806 	b.w	8018b0c <__strtok_r>
 8018b00:	2000002c 	.word	0x2000002c
 8018b04:	0801e0e8 	.word	0x0801e0e8
 8018b08:	0801e1b8 	.word	0x0801e1b8

08018b0c <__strtok_r>:
 8018b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b0e:	b908      	cbnz	r0, 8018b14 <__strtok_r+0x8>
 8018b10:	6810      	ldr	r0, [r2, #0]
 8018b12:	b188      	cbz	r0, 8018b38 <__strtok_r+0x2c>
 8018b14:	4604      	mov	r4, r0
 8018b16:	4620      	mov	r0, r4
 8018b18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018b1c:	460f      	mov	r7, r1
 8018b1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018b22:	b91e      	cbnz	r6, 8018b2c <__strtok_r+0x20>
 8018b24:	b965      	cbnz	r5, 8018b40 <__strtok_r+0x34>
 8018b26:	6015      	str	r5, [r2, #0]
 8018b28:	4628      	mov	r0, r5
 8018b2a:	e005      	b.n	8018b38 <__strtok_r+0x2c>
 8018b2c:	42b5      	cmp	r5, r6
 8018b2e:	d1f6      	bne.n	8018b1e <__strtok_r+0x12>
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d1f0      	bne.n	8018b16 <__strtok_r+0xa>
 8018b34:	6014      	str	r4, [r2, #0]
 8018b36:	7003      	strb	r3, [r0, #0]
 8018b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b3a:	461c      	mov	r4, r3
 8018b3c:	e00c      	b.n	8018b58 <__strtok_r+0x4c>
 8018b3e:	b915      	cbnz	r5, 8018b46 <__strtok_r+0x3a>
 8018b40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018b44:	460e      	mov	r6, r1
 8018b46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018b4a:	42ab      	cmp	r3, r5
 8018b4c:	d1f7      	bne.n	8018b3e <__strtok_r+0x32>
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d0f3      	beq.n	8018b3a <__strtok_r+0x2e>
 8018b52:	2300      	movs	r3, #0
 8018b54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018b58:	6014      	str	r4, [r2, #0]
 8018b5a:	e7ed      	b.n	8018b38 <__strtok_r+0x2c>

08018b5c <_write_r>:
 8018b5c:	b538      	push	{r3, r4, r5, lr}
 8018b5e:	4d07      	ldr	r5, [pc, #28]	; (8018b7c <_write_r+0x20>)
 8018b60:	4604      	mov	r4, r0
 8018b62:	4608      	mov	r0, r1
 8018b64:	4611      	mov	r1, r2
 8018b66:	2200      	movs	r2, #0
 8018b68:	602a      	str	r2, [r5, #0]
 8018b6a:	461a      	mov	r2, r3
 8018b6c:	f7e8 ff8b 	bl	8001a86 <_write>
 8018b70:	1c43      	adds	r3, r0, #1
 8018b72:	d102      	bne.n	8018b7a <_write_r+0x1e>
 8018b74:	682b      	ldr	r3, [r5, #0]
 8018b76:	b103      	cbz	r3, 8018b7a <_write_r+0x1e>
 8018b78:	6023      	str	r3, [r4, #0]
 8018b7a:	bd38      	pop	{r3, r4, r5, pc}
 8018b7c:	20011d00 	.word	0x20011d00

08018b80 <__assert_func>:
 8018b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b82:	4614      	mov	r4, r2
 8018b84:	461a      	mov	r2, r3
 8018b86:	4b09      	ldr	r3, [pc, #36]	; (8018bac <__assert_func+0x2c>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4605      	mov	r5, r0
 8018b8c:	68d8      	ldr	r0, [r3, #12]
 8018b8e:	b14c      	cbz	r4, 8018ba4 <__assert_func+0x24>
 8018b90:	4b07      	ldr	r3, [pc, #28]	; (8018bb0 <__assert_func+0x30>)
 8018b92:	9100      	str	r1, [sp, #0]
 8018b94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b98:	4906      	ldr	r1, [pc, #24]	; (8018bb4 <__assert_func+0x34>)
 8018b9a:	462b      	mov	r3, r5
 8018b9c:	f000 f8e0 	bl	8018d60 <fiprintf>
 8018ba0:	f001 fef0 	bl	801a984 <abort>
 8018ba4:	4b04      	ldr	r3, [pc, #16]	; (8018bb8 <__assert_func+0x38>)
 8018ba6:	461c      	mov	r4, r3
 8018ba8:	e7f3      	b.n	8018b92 <__assert_func+0x12>
 8018baa:	bf00      	nop
 8018bac:	2000002c 	.word	0x2000002c
 8018bb0:	0801e215 	.word	0x0801e215
 8018bb4:	0801e222 	.word	0x0801e222
 8018bb8:	0801e250 	.word	0x0801e250

08018bbc <_close_r>:
 8018bbc:	b538      	push	{r3, r4, r5, lr}
 8018bbe:	4d06      	ldr	r5, [pc, #24]	; (8018bd8 <_close_r+0x1c>)
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	4608      	mov	r0, r1
 8018bc6:	602b      	str	r3, [r5, #0]
 8018bc8:	f7e8 ff79 	bl	8001abe <_close>
 8018bcc:	1c43      	adds	r3, r0, #1
 8018bce:	d102      	bne.n	8018bd6 <_close_r+0x1a>
 8018bd0:	682b      	ldr	r3, [r5, #0]
 8018bd2:	b103      	cbz	r3, 8018bd6 <_close_r+0x1a>
 8018bd4:	6023      	str	r3, [r4, #0]
 8018bd6:	bd38      	pop	{r3, r4, r5, pc}
 8018bd8:	20011d00 	.word	0x20011d00

08018bdc <__sflush_r>:
 8018bdc:	898a      	ldrh	r2, [r1, #12]
 8018bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be2:	4605      	mov	r5, r0
 8018be4:	0710      	lsls	r0, r2, #28
 8018be6:	460c      	mov	r4, r1
 8018be8:	d458      	bmi.n	8018c9c <__sflush_r+0xc0>
 8018bea:	684b      	ldr	r3, [r1, #4]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	dc05      	bgt.n	8018bfc <__sflush_r+0x20>
 8018bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	dc02      	bgt.n	8018bfc <__sflush_r+0x20>
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018bfe:	2e00      	cmp	r6, #0
 8018c00:	d0f9      	beq.n	8018bf6 <__sflush_r+0x1a>
 8018c02:	2300      	movs	r3, #0
 8018c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018c08:	682f      	ldr	r7, [r5, #0]
 8018c0a:	602b      	str	r3, [r5, #0]
 8018c0c:	d032      	beq.n	8018c74 <__sflush_r+0x98>
 8018c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c10:	89a3      	ldrh	r3, [r4, #12]
 8018c12:	075a      	lsls	r2, r3, #29
 8018c14:	d505      	bpl.n	8018c22 <__sflush_r+0x46>
 8018c16:	6863      	ldr	r3, [r4, #4]
 8018c18:	1ac0      	subs	r0, r0, r3
 8018c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c1c:	b10b      	cbz	r3, 8018c22 <__sflush_r+0x46>
 8018c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c20:	1ac0      	subs	r0, r0, r3
 8018c22:	2300      	movs	r3, #0
 8018c24:	4602      	mov	r2, r0
 8018c26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c28:	6a21      	ldr	r1, [r4, #32]
 8018c2a:	4628      	mov	r0, r5
 8018c2c:	47b0      	blx	r6
 8018c2e:	1c43      	adds	r3, r0, #1
 8018c30:	89a3      	ldrh	r3, [r4, #12]
 8018c32:	d106      	bne.n	8018c42 <__sflush_r+0x66>
 8018c34:	6829      	ldr	r1, [r5, #0]
 8018c36:	291d      	cmp	r1, #29
 8018c38:	d82c      	bhi.n	8018c94 <__sflush_r+0xb8>
 8018c3a:	4a2a      	ldr	r2, [pc, #168]	; (8018ce4 <__sflush_r+0x108>)
 8018c3c:	40ca      	lsrs	r2, r1
 8018c3e:	07d6      	lsls	r6, r2, #31
 8018c40:	d528      	bpl.n	8018c94 <__sflush_r+0xb8>
 8018c42:	2200      	movs	r2, #0
 8018c44:	6062      	str	r2, [r4, #4]
 8018c46:	04d9      	lsls	r1, r3, #19
 8018c48:	6922      	ldr	r2, [r4, #16]
 8018c4a:	6022      	str	r2, [r4, #0]
 8018c4c:	d504      	bpl.n	8018c58 <__sflush_r+0x7c>
 8018c4e:	1c42      	adds	r2, r0, #1
 8018c50:	d101      	bne.n	8018c56 <__sflush_r+0x7a>
 8018c52:	682b      	ldr	r3, [r5, #0]
 8018c54:	b903      	cbnz	r3, 8018c58 <__sflush_r+0x7c>
 8018c56:	6560      	str	r0, [r4, #84]	; 0x54
 8018c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c5a:	602f      	str	r7, [r5, #0]
 8018c5c:	2900      	cmp	r1, #0
 8018c5e:	d0ca      	beq.n	8018bf6 <__sflush_r+0x1a>
 8018c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c64:	4299      	cmp	r1, r3
 8018c66:	d002      	beq.n	8018c6e <__sflush_r+0x92>
 8018c68:	4628      	mov	r0, r5
 8018c6a:	f001 f90b 	bl	8019e84 <_free_r>
 8018c6e:	2000      	movs	r0, #0
 8018c70:	6360      	str	r0, [r4, #52]	; 0x34
 8018c72:	e7c1      	b.n	8018bf8 <__sflush_r+0x1c>
 8018c74:	6a21      	ldr	r1, [r4, #32]
 8018c76:	2301      	movs	r3, #1
 8018c78:	4628      	mov	r0, r5
 8018c7a:	47b0      	blx	r6
 8018c7c:	1c41      	adds	r1, r0, #1
 8018c7e:	d1c7      	bne.n	8018c10 <__sflush_r+0x34>
 8018c80:	682b      	ldr	r3, [r5, #0]
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d0c4      	beq.n	8018c10 <__sflush_r+0x34>
 8018c86:	2b1d      	cmp	r3, #29
 8018c88:	d001      	beq.n	8018c8e <__sflush_r+0xb2>
 8018c8a:	2b16      	cmp	r3, #22
 8018c8c:	d101      	bne.n	8018c92 <__sflush_r+0xb6>
 8018c8e:	602f      	str	r7, [r5, #0]
 8018c90:	e7b1      	b.n	8018bf6 <__sflush_r+0x1a>
 8018c92:	89a3      	ldrh	r3, [r4, #12]
 8018c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c98:	81a3      	strh	r3, [r4, #12]
 8018c9a:	e7ad      	b.n	8018bf8 <__sflush_r+0x1c>
 8018c9c:	690f      	ldr	r7, [r1, #16]
 8018c9e:	2f00      	cmp	r7, #0
 8018ca0:	d0a9      	beq.n	8018bf6 <__sflush_r+0x1a>
 8018ca2:	0793      	lsls	r3, r2, #30
 8018ca4:	680e      	ldr	r6, [r1, #0]
 8018ca6:	bf08      	it	eq
 8018ca8:	694b      	ldreq	r3, [r1, #20]
 8018caa:	600f      	str	r7, [r1, #0]
 8018cac:	bf18      	it	ne
 8018cae:	2300      	movne	r3, #0
 8018cb0:	eba6 0807 	sub.w	r8, r6, r7
 8018cb4:	608b      	str	r3, [r1, #8]
 8018cb6:	f1b8 0f00 	cmp.w	r8, #0
 8018cba:	dd9c      	ble.n	8018bf6 <__sflush_r+0x1a>
 8018cbc:	6a21      	ldr	r1, [r4, #32]
 8018cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018cc0:	4643      	mov	r3, r8
 8018cc2:	463a      	mov	r2, r7
 8018cc4:	4628      	mov	r0, r5
 8018cc6:	47b0      	blx	r6
 8018cc8:	2800      	cmp	r0, #0
 8018cca:	dc06      	bgt.n	8018cda <__sflush_r+0xfe>
 8018ccc:	89a3      	ldrh	r3, [r4, #12]
 8018cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd2:	81a3      	strh	r3, [r4, #12]
 8018cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cd8:	e78e      	b.n	8018bf8 <__sflush_r+0x1c>
 8018cda:	4407      	add	r7, r0
 8018cdc:	eba8 0800 	sub.w	r8, r8, r0
 8018ce0:	e7e9      	b.n	8018cb6 <__sflush_r+0xda>
 8018ce2:	bf00      	nop
 8018ce4:	20400001 	.word	0x20400001

08018ce8 <_fflush_r>:
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	690b      	ldr	r3, [r1, #16]
 8018cec:	4605      	mov	r5, r0
 8018cee:	460c      	mov	r4, r1
 8018cf0:	b913      	cbnz	r3, 8018cf8 <_fflush_r+0x10>
 8018cf2:	2500      	movs	r5, #0
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	bd38      	pop	{r3, r4, r5, pc}
 8018cf8:	b118      	cbz	r0, 8018d02 <_fflush_r+0x1a>
 8018cfa:	6983      	ldr	r3, [r0, #24]
 8018cfc:	b90b      	cbnz	r3, 8018d02 <_fflush_r+0x1a>
 8018cfe:	f7fe fdad 	bl	801785c <__sinit>
 8018d02:	4b14      	ldr	r3, [pc, #80]	; (8018d54 <_fflush_r+0x6c>)
 8018d04:	429c      	cmp	r4, r3
 8018d06:	d11b      	bne.n	8018d40 <_fflush_r+0x58>
 8018d08:	686c      	ldr	r4, [r5, #4]
 8018d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d0ef      	beq.n	8018cf2 <_fflush_r+0xa>
 8018d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018d14:	07d0      	lsls	r0, r2, #31
 8018d16:	d404      	bmi.n	8018d22 <_fflush_r+0x3a>
 8018d18:	0599      	lsls	r1, r3, #22
 8018d1a:	d402      	bmi.n	8018d22 <_fflush_r+0x3a>
 8018d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d1e:	f7fe fe60 	bl	80179e2 <__retarget_lock_acquire_recursive>
 8018d22:	4628      	mov	r0, r5
 8018d24:	4621      	mov	r1, r4
 8018d26:	f7ff ff59 	bl	8018bdc <__sflush_r>
 8018d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d2c:	07da      	lsls	r2, r3, #31
 8018d2e:	4605      	mov	r5, r0
 8018d30:	d4e0      	bmi.n	8018cf4 <_fflush_r+0xc>
 8018d32:	89a3      	ldrh	r3, [r4, #12]
 8018d34:	059b      	lsls	r3, r3, #22
 8018d36:	d4dd      	bmi.n	8018cf4 <_fflush_r+0xc>
 8018d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d3a:	f7fe fe53 	bl	80179e4 <__retarget_lock_release_recursive>
 8018d3e:	e7d9      	b.n	8018cf4 <_fflush_r+0xc>
 8018d40:	4b05      	ldr	r3, [pc, #20]	; (8018d58 <_fflush_r+0x70>)
 8018d42:	429c      	cmp	r4, r3
 8018d44:	d101      	bne.n	8018d4a <_fflush_r+0x62>
 8018d46:	68ac      	ldr	r4, [r5, #8]
 8018d48:	e7df      	b.n	8018d0a <_fflush_r+0x22>
 8018d4a:	4b04      	ldr	r3, [pc, #16]	; (8018d5c <_fflush_r+0x74>)
 8018d4c:	429c      	cmp	r4, r3
 8018d4e:	bf08      	it	eq
 8018d50:	68ec      	ldreq	r4, [r5, #12]
 8018d52:	e7da      	b.n	8018d0a <_fflush_r+0x22>
 8018d54:	0801e0a4 	.word	0x0801e0a4
 8018d58:	0801e0c4 	.word	0x0801e0c4
 8018d5c:	0801e084 	.word	0x0801e084

08018d60 <fiprintf>:
 8018d60:	b40e      	push	{r1, r2, r3}
 8018d62:	b503      	push	{r0, r1, lr}
 8018d64:	4601      	mov	r1, r0
 8018d66:	ab03      	add	r3, sp, #12
 8018d68:	4805      	ldr	r0, [pc, #20]	; (8018d80 <fiprintf+0x20>)
 8018d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d6e:	6800      	ldr	r0, [r0, #0]
 8018d70:	9301      	str	r3, [sp, #4]
 8018d72:	f001 fa59 	bl	801a228 <_vfiprintf_r>
 8018d76:	b002      	add	sp, #8
 8018d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d7c:	b003      	add	sp, #12
 8018d7e:	4770      	bx	lr
 8018d80:	2000002c 	.word	0x2000002c

08018d84 <rshift>:
 8018d84:	6903      	ldr	r3, [r0, #16]
 8018d86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018d92:	f100 0414 	add.w	r4, r0, #20
 8018d96:	dd45      	ble.n	8018e24 <rshift+0xa0>
 8018d98:	f011 011f 	ands.w	r1, r1, #31
 8018d9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018da0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018da4:	d10c      	bne.n	8018dc0 <rshift+0x3c>
 8018da6:	f100 0710 	add.w	r7, r0, #16
 8018daa:	4629      	mov	r1, r5
 8018dac:	42b1      	cmp	r1, r6
 8018dae:	d334      	bcc.n	8018e1a <rshift+0x96>
 8018db0:	1a9b      	subs	r3, r3, r2
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	1eea      	subs	r2, r5, #3
 8018db6:	4296      	cmp	r6, r2
 8018db8:	bf38      	it	cc
 8018dba:	2300      	movcc	r3, #0
 8018dbc:	4423      	add	r3, r4
 8018dbe:	e015      	b.n	8018dec <rshift+0x68>
 8018dc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018dc4:	f1c1 0820 	rsb	r8, r1, #32
 8018dc8:	40cf      	lsrs	r7, r1
 8018dca:	f105 0e04 	add.w	lr, r5, #4
 8018dce:	46a1      	mov	r9, r4
 8018dd0:	4576      	cmp	r6, lr
 8018dd2:	46f4      	mov	ip, lr
 8018dd4:	d815      	bhi.n	8018e02 <rshift+0x7e>
 8018dd6:	1a9a      	subs	r2, r3, r2
 8018dd8:	0092      	lsls	r2, r2, #2
 8018dda:	3a04      	subs	r2, #4
 8018ddc:	3501      	adds	r5, #1
 8018dde:	42ae      	cmp	r6, r5
 8018de0:	bf38      	it	cc
 8018de2:	2200      	movcc	r2, #0
 8018de4:	18a3      	adds	r3, r4, r2
 8018de6:	50a7      	str	r7, [r4, r2]
 8018de8:	b107      	cbz	r7, 8018dec <rshift+0x68>
 8018dea:	3304      	adds	r3, #4
 8018dec:	1b1a      	subs	r2, r3, r4
 8018dee:	42a3      	cmp	r3, r4
 8018df0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018df4:	bf08      	it	eq
 8018df6:	2300      	moveq	r3, #0
 8018df8:	6102      	str	r2, [r0, #16]
 8018dfa:	bf08      	it	eq
 8018dfc:	6143      	streq	r3, [r0, #20]
 8018dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e02:	f8dc c000 	ldr.w	ip, [ip]
 8018e06:	fa0c fc08 	lsl.w	ip, ip, r8
 8018e0a:	ea4c 0707 	orr.w	r7, ip, r7
 8018e0e:	f849 7b04 	str.w	r7, [r9], #4
 8018e12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018e16:	40cf      	lsrs	r7, r1
 8018e18:	e7da      	b.n	8018dd0 <rshift+0x4c>
 8018e1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8018e1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018e22:	e7c3      	b.n	8018dac <rshift+0x28>
 8018e24:	4623      	mov	r3, r4
 8018e26:	e7e1      	b.n	8018dec <rshift+0x68>

08018e28 <__hexdig_fun>:
 8018e28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018e2c:	2b09      	cmp	r3, #9
 8018e2e:	d802      	bhi.n	8018e36 <__hexdig_fun+0xe>
 8018e30:	3820      	subs	r0, #32
 8018e32:	b2c0      	uxtb	r0, r0
 8018e34:	4770      	bx	lr
 8018e36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018e3a:	2b05      	cmp	r3, #5
 8018e3c:	d801      	bhi.n	8018e42 <__hexdig_fun+0x1a>
 8018e3e:	3847      	subs	r0, #71	; 0x47
 8018e40:	e7f7      	b.n	8018e32 <__hexdig_fun+0xa>
 8018e42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018e46:	2b05      	cmp	r3, #5
 8018e48:	d801      	bhi.n	8018e4e <__hexdig_fun+0x26>
 8018e4a:	3827      	subs	r0, #39	; 0x27
 8018e4c:	e7f1      	b.n	8018e32 <__hexdig_fun+0xa>
 8018e4e:	2000      	movs	r0, #0
 8018e50:	4770      	bx	lr
	...

08018e54 <__gethex>:
 8018e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e58:	ed2d 8b02 	vpush	{d8}
 8018e5c:	b089      	sub	sp, #36	; 0x24
 8018e5e:	ee08 0a10 	vmov	s16, r0
 8018e62:	9304      	str	r3, [sp, #16]
 8018e64:	4bb4      	ldr	r3, [pc, #720]	; (8019138 <__gethex+0x2e4>)
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	468b      	mov	fp, r1
 8018e6e:	4690      	mov	r8, r2
 8018e70:	f7e7 f9ce 	bl	8000210 <strlen>
 8018e74:	9b01      	ldr	r3, [sp, #4]
 8018e76:	f8db 2000 	ldr.w	r2, [fp]
 8018e7a:	4403      	add	r3, r0
 8018e7c:	4682      	mov	sl, r0
 8018e7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018e82:	9305      	str	r3, [sp, #20]
 8018e84:	1c93      	adds	r3, r2, #2
 8018e86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018e8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018e8e:	32fe      	adds	r2, #254	; 0xfe
 8018e90:	18d1      	adds	r1, r2, r3
 8018e92:	461f      	mov	r7, r3
 8018e94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018e98:	9100      	str	r1, [sp, #0]
 8018e9a:	2830      	cmp	r0, #48	; 0x30
 8018e9c:	d0f8      	beq.n	8018e90 <__gethex+0x3c>
 8018e9e:	f7ff ffc3 	bl	8018e28 <__hexdig_fun>
 8018ea2:	4604      	mov	r4, r0
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	d13a      	bne.n	8018f1e <__gethex+0xca>
 8018ea8:	9901      	ldr	r1, [sp, #4]
 8018eaa:	4652      	mov	r2, sl
 8018eac:	4638      	mov	r0, r7
 8018eae:	f7fe ffa2 	bl	8017df6 <strncmp>
 8018eb2:	4605      	mov	r5, r0
 8018eb4:	2800      	cmp	r0, #0
 8018eb6:	d168      	bne.n	8018f8a <__gethex+0x136>
 8018eb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018ebc:	eb07 060a 	add.w	r6, r7, sl
 8018ec0:	f7ff ffb2 	bl	8018e28 <__hexdig_fun>
 8018ec4:	2800      	cmp	r0, #0
 8018ec6:	d062      	beq.n	8018f8e <__gethex+0x13a>
 8018ec8:	4633      	mov	r3, r6
 8018eca:	7818      	ldrb	r0, [r3, #0]
 8018ecc:	2830      	cmp	r0, #48	; 0x30
 8018ece:	461f      	mov	r7, r3
 8018ed0:	f103 0301 	add.w	r3, r3, #1
 8018ed4:	d0f9      	beq.n	8018eca <__gethex+0x76>
 8018ed6:	f7ff ffa7 	bl	8018e28 <__hexdig_fun>
 8018eda:	2301      	movs	r3, #1
 8018edc:	fab0 f480 	clz	r4, r0
 8018ee0:	0964      	lsrs	r4, r4, #5
 8018ee2:	4635      	mov	r5, r6
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	463a      	mov	r2, r7
 8018ee8:	4616      	mov	r6, r2
 8018eea:	3201      	adds	r2, #1
 8018eec:	7830      	ldrb	r0, [r6, #0]
 8018eee:	f7ff ff9b 	bl	8018e28 <__hexdig_fun>
 8018ef2:	2800      	cmp	r0, #0
 8018ef4:	d1f8      	bne.n	8018ee8 <__gethex+0x94>
 8018ef6:	9901      	ldr	r1, [sp, #4]
 8018ef8:	4652      	mov	r2, sl
 8018efa:	4630      	mov	r0, r6
 8018efc:	f7fe ff7b 	bl	8017df6 <strncmp>
 8018f00:	b980      	cbnz	r0, 8018f24 <__gethex+0xd0>
 8018f02:	b94d      	cbnz	r5, 8018f18 <__gethex+0xc4>
 8018f04:	eb06 050a 	add.w	r5, r6, sl
 8018f08:	462a      	mov	r2, r5
 8018f0a:	4616      	mov	r6, r2
 8018f0c:	3201      	adds	r2, #1
 8018f0e:	7830      	ldrb	r0, [r6, #0]
 8018f10:	f7ff ff8a 	bl	8018e28 <__hexdig_fun>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d1f8      	bne.n	8018f0a <__gethex+0xb6>
 8018f18:	1bad      	subs	r5, r5, r6
 8018f1a:	00ad      	lsls	r5, r5, #2
 8018f1c:	e004      	b.n	8018f28 <__gethex+0xd4>
 8018f1e:	2400      	movs	r4, #0
 8018f20:	4625      	mov	r5, r4
 8018f22:	e7e0      	b.n	8018ee6 <__gethex+0x92>
 8018f24:	2d00      	cmp	r5, #0
 8018f26:	d1f7      	bne.n	8018f18 <__gethex+0xc4>
 8018f28:	7833      	ldrb	r3, [r6, #0]
 8018f2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018f2e:	2b50      	cmp	r3, #80	; 0x50
 8018f30:	d13b      	bne.n	8018faa <__gethex+0x156>
 8018f32:	7873      	ldrb	r3, [r6, #1]
 8018f34:	2b2b      	cmp	r3, #43	; 0x2b
 8018f36:	d02c      	beq.n	8018f92 <__gethex+0x13e>
 8018f38:	2b2d      	cmp	r3, #45	; 0x2d
 8018f3a:	d02e      	beq.n	8018f9a <__gethex+0x146>
 8018f3c:	1c71      	adds	r1, r6, #1
 8018f3e:	f04f 0900 	mov.w	r9, #0
 8018f42:	7808      	ldrb	r0, [r1, #0]
 8018f44:	f7ff ff70 	bl	8018e28 <__hexdig_fun>
 8018f48:	1e43      	subs	r3, r0, #1
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	2b18      	cmp	r3, #24
 8018f4e:	d82c      	bhi.n	8018faa <__gethex+0x156>
 8018f50:	f1a0 0210 	sub.w	r2, r0, #16
 8018f54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018f58:	f7ff ff66 	bl	8018e28 <__hexdig_fun>
 8018f5c:	1e43      	subs	r3, r0, #1
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	2b18      	cmp	r3, #24
 8018f62:	d91d      	bls.n	8018fa0 <__gethex+0x14c>
 8018f64:	f1b9 0f00 	cmp.w	r9, #0
 8018f68:	d000      	beq.n	8018f6c <__gethex+0x118>
 8018f6a:	4252      	negs	r2, r2
 8018f6c:	4415      	add	r5, r2
 8018f6e:	f8cb 1000 	str.w	r1, [fp]
 8018f72:	b1e4      	cbz	r4, 8018fae <__gethex+0x15a>
 8018f74:	9b00      	ldr	r3, [sp, #0]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	bf14      	ite	ne
 8018f7a:	2700      	movne	r7, #0
 8018f7c:	2706      	moveq	r7, #6
 8018f7e:	4638      	mov	r0, r7
 8018f80:	b009      	add	sp, #36	; 0x24
 8018f82:	ecbd 8b02 	vpop	{d8}
 8018f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f8a:	463e      	mov	r6, r7
 8018f8c:	4625      	mov	r5, r4
 8018f8e:	2401      	movs	r4, #1
 8018f90:	e7ca      	b.n	8018f28 <__gethex+0xd4>
 8018f92:	f04f 0900 	mov.w	r9, #0
 8018f96:	1cb1      	adds	r1, r6, #2
 8018f98:	e7d3      	b.n	8018f42 <__gethex+0xee>
 8018f9a:	f04f 0901 	mov.w	r9, #1
 8018f9e:	e7fa      	b.n	8018f96 <__gethex+0x142>
 8018fa0:	230a      	movs	r3, #10
 8018fa2:	fb03 0202 	mla	r2, r3, r2, r0
 8018fa6:	3a10      	subs	r2, #16
 8018fa8:	e7d4      	b.n	8018f54 <__gethex+0x100>
 8018faa:	4631      	mov	r1, r6
 8018fac:	e7df      	b.n	8018f6e <__gethex+0x11a>
 8018fae:	1bf3      	subs	r3, r6, r7
 8018fb0:	3b01      	subs	r3, #1
 8018fb2:	4621      	mov	r1, r4
 8018fb4:	2b07      	cmp	r3, #7
 8018fb6:	dc0b      	bgt.n	8018fd0 <__gethex+0x17c>
 8018fb8:	ee18 0a10 	vmov	r0, s16
 8018fbc:	f000 fa8a 	bl	80194d4 <_Balloc>
 8018fc0:	4604      	mov	r4, r0
 8018fc2:	b940      	cbnz	r0, 8018fd6 <__gethex+0x182>
 8018fc4:	4b5d      	ldr	r3, [pc, #372]	; (801913c <__gethex+0x2e8>)
 8018fc6:	4602      	mov	r2, r0
 8018fc8:	21de      	movs	r1, #222	; 0xde
 8018fca:	485d      	ldr	r0, [pc, #372]	; (8019140 <__gethex+0x2ec>)
 8018fcc:	f7ff fdd8 	bl	8018b80 <__assert_func>
 8018fd0:	3101      	adds	r1, #1
 8018fd2:	105b      	asrs	r3, r3, #1
 8018fd4:	e7ee      	b.n	8018fb4 <__gethex+0x160>
 8018fd6:	f100 0914 	add.w	r9, r0, #20
 8018fda:	f04f 0b00 	mov.w	fp, #0
 8018fde:	f1ca 0301 	rsb	r3, sl, #1
 8018fe2:	f8cd 9008 	str.w	r9, [sp, #8]
 8018fe6:	f8cd b000 	str.w	fp, [sp]
 8018fea:	9306      	str	r3, [sp, #24]
 8018fec:	42b7      	cmp	r7, r6
 8018fee:	d340      	bcc.n	8019072 <__gethex+0x21e>
 8018ff0:	9802      	ldr	r0, [sp, #8]
 8018ff2:	9b00      	ldr	r3, [sp, #0]
 8018ff4:	f840 3b04 	str.w	r3, [r0], #4
 8018ff8:	eba0 0009 	sub.w	r0, r0, r9
 8018ffc:	1080      	asrs	r0, r0, #2
 8018ffe:	0146      	lsls	r6, r0, #5
 8019000:	6120      	str	r0, [r4, #16]
 8019002:	4618      	mov	r0, r3
 8019004:	f000 fb58 	bl	80196b8 <__hi0bits>
 8019008:	1a30      	subs	r0, r6, r0
 801900a:	f8d8 6000 	ldr.w	r6, [r8]
 801900e:	42b0      	cmp	r0, r6
 8019010:	dd63      	ble.n	80190da <__gethex+0x286>
 8019012:	1b87      	subs	r7, r0, r6
 8019014:	4639      	mov	r1, r7
 8019016:	4620      	mov	r0, r4
 8019018:	f000 fefc 	bl	8019e14 <__any_on>
 801901c:	4682      	mov	sl, r0
 801901e:	b1a8      	cbz	r0, 801904c <__gethex+0x1f8>
 8019020:	1e7b      	subs	r3, r7, #1
 8019022:	1159      	asrs	r1, r3, #5
 8019024:	f003 021f 	and.w	r2, r3, #31
 8019028:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801902c:	f04f 0a01 	mov.w	sl, #1
 8019030:	fa0a f202 	lsl.w	r2, sl, r2
 8019034:	420a      	tst	r2, r1
 8019036:	d009      	beq.n	801904c <__gethex+0x1f8>
 8019038:	4553      	cmp	r3, sl
 801903a:	dd05      	ble.n	8019048 <__gethex+0x1f4>
 801903c:	1eb9      	subs	r1, r7, #2
 801903e:	4620      	mov	r0, r4
 8019040:	f000 fee8 	bl	8019e14 <__any_on>
 8019044:	2800      	cmp	r0, #0
 8019046:	d145      	bne.n	80190d4 <__gethex+0x280>
 8019048:	f04f 0a02 	mov.w	sl, #2
 801904c:	4639      	mov	r1, r7
 801904e:	4620      	mov	r0, r4
 8019050:	f7ff fe98 	bl	8018d84 <rshift>
 8019054:	443d      	add	r5, r7
 8019056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801905a:	42ab      	cmp	r3, r5
 801905c:	da4c      	bge.n	80190f8 <__gethex+0x2a4>
 801905e:	ee18 0a10 	vmov	r0, s16
 8019062:	4621      	mov	r1, r4
 8019064:	f000 fa76 	bl	8019554 <_Bfree>
 8019068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801906a:	2300      	movs	r3, #0
 801906c:	6013      	str	r3, [r2, #0]
 801906e:	27a3      	movs	r7, #163	; 0xa3
 8019070:	e785      	b.n	8018f7e <__gethex+0x12a>
 8019072:	1e73      	subs	r3, r6, #1
 8019074:	9a05      	ldr	r2, [sp, #20]
 8019076:	9303      	str	r3, [sp, #12]
 8019078:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801907c:	4293      	cmp	r3, r2
 801907e:	d019      	beq.n	80190b4 <__gethex+0x260>
 8019080:	f1bb 0f20 	cmp.w	fp, #32
 8019084:	d107      	bne.n	8019096 <__gethex+0x242>
 8019086:	9b02      	ldr	r3, [sp, #8]
 8019088:	9a00      	ldr	r2, [sp, #0]
 801908a:	f843 2b04 	str.w	r2, [r3], #4
 801908e:	9302      	str	r3, [sp, #8]
 8019090:	2300      	movs	r3, #0
 8019092:	9300      	str	r3, [sp, #0]
 8019094:	469b      	mov	fp, r3
 8019096:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801909a:	f7ff fec5 	bl	8018e28 <__hexdig_fun>
 801909e:	9b00      	ldr	r3, [sp, #0]
 80190a0:	f000 000f 	and.w	r0, r0, #15
 80190a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80190a8:	4303      	orrs	r3, r0
 80190aa:	9300      	str	r3, [sp, #0]
 80190ac:	f10b 0b04 	add.w	fp, fp, #4
 80190b0:	9b03      	ldr	r3, [sp, #12]
 80190b2:	e00d      	b.n	80190d0 <__gethex+0x27c>
 80190b4:	9b03      	ldr	r3, [sp, #12]
 80190b6:	9a06      	ldr	r2, [sp, #24]
 80190b8:	4413      	add	r3, r2
 80190ba:	42bb      	cmp	r3, r7
 80190bc:	d3e0      	bcc.n	8019080 <__gethex+0x22c>
 80190be:	4618      	mov	r0, r3
 80190c0:	9901      	ldr	r1, [sp, #4]
 80190c2:	9307      	str	r3, [sp, #28]
 80190c4:	4652      	mov	r2, sl
 80190c6:	f7fe fe96 	bl	8017df6 <strncmp>
 80190ca:	9b07      	ldr	r3, [sp, #28]
 80190cc:	2800      	cmp	r0, #0
 80190ce:	d1d7      	bne.n	8019080 <__gethex+0x22c>
 80190d0:	461e      	mov	r6, r3
 80190d2:	e78b      	b.n	8018fec <__gethex+0x198>
 80190d4:	f04f 0a03 	mov.w	sl, #3
 80190d8:	e7b8      	b.n	801904c <__gethex+0x1f8>
 80190da:	da0a      	bge.n	80190f2 <__gethex+0x29e>
 80190dc:	1a37      	subs	r7, r6, r0
 80190de:	4621      	mov	r1, r4
 80190e0:	ee18 0a10 	vmov	r0, s16
 80190e4:	463a      	mov	r2, r7
 80190e6:	f000 fc51 	bl	801998c <__lshift>
 80190ea:	1bed      	subs	r5, r5, r7
 80190ec:	4604      	mov	r4, r0
 80190ee:	f100 0914 	add.w	r9, r0, #20
 80190f2:	f04f 0a00 	mov.w	sl, #0
 80190f6:	e7ae      	b.n	8019056 <__gethex+0x202>
 80190f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80190fc:	42a8      	cmp	r0, r5
 80190fe:	dd72      	ble.n	80191e6 <__gethex+0x392>
 8019100:	1b45      	subs	r5, r0, r5
 8019102:	42ae      	cmp	r6, r5
 8019104:	dc36      	bgt.n	8019174 <__gethex+0x320>
 8019106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801910a:	2b02      	cmp	r3, #2
 801910c:	d02a      	beq.n	8019164 <__gethex+0x310>
 801910e:	2b03      	cmp	r3, #3
 8019110:	d02c      	beq.n	801916c <__gethex+0x318>
 8019112:	2b01      	cmp	r3, #1
 8019114:	d11c      	bne.n	8019150 <__gethex+0x2fc>
 8019116:	42ae      	cmp	r6, r5
 8019118:	d11a      	bne.n	8019150 <__gethex+0x2fc>
 801911a:	2e01      	cmp	r6, #1
 801911c:	d112      	bne.n	8019144 <__gethex+0x2f0>
 801911e:	9a04      	ldr	r2, [sp, #16]
 8019120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019124:	6013      	str	r3, [r2, #0]
 8019126:	2301      	movs	r3, #1
 8019128:	6123      	str	r3, [r4, #16]
 801912a:	f8c9 3000 	str.w	r3, [r9]
 801912e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019130:	2762      	movs	r7, #98	; 0x62
 8019132:	601c      	str	r4, [r3, #0]
 8019134:	e723      	b.n	8018f7e <__gethex+0x12a>
 8019136:	bf00      	nop
 8019138:	0801e2c8 	.word	0x0801e2c8
 801913c:	0801e251 	.word	0x0801e251
 8019140:	0801e262 	.word	0x0801e262
 8019144:	1e71      	subs	r1, r6, #1
 8019146:	4620      	mov	r0, r4
 8019148:	f000 fe64 	bl	8019e14 <__any_on>
 801914c:	2800      	cmp	r0, #0
 801914e:	d1e6      	bne.n	801911e <__gethex+0x2ca>
 8019150:	ee18 0a10 	vmov	r0, s16
 8019154:	4621      	mov	r1, r4
 8019156:	f000 f9fd 	bl	8019554 <_Bfree>
 801915a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801915c:	2300      	movs	r3, #0
 801915e:	6013      	str	r3, [r2, #0]
 8019160:	2750      	movs	r7, #80	; 0x50
 8019162:	e70c      	b.n	8018f7e <__gethex+0x12a>
 8019164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019166:	2b00      	cmp	r3, #0
 8019168:	d1f2      	bne.n	8019150 <__gethex+0x2fc>
 801916a:	e7d8      	b.n	801911e <__gethex+0x2ca>
 801916c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801916e:	2b00      	cmp	r3, #0
 8019170:	d1d5      	bne.n	801911e <__gethex+0x2ca>
 8019172:	e7ed      	b.n	8019150 <__gethex+0x2fc>
 8019174:	1e6f      	subs	r7, r5, #1
 8019176:	f1ba 0f00 	cmp.w	sl, #0
 801917a:	d131      	bne.n	80191e0 <__gethex+0x38c>
 801917c:	b127      	cbz	r7, 8019188 <__gethex+0x334>
 801917e:	4639      	mov	r1, r7
 8019180:	4620      	mov	r0, r4
 8019182:	f000 fe47 	bl	8019e14 <__any_on>
 8019186:	4682      	mov	sl, r0
 8019188:	117b      	asrs	r3, r7, #5
 801918a:	2101      	movs	r1, #1
 801918c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019190:	f007 071f 	and.w	r7, r7, #31
 8019194:	fa01 f707 	lsl.w	r7, r1, r7
 8019198:	421f      	tst	r7, r3
 801919a:	4629      	mov	r1, r5
 801919c:	4620      	mov	r0, r4
 801919e:	bf18      	it	ne
 80191a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80191a4:	1b76      	subs	r6, r6, r5
 80191a6:	f7ff fded 	bl	8018d84 <rshift>
 80191aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80191ae:	2702      	movs	r7, #2
 80191b0:	f1ba 0f00 	cmp.w	sl, #0
 80191b4:	d048      	beq.n	8019248 <__gethex+0x3f4>
 80191b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191ba:	2b02      	cmp	r3, #2
 80191bc:	d015      	beq.n	80191ea <__gethex+0x396>
 80191be:	2b03      	cmp	r3, #3
 80191c0:	d017      	beq.n	80191f2 <__gethex+0x39e>
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d109      	bne.n	80191da <__gethex+0x386>
 80191c6:	f01a 0f02 	tst.w	sl, #2
 80191ca:	d006      	beq.n	80191da <__gethex+0x386>
 80191cc:	f8d9 0000 	ldr.w	r0, [r9]
 80191d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80191d4:	f01a 0f01 	tst.w	sl, #1
 80191d8:	d10e      	bne.n	80191f8 <__gethex+0x3a4>
 80191da:	f047 0710 	orr.w	r7, r7, #16
 80191de:	e033      	b.n	8019248 <__gethex+0x3f4>
 80191e0:	f04f 0a01 	mov.w	sl, #1
 80191e4:	e7d0      	b.n	8019188 <__gethex+0x334>
 80191e6:	2701      	movs	r7, #1
 80191e8:	e7e2      	b.n	80191b0 <__gethex+0x35c>
 80191ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191ec:	f1c3 0301 	rsb	r3, r3, #1
 80191f0:	9315      	str	r3, [sp, #84]	; 0x54
 80191f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d0f0      	beq.n	80191da <__gethex+0x386>
 80191f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80191fc:	f104 0314 	add.w	r3, r4, #20
 8019200:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019204:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019208:	f04f 0c00 	mov.w	ip, #0
 801920c:	4618      	mov	r0, r3
 801920e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019212:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8019216:	d01c      	beq.n	8019252 <__gethex+0x3fe>
 8019218:	3201      	adds	r2, #1
 801921a:	6002      	str	r2, [r0, #0]
 801921c:	2f02      	cmp	r7, #2
 801921e:	f104 0314 	add.w	r3, r4, #20
 8019222:	d13f      	bne.n	80192a4 <__gethex+0x450>
 8019224:	f8d8 2000 	ldr.w	r2, [r8]
 8019228:	3a01      	subs	r2, #1
 801922a:	42b2      	cmp	r2, r6
 801922c:	d10a      	bne.n	8019244 <__gethex+0x3f0>
 801922e:	1171      	asrs	r1, r6, #5
 8019230:	2201      	movs	r2, #1
 8019232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019236:	f006 061f 	and.w	r6, r6, #31
 801923a:	fa02 f606 	lsl.w	r6, r2, r6
 801923e:	421e      	tst	r6, r3
 8019240:	bf18      	it	ne
 8019242:	4617      	movne	r7, r2
 8019244:	f047 0720 	orr.w	r7, r7, #32
 8019248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801924a:	601c      	str	r4, [r3, #0]
 801924c:	9b04      	ldr	r3, [sp, #16]
 801924e:	601d      	str	r5, [r3, #0]
 8019250:	e695      	b.n	8018f7e <__gethex+0x12a>
 8019252:	4299      	cmp	r1, r3
 8019254:	f843 cc04 	str.w	ip, [r3, #-4]
 8019258:	d8d8      	bhi.n	801920c <__gethex+0x3b8>
 801925a:	68a3      	ldr	r3, [r4, #8]
 801925c:	459b      	cmp	fp, r3
 801925e:	db19      	blt.n	8019294 <__gethex+0x440>
 8019260:	6861      	ldr	r1, [r4, #4]
 8019262:	ee18 0a10 	vmov	r0, s16
 8019266:	3101      	adds	r1, #1
 8019268:	f000 f934 	bl	80194d4 <_Balloc>
 801926c:	4681      	mov	r9, r0
 801926e:	b918      	cbnz	r0, 8019278 <__gethex+0x424>
 8019270:	4b1a      	ldr	r3, [pc, #104]	; (80192dc <__gethex+0x488>)
 8019272:	4602      	mov	r2, r0
 8019274:	2184      	movs	r1, #132	; 0x84
 8019276:	e6a8      	b.n	8018fca <__gethex+0x176>
 8019278:	6922      	ldr	r2, [r4, #16]
 801927a:	3202      	adds	r2, #2
 801927c:	f104 010c 	add.w	r1, r4, #12
 8019280:	0092      	lsls	r2, r2, #2
 8019282:	300c      	adds	r0, #12
 8019284:	f7fe fbbf 	bl	8017a06 <memcpy>
 8019288:	4621      	mov	r1, r4
 801928a:	ee18 0a10 	vmov	r0, s16
 801928e:	f000 f961 	bl	8019554 <_Bfree>
 8019292:	464c      	mov	r4, r9
 8019294:	6923      	ldr	r3, [r4, #16]
 8019296:	1c5a      	adds	r2, r3, #1
 8019298:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801929c:	6122      	str	r2, [r4, #16]
 801929e:	2201      	movs	r2, #1
 80192a0:	615a      	str	r2, [r3, #20]
 80192a2:	e7bb      	b.n	801921c <__gethex+0x3c8>
 80192a4:	6922      	ldr	r2, [r4, #16]
 80192a6:	455a      	cmp	r2, fp
 80192a8:	dd0b      	ble.n	80192c2 <__gethex+0x46e>
 80192aa:	2101      	movs	r1, #1
 80192ac:	4620      	mov	r0, r4
 80192ae:	f7ff fd69 	bl	8018d84 <rshift>
 80192b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80192b6:	3501      	adds	r5, #1
 80192b8:	42ab      	cmp	r3, r5
 80192ba:	f6ff aed0 	blt.w	801905e <__gethex+0x20a>
 80192be:	2701      	movs	r7, #1
 80192c0:	e7c0      	b.n	8019244 <__gethex+0x3f0>
 80192c2:	f016 061f 	ands.w	r6, r6, #31
 80192c6:	d0fa      	beq.n	80192be <__gethex+0x46a>
 80192c8:	4453      	add	r3, sl
 80192ca:	f1c6 0620 	rsb	r6, r6, #32
 80192ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80192d2:	f000 f9f1 	bl	80196b8 <__hi0bits>
 80192d6:	42b0      	cmp	r0, r6
 80192d8:	dbe7      	blt.n	80192aa <__gethex+0x456>
 80192da:	e7f0      	b.n	80192be <__gethex+0x46a>
 80192dc:	0801e251 	.word	0x0801e251

080192e0 <L_shift>:
 80192e0:	f1c2 0208 	rsb	r2, r2, #8
 80192e4:	0092      	lsls	r2, r2, #2
 80192e6:	b570      	push	{r4, r5, r6, lr}
 80192e8:	f1c2 0620 	rsb	r6, r2, #32
 80192ec:	6843      	ldr	r3, [r0, #4]
 80192ee:	6804      	ldr	r4, [r0, #0]
 80192f0:	fa03 f506 	lsl.w	r5, r3, r6
 80192f4:	432c      	orrs	r4, r5
 80192f6:	40d3      	lsrs	r3, r2
 80192f8:	6004      	str	r4, [r0, #0]
 80192fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80192fe:	4288      	cmp	r0, r1
 8019300:	d3f4      	bcc.n	80192ec <L_shift+0xc>
 8019302:	bd70      	pop	{r4, r5, r6, pc}

08019304 <__match>:
 8019304:	b530      	push	{r4, r5, lr}
 8019306:	6803      	ldr	r3, [r0, #0]
 8019308:	3301      	adds	r3, #1
 801930a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801930e:	b914      	cbnz	r4, 8019316 <__match+0x12>
 8019310:	6003      	str	r3, [r0, #0]
 8019312:	2001      	movs	r0, #1
 8019314:	bd30      	pop	{r4, r5, pc}
 8019316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801931a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801931e:	2d19      	cmp	r5, #25
 8019320:	bf98      	it	ls
 8019322:	3220      	addls	r2, #32
 8019324:	42a2      	cmp	r2, r4
 8019326:	d0f0      	beq.n	801930a <__match+0x6>
 8019328:	2000      	movs	r0, #0
 801932a:	e7f3      	b.n	8019314 <__match+0x10>

0801932c <__hexnan>:
 801932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019330:	680b      	ldr	r3, [r1, #0]
 8019332:	115e      	asrs	r6, r3, #5
 8019334:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019338:	f013 031f 	ands.w	r3, r3, #31
 801933c:	b087      	sub	sp, #28
 801933e:	bf18      	it	ne
 8019340:	3604      	addne	r6, #4
 8019342:	2500      	movs	r5, #0
 8019344:	1f37      	subs	r7, r6, #4
 8019346:	4690      	mov	r8, r2
 8019348:	6802      	ldr	r2, [r0, #0]
 801934a:	9301      	str	r3, [sp, #4]
 801934c:	4682      	mov	sl, r0
 801934e:	f846 5c04 	str.w	r5, [r6, #-4]
 8019352:	46b9      	mov	r9, r7
 8019354:	463c      	mov	r4, r7
 8019356:	9502      	str	r5, [sp, #8]
 8019358:	46ab      	mov	fp, r5
 801935a:	7851      	ldrb	r1, [r2, #1]
 801935c:	1c53      	adds	r3, r2, #1
 801935e:	9303      	str	r3, [sp, #12]
 8019360:	b341      	cbz	r1, 80193b4 <__hexnan+0x88>
 8019362:	4608      	mov	r0, r1
 8019364:	9205      	str	r2, [sp, #20]
 8019366:	9104      	str	r1, [sp, #16]
 8019368:	f7ff fd5e 	bl	8018e28 <__hexdig_fun>
 801936c:	2800      	cmp	r0, #0
 801936e:	d14f      	bne.n	8019410 <__hexnan+0xe4>
 8019370:	9904      	ldr	r1, [sp, #16]
 8019372:	9a05      	ldr	r2, [sp, #20]
 8019374:	2920      	cmp	r1, #32
 8019376:	d818      	bhi.n	80193aa <__hexnan+0x7e>
 8019378:	9b02      	ldr	r3, [sp, #8]
 801937a:	459b      	cmp	fp, r3
 801937c:	dd13      	ble.n	80193a6 <__hexnan+0x7a>
 801937e:	454c      	cmp	r4, r9
 8019380:	d206      	bcs.n	8019390 <__hexnan+0x64>
 8019382:	2d07      	cmp	r5, #7
 8019384:	dc04      	bgt.n	8019390 <__hexnan+0x64>
 8019386:	462a      	mov	r2, r5
 8019388:	4649      	mov	r1, r9
 801938a:	4620      	mov	r0, r4
 801938c:	f7ff ffa8 	bl	80192e0 <L_shift>
 8019390:	4544      	cmp	r4, r8
 8019392:	d950      	bls.n	8019436 <__hexnan+0x10a>
 8019394:	2300      	movs	r3, #0
 8019396:	f1a4 0904 	sub.w	r9, r4, #4
 801939a:	f844 3c04 	str.w	r3, [r4, #-4]
 801939e:	f8cd b008 	str.w	fp, [sp, #8]
 80193a2:	464c      	mov	r4, r9
 80193a4:	461d      	mov	r5, r3
 80193a6:	9a03      	ldr	r2, [sp, #12]
 80193a8:	e7d7      	b.n	801935a <__hexnan+0x2e>
 80193aa:	2929      	cmp	r1, #41	; 0x29
 80193ac:	d156      	bne.n	801945c <__hexnan+0x130>
 80193ae:	3202      	adds	r2, #2
 80193b0:	f8ca 2000 	str.w	r2, [sl]
 80193b4:	f1bb 0f00 	cmp.w	fp, #0
 80193b8:	d050      	beq.n	801945c <__hexnan+0x130>
 80193ba:	454c      	cmp	r4, r9
 80193bc:	d206      	bcs.n	80193cc <__hexnan+0xa0>
 80193be:	2d07      	cmp	r5, #7
 80193c0:	dc04      	bgt.n	80193cc <__hexnan+0xa0>
 80193c2:	462a      	mov	r2, r5
 80193c4:	4649      	mov	r1, r9
 80193c6:	4620      	mov	r0, r4
 80193c8:	f7ff ff8a 	bl	80192e0 <L_shift>
 80193cc:	4544      	cmp	r4, r8
 80193ce:	d934      	bls.n	801943a <__hexnan+0x10e>
 80193d0:	f1a8 0204 	sub.w	r2, r8, #4
 80193d4:	4623      	mov	r3, r4
 80193d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80193da:	f842 1f04 	str.w	r1, [r2, #4]!
 80193de:	429f      	cmp	r7, r3
 80193e0:	d2f9      	bcs.n	80193d6 <__hexnan+0xaa>
 80193e2:	1b3b      	subs	r3, r7, r4
 80193e4:	f023 0303 	bic.w	r3, r3, #3
 80193e8:	3304      	adds	r3, #4
 80193ea:	3401      	adds	r4, #1
 80193ec:	3e03      	subs	r6, #3
 80193ee:	42b4      	cmp	r4, r6
 80193f0:	bf88      	it	hi
 80193f2:	2304      	movhi	r3, #4
 80193f4:	4443      	add	r3, r8
 80193f6:	2200      	movs	r2, #0
 80193f8:	f843 2b04 	str.w	r2, [r3], #4
 80193fc:	429f      	cmp	r7, r3
 80193fe:	d2fb      	bcs.n	80193f8 <__hexnan+0xcc>
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	b91b      	cbnz	r3, 801940c <__hexnan+0xe0>
 8019404:	4547      	cmp	r7, r8
 8019406:	d127      	bne.n	8019458 <__hexnan+0x12c>
 8019408:	2301      	movs	r3, #1
 801940a:	603b      	str	r3, [r7, #0]
 801940c:	2005      	movs	r0, #5
 801940e:	e026      	b.n	801945e <__hexnan+0x132>
 8019410:	3501      	adds	r5, #1
 8019412:	2d08      	cmp	r5, #8
 8019414:	f10b 0b01 	add.w	fp, fp, #1
 8019418:	dd06      	ble.n	8019428 <__hexnan+0xfc>
 801941a:	4544      	cmp	r4, r8
 801941c:	d9c3      	bls.n	80193a6 <__hexnan+0x7a>
 801941e:	2300      	movs	r3, #0
 8019420:	f844 3c04 	str.w	r3, [r4, #-4]
 8019424:	2501      	movs	r5, #1
 8019426:	3c04      	subs	r4, #4
 8019428:	6822      	ldr	r2, [r4, #0]
 801942a:	f000 000f 	and.w	r0, r0, #15
 801942e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019432:	6022      	str	r2, [r4, #0]
 8019434:	e7b7      	b.n	80193a6 <__hexnan+0x7a>
 8019436:	2508      	movs	r5, #8
 8019438:	e7b5      	b.n	80193a6 <__hexnan+0x7a>
 801943a:	9b01      	ldr	r3, [sp, #4]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d0df      	beq.n	8019400 <__hexnan+0xd4>
 8019440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019444:	f1c3 0320 	rsb	r3, r3, #32
 8019448:	fa22 f303 	lsr.w	r3, r2, r3
 801944c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019450:	401a      	ands	r2, r3
 8019452:	f846 2c04 	str.w	r2, [r6, #-4]
 8019456:	e7d3      	b.n	8019400 <__hexnan+0xd4>
 8019458:	3f04      	subs	r7, #4
 801945a:	e7d1      	b.n	8019400 <__hexnan+0xd4>
 801945c:	2004      	movs	r0, #4
 801945e:	b007      	add	sp, #28
 8019460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019464 <_lseek_r>:
 8019464:	b538      	push	{r3, r4, r5, lr}
 8019466:	4d07      	ldr	r5, [pc, #28]	; (8019484 <_lseek_r+0x20>)
 8019468:	4604      	mov	r4, r0
 801946a:	4608      	mov	r0, r1
 801946c:	4611      	mov	r1, r2
 801946e:	2200      	movs	r2, #0
 8019470:	602a      	str	r2, [r5, #0]
 8019472:	461a      	mov	r2, r3
 8019474:	f7e8 fb4a 	bl	8001b0c <_lseek>
 8019478:	1c43      	adds	r3, r0, #1
 801947a:	d102      	bne.n	8019482 <_lseek_r+0x1e>
 801947c:	682b      	ldr	r3, [r5, #0]
 801947e:	b103      	cbz	r3, 8019482 <_lseek_r+0x1e>
 8019480:	6023      	str	r3, [r4, #0]
 8019482:	bd38      	pop	{r3, r4, r5, pc}
 8019484:	20011d00 	.word	0x20011d00

08019488 <malloc>:
 8019488:	4b02      	ldr	r3, [pc, #8]	; (8019494 <malloc+0xc>)
 801948a:	4601      	mov	r1, r0
 801948c:	6818      	ldr	r0, [r3, #0]
 801948e:	f7fe bb0b 	b.w	8017aa8 <_malloc_r>
 8019492:	bf00      	nop
 8019494:	2000002c 	.word	0x2000002c

08019498 <__ascii_mbtowc>:
 8019498:	b082      	sub	sp, #8
 801949a:	b901      	cbnz	r1, 801949e <__ascii_mbtowc+0x6>
 801949c:	a901      	add	r1, sp, #4
 801949e:	b142      	cbz	r2, 80194b2 <__ascii_mbtowc+0x1a>
 80194a0:	b14b      	cbz	r3, 80194b6 <__ascii_mbtowc+0x1e>
 80194a2:	7813      	ldrb	r3, [r2, #0]
 80194a4:	600b      	str	r3, [r1, #0]
 80194a6:	7812      	ldrb	r2, [r2, #0]
 80194a8:	1e10      	subs	r0, r2, #0
 80194aa:	bf18      	it	ne
 80194ac:	2001      	movne	r0, #1
 80194ae:	b002      	add	sp, #8
 80194b0:	4770      	bx	lr
 80194b2:	4610      	mov	r0, r2
 80194b4:	e7fb      	b.n	80194ae <__ascii_mbtowc+0x16>
 80194b6:	f06f 0001 	mvn.w	r0, #1
 80194ba:	e7f8      	b.n	80194ae <__ascii_mbtowc+0x16>

080194bc <__malloc_lock>:
 80194bc:	4801      	ldr	r0, [pc, #4]	; (80194c4 <__malloc_lock+0x8>)
 80194be:	f7fe ba90 	b.w	80179e2 <__retarget_lock_acquire_recursive>
 80194c2:	bf00      	nop
 80194c4:	20011cf4 	.word	0x20011cf4

080194c8 <__malloc_unlock>:
 80194c8:	4801      	ldr	r0, [pc, #4]	; (80194d0 <__malloc_unlock+0x8>)
 80194ca:	f7fe ba8b 	b.w	80179e4 <__retarget_lock_release_recursive>
 80194ce:	bf00      	nop
 80194d0:	20011cf4 	.word	0x20011cf4

080194d4 <_Balloc>:
 80194d4:	b570      	push	{r4, r5, r6, lr}
 80194d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194d8:	4604      	mov	r4, r0
 80194da:	460d      	mov	r5, r1
 80194dc:	b976      	cbnz	r6, 80194fc <_Balloc+0x28>
 80194de:	2010      	movs	r0, #16
 80194e0:	f7ff ffd2 	bl	8019488 <malloc>
 80194e4:	4602      	mov	r2, r0
 80194e6:	6260      	str	r0, [r4, #36]	; 0x24
 80194e8:	b920      	cbnz	r0, 80194f4 <_Balloc+0x20>
 80194ea:	4b18      	ldr	r3, [pc, #96]	; (801954c <_Balloc+0x78>)
 80194ec:	4818      	ldr	r0, [pc, #96]	; (8019550 <_Balloc+0x7c>)
 80194ee:	2166      	movs	r1, #102	; 0x66
 80194f0:	f7ff fb46 	bl	8018b80 <__assert_func>
 80194f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194f8:	6006      	str	r6, [r0, #0]
 80194fa:	60c6      	str	r6, [r0, #12]
 80194fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80194fe:	68f3      	ldr	r3, [r6, #12]
 8019500:	b183      	cbz	r3, 8019524 <_Balloc+0x50>
 8019502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801950a:	b9b8      	cbnz	r0, 801953c <_Balloc+0x68>
 801950c:	2101      	movs	r1, #1
 801950e:	fa01 f605 	lsl.w	r6, r1, r5
 8019512:	1d72      	adds	r2, r6, #5
 8019514:	0092      	lsls	r2, r2, #2
 8019516:	4620      	mov	r0, r4
 8019518:	f000 fc9d 	bl	8019e56 <_calloc_r>
 801951c:	b160      	cbz	r0, 8019538 <_Balloc+0x64>
 801951e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019522:	e00e      	b.n	8019542 <_Balloc+0x6e>
 8019524:	2221      	movs	r2, #33	; 0x21
 8019526:	2104      	movs	r1, #4
 8019528:	4620      	mov	r0, r4
 801952a:	f000 fc94 	bl	8019e56 <_calloc_r>
 801952e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019530:	60f0      	str	r0, [r6, #12]
 8019532:	68db      	ldr	r3, [r3, #12]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d1e4      	bne.n	8019502 <_Balloc+0x2e>
 8019538:	2000      	movs	r0, #0
 801953a:	bd70      	pop	{r4, r5, r6, pc}
 801953c:	6802      	ldr	r2, [r0, #0]
 801953e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019542:	2300      	movs	r3, #0
 8019544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019548:	e7f7      	b.n	801953a <_Balloc+0x66>
 801954a:	bf00      	nop
 801954c:	0801e0e8 	.word	0x0801e0e8
 8019550:	0801e2dc 	.word	0x0801e2dc

08019554 <_Bfree>:
 8019554:	b570      	push	{r4, r5, r6, lr}
 8019556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019558:	4605      	mov	r5, r0
 801955a:	460c      	mov	r4, r1
 801955c:	b976      	cbnz	r6, 801957c <_Bfree+0x28>
 801955e:	2010      	movs	r0, #16
 8019560:	f7ff ff92 	bl	8019488 <malloc>
 8019564:	4602      	mov	r2, r0
 8019566:	6268      	str	r0, [r5, #36]	; 0x24
 8019568:	b920      	cbnz	r0, 8019574 <_Bfree+0x20>
 801956a:	4b09      	ldr	r3, [pc, #36]	; (8019590 <_Bfree+0x3c>)
 801956c:	4809      	ldr	r0, [pc, #36]	; (8019594 <_Bfree+0x40>)
 801956e:	218a      	movs	r1, #138	; 0x8a
 8019570:	f7ff fb06 	bl	8018b80 <__assert_func>
 8019574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019578:	6006      	str	r6, [r0, #0]
 801957a:	60c6      	str	r6, [r0, #12]
 801957c:	b13c      	cbz	r4, 801958e <_Bfree+0x3a>
 801957e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019580:	6862      	ldr	r2, [r4, #4]
 8019582:	68db      	ldr	r3, [r3, #12]
 8019584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019588:	6021      	str	r1, [r4, #0]
 801958a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801958e:	bd70      	pop	{r4, r5, r6, pc}
 8019590:	0801e0e8 	.word	0x0801e0e8
 8019594:	0801e2dc 	.word	0x0801e2dc

08019598 <__multadd>:
 8019598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801959c:	690d      	ldr	r5, [r1, #16]
 801959e:	4607      	mov	r7, r0
 80195a0:	460c      	mov	r4, r1
 80195a2:	461e      	mov	r6, r3
 80195a4:	f101 0c14 	add.w	ip, r1, #20
 80195a8:	2000      	movs	r0, #0
 80195aa:	f8dc 3000 	ldr.w	r3, [ip]
 80195ae:	b299      	uxth	r1, r3
 80195b0:	fb02 6101 	mla	r1, r2, r1, r6
 80195b4:	0c1e      	lsrs	r6, r3, #16
 80195b6:	0c0b      	lsrs	r3, r1, #16
 80195b8:	fb02 3306 	mla	r3, r2, r6, r3
 80195bc:	b289      	uxth	r1, r1
 80195be:	3001      	adds	r0, #1
 80195c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80195c4:	4285      	cmp	r5, r0
 80195c6:	f84c 1b04 	str.w	r1, [ip], #4
 80195ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80195ce:	dcec      	bgt.n	80195aa <__multadd+0x12>
 80195d0:	b30e      	cbz	r6, 8019616 <__multadd+0x7e>
 80195d2:	68a3      	ldr	r3, [r4, #8]
 80195d4:	42ab      	cmp	r3, r5
 80195d6:	dc19      	bgt.n	801960c <__multadd+0x74>
 80195d8:	6861      	ldr	r1, [r4, #4]
 80195da:	4638      	mov	r0, r7
 80195dc:	3101      	adds	r1, #1
 80195de:	f7ff ff79 	bl	80194d4 <_Balloc>
 80195e2:	4680      	mov	r8, r0
 80195e4:	b928      	cbnz	r0, 80195f2 <__multadd+0x5a>
 80195e6:	4602      	mov	r2, r0
 80195e8:	4b0c      	ldr	r3, [pc, #48]	; (801961c <__multadd+0x84>)
 80195ea:	480d      	ldr	r0, [pc, #52]	; (8019620 <__multadd+0x88>)
 80195ec:	21b5      	movs	r1, #181	; 0xb5
 80195ee:	f7ff fac7 	bl	8018b80 <__assert_func>
 80195f2:	6922      	ldr	r2, [r4, #16]
 80195f4:	3202      	adds	r2, #2
 80195f6:	f104 010c 	add.w	r1, r4, #12
 80195fa:	0092      	lsls	r2, r2, #2
 80195fc:	300c      	adds	r0, #12
 80195fe:	f7fe fa02 	bl	8017a06 <memcpy>
 8019602:	4621      	mov	r1, r4
 8019604:	4638      	mov	r0, r7
 8019606:	f7ff ffa5 	bl	8019554 <_Bfree>
 801960a:	4644      	mov	r4, r8
 801960c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019610:	3501      	adds	r5, #1
 8019612:	615e      	str	r6, [r3, #20]
 8019614:	6125      	str	r5, [r4, #16]
 8019616:	4620      	mov	r0, r4
 8019618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801961c:	0801e251 	.word	0x0801e251
 8019620:	0801e2dc 	.word	0x0801e2dc

08019624 <__s2b>:
 8019624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019628:	460c      	mov	r4, r1
 801962a:	4615      	mov	r5, r2
 801962c:	461f      	mov	r7, r3
 801962e:	2209      	movs	r2, #9
 8019630:	3308      	adds	r3, #8
 8019632:	4606      	mov	r6, r0
 8019634:	fb93 f3f2 	sdiv	r3, r3, r2
 8019638:	2100      	movs	r1, #0
 801963a:	2201      	movs	r2, #1
 801963c:	429a      	cmp	r2, r3
 801963e:	db09      	blt.n	8019654 <__s2b+0x30>
 8019640:	4630      	mov	r0, r6
 8019642:	f7ff ff47 	bl	80194d4 <_Balloc>
 8019646:	b940      	cbnz	r0, 801965a <__s2b+0x36>
 8019648:	4602      	mov	r2, r0
 801964a:	4b19      	ldr	r3, [pc, #100]	; (80196b0 <__s2b+0x8c>)
 801964c:	4819      	ldr	r0, [pc, #100]	; (80196b4 <__s2b+0x90>)
 801964e:	21ce      	movs	r1, #206	; 0xce
 8019650:	f7ff fa96 	bl	8018b80 <__assert_func>
 8019654:	0052      	lsls	r2, r2, #1
 8019656:	3101      	adds	r1, #1
 8019658:	e7f0      	b.n	801963c <__s2b+0x18>
 801965a:	9b08      	ldr	r3, [sp, #32]
 801965c:	6143      	str	r3, [r0, #20]
 801965e:	2d09      	cmp	r5, #9
 8019660:	f04f 0301 	mov.w	r3, #1
 8019664:	6103      	str	r3, [r0, #16]
 8019666:	dd16      	ble.n	8019696 <__s2b+0x72>
 8019668:	f104 0909 	add.w	r9, r4, #9
 801966c:	46c8      	mov	r8, r9
 801966e:	442c      	add	r4, r5
 8019670:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019674:	4601      	mov	r1, r0
 8019676:	3b30      	subs	r3, #48	; 0x30
 8019678:	220a      	movs	r2, #10
 801967a:	4630      	mov	r0, r6
 801967c:	f7ff ff8c 	bl	8019598 <__multadd>
 8019680:	45a0      	cmp	r8, r4
 8019682:	d1f5      	bne.n	8019670 <__s2b+0x4c>
 8019684:	f1a5 0408 	sub.w	r4, r5, #8
 8019688:	444c      	add	r4, r9
 801968a:	1b2d      	subs	r5, r5, r4
 801968c:	1963      	adds	r3, r4, r5
 801968e:	42bb      	cmp	r3, r7
 8019690:	db04      	blt.n	801969c <__s2b+0x78>
 8019692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019696:	340a      	adds	r4, #10
 8019698:	2509      	movs	r5, #9
 801969a:	e7f6      	b.n	801968a <__s2b+0x66>
 801969c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80196a0:	4601      	mov	r1, r0
 80196a2:	3b30      	subs	r3, #48	; 0x30
 80196a4:	220a      	movs	r2, #10
 80196a6:	4630      	mov	r0, r6
 80196a8:	f7ff ff76 	bl	8019598 <__multadd>
 80196ac:	e7ee      	b.n	801968c <__s2b+0x68>
 80196ae:	bf00      	nop
 80196b0:	0801e251 	.word	0x0801e251
 80196b4:	0801e2dc 	.word	0x0801e2dc

080196b8 <__hi0bits>:
 80196b8:	0c03      	lsrs	r3, r0, #16
 80196ba:	041b      	lsls	r3, r3, #16
 80196bc:	b9d3      	cbnz	r3, 80196f4 <__hi0bits+0x3c>
 80196be:	0400      	lsls	r0, r0, #16
 80196c0:	2310      	movs	r3, #16
 80196c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80196c6:	bf04      	itt	eq
 80196c8:	0200      	lsleq	r0, r0, #8
 80196ca:	3308      	addeq	r3, #8
 80196cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80196d0:	bf04      	itt	eq
 80196d2:	0100      	lsleq	r0, r0, #4
 80196d4:	3304      	addeq	r3, #4
 80196d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80196da:	bf04      	itt	eq
 80196dc:	0080      	lsleq	r0, r0, #2
 80196de:	3302      	addeq	r3, #2
 80196e0:	2800      	cmp	r0, #0
 80196e2:	db05      	blt.n	80196f0 <__hi0bits+0x38>
 80196e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80196e8:	f103 0301 	add.w	r3, r3, #1
 80196ec:	bf08      	it	eq
 80196ee:	2320      	moveq	r3, #32
 80196f0:	4618      	mov	r0, r3
 80196f2:	4770      	bx	lr
 80196f4:	2300      	movs	r3, #0
 80196f6:	e7e4      	b.n	80196c2 <__hi0bits+0xa>

080196f8 <__lo0bits>:
 80196f8:	6803      	ldr	r3, [r0, #0]
 80196fa:	f013 0207 	ands.w	r2, r3, #7
 80196fe:	4601      	mov	r1, r0
 8019700:	d00b      	beq.n	801971a <__lo0bits+0x22>
 8019702:	07da      	lsls	r2, r3, #31
 8019704:	d423      	bmi.n	801974e <__lo0bits+0x56>
 8019706:	0798      	lsls	r0, r3, #30
 8019708:	bf49      	itett	mi
 801970a:	085b      	lsrmi	r3, r3, #1
 801970c:	089b      	lsrpl	r3, r3, #2
 801970e:	2001      	movmi	r0, #1
 8019710:	600b      	strmi	r3, [r1, #0]
 8019712:	bf5c      	itt	pl
 8019714:	600b      	strpl	r3, [r1, #0]
 8019716:	2002      	movpl	r0, #2
 8019718:	4770      	bx	lr
 801971a:	b298      	uxth	r0, r3
 801971c:	b9a8      	cbnz	r0, 801974a <__lo0bits+0x52>
 801971e:	0c1b      	lsrs	r3, r3, #16
 8019720:	2010      	movs	r0, #16
 8019722:	b2da      	uxtb	r2, r3
 8019724:	b90a      	cbnz	r2, 801972a <__lo0bits+0x32>
 8019726:	3008      	adds	r0, #8
 8019728:	0a1b      	lsrs	r3, r3, #8
 801972a:	071a      	lsls	r2, r3, #28
 801972c:	bf04      	itt	eq
 801972e:	091b      	lsreq	r3, r3, #4
 8019730:	3004      	addeq	r0, #4
 8019732:	079a      	lsls	r2, r3, #30
 8019734:	bf04      	itt	eq
 8019736:	089b      	lsreq	r3, r3, #2
 8019738:	3002      	addeq	r0, #2
 801973a:	07da      	lsls	r2, r3, #31
 801973c:	d403      	bmi.n	8019746 <__lo0bits+0x4e>
 801973e:	085b      	lsrs	r3, r3, #1
 8019740:	f100 0001 	add.w	r0, r0, #1
 8019744:	d005      	beq.n	8019752 <__lo0bits+0x5a>
 8019746:	600b      	str	r3, [r1, #0]
 8019748:	4770      	bx	lr
 801974a:	4610      	mov	r0, r2
 801974c:	e7e9      	b.n	8019722 <__lo0bits+0x2a>
 801974e:	2000      	movs	r0, #0
 8019750:	4770      	bx	lr
 8019752:	2020      	movs	r0, #32
 8019754:	4770      	bx	lr
	...

08019758 <__i2b>:
 8019758:	b510      	push	{r4, lr}
 801975a:	460c      	mov	r4, r1
 801975c:	2101      	movs	r1, #1
 801975e:	f7ff feb9 	bl	80194d4 <_Balloc>
 8019762:	4602      	mov	r2, r0
 8019764:	b928      	cbnz	r0, 8019772 <__i2b+0x1a>
 8019766:	4b05      	ldr	r3, [pc, #20]	; (801977c <__i2b+0x24>)
 8019768:	4805      	ldr	r0, [pc, #20]	; (8019780 <__i2b+0x28>)
 801976a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801976e:	f7ff fa07 	bl	8018b80 <__assert_func>
 8019772:	2301      	movs	r3, #1
 8019774:	6144      	str	r4, [r0, #20]
 8019776:	6103      	str	r3, [r0, #16]
 8019778:	bd10      	pop	{r4, pc}
 801977a:	bf00      	nop
 801977c:	0801e251 	.word	0x0801e251
 8019780:	0801e2dc 	.word	0x0801e2dc

08019784 <__multiply>:
 8019784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019788:	4691      	mov	r9, r2
 801978a:	690a      	ldr	r2, [r1, #16]
 801978c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019790:	429a      	cmp	r2, r3
 8019792:	bfb8      	it	lt
 8019794:	460b      	movlt	r3, r1
 8019796:	460c      	mov	r4, r1
 8019798:	bfbc      	itt	lt
 801979a:	464c      	movlt	r4, r9
 801979c:	4699      	movlt	r9, r3
 801979e:	6927      	ldr	r7, [r4, #16]
 80197a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80197a4:	68a3      	ldr	r3, [r4, #8]
 80197a6:	6861      	ldr	r1, [r4, #4]
 80197a8:	eb07 060a 	add.w	r6, r7, sl
 80197ac:	42b3      	cmp	r3, r6
 80197ae:	b085      	sub	sp, #20
 80197b0:	bfb8      	it	lt
 80197b2:	3101      	addlt	r1, #1
 80197b4:	f7ff fe8e 	bl	80194d4 <_Balloc>
 80197b8:	b930      	cbnz	r0, 80197c8 <__multiply+0x44>
 80197ba:	4602      	mov	r2, r0
 80197bc:	4b44      	ldr	r3, [pc, #272]	; (80198d0 <__multiply+0x14c>)
 80197be:	4845      	ldr	r0, [pc, #276]	; (80198d4 <__multiply+0x150>)
 80197c0:	f240 115d 	movw	r1, #349	; 0x15d
 80197c4:	f7ff f9dc 	bl	8018b80 <__assert_func>
 80197c8:	f100 0514 	add.w	r5, r0, #20
 80197cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80197d0:	462b      	mov	r3, r5
 80197d2:	2200      	movs	r2, #0
 80197d4:	4543      	cmp	r3, r8
 80197d6:	d321      	bcc.n	801981c <__multiply+0x98>
 80197d8:	f104 0314 	add.w	r3, r4, #20
 80197dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80197e0:	f109 0314 	add.w	r3, r9, #20
 80197e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80197e8:	9202      	str	r2, [sp, #8]
 80197ea:	1b3a      	subs	r2, r7, r4
 80197ec:	3a15      	subs	r2, #21
 80197ee:	f022 0203 	bic.w	r2, r2, #3
 80197f2:	3204      	adds	r2, #4
 80197f4:	f104 0115 	add.w	r1, r4, #21
 80197f8:	428f      	cmp	r7, r1
 80197fa:	bf38      	it	cc
 80197fc:	2204      	movcc	r2, #4
 80197fe:	9201      	str	r2, [sp, #4]
 8019800:	9a02      	ldr	r2, [sp, #8]
 8019802:	9303      	str	r3, [sp, #12]
 8019804:	429a      	cmp	r2, r3
 8019806:	d80c      	bhi.n	8019822 <__multiply+0x9e>
 8019808:	2e00      	cmp	r6, #0
 801980a:	dd03      	ble.n	8019814 <__multiply+0x90>
 801980c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019810:	2b00      	cmp	r3, #0
 8019812:	d05a      	beq.n	80198ca <__multiply+0x146>
 8019814:	6106      	str	r6, [r0, #16]
 8019816:	b005      	add	sp, #20
 8019818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981c:	f843 2b04 	str.w	r2, [r3], #4
 8019820:	e7d8      	b.n	80197d4 <__multiply+0x50>
 8019822:	f8b3 a000 	ldrh.w	sl, [r3]
 8019826:	f1ba 0f00 	cmp.w	sl, #0
 801982a:	d024      	beq.n	8019876 <__multiply+0xf2>
 801982c:	f104 0e14 	add.w	lr, r4, #20
 8019830:	46a9      	mov	r9, r5
 8019832:	f04f 0c00 	mov.w	ip, #0
 8019836:	f85e 2b04 	ldr.w	r2, [lr], #4
 801983a:	f8d9 1000 	ldr.w	r1, [r9]
 801983e:	fa1f fb82 	uxth.w	fp, r2
 8019842:	b289      	uxth	r1, r1
 8019844:	fb0a 110b 	mla	r1, sl, fp, r1
 8019848:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801984c:	f8d9 2000 	ldr.w	r2, [r9]
 8019850:	4461      	add	r1, ip
 8019852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019856:	fb0a c20b 	mla	r2, sl, fp, ip
 801985a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801985e:	b289      	uxth	r1, r1
 8019860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019864:	4577      	cmp	r7, lr
 8019866:	f849 1b04 	str.w	r1, [r9], #4
 801986a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801986e:	d8e2      	bhi.n	8019836 <__multiply+0xb2>
 8019870:	9a01      	ldr	r2, [sp, #4]
 8019872:	f845 c002 	str.w	ip, [r5, r2]
 8019876:	9a03      	ldr	r2, [sp, #12]
 8019878:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801987c:	3304      	adds	r3, #4
 801987e:	f1b9 0f00 	cmp.w	r9, #0
 8019882:	d020      	beq.n	80198c6 <__multiply+0x142>
 8019884:	6829      	ldr	r1, [r5, #0]
 8019886:	f104 0c14 	add.w	ip, r4, #20
 801988a:	46ae      	mov	lr, r5
 801988c:	f04f 0a00 	mov.w	sl, #0
 8019890:	f8bc b000 	ldrh.w	fp, [ip]
 8019894:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019898:	fb09 220b 	mla	r2, r9, fp, r2
 801989c:	4492      	add	sl, r2
 801989e:	b289      	uxth	r1, r1
 80198a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80198a4:	f84e 1b04 	str.w	r1, [lr], #4
 80198a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80198ac:	f8be 1000 	ldrh.w	r1, [lr]
 80198b0:	0c12      	lsrs	r2, r2, #16
 80198b2:	fb09 1102 	mla	r1, r9, r2, r1
 80198b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80198ba:	4567      	cmp	r7, ip
 80198bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80198c0:	d8e6      	bhi.n	8019890 <__multiply+0x10c>
 80198c2:	9a01      	ldr	r2, [sp, #4]
 80198c4:	50a9      	str	r1, [r5, r2]
 80198c6:	3504      	adds	r5, #4
 80198c8:	e79a      	b.n	8019800 <__multiply+0x7c>
 80198ca:	3e01      	subs	r6, #1
 80198cc:	e79c      	b.n	8019808 <__multiply+0x84>
 80198ce:	bf00      	nop
 80198d0:	0801e251 	.word	0x0801e251
 80198d4:	0801e2dc 	.word	0x0801e2dc

080198d8 <__pow5mult>:
 80198d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198dc:	4615      	mov	r5, r2
 80198de:	f012 0203 	ands.w	r2, r2, #3
 80198e2:	4606      	mov	r6, r0
 80198e4:	460f      	mov	r7, r1
 80198e6:	d007      	beq.n	80198f8 <__pow5mult+0x20>
 80198e8:	4c25      	ldr	r4, [pc, #148]	; (8019980 <__pow5mult+0xa8>)
 80198ea:	3a01      	subs	r2, #1
 80198ec:	2300      	movs	r3, #0
 80198ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80198f2:	f7ff fe51 	bl	8019598 <__multadd>
 80198f6:	4607      	mov	r7, r0
 80198f8:	10ad      	asrs	r5, r5, #2
 80198fa:	d03d      	beq.n	8019978 <__pow5mult+0xa0>
 80198fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80198fe:	b97c      	cbnz	r4, 8019920 <__pow5mult+0x48>
 8019900:	2010      	movs	r0, #16
 8019902:	f7ff fdc1 	bl	8019488 <malloc>
 8019906:	4602      	mov	r2, r0
 8019908:	6270      	str	r0, [r6, #36]	; 0x24
 801990a:	b928      	cbnz	r0, 8019918 <__pow5mult+0x40>
 801990c:	4b1d      	ldr	r3, [pc, #116]	; (8019984 <__pow5mult+0xac>)
 801990e:	481e      	ldr	r0, [pc, #120]	; (8019988 <__pow5mult+0xb0>)
 8019910:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019914:	f7ff f934 	bl	8018b80 <__assert_func>
 8019918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801991c:	6004      	str	r4, [r0, #0]
 801991e:	60c4      	str	r4, [r0, #12]
 8019920:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019928:	b94c      	cbnz	r4, 801993e <__pow5mult+0x66>
 801992a:	f240 2171 	movw	r1, #625	; 0x271
 801992e:	4630      	mov	r0, r6
 8019930:	f7ff ff12 	bl	8019758 <__i2b>
 8019934:	2300      	movs	r3, #0
 8019936:	f8c8 0008 	str.w	r0, [r8, #8]
 801993a:	4604      	mov	r4, r0
 801993c:	6003      	str	r3, [r0, #0]
 801993e:	f04f 0900 	mov.w	r9, #0
 8019942:	07eb      	lsls	r3, r5, #31
 8019944:	d50a      	bpl.n	801995c <__pow5mult+0x84>
 8019946:	4639      	mov	r1, r7
 8019948:	4622      	mov	r2, r4
 801994a:	4630      	mov	r0, r6
 801994c:	f7ff ff1a 	bl	8019784 <__multiply>
 8019950:	4639      	mov	r1, r7
 8019952:	4680      	mov	r8, r0
 8019954:	4630      	mov	r0, r6
 8019956:	f7ff fdfd 	bl	8019554 <_Bfree>
 801995a:	4647      	mov	r7, r8
 801995c:	106d      	asrs	r5, r5, #1
 801995e:	d00b      	beq.n	8019978 <__pow5mult+0xa0>
 8019960:	6820      	ldr	r0, [r4, #0]
 8019962:	b938      	cbnz	r0, 8019974 <__pow5mult+0x9c>
 8019964:	4622      	mov	r2, r4
 8019966:	4621      	mov	r1, r4
 8019968:	4630      	mov	r0, r6
 801996a:	f7ff ff0b 	bl	8019784 <__multiply>
 801996e:	6020      	str	r0, [r4, #0]
 8019970:	f8c0 9000 	str.w	r9, [r0]
 8019974:	4604      	mov	r4, r0
 8019976:	e7e4      	b.n	8019942 <__pow5mult+0x6a>
 8019978:	4638      	mov	r0, r7
 801997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801997e:	bf00      	nop
 8019980:	0801e428 	.word	0x0801e428
 8019984:	0801e0e8 	.word	0x0801e0e8
 8019988:	0801e2dc 	.word	0x0801e2dc

0801998c <__lshift>:
 801998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019990:	460c      	mov	r4, r1
 8019992:	6849      	ldr	r1, [r1, #4]
 8019994:	6923      	ldr	r3, [r4, #16]
 8019996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801999a:	68a3      	ldr	r3, [r4, #8]
 801999c:	4607      	mov	r7, r0
 801999e:	4691      	mov	r9, r2
 80199a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80199a4:	f108 0601 	add.w	r6, r8, #1
 80199a8:	42b3      	cmp	r3, r6
 80199aa:	db0b      	blt.n	80199c4 <__lshift+0x38>
 80199ac:	4638      	mov	r0, r7
 80199ae:	f7ff fd91 	bl	80194d4 <_Balloc>
 80199b2:	4605      	mov	r5, r0
 80199b4:	b948      	cbnz	r0, 80199ca <__lshift+0x3e>
 80199b6:	4602      	mov	r2, r0
 80199b8:	4b2a      	ldr	r3, [pc, #168]	; (8019a64 <__lshift+0xd8>)
 80199ba:	482b      	ldr	r0, [pc, #172]	; (8019a68 <__lshift+0xdc>)
 80199bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80199c0:	f7ff f8de 	bl	8018b80 <__assert_func>
 80199c4:	3101      	adds	r1, #1
 80199c6:	005b      	lsls	r3, r3, #1
 80199c8:	e7ee      	b.n	80199a8 <__lshift+0x1c>
 80199ca:	2300      	movs	r3, #0
 80199cc:	f100 0114 	add.w	r1, r0, #20
 80199d0:	f100 0210 	add.w	r2, r0, #16
 80199d4:	4618      	mov	r0, r3
 80199d6:	4553      	cmp	r3, sl
 80199d8:	db37      	blt.n	8019a4a <__lshift+0xbe>
 80199da:	6920      	ldr	r0, [r4, #16]
 80199dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80199e0:	f104 0314 	add.w	r3, r4, #20
 80199e4:	f019 091f 	ands.w	r9, r9, #31
 80199e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80199ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80199f0:	d02f      	beq.n	8019a52 <__lshift+0xc6>
 80199f2:	f1c9 0e20 	rsb	lr, r9, #32
 80199f6:	468a      	mov	sl, r1
 80199f8:	f04f 0c00 	mov.w	ip, #0
 80199fc:	681a      	ldr	r2, [r3, #0]
 80199fe:	fa02 f209 	lsl.w	r2, r2, r9
 8019a02:	ea42 020c 	orr.w	r2, r2, ip
 8019a06:	f84a 2b04 	str.w	r2, [sl], #4
 8019a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a0e:	4298      	cmp	r0, r3
 8019a10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019a14:	d8f2      	bhi.n	80199fc <__lshift+0x70>
 8019a16:	1b03      	subs	r3, r0, r4
 8019a18:	3b15      	subs	r3, #21
 8019a1a:	f023 0303 	bic.w	r3, r3, #3
 8019a1e:	3304      	adds	r3, #4
 8019a20:	f104 0215 	add.w	r2, r4, #21
 8019a24:	4290      	cmp	r0, r2
 8019a26:	bf38      	it	cc
 8019a28:	2304      	movcc	r3, #4
 8019a2a:	f841 c003 	str.w	ip, [r1, r3]
 8019a2e:	f1bc 0f00 	cmp.w	ip, #0
 8019a32:	d001      	beq.n	8019a38 <__lshift+0xac>
 8019a34:	f108 0602 	add.w	r6, r8, #2
 8019a38:	3e01      	subs	r6, #1
 8019a3a:	4638      	mov	r0, r7
 8019a3c:	612e      	str	r6, [r5, #16]
 8019a3e:	4621      	mov	r1, r4
 8019a40:	f7ff fd88 	bl	8019554 <_Bfree>
 8019a44:	4628      	mov	r0, r5
 8019a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019a4e:	3301      	adds	r3, #1
 8019a50:	e7c1      	b.n	80199d6 <__lshift+0x4a>
 8019a52:	3904      	subs	r1, #4
 8019a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a5c:	4298      	cmp	r0, r3
 8019a5e:	d8f9      	bhi.n	8019a54 <__lshift+0xc8>
 8019a60:	e7ea      	b.n	8019a38 <__lshift+0xac>
 8019a62:	bf00      	nop
 8019a64:	0801e251 	.word	0x0801e251
 8019a68:	0801e2dc 	.word	0x0801e2dc

08019a6c <__mcmp>:
 8019a6c:	b530      	push	{r4, r5, lr}
 8019a6e:	6902      	ldr	r2, [r0, #16]
 8019a70:	690c      	ldr	r4, [r1, #16]
 8019a72:	1b12      	subs	r2, r2, r4
 8019a74:	d10e      	bne.n	8019a94 <__mcmp+0x28>
 8019a76:	f100 0314 	add.w	r3, r0, #20
 8019a7a:	3114      	adds	r1, #20
 8019a7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019a80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019a84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019a88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019a8c:	42a5      	cmp	r5, r4
 8019a8e:	d003      	beq.n	8019a98 <__mcmp+0x2c>
 8019a90:	d305      	bcc.n	8019a9e <__mcmp+0x32>
 8019a92:	2201      	movs	r2, #1
 8019a94:	4610      	mov	r0, r2
 8019a96:	bd30      	pop	{r4, r5, pc}
 8019a98:	4283      	cmp	r3, r0
 8019a9a:	d3f3      	bcc.n	8019a84 <__mcmp+0x18>
 8019a9c:	e7fa      	b.n	8019a94 <__mcmp+0x28>
 8019a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019aa2:	e7f7      	b.n	8019a94 <__mcmp+0x28>

08019aa4 <__mdiff>:
 8019aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa8:	460c      	mov	r4, r1
 8019aaa:	4606      	mov	r6, r0
 8019aac:	4611      	mov	r1, r2
 8019aae:	4620      	mov	r0, r4
 8019ab0:	4690      	mov	r8, r2
 8019ab2:	f7ff ffdb 	bl	8019a6c <__mcmp>
 8019ab6:	1e05      	subs	r5, r0, #0
 8019ab8:	d110      	bne.n	8019adc <__mdiff+0x38>
 8019aba:	4629      	mov	r1, r5
 8019abc:	4630      	mov	r0, r6
 8019abe:	f7ff fd09 	bl	80194d4 <_Balloc>
 8019ac2:	b930      	cbnz	r0, 8019ad2 <__mdiff+0x2e>
 8019ac4:	4b3a      	ldr	r3, [pc, #232]	; (8019bb0 <__mdiff+0x10c>)
 8019ac6:	4602      	mov	r2, r0
 8019ac8:	f240 2132 	movw	r1, #562	; 0x232
 8019acc:	4839      	ldr	r0, [pc, #228]	; (8019bb4 <__mdiff+0x110>)
 8019ace:	f7ff f857 	bl	8018b80 <__assert_func>
 8019ad2:	2301      	movs	r3, #1
 8019ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019adc:	bfa4      	itt	ge
 8019ade:	4643      	movge	r3, r8
 8019ae0:	46a0      	movge	r8, r4
 8019ae2:	4630      	mov	r0, r6
 8019ae4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019ae8:	bfa6      	itte	ge
 8019aea:	461c      	movge	r4, r3
 8019aec:	2500      	movge	r5, #0
 8019aee:	2501      	movlt	r5, #1
 8019af0:	f7ff fcf0 	bl	80194d4 <_Balloc>
 8019af4:	b920      	cbnz	r0, 8019b00 <__mdiff+0x5c>
 8019af6:	4b2e      	ldr	r3, [pc, #184]	; (8019bb0 <__mdiff+0x10c>)
 8019af8:	4602      	mov	r2, r0
 8019afa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019afe:	e7e5      	b.n	8019acc <__mdiff+0x28>
 8019b00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019b04:	6926      	ldr	r6, [r4, #16]
 8019b06:	60c5      	str	r5, [r0, #12]
 8019b08:	f104 0914 	add.w	r9, r4, #20
 8019b0c:	f108 0514 	add.w	r5, r8, #20
 8019b10:	f100 0e14 	add.w	lr, r0, #20
 8019b14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019b18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019b1c:	f108 0210 	add.w	r2, r8, #16
 8019b20:	46f2      	mov	sl, lr
 8019b22:	2100      	movs	r1, #0
 8019b24:	f859 3b04 	ldr.w	r3, [r9], #4
 8019b28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019b2c:	fa1f f883 	uxth.w	r8, r3
 8019b30:	fa11 f18b 	uxtah	r1, r1, fp
 8019b34:	0c1b      	lsrs	r3, r3, #16
 8019b36:	eba1 0808 	sub.w	r8, r1, r8
 8019b3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019b3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019b42:	fa1f f888 	uxth.w	r8, r8
 8019b46:	1419      	asrs	r1, r3, #16
 8019b48:	454e      	cmp	r6, r9
 8019b4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019b4e:	f84a 3b04 	str.w	r3, [sl], #4
 8019b52:	d8e7      	bhi.n	8019b24 <__mdiff+0x80>
 8019b54:	1b33      	subs	r3, r6, r4
 8019b56:	3b15      	subs	r3, #21
 8019b58:	f023 0303 	bic.w	r3, r3, #3
 8019b5c:	3304      	adds	r3, #4
 8019b5e:	3415      	adds	r4, #21
 8019b60:	42a6      	cmp	r6, r4
 8019b62:	bf38      	it	cc
 8019b64:	2304      	movcc	r3, #4
 8019b66:	441d      	add	r5, r3
 8019b68:	4473      	add	r3, lr
 8019b6a:	469e      	mov	lr, r3
 8019b6c:	462e      	mov	r6, r5
 8019b6e:	4566      	cmp	r6, ip
 8019b70:	d30e      	bcc.n	8019b90 <__mdiff+0xec>
 8019b72:	f10c 0203 	add.w	r2, ip, #3
 8019b76:	1b52      	subs	r2, r2, r5
 8019b78:	f022 0203 	bic.w	r2, r2, #3
 8019b7c:	3d03      	subs	r5, #3
 8019b7e:	45ac      	cmp	ip, r5
 8019b80:	bf38      	it	cc
 8019b82:	2200      	movcc	r2, #0
 8019b84:	441a      	add	r2, r3
 8019b86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019b8a:	b17b      	cbz	r3, 8019bac <__mdiff+0x108>
 8019b8c:	6107      	str	r7, [r0, #16]
 8019b8e:	e7a3      	b.n	8019ad8 <__mdiff+0x34>
 8019b90:	f856 8b04 	ldr.w	r8, [r6], #4
 8019b94:	fa11 f288 	uxtah	r2, r1, r8
 8019b98:	1414      	asrs	r4, r2, #16
 8019b9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019b9e:	b292      	uxth	r2, r2
 8019ba0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019ba4:	f84e 2b04 	str.w	r2, [lr], #4
 8019ba8:	1421      	asrs	r1, r4, #16
 8019baa:	e7e0      	b.n	8019b6e <__mdiff+0xca>
 8019bac:	3f01      	subs	r7, #1
 8019bae:	e7ea      	b.n	8019b86 <__mdiff+0xe2>
 8019bb0:	0801e251 	.word	0x0801e251
 8019bb4:	0801e2dc 	.word	0x0801e2dc

08019bb8 <__ulp>:
 8019bb8:	b082      	sub	sp, #8
 8019bba:	ed8d 0b00 	vstr	d0, [sp]
 8019bbe:	9b01      	ldr	r3, [sp, #4]
 8019bc0:	4912      	ldr	r1, [pc, #72]	; (8019c0c <__ulp+0x54>)
 8019bc2:	4019      	ands	r1, r3
 8019bc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019bc8:	2900      	cmp	r1, #0
 8019bca:	dd05      	ble.n	8019bd8 <__ulp+0x20>
 8019bcc:	2200      	movs	r2, #0
 8019bce:	460b      	mov	r3, r1
 8019bd0:	ec43 2b10 	vmov	d0, r2, r3
 8019bd4:	b002      	add	sp, #8
 8019bd6:	4770      	bx	lr
 8019bd8:	4249      	negs	r1, r1
 8019bda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019bde:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019be2:	f04f 0200 	mov.w	r2, #0
 8019be6:	f04f 0300 	mov.w	r3, #0
 8019bea:	da04      	bge.n	8019bf6 <__ulp+0x3e>
 8019bec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019bf0:	fa41 f300 	asr.w	r3, r1, r0
 8019bf4:	e7ec      	b.n	8019bd0 <__ulp+0x18>
 8019bf6:	f1a0 0114 	sub.w	r1, r0, #20
 8019bfa:	291e      	cmp	r1, #30
 8019bfc:	bfda      	itte	le
 8019bfe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019c02:	fa20 f101 	lsrle.w	r1, r0, r1
 8019c06:	2101      	movgt	r1, #1
 8019c08:	460a      	mov	r2, r1
 8019c0a:	e7e1      	b.n	8019bd0 <__ulp+0x18>
 8019c0c:	7ff00000 	.word	0x7ff00000

08019c10 <__b2d>:
 8019c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c12:	6905      	ldr	r5, [r0, #16]
 8019c14:	f100 0714 	add.w	r7, r0, #20
 8019c18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019c1c:	1f2e      	subs	r6, r5, #4
 8019c1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019c22:	4620      	mov	r0, r4
 8019c24:	f7ff fd48 	bl	80196b8 <__hi0bits>
 8019c28:	f1c0 0320 	rsb	r3, r0, #32
 8019c2c:	280a      	cmp	r0, #10
 8019c2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019cac <__b2d+0x9c>
 8019c32:	600b      	str	r3, [r1, #0]
 8019c34:	dc14      	bgt.n	8019c60 <__b2d+0x50>
 8019c36:	f1c0 0e0b 	rsb	lr, r0, #11
 8019c3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8019c3e:	42b7      	cmp	r7, r6
 8019c40:	ea41 030c 	orr.w	r3, r1, ip
 8019c44:	bf34      	ite	cc
 8019c46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c4a:	2100      	movcs	r1, #0
 8019c4c:	3015      	adds	r0, #21
 8019c4e:	fa04 f000 	lsl.w	r0, r4, r0
 8019c52:	fa21 f10e 	lsr.w	r1, r1, lr
 8019c56:	ea40 0201 	orr.w	r2, r0, r1
 8019c5a:	ec43 2b10 	vmov	d0, r2, r3
 8019c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c60:	42b7      	cmp	r7, r6
 8019c62:	bf3a      	itte	cc
 8019c64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019c68:	f1a5 0608 	subcc.w	r6, r5, #8
 8019c6c:	2100      	movcs	r1, #0
 8019c6e:	380b      	subs	r0, #11
 8019c70:	d017      	beq.n	8019ca2 <__b2d+0x92>
 8019c72:	f1c0 0c20 	rsb	ip, r0, #32
 8019c76:	fa04 f500 	lsl.w	r5, r4, r0
 8019c7a:	42be      	cmp	r6, r7
 8019c7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8019c80:	ea45 0504 	orr.w	r5, r5, r4
 8019c84:	bf8c      	ite	hi
 8019c86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019c8a:	2400      	movls	r4, #0
 8019c8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019c90:	fa01 f000 	lsl.w	r0, r1, r0
 8019c94:	fa24 f40c 	lsr.w	r4, r4, ip
 8019c98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019c9c:	ea40 0204 	orr.w	r2, r0, r4
 8019ca0:	e7db      	b.n	8019c5a <__b2d+0x4a>
 8019ca2:	ea44 030c 	orr.w	r3, r4, ip
 8019ca6:	460a      	mov	r2, r1
 8019ca8:	e7d7      	b.n	8019c5a <__b2d+0x4a>
 8019caa:	bf00      	nop
 8019cac:	3ff00000 	.word	0x3ff00000

08019cb0 <__d2b>:
 8019cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019cb4:	4689      	mov	r9, r1
 8019cb6:	2101      	movs	r1, #1
 8019cb8:	ec57 6b10 	vmov	r6, r7, d0
 8019cbc:	4690      	mov	r8, r2
 8019cbe:	f7ff fc09 	bl	80194d4 <_Balloc>
 8019cc2:	4604      	mov	r4, r0
 8019cc4:	b930      	cbnz	r0, 8019cd4 <__d2b+0x24>
 8019cc6:	4602      	mov	r2, r0
 8019cc8:	4b25      	ldr	r3, [pc, #148]	; (8019d60 <__d2b+0xb0>)
 8019cca:	4826      	ldr	r0, [pc, #152]	; (8019d64 <__d2b+0xb4>)
 8019ccc:	f240 310a 	movw	r1, #778	; 0x30a
 8019cd0:	f7fe ff56 	bl	8018b80 <__assert_func>
 8019cd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019cdc:	bb35      	cbnz	r5, 8019d2c <__d2b+0x7c>
 8019cde:	2e00      	cmp	r6, #0
 8019ce0:	9301      	str	r3, [sp, #4]
 8019ce2:	d028      	beq.n	8019d36 <__d2b+0x86>
 8019ce4:	4668      	mov	r0, sp
 8019ce6:	9600      	str	r6, [sp, #0]
 8019ce8:	f7ff fd06 	bl	80196f8 <__lo0bits>
 8019cec:	9900      	ldr	r1, [sp, #0]
 8019cee:	b300      	cbz	r0, 8019d32 <__d2b+0x82>
 8019cf0:	9a01      	ldr	r2, [sp, #4]
 8019cf2:	f1c0 0320 	rsb	r3, r0, #32
 8019cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8019cfa:	430b      	orrs	r3, r1
 8019cfc:	40c2      	lsrs	r2, r0
 8019cfe:	6163      	str	r3, [r4, #20]
 8019d00:	9201      	str	r2, [sp, #4]
 8019d02:	9b01      	ldr	r3, [sp, #4]
 8019d04:	61a3      	str	r3, [r4, #24]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	bf14      	ite	ne
 8019d0a:	2202      	movne	r2, #2
 8019d0c:	2201      	moveq	r2, #1
 8019d0e:	6122      	str	r2, [r4, #16]
 8019d10:	b1d5      	cbz	r5, 8019d48 <__d2b+0x98>
 8019d12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019d16:	4405      	add	r5, r0
 8019d18:	f8c9 5000 	str.w	r5, [r9]
 8019d1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019d20:	f8c8 0000 	str.w	r0, [r8]
 8019d24:	4620      	mov	r0, r4
 8019d26:	b003      	add	sp, #12
 8019d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019d30:	e7d5      	b.n	8019cde <__d2b+0x2e>
 8019d32:	6161      	str	r1, [r4, #20]
 8019d34:	e7e5      	b.n	8019d02 <__d2b+0x52>
 8019d36:	a801      	add	r0, sp, #4
 8019d38:	f7ff fcde 	bl	80196f8 <__lo0bits>
 8019d3c:	9b01      	ldr	r3, [sp, #4]
 8019d3e:	6163      	str	r3, [r4, #20]
 8019d40:	2201      	movs	r2, #1
 8019d42:	6122      	str	r2, [r4, #16]
 8019d44:	3020      	adds	r0, #32
 8019d46:	e7e3      	b.n	8019d10 <__d2b+0x60>
 8019d48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019d4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019d50:	f8c9 0000 	str.w	r0, [r9]
 8019d54:	6918      	ldr	r0, [r3, #16]
 8019d56:	f7ff fcaf 	bl	80196b8 <__hi0bits>
 8019d5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019d5e:	e7df      	b.n	8019d20 <__d2b+0x70>
 8019d60:	0801e251 	.word	0x0801e251
 8019d64:	0801e2dc 	.word	0x0801e2dc

08019d68 <__ratio>:
 8019d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d6c:	4688      	mov	r8, r1
 8019d6e:	4669      	mov	r1, sp
 8019d70:	4681      	mov	r9, r0
 8019d72:	f7ff ff4d 	bl	8019c10 <__b2d>
 8019d76:	a901      	add	r1, sp, #4
 8019d78:	4640      	mov	r0, r8
 8019d7a:	ec55 4b10 	vmov	r4, r5, d0
 8019d7e:	f7ff ff47 	bl	8019c10 <__b2d>
 8019d82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019d86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019d8a:	eba3 0c02 	sub.w	ip, r3, r2
 8019d8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019d92:	1a9b      	subs	r3, r3, r2
 8019d94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019d98:	ec51 0b10 	vmov	r0, r1, d0
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	bfd6      	itet	le
 8019da0:	460a      	movle	r2, r1
 8019da2:	462a      	movgt	r2, r5
 8019da4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019da8:	468b      	mov	fp, r1
 8019daa:	462f      	mov	r7, r5
 8019dac:	bfd4      	ite	le
 8019dae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019db2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019db6:	4620      	mov	r0, r4
 8019db8:	ee10 2a10 	vmov	r2, s0
 8019dbc:	465b      	mov	r3, fp
 8019dbe:	4639      	mov	r1, r7
 8019dc0:	f7e6 fd64 	bl	800088c <__aeabi_ddiv>
 8019dc4:	ec41 0b10 	vmov	d0, r0, r1
 8019dc8:	b003      	add	sp, #12
 8019dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dce <__copybits>:
 8019dce:	3901      	subs	r1, #1
 8019dd0:	b570      	push	{r4, r5, r6, lr}
 8019dd2:	1149      	asrs	r1, r1, #5
 8019dd4:	6914      	ldr	r4, [r2, #16]
 8019dd6:	3101      	adds	r1, #1
 8019dd8:	f102 0314 	add.w	r3, r2, #20
 8019ddc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019de0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019de4:	1f05      	subs	r5, r0, #4
 8019de6:	42a3      	cmp	r3, r4
 8019de8:	d30c      	bcc.n	8019e04 <__copybits+0x36>
 8019dea:	1aa3      	subs	r3, r4, r2
 8019dec:	3b11      	subs	r3, #17
 8019dee:	f023 0303 	bic.w	r3, r3, #3
 8019df2:	3211      	adds	r2, #17
 8019df4:	42a2      	cmp	r2, r4
 8019df6:	bf88      	it	hi
 8019df8:	2300      	movhi	r3, #0
 8019dfa:	4418      	add	r0, r3
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	4288      	cmp	r0, r1
 8019e00:	d305      	bcc.n	8019e0e <__copybits+0x40>
 8019e02:	bd70      	pop	{r4, r5, r6, pc}
 8019e04:	f853 6b04 	ldr.w	r6, [r3], #4
 8019e08:	f845 6f04 	str.w	r6, [r5, #4]!
 8019e0c:	e7eb      	b.n	8019de6 <__copybits+0x18>
 8019e0e:	f840 3b04 	str.w	r3, [r0], #4
 8019e12:	e7f4      	b.n	8019dfe <__copybits+0x30>

08019e14 <__any_on>:
 8019e14:	f100 0214 	add.w	r2, r0, #20
 8019e18:	6900      	ldr	r0, [r0, #16]
 8019e1a:	114b      	asrs	r3, r1, #5
 8019e1c:	4298      	cmp	r0, r3
 8019e1e:	b510      	push	{r4, lr}
 8019e20:	db11      	blt.n	8019e46 <__any_on+0x32>
 8019e22:	dd0a      	ble.n	8019e3a <__any_on+0x26>
 8019e24:	f011 011f 	ands.w	r1, r1, #31
 8019e28:	d007      	beq.n	8019e3a <__any_on+0x26>
 8019e2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019e2e:	fa24 f001 	lsr.w	r0, r4, r1
 8019e32:	fa00 f101 	lsl.w	r1, r0, r1
 8019e36:	428c      	cmp	r4, r1
 8019e38:	d10b      	bne.n	8019e52 <__any_on+0x3e>
 8019e3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	d803      	bhi.n	8019e4a <__any_on+0x36>
 8019e42:	2000      	movs	r0, #0
 8019e44:	bd10      	pop	{r4, pc}
 8019e46:	4603      	mov	r3, r0
 8019e48:	e7f7      	b.n	8019e3a <__any_on+0x26>
 8019e4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019e4e:	2900      	cmp	r1, #0
 8019e50:	d0f5      	beq.n	8019e3e <__any_on+0x2a>
 8019e52:	2001      	movs	r0, #1
 8019e54:	e7f6      	b.n	8019e44 <__any_on+0x30>

08019e56 <_calloc_r>:
 8019e56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e58:	fba1 2402 	umull	r2, r4, r1, r2
 8019e5c:	b94c      	cbnz	r4, 8019e72 <_calloc_r+0x1c>
 8019e5e:	4611      	mov	r1, r2
 8019e60:	9201      	str	r2, [sp, #4]
 8019e62:	f7fd fe21 	bl	8017aa8 <_malloc_r>
 8019e66:	9a01      	ldr	r2, [sp, #4]
 8019e68:	4605      	mov	r5, r0
 8019e6a:	b930      	cbnz	r0, 8019e7a <_calloc_r+0x24>
 8019e6c:	4628      	mov	r0, r5
 8019e6e:	b003      	add	sp, #12
 8019e70:	bd30      	pop	{r4, r5, pc}
 8019e72:	220c      	movs	r2, #12
 8019e74:	6002      	str	r2, [r0, #0]
 8019e76:	2500      	movs	r5, #0
 8019e78:	e7f8      	b.n	8019e6c <_calloc_r+0x16>
 8019e7a:	4621      	mov	r1, r4
 8019e7c:	f7fd fdeb 	bl	8017a56 <memset>
 8019e80:	e7f4      	b.n	8019e6c <_calloc_r+0x16>
	...

08019e84 <_free_r>:
 8019e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e86:	2900      	cmp	r1, #0
 8019e88:	d044      	beq.n	8019f14 <_free_r+0x90>
 8019e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e8e:	9001      	str	r0, [sp, #4]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	f1a1 0404 	sub.w	r4, r1, #4
 8019e96:	bfb8      	it	lt
 8019e98:	18e4      	addlt	r4, r4, r3
 8019e9a:	f7ff fb0f 	bl	80194bc <__malloc_lock>
 8019e9e:	4a1e      	ldr	r2, [pc, #120]	; (8019f18 <_free_r+0x94>)
 8019ea0:	9801      	ldr	r0, [sp, #4]
 8019ea2:	6813      	ldr	r3, [r2, #0]
 8019ea4:	b933      	cbnz	r3, 8019eb4 <_free_r+0x30>
 8019ea6:	6063      	str	r3, [r4, #4]
 8019ea8:	6014      	str	r4, [r2, #0]
 8019eaa:	b003      	add	sp, #12
 8019eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019eb0:	f7ff bb0a 	b.w	80194c8 <__malloc_unlock>
 8019eb4:	42a3      	cmp	r3, r4
 8019eb6:	d908      	bls.n	8019eca <_free_r+0x46>
 8019eb8:	6825      	ldr	r5, [r4, #0]
 8019eba:	1961      	adds	r1, r4, r5
 8019ebc:	428b      	cmp	r3, r1
 8019ebe:	bf01      	itttt	eq
 8019ec0:	6819      	ldreq	r1, [r3, #0]
 8019ec2:	685b      	ldreq	r3, [r3, #4]
 8019ec4:	1949      	addeq	r1, r1, r5
 8019ec6:	6021      	streq	r1, [r4, #0]
 8019ec8:	e7ed      	b.n	8019ea6 <_free_r+0x22>
 8019eca:	461a      	mov	r2, r3
 8019ecc:	685b      	ldr	r3, [r3, #4]
 8019ece:	b10b      	cbz	r3, 8019ed4 <_free_r+0x50>
 8019ed0:	42a3      	cmp	r3, r4
 8019ed2:	d9fa      	bls.n	8019eca <_free_r+0x46>
 8019ed4:	6811      	ldr	r1, [r2, #0]
 8019ed6:	1855      	adds	r5, r2, r1
 8019ed8:	42a5      	cmp	r5, r4
 8019eda:	d10b      	bne.n	8019ef4 <_free_r+0x70>
 8019edc:	6824      	ldr	r4, [r4, #0]
 8019ede:	4421      	add	r1, r4
 8019ee0:	1854      	adds	r4, r2, r1
 8019ee2:	42a3      	cmp	r3, r4
 8019ee4:	6011      	str	r1, [r2, #0]
 8019ee6:	d1e0      	bne.n	8019eaa <_free_r+0x26>
 8019ee8:	681c      	ldr	r4, [r3, #0]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	6053      	str	r3, [r2, #4]
 8019eee:	4421      	add	r1, r4
 8019ef0:	6011      	str	r1, [r2, #0]
 8019ef2:	e7da      	b.n	8019eaa <_free_r+0x26>
 8019ef4:	d902      	bls.n	8019efc <_free_r+0x78>
 8019ef6:	230c      	movs	r3, #12
 8019ef8:	6003      	str	r3, [r0, #0]
 8019efa:	e7d6      	b.n	8019eaa <_free_r+0x26>
 8019efc:	6825      	ldr	r5, [r4, #0]
 8019efe:	1961      	adds	r1, r4, r5
 8019f00:	428b      	cmp	r3, r1
 8019f02:	bf04      	itt	eq
 8019f04:	6819      	ldreq	r1, [r3, #0]
 8019f06:	685b      	ldreq	r3, [r3, #4]
 8019f08:	6063      	str	r3, [r4, #4]
 8019f0a:	bf04      	itt	eq
 8019f0c:	1949      	addeq	r1, r1, r5
 8019f0e:	6021      	streq	r1, [r4, #0]
 8019f10:	6054      	str	r4, [r2, #4]
 8019f12:	e7ca      	b.n	8019eaa <_free_r+0x26>
 8019f14:	b003      	add	sp, #12
 8019f16:	bd30      	pop	{r4, r5, pc}
 8019f18:	20011cf8 	.word	0x20011cf8

08019f1c <__ssputs_r>:
 8019f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f20:	688e      	ldr	r6, [r1, #8]
 8019f22:	429e      	cmp	r6, r3
 8019f24:	4682      	mov	sl, r0
 8019f26:	460c      	mov	r4, r1
 8019f28:	4690      	mov	r8, r2
 8019f2a:	461f      	mov	r7, r3
 8019f2c:	d838      	bhi.n	8019fa0 <__ssputs_r+0x84>
 8019f2e:	898a      	ldrh	r2, [r1, #12]
 8019f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f34:	d032      	beq.n	8019f9c <__ssputs_r+0x80>
 8019f36:	6825      	ldr	r5, [r4, #0]
 8019f38:	6909      	ldr	r1, [r1, #16]
 8019f3a:	eba5 0901 	sub.w	r9, r5, r1
 8019f3e:	6965      	ldr	r5, [r4, #20]
 8019f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f48:	3301      	adds	r3, #1
 8019f4a:	444b      	add	r3, r9
 8019f4c:	106d      	asrs	r5, r5, #1
 8019f4e:	429d      	cmp	r5, r3
 8019f50:	bf38      	it	cc
 8019f52:	461d      	movcc	r5, r3
 8019f54:	0553      	lsls	r3, r2, #21
 8019f56:	d531      	bpl.n	8019fbc <__ssputs_r+0xa0>
 8019f58:	4629      	mov	r1, r5
 8019f5a:	f7fd fda5 	bl	8017aa8 <_malloc_r>
 8019f5e:	4606      	mov	r6, r0
 8019f60:	b950      	cbnz	r0, 8019f78 <__ssputs_r+0x5c>
 8019f62:	230c      	movs	r3, #12
 8019f64:	f8ca 3000 	str.w	r3, [sl]
 8019f68:	89a3      	ldrh	r3, [r4, #12]
 8019f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f6e:	81a3      	strh	r3, [r4, #12]
 8019f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f78:	6921      	ldr	r1, [r4, #16]
 8019f7a:	464a      	mov	r2, r9
 8019f7c:	f7fd fd43 	bl	8017a06 <memcpy>
 8019f80:	89a3      	ldrh	r3, [r4, #12]
 8019f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f8a:	81a3      	strh	r3, [r4, #12]
 8019f8c:	6126      	str	r6, [r4, #16]
 8019f8e:	6165      	str	r5, [r4, #20]
 8019f90:	444e      	add	r6, r9
 8019f92:	eba5 0509 	sub.w	r5, r5, r9
 8019f96:	6026      	str	r6, [r4, #0]
 8019f98:	60a5      	str	r5, [r4, #8]
 8019f9a:	463e      	mov	r6, r7
 8019f9c:	42be      	cmp	r6, r7
 8019f9e:	d900      	bls.n	8019fa2 <__ssputs_r+0x86>
 8019fa0:	463e      	mov	r6, r7
 8019fa2:	6820      	ldr	r0, [r4, #0]
 8019fa4:	4632      	mov	r2, r6
 8019fa6:	4641      	mov	r1, r8
 8019fa8:	f7fd fd3b 	bl	8017a22 <memmove>
 8019fac:	68a3      	ldr	r3, [r4, #8]
 8019fae:	1b9b      	subs	r3, r3, r6
 8019fb0:	60a3      	str	r3, [r4, #8]
 8019fb2:	6823      	ldr	r3, [r4, #0]
 8019fb4:	4433      	add	r3, r6
 8019fb6:	6023      	str	r3, [r4, #0]
 8019fb8:	2000      	movs	r0, #0
 8019fba:	e7db      	b.n	8019f74 <__ssputs_r+0x58>
 8019fbc:	462a      	mov	r2, r5
 8019fbe:	f000 fd4d 	bl	801aa5c <_realloc_r>
 8019fc2:	4606      	mov	r6, r0
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	d1e1      	bne.n	8019f8c <__ssputs_r+0x70>
 8019fc8:	6921      	ldr	r1, [r4, #16]
 8019fca:	4650      	mov	r0, sl
 8019fcc:	f7ff ff5a 	bl	8019e84 <_free_r>
 8019fd0:	e7c7      	b.n	8019f62 <__ssputs_r+0x46>
	...

08019fd4 <_svfiprintf_r>:
 8019fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd8:	4698      	mov	r8, r3
 8019fda:	898b      	ldrh	r3, [r1, #12]
 8019fdc:	061b      	lsls	r3, r3, #24
 8019fde:	b09d      	sub	sp, #116	; 0x74
 8019fe0:	4607      	mov	r7, r0
 8019fe2:	460d      	mov	r5, r1
 8019fe4:	4614      	mov	r4, r2
 8019fe6:	d50e      	bpl.n	801a006 <_svfiprintf_r+0x32>
 8019fe8:	690b      	ldr	r3, [r1, #16]
 8019fea:	b963      	cbnz	r3, 801a006 <_svfiprintf_r+0x32>
 8019fec:	2140      	movs	r1, #64	; 0x40
 8019fee:	f7fd fd5b 	bl	8017aa8 <_malloc_r>
 8019ff2:	6028      	str	r0, [r5, #0]
 8019ff4:	6128      	str	r0, [r5, #16]
 8019ff6:	b920      	cbnz	r0, 801a002 <_svfiprintf_r+0x2e>
 8019ff8:	230c      	movs	r3, #12
 8019ffa:	603b      	str	r3, [r7, #0]
 8019ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a000:	e0d1      	b.n	801a1a6 <_svfiprintf_r+0x1d2>
 801a002:	2340      	movs	r3, #64	; 0x40
 801a004:	616b      	str	r3, [r5, #20]
 801a006:	2300      	movs	r3, #0
 801a008:	9309      	str	r3, [sp, #36]	; 0x24
 801a00a:	2320      	movs	r3, #32
 801a00c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a010:	f8cd 800c 	str.w	r8, [sp, #12]
 801a014:	2330      	movs	r3, #48	; 0x30
 801a016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a1c0 <_svfiprintf_r+0x1ec>
 801a01a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a01e:	f04f 0901 	mov.w	r9, #1
 801a022:	4623      	mov	r3, r4
 801a024:	469a      	mov	sl, r3
 801a026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a02a:	b10a      	cbz	r2, 801a030 <_svfiprintf_r+0x5c>
 801a02c:	2a25      	cmp	r2, #37	; 0x25
 801a02e:	d1f9      	bne.n	801a024 <_svfiprintf_r+0x50>
 801a030:	ebba 0b04 	subs.w	fp, sl, r4
 801a034:	d00b      	beq.n	801a04e <_svfiprintf_r+0x7a>
 801a036:	465b      	mov	r3, fp
 801a038:	4622      	mov	r2, r4
 801a03a:	4629      	mov	r1, r5
 801a03c:	4638      	mov	r0, r7
 801a03e:	f7ff ff6d 	bl	8019f1c <__ssputs_r>
 801a042:	3001      	adds	r0, #1
 801a044:	f000 80aa 	beq.w	801a19c <_svfiprintf_r+0x1c8>
 801a048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a04a:	445a      	add	r2, fp
 801a04c:	9209      	str	r2, [sp, #36]	; 0x24
 801a04e:	f89a 3000 	ldrb.w	r3, [sl]
 801a052:	2b00      	cmp	r3, #0
 801a054:	f000 80a2 	beq.w	801a19c <_svfiprintf_r+0x1c8>
 801a058:	2300      	movs	r3, #0
 801a05a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a062:	f10a 0a01 	add.w	sl, sl, #1
 801a066:	9304      	str	r3, [sp, #16]
 801a068:	9307      	str	r3, [sp, #28]
 801a06a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a06e:	931a      	str	r3, [sp, #104]	; 0x68
 801a070:	4654      	mov	r4, sl
 801a072:	2205      	movs	r2, #5
 801a074:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a078:	4851      	ldr	r0, [pc, #324]	; (801a1c0 <_svfiprintf_r+0x1ec>)
 801a07a:	f7e6 f8d1 	bl	8000220 <memchr>
 801a07e:	9a04      	ldr	r2, [sp, #16]
 801a080:	b9d8      	cbnz	r0, 801a0ba <_svfiprintf_r+0xe6>
 801a082:	06d0      	lsls	r0, r2, #27
 801a084:	bf44      	itt	mi
 801a086:	2320      	movmi	r3, #32
 801a088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a08c:	0711      	lsls	r1, r2, #28
 801a08e:	bf44      	itt	mi
 801a090:	232b      	movmi	r3, #43	; 0x2b
 801a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a096:	f89a 3000 	ldrb.w	r3, [sl]
 801a09a:	2b2a      	cmp	r3, #42	; 0x2a
 801a09c:	d015      	beq.n	801a0ca <_svfiprintf_r+0xf6>
 801a09e:	9a07      	ldr	r2, [sp, #28]
 801a0a0:	4654      	mov	r4, sl
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	f04f 0c0a 	mov.w	ip, #10
 801a0a8:	4621      	mov	r1, r4
 801a0aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0ae:	3b30      	subs	r3, #48	; 0x30
 801a0b0:	2b09      	cmp	r3, #9
 801a0b2:	d94e      	bls.n	801a152 <_svfiprintf_r+0x17e>
 801a0b4:	b1b0      	cbz	r0, 801a0e4 <_svfiprintf_r+0x110>
 801a0b6:	9207      	str	r2, [sp, #28]
 801a0b8:	e014      	b.n	801a0e4 <_svfiprintf_r+0x110>
 801a0ba:	eba0 0308 	sub.w	r3, r0, r8
 801a0be:	fa09 f303 	lsl.w	r3, r9, r3
 801a0c2:	4313      	orrs	r3, r2
 801a0c4:	9304      	str	r3, [sp, #16]
 801a0c6:	46a2      	mov	sl, r4
 801a0c8:	e7d2      	b.n	801a070 <_svfiprintf_r+0x9c>
 801a0ca:	9b03      	ldr	r3, [sp, #12]
 801a0cc:	1d19      	adds	r1, r3, #4
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	9103      	str	r1, [sp, #12]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	bfbb      	ittet	lt
 801a0d6:	425b      	neglt	r3, r3
 801a0d8:	f042 0202 	orrlt.w	r2, r2, #2
 801a0dc:	9307      	strge	r3, [sp, #28]
 801a0de:	9307      	strlt	r3, [sp, #28]
 801a0e0:	bfb8      	it	lt
 801a0e2:	9204      	strlt	r2, [sp, #16]
 801a0e4:	7823      	ldrb	r3, [r4, #0]
 801a0e6:	2b2e      	cmp	r3, #46	; 0x2e
 801a0e8:	d10c      	bne.n	801a104 <_svfiprintf_r+0x130>
 801a0ea:	7863      	ldrb	r3, [r4, #1]
 801a0ec:	2b2a      	cmp	r3, #42	; 0x2a
 801a0ee:	d135      	bne.n	801a15c <_svfiprintf_r+0x188>
 801a0f0:	9b03      	ldr	r3, [sp, #12]
 801a0f2:	1d1a      	adds	r2, r3, #4
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	9203      	str	r2, [sp, #12]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	bfb8      	it	lt
 801a0fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a100:	3402      	adds	r4, #2
 801a102:	9305      	str	r3, [sp, #20]
 801a104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a1d0 <_svfiprintf_r+0x1fc>
 801a108:	7821      	ldrb	r1, [r4, #0]
 801a10a:	2203      	movs	r2, #3
 801a10c:	4650      	mov	r0, sl
 801a10e:	f7e6 f887 	bl	8000220 <memchr>
 801a112:	b140      	cbz	r0, 801a126 <_svfiprintf_r+0x152>
 801a114:	2340      	movs	r3, #64	; 0x40
 801a116:	eba0 000a 	sub.w	r0, r0, sl
 801a11a:	fa03 f000 	lsl.w	r0, r3, r0
 801a11e:	9b04      	ldr	r3, [sp, #16]
 801a120:	4303      	orrs	r3, r0
 801a122:	3401      	adds	r4, #1
 801a124:	9304      	str	r3, [sp, #16]
 801a126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a12a:	4826      	ldr	r0, [pc, #152]	; (801a1c4 <_svfiprintf_r+0x1f0>)
 801a12c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a130:	2206      	movs	r2, #6
 801a132:	f7e6 f875 	bl	8000220 <memchr>
 801a136:	2800      	cmp	r0, #0
 801a138:	d038      	beq.n	801a1ac <_svfiprintf_r+0x1d8>
 801a13a:	4b23      	ldr	r3, [pc, #140]	; (801a1c8 <_svfiprintf_r+0x1f4>)
 801a13c:	bb1b      	cbnz	r3, 801a186 <_svfiprintf_r+0x1b2>
 801a13e:	9b03      	ldr	r3, [sp, #12]
 801a140:	3307      	adds	r3, #7
 801a142:	f023 0307 	bic.w	r3, r3, #7
 801a146:	3308      	adds	r3, #8
 801a148:	9303      	str	r3, [sp, #12]
 801a14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a14c:	4433      	add	r3, r6
 801a14e:	9309      	str	r3, [sp, #36]	; 0x24
 801a150:	e767      	b.n	801a022 <_svfiprintf_r+0x4e>
 801a152:	fb0c 3202 	mla	r2, ip, r2, r3
 801a156:	460c      	mov	r4, r1
 801a158:	2001      	movs	r0, #1
 801a15a:	e7a5      	b.n	801a0a8 <_svfiprintf_r+0xd4>
 801a15c:	2300      	movs	r3, #0
 801a15e:	3401      	adds	r4, #1
 801a160:	9305      	str	r3, [sp, #20]
 801a162:	4619      	mov	r1, r3
 801a164:	f04f 0c0a 	mov.w	ip, #10
 801a168:	4620      	mov	r0, r4
 801a16a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a16e:	3a30      	subs	r2, #48	; 0x30
 801a170:	2a09      	cmp	r2, #9
 801a172:	d903      	bls.n	801a17c <_svfiprintf_r+0x1a8>
 801a174:	2b00      	cmp	r3, #0
 801a176:	d0c5      	beq.n	801a104 <_svfiprintf_r+0x130>
 801a178:	9105      	str	r1, [sp, #20]
 801a17a:	e7c3      	b.n	801a104 <_svfiprintf_r+0x130>
 801a17c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a180:	4604      	mov	r4, r0
 801a182:	2301      	movs	r3, #1
 801a184:	e7f0      	b.n	801a168 <_svfiprintf_r+0x194>
 801a186:	ab03      	add	r3, sp, #12
 801a188:	9300      	str	r3, [sp, #0]
 801a18a:	462a      	mov	r2, r5
 801a18c:	4b0f      	ldr	r3, [pc, #60]	; (801a1cc <_svfiprintf_r+0x1f8>)
 801a18e:	a904      	add	r1, sp, #16
 801a190:	4638      	mov	r0, r7
 801a192:	f3af 8000 	nop.w
 801a196:	1c42      	adds	r2, r0, #1
 801a198:	4606      	mov	r6, r0
 801a19a:	d1d6      	bne.n	801a14a <_svfiprintf_r+0x176>
 801a19c:	89ab      	ldrh	r3, [r5, #12]
 801a19e:	065b      	lsls	r3, r3, #25
 801a1a0:	f53f af2c 	bmi.w	8019ffc <_svfiprintf_r+0x28>
 801a1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1a6:	b01d      	add	sp, #116	; 0x74
 801a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ac:	ab03      	add	r3, sp, #12
 801a1ae:	9300      	str	r3, [sp, #0]
 801a1b0:	462a      	mov	r2, r5
 801a1b2:	4b06      	ldr	r3, [pc, #24]	; (801a1cc <_svfiprintf_r+0x1f8>)
 801a1b4:	a904      	add	r1, sp, #16
 801a1b6:	4638      	mov	r0, r7
 801a1b8:	f000 f9d4 	bl	801a564 <_printf_i>
 801a1bc:	e7eb      	b.n	801a196 <_svfiprintf_r+0x1c2>
 801a1be:	bf00      	nop
 801a1c0:	0801e434 	.word	0x0801e434
 801a1c4:	0801e43e 	.word	0x0801e43e
 801a1c8:	00000000 	.word	0x00000000
 801a1cc:	08019f1d 	.word	0x08019f1d
 801a1d0:	0801e43a 	.word	0x0801e43a

0801a1d4 <__sfputc_r>:
 801a1d4:	6893      	ldr	r3, [r2, #8]
 801a1d6:	3b01      	subs	r3, #1
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	b410      	push	{r4}
 801a1dc:	6093      	str	r3, [r2, #8]
 801a1de:	da08      	bge.n	801a1f2 <__sfputc_r+0x1e>
 801a1e0:	6994      	ldr	r4, [r2, #24]
 801a1e2:	42a3      	cmp	r3, r4
 801a1e4:	db01      	blt.n	801a1ea <__sfputc_r+0x16>
 801a1e6:	290a      	cmp	r1, #10
 801a1e8:	d103      	bne.n	801a1f2 <__sfputc_r+0x1e>
 801a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1ee:	f000 bafb 	b.w	801a7e8 <__swbuf_r>
 801a1f2:	6813      	ldr	r3, [r2, #0]
 801a1f4:	1c58      	adds	r0, r3, #1
 801a1f6:	6010      	str	r0, [r2, #0]
 801a1f8:	7019      	strb	r1, [r3, #0]
 801a1fa:	4608      	mov	r0, r1
 801a1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a200:	4770      	bx	lr

0801a202 <__sfputs_r>:
 801a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a204:	4606      	mov	r6, r0
 801a206:	460f      	mov	r7, r1
 801a208:	4614      	mov	r4, r2
 801a20a:	18d5      	adds	r5, r2, r3
 801a20c:	42ac      	cmp	r4, r5
 801a20e:	d101      	bne.n	801a214 <__sfputs_r+0x12>
 801a210:	2000      	movs	r0, #0
 801a212:	e007      	b.n	801a224 <__sfputs_r+0x22>
 801a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a218:	463a      	mov	r2, r7
 801a21a:	4630      	mov	r0, r6
 801a21c:	f7ff ffda 	bl	801a1d4 <__sfputc_r>
 801a220:	1c43      	adds	r3, r0, #1
 801a222:	d1f3      	bne.n	801a20c <__sfputs_r+0xa>
 801a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a228 <_vfiprintf_r>:
 801a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a22c:	460d      	mov	r5, r1
 801a22e:	b09d      	sub	sp, #116	; 0x74
 801a230:	4614      	mov	r4, r2
 801a232:	4698      	mov	r8, r3
 801a234:	4606      	mov	r6, r0
 801a236:	b118      	cbz	r0, 801a240 <_vfiprintf_r+0x18>
 801a238:	6983      	ldr	r3, [r0, #24]
 801a23a:	b90b      	cbnz	r3, 801a240 <_vfiprintf_r+0x18>
 801a23c:	f7fd fb0e 	bl	801785c <__sinit>
 801a240:	4b89      	ldr	r3, [pc, #548]	; (801a468 <_vfiprintf_r+0x240>)
 801a242:	429d      	cmp	r5, r3
 801a244:	d11b      	bne.n	801a27e <_vfiprintf_r+0x56>
 801a246:	6875      	ldr	r5, [r6, #4]
 801a248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a24a:	07d9      	lsls	r1, r3, #31
 801a24c:	d405      	bmi.n	801a25a <_vfiprintf_r+0x32>
 801a24e:	89ab      	ldrh	r3, [r5, #12]
 801a250:	059a      	lsls	r2, r3, #22
 801a252:	d402      	bmi.n	801a25a <_vfiprintf_r+0x32>
 801a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a256:	f7fd fbc4 	bl	80179e2 <__retarget_lock_acquire_recursive>
 801a25a:	89ab      	ldrh	r3, [r5, #12]
 801a25c:	071b      	lsls	r3, r3, #28
 801a25e:	d501      	bpl.n	801a264 <_vfiprintf_r+0x3c>
 801a260:	692b      	ldr	r3, [r5, #16]
 801a262:	b9eb      	cbnz	r3, 801a2a0 <_vfiprintf_r+0x78>
 801a264:	4629      	mov	r1, r5
 801a266:	4630      	mov	r0, r6
 801a268:	f000 fb1e 	bl	801a8a8 <__swsetup_r>
 801a26c:	b1c0      	cbz	r0, 801a2a0 <_vfiprintf_r+0x78>
 801a26e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a270:	07dc      	lsls	r4, r3, #31
 801a272:	d50e      	bpl.n	801a292 <_vfiprintf_r+0x6a>
 801a274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a278:	b01d      	add	sp, #116	; 0x74
 801a27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a27e:	4b7b      	ldr	r3, [pc, #492]	; (801a46c <_vfiprintf_r+0x244>)
 801a280:	429d      	cmp	r5, r3
 801a282:	d101      	bne.n	801a288 <_vfiprintf_r+0x60>
 801a284:	68b5      	ldr	r5, [r6, #8]
 801a286:	e7df      	b.n	801a248 <_vfiprintf_r+0x20>
 801a288:	4b79      	ldr	r3, [pc, #484]	; (801a470 <_vfiprintf_r+0x248>)
 801a28a:	429d      	cmp	r5, r3
 801a28c:	bf08      	it	eq
 801a28e:	68f5      	ldreq	r5, [r6, #12]
 801a290:	e7da      	b.n	801a248 <_vfiprintf_r+0x20>
 801a292:	89ab      	ldrh	r3, [r5, #12]
 801a294:	0598      	lsls	r0, r3, #22
 801a296:	d4ed      	bmi.n	801a274 <_vfiprintf_r+0x4c>
 801a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a29a:	f7fd fba3 	bl	80179e4 <__retarget_lock_release_recursive>
 801a29e:	e7e9      	b.n	801a274 <_vfiprintf_r+0x4c>
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a2a4:	2320      	movs	r3, #32
 801a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801a2ae:	2330      	movs	r3, #48	; 0x30
 801a2b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a474 <_vfiprintf_r+0x24c>
 801a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a2b8:	f04f 0901 	mov.w	r9, #1
 801a2bc:	4623      	mov	r3, r4
 801a2be:	469a      	mov	sl, r3
 801a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a2c4:	b10a      	cbz	r2, 801a2ca <_vfiprintf_r+0xa2>
 801a2c6:	2a25      	cmp	r2, #37	; 0x25
 801a2c8:	d1f9      	bne.n	801a2be <_vfiprintf_r+0x96>
 801a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 801a2ce:	d00b      	beq.n	801a2e8 <_vfiprintf_r+0xc0>
 801a2d0:	465b      	mov	r3, fp
 801a2d2:	4622      	mov	r2, r4
 801a2d4:	4629      	mov	r1, r5
 801a2d6:	4630      	mov	r0, r6
 801a2d8:	f7ff ff93 	bl	801a202 <__sfputs_r>
 801a2dc:	3001      	adds	r0, #1
 801a2de:	f000 80aa 	beq.w	801a436 <_vfiprintf_r+0x20e>
 801a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2e4:	445a      	add	r2, fp
 801a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 801a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	f000 80a2 	beq.w	801a436 <_vfiprintf_r+0x20e>
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2fc:	f10a 0a01 	add.w	sl, sl, #1
 801a300:	9304      	str	r3, [sp, #16]
 801a302:	9307      	str	r3, [sp, #28]
 801a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a308:	931a      	str	r3, [sp, #104]	; 0x68
 801a30a:	4654      	mov	r4, sl
 801a30c:	2205      	movs	r2, #5
 801a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a312:	4858      	ldr	r0, [pc, #352]	; (801a474 <_vfiprintf_r+0x24c>)
 801a314:	f7e5 ff84 	bl	8000220 <memchr>
 801a318:	9a04      	ldr	r2, [sp, #16]
 801a31a:	b9d8      	cbnz	r0, 801a354 <_vfiprintf_r+0x12c>
 801a31c:	06d1      	lsls	r1, r2, #27
 801a31e:	bf44      	itt	mi
 801a320:	2320      	movmi	r3, #32
 801a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a326:	0713      	lsls	r3, r2, #28
 801a328:	bf44      	itt	mi
 801a32a:	232b      	movmi	r3, #43	; 0x2b
 801a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a330:	f89a 3000 	ldrb.w	r3, [sl]
 801a334:	2b2a      	cmp	r3, #42	; 0x2a
 801a336:	d015      	beq.n	801a364 <_vfiprintf_r+0x13c>
 801a338:	9a07      	ldr	r2, [sp, #28]
 801a33a:	4654      	mov	r4, sl
 801a33c:	2000      	movs	r0, #0
 801a33e:	f04f 0c0a 	mov.w	ip, #10
 801a342:	4621      	mov	r1, r4
 801a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a348:	3b30      	subs	r3, #48	; 0x30
 801a34a:	2b09      	cmp	r3, #9
 801a34c:	d94e      	bls.n	801a3ec <_vfiprintf_r+0x1c4>
 801a34e:	b1b0      	cbz	r0, 801a37e <_vfiprintf_r+0x156>
 801a350:	9207      	str	r2, [sp, #28]
 801a352:	e014      	b.n	801a37e <_vfiprintf_r+0x156>
 801a354:	eba0 0308 	sub.w	r3, r0, r8
 801a358:	fa09 f303 	lsl.w	r3, r9, r3
 801a35c:	4313      	orrs	r3, r2
 801a35e:	9304      	str	r3, [sp, #16]
 801a360:	46a2      	mov	sl, r4
 801a362:	e7d2      	b.n	801a30a <_vfiprintf_r+0xe2>
 801a364:	9b03      	ldr	r3, [sp, #12]
 801a366:	1d19      	adds	r1, r3, #4
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	9103      	str	r1, [sp, #12]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	bfbb      	ittet	lt
 801a370:	425b      	neglt	r3, r3
 801a372:	f042 0202 	orrlt.w	r2, r2, #2
 801a376:	9307      	strge	r3, [sp, #28]
 801a378:	9307      	strlt	r3, [sp, #28]
 801a37a:	bfb8      	it	lt
 801a37c:	9204      	strlt	r2, [sp, #16]
 801a37e:	7823      	ldrb	r3, [r4, #0]
 801a380:	2b2e      	cmp	r3, #46	; 0x2e
 801a382:	d10c      	bne.n	801a39e <_vfiprintf_r+0x176>
 801a384:	7863      	ldrb	r3, [r4, #1]
 801a386:	2b2a      	cmp	r3, #42	; 0x2a
 801a388:	d135      	bne.n	801a3f6 <_vfiprintf_r+0x1ce>
 801a38a:	9b03      	ldr	r3, [sp, #12]
 801a38c:	1d1a      	adds	r2, r3, #4
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	9203      	str	r2, [sp, #12]
 801a392:	2b00      	cmp	r3, #0
 801a394:	bfb8      	it	lt
 801a396:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a39a:	3402      	adds	r4, #2
 801a39c:	9305      	str	r3, [sp, #20]
 801a39e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a484 <_vfiprintf_r+0x25c>
 801a3a2:	7821      	ldrb	r1, [r4, #0]
 801a3a4:	2203      	movs	r2, #3
 801a3a6:	4650      	mov	r0, sl
 801a3a8:	f7e5 ff3a 	bl	8000220 <memchr>
 801a3ac:	b140      	cbz	r0, 801a3c0 <_vfiprintf_r+0x198>
 801a3ae:	2340      	movs	r3, #64	; 0x40
 801a3b0:	eba0 000a 	sub.w	r0, r0, sl
 801a3b4:	fa03 f000 	lsl.w	r0, r3, r0
 801a3b8:	9b04      	ldr	r3, [sp, #16]
 801a3ba:	4303      	orrs	r3, r0
 801a3bc:	3401      	adds	r4, #1
 801a3be:	9304      	str	r3, [sp, #16]
 801a3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3c4:	482c      	ldr	r0, [pc, #176]	; (801a478 <_vfiprintf_r+0x250>)
 801a3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a3ca:	2206      	movs	r2, #6
 801a3cc:	f7e5 ff28 	bl	8000220 <memchr>
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d03f      	beq.n	801a454 <_vfiprintf_r+0x22c>
 801a3d4:	4b29      	ldr	r3, [pc, #164]	; (801a47c <_vfiprintf_r+0x254>)
 801a3d6:	bb1b      	cbnz	r3, 801a420 <_vfiprintf_r+0x1f8>
 801a3d8:	9b03      	ldr	r3, [sp, #12]
 801a3da:	3307      	adds	r3, #7
 801a3dc:	f023 0307 	bic.w	r3, r3, #7
 801a3e0:	3308      	adds	r3, #8
 801a3e2:	9303      	str	r3, [sp, #12]
 801a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3e6:	443b      	add	r3, r7
 801a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 801a3ea:	e767      	b.n	801a2bc <_vfiprintf_r+0x94>
 801a3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	2001      	movs	r0, #1
 801a3f4:	e7a5      	b.n	801a342 <_vfiprintf_r+0x11a>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	3401      	adds	r4, #1
 801a3fa:	9305      	str	r3, [sp, #20]
 801a3fc:	4619      	mov	r1, r3
 801a3fe:	f04f 0c0a 	mov.w	ip, #10
 801a402:	4620      	mov	r0, r4
 801a404:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a408:	3a30      	subs	r2, #48	; 0x30
 801a40a:	2a09      	cmp	r2, #9
 801a40c:	d903      	bls.n	801a416 <_vfiprintf_r+0x1ee>
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d0c5      	beq.n	801a39e <_vfiprintf_r+0x176>
 801a412:	9105      	str	r1, [sp, #20]
 801a414:	e7c3      	b.n	801a39e <_vfiprintf_r+0x176>
 801a416:	fb0c 2101 	mla	r1, ip, r1, r2
 801a41a:	4604      	mov	r4, r0
 801a41c:	2301      	movs	r3, #1
 801a41e:	e7f0      	b.n	801a402 <_vfiprintf_r+0x1da>
 801a420:	ab03      	add	r3, sp, #12
 801a422:	9300      	str	r3, [sp, #0]
 801a424:	462a      	mov	r2, r5
 801a426:	4b16      	ldr	r3, [pc, #88]	; (801a480 <_vfiprintf_r+0x258>)
 801a428:	a904      	add	r1, sp, #16
 801a42a:	4630      	mov	r0, r6
 801a42c:	f3af 8000 	nop.w
 801a430:	4607      	mov	r7, r0
 801a432:	1c78      	adds	r0, r7, #1
 801a434:	d1d6      	bne.n	801a3e4 <_vfiprintf_r+0x1bc>
 801a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a438:	07d9      	lsls	r1, r3, #31
 801a43a:	d405      	bmi.n	801a448 <_vfiprintf_r+0x220>
 801a43c:	89ab      	ldrh	r3, [r5, #12]
 801a43e:	059a      	lsls	r2, r3, #22
 801a440:	d402      	bmi.n	801a448 <_vfiprintf_r+0x220>
 801a442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a444:	f7fd face 	bl	80179e4 <__retarget_lock_release_recursive>
 801a448:	89ab      	ldrh	r3, [r5, #12]
 801a44a:	065b      	lsls	r3, r3, #25
 801a44c:	f53f af12 	bmi.w	801a274 <_vfiprintf_r+0x4c>
 801a450:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a452:	e711      	b.n	801a278 <_vfiprintf_r+0x50>
 801a454:	ab03      	add	r3, sp, #12
 801a456:	9300      	str	r3, [sp, #0]
 801a458:	462a      	mov	r2, r5
 801a45a:	4b09      	ldr	r3, [pc, #36]	; (801a480 <_vfiprintf_r+0x258>)
 801a45c:	a904      	add	r1, sp, #16
 801a45e:	4630      	mov	r0, r6
 801a460:	f000 f880 	bl	801a564 <_printf_i>
 801a464:	e7e4      	b.n	801a430 <_vfiprintf_r+0x208>
 801a466:	bf00      	nop
 801a468:	0801e0a4 	.word	0x0801e0a4
 801a46c:	0801e0c4 	.word	0x0801e0c4
 801a470:	0801e084 	.word	0x0801e084
 801a474:	0801e434 	.word	0x0801e434
 801a478:	0801e43e 	.word	0x0801e43e
 801a47c:	00000000 	.word	0x00000000
 801a480:	0801a203 	.word	0x0801a203
 801a484:	0801e43a 	.word	0x0801e43a

0801a488 <_printf_common>:
 801a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a48c:	4616      	mov	r6, r2
 801a48e:	4699      	mov	r9, r3
 801a490:	688a      	ldr	r2, [r1, #8]
 801a492:	690b      	ldr	r3, [r1, #16]
 801a494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a498:	4293      	cmp	r3, r2
 801a49a:	bfb8      	it	lt
 801a49c:	4613      	movlt	r3, r2
 801a49e:	6033      	str	r3, [r6, #0]
 801a4a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a4a4:	4607      	mov	r7, r0
 801a4a6:	460c      	mov	r4, r1
 801a4a8:	b10a      	cbz	r2, 801a4ae <_printf_common+0x26>
 801a4aa:	3301      	adds	r3, #1
 801a4ac:	6033      	str	r3, [r6, #0]
 801a4ae:	6823      	ldr	r3, [r4, #0]
 801a4b0:	0699      	lsls	r1, r3, #26
 801a4b2:	bf42      	ittt	mi
 801a4b4:	6833      	ldrmi	r3, [r6, #0]
 801a4b6:	3302      	addmi	r3, #2
 801a4b8:	6033      	strmi	r3, [r6, #0]
 801a4ba:	6825      	ldr	r5, [r4, #0]
 801a4bc:	f015 0506 	ands.w	r5, r5, #6
 801a4c0:	d106      	bne.n	801a4d0 <_printf_common+0x48>
 801a4c2:	f104 0a19 	add.w	sl, r4, #25
 801a4c6:	68e3      	ldr	r3, [r4, #12]
 801a4c8:	6832      	ldr	r2, [r6, #0]
 801a4ca:	1a9b      	subs	r3, r3, r2
 801a4cc:	42ab      	cmp	r3, r5
 801a4ce:	dc26      	bgt.n	801a51e <_printf_common+0x96>
 801a4d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a4d4:	1e13      	subs	r3, r2, #0
 801a4d6:	6822      	ldr	r2, [r4, #0]
 801a4d8:	bf18      	it	ne
 801a4da:	2301      	movne	r3, #1
 801a4dc:	0692      	lsls	r2, r2, #26
 801a4de:	d42b      	bmi.n	801a538 <_printf_common+0xb0>
 801a4e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a4e4:	4649      	mov	r1, r9
 801a4e6:	4638      	mov	r0, r7
 801a4e8:	47c0      	blx	r8
 801a4ea:	3001      	adds	r0, #1
 801a4ec:	d01e      	beq.n	801a52c <_printf_common+0xa4>
 801a4ee:	6823      	ldr	r3, [r4, #0]
 801a4f0:	68e5      	ldr	r5, [r4, #12]
 801a4f2:	6832      	ldr	r2, [r6, #0]
 801a4f4:	f003 0306 	and.w	r3, r3, #6
 801a4f8:	2b04      	cmp	r3, #4
 801a4fa:	bf08      	it	eq
 801a4fc:	1aad      	subeq	r5, r5, r2
 801a4fe:	68a3      	ldr	r3, [r4, #8]
 801a500:	6922      	ldr	r2, [r4, #16]
 801a502:	bf0c      	ite	eq
 801a504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a508:	2500      	movne	r5, #0
 801a50a:	4293      	cmp	r3, r2
 801a50c:	bfc4      	itt	gt
 801a50e:	1a9b      	subgt	r3, r3, r2
 801a510:	18ed      	addgt	r5, r5, r3
 801a512:	2600      	movs	r6, #0
 801a514:	341a      	adds	r4, #26
 801a516:	42b5      	cmp	r5, r6
 801a518:	d11a      	bne.n	801a550 <_printf_common+0xc8>
 801a51a:	2000      	movs	r0, #0
 801a51c:	e008      	b.n	801a530 <_printf_common+0xa8>
 801a51e:	2301      	movs	r3, #1
 801a520:	4652      	mov	r2, sl
 801a522:	4649      	mov	r1, r9
 801a524:	4638      	mov	r0, r7
 801a526:	47c0      	blx	r8
 801a528:	3001      	adds	r0, #1
 801a52a:	d103      	bne.n	801a534 <_printf_common+0xac>
 801a52c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a534:	3501      	adds	r5, #1
 801a536:	e7c6      	b.n	801a4c6 <_printf_common+0x3e>
 801a538:	18e1      	adds	r1, r4, r3
 801a53a:	1c5a      	adds	r2, r3, #1
 801a53c:	2030      	movs	r0, #48	; 0x30
 801a53e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a542:	4422      	add	r2, r4
 801a544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a54c:	3302      	adds	r3, #2
 801a54e:	e7c7      	b.n	801a4e0 <_printf_common+0x58>
 801a550:	2301      	movs	r3, #1
 801a552:	4622      	mov	r2, r4
 801a554:	4649      	mov	r1, r9
 801a556:	4638      	mov	r0, r7
 801a558:	47c0      	blx	r8
 801a55a:	3001      	adds	r0, #1
 801a55c:	d0e6      	beq.n	801a52c <_printf_common+0xa4>
 801a55e:	3601      	adds	r6, #1
 801a560:	e7d9      	b.n	801a516 <_printf_common+0x8e>
	...

0801a564 <_printf_i>:
 801a564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a568:	7e0f      	ldrb	r7, [r1, #24]
 801a56a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a56c:	2f78      	cmp	r7, #120	; 0x78
 801a56e:	4691      	mov	r9, r2
 801a570:	4680      	mov	r8, r0
 801a572:	460c      	mov	r4, r1
 801a574:	469a      	mov	sl, r3
 801a576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a57a:	d807      	bhi.n	801a58c <_printf_i+0x28>
 801a57c:	2f62      	cmp	r7, #98	; 0x62
 801a57e:	d80a      	bhi.n	801a596 <_printf_i+0x32>
 801a580:	2f00      	cmp	r7, #0
 801a582:	f000 80d8 	beq.w	801a736 <_printf_i+0x1d2>
 801a586:	2f58      	cmp	r7, #88	; 0x58
 801a588:	f000 80a3 	beq.w	801a6d2 <_printf_i+0x16e>
 801a58c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a594:	e03a      	b.n	801a60c <_printf_i+0xa8>
 801a596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a59a:	2b15      	cmp	r3, #21
 801a59c:	d8f6      	bhi.n	801a58c <_printf_i+0x28>
 801a59e:	a101      	add	r1, pc, #4	; (adr r1, 801a5a4 <_printf_i+0x40>)
 801a5a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a5a4:	0801a5fd 	.word	0x0801a5fd
 801a5a8:	0801a611 	.word	0x0801a611
 801a5ac:	0801a58d 	.word	0x0801a58d
 801a5b0:	0801a58d 	.word	0x0801a58d
 801a5b4:	0801a58d 	.word	0x0801a58d
 801a5b8:	0801a58d 	.word	0x0801a58d
 801a5bc:	0801a611 	.word	0x0801a611
 801a5c0:	0801a58d 	.word	0x0801a58d
 801a5c4:	0801a58d 	.word	0x0801a58d
 801a5c8:	0801a58d 	.word	0x0801a58d
 801a5cc:	0801a58d 	.word	0x0801a58d
 801a5d0:	0801a71d 	.word	0x0801a71d
 801a5d4:	0801a641 	.word	0x0801a641
 801a5d8:	0801a6ff 	.word	0x0801a6ff
 801a5dc:	0801a58d 	.word	0x0801a58d
 801a5e0:	0801a58d 	.word	0x0801a58d
 801a5e4:	0801a73f 	.word	0x0801a73f
 801a5e8:	0801a58d 	.word	0x0801a58d
 801a5ec:	0801a641 	.word	0x0801a641
 801a5f0:	0801a58d 	.word	0x0801a58d
 801a5f4:	0801a58d 	.word	0x0801a58d
 801a5f8:	0801a707 	.word	0x0801a707
 801a5fc:	682b      	ldr	r3, [r5, #0]
 801a5fe:	1d1a      	adds	r2, r3, #4
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	602a      	str	r2, [r5, #0]
 801a604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a60c:	2301      	movs	r3, #1
 801a60e:	e0a3      	b.n	801a758 <_printf_i+0x1f4>
 801a610:	6820      	ldr	r0, [r4, #0]
 801a612:	6829      	ldr	r1, [r5, #0]
 801a614:	0606      	lsls	r6, r0, #24
 801a616:	f101 0304 	add.w	r3, r1, #4
 801a61a:	d50a      	bpl.n	801a632 <_printf_i+0xce>
 801a61c:	680e      	ldr	r6, [r1, #0]
 801a61e:	602b      	str	r3, [r5, #0]
 801a620:	2e00      	cmp	r6, #0
 801a622:	da03      	bge.n	801a62c <_printf_i+0xc8>
 801a624:	232d      	movs	r3, #45	; 0x2d
 801a626:	4276      	negs	r6, r6
 801a628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a62c:	485e      	ldr	r0, [pc, #376]	; (801a7a8 <_printf_i+0x244>)
 801a62e:	230a      	movs	r3, #10
 801a630:	e019      	b.n	801a666 <_printf_i+0x102>
 801a632:	680e      	ldr	r6, [r1, #0]
 801a634:	602b      	str	r3, [r5, #0]
 801a636:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a63a:	bf18      	it	ne
 801a63c:	b236      	sxthne	r6, r6
 801a63e:	e7ef      	b.n	801a620 <_printf_i+0xbc>
 801a640:	682b      	ldr	r3, [r5, #0]
 801a642:	6820      	ldr	r0, [r4, #0]
 801a644:	1d19      	adds	r1, r3, #4
 801a646:	6029      	str	r1, [r5, #0]
 801a648:	0601      	lsls	r1, r0, #24
 801a64a:	d501      	bpl.n	801a650 <_printf_i+0xec>
 801a64c:	681e      	ldr	r6, [r3, #0]
 801a64e:	e002      	b.n	801a656 <_printf_i+0xf2>
 801a650:	0646      	lsls	r6, r0, #25
 801a652:	d5fb      	bpl.n	801a64c <_printf_i+0xe8>
 801a654:	881e      	ldrh	r6, [r3, #0]
 801a656:	4854      	ldr	r0, [pc, #336]	; (801a7a8 <_printf_i+0x244>)
 801a658:	2f6f      	cmp	r7, #111	; 0x6f
 801a65a:	bf0c      	ite	eq
 801a65c:	2308      	moveq	r3, #8
 801a65e:	230a      	movne	r3, #10
 801a660:	2100      	movs	r1, #0
 801a662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a666:	6865      	ldr	r5, [r4, #4]
 801a668:	60a5      	str	r5, [r4, #8]
 801a66a:	2d00      	cmp	r5, #0
 801a66c:	bfa2      	ittt	ge
 801a66e:	6821      	ldrge	r1, [r4, #0]
 801a670:	f021 0104 	bicge.w	r1, r1, #4
 801a674:	6021      	strge	r1, [r4, #0]
 801a676:	b90e      	cbnz	r6, 801a67c <_printf_i+0x118>
 801a678:	2d00      	cmp	r5, #0
 801a67a:	d04d      	beq.n	801a718 <_printf_i+0x1b4>
 801a67c:	4615      	mov	r5, r2
 801a67e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a682:	fb03 6711 	mls	r7, r3, r1, r6
 801a686:	5dc7      	ldrb	r7, [r0, r7]
 801a688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a68c:	4637      	mov	r7, r6
 801a68e:	42bb      	cmp	r3, r7
 801a690:	460e      	mov	r6, r1
 801a692:	d9f4      	bls.n	801a67e <_printf_i+0x11a>
 801a694:	2b08      	cmp	r3, #8
 801a696:	d10b      	bne.n	801a6b0 <_printf_i+0x14c>
 801a698:	6823      	ldr	r3, [r4, #0]
 801a69a:	07de      	lsls	r6, r3, #31
 801a69c:	d508      	bpl.n	801a6b0 <_printf_i+0x14c>
 801a69e:	6923      	ldr	r3, [r4, #16]
 801a6a0:	6861      	ldr	r1, [r4, #4]
 801a6a2:	4299      	cmp	r1, r3
 801a6a4:	bfde      	ittt	le
 801a6a6:	2330      	movle	r3, #48	; 0x30
 801a6a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a6ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a6b0:	1b52      	subs	r2, r2, r5
 801a6b2:	6122      	str	r2, [r4, #16]
 801a6b4:	f8cd a000 	str.w	sl, [sp]
 801a6b8:	464b      	mov	r3, r9
 801a6ba:	aa03      	add	r2, sp, #12
 801a6bc:	4621      	mov	r1, r4
 801a6be:	4640      	mov	r0, r8
 801a6c0:	f7ff fee2 	bl	801a488 <_printf_common>
 801a6c4:	3001      	adds	r0, #1
 801a6c6:	d14c      	bne.n	801a762 <_printf_i+0x1fe>
 801a6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6cc:	b004      	add	sp, #16
 801a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6d2:	4835      	ldr	r0, [pc, #212]	; (801a7a8 <_printf_i+0x244>)
 801a6d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a6d8:	6829      	ldr	r1, [r5, #0]
 801a6da:	6823      	ldr	r3, [r4, #0]
 801a6dc:	f851 6b04 	ldr.w	r6, [r1], #4
 801a6e0:	6029      	str	r1, [r5, #0]
 801a6e2:	061d      	lsls	r5, r3, #24
 801a6e4:	d514      	bpl.n	801a710 <_printf_i+0x1ac>
 801a6e6:	07df      	lsls	r7, r3, #31
 801a6e8:	bf44      	itt	mi
 801a6ea:	f043 0320 	orrmi.w	r3, r3, #32
 801a6ee:	6023      	strmi	r3, [r4, #0]
 801a6f0:	b91e      	cbnz	r6, 801a6fa <_printf_i+0x196>
 801a6f2:	6823      	ldr	r3, [r4, #0]
 801a6f4:	f023 0320 	bic.w	r3, r3, #32
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	2310      	movs	r3, #16
 801a6fc:	e7b0      	b.n	801a660 <_printf_i+0xfc>
 801a6fe:	6823      	ldr	r3, [r4, #0]
 801a700:	f043 0320 	orr.w	r3, r3, #32
 801a704:	6023      	str	r3, [r4, #0]
 801a706:	2378      	movs	r3, #120	; 0x78
 801a708:	4828      	ldr	r0, [pc, #160]	; (801a7ac <_printf_i+0x248>)
 801a70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a70e:	e7e3      	b.n	801a6d8 <_printf_i+0x174>
 801a710:	0659      	lsls	r1, r3, #25
 801a712:	bf48      	it	mi
 801a714:	b2b6      	uxthmi	r6, r6
 801a716:	e7e6      	b.n	801a6e6 <_printf_i+0x182>
 801a718:	4615      	mov	r5, r2
 801a71a:	e7bb      	b.n	801a694 <_printf_i+0x130>
 801a71c:	682b      	ldr	r3, [r5, #0]
 801a71e:	6826      	ldr	r6, [r4, #0]
 801a720:	6961      	ldr	r1, [r4, #20]
 801a722:	1d18      	adds	r0, r3, #4
 801a724:	6028      	str	r0, [r5, #0]
 801a726:	0635      	lsls	r5, r6, #24
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	d501      	bpl.n	801a730 <_printf_i+0x1cc>
 801a72c:	6019      	str	r1, [r3, #0]
 801a72e:	e002      	b.n	801a736 <_printf_i+0x1d2>
 801a730:	0670      	lsls	r0, r6, #25
 801a732:	d5fb      	bpl.n	801a72c <_printf_i+0x1c8>
 801a734:	8019      	strh	r1, [r3, #0]
 801a736:	2300      	movs	r3, #0
 801a738:	6123      	str	r3, [r4, #16]
 801a73a:	4615      	mov	r5, r2
 801a73c:	e7ba      	b.n	801a6b4 <_printf_i+0x150>
 801a73e:	682b      	ldr	r3, [r5, #0]
 801a740:	1d1a      	adds	r2, r3, #4
 801a742:	602a      	str	r2, [r5, #0]
 801a744:	681d      	ldr	r5, [r3, #0]
 801a746:	6862      	ldr	r2, [r4, #4]
 801a748:	2100      	movs	r1, #0
 801a74a:	4628      	mov	r0, r5
 801a74c:	f7e5 fd68 	bl	8000220 <memchr>
 801a750:	b108      	cbz	r0, 801a756 <_printf_i+0x1f2>
 801a752:	1b40      	subs	r0, r0, r5
 801a754:	6060      	str	r0, [r4, #4]
 801a756:	6863      	ldr	r3, [r4, #4]
 801a758:	6123      	str	r3, [r4, #16]
 801a75a:	2300      	movs	r3, #0
 801a75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a760:	e7a8      	b.n	801a6b4 <_printf_i+0x150>
 801a762:	6923      	ldr	r3, [r4, #16]
 801a764:	462a      	mov	r2, r5
 801a766:	4649      	mov	r1, r9
 801a768:	4640      	mov	r0, r8
 801a76a:	47d0      	blx	sl
 801a76c:	3001      	adds	r0, #1
 801a76e:	d0ab      	beq.n	801a6c8 <_printf_i+0x164>
 801a770:	6823      	ldr	r3, [r4, #0]
 801a772:	079b      	lsls	r3, r3, #30
 801a774:	d413      	bmi.n	801a79e <_printf_i+0x23a>
 801a776:	68e0      	ldr	r0, [r4, #12]
 801a778:	9b03      	ldr	r3, [sp, #12]
 801a77a:	4298      	cmp	r0, r3
 801a77c:	bfb8      	it	lt
 801a77e:	4618      	movlt	r0, r3
 801a780:	e7a4      	b.n	801a6cc <_printf_i+0x168>
 801a782:	2301      	movs	r3, #1
 801a784:	4632      	mov	r2, r6
 801a786:	4649      	mov	r1, r9
 801a788:	4640      	mov	r0, r8
 801a78a:	47d0      	blx	sl
 801a78c:	3001      	adds	r0, #1
 801a78e:	d09b      	beq.n	801a6c8 <_printf_i+0x164>
 801a790:	3501      	adds	r5, #1
 801a792:	68e3      	ldr	r3, [r4, #12]
 801a794:	9903      	ldr	r1, [sp, #12]
 801a796:	1a5b      	subs	r3, r3, r1
 801a798:	42ab      	cmp	r3, r5
 801a79a:	dcf2      	bgt.n	801a782 <_printf_i+0x21e>
 801a79c:	e7eb      	b.n	801a776 <_printf_i+0x212>
 801a79e:	2500      	movs	r5, #0
 801a7a0:	f104 0619 	add.w	r6, r4, #25
 801a7a4:	e7f5      	b.n	801a792 <_printf_i+0x22e>
 801a7a6:	bf00      	nop
 801a7a8:	0801e445 	.word	0x0801e445
 801a7ac:	0801e456 	.word	0x0801e456

0801a7b0 <_read_r>:
 801a7b0:	b538      	push	{r3, r4, r5, lr}
 801a7b2:	4d07      	ldr	r5, [pc, #28]	; (801a7d0 <_read_r+0x20>)
 801a7b4:	4604      	mov	r4, r0
 801a7b6:	4608      	mov	r0, r1
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	602a      	str	r2, [r5, #0]
 801a7be:	461a      	mov	r2, r3
 801a7c0:	f7e7 f944 	bl	8001a4c <_read>
 801a7c4:	1c43      	adds	r3, r0, #1
 801a7c6:	d102      	bne.n	801a7ce <_read_r+0x1e>
 801a7c8:	682b      	ldr	r3, [r5, #0]
 801a7ca:	b103      	cbz	r3, 801a7ce <_read_r+0x1e>
 801a7cc:	6023      	str	r3, [r4, #0]
 801a7ce:	bd38      	pop	{r3, r4, r5, pc}
 801a7d0:	20011d00 	.word	0x20011d00
 801a7d4:	00000000 	.word	0x00000000

0801a7d8 <nan>:
 801a7d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a7e0 <nan+0x8>
 801a7dc:	4770      	bx	lr
 801a7de:	bf00      	nop
 801a7e0:	00000000 	.word	0x00000000
 801a7e4:	7ff80000 	.word	0x7ff80000

0801a7e8 <__swbuf_r>:
 801a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ea:	460e      	mov	r6, r1
 801a7ec:	4614      	mov	r4, r2
 801a7ee:	4605      	mov	r5, r0
 801a7f0:	b118      	cbz	r0, 801a7fa <__swbuf_r+0x12>
 801a7f2:	6983      	ldr	r3, [r0, #24]
 801a7f4:	b90b      	cbnz	r3, 801a7fa <__swbuf_r+0x12>
 801a7f6:	f7fd f831 	bl	801785c <__sinit>
 801a7fa:	4b21      	ldr	r3, [pc, #132]	; (801a880 <__swbuf_r+0x98>)
 801a7fc:	429c      	cmp	r4, r3
 801a7fe:	d12b      	bne.n	801a858 <__swbuf_r+0x70>
 801a800:	686c      	ldr	r4, [r5, #4]
 801a802:	69a3      	ldr	r3, [r4, #24]
 801a804:	60a3      	str	r3, [r4, #8]
 801a806:	89a3      	ldrh	r3, [r4, #12]
 801a808:	071a      	lsls	r2, r3, #28
 801a80a:	d52f      	bpl.n	801a86c <__swbuf_r+0x84>
 801a80c:	6923      	ldr	r3, [r4, #16]
 801a80e:	b36b      	cbz	r3, 801a86c <__swbuf_r+0x84>
 801a810:	6923      	ldr	r3, [r4, #16]
 801a812:	6820      	ldr	r0, [r4, #0]
 801a814:	1ac0      	subs	r0, r0, r3
 801a816:	6963      	ldr	r3, [r4, #20]
 801a818:	b2f6      	uxtb	r6, r6
 801a81a:	4283      	cmp	r3, r0
 801a81c:	4637      	mov	r7, r6
 801a81e:	dc04      	bgt.n	801a82a <__swbuf_r+0x42>
 801a820:	4621      	mov	r1, r4
 801a822:	4628      	mov	r0, r5
 801a824:	f7fe fa60 	bl	8018ce8 <_fflush_r>
 801a828:	bb30      	cbnz	r0, 801a878 <__swbuf_r+0x90>
 801a82a:	68a3      	ldr	r3, [r4, #8]
 801a82c:	3b01      	subs	r3, #1
 801a82e:	60a3      	str	r3, [r4, #8]
 801a830:	6823      	ldr	r3, [r4, #0]
 801a832:	1c5a      	adds	r2, r3, #1
 801a834:	6022      	str	r2, [r4, #0]
 801a836:	701e      	strb	r6, [r3, #0]
 801a838:	6963      	ldr	r3, [r4, #20]
 801a83a:	3001      	adds	r0, #1
 801a83c:	4283      	cmp	r3, r0
 801a83e:	d004      	beq.n	801a84a <__swbuf_r+0x62>
 801a840:	89a3      	ldrh	r3, [r4, #12]
 801a842:	07db      	lsls	r3, r3, #31
 801a844:	d506      	bpl.n	801a854 <__swbuf_r+0x6c>
 801a846:	2e0a      	cmp	r6, #10
 801a848:	d104      	bne.n	801a854 <__swbuf_r+0x6c>
 801a84a:	4621      	mov	r1, r4
 801a84c:	4628      	mov	r0, r5
 801a84e:	f7fe fa4b 	bl	8018ce8 <_fflush_r>
 801a852:	b988      	cbnz	r0, 801a878 <__swbuf_r+0x90>
 801a854:	4638      	mov	r0, r7
 801a856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a858:	4b0a      	ldr	r3, [pc, #40]	; (801a884 <__swbuf_r+0x9c>)
 801a85a:	429c      	cmp	r4, r3
 801a85c:	d101      	bne.n	801a862 <__swbuf_r+0x7a>
 801a85e:	68ac      	ldr	r4, [r5, #8]
 801a860:	e7cf      	b.n	801a802 <__swbuf_r+0x1a>
 801a862:	4b09      	ldr	r3, [pc, #36]	; (801a888 <__swbuf_r+0xa0>)
 801a864:	429c      	cmp	r4, r3
 801a866:	bf08      	it	eq
 801a868:	68ec      	ldreq	r4, [r5, #12]
 801a86a:	e7ca      	b.n	801a802 <__swbuf_r+0x1a>
 801a86c:	4621      	mov	r1, r4
 801a86e:	4628      	mov	r0, r5
 801a870:	f000 f81a 	bl	801a8a8 <__swsetup_r>
 801a874:	2800      	cmp	r0, #0
 801a876:	d0cb      	beq.n	801a810 <__swbuf_r+0x28>
 801a878:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a87c:	e7ea      	b.n	801a854 <__swbuf_r+0x6c>
 801a87e:	bf00      	nop
 801a880:	0801e0a4 	.word	0x0801e0a4
 801a884:	0801e0c4 	.word	0x0801e0c4
 801a888:	0801e084 	.word	0x0801e084

0801a88c <__ascii_wctomb>:
 801a88c:	b149      	cbz	r1, 801a8a2 <__ascii_wctomb+0x16>
 801a88e:	2aff      	cmp	r2, #255	; 0xff
 801a890:	bf85      	ittet	hi
 801a892:	238a      	movhi	r3, #138	; 0x8a
 801a894:	6003      	strhi	r3, [r0, #0]
 801a896:	700a      	strbls	r2, [r1, #0]
 801a898:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a89c:	bf98      	it	ls
 801a89e:	2001      	movls	r0, #1
 801a8a0:	4770      	bx	lr
 801a8a2:	4608      	mov	r0, r1
 801a8a4:	4770      	bx	lr
	...

0801a8a8 <__swsetup_r>:
 801a8a8:	4b32      	ldr	r3, [pc, #200]	; (801a974 <__swsetup_r+0xcc>)
 801a8aa:	b570      	push	{r4, r5, r6, lr}
 801a8ac:	681d      	ldr	r5, [r3, #0]
 801a8ae:	4606      	mov	r6, r0
 801a8b0:	460c      	mov	r4, r1
 801a8b2:	b125      	cbz	r5, 801a8be <__swsetup_r+0x16>
 801a8b4:	69ab      	ldr	r3, [r5, #24]
 801a8b6:	b913      	cbnz	r3, 801a8be <__swsetup_r+0x16>
 801a8b8:	4628      	mov	r0, r5
 801a8ba:	f7fc ffcf 	bl	801785c <__sinit>
 801a8be:	4b2e      	ldr	r3, [pc, #184]	; (801a978 <__swsetup_r+0xd0>)
 801a8c0:	429c      	cmp	r4, r3
 801a8c2:	d10f      	bne.n	801a8e4 <__swsetup_r+0x3c>
 801a8c4:	686c      	ldr	r4, [r5, #4]
 801a8c6:	89a3      	ldrh	r3, [r4, #12]
 801a8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a8cc:	0719      	lsls	r1, r3, #28
 801a8ce:	d42c      	bmi.n	801a92a <__swsetup_r+0x82>
 801a8d0:	06dd      	lsls	r5, r3, #27
 801a8d2:	d411      	bmi.n	801a8f8 <__swsetup_r+0x50>
 801a8d4:	2309      	movs	r3, #9
 801a8d6:	6033      	str	r3, [r6, #0]
 801a8d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a8dc:	81a3      	strh	r3, [r4, #12]
 801a8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8e2:	e03e      	b.n	801a962 <__swsetup_r+0xba>
 801a8e4:	4b25      	ldr	r3, [pc, #148]	; (801a97c <__swsetup_r+0xd4>)
 801a8e6:	429c      	cmp	r4, r3
 801a8e8:	d101      	bne.n	801a8ee <__swsetup_r+0x46>
 801a8ea:	68ac      	ldr	r4, [r5, #8]
 801a8ec:	e7eb      	b.n	801a8c6 <__swsetup_r+0x1e>
 801a8ee:	4b24      	ldr	r3, [pc, #144]	; (801a980 <__swsetup_r+0xd8>)
 801a8f0:	429c      	cmp	r4, r3
 801a8f2:	bf08      	it	eq
 801a8f4:	68ec      	ldreq	r4, [r5, #12]
 801a8f6:	e7e6      	b.n	801a8c6 <__swsetup_r+0x1e>
 801a8f8:	0758      	lsls	r0, r3, #29
 801a8fa:	d512      	bpl.n	801a922 <__swsetup_r+0x7a>
 801a8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a8fe:	b141      	cbz	r1, 801a912 <__swsetup_r+0x6a>
 801a900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a904:	4299      	cmp	r1, r3
 801a906:	d002      	beq.n	801a90e <__swsetup_r+0x66>
 801a908:	4630      	mov	r0, r6
 801a90a:	f7ff fabb 	bl	8019e84 <_free_r>
 801a90e:	2300      	movs	r3, #0
 801a910:	6363      	str	r3, [r4, #52]	; 0x34
 801a912:	89a3      	ldrh	r3, [r4, #12]
 801a914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a918:	81a3      	strh	r3, [r4, #12]
 801a91a:	2300      	movs	r3, #0
 801a91c:	6063      	str	r3, [r4, #4]
 801a91e:	6923      	ldr	r3, [r4, #16]
 801a920:	6023      	str	r3, [r4, #0]
 801a922:	89a3      	ldrh	r3, [r4, #12]
 801a924:	f043 0308 	orr.w	r3, r3, #8
 801a928:	81a3      	strh	r3, [r4, #12]
 801a92a:	6923      	ldr	r3, [r4, #16]
 801a92c:	b94b      	cbnz	r3, 801a942 <__swsetup_r+0x9a>
 801a92e:	89a3      	ldrh	r3, [r4, #12]
 801a930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a938:	d003      	beq.n	801a942 <__swsetup_r+0x9a>
 801a93a:	4621      	mov	r1, r4
 801a93c:	4630      	mov	r0, r6
 801a93e:	f000 f84d 	bl	801a9dc <__smakebuf_r>
 801a942:	89a0      	ldrh	r0, [r4, #12]
 801a944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a948:	f010 0301 	ands.w	r3, r0, #1
 801a94c:	d00a      	beq.n	801a964 <__swsetup_r+0xbc>
 801a94e:	2300      	movs	r3, #0
 801a950:	60a3      	str	r3, [r4, #8]
 801a952:	6963      	ldr	r3, [r4, #20]
 801a954:	425b      	negs	r3, r3
 801a956:	61a3      	str	r3, [r4, #24]
 801a958:	6923      	ldr	r3, [r4, #16]
 801a95a:	b943      	cbnz	r3, 801a96e <__swsetup_r+0xc6>
 801a95c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a960:	d1ba      	bne.n	801a8d8 <__swsetup_r+0x30>
 801a962:	bd70      	pop	{r4, r5, r6, pc}
 801a964:	0781      	lsls	r1, r0, #30
 801a966:	bf58      	it	pl
 801a968:	6963      	ldrpl	r3, [r4, #20]
 801a96a:	60a3      	str	r3, [r4, #8]
 801a96c:	e7f4      	b.n	801a958 <__swsetup_r+0xb0>
 801a96e:	2000      	movs	r0, #0
 801a970:	e7f7      	b.n	801a962 <__swsetup_r+0xba>
 801a972:	bf00      	nop
 801a974:	2000002c 	.word	0x2000002c
 801a978:	0801e0a4 	.word	0x0801e0a4
 801a97c:	0801e0c4 	.word	0x0801e0c4
 801a980:	0801e084 	.word	0x0801e084

0801a984 <abort>:
 801a984:	b508      	push	{r3, lr}
 801a986:	2006      	movs	r0, #6
 801a988:	f000 f8c0 	bl	801ab0c <raise>
 801a98c:	2001      	movs	r0, #1
 801a98e:	f7e7 f853 	bl	8001a38 <_exit>

0801a992 <__swhatbuf_r>:
 801a992:	b570      	push	{r4, r5, r6, lr}
 801a994:	460e      	mov	r6, r1
 801a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a99a:	2900      	cmp	r1, #0
 801a99c:	b096      	sub	sp, #88	; 0x58
 801a99e:	4614      	mov	r4, r2
 801a9a0:	461d      	mov	r5, r3
 801a9a2:	da08      	bge.n	801a9b6 <__swhatbuf_r+0x24>
 801a9a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	602a      	str	r2, [r5, #0]
 801a9ac:	061a      	lsls	r2, r3, #24
 801a9ae:	d410      	bmi.n	801a9d2 <__swhatbuf_r+0x40>
 801a9b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a9b4:	e00e      	b.n	801a9d4 <__swhatbuf_r+0x42>
 801a9b6:	466a      	mov	r2, sp
 801a9b8:	f000 f8c4 	bl	801ab44 <_fstat_r>
 801a9bc:	2800      	cmp	r0, #0
 801a9be:	dbf1      	blt.n	801a9a4 <__swhatbuf_r+0x12>
 801a9c0:	9a01      	ldr	r2, [sp, #4]
 801a9c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a9c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a9ca:	425a      	negs	r2, r3
 801a9cc:	415a      	adcs	r2, r3
 801a9ce:	602a      	str	r2, [r5, #0]
 801a9d0:	e7ee      	b.n	801a9b0 <__swhatbuf_r+0x1e>
 801a9d2:	2340      	movs	r3, #64	; 0x40
 801a9d4:	2000      	movs	r0, #0
 801a9d6:	6023      	str	r3, [r4, #0]
 801a9d8:	b016      	add	sp, #88	; 0x58
 801a9da:	bd70      	pop	{r4, r5, r6, pc}

0801a9dc <__smakebuf_r>:
 801a9dc:	898b      	ldrh	r3, [r1, #12]
 801a9de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a9e0:	079d      	lsls	r5, r3, #30
 801a9e2:	4606      	mov	r6, r0
 801a9e4:	460c      	mov	r4, r1
 801a9e6:	d507      	bpl.n	801a9f8 <__smakebuf_r+0x1c>
 801a9e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a9ec:	6023      	str	r3, [r4, #0]
 801a9ee:	6123      	str	r3, [r4, #16]
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	6163      	str	r3, [r4, #20]
 801a9f4:	b002      	add	sp, #8
 801a9f6:	bd70      	pop	{r4, r5, r6, pc}
 801a9f8:	ab01      	add	r3, sp, #4
 801a9fa:	466a      	mov	r2, sp
 801a9fc:	f7ff ffc9 	bl	801a992 <__swhatbuf_r>
 801aa00:	9900      	ldr	r1, [sp, #0]
 801aa02:	4605      	mov	r5, r0
 801aa04:	4630      	mov	r0, r6
 801aa06:	f7fd f84f 	bl	8017aa8 <_malloc_r>
 801aa0a:	b948      	cbnz	r0, 801aa20 <__smakebuf_r+0x44>
 801aa0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa10:	059a      	lsls	r2, r3, #22
 801aa12:	d4ef      	bmi.n	801a9f4 <__smakebuf_r+0x18>
 801aa14:	f023 0303 	bic.w	r3, r3, #3
 801aa18:	f043 0302 	orr.w	r3, r3, #2
 801aa1c:	81a3      	strh	r3, [r4, #12]
 801aa1e:	e7e3      	b.n	801a9e8 <__smakebuf_r+0xc>
 801aa20:	4b0d      	ldr	r3, [pc, #52]	; (801aa58 <__smakebuf_r+0x7c>)
 801aa22:	62b3      	str	r3, [r6, #40]	; 0x28
 801aa24:	89a3      	ldrh	r3, [r4, #12]
 801aa26:	6020      	str	r0, [r4, #0]
 801aa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa2c:	81a3      	strh	r3, [r4, #12]
 801aa2e:	9b00      	ldr	r3, [sp, #0]
 801aa30:	6163      	str	r3, [r4, #20]
 801aa32:	9b01      	ldr	r3, [sp, #4]
 801aa34:	6120      	str	r0, [r4, #16]
 801aa36:	b15b      	cbz	r3, 801aa50 <__smakebuf_r+0x74>
 801aa38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	f000 f893 	bl	801ab68 <_isatty_r>
 801aa42:	b128      	cbz	r0, 801aa50 <__smakebuf_r+0x74>
 801aa44:	89a3      	ldrh	r3, [r4, #12]
 801aa46:	f023 0303 	bic.w	r3, r3, #3
 801aa4a:	f043 0301 	orr.w	r3, r3, #1
 801aa4e:	81a3      	strh	r3, [r4, #12]
 801aa50:	89a0      	ldrh	r0, [r4, #12]
 801aa52:	4305      	orrs	r5, r0
 801aa54:	81a5      	strh	r5, [r4, #12]
 801aa56:	e7cd      	b.n	801a9f4 <__smakebuf_r+0x18>
 801aa58:	080177f5 	.word	0x080177f5

0801aa5c <_realloc_r>:
 801aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa60:	4680      	mov	r8, r0
 801aa62:	4614      	mov	r4, r2
 801aa64:	460e      	mov	r6, r1
 801aa66:	b921      	cbnz	r1, 801aa72 <_realloc_r+0x16>
 801aa68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa6c:	4611      	mov	r1, r2
 801aa6e:	f7fd b81b 	b.w	8017aa8 <_malloc_r>
 801aa72:	b92a      	cbnz	r2, 801aa80 <_realloc_r+0x24>
 801aa74:	f7ff fa06 	bl	8019e84 <_free_r>
 801aa78:	4625      	mov	r5, r4
 801aa7a:	4628      	mov	r0, r5
 801aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa80:	f000 f882 	bl	801ab88 <_malloc_usable_size_r>
 801aa84:	4284      	cmp	r4, r0
 801aa86:	4607      	mov	r7, r0
 801aa88:	d802      	bhi.n	801aa90 <_realloc_r+0x34>
 801aa8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801aa8e:	d812      	bhi.n	801aab6 <_realloc_r+0x5a>
 801aa90:	4621      	mov	r1, r4
 801aa92:	4640      	mov	r0, r8
 801aa94:	f7fd f808 	bl	8017aa8 <_malloc_r>
 801aa98:	4605      	mov	r5, r0
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	d0ed      	beq.n	801aa7a <_realloc_r+0x1e>
 801aa9e:	42bc      	cmp	r4, r7
 801aaa0:	4622      	mov	r2, r4
 801aaa2:	4631      	mov	r1, r6
 801aaa4:	bf28      	it	cs
 801aaa6:	463a      	movcs	r2, r7
 801aaa8:	f7fc ffad 	bl	8017a06 <memcpy>
 801aaac:	4631      	mov	r1, r6
 801aaae:	4640      	mov	r0, r8
 801aab0:	f7ff f9e8 	bl	8019e84 <_free_r>
 801aab4:	e7e1      	b.n	801aa7a <_realloc_r+0x1e>
 801aab6:	4635      	mov	r5, r6
 801aab8:	e7df      	b.n	801aa7a <_realloc_r+0x1e>

0801aaba <_raise_r>:
 801aaba:	291f      	cmp	r1, #31
 801aabc:	b538      	push	{r3, r4, r5, lr}
 801aabe:	4604      	mov	r4, r0
 801aac0:	460d      	mov	r5, r1
 801aac2:	d904      	bls.n	801aace <_raise_r+0x14>
 801aac4:	2316      	movs	r3, #22
 801aac6:	6003      	str	r3, [r0, #0]
 801aac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aacc:	bd38      	pop	{r3, r4, r5, pc}
 801aace:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801aad0:	b112      	cbz	r2, 801aad8 <_raise_r+0x1e>
 801aad2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aad6:	b94b      	cbnz	r3, 801aaec <_raise_r+0x32>
 801aad8:	4620      	mov	r0, r4
 801aada:	f000 f831 	bl	801ab40 <_getpid_r>
 801aade:	462a      	mov	r2, r5
 801aae0:	4601      	mov	r1, r0
 801aae2:	4620      	mov	r0, r4
 801aae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aae8:	f000 b818 	b.w	801ab1c <_kill_r>
 801aaec:	2b01      	cmp	r3, #1
 801aaee:	d00a      	beq.n	801ab06 <_raise_r+0x4c>
 801aaf0:	1c59      	adds	r1, r3, #1
 801aaf2:	d103      	bne.n	801aafc <_raise_r+0x42>
 801aaf4:	2316      	movs	r3, #22
 801aaf6:	6003      	str	r3, [r0, #0]
 801aaf8:	2001      	movs	r0, #1
 801aafa:	e7e7      	b.n	801aacc <_raise_r+0x12>
 801aafc:	2400      	movs	r4, #0
 801aafe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ab02:	4628      	mov	r0, r5
 801ab04:	4798      	blx	r3
 801ab06:	2000      	movs	r0, #0
 801ab08:	e7e0      	b.n	801aacc <_raise_r+0x12>
	...

0801ab0c <raise>:
 801ab0c:	4b02      	ldr	r3, [pc, #8]	; (801ab18 <raise+0xc>)
 801ab0e:	4601      	mov	r1, r0
 801ab10:	6818      	ldr	r0, [r3, #0]
 801ab12:	f7ff bfd2 	b.w	801aaba <_raise_r>
 801ab16:	bf00      	nop
 801ab18:	2000002c 	.word	0x2000002c

0801ab1c <_kill_r>:
 801ab1c:	b538      	push	{r3, r4, r5, lr}
 801ab1e:	4d07      	ldr	r5, [pc, #28]	; (801ab3c <_kill_r+0x20>)
 801ab20:	2300      	movs	r3, #0
 801ab22:	4604      	mov	r4, r0
 801ab24:	4608      	mov	r0, r1
 801ab26:	4611      	mov	r1, r2
 801ab28:	602b      	str	r3, [r5, #0]
 801ab2a:	f7e6 ff73 	bl	8001a14 <_kill>
 801ab2e:	1c43      	adds	r3, r0, #1
 801ab30:	d102      	bne.n	801ab38 <_kill_r+0x1c>
 801ab32:	682b      	ldr	r3, [r5, #0]
 801ab34:	b103      	cbz	r3, 801ab38 <_kill_r+0x1c>
 801ab36:	6023      	str	r3, [r4, #0]
 801ab38:	bd38      	pop	{r3, r4, r5, pc}
 801ab3a:	bf00      	nop
 801ab3c:	20011d00 	.word	0x20011d00

0801ab40 <_getpid_r>:
 801ab40:	f7e6 bf60 	b.w	8001a04 <_getpid>

0801ab44 <_fstat_r>:
 801ab44:	b538      	push	{r3, r4, r5, lr}
 801ab46:	4d07      	ldr	r5, [pc, #28]	; (801ab64 <_fstat_r+0x20>)
 801ab48:	2300      	movs	r3, #0
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	4608      	mov	r0, r1
 801ab4e:	4611      	mov	r1, r2
 801ab50:	602b      	str	r3, [r5, #0]
 801ab52:	f7e6 ffc0 	bl	8001ad6 <_fstat>
 801ab56:	1c43      	adds	r3, r0, #1
 801ab58:	d102      	bne.n	801ab60 <_fstat_r+0x1c>
 801ab5a:	682b      	ldr	r3, [r5, #0]
 801ab5c:	b103      	cbz	r3, 801ab60 <_fstat_r+0x1c>
 801ab5e:	6023      	str	r3, [r4, #0]
 801ab60:	bd38      	pop	{r3, r4, r5, pc}
 801ab62:	bf00      	nop
 801ab64:	20011d00 	.word	0x20011d00

0801ab68 <_isatty_r>:
 801ab68:	b538      	push	{r3, r4, r5, lr}
 801ab6a:	4d06      	ldr	r5, [pc, #24]	; (801ab84 <_isatty_r+0x1c>)
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	4604      	mov	r4, r0
 801ab70:	4608      	mov	r0, r1
 801ab72:	602b      	str	r3, [r5, #0]
 801ab74:	f7e6 ffbf 	bl	8001af6 <_isatty>
 801ab78:	1c43      	adds	r3, r0, #1
 801ab7a:	d102      	bne.n	801ab82 <_isatty_r+0x1a>
 801ab7c:	682b      	ldr	r3, [r5, #0]
 801ab7e:	b103      	cbz	r3, 801ab82 <_isatty_r+0x1a>
 801ab80:	6023      	str	r3, [r4, #0]
 801ab82:	bd38      	pop	{r3, r4, r5, pc}
 801ab84:	20011d00 	.word	0x20011d00

0801ab88 <_malloc_usable_size_r>:
 801ab88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ab8c:	1f18      	subs	r0, r3, #4
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	bfbc      	itt	lt
 801ab92:	580b      	ldrlt	r3, [r1, r0]
 801ab94:	18c0      	addlt	r0, r0, r3
 801ab96:	4770      	bx	lr

0801ab98 <_init>:
 801ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab9a:	bf00      	nop
 801ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab9e:	bc08      	pop	{r3}
 801aba0:	469e      	mov	lr, r3
 801aba2:	4770      	bx	lr

0801aba4 <_fini>:
 801aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba6:	bf00      	nop
 801aba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abaa:	bc08      	pop	{r3}
 801abac:	469e      	mov	lr, r3
 801abae:	4770      	bx	lr
